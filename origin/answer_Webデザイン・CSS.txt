ネットワークを経由してるから、ローカルビューから サーバーを指定して登録しないとダメなんじゃないかな。
HTML(Hyper Text Markup Language)の略語なので大文字です。 input要素の属性値の問題ではありません。 あくまでスタイルシート側の問題です。 そのスタイルシートは指定されたものか、ブラウザが自前で持っているものなのかはわかりません。 　　ブラウザは何も指定しなくても、デフォルトでスタイルシートを持っています。 　　→ Default style sheet for HTML 4( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　基本的にはwidthは、その祖先要素がstaticなら、表示幅を参照するはずですが、そうでない場合、その要素を縫合している直近の親ブロック要素の幅に従います。スマホの場合は、幅を指定しない場合は解像度を上げて例えば960pxまでは縮小しますが、それ以上はスクロールが必要になります。
うーん、プログラマとしては 　ダイナミック＝動的：リクエストに対してプログラムがレスポンスするものを生成して返す 　スタティック＝静的：リクエストに対してあらかじめ生成していたものをレスポンスする というイメージなんだけど、そっちじゃないのかなぁ。 つまり、現状だとスタイルシートまで WordPress で生成してしまっていてサーバーの負荷を増やしているから、スタイルシートを WordPress が生成しない普通のファイルにしてください、そのときスタイルシートの内容は現状生成している内容と同じにしてください、という意味だと思うのですが。 ただ、こういった「相手の要望にあるこの言葉の意味はなんだろう」という場合は即座にその意味をその相手に確認したほうがいいですよ。ひょっとしたら相手の業界や社内では特殊な意味になっていることもありますから。
詳しくないですが、 すでに問い合わせフォームが出来ていて、それを呼び出したいということでしょうか。 単純に、その問い合わせフォームのページにリンクしてあげればいいのではないでしょうか。 で、そのリンクの部分をCSSなどであなたの希望するデザインしてあげればいいのではないでしょうか。
＞これって、このタグを利用すべき！！！ってルールがありますか？ 　divをそのような用途に使うべきではありません。最大の間違いです。孫引きや他者の説明ではなく、ちゃんと仕様書を読みましょう。 div NOTE:Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors. ( https://www.w3.org/TR/2014/REC-html5-20141028/gr … ) 注意：著者は他に適切な要素がない時の最後の最後の手段としてdiv要素を使用する。より適切な要素を使用することは、読者にはより良いアクセシビリティを、作者にはより良いメンテナンス性につながる。 　言い換えると、divは原則使わない。デザインのためにHTML要素を使用することは、HTML4.01の時代から強く非推奨でしたから、その流れなのです。 　→構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　divについては、こちらの記事がよくわかるかも 【問題2】文書内に埋め込まれた「意味」が不明確( http://www.atmarkit.co.jp/ait/articles/1008/30/n … ) 　のページの1/3あたり・・。 　通常は文書の区切りですから、 <section> 　<h3>この項目の見出し</h3><!-- section要素には必ず一つだけ見出しがある--> 　<p>記事の段落(Paragraph)</p> 　<p>記事の段落(Paragraph)</p> 　<p>記事の段落(Paragraph)</p> </section> <section> 　<h3>この項目の見出し</h3> 　<p>記事の段落(Paragraph)</p> 　<p>記事の段落(Paragraph)</p> 　<p>記事の段落(Paragraph)</p> </section> のようにマークアップされていますから、単純に section h3{border-top:solid 1px red;} とかでよいはず。 　また、一つの記事内なら <section> 　<h3>この項目の見出し</h3> 　<p>記事の段落(Paragraph)</p> 　<p>記事の段落(Paragraph)</p> 　<hr> 　<p>記事の段落(Paragraph)</p> </section> でよい。 HR要素は、 The hr element represents a paragraph-level thematic break, e.g. a scene change in a story, or a transition to another topic within a section of a reference book. ( https://www.w3.org/TR/2014/REC-html5-20141028/gr … ) hr要素は、例えば、段落レベルでの主題の変化を表します。物語の中でシーンが変わったとき、あるいは参考書なら同じセクション内でトピック(話題)が変わるときなど。 　通常はhrはなくてもsectionが変わるので不要なのですが、同じセクション内で話題が変わるときなどに限ってhr要素を使うということです。 ★デザインのためにdiv要素を使うのは絶対に間違っています。そのためにHTML5は、新しい構造を示す要素を追加したのですから・・ ＞いくつかの要素が廃止されたと言う事で、 　ではなくて、デザインのための要素が、文書構造を示す用途に狭められたり意味が込められたということ (例) 斜体を示すi --italic が 　代替音声や気分など、質が異なるテキストを示し、一般の文章から区別されるテキストの範囲を表す。 (例) 太字 b --bold 　特に重要性を伝えることはなく(strongやemをつかう)、代替音声や気分という意味合い(i要素をつかう)もなく、実利的な目的で注目を引きたいテキストの範囲を表す。 というふうに・・ 　それよりも、 「文書をよりよく構造化するために、次の要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」 が重要で、それぞれにちゃんとした目的と使い方が定められています。
lightbox関係のファイルやjQueryが適切な場所にアップロードされているのか、もう一度確認してみましょう。
こんにちは Web上でのブラウザ表示で実現するということでよいのでしょうか？ ご提示のサイトは私の環境では表示できないので、Flash利用のようですね（苦笑） ANo1様も回答なさっているように、ブラウザ上でもいろいろな表現ができるので、HTML、CSSなどを用いることで表示は可能だと思います。 実際に作ろうとなさっているものの内容（方式）やUIをどのようにするかによっても、向いているツールが変わってくる可能性が高そうに思います。 例えば、一番単純そうなこんな（↓）感じで実現するなら・・・ http://www.astroarts.co.jp/hoshinavi/magazine/pl … http://contest.japias.jp/tqj13/130460/main/hayam … 実際には、全体の図を回転させておいて、一部を切り取り表示すれば良いことになりますが、画像の回転はCSS3で可能なので、回転角度の計算等はサーバ側で行ってブラウザは表示するだけという仕組みにすることも可能ですし、javascriptで計算することも可能でしょう。 上記の方法だと、観測点が半球限定になってしまうことや地平線近辺の収差ができるので、こんな（↓）方式も考えられます。 https://www.amazon.com/Stellanova-Illuminated-St … 投影する代わりに球体の内側から見ると思えば良いので、これって考えてみれば、地球儀を内側から眺めるのと同じことになりますよね？ そのように考えると、似たものとして地図表示のサイトが数多くあります。 球体内部から見るので表示する時に反転してあげる必要はありますが、その意味では地図と同じだと考えることが可能ですね。 ただし、地図の場合は部分を拡大してみることが多いので、平面的な連続性を保つことを中心に考えられているといってもよく、自由に回転しようとしても大抵の場合は極地付近では大きくゆがんだものになっていますね。 https://www.google.co.jp/maps/@-60.2088699,77.75 … 天球の場合で自由に観測位置や観測方位（＝観測の季節・時刻）を回転させようとするならば、この歪みを取り除けるほうが有利で、そのためには立体的な投影（球体面）を考慮せざるを得なくなりそうです。 立体視や光源なども考慮したWebGL利用のjavascriptライブラリにthree.jsというものがあるようです。 http://news-lab-trends-experiment.appspot.com/ （↑）の例は球体（＝地球）を外側から観測していますが、視点を内側に持っていけば、ご質問のケースに適合するように思えます。 球体表面の投影は、固定内容であれば最初の例のように画像でも可能なはずですし、もちろん、星の位置の立体座標をもとに計算して都度描く方式でも実現できると思います。 もしも、太陽系の惑星や彗星なども表示しようとお考えならば、これらの位置は固定としては扱えないはずですので、軌道計算や投影計算が必須になるものと考えられます。 上の例と方法的には似ていますが、データの可視化を目的としたjavascriptライブラリにD3.jsというものがあるようです。 http://mbostock.github.io/d3/talk/20111018/azimu … 同じく地球の立体投影の例ですが利用方法の考え方としては同様ですね。 こちらのライブラリはデータの取り扱いを基本としたもので、表示はSVG利用になっているので、個々の点や線をオブジェクトとして保持することが可能です。 このためクリックやホバーに対応できるようなUIを考えていらっしゃるのであれば便利かもしれません。 （↓各描画線をホバーで認識する例：D3.js） https://bost.ocks.org/mike/hive/ 私が思いつくのはこの程度ですが、まずはどのような内容のものになさりたいのかを考えてから、それに見合ったツールにどのようなものがあるかを探すのが良さそうに思います。 現在のWeb環境であれば、かなりのことができるようにはなっているようですが、ゼロから作るよりも、それに向いたツールを活用なさるほうが、要領良くなさりたいことを実現できることと思います。
スクリーンショットのサービスがあります。 https://www.browserstack.com/screenshots https://crossbrowsertesting.com/ 中古の MacBook をヤフオク!で探せば2万円前後で購入できますし、iPhone でなくても iPod touch で動作確認はできます。今後も仕事を続けるのであれば、持っておいた方がよいと思います。
FWはネット用の画像処理ソフトですからＰＳやＩＬで代用できます、というかそちらがメイン 文字の修正がある前提で画像を作る時はPSD形式やAi形式で、データを保存しておきます。
「WordPress.com」での運用ということですね。 「WordPress.com」のサイトを見た感じだと出来なさそうな気がします。 （直接ピーンとくるな言葉がない） ただ、すでにあるテーマのファイルを自作のテーマで上書き修正すれば可能なのかもしれません。 ファイル名など修正できないとそれに合わせないといけないので面倒な気もしますが、、、。
＞「統合開発環境」みたいな大がかりなものを使わずに、 　別に大掛かりでも何でもない。それが一番簡単 　私は、Cygwin 経由で、apache,Perl,PHP,シェル,など入れてますが、結構面倒です。 　CGI---例えばPerlで作成されていれば、CGIの動作確認だけなら、ActivePerl( https://ja.wikipedia.org/wiki/ActivePerl )という方法もありますが、ブラウザでHTTPサーバー経由で行おうとしたら、当然HTTPサーバーが必要になる。
＞htmlとcssを少し勉強したweb初心者です。 　とんでもない過去の遺物を学んでしまった。今うちに、正しい登山ルートに戻りましょう。そのままだと沢に落ちて這い上がれなくなる。 Illustratorは忘れてください。・・HTML4.01の時代(15年以上前1999年勧告)から、「HTMLでページを作らずにプログラムに頼る。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」と言われてきましたが、それはIllustratorで、あたかもDPE( https://ja.wikipedia.org/wiki/DPE )の手法でページを製作することが否定されてきたのです。 　HTMLとは、その歴史や目的「HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」のように、DPEとは全く異なるものなのです。 　Bootstrap(かってはTwitter Bootstrap)と呼ばれていた----は、MediaQueryにも対応してますが、それは、MediaQueryを目的にBoostrapを使うという意味ですらある。MediaQueryとは、ディスプレイの幅、縦横などで表示をガラッと変える機能です。 　幅広のウィンドウでは、header,footerは、最大1280pxでウィンドウ幅に追随して伸縮するが、800pxより狭くなると、asideをsectionの下に配置し、さらに狭くなるとnavも下に回すとか・・。携帯電話(media=handheld,tty)だと、シンプルな画像を極力読み込まないデザインとか。 　ではIllustratorは、何に使うのか・・ 制作先に、完成イメージを伝える手段 ・幅広ディスプレイだと、このデザイン。640～840まではこのデザイン、それ以下はこれ・・ ・ドロー(ベクター)のCGツールですから、SVG( https://ja.wikipedia.org/wiki/Scalable_Vector_Gr … )データを作成する。 ・使用する画像（イラストや背景）の制作（写真はラスター/ビットマップ系のソフト使います。） 　このような、目的になります。私もそのために使っている。ただ、とても軽快とは言えないソフトなので、あまり使わない。SVGはInkscape( https://ja.wikipedia.org/wiki/Inkscape )をよく使いますが。 今のHTMLの制作手順（実は15年前から) 1) 文書構造だけをHTMLで記述していく。HTML4.01では文書構造を記述する要素（タグ）がなかったので、「id属性及び class属性と併用することで、文書に構造を付加( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」せざるを得ませんでした。 　<div class="header">ここはこの文書のヘッダ</div> 　<div class="section">ここは本文 　　<h2>このsectinの見出し</h2> 　　<p>段落</p> 　　<div class="section"> 　　　<h3>サブセクション</h3> 　　</div> 　　<div class="navigation">ナビゲーション(目次)</div> 　　<div class="aside">直接関係ない記事</div> 　</div> 　<div class"footer"></div> とね。こうして文書構造をマークアップしたものをスタイルシートで配置していってました。 ところが、これは万人には理解されたとは言い難く、相変わらず「画像を切り貼りして作られるページが後を絶ちません」でした。 　すなわち「文書内に埋め込まれた「意味」が不明確( http://www.atmarkit.co.jp/ait/articles/1008/30/n … )」 　その反省から、HTML5が誕生した。 あなたの言われる ＞ナブなどのパーツをいろいろコピペで使って ではないことが分かりますよね。 　また、boostrapは、あなたのような場合は全く不向きです。 ・あくまで、HTMLを書き出すツールであること ・スタイルシートは用意されているために、それにあわせてHTMLテンプレートを作る必要がある ・スタイルシートを自在に扱いたければ、もっとシンプルなHTMLのほうが良い ・HTML5ではあるけど、あまり勧められる書き方ではない。 ★HTML5では、divは原則として使わない。使うべきではないとされている。 NOTE:Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors.( https://www.w3.org/TR/2014/REC-html5-20141028/gr … ) (注意(NOTEとは強い警告)　著者は他に適切な要素がない時の最後の最後の手段としてdiv要素を使用することが強く推奨される。より適切な要素を使用することは、ユーザにはより良いアクセシビリティを著者にはより良いメンテナンス性を与える。 ＞イラレのオリジナルデザインの通りに（できるだけ近い形で）制作するにはどうすれば良いでしょうか？ ざっくりした手順をご教授いただければと思います。 　ブーストラップは使いません。トップページ、あるいはランディングページでしょうから必要ない・・ 1) まず率直に文書構造だけをマークアップしたHTMLを書きます。HTML5でしたら、あなたの構造でしたら <body> 　<header> 　　<h1>タイトル</h1> 　　<nav> 　　　<ul> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　</ul> 　　</nav> 　</header> 　<section> 　　<h2>見出し</h2> 　　<section> 　　</section> 　　<section> 　　　<article> 　　　　<header></header> 　　　　<section></section> 　　　</article> 　　</section> 　　<section></section> 　　<section></section> 　</section> 　<footer></footer> </body> というシンプルなものでよい。 あとは、画像がその文章のコンテンツのでなければ、Illustratorで作成した画像を背景や、contentプロパティで並べていけばよい。 　このほうが、とっても簡単ですよ。 　下記はHTML5ではなく、また、目的はスタイルシートの勉強のために、ずいぶん前に作ったHTM4.01ですが、訪問してソースやメニューからスタイルシートを変えたり、印刷プレビューを確認してごらんなさい。IE、firefoxでないと代替スタイルシート利用できませんけど・・ 　ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　これが今の標準的な作り方です。 　あなたにはboostrapは向かない。
本当に困ってるんだったら、urlを提示しないと誰も解らないヨ。
div.a{} が正式な書き方。 半角スペースは、子孫セレクタですよ。 いくつか、口をはさみたい・・ divは、HTML4の時代もそうでしたが、HTML5では基本使いません。!! 　ここを説明していない「屑」な本やサイトが多い。 div要素は、HTML4.01の時代は 「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」でした。 　すなわちナビゲーションのブロックでしたら <div class="navigation"> 　<ul> ですね。意味のないclass="a"なんてしてはならない。 HTML5では、 NOTE:Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors.( https://www.w3.org/TR/html5/grouping-content.htm … ) 　注意：著者は他に適切な要素がない時の最後最後の手段として、divを使うことが強く推奨される。他のより適切な要素を使うことは、ユーザーにはより良いカーアクセス性を、著者にはメンテナンスが容易になる。 　すなわち、HTML4では、<div class="navigation">とせざるを得なかったものが、<nav>と書けということ <nav> 　<ul> 　　<li> だね。 　そして、スタイルシートですが、 color: black; background-color: green; こんなことより先に、絶対に身につけないとならないのは 4 構文と基本データ型 5 セレクタ 6 プロパティ値とカスケーディング、継承の割り当て 　( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) ですよ。 　半角スペースもCSSでは重要な意味がある。
書き方は body { font-size: 11px; } @media (min-width: 400px){ body { font-size: 10px; } } @media (min-width: 480px){ body { font-size: 12px; } }/* ウィンド幅1.2倍 */ @media (min-width: 580px){ body { font-size: 14.4px; } } @media (min-width: 550px){ body { font-size: 17.2px; } } @media (min-width: 590px){ body { font-size: 20.8px} } @media (min-width: 830px){ body { font-size: 25px; } } @media (min-width: 996px){ body { font-size: 30px; } } @media (min-width: 1120px){ body { font-size: 36px; } } @media (min-width: 1430px){ body { font-size: 43x; } } でよい。理解せず受け売りするからそうなる。(^^) ただ、これは通常は行いません。というのは、ウェブはユーザー優先だからです。 ユーザーは基本的には、自分が見やすいフォントサイズを指定しています。そして字が小さいときは、Ctrl+＋で拡大してみてますし、アドオンで画像は除いてフォントだけ拡大するFont Size( https://addons.mozilla.org/ja/firefox/addon/font … )とかしています。 ★ ユーザーが小さくて読みにくいときは、Ctrl+＋、そうでないときはCtrl+－で文字サイズを変えていることを忘れてはなりません。 　私もこの回答フォームに入力するときは、すこし大きくしている。 　逆に言うとフォントサイズでデザインが変わるサイトは作ってはならない。 　なお、ipadやスマホだと、本来のpx(0.26mm)ではありません。 CSS2.1以降のpx＿＿＿＿＿＿＿＿ 　デバイスからの腕の長さ(71cm)離れた距離において、96dpiのピクセル密度におけるデバイス上の1ピクセルとの視角として定められています。実際の画素数とは関係ない。視角は約0.0213度で、1pxは約0.26mm（1/96インチ） ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで でしたが、 　スマホの場合は、320px幅のディスプレイでも、960px・・実質1/3のサイズに縮んで表示されます。また、拡大してみるときはスマホを横にします。 　デザイン上、どうしても合わせたい場合は、ボックスサイズも併せて指定して、段階的にするほうが良いでしょう。 body{font-size:16px;} header,section,footer{max-width:1000px;margin:0 auto;} section{position:relative;} section>*{margin:0 210px;} section>nav,section aside{position:absolute;width:200px;height:100%;top:0;margin:0;} section>nav{left:0;} section>aside{right:0;} @media (max-width: 840px){ 　body{font-size:14px;} 　section>*{margin:0 0 0 210px;} 　section aside{position:static;width:auto;margin:0 0 0 210px;height:auto;} } @media (max-width: 640px){ 　body{font-size:12px;} 　section>*{margin:0;} 　section>nav{position:static;width:auto;margin:0;height:auto;} } とか・・ 簡単なサンプル ★タブは＿に置換してあるので戻してください。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATA(右上)で検証済みHTML5+CSS2.1 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="ORUKA"> ＿<link rel="stylesheet" href="css/style.css"> <style media="screen"> <!-- h1,h2,h3,p,ul{margin:0;line-height:1.6em;} header,footer{background-color:aqua;} section{background-color:silver;} section nav{background-color:lime;} section aside{background-color:orange;} body{font-size:16px;} header,section,footer{max-width:1000px;margin:0 auto;} section{position:relative;min-height:300px;} section>*{margin:0 210px;} section>nav,section aside{position:absolute;width:200px;height:100%;top:0;margin:0;} section>nav{left:0;} section>aside{right:0;} @media (max-width: 900px){ body { font-size: 14.4px; } } @media (max-width: 810px){ body { font-size: 13px; } } @media (max-width: 810px){ ＿body{font-size:14px;} ＿section>*{margin:0 0 0 210px;} ＿section aside{position:static;width:auto;margin:0 0 0 210px;height:auto;} ＿@media (max-width: 660px){ body { font-size: 10.5px; } } } @media (max-width: 590px){ ＿body{font-size:10px;} ＿section>*{margin:0;} ＿section>nav{position:static;width:auto;margin:0;height:auto;} ＿section>aside{margin:0;} } --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#">Some</a></li> ＿＿＿＿<li><a href="#">navigation</a></li> ＿＿＿＿<li><a href="#">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿＿デバイスからの腕の長さ(71cm)離れた距離において、96dpiのピクセル密度におけるデバイス上の1ピクセルとの視角として定められています。実際の画素数とは関係ない。視角は約0.0213度で、1pxは約0.26mm（1/96インチ） ＿＿</p> ＿＿<aside> ＿＿＿<h3>Something aside</h3> ＿＿</aside> ＿＿<nav> ＿＿＿<h3>ナビゲーション(目次)</h3> ＿＿＿<ul> ＿＿＿＿<li><a href="#">Some</a></li> ＿＿＿＿<li><a href="#">navigation</a></li> ＿＿＿＿<li><a href="#">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿＿<p>本文と直接関係ない(asideな)記事</p> ＿</footer> </body> </html>
他のブラウザは？？ firefox,Chrome,safari,operaでは？？ IEだと原因つかめないので、firefox+firebagがよいでしょう。ウェブ開発されていればfirefoxはお使いでしょうから、addonのfirebug入れてください。 　原因は単純に他の要素がかぶっているだけかと
HTML5で文書構造を示す要素は header,section,footer,article,nav,figureなどだけです。 通常は、それらを使ってマークアップします。mainは特殊なので除外してある。 3.1 New Elements( https://www.w3.org/TR/html5-diff/#new-elements ) divはHTML5では原則使いません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから NOTE: Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.4 Grouping content — HTML5( https://www.w3.org/TR/2014/REC-html5-20141028/gr … )］より 訳: 著者は、他に適切な要素がないときの最後の手段としてdiv要素を使用することが強く推奨されます。 　div要素の代わりにより適切な要素を使用することは、読者のためにはより良いアクセシビリティを著者にはメンテナンス性の向上につながります。 　そのうえで、 logo,imageは何なのでしょう。想像するに。。 <body> 　<header> 　　<h1>タイトル</h1> 　　<nav>ナビゲーション(image?)</nav> 　</header> 　<section> 　　・・・【本文】・・・ 　　<nav>目次</nav> 　</section> 　<footer> 　</footer> </body> じゃないかと。。 header,section,footer{ width:90%;min-width:640px;max-width:1000px; margin:0 auto; } header nav{ width:60%; margin-left:40%; position:relative; background-color:lime; height:200px; } header nav:before{ content:url(画像のURL); position:absolute; right:100%; } とか・・
簡単か否かは、あなたのスキルがわからないので・・ 　方法としては、検索するときに送信されるデータ(QUERY_STRING,STDIN,PATH_INFOなど)から、動的に出力する際に、その語句を<span class="searched"></span>で囲み出力し、かつ、Cookieなどでそのセッション中は保持しておく。そして別途スタイルシートを記述しておくのが最も簡単でしょう。 　Wikiは、ご存知のようにPATH_INFOを使用しています。それ同じ様にPATH_INFOを使われるのでしたら、それをcookieに置き換えるとよいでしょう。cookieを消すボタンを忘れないように・・、でないとそのセッション中ずっとハイライトされるよ。
はじめまして。 ボックス自体はデザインできますが、機能させるのはムリだったかと。 http://www.tohoho-web.com/wwwsrch.htm 参考まで。
background-sizeを使います。 とても忙しいので具体的なサンプルなどはも必要なら後日 ところで、話変わりますが・・先の質問もあまりに早く締め切られたため、投稿できませんでしたので追加しておきます。 html,cssでスマホとパソコンで見たときのフォントサイズをそれぞれ変えて表示したい。 ( https://oshiete.goo.ne.jp/qa/9333665.html ) 　用のコメント そもそも根本が間違っている。どこで教えられたのか知りませんが・・ HTMLは元来、 2.2.1 HTMLの略歴 「・・・【中略】・・・HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　とあるようにユーザーエージェントに依存しないものです。それを、わざわざコネくりかえして、ひどいものにしてしまっている。 　そもそも <div id="container1"> <h2>タイトル</h2> <div class="main"> 本文～～～～<br> 　　本文～～～～<br> 　</div> </div> なんマークあっは不要ですし、 ・id="container1"、class="main" 　なんてしてはならないのですよ。これも基本ですが 　『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　であって、デザインのためのものじゃない。もし必要だとしても <div class="header"><div class="section"><div class="navigation"><div class="figure">のように、文書構造を示すために使う。 　どのようなclass名が良いかは、HTML5で「文書構造を示すために導入された新しい要素」を参考にすればよい。 　→ http://standards.mitsue.co.jp/resources/w3c/TR/h … 　そして、それ以外のdivは使わない。HTML5ではdivは原則使うなとなっている。 ・<br> 　これは、まっとうなHTMLでは登場しないはずです。 　それこそ、スタイルシートで調整すれば済む話で，段落が変われば必ず<p><p>段落--Paragraphでマークアップしなければ、文書構造をマークアップするHYTMLの意味がない。 　divは使う必要はないです。文書構造/論理構造を示したほうが、様々な理由、特に検索エンジン対策のためにもよいでしょう。<div class="aside">とあれば検索エンジンは、本文とは無関係だと認識してくれるし、<div class="section">だと本文と認識してくれる。そのためにdivは使うのです。 【本題】サンプルは後程、時間が取れるときに 　この場合、mediaqueryも関係ありません。 　スマホの場合はディスプレイの解像度が高いために、ディスプレイ幅は320pxでも980pxとして縮小して表示してしまうので文字が小さくなってしまうのです。 　その場合は、スマホのブラウザの機能であるviewportを使います。 　また、携帯電話は、PCやスマホと異なり、mediaはhandheld/ttyになります。 HTML/CSS本来の目的で作成すると 1) 率直にHTMLで文書構造（論理構造）をマークアップする。 2) スタイルシートは、リキッドであること 3) PC/スマホ用のscreenメディア用のスタイルを指定する。 　必要によるとmediaqueryでウィンドウサイズによってデザインを変える。 4) 文字が小さくなりすぎる場合は、Viewportを指定する。 5) 必要に応じてたのデバイス用のスタイルを指定する。 　★ 携帯電話用・・でのアクセスが想定される場合 　★ プリンタ用・・印刷して利用される場合 　★ 点字端末やスクリーンリーダー用のスタイルシート
>>ダブルタップで縮小 同じソースをpc/スマホで共用するレスポンシブデザインになってないからです。 少しハードルが高いですが、レスポンシブデザインにするのがベストです。 ●スマホのcss コンテンツの横幅をブラウザの横幅へ合わせないとイケナイのですが、 横幅はpxで無く、全て%で指定する必要があります。 フォントサイズも%かemで指定。padding、marginも% ●pcのcssは現状のまま使う。
たぶんHTMLがめちゃくちゃなんじゃないかと。 HTMLには、文書構造以外書きません。デザインのために余計なもの書いてるとそれが邪魔する典型じゃないかと・・ 　スタイルシートを使う最大の目的は「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」ですからね。 　 ですから、CSSを勉強する前にHTMLを勉強しなければならない。 メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。 　 http://jigsaw.w3.org/css-validator/#validate_by_ … ★タブは＿に置換してあるので戻してください。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　で検証（右上のDATAから）済みのHTML5 ★文字コードはUTF-8 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="ORUKA"> <style media="screen"> <!-- h1,h2,h3,h4,p{margin:0;line-height:1.6em;} p{text-indent:1em;} html,body{margin:0;padding:0;} header,section,footer{ ＿width:100%;max-width:1000px;min-width:640px; ＿margin:0 auto; ＿padding:10px; } section{ ＿position:relative; ＿padding-left:10px; } section h2{ ＿margin-right:230px; } section section{ ＿width:auto;min-width:0; ＿margin:10px 230px 10px 10px; ＿padding:5px; } section section,section aside{ ＿border:solid 2px red; ＿border-radius:20px; } section aside{ ＿position:absolute; ＿top:0;right:5px; ＿width:200px;height:100%; ＿padding:5px; /* 背景を隠す(下記のコメントアウトを外す) */ ＿box-shadow:10px 10px 10px rgba(0,0,0,0.4); ＿right:-10px; ＿top:-5px; */ } /* 色付け */ body{background-color:gray;} header{background-color:aqua;} section{background-color:white;} section section{background-color:silver;} section aside{background-color:lime;} footer{background-color:yellow;} --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#">Some</a></li> ＿＿＿＿<li><a href="#">navigation</a></li> ＿＿＿＿<li><a href="#">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<section> ＿＿＿<h3>項目</h3> ＿＿＿<p> ＿＿＿＿今、CSSを勉強中なんですが、CSSを角丸にした時、角丸にした部分の背景色が白色になっているのですが、透明にすることは可能なんでしょうか？ 調べたのですが、なかなか見つけられず… ＿＿＿</p> ＿＿＿<p> ＿＿＿＿よろしくお願いします。 ＿＿＿</p> ＿＿</section> ＿＿<section> ＿＿＿<h3>項目</h3> ＿＿＿<p> ＿＿＿＿角丸にしたからと言ってその余白が白くなるということはありません。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿その下に白い四角なブロックがあるためとしか考えられません。すなわち、余計な構造がある。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿透明にするのではなく、ずらしたり影をつけて背景を隠すことになる。<strong>CSSのコメントを外す</strong> ＿＿＿</p> ＿＿＿<p> ＿＿＿＿このサンプルのように、HTMLはひたすら文書構造だけを記述して、スタイルシートはその文書構造に従ってセレクタを記述して指定していくのがセオリーです。そうすることで、著者はメンテナンスが容易になるし、読者のアクセシビリティは向上するし、検索エンジン最適化もできる。 ＿＿＿</p> ＿＿</section> ＿＿<aside> ＿＿＿<h3>Something aside</h3> ＿＿</aside> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
プラグインJetpackを入れて、カスタムCSSに記述するのが一番簡単だと思います。 他の方法としては、 基本style.cssに記述するのですが、バージョンアップされた際にリセットされてしまうので、 子テーマを作って、style.cssに記述する方法が良いと思います。 子テーマについて分からなければ、調べてください。
そのうえで、 ・挿絵(figure)内で ・画像は左寄せ ・その説明は、説明文の長短にかかわりなく右側に配置したい と考えます。あくまで「HTMLで示された文書構造に基づいてプレゼンテーションを指定する」と考えます。 　これなら、HTMLをどう記述するかと、プレゼンテーションが独立していますから、とっても楽ですし、SEO(検索エンジン最適化)も完璧になります。 　携帯電話用、印刷用にデザインを変えるのもできますし、・・スクリーンリーダーもちゃんと読んでくれる。 HTML4.01strictのサンプル ★タブは＿に置換してあるので戻してください。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATA入力で検証済み ☆screenメディアのみ、携帯電話や印刷には適用されません。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951&#64;hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,p{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{ ＿width:90%;/* 幅を指定して */ ＿margin:0 auto;/* 中央に */ ＿max-width:1000px;/* 最大幅 */ ＿min-width:640px;/*最小幅*/ ＿padding:0 20px; } div.section{background-color:gray;} div.section div.figure{/* div.sectionの子孫のdiv.figure */ ＿width:90%; ＿margin:10px auto; ＿position:relative; ＿background-color:silver; } div.section div.figure img{ ＿width:40%; ＿height:auto; ＿float:left; ＿margin:5px; ＿padding:5px; ＿background-color:white; ＿box-shadow:10px 10px 10px rgba(0,0,0,0.4); } div.section div.caption{ ＿margin-left:45%; } div.section div.figure:after{ ＿content:""; ＿display:block; ＿clear:left; } div.section pre{ background-color:white; padding:1em 2em; width:80%; margin:0.5em auto; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿文書のヘッダ ＿</div> ＿<div class="section"> ＿＿<h2>本文</h2> ＿＿<p> ＿＿＿下記のように画像の右側に説明分をいれた記述ですが、画像の右横に説明文を配置するために「float: left;」を指定しています。 ＿＿</p> ＿＿<p> ＿＿＿問題は、説明文が画像の高さを超えると、左端に表示されてしまう点です。 ＿＿</p> ＿＿<p> ＿＿＿説明文が画像の高さを超えても左端を揃えて表示する（説明文の左端を揃える）には、どのように記述すれば良いでしょうか？ ＿＿</p> ＿＿<div class="figure"><!-- 挿絵(figure)--> ＿＿＿<img src="./images/01.jpg" width="480" height="360" alt="サンプル画像"> ＿＿＿<div class="caption"> ＿＿＿＿<p>ここに長い文章を入れてみる</p> ＿＿＿＿<p>テキスト</p> ＿＿＿</div> ＿＿</div> ＿＿<p> ＿＿＿要は、 ＿＿</p> ＿＿<ol> ＿＿＿<li>親ブロックの幅を基準にするためposition:relative;して</li> ＿＿＿<li>画像の幅を指定しておいて、</li> ＿＿＿<li>続く文章の左マージンを十分とり、</li> ＿＿＿<li>次の要素でflotを解除する</li> ＿＿</ol> ＿＿<pre>div.figure{ position:relateive;/* static以外 */ } div.figure img{ float:left;/* 回り込みの指定 */ width:40%;/* 画像の幅の指定 */ height: auto;/*画像の高さは自動 */ } div.figure div.caption{ margin-left:45%;/* marginの相殺 */ } div.section div.figure:after{ content:""; display:block; clear:left;/* floatの解除 */ } </pre> ＿＿<p>記事</p> ＿＿<div class="figure"> ＿＿＿<img src="./images/7.jpg" width="480" height="640" alt="サンプル画像"> ＿＿＿<div class="caption"> ＿＿＿＿<p>ここは縦長の画像ですから、何もしなくても画像は左だけど</p> ＿＿＿＿<p>説明文</p> ＿＿＿＿<p>説明文</p> ＿＿＿</div> ＿＿</div> ＿＿<div class="figure"> ＿＿＿<img src="./images/6.jpg" width="640" height="480" alt="サンプル画像"> ＿＿＿<div class="caption"> ＿＿＿＿<p>こんな横長の大きな画像でも・・</p> ＿＿＿＿<p>説明文</p> ＿＿＿＿<p>説明文</p> ＿＿＿</div> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
遅くなりました。忘れてた。 FORM要素のaction 属性は action = uri [CT] 　この属性は、フォーム処理エージェントを指定する。HTTPスキームURI以外の値の場合のユーザエージェントの動作は、定義しない。 　http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … 　formを使用してメールが送信されるためには メール送信プログラムがあること それがメール送信できること ブラウザに mailto: のときにメールソフトを起動する設定があること 　などが必要です。 　最近では直接MUA(メールソフト)を起動できない設定が多い(セキュリティ) 　そうして送信されても、mail:プロトコルに従ったメールが送信できるとは限らない。できないものが多い。文字コードはjis2023、とか一行の文字数とか・・ 　そのために、必ずサーバーにあるプログラム（CGI）に送信しなければなりません。 ★ なお、HTMLで装飾したメールは使うべきではない。 　これはわかりますよね。画像を埋め込んだら--簡単に受信者の情報が得られる。 　だから、HTMLメールは、よほど信頼できる発信者以外は拒否しているでしょ!! IPA 独立行政法人 情報処理推進機構：メール利用時のセキュリティ設定：POINT 1. メールソフトのセキュリティ設定をする。( http://www.ipa.go.jp/security/personal/base/mail … ) 　単に画像が表示される。CSSが使われる---それだけで、受信者の情報が筒抜け。 　HTMLメールは、別に難しくはないので、デザインを例に自分で作ればよい。
私はまだWindows7のままですが、Windows10にアップグレードしたくない理由のひとつがフォントの制限です。 見慣れたメイリオフォントが使えないようです。 Windows7環境であっても、Internet Explorer11 ではやはりメイリオフォントが指定できませんでしたので、わざわざInternet Explorer10に戻して使っている次第です。 特殊な設定方法があるならば、私も知りたいですよ。 すみませんね、答えにならなくて・・・。
スマホもＰＣも全く同じscreenメディアですよ。 だからPCサイトはスマホで見れる。 出力メディア( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) だから、PC用がちゃんとできていれば、スマホで利用しても問題ない。 jqueryは、CSS3に対応していないブラウザが多い当時にjavascriptを使って実装する方法ですが、javascriptは極力使わないほうが良い。 　よって、CSSのtransisionかanimeでよい。 　なお、その前提として 1) ページがリキッドであること。これはとうの昔に対応済みかと 2) 必要なら、mediaqueryでデザインを切り替える。 3) フェードイン/アウトはCSSで・・
そんなひどいHTML書いてたらだめですよ。 そこからやり直し。なにせ文書「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」はHTMLの根幹にもかかわる最も重要な基本ですから。 <div class="m_header_area"> 　と書かれていますが、それは文書のヘッダにあたるのですか？なら <div class="header"> 　でよい。将来的にHTML5では <header> 　となる部分ですから <div class="m_header_box clearfix"> 　classに半角スペースで区切られた複数のリストがありますが・・なぜ？ <div class="box_image"> 　なんのために<div>で囲うのですか？ 次に <div class="box_text"> □□□□□□□□□□□□□□□□□□ なのですから、そのテキストが、そのセクションの要約でしたら <div class="abstract"> 　＜img src＝"" width＝"" height＝"" alt＝""＞ 　<p>□□□□□□□□□</p> </div> で良いはずですが。 　もちろん画像がコンテンツの一部でない場合は<img src="" width="" height="" alt="">は書かなくてよいし・・ <body> 　<div class"header"> 　　<h1>ページタイトル</h1> 　　<div class="abstract"> 　　　<p><img src="" width="" height="" alt=""></p> 　　　<p>□□□□□□□□</p> 　　</div> 　</div> とか・・・ 　あとは、スタイルシートを記述するだけ、それも数行で済むはず。 　もう少し具体的に内容を教えてください。
いや、まったく考え方が違う。HTMLをつかってサイトを構成する最大の目的は・・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　この節はとても重要なので読んでおいてください。 　ずばり、一言でいうと【1024 ピクセルx768 ピクセルのモニタを基準の画面サイズ】とはしないということ。 　その証拠に、HTMLだけを記述すると、幅が240px程度しかない携帯電話も、幅広のディスプレイも、印刷機も全く問題なく利用できますね。 　ブログシステムにいくつかは、古いタイプも多くウィンドウ幅が固定されているものもありますが、現在の新しいものは、1780セツのような幅広も、860px程度のスマホも問題なく利用できるはずです。 　ブログの出力HTMLを設計中でしたら、まず考えないとならないのはHTLのバージョンです。 HTML4.01 にするかHTML5にするかだけでしょう。HTML4.01はstrictです。他は考えなくてよい。 　　XHTMLのほうが扱いやすい場合はXHTML1.0/1.1 か、HTML5をXMLにするかでしょう。 携帯電話(ガラケー)や、IE8以前のブラウザを考慮しないなら、HTML5という判断でよいでしょう。 　つぎに、出力HTMLの文書構造を設計します。★文書構造だけですよ。この時点ではデザインは一切考えない。 　そのほうがはるかに楽ですし、デザインの要素がないため、将来デザインを自由に変更できます。 　根拠: 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) (例) HTML5の場合です。 　＊ HTML4.01strictの場合は、<header><nav><section><aside><footer>などは、<div class="header">のようになります。 　根拠: DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　根拠: 構造を改善するために、次の要素が導入されました：( http://www.html5.jp/trans/w3c_differences.html#n … ) (注)以下、タブは全角スペースで示しているので、利用するときはタブに変換すること。 <body> 　<header> 　　<h1>ブログ</h1> 　　<nav> 　　　<ul> 　　　　<li><a href="/">トップ</a></li> 　　　　<li><a href="/t">時系列</a></li> 　　　　<li><a href="/c">カテゴリ</a></li> 　　　</ul> 　　</nav> 　</header> 　<section> 　　<h2>記事</h2> 　　<section> 　　　<h3>山に行った</h3> 　　　<p>本文記事</p> 　　</section> 　　<section> 　　　<h3>海に行った</h3> 　　　<p>本文記事</p> 　　</section> 　　<aside> 　　　<h3>関連記事</h3> 　　　<p>本文と直接関係ない(asideな)記事</p> 　　<nav> 　　　<h3>目次</h3> 　　</nav> 　</section> 　<footer> 　　文書情報 　</footer> </body> が標準的な文書構造になるでしょう。文書構造だけ書きますからとても楽ですし、使用ライ的なメンテナンスも容易ですし、デザインの制約もまったくない。 　そのうえでスタイルシートを書いていきます。 body,html{margin:0;padding:0;/* その他フォントとか背景色とか */} h1,h2,h3,h4,p{margin:0;line-height:1.6em;} header,section,footer{ /* 1024 ピクセルx768 ピクセルのモニタを基準の画面サイズ */ 　width:100%; /* ウィンドウいっぱい */ 　max-width: 1000px;/* それでも1000px以上には広げない */ 　margin:0 auto; /* ウィンドウが1000pxより広いときは中央 */ 　min-width: 640px; /* 最少は640pxより縮めない */ 　position:relative;/* 以下のサイズや位置の基準 */ } /* 2カラムで、左にナビゲーションを縦にならべ */ section h2,section section{ 　margin-left: 220px; /*ナビゲーション section内のnavをおくスペース*/ 　margin-right:0; 　width:auto; /* 上の指定を上書き */ 　min-width:0; } section nav{ 　position:absolute; 　top:0;left:0; 　height:100%; 　width:200px; 　padding:5px; } /* 念のために色を付けてみると */ body{background-color:gray;} header{background-color:aqua;} section{background-color:silver;} section section{background-color:white;} section nav{background-color:lime;} footer{background-color:yellow;} これだけで、期待通りになるはずです。 　 　今から16年前のHTML4.01の作成が急がれていたのは当時、デザインのためにHTMLが使われて、大変多くの弊害が出てきたからです。それでも、あなたが参考にされた多くのページがそうであるように、いまだに、HTMLでデザインをしようという風習は残っています。ひどくなった部分すらある。 　上記スタイルシートを <style media="screen"> ・・ここにスタイル </style> としてhead内に置くと、このスタイルシートが、スクリーンメディア(PCやスマホ)にだけ適用されて、携帯電話や印刷機、あるいは点字端末やスクリーンリーダーには適用されないのです。
CSS3 の新機能である flexible box を使っているようです https://www.w3.org/TR/css-flexbox-1/ https://developer.mozilla.org/ja/docs/Web/CSS/CS … この機能を使えば、写真以外では大きさの指定は不要ですので、 以下の記述でブラウザがよろしく表示を調整してくれます。 <style> .記事 a { display: flex; } .記事 a dl { flex: 1; } /* 写真幅を除いていっぱいに表示 */ .記事 a div { width: 60px; height: 60px; } </style> <ul class=記事> <li> <a><dl><dt>記事</dl><div>写真</div></a> </ul> ご質問の「一部のみを200ｘ100と変更する」を行うならば、 CSS で "display: flex" を指定しているルールに対して、 ある要素の場合のみ、縦幅横幅を追加指定するだけで解決です。 例: .記事 a { display: flex; } .記事 a#ある要素のID { width:200px; height:100px; overflow:hidden;} ある要素、の指定方法は他にも色々ありますので、ご検討ください。 .記事 a:firsr-child /* 最初の記事のみ */ .記事 a[href*="tokuteinokiji.html"] /* 特定の URL を含むリンクのみ */ ただ、そのサイトが自分の管理内ならば CSS を変更すれば済む話ですが、 管理外ならば、ユーザースタイルシート等の荒業を使わなければならないでしょう。 https://chrome.google.com/webstore/search/user%2 …
bodyのbackground-colorにredが指定されているので 最低限の設定はできていると思います。
こんにちは ＞webフォントを特定のページだけに適用させたいです。 そのページで個別に指定したい内容だけ上書きするようにしてあげれば良いのではないでしょうか？ 共通での設定方法にもよりますが、フォントだけなら直接HTML内で設定するのでも良いかも。 CSSの指定の場合、セレクタの詳細度が高い設定が優先されますし、詳細度が同じなら後からの設定で上書きされるはずです。 また、! importantを利用することで、優先度を高めることも可能です。
普通の、serif系フォント(MSP 明朝,游明朝)をobliqueしてるだけ。 　obliqueはイタリックほど傾けないときです。 ★ 「テキストを画像に置き換えて表現する。」ことは強く非推奨です。 　　http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … よって、それがその文書のヘッダに含まれるナビゲーションリストの要素でしたら、HTML(HTML5)だと、 <body> 　<header> 　　<h1>ページタイトル</h1> 　　<nav> 　　　<li><a href="/">Home</a></li> 　　　<li><a href="/Concept">Concept</a></li> 　　　<li><a href="/Staff">Best Staff</a></li> 　　　<li><a href="/Blog">Blog</a></li> 　　　<li><a href="/Hair">Hair Menu</a></li> 　　　<li><a href="/Eye">Eye Beauty Menu</a></li> 　　　<li><a href="/Style">Style</a></li> 　　　<li><a href="/Salon">Salon Info</a></li> 　　</nav> のようになりますね。 あとはスタイルシートで指定すれば済む。 方法 1) スプライト CSSという手法で画像を置き換える。 HTML5+CSS3のサンプル 　このようにHTMLはとてもシンプルになる。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="ORUKA"> <style media="screen"> <!-- header nav{ text-align:center; } header nav ol{ margin:0.5em auto; padding:0; text-align:center; font-family:"ＭＳ Ｐ明朝","平成明朝","游明体",serif; font-style:oblique; /* 文字を傾けている */ line-height:30px; height:30px; list-style-type:none; background:linear-gradient(white,green,white); display:inline-block; font-size:4px; } header nav ol li{ display:inline-block; position:relative; padding-right:1em; background:linear-gradient(white,silver,white); } header nav ol li a{ text-decoration:none; font-size:15px; font-weight:600;/* 文字の太さ100刻み 900まで */ display:block; width:100%; height:100%; padding:0 2em 0 0.5em; color:green; } --> </style> </head> <body> ＿<header> ＿＿<h1>ページタイトル</h1> ＿＿<nav> ＿＿＿<ol> ＿＿＿＿<li><a href="/">Home</a></li> ＿＿＿＿<li><a href="/Concept">Concept</a></li> ＿＿＿＿<li><a href="/Staff">Best Staff</a></li> ＿＿＿＿<li><a href="/Blog">Blog</a></li> ＿＿＿＿<li><a href="/Hair">Hair Menu</a></li> ＿＿＿＿<li><a href="/Eye">Eye Beauty Menu</a></li> ＿＿＿＿<li><a href="/Style">Style</a></li> ＿＿＿＿<li><a href="/Salon">Salon Info</a></li> ＿＿＿</ol> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿</p> ＿＿<aside> ＿＿＿<h3>Something aside</h3> ＿＿</aside> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
ご存知だと思いますが・・16年前のHTML4.01の勧告以前から、 下記のようなページ作りは強く否定されてきました。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから ・メーカー独自拡張のHTMLを使う。 ・テキストを画像に置き換えて表現する。 ・余白制御のために画像を用いる。 ・ページレイアウトの目的で表を用いる。 ・HTMLでページを作らずにプログラムに頼る。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Style Sheets in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ですので、 「イラストレターや、インデザインで作成したのをWEBページに変換してるのですか？それともただ画像を貼り付けてるだけなのですか？」な方法は、ほとんどなくなりました。 『HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 一言でいうと 『構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 すなわち、下記のような文書構造だけを記述したHTMLを用意して、スタイルシートでプレゼンテーションを指定する。 スタイルシートで、例に示されたようなデザインにする。 　(例えば画像やアイコンはそれがコンテンツの目的でない限りは一切HTMLには書かない。） スマホ用、携帯用、点字端末用、スクリーンリーダー、印刷用のスタイルシートで、それぞれに合わせて表現を変えるとかもできますし、デザインを全く変えることも容易ですし、メンテナンスがとっても楽になります。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="ORUKA"> <style media="screen"> <!-- --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#">Some</a></li> ＿＿＿＿<li><a href="#">navigation</a></li> ＿＿＿＿<li><a href="#">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿</p> ＿＿<aside> ＿＿＿<h3>Something aside</h3> ＿＿</aside> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html> 目的は異なるのですが、 ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) のページは、[表示]→[メニュー]→[スタイルシート]でいろいろなデザインを選択したり、ウィンドウの幅を変えたり、あるいは印刷プレビューで確認すると、HTML自体は全く同じなのに、プレゼンテーションは全く変わります。
ざっと調べてみた限りでは、、、 日本でよくみるスマホのOSは３つあります。OSが違うということは、開発言語が異なります。 ・Android - Java ・iOS - Swift or Objective-C ・Windows - 「XAML + C# / VB / C++」or「HTML5 + JavaScript / WinJS」or「Direct X + C++ MFC」 スマホのアプリはこれらの言語を使用して作られています。 ブラウザからそれをさせたい場合は、これらのOSにこれらの言語を通してスマホに対して「ホーム画面にショートカットアイコンを設置する」指示を出さないといけない訳です。 したがって「Windows Phone」のみ「HTML5 + JavaScript / WinJS」を使って「ホーム画面にショートカットアイコンを設置する」ことができるかもしれませんが、それ以外のOSは連携できません。 したがって最近の飲食チェーン店では、専用のアプリをリリースして、それをインストールしてくださいという手法が多い訳です。 AndroidとiOS(iPhone)だけ対応しているところがほとんどですね。
暗くなってもよければできます。 一番下を不透明度100%、真ん中を50%、一番上を33%で重ねれば、1/3に暗くなった元画像が見えます。
background-positionには、fixedなんてないので、 　 background-attachmentプロパティ background-attachiment:scroll | fixed | local なので、 background-attachiment:fixed; 簡略化プロパティbackgroundだと <bg-layer> = <bg-image> || <position> [ / <bg-size> ]? || <repeat-style> || <attachment> || <box> || <box> <final-bg-layer> = <bg-image> || <position> [ / <bg-size> ]? || <repeat-style> || <attachment> || <box> || <box> || <'background-color'> なので、 background:url() top left yellow fixed; とかは可能。 それ以前に HTMLに.button 、すなわち、<div class="button">なんてないでしょう。(^^) HTMLには、プレゼンテーションに関わるものは書いたらダメです。 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )はHTML4.01の勧告以前から16年以上いわれ続けたこと。 例) 多分ナビゲーションリストだと思うので・・ <header><!-- この文書のヘッダ --> ・・・ 　<nav> 　　<ol> 　　　<li><a href=""></a></li> とマークアップしておいてから header nav ol li{ list-style-type:none; margin:0;padding:0; width: 49px; height: 49px; position: fixed; top:10px;left:10px; background: url('../img/menu_button_back.png') center fixed; } とかにする。 　後で、あるいはパソコン用、印刷用にボタンにしないデザインにできる。 ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　はHTML4.01ですが、ソースを見てごらんなさい。プレゼンテーションにかかわることはなにもない。だから[表示]→[スタイル]で様々にデザインできるし、印刷用はデザインを変えられる。 　そもそもメンテナンスがとても楽。
見落としていた ＞その中に でしたら、 ul#SNS_Link li a{ display:inline-block; background: linear-gradient(white, gray); border-radius:0.5em; position:relative; padding:5px 35px 5px 5px;/* */ text-decoration:none; } ul#SNS_Link li a[href]:after{ content:""; position:absolute; right:0;top:0;/* */ display:inline-block; width:30px;height:30px; background-color:red; background-size:cover; } ですね。
Webデザイナーなら、firefoxお使いでしょうから、 　Live HTTP Headers( https://addons.mozilla.org/ja/firefox/addon/live … )で必要なファイルをwget( https://ja.wikipedia.org/wiki/GNU_Wget )で取得するか・・ 単純に ファイル 　→ ページを保存 　　→ [完全] ないし、scrapbook( https://addons.mozilla.org/ja/firefox/addon/scra … )を使って保存する。 内容は、firebug( https://addons.mozilla.org/ja/firefox/addon/fire … )や、 Web Developer( https://addons.mozilla.org/ja/firefox/addon/web- … ) でよいでしょう。 ただHTML5 + CSS3 + jquery(javascript)を使用したつくりなのですが、 Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　でチェックされたらわかるように、デザインはインパクトがあり素人受けはするでしょうが、ひどいものです。 　section要素はあるのに、見出し要素がないとか、本来使うべきでないdiv要素てんこ盛りとか・・。 　Webデザイナーされていたら、firefoxは使われているはずですし、上記のツールは定番中の定番ですし・・。 Web 開発( https://addons.mozilla.org/ja/firefox/extensions … )
>>jQueryなら記述してあるセレクタを見れば、HTMLのどこに影響してい >>るのかすぐわかると思うので >>そのセレクタをHTML上で探せば良いと思います。 >この辺り、まだまだ理解しきれないのですが、 jQueryの記述方法が $("#navi a").click(function(){ ・・・}); みたいにHTMLのタグやCSSのIDやクラス指定と同じような書き方でセレクタを書く（だけじゃないけど）ので、HTML上でこのセレクタを探せばどこでjQueryを使っているかはわかると思います。 >あと、スクロールとか、マウスオンで色が変わるとか、常に動きがない場合は黄色表示はされないのでしょうか？ マウスオンイベントは実際にマウスオンした時に黄色くハイライトされます。 基本的にイベントが発動している最中は必ず変化部分がハイライトされるので、 firebagをウィンドウから切り離し（firebagの右上に赤い四角ボタンで切り離し/結合できます）最大限に開いて、ソースの入れ子は開いた状態で、あれこれとページをいじったりすれば、何かしらイベントが起きている箇所はハイライトされるので、それで見つかると思います。 firebagのハチマークの右の四角に矢印が付いているアイコンをクリックした状態で、ページ上で怪しいと思ったところをクリックすれば、 その箇所のHTMLの入れ子は勝手に開いてくれるので、そうやって探すのも良いと思います。 とりあえず、適当なサイトをfirebagで見て、firebag自体もたくさん触ってみると自ずと分かると思います。 あと余計かもですが、超初心者とのことで、それなら、まずは他サイトの仕様を見るのも良いですが、きちんと基本から学んだほうが良いと思います。 サイトで使われているものって、本当はもっとシンプルに構築できるものをわざわざ無駄にプラグインをコピペで使っていたり、無駄なソースが多かったりと、必ずしも良い物ばかりではないです。 私は高橋のりさんの本「やさしくはじめるWEBデザイナーのためのjQueryの学校」という本と、jQuery本家の「API Documentation」のリファレンスから入ったのですが、超々基本を抑えられたおかげで、その後の応用や人の作ったプラグインなども結構楽に理解出来るようになりました。 おかげで今は普通に世に出てるサイトの挙動位ならだいたい見て理解できて自分一人で０から作れるくらいには出来るようになりました。 遠回りに感じるかもしれないですが、基本を抑えたほうが結果的に早く身につきますよ。 頑張ってください。
こんにちは。 レスポンシブとのことですが、メディアクエリは知っているのでしょうか？ https://developers.google.com/web/fundamentals/d … ここで詳細書いてくれているので良かったら見てください。 さて、今回はレスポンシブでウィンドウ幅を狭めた時のボックスの高さを指定したいということだと思うのですが、 こういう時に、メディアクエリでウィンドウ幅のフィルタを掛けて指定します。 【例】 ウィンドウ幅が360px以下の時、#height-01の高さを400pxする 更に361px以上768px以下の時は、#height-01の高さを380pxする @media screen and (max-width : 360px) { 　　#height-01{ 　　　　height: 400px; 　　} } @media screen and (min-width:361px) and ( max-width: 768px) { 　　#height-01{ 　　　　height: 380px; 　　} } これをCSSに追記すればできます。 上記見るとわかると思いますが、min-widthとかmax-widthは適切な数字にしてください。 ご自分でもメディアクエリで検索すると該当記事が相当あるので見てみてください。 あと気になったのですが、 同じような囲い枠がいくつもあるのに、CSSのセレクタがID指定（#height-01）なのが良くないです。 何かしら共通のクラスを付与するか、「bootstrap3での囲い枠のクラス」？が使えるならこちらのクラスを利用したほうが良いと思います。 ほかに、全部の囲い枠の高さを文字数の変動やその他動的な要素で変動する際に、jQueryを使って一括で指定する方法もあります。 囲い枠によって文字数が違うとかならjQueryのほうが、ウィンドウ幅の変動にも追随できて一番高いボックスの高さを取得して全部に適用という感じで柔軟に対応することができます。 もしそちらがよいならjavascriptのカテゴリで再度質問してください。 あとあと、余計なお世話かもですが、 「レスポンシブル」じゃなくて「レスポンシブ（responsive）」です。 頑張ってください。
と書きながら、そうなっていなかった。 スタイルシート部分を書き直した。 media="screen" を追加して、ウィンドウ幅で表示を変えるようにmediaqueryを追記した。 これで、ウィンドウを小さくしていくと、デザインが変わるようになる。 そして、印刷やハンドヘルド(携帯電話)などでは、素のデザインのままになる。 ★これが、tableを使わないデザインということ。 　たぶん、元のHTMLが酷いものになっていると思うので、 ＞時間がないのですが、 　と言われても、少し時間が必要だと思います。もう20年近く言い続けられてきた、構造とプレゼンテーションの分離をされてこられなくて、「テキストを画像に置き換えて表現する。」「余白制御のために画像を用いる。」「ページレイアウトの目的で表を用いる。」「HTMLでページを作らずにプログラムに頼る。」( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )を守ってこられなかったつけが回ってきた。 　大変だと思いますが、身に着ければこれほど楽なものはない。(^^)私のHTMLソース( https://oshiete.goo.ne.jp/qa/9285798.html#an9914 … )を見ればお分かりかと。 　頑張ってくださいね。 <style type="text/css" media="screen"> <!-- /* わかりやすいように色分け */ html{background-color:gtay;} body{background-color:silver;} div.header{background-color:aqua;} div.section{background-color:yellow;} div.section div.section{background-color:white;} div.section div.nav{background-color:lime;} div.section div.aside{background-color:fuchsia;} div.footer{background-color:orange;} /* ここから */ html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header{min-height:200px;} div.header,div.section,div.footer{width:90%;min-width:980px;max-width:900px;margin:0 auto;padding:5px;} div.section{position:relative;} div.section{min-height:400px;} div,section div.section{min-height:0;} div.section div.section, div.section h2, div.section p{margin:0 200px;width:auto;min-width:0;} div.section * p{margin:0;} div.section div.nav, div.section div.aside{position:absolute;top:0;width:180px;height:100%;} div.section div.nav{left:0;} div.section div.aside{right:0;} @media screen and (max-width: 979px) { div.header,div.section,div.footer{width:95%;min-width:0;margin:0 auto;padding:5px;} div.section{position:relative;} div.section{min-height:200px;} div.section div.section, div.section h2, div.section p{margin:0 0 0 200px;} div.section div.aside{position:static;top:auto;width:auto;height:auto;} div.section div.nav{left:0;} } @media screen and (max-width: 640px) { div.section{position:relative;} div.section{min-height:200px;padding-top:50px;} div.section div.section, div.section h2, div.section p{margin:0 ;} div.section div.aside{position:static;top:auto;width:auto;height:auto;} div.section div.nav{width:100%;left:0;top:0;height:50px;} } --> </style>
★文字コードと、フォントは一切関係ありません。(^^) 　あくまで文字コードの問題でフォントの問題ではない!!! ＞「<meta HTTP-EQUIV="Content-type" CONTENT="text/html; charset=Shift_JIS">」が挿入されている場合と挿入されていない場合がありました。挿入されていない＝指定されていない、ということでしょうか。 　必ず本文と同じ文字コードを指定する。 ＞現在使用しているテキストエディタはメモ帳で、 　これは絶対に高機能なテキストエディタが必要。保存してあるすべてのHTML内の一部を、ファイルを開かずにすべて書き換えることなんて通常のものではできませんからね。 　EmEditor( https://jp.emeditor.com/ )は高価ですが価格以上ですね。私は登場当時のfreeの時代からの付き合いで、永久ライセンスは2000円弱だった。 　一か月試用できますし、３か月以内なら返金もあるので、結果的に三か月ただで使える。 ＞また教えて頂いた文字コードを挿入するとすると、スタイルシートの前の部分に入れる形でよろしいでしょうか？ 　できるだけ最初、<title>など日本語が登場するより前に入れる。 ＞文字コード指定の入れていないページの基本構造としては、添付した画像となっています。 　そもそも、doctype宣言がない。(^^) HTML 4.01仕様は、3つのDTDを規定しており、著者は自分の文書に、次の3つの何れかの文書型宣言を含めねばならない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　テキストエディタで作成する人は、必ず最初に仕様書を理解してから始めます。そうしないと非効率。
CSSとは、Cascading Style Sheetsの略で、中核をなすCascadingの仕組みは「命」ともいえる部分で、それを理解していないと使えるはずもない。 !importantを使う方法は誤りです。 　!important使用すると (ユーザーエージェントの宣言)＜(ユーザーの通常宣言)＜(著者の通常宣言)＜(著者のimportant宣言)＜(ユーザーのimportant宣言) 　となってしまいます。 もし、 a:link{color:green;} /* 詳細度 0,0,1,1 疑似クラス:link */ a{color:red;}/* 詳細度 0,0,0,1 */ 　だと、詳細度が前者か大きいのでリンクは緑色になります。 また、 a:visited{color:blue;}/* 詳細度 0,0,1,1 疑似クラス:visited */ となっていれば、履歴を削除しないと前者二つの指定は効きません。 　ここは、 ・同じ詳細度の指定が後述で上書きされていないか ・他により詳細度の高い指定がないか 　をまずチェックすべです。このいずれかのはずです。 Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification 日本語訳( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　にて、 5 セレクタ 6 プロパティ値とカスケーディング、継承の割り当て 　にすべて書いてある。 　スタイルシートを扱おうとしたら絶対に身に着けておくべきところ 例えばheader内のナビゲーションリスト中のリンクの色でしたら div.header div.nav ul li a:link{color:red;}/* 詳細度 0,0,3,5 */ 　*HTML4では、文書構造はdivにclassをつけて示す [HTML5]だと header nav ul li a:ink{color:red;}/* 詳細度 0,0,1,5 */ と書きますね。 　これは、ほかの場所の指定で上書きされないためです 　ウェブ開発されていたら製作者用アドオンが圧倒的に豊富なfirefoxをお使いだと思いますが、そのアドオンのfirebug( https://addons.mozilla.org/ja/firefox/addon/fire … ) )を使うと、どのように適用されているかなど、上書きや継承のすべてがわかります。 firebug - Google 検索( https://www.google.co.jp/search?q=firebug&ie=utf … )
ちなみに、以前 テーブルをスクロールさせるときのスクロールの位置 - HTML 解決済 | 教えて！goo( https://oshiete.goo.ne.jp/qa/7105490.html ) 　でも挑戦したのですが・・・ <table>の<thead>をposition:fixed;にすると<td>の幅がリセットされる - Webデザイン・CSS | 教えて！goo( https://oshiete.goo.ne.jp/qa/9273531.html ) 　のほうが良いですね。
対処法は <table>の<thead>をposition:fixed;にすると<td>の幅がリセットされる - Webデザイン・CSS | 教えて！goo( https://oshiete.goo.ne.jp/qa/9273531.html ) で示しましたから、そちらを見てください。 fixedはそうしたものですから、ここで使うべきではない。使うならabsoluteです。
CSSボックスモデルにおいて td の幅は padding と border 込みで計算されます td { width:300px; border-width:5px; padding:1px; } ならば 幅 = 300 + 5*2 + 1*2 = 312px col や colgroup には padding と border が無いので col { width:300px; } ならば 幅 = 300px 注意 table { border-collapse:collapse; } だとさらに計算がややこしくなります
xslt <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"> xml <?xml-stylesheet type="text/xsl" href="my.xslt"?>
`とりあえず、私の示したスタイルシートの該当部分 要素セレクタ[title="対数表"]を変更する。 あなたのtableのtitleをつける。 この二つがセット ついで、<thead>内の<td>は<th>に変更 任意で、<thead></thead>を<tfoot></tfoot>にしたものを<tbody>の前に置く それだけで済むはず
ブログサービスで使っていた方法ですが： 1. ブラウザでリニューアルするページを開く 2. ページを保存（Ctl+SまたはCmd+S）で既存のページを全てローカルに保存 3. 保存した方のindex.htmlをダブルクリックしてブラウザで開く 4. 保存した方のhtmlとcssを修正してリニューアルするデザインを作り込む（＝ローカル作業） 5. 管理画面で作り込んだ方のソースをテンプレートルールに合わせてコピペする 6. 保存して反映 一旦ローカルに全て保存して、保存した方で作業してからリモートに反映すれば、作業中の影響を受けません。 動作確認を徹底して行うならメンテナンスモード（あれば）で作業をするか、 別にアカウントを作ってそちらに反映して見るのが無難と思います。
動画をそのようにプログラムしているからです。マナーのない設定です。仕方ないので、使用者がわでは、パソコンの音消しをしておき、動画を止めるしかないです。 苦情入れておくと、改善されるかも。
ペーパーの写真は、一旦デジタル化します。 大抵のスキャナーには退色補正機能がありますし、デジタル画像ですから Adobe Photoshop Elements のようなレタッチソフトでも処理できます。 また、DPE店でも古びた写真を再生してくれるところは結構ありますよ。 一例で、カメラのキタムラさんetc。
Sassだと思いますが、普通にCSSで十分です。通常はtext-indentを使う。 ほかにもいくつか。 vertical-align: middle;はdisplay:table-cell でないとね。 なんであちこちに、margin記載する必要があるの？ サンプルは後程
No.2,No.3です。 本気で勉強する気なら・・、いくつか気が付いたことを 1) divは使わない。使うとしてもこんな感じ 　<header> 　　・・・ 　　<div id="abstract"> 　　　このページの要約 　　</div> 　要約を示す要素はHTMLにはない。sectionもasideも適切ではない。そこでidやclassを併用して文書構造を 2) セレクタは文書構造を基にして 　section section ul{ 　　sectionの子孫のsectionの子孫のul要素 　と書けば、section ulには適用されない。 　　そもそもスタイルシート読むだけで、「sectionの子孫のsectionの子孫のul要素」とわかるので、いちいちHTML見てdiv.ibe4-2はどこだっけと探さなくてよい。 ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　をIEかfirefoxで訪問して、メニュー[表示]→[スタイルシート]　に進みいろいろなスタイルを選択したり、印刷プレビュー見たりしてごらんなさい。文書構造とプレゼンテーションを分離する価値がわかるかと・・ ★<br>も基本的には使いません。 ★小さいことですが、rogoではなくlogo
No.1です。 微妙に間違えた。以下が正解です。 gridの部分のみ記載。 .grid{ width: 100%; height:100%; background-color: aqua; } div.grid li{ display: block; float: left; list-style: none; } li.grid1{ width: 25%; height:0; padding-bottom:100%; background-color: beige; } li.grid2{ width: 48%; height:0; padding-bottom:50%; background-color: brown; } li.grid3{ width: 27%; height:0; padding-bottom:50%; background-color: chocolate; } li.grid4{ width: 27%; height:0; padding-bottom:50%; background-color: darkcyan; } li.grid5{ width: 48%; height:0; padding-bottom:50%; background-color: darkgray; }
私は、javascriptを普段は停止してブラウジングするので気が付きませんでしたが、有効にするとそうなりました。 まあ、javascript---jqueryを使っている。 [JS]jQueryでページスクロールしてもナビゲーションを固定させる方法( http://www.webantena.net/javascriptjquery/scroll … ) など、まあ、この程度ならjavascriptを停止しているユーザにも利用に支障はないので使ってもよいでしょうね。 スクロール 制御 javascript OR jquery - Google 検索( https://www.google.co.jp/search?q=%E3%82%B9%E3%8 … )
＞画像の大きさはそのままに、容量を最適化してみたのですがダメみたいです。。 　意味が分かりませんが・・ 　大きな画像を小さくして表示しているは無理だと・・ 　表示する画像は小さなサムネイルにして、スタイルシートで必要な時読み込むようにすればよいです。
御参考まで。 http://www.webcreatorbox.com/tech/video-backgrou …
縮小しても全ての要素が誤差なく同じ倍率で縮小される訳では無く、誤差が付いて回る事が原因。 拡大縮小もブラウザが計算して表示している。 この時画像は、そこそこ誤差なしで縮小できる。 文字やpadding、marginで誤差が出てしまう。 16px文字が計算上14.8pxとなってしまっても15pxとか14pxになる。 またpadding・margin・境界の太さだって誤差が出てしまう。 元々ぴったり横幅に納まっていたコンテンツも1px・2pxの誤差で納まらなくなって改行され、全体が崩れてしまう。 解決するには、サイトをレスポンシブデザインにする。
Apache HTTP server の場合 https://httpd.apache.org/docs/2.4/en/custom-erro … なんらかのフレームワーク製品を使っている場合は、その説明書を御確認ください http://fuelphp.jp/docs/1.5/general/error.html http://codeigniter.jp/user_guide_ja/general/erro …
例えば、wikiのようにということですか？？ ゲンゲ - Wikipedia( https://ja.wikipedia.org/wiki/%E3%82%B2%E3%83%B3 … ) あなたがご利用のサーバーが日本語に対応しているか？ あなたがご利用のＦＴＰソフトが日本語に対応しているか？ とあとは、URLエンコードできるか・・ それができない場合は、ルートのindex.htmlをCGIに変更して、そのパス情報をもとに動的にページを表示させる。
<!--[if IE]> <script src="http://html5shiv.googlecode.com/svn/trunk/html5. … <script src="http://css3-mediaqueries-js.googlecode.com/svn/t … <![endif]--> だけ書き直しておきます。教えてgooの仕様で書き換えられてしまう。 下記の：は半角の:に戻してね。 <!--[if IE]> <script src="http：//html5shiv.googlecode.com/svn/trunk/html5.js"></script> <script src="http：//css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js"></script> <![endif]-->
つづり間違えてた。background ですね。
>> ボタン位置をセンタリングしたい １つの例です。 .katan {position: absolute; bottom:0;} ↓ .sita {position: absolute; bottom:0; display:table-cell; width: 33.3%; text-align:center;}
body{ に、 width:1100px; を追加。
う～ん。 二か所の <p><a href="#Top">閉じる</a></p> は、 <p><a href="#Top">トップへ</a></p> のほうが良いですね。 そしてスタイルシートの最後の部分を section:target a[href="#Top"]{position:absolute;bottom:0;right:0;width:6em;text-indent:-4em;overflow:hidden;} section:target a[href="#Top"]:after{content:"　閉じる";} この方が本来の姿でしょう。 このように文書構造とプレゼンテーションを分けると・・HTMLは弄らずにユーザーエージェント(ブラウザとかスマホとか携帯電話とか、印刷機とかスクリーンリーダー)ごとにデザイン変えられるし、気が変わったらスタイルシートだけ書き直せば、サイト全体を一挙にデザイン変えられる。 　ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　のページをIEやfirefoxのような代替スタイルシート対応のブラウザで訪問して、メニューの「表示」から「スタイルシート」に進み、色々なスタイルを選択してみるとそれがわかる。もちろん印刷プレビューで印刷イメージを確認してもよい。
私は独学ですし、独学でないと学べないと思う。 　これはすべての学問について言えることで、学校や教室で学べることは学び方と基礎にすぎず、使い物になるところに行くためには、その時その時の目的--やりたいことに合わせて独学するしかない。 　私は今から20年近く前、45歳ころにネットの世界に足を踏み入れて間もなく取り組んだのがシェルスクリプトとPerl。まだブラウザも今ほどの機能は持っていなくて、サーバー側で処理をする時代でした。 　当時はここのような回答してくれるところもなく、当時はニュースグループというメーリングリストしかなかった。そこで聞くと、返ってくる答えは「man!」とだけ。すなわちマニュアルを読め!!。それぞれの言語に付属しているマニュアルをコマンドプロンプトから、man ls として示される程度の内容は聞くな！！！　ということ。厳しい世界でしたが、それは私にとって、単に疑問を教えてもらう以上に役立ちました。 　人に聞くより調べろ!!。調べれば関連した情報も次々に調べなきゃならない。それらがすべて身につく。 　HTMLのようなマークアップ言語( https://ja.wikipedia.org/wiki/%E3%83%9E%E3%83%BC … )とプログラム言語は区別しないとなりませんが、 質問を 教えて！goo > [技術者向] コンピューター > プログラミング > Webデザイン・CSS > のカテゴリーで質問されているので、Webデザイン・CSS　に限定して回答すると 基本は HTML( https://ja.wikipedia.org/wiki/HyperText_Markup_L … ) 　これはSGMLから派出したマークアップ言語で、SGMLの背景( https://ja.wikipedia.org/wiki/Standard_Generaliz … )を読まれたら分かるように、文書の中にある個々の要素(Element)をタグによってマークアップするメタ言語( https://ja.wikipedia.org/wiki/%E3%83%A1%E3%82%BF … )にすぎません。 　スタイルシートは、HTMLで示された文書構造に基づいて、それぞれの構成要素をどのように表現するかというものです。 　私はHTMLは1.0～2.0～3.2と歩んできましたが、2.0～3.2に進むあたりで、この本来のSGML的な目的から大きく逸脱してしまいました。HTMLは文書の体裁を表すものという誤解が浸透して、<h1></h1>は文字を大きく見せるためとか・・。その反省からHTML4.01が策定されたのはご存知だと思います。 　よって、「Webデザイン・CSS 」に限ると、きちんとHTMLを学ばれて、スタイルシート、を習得して必要に応じてjavascriptを学ぶのが良いと思います。 　似たようなことを「動きのあるサイトの作り方がしりたい( https://oshiete.goo.ne.jp/qa/9236955.html )」に実例も上げていますから参考にしてください。 ★Webデザイン・CSS以外のプログラムとなると、CGI,PHPとなるでしょう。 　CGIは「ウェブサーバ上でユーザプログラムを動作させるための仕組み。 https://ja.wikipedia.org/wiki/Common_Gateway_Int … 」で、最も有効な仕組みで、サーバー側で動作させるプログラムは、Perl( https://ja.wikipedia.org/wiki/Perl ),Ruby( https://ja.wikipedia.org/wiki/Ruby ),AWK( https://ja.wikipedia.org/wiki/AWK ),Python( https://ja.wikipedia.org/wiki/Python )などがありますから、自分の好みに合ったものを身につければよい。 　まあ、PerlかRubyが良いでしょう。いずれもテキスト処理が得意ですが、それ以外も可能です。 　ただ、書いてはいちいちサーバーでテストはできません。そんなことしたらバグでサーバーがダウンしたり・・。 　そのために、ローカルでプログラムを書いてテストする環境を構築しなければなりません。 　私は、Cygwin( https://ja.wikipedia.org/wiki/Cygwin )でテスト環境を構築していますが、大きなニュースになっていたので、ご存知だと思われますが、次期Windows10の改定で Build 2016で驚きの発表―Microsoftはこの夏Windows 10でBashシェルをサポート | TechCrunch Japan( http://jp.techcrunch.com/2016/03/31/20160330be-v … ) BashシェルをWindowsに搭載するWindows 10大型アップデートなど、Microsoft Build 2016で発表された重要な10項目まとめ - GIGAZINE( http://gigazine.net/news/20160331-microsoft-buil … ) と、Cygwin入れなくても可能になるかもしれません。
製作中のものから流用・・・間に合わせなので、もっと良い方法があるけど。 本文のHTMLは これだけだけ・・・ ★タブは＿に置換してあるので戻す。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="ORUKA"> <style media="screen"> <!-- section{ ＿position:relative; } section nav ul{ ＿list-style-type:none; ＿margin:0; ＿text-align:center; } section nav ul li ul{ ＿padding:0em; ＿width:100%; } section h2,section p,section nav{ ＿margin-right:210px; } section nav ul li{ ＿display:inline-block; ＿width:230px; ＿height:230px; ＿margin:5px; } section nav ul li a{ ＿display:block; ＿width:100%; ＿height:100%; } section aside{ ＿position:absolute; ＿right:0;top:0; ＿width:200px;height:100%; ＿background-color:fuchsia; } section nav p[title="すべて見る"]{display:none;} section nav ul li[title="隠す"]{display:none;} section nav ul li[title="隠す"] a{background-url:none;backgrund-color: silver;text-indent:0;} section aside p{margin:0;} @media (max-width :1023px){ ＿body{background-color:rgb(255,220,220);} ＿section h2,section p,section nav{ ＿＿margin-right:0; ＿} section nav ul li{ ＿width:210px; ＿height:210px; } ＿section aside{ ＿＿display:none; ＿} } @media (max-width :800px){ ＿body{background-color:rgb(255,255,220);} ＿section nav ul li{ ＿＿width:180px; ＿＿height:180px; ＿} ＿section nav ul.supplement{ ＿＿display:none; ＿} ＿section nav p[title="すべて見る"]{display:block;} ＿section nav ul li[title="隠す"]{display:block;height:1.6em;width:auto;} ＿section nav ul:target{ ＿＿display:block; ＿} } @media (max-width :480px){ ＿body{background-color:rgb(220,255,220);} ＿header,section,footer{ ＿width:auto; ＿min-width:200px; } } /* リンク画像の指定 */ ＿section nav ul li a{backgrond:50% 50%;background-size:cover;text-align:left;text-indent:-40em;overflow:hidden;} ＿section nav ul li a[title="地域検索map1へ"]{background-image:url(./images/1.jpg);} ＿section nav ul li a[title="地域検索map2へ"]{background-image:url(./images/2.jpg);} ＿section nav ul li a[title="地域検索map3へ"]{background-image:url(./images/3.jpg);} ＿section nav ul li a[title="地域検索map4へ"]{background-image:url(./images/4.jpg);} ＿section nav ul li a[title="地域検索map5へ"]{background-image:url(./images/5.jpg);} ＿section nav ul li a[title="地域検索map6へ"]{background-image:url(./images/6.jpg);} ＿section nav ul li a[title="地域検索map7へ"]{background-image:url(./images/7.jpg);} ＿section nav ul li a[title="地域検索map6へ"]{background-image:url(./images/8.jpg);} ＿section nav ul li a[title="地域検索map7へ"]{background-image:url(./images/9.jpg);} --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿</header> ＿<section> ＿＿<h2>本文</h2> ＿＿<p>ナビゲーションリストのようですから、navでマークアップしておきます。</p> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="" title="地域検索map1へ">地域検索map1へ</a></li> ＿＿＿＿<li><a href="" title="地域検索map2へ">地域検索map2へ</a></li> ＿＿＿＿<li><a href="" title="地域検索map3へ">地域検索map3へ</a></li> ＿＿＿</ul> ＿＿＿<p title="すべて見る"><a href="#view2">すべて見る</a></p> ＿＿＿<ul id="view2" class="supplement"> ＿＿＿＿<li><a href="" title="地域検索map4へ">地域検索map4へ</a></li> ＿＿＿＿<li><a href="" title="地域検索map5へ">地域検索map5へ</a></li> ＿＿＿＿<li><a href="" title="地域検索map6へ">地域検索map6へ</a></li> ＿＿＿＿<li><a href="" title="地域検索map7へ">地域検索map7へ</a></li> ＿＿＿＿<li><a href="" title="地域検索map6へ">地域検索map6へ</a></li> ＿＿＿＿<li><a href="" title="地域検索map7へ">地域検索map7へ</a></li> ＿＿＿＿<li title="隠す"><a href="#">隠す</a></li> ＿＿＿</ul> ＿＿</nav> ＿＿<aside> ＿＿＿<h3>Something aside</h3> ＿＿＿<p>本文と関係ない(asideな)記事</p> ＿＿</aside> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
・画像ではありません。(^^)テキストとしてコピーできる。 ・画像はプログラムというよりスタイルシートで指定しているが関係ない 単純にソースを見てその部分を書き直す。 <div id="slidecaption"><div class="slide-content">Brushed</div></div> の、Brushed　を、Mizukane とかね。スタイルシートで .slide-content { color: #ffffff; font-size: 60px; letter-spacing: -3px; text-transform: uppercase; } ウェブ開発されていれば、開発ツール( https://addons.mozilla.org/ja/firefox/extensions … )の豊富なfirefoxをお使いだと思いますが、そのアドオンfirebugでどこかすぐわかる。 　それはともかく、あまり良いテンプレートではないです。 ・javascriptを多用しすぎ ・divであふれている。(1999年のHTML4.01の時代からdivは文書構造を示すためとなっている---デザインのために使うものではない。 　「id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　HTML5ではdivはよほどのことがない限り使うなと 　「Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( https://www.w3.org/TR/html5/grouping-content.htm … )」 ・.slide-contentというセレクタはCSS1の時代の名残、CSS2以降は起点セレクタを書く 　あれならHTMLとCSSだけで、数十分の一の量でできる。そもそも簡単に編集できない。
最新スレッドの上位のmenuboxクラスのついたdivにmargin-bottomを設定するか その他のスレッド上位のmenuboxクラスのついたdivにmargin-topを設定してみては？
ちゃんと、書いてある。 ＞@import url('../xeory_extension/style.css'); 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 6.3 @import規則 　'@import'規則は、ユーザーが他のスタイルシートからスタイル規則の取り込みを可能にする。CSS 2.1では、あらゆる@import規則は、他のすべての規則の前に置かなければならない（@charset規則が存在する場合を除く）。ユーザーエージェントが@import規則を無視しなければならない条件については、構文解析の節を参照のこと。'@import'キーワードは、組み込むスタイルシートのURIを続けなければならない。文字列も許容される。文字列は前後にurl(...)を持つかのように解釈される。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Assigning property values, Cascading, and Inheritance - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )］より 　ここだけじゃなく。 1 CSS 2.1仕様について 2 CSS 2.1の手引き 3 適合性：必要条件と推奨事項 4 構文と基本データ型 5 セレクタ 6 プロパティー値とカスケーディング、継承の割り当て 　　6.1 指定値、算出値、実効値 　　　　6.1.1 指定値 　　　　6.1.2 算出値 　　　　6.1.3 使用値 　　　　6.1.4 実効値 　　6.2 継承 　　　　6.2.1 inherit値　 　　6.3 @import規則　　★ 　　6.4 カスケード処理 　　　　6.4.1 カスケード処理の順序 　　　　6.4.2 !important規則 　　　　6.4.3 セレクタの詳細度を計算する 　　　　6.4.4 非CSSの見栄えヒントの優先順位 　7 メディアタイプ 　もすべて重要です。 ＞スタイルシート構造の細かな理解については基本を今一度見直し、再度勉強していこうと思います！ 　決して細かい部分ではありません！！！こちらが重要でプロパティなんか細かいことです。(^^) 　￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ 　どの仕様書でも、重要なものから順番に書いてある。数学と同じように基礎から順番にきちんと学ぶ方がはるかに速く身につけれる。理科や数学と同じ・・ ＞ほぼ独学で勉強して覚えた身なので 　なら、なおさらおかしなサイトや指導者に振り回されず、きちんと順番で学べる。独学のほうが早く身につけられるはずです。私はHTMLもCSSも完全に独学ですが、CSS2.1は一か月もかけていない。 @import の部分を消して、そこに ../xeory_extension/style.css の内容をコピペするとわかるかと ※HTML4.01の仕様書( http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … )、CSS2.1の仕様書だけは、まず目を通してみましょう。今まで、なんと遠回りをしてきたかがわかるかと。
HTMLとCSSの仕様書は読破されていますか？？少なくともどこに何が書かれているくらいは頭に入っていないと。 ＞これを実装したく、webで調べていたのですが 　自己流のクソなサイトをいくら見てもドツボにはまるだけで役には立たない。 　まず仕様書を読む。そこにしたいことはすべて書いてある。それも正確に・・ ＞100%表示で敷かれていますよね。 　そりゃ、そのサイトのように幅を固定すればどうにでもなる。 　そのサイトは、HTML5で書いたつもりでしょうが、そもそもHTML5の最大の目的の一つ「文書構造の明確化」ができていない。 HTML5“とか”アプリ開発入門（1）：Webの3つの問題を解決する「HTML5」とは何なのか (2/2) - ＠IT( http://www.atmarkit.co.jp/ait/articles/1008/30/n … ) 　の【問題2】 　そのためHTML5では、 NOTE:Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors. 注意:著者は、他により適切な要素がない時の最後の要素としてdiv要素を使用することが強く奨励されます。div要素の代わりにより適切な要素を使用することは、読者のためには、より良いアクセシビリティを著者にとってはメンテナンス性の向上につながります。 　と強く言われている。 背景サイズはbackground-sizeプロパティ CSS Backgrounds and Borders Module Level 3( https://www.w3.org/TR/css3-background/#the-backg … ) ★タブは＿に置換してあるので戻す。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="ORUKA"> <style media="screen"> <!-- html,body{position:relative;} html{background-color:black;} body{max-width:900px;margin:0 auto;background-color:silver;} body>section{ ＿background-color:aqua; ＿background-size:cover; ＿height:300px; } body section#abc{ ＿background-image:url("./images/space.png"); } body section#efg{ ＿background-image:url("./images/test2.jpg"); } body section#hij{ ＿background-image:url("./images/1000.png"); } --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#abc">Some</a></li> ＿＿＿＿<li><a href="#efg">navigation</a></li> ＿＿＿＿<li><a href="#hij">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section id="abc"> ＿＿<h2>A smaller heading</h2> ＿＿<p>一番目のセクション</p> ＿＿<aside> ＿＿＿<h3>Something aside</h3> ＿＿</aside> ＿</section> ＿<section id="efg"> ＿＿<h2>A smaller heading</h2> ＿＿<p>二番目のセクション</p> ＿</section> ＿<section id="hij"> ＿＿<h2>A smaller heading</h2> ＿＿<p>三番目のセクション</p> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
@media (max-width: 640px) { header,section,footer{ ＿width:auto; ＿min-width:200px; } } }が一つ抜けていた。firefoxはともかくIEは厳しかった。
そのままでよいはずです。 ただし、順番が逆だと詳細度が同じ[0,0,1,0]のため上書きされます。 ★.testは文字通りテストだと思いますが、このようなセレクタの書き方はCSS1時代の名残で、CSS2以降は起点セレクタを書くようにしましょう。 ★デザインのためにclass名を付けるのではなく、あくまでidやclassは文書構造を補足するためのものです。 　HTML5ではdiv要素は基本的に使わなくなります。 ただ、No.1さんが言われるように、一般的なブラウザへのスタイルを記述したのち、max-widthでスマホなどへの記述を書く方が良いです。後方互換もですが、何よりもわかりやすい。 サンプルはHTML5です。 ※タブは＿に置換してあるので戻す。 ※スクリーンメディアのみに対応しています。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA"> <style media="screen"> <!-- ＿h1,h2,h3,p,ul{margin:0;line-height:1.6em;} ＿p{text-indent:1em;} ＿header,section,footer{ ＿＿width:95%; ＿＿background-color:silver; ＿＿padding:0.5em 1em; ＿} ＿section aside{ ＿＿display:none; ＿} ＿pre{background-color:white;} @media (min-width: 500px) { ＿header,section,footer{ ＿＿width:80%; ＿＿position:relative; ＿＿max-width:800px; ＿＿margin:0 auto; ＿} ＿section section{ ＿＿margin-right:220px; ＿＿width:auto; ＿} ＿section h2,section p{ ＿＿margin-right:220px; ＿} ＿section aside{ ＿＿display:block; ＿＿position:absolute; ＿＿right:0;top:0; ＿＿height:100%;width:200px; ＿＿background-color:yellow; ＿} ＿section section p, ＿section aside p{ ＿＿margin-right:0; ＿} ＿ --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#">Some</a></li> ＿＿＿＿<li><a href="#">navigation</a></li> ＿＿＿＿<li><a href="#">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>display:none;について教えて下さい。</h2> ＿＿<p> ＿＿＿ブラウザが500px未満の時には非表示にし、500px以上の時には表示するということを行いたいのですが上記のコードでは非表示のままです。 ＿＿</p> ＿＿<p> ＿＿＿これは、display:noneで要素そのものがなくなっているため、動作しないのでしょうか？ ＿＿</p> ＿＿<section> ＿＿＿<h3>詳細度が同じ場合は後出のもので上書きされる。</h3> ＿＿＿<p> ＿＿＿＿このサンプルのように、出現順番によって変わります。しかし、通常は標準的なものを先に記述して、狭いディスプレイにのみ上書きするほうが良いです。なぜならスマホなどに使われているブラウザは最新のものですが、パソコンからの利用の場合はメディアクエリに対応していないものがあるからです。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿最初に一般的なスタイルを記述したのちに、狭いディスプレイ用などを記述しましょう。なお、 ＿＿＿</p> ＿＿＿<pre>@media all and (min-width: 500px)</pre> ＿＿＿<p> ＿＿＿＿ではなく ＿＿＿</p> ＿＿＿<pre>@media screen and (min-width: 500px)</pre> ＿＿＿<p> ＿＿＿＿と、メディアを限定しないと印刷や携帯端末にも適用されてしまいますよ。 ＿＿＿</p> ＿＿</section> ＿＿<aside> ＿＿＿<h3>Something aside</h3> ＿＿＿<p> ＿＿＿＿本文と関係ない補足記事です。補足記事(aside)は狭いディスプレイだと表示されない。 ＿＿＿</p> ＿＿</aside> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
CSSで可能なものをわざわざスクリプトにする意図がよくわかりませんが・・・ メニュー等のドロップダウンは数多くライブラリ化されていますし、作り方を説明しているサイトも多いので、検索すればたくさんヒットするはずです。 以下はそのごく一例です。（内容は吟味していませんので悪しからず） http://zxcvbnmnbvcxz.com/jquery-easy-pulldawnnav/ http://jquery.keicode.com/ext/menu1.php http://allabout.co.jp/gm/gc/416557/ http://www.designwalker.com/2009/02/jquery-dropd … それぞれで、少しずつ考え方や動作は異なるとは思いますが。 ご指摘のサイトの動作に雰囲気を似せたごく簡単なものを作成してみましたので、ご参考まで。 （CSSアニメーションは利用していませんが、CSSは当然利用しています） <!DOCTYPE HTML> <html lang="ja"> <head><title>Sample</title> <style type="text/css"> #languageNavi * { margin: 0; padding: 0; list-style-type: none; } #languageNavi { width: 130px; background-color: #36C; } #languageNavi li { margin: 6px 0; } #languageNavi a { display: block; color: #FFF; font-weight: bold; text-decoration: none; line-height: 2em; text-align: center; } #languageNavi a:hover, #languageNavi a.active { background-color: #4AD; } </style> <script type="text/javascript" src="http://www.google.com/jsapi"></script> <script type="text/javascript">google.load("jquery","1");</script> <script type="text/javascript"> $(function(){ var elm = $("#languageNavi"), top = $(">a", elm); var navi = $("ul",elm), h = navi.height(); navi.css({height: 0}); elm.on("mouseenter", function(){ top.addClass("active"); navi.stop().animate({height: h}, "slow"); }).on("mouseleave", function(){ navi.stop().animate({height: 0}, "slow", function(){ top.removeClass("active"); }); }); }); </script> </head> <body> <div id="languageNavi"> <a href="#">LANGUAGE</a> <ul> <li><a href="hoge_ja">日本語</a></li> <li><a href="hoge_en">英 語</a></li> <li><a href="hoge_de">独 語</a></li> <li><a href="hoge_fr">仏 語</a></li> <li><a href="hoge_it">伊 語</a></li> <li><a href="hoge_zh">中国語</a></li> </ul> </div> </body> </html>
スタイルを指定するセレクタをそれに合わせるだけです。 セレクタは、 margin:-.5em 0 0; color:red; font-size:larger; font-weight:normal; というような、プロパティなんかより先に身につけないと始まらない。 当然、仕様書でもそれが先に書いてある。 　理科や数学の勉強と一緒、いきなり公式を使おうとしても絶対に役に立たない。 　基本から--仕様書の最初からきちんと身につけないと不可能です。そのほうがはるかに簡単で応用も利く。 　プログラムが出力するHTMLには一切手を加えずにスタイルシートを追加するだけで自在にデザインできるはずです。 Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification 日本語訳( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　ウェブ開発されていたら、ツール( https://addons.mozilla.org/ja/firefox/extensions … )の豊富なfirefoxをお使いだと思いますが、そのアドオンのfirebug( https://addons.mozilla.org/ja/firefox/addon/fire … )を使うと、とても楽です。firebugにテキストエディタを設定しておくと、firebugで確認後スタイルシート部分を書き換えればよい。
ドメインの失効　料金払い忘れとか・・・
ホームページをつくる目的にもよりますが 格安で、かつ、集客に強い という内容を求めるのであれば↓ http://www.nature-company.com/ 4つの特徴があります。 ●月額 0円　 …制作費が0円で、月額費用あり、というパターンは最近多いですが、結局割高になります。 　月額（利用料）が0円の制作が、もっとも制作費・運営費が格安となります。 ●レスポンシブデザイン …Googleが推奨している、最新のスマホ対応デザインですので、 　モバイル対応はばっちり。検索にも強い。ユーザーが見やすい。というデザインです。 ●更新機能あり …これからは、ホームページも自分で更新する時代となります。 　ページを増やすのも無料です。 ●制作は10ページ …通常のホームページ制作業者は、4～5ページが普通ですが 　10ページの制作で、20ページ制作まで追加料金なし、です。 確認してみてはいかがですか？
HTML5でしたら、canvas や SVGが使えます。 　canvasはjavascriptでビットマップをつくる。SVG(Scalable Vector Graphics( https://ja.wikipedia.org/wiki/Scalable_Vector_Gr … ) )だとベクターですから、拡大縮小しても印刷しても汚くならない。 情報はたくさんある。 https://www.google.co.jp/?gws_rd=ssl#safe=off&q= … https://www.google.co.jp/search?q=HTML%20canvas% … SVGでしたら、データ量はとても少ないし、ベクターなので一種類でよい。
こんにちは。 回答じゃない回答は困りますね… このページのHTML362行目 div.thread_list { width: 49%; } ていう所の数字を変えればできます。 また消してしまえば、他のところと同じように枠幅いっぱいに広がります。 CSSファイルは書き出しておらず、HTMLのhead内に記述しているようです。 あくまでfirebagで見た情報なので、何かしらツールのCMSとかで書き出してるとかだとわかりませんが。 頑張ってください。
divばかりのとんでもなく酷いHTMLなので、見るのやめた。 HTMLには文書構造しか書かない。書いてはならない。 「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」ができていないので、大仕事になる。一目見てやめた。 プレゼンテーションはスタイルシートに任せるという基本ができてない。 HTML4.01では、 「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 でしたし、HTML5では NOTE:Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors.( https://www.w3.org/TR/2014/REC-html5-20141028/gr … ) 注意：著者は、他に適切な要素がないときの最後の手段としてdiv要素を使用することが強く奨励されます。div要素の代わりに、より適切な要素を使用することは、読者にはより良いアクセシビリティを、著者にはメンテナンス性の向上につながります。 　と明確に否定されている。 　方法としては、ウェブ開発されているなら、開発ツール( https://addons.mozilla.org/ja/firefox/extensions … )の豊富なfirefoxをお使いでしょうから、そのアドオンのfirebug( https://addons.mozilla.org/ja/firefox/addon/fire … )を使います。 　広げたい要素を、firebugの右から二番目の四角に指先のアイコンをクリックしてから、HTML画面上の「最新スレッド」「その他のスレッド」をクリックすると、HTMLソースと、スタイルシートが出てきますから、そこでスタイルシートを手直ししてください。 　そしたら、それがCSSのどの部分かも合わせて表示されますから、スタイルシートの該当部分を開きます。---スタイルシートの何行目と書いてある部分を右クリックして、「エディタで開く」→[設定]で、お使いのテキストエディタを指定すると良いです。そしたら即、そこを開ける。 　そして編集です。 　基本的にHTMLは一切触る必要はありません。 ★HTMLに文書構造以外がたくさん書かれているので大変だと思います。 文書構造とプレゼンテーションの分離がいかに重要かというと ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　のページをIEかfirefoxで訪問して、メニューの[表示]から[スタイルシート]に進み、色々なスタイルシートを選択してごらんなさい。ウィンドウ幅を変えたり、印刷プレビューも確認してごらんなさい。 　HTMLソースを見ると、デザインらしきことは一切書いてない。div要素も文書楮を示すようにしか書かれていない。 　だから、スタイルシートを書き替えるだけで、単に幅を変えること以上にでプレゼンテーションを変更できる。もちろんHTMLのメンテナンスも楽。 　下手に弄るより、HTMLから全面的に直したほうが早そう。
HB(ホームページビルダー)ですよね。それはそれは最悪・・。少なくともプロは使わない。とても問題点が多く・・ ホームページ・ビルダー - Wikipedia( https://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC … ) そもそも、 ＞編集したいwebサイトをchromeでダウンロードして、 　が失敗の第一歩。 ★FTPを使ってダウンロードすべきです。FTP(File Transfer Protocol)だと、ファイルやホルダーをそのままダウンロードして、かつOSによる改行コードの差も変換してダウンロードしてくれます。 　ブラウザを使うと、ディレクトリ構成などは再構成されますから使い物にはなりません。あくまで、リモートにあるページをネットに接続しなくても閲覧できるように保存する以上の機能はありません。 ＞chromeでダウンロードして、 　chromeｆ、ウェブ開発には使用しません。ツールが貧弱なのと、代替スタイルシートも使えないし。 　ウェブ開発される人は、開発ツール( https://addons.mozilla.org/ja/firefox/extensions … )の豊富なFirefoxを使います。ブラウザの中では最もウェブ標準に適合していてるし。 Firebug( https://addons.mozilla.org/ja/firefox/addon/fire … ) 　HTMLやスタイルシートを書き替えながらテストできる。 Html Validator( https://addons.mozilla.org/ja/firefox/addon/html … ) 　HTMLの文法チェック IE Tab V2( https://addons.mozilla.org/ja/firefox/addon/ie-t … ) 　IEで見たり Open With( https://addons.mozilla.org/ja/firefox/addon/open … ) 　そのページを他のブラウザで開いたり FireMobileSimulator( https://addons.mozilla.org/ja/firefox/addon/fire … ) 　径庭電話やスマホをシミュレートしたり ・・・・ 　ダウンロードしたファイルをテキストエディタで編集します。メモ帳でもできなくはないが、高機能なテキストエディタが断然使いやすい 私は有償のEmEditor( https://jp.emeditor.com/ )ですが、やや高価なので30日間の使用期間を経過した時点で、free版としてダウングレードして使用し続けるか、ライセンスを購入して使い続けるかを選択すればよい。それでも90日以内なら返金してもらってfree版として使い続けることもできる。 EmEditor (テキストエディタ) | EmEditor Free( https://jp.emeditor.com/text-editor-features/his … ) 　ほかにも、有名どころとしてテキストエディタとして「秀丸エディタ」とかもありますね。 　これらをHTMLエディタ( https://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83 … )として使うのが良いでしょう。 1) とりあえず、FTPを使ってウエブサイトのデータを全てローカルに移動すること 2) 該当するファイルをテキストエディタで開いて、編集すること 3) それをfirefoxで開いて、firebugを使って細かい修正をテストして、その内容をテキストエディタで修正する。 　効率的なデバックツール、Firefoxのアドオン「Firebug」の使い方 | WEB八分儀( http://web8bungi.sakura.ne.jp/first/htmlcss/fire … ) 　意外と知られていない機能が多い！？Firebugの使い方 | THE HAM MEDIA BLOG( http://h2ham.seesaa.net/article/154387441.html ) 4) 編集が済んでOKならFTPで転送 ★なお、EmEditor⇔firefox⇔firebug⇔EmEditor間は、設定により自由に行き来できますので、エディタで編集中のものをFirefoxで開いたり、firebugでテスト後に編集したいところはEmEditorでダイレクトに移動して、再読み込みしたりが自由自在に行き来できます。 　そして、openWithを使って、IEやChromeでの表示を確認したり、FireMobileSimulatorでスマホや携帯での表示を確認できる。 　スタイルシートを全面的に書き換えるときは、firefoxの代替スタイルシートを使えばよい。
お使いのブラウザは何ですか? 「ゲジゲジした」という表現の意味があまり理解できませんが、補間なし(ニアレストネイバー)で縮小した時に出るジャギのことを言っているのでしょうか。 昔のブラウザは拡大縮小時に補間せずジャギのある表示になりましたが、最近は明示的に指定しないかぎり補間されてなめらかな表示になります。 また、不鮮明になる画像はどのようなものですか? ピクセルに合わせて1px幅の線で書かれた図やビットマップフォントなどは、拡大縮小すると線の幅が一定しないぼやけた表示になり美しくないですが。
Internet Explorer 以外でWebsiteを確認してみる。 https://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A7 … ウェブブラウザ Google Chromeなど
ほぼ、それで合っています >ドメインを取得する（もしくはサブドメインを取得する） サブドメインは取得不要、自由に使える ○○.com(jp等）がメインドメイン、△△.○○.comがサブドメイン。 >ファイルをアップロードして、公開 googleのクローラが巡回してくるので、数日で自動登録される。 積極的に公開したいなら、以下 >google等にサイト登録 googleだけで良い。「fetch as google」で積極的に公開できる 蛇足 全国展開では無くて地域に限定しているサイトならMEOを施す様に！
そうそうウィンドウ幅も変えてごらんなさい。 画像も伸縮させられるけど省きます。
全て相対サイズですからお好きなものを%については何を基準にするかが変わりますから注意してください。基本的にはブロック要素は直近のstaticでないコンテナブロックですが、四角形ブラウザで、ルート要素の場合はウィンドウサイズになります。 　em,rem,exなどは、その時のフォントサイズを参照しますから、それも注意が必要かと思います。 　レスポンシブの場合は、本来の目的からしてウィンドウの絶対サイズ--pxで指定することが多いのでは？？レスポンシブというよりリキッドデザインの話かな 　いずれにしても、仕様書--当然読まれているとは思いますがに詳しく書いてあります。CSS2.1の仕様書で単位の項目と視覚系ブラウザのブロックの扱いを読まれるのが良いでしょう。 7 メディアタイプ 8 ボックスモデル 9 視覚整形モデル 10 視覚整形モデル詳細 ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )
height: 357px; width: 960px; となっているので、ＰＣで表示された場合、高さ357px横幅960pxで表示されますよね。 質問者様のお話ですと、スマホで見た時は横幅だけ画面サイズに縮小されるとの事なので おそらく、別の箇所（質問者様が書いたＣＳＳ以外）で、画面サイズが変更された場合の横幅の指定がされているのでしょう。 height: 357px; width: 960px; の部分を height: 100%; width: 100%; に、とりあえず変更してみると、ＰＣとスマホだと、画面に対し１００％にはまりませんか？
創英の角ゴシックUBに似ていますが、微妙にちがうかも さほど特殊なフォントにも見えませんから同じ様なものは いくつかあるのでは？ http://www.akibatec.net/wabunfont/library.html
もしかしたら、外しているかもしれません。その時は、ご容赦を 過去互換と標準の違いは、今回の場合ボックスモデルの取り方の違いかな？と思います。 なので、table周辺のボックスを過去互換と同じ解釈をさせればいいと思います。 table,table *{ box-sizing:border-box;/*widthやheightにpaddingやborderを含める*/ } また、イラストレータでのwebサイト作成は最新の技術に対応できます。フラットデザインと相性がいい上に、svgデータとして利用できます。小さくても大きくても荒れないしブラウザも古すぎなければ対応しています。
＞見よう見まねで必要に駆られて色んなサイトを参考にしながら無理矢理やっておりますので、勉強不足で専門用語が分かりません。 　いや、これか一番非効率で時間もかかり、何よりもうまくいかないのです。---私の20年近い長い経験から断言できる。 ＞私レベルで分かる様に噛み砕いてご教授頂けると幸いです。 　なら、仕様書をとりあえず読みましょう。数学の勉強がきちんと基礎から順を追って学べば小学生でも数検２級が取れるように、そのほうがはるかに速く作業を進められる。そもそも、用語がわからないでは説明を聞いてもチンプンカンプンでしょう。例えば[詳細度を高くしなさい」と一言で正確に言われても、セレクタや詳細度の計算がわからないでは役に立たないでしょう。 ＞既存のテーブルの文字は全てFontタグに挟まれて色指定がされており、 <font>は非推奨の典型ですが、その色指定は属性(attribute)で指定されているのでしたら、詳細度は0として産出されますから、詳細度0001の指定でも上書きできます。 「ユーザーエージェントは、HTMLソースドキュメントの体裁用の属性を尊重してよい。その場合、これらの属性は0に等しい詳細度と対応するCSS規則に変換され、それらは著者スタイルシートの先頭に挿入されたかのように扱われる。したがって、後のスタイルシート規則によって上書きされることがある。( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )」 →6.4.3 セレクタの詳細度の計算( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　そして、colorプロパティは継承されるプロパティですから 継承: yes( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) <td><font color="red"> に対して、td{color:green;}の場合、<font color="red">がなければ継承されますが、それがあると詳細度0とはいえそちらが適用されます。対策としては、 font{color:inherit;}と継承させるか、td font{color:green;}とすればよいはわかりますよね。 　colorプロパティの値は、 値: <color> | inherit( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　なのですからね。 ★ちなみに、fontで可能な属性 size=,color=,face= 15.2.2 フォント変更要素: FONT要素とBASEFONT要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) については、対応するCSSのプロパティで font{color:inherit;size:inherit;font-family:inherit;} とすれば、すべて無視してくれる。(^^) 　こんなこと仕様書にサラッと書いてある。 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) ★「見よう見まねで必要に駆られて色んなサイトを参考にしながら無理矢理やっておりますので、勉強不足で専門用語が分かりません。」がとにかく間違い。最も時間がかかり、無駄で間違いに陥りやすい。 　きちんと仕様書から始めていたら、1～2週間もあれば済んでいた作業でしょう。
ま～だ、からかってるのか？？ html側でdivを２回使っているのが間違いの元。 １例を示す ■css側 #footer{ font-size : 13px; /*line-height : 36px;*/　←要らない color : white; background-color : #990000; text-align : center; width : 960px; height : 72px;　←２行分を収容するサイズにする margin-right : auto; margin-left : auto; padding:30px 0 0 0;　←1行目の縦位置 ■html側 <div>～</div>は１個。この中に全てを記述する。 <div id="footer">Copyright 2015 ***** All Right Reserved</br> *******</div>
height : 36px; が高さの指定です。 しかし、overflowの指定がないために、footerの内容が多い場合は、実際には、はみ出して表示されるはずです。 line-heightは行の高さですが、pxで指定すると視覚弱者が拡大しても固定されたままですからまずいです。通常は2emのように相対サイズで指定すべきです。 'line-height'( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 'height'( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 'overflow'( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )
え～～っと・・・ ＞画像にimgタグというタグを埋め込む事で～ ちょっと思い違いをなさっているかも。 ブラウザで表示しているものはHTML文書と言われる、記号みたいなものを含む文章です。 試してみるとわかりますが、ブラウザの「表示」→「ソースを表示」などで表示されるものが、上記のHTML文書といわれるものです。 （ブラウザによって、若干操作が異なる場合があります） この文書をブラウザが解釈して、ご覧になっているような表示をしてくれるという仕組みです。 文章の中に画像を表示したい時に、「imgタグ」というものが使われます。同様にリンクを貼りたいときには「リンクタグ」というものが使われます。 ＞サイトではなく別の新たな画像をリンク先として指定することは出来ないのでしょうか？ すでに先の回答者様様がご回答のように可能です。 例えばこのページの質問欄右上の画像へのリンクは 　https://oshiete.goo.ne.jp/images/feeling/qjiro/p … （↑は文字に対するリンクですが、好みの文章又は画像をクリックすればリンクするようにもできます） ＞画像にリンクをはる作業というのは、～～画像所有の管理者のみにしか出来ない作業ということで間違いないでしょうか？ 違います。そのリンクの作成者にしかできない作業です。 （画像やサイトの管理者には知る由もありません） 上のリンクも私が作成していますが（ここは投稿欄なので間接的な作成ですが）、もちろん私は画像の所有者ではありません。 公開されている（みなが自由にアクセス可能な）情報ですので、それに対するリンクは（技術的には）いくらでもできるようになっています。 しかしながら、一方で、公開されたものとはいえ他人の著作物を黙って利用するのはいかがなものかという考えもあり、一応利用の旨をお断りするのがネチケットとなっているようです。（国によっても若干考え方の違いがあるようですが・・・） https://ja.wikipedia.org/wiki/%E3%83%8D%E3%83%81 … http://www.cgh.ed.jp/netiquette/ とは言うものの、（↑）は全て無断リンクですけれど・・・（苦笑）
<meta＞タグというタグを使うことで、好きな秒数で別のページに自動的に飛ばすことができます。 おそらくサイトの管理者がその設定をされたのだと思います。 「自動リンク」で検索してみると詳しいタグが分かると思いますよ。
jqueryを使って、各自がjavaで作成している訳で http://memocarilog.info/jquery/7477の作成者に質問した方が早いです。 >>main_photoに重ねて画像の上に メニューの様に使いたいなら、メイン画像の上に横に並べれば良いとおもいますが・・・。 例えば、http://black-flag.net/jquery/20111122-3597.html。 html内の例ではulを先に記述する必要がありますが・・。
○は出来る p::first-letter { color:red; } https://developer.mozilla.org/ja/docs/Web/CSS/:: … □は無理 HTML 構造を変えるなり、スクリプト処理を追加するなりしてください
あくまでCSSでというのであって#3さんのようにコードを書き換えられるのであれば {$product.stock_str} の出力を <span class="a">A</span> <span class="b">B</span> <span class="c">C</span> のように変更して、 .a{color:#fc0;} .b{color:#ff0;} .c{color:#0ff;} などと指定する方法があります。 コードも変えられないということであれば、jQueryなどで、.quantityの要素を取得してif文で同様にspan要素を付けてあげれば良いと思います。
二つのDIVの幅の合計に十分余裕を持ってラップすればよいのでは？ (説明上wrapに色を付けていますが、backgroun-colorを指定しなければ見えない) <style> #a {width:100px;height:100px;background-Color:yellow;border:1px solid #000000;float:left;} #b {width:200px;height:80px;background-Color:lime;border:1px solid #000000;float:left;} #wrap {width:320px;overflow:hidden;background-Color:aqua;} #c {width:200px;height:80px;background-Color:fuchsia;border:1px solid #000000;} </style> <div id="wrap"> <div id="a">a</div> <div id="b">b</div> </div> <div id="c">c</div>
バズ部みて一通り理解できたんなら、デフォルトでできることはだいたい解ったと思う。 次はPHP勉強すっと良いよ。 色々いじれるようになって、テーマなんかもオリジナルなアレンジ加えられるようになるから。 http://www.standpower.com/ PHPがある程度使えるようになれば、Wordpressももっと使い倒せるようになるよ。
こんにちは。 CSS3を使えば、画像なしでCSSだけでできますよ。 以下参考まで。 【HTML】 <img src="image.png" width="100%"> <div class="band"><p>あいうえおかきくけこさしすせそたちつてと</p></div> 【CSS】 *{margin:0; padding:0;} img{border:0;display: block;} .band{ width: 100%; border-top: solid 4px #009d89; } .band p{ background-color: #009d89; width: 50%; color: #FFF; position: relative; height: 30px; line-height: 30px; text-align: center; } .band p:after{ content: ""; display: block; height:0; width:0; border: solid 21px transparent; border-bottom: solid 21px #009d89; position: absolute; right:-21px; bottom:9px; -webkit-transform: rotate(-45deg); -ms-transform: rotate(-45deg); transform: rotate(-45deg); } ------------------------ 説明として。 .band pで背景緑、幅50%のテキストを置く。 その右側に、擬似要素afterでborderを使った三角形を作り、それをtransform:rotate()で-45度回転したものを position指定でくっつけています。（逆に白い三角形を作って、逆に回転させて、緑のテキストの上にかぶせるのもあり） 上部のボーダーは.bandにつけています。でないとwidth100%にできないので。 transformがIE8には対応していないので、その場合はIE8のCSS3適用プラグインを使用するか、やっぱり画像で対応するかだと思います。 頑張ってください。
ちなみにこうなるはず
パターンがいくつかあって、 製作者側の設定もあるし、ユーザー側の端末やブラウザ・設定による事もあります。 制作者側の仕様や設定は、#1さんの考えだけど、 スマホを想定していなかった場合は、縮小されて全体が表示される場合もあるし、アップされた一部（左上部）しか表示されないパターンもあります。 固定幅やレスポンシブ、viewportや-webkit-text-size-adjustだったり各々の制作方法によります。 制作者の意図や考えも違いますので、コンテンツによってはどちらが良いとは言えない（好みや利便性）事もあります。 ユーザー側だと、iPhoneやAndroidなどの違いもあるし、 ユーザーの設定によってPC版表示もできますし・・・ スマホに限らず、タブレットでも違うようになりますよ。 スマホ用といっても、別々のファイルを作って振り分けるパターンと、同じファイルをCSSで違う見え方にしているパターンもあります。
かつてWeb制作会社に勤務していました。 技術書もある程度必要とは思いますが、デザイナーとしてはデザインそのものやユーザーインターフェイスについて勉強したほうが良いと思いますよ。 デザインとはどうあるべきかとか、こういうインターフェイスにしたい、というコンセプトがしっかりしていれば、技術なんて必要に応じて身に付くものです。 Webも所詮人間が使うものですから、そこはきちんと考えられるようになってほしい。技術より普遍なものですし。 最近は技術ありきのWebサイトが多くて辟易します。
こんにちは。 http://www.html5-memo.com/css3/pc_bunki/ こちらのサイトに丁寧に解説付きで、 リダイレクト先のURL以外はそのままコピペで、使えるJSソースを貼ってくれてますよ。 とは言え、個人的には可能であればPHPのheader関数ほうが、作業的にもいいかなあとは思います。 JSだと、HTML編集の際にローカルでも.locationが挙動してしまって、表示確認できず、表示確認するためにいちいちJSソースを一旦切らないといけなくなるので、面倒だなあと思います。 頑張ってください。
そのようにセレクタを書けばよい!!! div.nav ol li a[href="abc"]{} div.nav ol li a[href="efg"]{} 4 構文と基本データ型( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティー値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) は、フェードとか、色とかのプロパティを学ぶより、先に学ばなければならない基礎ですよ。 足し算引き算ができないのに、微積分をつついているようなものです。 [重要] classやidは文書構造を補完するものでデザインのためではありません。文書構造を示すためにclassが書かれていれば、それを利用すればよいというだけで、classなんてなくてもよい。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　上記だと div.nav ol li a[href="abc"] ナビゲーション(nav)クラスに所属するブロック(div)の子孫である序列リスト(Ordered List)の子孫のa要素のうちhref属性の値に/abcを持つ要素というセレクタになる。 サンプル タブは＿に置換してあるので戻す。 とりあえずフェードインアウトを繰り返す。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> ＿<link rel="stylesheet" href="css/style.css"> <style media="screen"> <!-- header nav ul{list-style-type:none;width:50%;margin:10px auto;position:relatve;text-align:center;} header nav ul li{width:50;height:200px;position:relatve;line-height:200px;margin-top:10px;} header nav ul li a{display:block;width:100%;height:100%;background-color:rgba(255,255,0,1);animation: anime1 5s ease -2s infinite alternate;} header nav ul li a[href="/nav"]{background-color:rgba(0,255,255,1);animation: anime2 4s ease -1s infinite alternate;} @keyframes anime1 { 0% {background-color: rgba(255,255,0,1);} 100% {background-color: rgba(255,0,0,0.5);} } @keyframes anime2 { 0% {background-color: rgba(0,255,255,1);} 100% {background-color: rgba(0,255,0,0.5);} } --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="/some">Some</a></li> ＿＿＿＿<li><a href="/nav">navigation</a></li> ＿＿＿＿<li><a href="/link">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿</p> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
・JavaScriptを使用することなく簡単にロールオーバーを実装 ・単純に見た目をかっこよくするため ・画像で制作したものに置き換えたり、などがあります。 ・スマホサイトの場合、表示速度を上げる為にCSSスプライトと併用。 などが理由だと思いますが、 htmlマークアップと中身が違ってしまうのでSEO的にはアウトですね。 多用しなければバレナイかも知れない・・・が本音でしょう。
＞ﾊﾞｯｸの画像を切り替え の意味が分かりません。何らかのアクション（マウスオーバーとかクリック）、あるいは時間でですか？ できればこの程度のことにjavascriptは使いたくないし。 　いずれにしても、タイトルをz-index:1000程度にでもして配置すればよいのですが・・・
結構面倒。 htaccessを設置しようとしてるからには、ある程度詳しい筈。 この手の質問なら、googleヘルプフォーラムが一番良いと思う。 https://productforums.google.com/forum/#!forum/w …
私もNoto Sans CJKをおすすめしますが、注意点として、1つのフォントで複数の漢字圏言語に対応するのは無理です。 同じ漢字でも国ごとに形が異なるため、各国語用に別のフォントを使うことになります。※画像参照 Noto Sans CJKはJP・KR・SC・TCの4つがセットになっているので全てインストールして言語ごとに使い分けてください。
文書構造に従ってセレクタを記述すればよい。 もちろんh3要素内のリンクを指定してもよい。 文書構造がわからないと具体的には無理です。 h3{}のようなタイプセレクタの詳細度は[0,0,0,1]ですので、h3 a{}とするだけで詳細度は[0,0,1,1]となり上書きされる。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティー値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) はスタイルシートの基本ですので、 『今日はh3を変えて中見出しのデザインを変えたのですが、』 なんてのより、先に習得しているはずですが・・
HTMLとCSSの基本から学びなおしましょう。まずはHTML4.01とCSS2.1でよいですから、仕様書程度は最初に通読しておきましょう。 HTML 4.01 Specification (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification( http://www.w3.org/TR/CSS2/ ) 　HTMLは文書構造をマークアップするものでデザインのためではありません。→構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　たとえば、div要素は、HTML4.01の時代から『id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』であって、決してデザインのためではありません。<div class="inner"><div class="flex">のように間違った使い方があまりに多いため、HTML5では文書構造を示す<header><section><footer><nav><aside>のような新しい要素が導入され、divは原則使えなくなりました。 　そしてdivは原則使わない。 NOTE:Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/html5/grouping-content.html … ) ★著者は他に適切な要素がない時の最後の最後の手段としてdiv要素を使うよう強く推奨される。 ★他に適当な要素がない場合にも、必ず文書構造をしめすものにする。 　class="frex" だと意味が分からないし、将来display:inline-blockとかにしようとした時、齟齬が生じるでしょ。 　また、スタイルシートは、CSS2以降は起点セレクタから書くことになっています。 『単体セレクタは型セレクタもしくは 全称セレクタのいずれかの直後に、0個以上の属性セレクタ、IDセレクタ、擬似クラスが任意の順序で続くものである。( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )』 　そしてセレクタはHTMLの文書構造に従って記述する。 ＞実現したいことは・・・ ＞スマホでは画像の下に文字を表示。 ＞PCでは画像と文字を横並びにしたいと考えております。 ＞img {max-width: 100%;} 　でしたら、まだ勧告に至っていない不安定なflexを使わなくても簡単に実現できます。CSS2.1で十分です。 ※それがheader内にあるナビゲーションだとして書くと <body> 　<header><!-- この文書のヘッダ --> 　　<h1>ページタイトル</h1> 　　<nav><!-- ここはナビゲーション --> 　　　<ul><!-- 順不同リスト --> 　　　　<li><img src="" width="" height="" alt=""> 　　　　　　<p>画像の説明</p> 　　　　　　<p>画像の説明</p> 　　　　</li> 　　　　<li><img src="" width="" height="" alt=""> 　　　　　　<p>画像の説明</p> 　　　　　　<p>画像の説明</p> 　　　　</li> 　　　</ul> 　　</nav> 　</header> というHTMLをまず書きます。 スタイルシートはパソコンの場合 header nav ol{list-style:none;margin:5px 0;padding:0;} header nav ol li{display:block;margin:0;padding:0;width:100%;} header nav ol li img{width:50%;height:auto;} だけで済む タブレットやスマホには header nav ol li img{display:block;width:100%;} ちなみに、HTML4.01でしたら、 <body> 　<dic class="header"><!-- この文書のヘッダ --> 　　<h1>ページタイトル</h1> 　　<div class="nav"><!-- ここはナビゲーション --> 　　　<ul> 　　　　<li><img src="" width="" height="" alt=""> 　　　　　　<p>画像の説明</p> 　　　　　　<p>画像の説明</p> 　　　　</li> 　　　　<li><img src="" width="" height="" alt=""> 　　　　　　<p>画像の説明</p> 　　　　　　<p>画像の説明</p> 　　　　</li> 　　　</div> 　　</ul> 　</div> となります。 やつと本題ですが、HTMLを見ても構造がわからないために、実はされたいことが見えてこない。 あなたが挙げられている <div class="inner"><!-- このブロックはどういう意味をもつのか --> 　<div class="flex"><!-- このブロックはどういう意味をもつのか --> 　　<div><img src="image.jpeg" alt="あいうえお"></div><!-- これは段落(pragraph)なので<p></p>？？ --> 　　<div>かきくけこ</div><!-- これは段落(pragraph)なので<p></p>？？ --> 　</div> 　<div class="flex"> 　　<div>あいうえお</div> 　　<div>かきくけこ</div> 　</div><!-- 上記div.flexと並列なものならリスト<li>でマークアップすべき --> </div> の部分を意味が分かるように書き直したうえで、それぞれをどのように配置したいかを図示してください。
具体的な実例 ★HTML4.01strict 　HTML5だと、それぞれ<div class="header"></div>が<header></header>のようになる。 ★タブは＿に置換してあるのて戻す。 ★文字コードはShift_JIS ★本文は両サイドから215pxマージンを取り、そのマージン内に目次と関連記事を200px幅で配置 ★本文内で写真などをfloatさせることができる。 ★ウィンドウ幅を変化させても変化しない。 ★幅が極端に狭いと配置が換わる。サイドでなくなる。ウィンドウ幅640px以下 　・・・・サイドメニューなんてクラス名つけるとダメな理由 ★印刷やスクリーンリーダー、携帯電話には適用されない。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951&#64;hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- body{background-color:gray;} div.header{background-color:aqua;} div.section{background-color:silver;} div.section div.section{background-color:white;} div.nav{background-color:lime;} div.aside{background-color:yellow;} div.footer{background-color:fuchsia;} html,body,h1,h2,h3,h2,p{margin:0;padding:0;line-height:1.8em;} ol{margin:0 2em;} --> ＿</screen> ＿<style type="text/css" media="screen" > <!-- div.header, div.section, div.footer{ width:90%; min-width:640px;max-width:1000px; margin:0 auto; } div.section{ position:relative; min-height:800px; } div.section h2, div.section div.section{ margin:0 215px; } div.section div.section{ width:auto; min-width:0; min-height:300px; } div.section div.nav, div.section div.aside{ position:absolute; top:0; width:200px; height:100%; } div.section div.nav{ left:0; } div.section div.aside{ right:0; } --> ＿</style> ＿<style type="text/css" media="screen and (max-width:640px)" > <!-- div.header, div.section, div.footer{ width:100%; min-width:320px; } div.section{ position:relative; min-height:400px; } div.section h2, div.section div.section{ margin:0; } div.section div.section{ width:auto; min-width:0; min-height:300px; } div.section div.nav, div.section div.aside{ position:static; width:auto; height:auto; } --> ＿</style> </head> <body> <div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>本文見出し</h2> ＿＿<div class="section" id="P1"> ＿＿＿<h3>みだし</h3> ＿＿＿<p>記事の段落</p> ＿＿＿<p>記事の段落</p> ＿＿</div> ＿＿＿<div class="section" id="P2"> ＿＿＿<h3>みだし</h3> ＿＿＿<p>記事の段落</p> ＿＿＿<p>記事の段落</p> ＿＿</div> ＿＿<div class="section" id="P3"> ＿＿＿<h3>みだし</h3> ＿＿＿<p>記事の段落</p> ＿＿＿<p>記事の段落</p> ＿＿</div> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="#P1">P1</a></li> ＿＿＿＿<li><a href="#P2">P2</a></li> ＿＿＿＿<li><a href="#P3">P3</a></li> ＿＿＿</ol> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<h3>関連記事</h3> ＿＿＿<p>記事</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
まずは、最低限のことは基礎からきちんと勉強して身につけること。これは数学や理科と同じで基礎からきちんと積み上げると、とても簡単なのに、途中から始めると、途端に難しなるのとおなじ。 　画像は置換インライン要素ですから、 適用要素｜前提知識｜CSS2.1( https://w3g.jp/css/guide/target ) 　高さと幅は、画像のサイズに自動的に従います。 'width'( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　言い換えると、widthプロパティのデフォルトはautoですから、一つの幅が決まれば他方は自動的に決まります。 　また、直近の先祖にstatuc以外のコンテナブロックがあれば、サイズを100%にするとそのサイズに決まります。 [例] p.test img{max-width:300px;max-height:300px;height:auto;height:auto;} ☆抱合コンテナブロックが static以外で、300pxに指定されている場合 ☆抱合コンテナブロックにtext-align:centerが指定されていると左右中央 ☆抱合コンテナブロックがdisplay:table-cellで、かつvertical-align:middle;の場合は縦方向も中心になる。 ☆300pxより小さい画像はそのままのサイズになります。
＞やはりgoogle Chromeを使っているのでしょうか? Chromeを使っていますが、FireFoxやIEでも出来ます。 【以下、Chromeでの場合】 黒い横のメニューの上で右クリック、「検証」を選択。 「Elements」の部分で、 「<div id="navbar" class="collapse navbar-collapse">」が選択されています。 ただ、そこを選択した状態では実際の画面の黒のメニューがハイライトされません。 なので、その上を選択していくと 「<div class="navbar-header">」で黒いメニューがハイライトされます。 「Styles」を見ると、「margin-right」「margin-left」はあるが「top」関係がないので違うと判断する。 再度、「Elements」を探すと、 「<nav class="navbar navbar-fixed-top navbar-inverse">」が見つかる。 「Styles」を見ると、 .navbar-fixed-top { 　top: 0; 　border-width: 0 0 1px; } が見つかるので、これで正しいか実際に「0」を「30」に書き換えてみる。 実際の画面で黒いメニューが下に下がるのを確認する。 といった感じです。
＞submitボタンの上に重ねた画像にhoverした時opacityが掛からない あたりまえです。 上にものが載っているので下は姿は見えても、触れない。 HTMLの各要素は、レイヤのように次から次に上に重なります。 　ドロー（ベクター）系の画像を書いたことがあればわかるように、それぞれの要素には重ね合わさっていて順番がある。 それはもちろん、z軸方向で指定はできますが、たとえ指定したとしても、上の要素に下は隠れる。 ★ フォームのコントロールはスタイルシートやjavascriptでデザインなどを変えるのは極めてまずいことで、変更しないことが強く推奨されています。スタイルシートやjavascriptを利用しない、利用できないユーザーエージェントはたくさんあります。また、ユーザーが操作に戸惑うからです。 　ここはコントロールにbuttonを使用すべきです。 『BUTTON要素が生成するボタンとINPUT要素が生成するボタンは、機能的には同等だが、 BUTTON要素の方がレンダリング能力が高い。 BUTTON要素は内容を持てる。例えば、画像を内容に持つBUTTON要素の機能は、type属性が"image"のINPUT要素とそっくり同じだが、BUTTON要素型は内容を持てるのだ。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 <form action=""> 　<buton name="submit" value="送る" type="submit"><img src="/icons/wow.gif" alt="送信する" width="100" hight="50"></button> </form> form button[type="submit"] img{ width:110px;height:65px;} form button[type="submit"]{ border:none;outline:none; } form button[type="submit"]:hover{opacity:0.5;} ★ いちいちclassなんてつけないように、class名はあくまで、「id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」であって、そんなデザインのためのclassをつけたらだめです。 　また、いきなり.testのように書くのではなく、起点となるセレクタを書きましょう。 5.2 セレクタの構文( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 「単体セレクタは型セレクタもしくは 全称セレクタのいずれかの直後に、0個以上の属性セレクタ、IDセレクタ、擬似クラスが任意の順序で続くものである。」
サンプル ★タブは＿に置換してある。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <style media="screen"> <!-- body{width:80%;max-width:1000px;min-width:640px;margin:0 auto;} h1,h2,h3,p,ul,ol,dl{margin:0;line-height:1.6em;} section{position:relative;} section h2,section p{margin-right:215px;} section aside{position:absolute;right:0;top:0;width:200px;height:100%;} @media screen and (max-width: 640px) { ＿body{width:100%;} ＿section h2,section p{margin-right:0;} ＿section aside{position:static;width:auto;height:auto;} } html{background-color:gray;} body{background-color:silver;} section{background-color:white;min-height:400px;} section aside{background-color:yellow;} header,footer{background-color:aqua;} --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#">Some</a></li> ＿＿＿＿<li><a href="#">navigation</a></li> ＿＿＿＿<li><a href="#">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>本文見出し</h2> ＿＿<p>記事記事記事記事記事記事記事記事記事記事記事記事記事記事記事記事記事記事記事記事記事記事記事記事記事</p> ＿＿<p>記事</p> ＿＿<p>記事記事</p> ＿＿<aside> ＿＿＿<dl> ＿＿＿＿<dt>人気の記事</dt> ＿＿＿＿<dd> ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li>記事タイトル</li> ＿＿＿＿＿＿<li>記事タイトル</li> ＿＿＿＿＿</ol> ＿＿＿＿</dd> ＿＿＿<dl> ＿＿＿＿<dt>最近の記事</dt> ＿＿＿＿<dd> ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li>記事タイトル</li> ＿＿＿＿＿＿<li>記事タイトル</li> ＿＿＿＿＿</ol> ＿＿＿＿</dd> ＿＿＿</dl> ＿＿</aside> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
＞もしお時間ありましたら、どこに上書きか教えてもらえないでしょうか。 　困りましたね。・・・これは不可能なのです。あなたの文書の構造もわからないので。 　それはして上げようにもできないのです。人の作ったものを手直しするのはとてつもなく大変なのですよ。 　たぶんゼロから書き直したほうが簡単です。私はサイトの修正を依頼されますが、利用できるのは文字データと画像だけですから、それだけ抜き出して作り直す。 　なぜ、「どこに上書きか教えてもらえないでしょうか。」に具体的に答えられないかが、わかるように具体的なサンプルを作ってみました。下記をテキストエディタにコピペして 1) タブは＿に置換してあるのでタブに戻す。 2) :は：(全角)に置換してあるのでタブに戻す。 [説明] 　このように文書構造だけを忠実にマークアップします。 ＞私の一番の理想スタイルはピクシブの文章画面です。 　これはHTMLを作るうえでは一切関係ないのです。 　￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ 　逆に文書構造だけきちんとマークアップされていれば、好きにデザインできる。 ★ divのclass名は、HTML5の新しい要素名に対応させています。 　<div class="header"></div>はHTML5では<header></header>となります。section,article,nav,footerも同様 ★Another HTML Lint - GatewayのDATAでチェック済み ★スタイルシートは後で <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http：//www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto：oruka1951&#64;hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- --> ＿</style> </head> <body> ＿<div class="header"><!-- この文書のヘッダ --> ＿＿<h1 id="title">Your title</h1> ＿＿<div class="nav"><!-- ナビゲーション --> ＿＿＿<ol> ＿＿＿＿<li><a href="#question">質問</a> ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li><a href="#supplement">補足</a></li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿＿<li><a href="#response">回答</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section" id="question"><!-- 本文記事 --> ＿＿<h2> ＿＿＿レスポンシブかつ、スマホ、携帯で見たとき左右に余白のできるhtml・cssを教えてください ＿＿</h2> ＿＿<p> ＿＿＿下は私のサイトで今使っているhtmlのコンテンツ前までです。コンテンツ（文章）の下はタグを閉じたりとかだけなのでたぶん大丈夫かと。 ＿＿</p> ＿＿<p> ＿＿＿サイトはFC2ホームページ。 ＿＿</p> ＿＿<p> ＿＿＿ググったり、理想のサイトのソースを見たりして自分でだいぶカスタムしてます。 ＿＿</p> ＿＿<p> ＿＿＿レスポンシブかつ、余白ありにはなったんですが、携帯で見たときたまに余白が消えて画面左右のいっぱいまで文章が広がるときがあります。友人には携帯で読めるんだからいいじゃんといわれましたが気になって仕方ありません。 消えたえり、消えなかったりです。 ＿＿</p> ＿＿<p> ＿＿＿どこをどう書き換えたら余白が消えたりせず、きちんと表示されるでしょうか。 ＿＿</p> ＿＿<p> ＿＿＿パソコンではとくに支障ありません。 ＿＿</p> ＿＿<p> ＿＿＿確認はアンドロイド、アイフォンでやっております。 ＿＿</p> ＿＿<p> ＿＿＿ちなみに余談ですが、私の一番の理想スタイルはピクシブの文章画面です。 でもピクシブのソースはまったくどこがどこだかわからなかったので諦め、それに近くなるように努力しています。 ＿＿</p> ＿＿<p> ＿＿＿ご指導よろしくお願いいたします。 ＿＿</p> ＿＿<div class="article" id="supplement"><!--article：完結した記事 --> ＿＿＿<h3>質問者からの補足コメント</h3> ＿＿＿<p> ＿＿＿＿先に指摘されました、スクリーンの問題ですが、ググってみて出てきた一発でレスポンシブになる！というやつをコピペしまして…私自身は理解していませんでした。実際にレスポンシブになっちゃったので…… ＿＿＿</p> ＿＿＿<p> ＿＿＿＿後半なのですが、どれがどれを指定するかなど内容が理解できても、それをどこに上書きか、挿入かがわかりません……ごめんなさい！ ＿＿＿</p> ＿＿＿<p> ＿＿＿＿もしお時間ありましたら、どこに上書きか教えてもらえないでしょうか。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿私は、パソコンでは５００pxの幅、スマホではその画面に合わせた幅（左右にpadding15）といった感じにしたいのです。 ＿＿＿</p> ＿＿</div> ＿</div> ＿<div class="section" id="response"><!-- section：記事 --> ＿＿<h2>回答</h2> ＿＿<p>基本からきちんと学んでいけば決して難しいものではないです。</p> ＿＿<p> ＿＿＿そのほうがはるかに早道で将来も引き返さなくてよい。一度、<a href="http：//www.asahi-net.or.jp/~sd5a-ucd/rec-html401j/cover.html">HTML4.01の仕様書</a>くらいは一通り目を通しておかれるのがよろしいかと。とても勉強になります。 ＿＿</p> ＿＿<dl> ＿＿＿<dt> 書きたい内容を文書構造だけを率直にマークアップする。</dt> ＿＿＿<dd>HTML4.01strictが簡単でよいでしょう。</dd> ＿＿＿<dd> ＿＿＿＿<code>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</code>ではなくて、←<a href="http：//www.asahi-net.or.jp/%7Esd5a-ucd/rec-html401j/conform.html#h-4.1"><q>HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。</q></a> ＿＿＿</dd> ＿＿＿<dd><code>&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http：//www.w3.org/TR/html4/strict.dtd"&gt;</code></dd> ＿＿＿<dd>これで、すべてのブラウザで標準(standard)で描画されるのでブラウザ間のずれに悩まされることが激減します。 ＿＿＿＿<p><a href="http：//www.htmq.com/htmlkihon/302.shtml">DOCTYPEスイッチ－HTMLの基本</a></p> ＿＿＿</dd> ＿＿＿<dt>文書ができたら、</dt> ＿＿＿<dd><a href="http：//www.htmllint.net/html-lint/htmllint.html">Another HTML Lint - Gateway</a>などで文法チェックをします。 <em>※ここでチェックできるのは文法だけで、文書構造が正しくマークアップされているかはチェックできません。</em></dd> ＿＿</dl> ＿＿<p class="quotation"><q>もしお時間ありましたら、どこに上書きか教えてもらえないでしょうか。</q></p> ＿＿<p> ＿＿＿それはして上げようにもできないのです。人の作ったものを手直しするのはとてつもなく大変なのですよ。 ＿＿</p> ＿＿<p> ＿＿＿たぶんゼロから書き直したほうが簡単です。私はサイトの修正を依頼されますが、利用できるのは文字データと画像だけですから、それだけ抜き出して作り直す。 ＿＿</p> ＿</div> ＿<div class="footer"><!-- この記事のフッタ --> ＿＿<h3>A nice footer</h3> ＿</div> </body> </html>
本題と関係有りませんがWindows 7以上ではIE 9は来年（2016年）1月末でマイクロソフトのサポートが終了するのだったと思います。 Windows Vistaでのみ2017年4月までサポートがあるのだったと記憶します。 なので作成されているWebサイトの対象ブラウザにIE9を入れるかどうかも考えられるとよいように思います。
一行しかないのになぜtable??? 『単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 『ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　もちろん 『余白制御のために画像を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　ookubotest.lolipop.jp/voice/wp-content/themes/sample/images/space.gif ← 決して使ってはならない ★可能な限りjavascriptは使わない。 AMP(Accelerated Mobile Pages) HTMLしてみたという話 | masuP.net( http://masup.net/2015/10/fits-amp-html.shtml ) ※ 今時XHTMLを使う必要ないでしょう。 CSS form p{ line-height:16em;margin:0;} form input[name="name"]:before, form input[name="name"]:before{content:"* ";color:red;} form input[name="name"]:aftter, form input[name="name"]:after{content:"[必須]";color:red;} form p.submit{text-align:right;margin-left:20px;} HTML <form id="mailform" action="info/send.cgi" method="POST"> <input type="hidden" name="must_id" value="***" > <input type="hidden" name="sendmail" value="/usr/sbin/sendmail"> <input type="hidden" name="no" value="75211"> <input type="hidden" name="action" value="kakunin"> <p>お名前 <input type="text" name="name" size="30" onblur="keepField(this.form.id)" ></p> <p>E-Mail <input type="text" name="email" size="30" onblur="keepField(this.form.id)"></p> <p class="submit"><input type="submit" name="submit" value="今すぐ送信"><input type="reset" name="reset" value="リセット" ></p> </form>
> 急いでバージョンを元に戻したのですがレイアウトが崩れたままです キャッシュを見ていませんか？再読み込みをしましたか？
?? ご提示の方法で動作しませんか？ 私の環境（Windows10 64bit）では、HTAのウィンドウ枠にマウスが入るタイミングで動作しますよ。 --- test.hta --- <html> <head> <title>test</title> </head> <script type="text/vbscript"> Sub sample() msgbox "sample" End Sub </script> <body onmouseover="sample"> </body> </html>
こんにちは。 まだ解決まではしていないようなので、回答させていただきます。 http://mydesign.mods.jp/about.html 拝見しました。 一応上記サイトソースを見て、同じ構造でHTMLを組みましたので、このまま下記のCSSを追加すればフッター固定できると思います。 【HTML】質問者様のサイトと同じ構造です <div id="container"> <header> ヘッダーの内容</header> <div id="contentWrap">コンテンツの内容</div> <footer>フッターの内容</footer> </div> 【CSS】 html,body{height: 100%;} #container{ position: relative; min-height: 100%; height: auto !important; height: 100%; } #contentWrap{ padding-bottom: 170px; /*適宜。下部固定のフッター分の高さ確保することで、ブラウザの高さを低くした時に重なりを回避するため*/ } footer{ position: absolute; bottom: 0; height: 170px;/*適宜。フッターの高さを記述してください*/ } この方法って適当にネットで「フッター固定　CSS」とか検索でめちゃくちゃたくさん出てくるので、 そういう記事もご自身で読んでいくと、ここで質問するより納得できるのではないかなと思います。 ここの回答より、記事のほうが詳細に書いてくれていますしね。 頑張ってください。
＞このようにhtml5では、<div>を<a>タグで囲めるみたいで、 　ここ誤解されています。 The a element may be wrapped around entire paragraphs, lists, tables, and so forth, even entire sections, so long as there is no interactive content within (e.g. buttons or other links).( http://www.w3.org/TR/2014/REC-html5-20141028/tex … ) 　入れられるのではなく、「段落(p)、リスト(ol,ul,dl)、表(table)だけでなく、セクション(section)も、a要素で囲める」 　だからと言って、divを使うべきではない。divはHTML5では原則使わない。 Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/2014/REC-html5-20141028/gro … ) 　著者は、他に適切な要素がないときの最後の手段として、div要素を使用することが強く奨励されます。 「HTML4.01以降、「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」と言われ、プレゼンテーションのためにHTMLを書かない。」これは、スタイルシートの概説( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )にもこんこんと書かれいている。 単純にナビゲーションリストですから、 <ul class="ItemList"> 　<li><a href=""><img src="" width="" height="" alt=""> 　　　<ol> 　　　　<li>【Amazon.co.jp限定】Transcend SDHCカード 16GB</li> 　　　　<li>トランセンド・ジャパン</li> 　　　　<li>￥ 827</li> 　　　</ol> 　</a></li> であっても構わない。li：リストアイテムをa要素に含めています。 これが【HTMLではブロック要素も含めることができる】という意味です。もちろん、HTML4.01なら <ul> 　<li><a href=""><img src="" width="" height="" alt=""></a> 　　　<p> 　　　　<a href=""><span>【Amazon.co.jp限定】Transcend SDHCカード 16GB</span> 　　　　<span>トランセンド・ジャパン</span> 　　　　<span>￥ 827</span></a> 　　　</p> 　</li> とかになっちゃう。いずれも画像にマウスオーバーしても次のa要素にアンダーラインするとか、同様に同じプレゼンテーションにできますが・・隣接セレクタを使う。 ＞マウスオーバーした時にテキストに下線が入らなくて困ってます。 　これはブラウザがHTML5に対応していない場合に、次のように補完してしまうからです。 <ul class="ItemList"> 　<li><a href=""><img src="" width="" height="" alt=""> 　　　<ol> 　　　　<li>【Amazon.co.jp限定】Transcend SDHCカード 16GB</li> 　　　　<li>トランセンド・ジャパン</li> 　　　　<li>￥ 827</li> 　　　</ol> 　</a></li> ↓これをブラウザが修正する。 <ul> 　<li><a href=""><img src="" width="" height="" alt=""></a> 　　　<ol> 　　　　<li><a href="">【Amazon.co.jp限定】Transcend SDHCカード 16GB</a></li> 　　　　<li><a href="">トランセンド・ジャパン</a></li> 　　　　<li><a href="">￥ 827</a></li> 　　　</ol> 　<a href=""></a></li> そのために、画像にマウスオーバーしても認識されない。 例) <ul class="ItemList"> 　<li><a href=""><img src="" width="" height="" alt=""> 　　　<ol> 　　　　<li>【Amazon.co.jp限定】Transcend SDHCカード 16GB</li> 　　　　<li>トランセンド・ジャパン</li> 　　　　<li>￥ 827</li> 　　　</ol> 　</a></li> ul.ItemList{padding:0;list-stype-type:none;} ul.ItemList li{display:inline-block;height:200px;width:150px;position:relative;} ul.ItemList li img{width:100%;height:auto;} ul.ItemList li ol li{display:list-item;list-style-type:decimal;} /* これが要るかも */ ul.ItemList a a{text-decoration:underline;}
こんにちは。 質問は理解できましたが、情報が足りないのでソースは想像です。 まず、100pxスクロールしたらということで、どこから100pxなのかわからないので、とりあえずページトップから100pxスクロールした場合とします。 jQueryを使用しますので、jQuery本体は別途読み込ませてください。 ●方法１： 100px以上スクロールしたら画像が変わる。フェードなし。 フェードイン・アウトがないので、面白みは無いです。imgタグのファイル名を切り替えるので、ソース的には素直。 【HTML】 <div class="imgbox"><img src="dog.jpg"></div> 【jQuery】 <script> $(window).scroll(function(){ var st = $(window).scrollTop(); if(st > 100){ $(".imgbox img").attr("src", "cat.jpg"); }else{ $(".imgbox img").attr("src", "dog.jpg"); } }); </script> ●方法２： 100px以上スクロールしたら<img>が透過。それにより親要素<div class="imgbox">の背景画像が出てくる。CSS3によるフェードあり。 たぶん、見た目的にはこちらのほうが良いと思いますが、ソース的にはちょっとねじれ感はあります。 【HTML】 <div class="imgbox"><img src="dog.jpg"></div> 【CSS】 .imgbox{ width:120px;/*適宜画像サイズ*/ height: 60px;/*適宜画像サイズ*/ background: url("cat.jpg") no-repeat; } .imgbox img{transition: all 1s ease;} .imgbox img.fade{opacity:0;} 【jQuery】 <script> $(window).scroll(function(){ var st = $(window).scrollTop(); if(st > 100){ $(".imgbox img").addClass("fade"); }else{ $(".imgbox img").removeClass("fade"); } }); </script> --- 他に１の方に.fadeOut().fadeIn()など使ったものも考えたのですが、jQueryでスライダーでなく<img>切り替えのエフェクトをつけるとあまり綺麗にできなかったので、上記のようなものになりました。 あとは最初にHTMLで<img>を２つとも書いて、表示非表示切り替える方法もあると思います。 ちなみに上記２つは、スクロールで上に戻ると（100px以下になると）再度元画像に戻る仕様です。 もし切り替わったままが良い場合はjQuery内のelse{～～}の部分を削除してください。 頑張ってください。
#2です ちょっと具体的に、標準のcssおよび３タイプのcssを用意 //common.css →共通部分はこれに書いておく body * {color:red;} //small.css body * {font-size:10px;} //medium.css body * {font-size:20px;} //large.css body * {font-size:40px;} //test.php <?PHP session_start(); $size=isset($_SESSION["size"])?$_SESSION["size"]:"";//セッションの値を参照 $size=isset($_GET["size"])?$_GET["size"]:$size;//getの値で上書き $size=in_array($size,array("small","large"))?$size:"medium";//smallでもlargeでもなければmedium $_SESSION["size"]=$size;//セッションに取っておく $css=array("small"=>"small.css","medium"=>"medium.css","large"=>"large.css"); ?> <html> <head> <title>サンプル</title> <link rel="stylesheet" type="text/css" href="common.css"></link> <link rel="stylesheet" type="text/css" href="<?php print $css[$size];?>"></link> </head> <body> <ul> <li><a href="?size=small">小さい</a></li> <li><a href="?size=medium">普通</a></li> <li><a href="?size=large">大きい</a></li> </ul> test </body> </html>
下記のページの右下のメッセージのようにしたいということですよね。 http://ja.learnlayout.com/position.html 基本的には、positionの問題だと思います。
そうですが、CSSは全てのページをカスケードする役目がありますので、CSSという名称です。 また、CSSは全ての共通テンプレートデザインとして効かせる場合と、各ページだけ効かせるCSSを別途設置/複数設置する事もできる。 更に、 <div id="wrap" class="gallery">などとすれば、 １つのCSSにてページ毎の個別指定も可能です。 極端な話（素人っぽい書き方）ですが、 <div id="wrap" style="color:red;">でも良い訳です。
No.4の続きです。 スタイルシートのサンプルを最後に示しておきますので、No.4の /* この部分は後で書きます。 */ を差し替えてください。 そして、ブラウザで表示させた後ウィンドウ幅を小さくしたり大きくして表示を確認してごらんなさい。 　印刷用や携帯電話用のスタイルシートは今回は省いています。 スタイルのプロパティ{}内はDWでサポートしてくれますが、セレクタ--{}の前はDWに限らず、どのオーサリングツールでも原理的に不可能ですから自分で指定するしかありません。 　--理由は、DWは内容や文書構造を理解して、それをどう表示したいかを理解することはできないからです。 ☆彡前半--@media screen and (min-width: 800px)の前まで---が３列に並べる例です。それ以降はスマホ用に書いてあります。 ★ section h2{}は、header要素の子孫であるh2要素という意味ですが、これすらDWでは代行してくれない。 ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　に、HTMLは文書構造だけでスタイルシートでデザインを変えるサンプルがあります。IEやFirefoxのような代替スタイルシートを判断できるブラウザで訪問してごらんなさい。 　[表示]→[スタイル(シート)]に進み、いろいろなスタイルを選択すると表示が変わります。印刷用のスタイルも用意してあるので「印刷プレビュー」で確認できます。 　もちろん、検索エンジン最適化(SEO)もこれ以上ないレベルですし、視覚障害者のスクリーンリーダーや展示端末でも利用できますし、携帯電話でも利用できる。 　 　本題の「CSS 画像をたくさん並べたい」とは外れますが、文書構造とプレゼンテーションの分離の重要性が理解できると思います。 html,body{ margin:0;padding:0; background-color:navy; } header,section,footer{ width:90%;max-width:1000px;margin:0 auto; background-color:white; border:solid 1px white; } section{ position:relative;z-index:10; } section h2{ margin-left:160px; } section ul{ margin-left:160px; list-style:none; text-align:center; padding:0; } section ul li{ padding:0; display:inline-block; width:29%;margin:1%;height:2em;line-height:2em; } section ul li img{ width:100%;height:auto; } section nav ul li a{ display:block;width:100%;height:100%; text-decoration:none; background-color:yellow; } section nav ul li a:hover{ background-color:orange; } @media screen and (min-width: 800px) { section nav{ position:fixed;top:100px;left:0;height:100%;width:100%; text-align:left;z-index:-10; } section nav ul{ width:90%;max-width:1000px;margin:0 auto;height:2em; } section nav ul li{ display:list-item; padding:0;width:150px;height:2em; position:relative; z-index:1000; } } @media screen and (max-width: 800px) { section ul li{ display:inline-block;width:47%;margin:1%; } header,section,footer{ width:100%; } section{ padding-top:50px; } section ul{ margin-left:0; } section nav{ position:absolute;top:0;width:100%; } section nav ul li{ width:20%; } section nav ul li a{ display:inline-block; } } @media screen and (max-width: 480px) { section{width:100%;} section ul li{width:98%;margin:0;} }
質問内容がはっきりしないのですが プロパティを３指定するなら、列記すればよいのでは？ <p id="p3">text 3</p> <script> var obj = document.getElementById("p3"); obj.style.color="#ccff00"; obj.style.fontSize="100px"; obj.style.fontFamily="monospace"; </script>
ちなみにサンプル ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　の<DATA>にて検証済みのHTML5 ★W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　にて検証済みのCSS3 ★タブは＿に置換してあるので戻すこと ※ background-sizeは、ルート要素---htmlとbody要素には・・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから For documents whose root element is an HTML HTML element [HTML401] or an XHTML html element [XHTML11]: if the computed value of ‘background-image’ on the root element is ‘none’ and its ‘background-color’ is ‘transparent’, user agents must instead propagate the computed values of the background properties from that element's first HTML BODY or XHTML body child element. The used values of that BODY element's background properties are their initial values, and the propagated values are treated as if they were specified on the root element. It is recommended that authors of HTML documents specify the canvas background for the BODY element rather than the HTML element. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［CSS Backgrounds and Borders Module Level 3( http://www.w3.org/TR/2014/CR-css3-background-201 … )］より <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="ORUKA1951"> <style media="screen"> <!-- html,body{margin:0;padding:0;} body>article{ ＿width:80%; ＿min-width:400px; ＿max-width:800px; ＿margin:0 auto; ＿background-image:url("./images/background/conteainer.png"); ＿background-repeat:repeat-y; ＿background-size:contain; } h1,h2,h3,h4,h5,h6,p{margin:0 2em;line-height:1.6em;} body>article>section{min-height:800px;} --> </style> </head> <body> ＿<article><!-- articleとはheader,section,footerを持つであろう一連の記事を示す要素 ---> ＿＿<header> ＿＿＿<h1 id="title">Your title</h1> ＿＿＿<nav> ＿＿＿＿<ul> ＿＿＿＿＿<li><a href="/">Top</a></li> ＿＿＿＿＿<li><a href="/books">Book</a></li> ＿＿＿＿＿<li><a href="/links.html">links</a></li> ＿＿＿＿</ul> ＿＿＿</nav> ＿＿</header> ＿＿<section> ＿＿＿<h2>A smaller heading</h2> ＿＿＿<p> ＿＿＿</p> ＿＿＿<aside> ＿＿＿＿<h3>Something aside</h3> ＿＿＿</aside> ＿＿</section> ＿＿<footer> ＿＿＿<h3>A nice footer</h3> ＿＿＿<dl class="document-version"> ＿＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿＿<dd>2005-06-10</dd> ＿＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿＿<dd>2005-06-10 12:00:00 (JST)</dd> ＿＿＿</dl> ＿＿</footer> ＿</article> </body> </html>
どのような仕様がいるかによりますよね こういう機能はマストで、この機能はあればうれしい、この機能はなくていい と切り分けをしないとなんとも言えません。 代金決済でクレジットカードを使うところまで考えると 維持費も含めて相当な金額になると思いますが・・・ 相場的には・・安くて4~5万？高くて1億（青天井）くらいじゃない？ そのくらい仕様によって差が出ます
href="/BusinesscardControlSystem/WEB-INF/css/style.css" ↓ href="/css/style.css" ご存じのように、HTTP通信は、そのページで必要なものをその都度読み込みます。 ブラウザで認識しているそのファイルの位置--- [例] http：//hoge.com/abc/efg.html だと プロトコル: http ネットワーク: //　　インターネット サーバー: hoge.com パス情報: /abc/efg.html ・・・実際にそのファイルが実在するか否かは全く関係なくカレントはこのパスだけで判断する。 　よって、スタイルシートの位置は 絶対パスなら、/css/style.css 相対パスなら、../../css/style.cssとか　./css/style.cssとか　css/style.css になる。そしてブラウザは指定されているファイルをHTTP通信で改めてサーバーに要求する。いずれも要求するのは GEt:/css/style.css になります。
>PCで見ると上手くいっているのですがスマホで見ると 　それは、そもそもPCでもうまくいっていないということ。 　いずれも、mediaはscreenですからね。携帯電話はmediaはhandheldになる。 　PCで見てウィンドウ幅を小さくしていったら背景がずれるのでは? ★fixedは、他のposition:fixedと同様にディスプレイの描画領域に対してです。 ★html要素やbody要素に限り全域ですが、他の要素に否定するとborderまでです。 ※ タブは＿に置換しているのでもどすこと ※ Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) でチェック済み <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <!--[if IE]> <script src="http://html5shiv.googlecode.com/svn/trunk/html5. … <script src="http://css3-mediaqueries-js.googlecode.com/svn/t … <![endif]--> ＿<link rel="stylesheet" href="css/style.css"> <style media="screen"> <!-- html{ background: url(../img/bg-compressor.gif) #000 no-repeat fixed; background-size: 100%; } --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#">Some</a></li> ＿＿＿＿<li><a href="#">navigation</a></li> ＿＿＿＿<li><a href="#">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section> ＿＿<aside> ＿＿＿<h2>Something aside</h2> ＿＿</aside> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿</p> ＿</section> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿</p> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
>【1点目】……の「980px」を「1100px」に変更しても、何も変化はありません。 えー、本当ですか。私にはちゃんと変化しているように見えるのですが。 #wrapperの場所わかっていますよね。画像で言うと赤い部分。赤い部分は緑の部分を差し引いた残りが青い部分に影響するようです。ブラウザ幅を充分大きくしてみてから、【1点目】の変更してみても「記事サイズ」変わりませんか？ 私にはちゃんと広がっているように見えます。 stingerはサイドバーに広告を貼る想定なので、サイドバーのサイズが広告幅に最適化されています。大事な広告の場所は絶対に確保というわけです。記事サイズの割合を増やす為にサイドバーサイズを減らすなど、他とのバランスも考えてみてください。nexus75さんが何を重視するのかはnexus75さんにしかわからない事。 それと、つい最近stingerはバージョンがアップして６になっています。これから新規サイトをというのなら、stingerをカスタマイズするバージョンも考えた方がいいかもしれません。
まずどうしているかを調べましょう。 Web開発されているなら、開発ツールの豊富なFirefoxをお使いだと思いますが、そのアドオンにFirebug( https://addons.mozilla.org/ja/firefox/addon/fire … )があります。 　それで一目瞭然で仕組みが分かるかと・・ 　画像を使うなどが最も簡単でしょう。
代用になります。 試験にはCCの新機能については出ませんから大丈夫ですよ
ご自身が作られたサイトマップのアドレスです。
HTMLとCSSの分担は、HTMLで文書構造、CSSはそれに基づいてデザインを指定する。どんなに逆立ちしても文書構造に逆らうことはできません。 　あなたの場合、予定がカレンダーに属していませんから、カレンダーに属した文書項象ではないので、不可能なのですよ。 　クラス名やidはデザインのためのものではなく、あくまで文書構造を補完するものです。『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』こんな細かい事も重要なのですよ。 たとえば、 <body> ・・・ <div class="section" id="schedule"> 　<table aummary="週間予定" brder="1"> 　　<thead> 　　　<th>今週の予定</th> 　　　<td> 　　　　<ul> 　　　　　<li></li> 　　　　　<li></li> 　　　　　<li></li> 　　　　</td> 　　　</tr> 　　</thead> 　　<tbody> 　　　<tr> 　　　　<th abbr="15日">15日(日曜日)</th> 　　　　<td></td> 　　　</tr> 　　　<tr> 　　　　<th abbr="15日">15日(日曜日)</th> 　　　　<td></td> 　　　</tr> とすればよい。 ただ、これ(table)では制約があるので、リストで出力してスタイルシートで表にする方が楽でしょう。
Window生成時のWindow属性のbackground_pixelにアルファチャネルを指定すれば透明～半透明～不透明にできます。 ↓参考までに、Xlibのプログラミングではこんな感じ。 -------------------------------- XVisualInfo vinfo; XSetWindowAttributes attr; Window win; XMatchVisualInfo　(...省略..., 32, TrueColor, &vinfo); attr.colormap = XCreateColormap(...省略..., vinfo.visual, AllocNone); attr.border_pixel = 0; /*ピクセルフォーマットは 0xAARRGGBB */ attr.background_pixel = 0x80000000; /* ← 半透明、0x00000000にすると不透明黒色 */ win = XCreateWindow (...省略..., vinfo.depth, InputOutput, vinfo.visual, CWColormap | CWBorderPixel | CWBackPixel, &attr); --------------------------------- QtでWindowの属性を設定もしくは変更できるなら、上記の方法でWindow背景を半透明にできます。
＞・を消して、画像を横並び 画像の前後の文書をどう表示させたいかにもよりますね とりあえず命題の通りやればいいならこんな感じ <style> ul#hoge {list-style:none;margin:0px;padding:0px;} ul#hoge li{float:left;} </style> <ul id="hoge"> <li><img src="1.jpg"></li> <li><img src="2.jpg"></li> </ul>
CSSの仕様ではBOXの寸法は、下記の様にpadding辺の内側です。 tableは、「、単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」「ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」と1999年のHTML4.01の勧告以来、デザイン目的で使用する事は強く否定されています。 　リストでマークアップされている方がデザインの融通性も高く、HTMLもシンプルで、制約も少ない。特に検索エンジン最適化(SEO)上も有利です。 【参考】 ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　ソースを見ると分かるように単純な二階層のリストです（からメンテナンスは簡単）が、スタイルシートでデザインされています。ブラウザ(firefox)の表示メニューから[スタイルシート]を選択して、色々なスタイルを選択して見たり、印刷プレビューを確認して御覧なさい。tableよりはるかに優れているのが分かるかと。 下記にウェブ標準のサンプルを上げておきます。 ・Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATAで検索済みのHTML4.01strict+CSS2.1です。 　文字コードはShift_JIS ・タブは＿に置換してあるので戻す事。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951&#64;hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} table[summary="50音"]{ ＿width:50%; ＿margin:10px auto; ＿border:none; } table[summary="50音"] td,table[summary="50音"] th{ ＿border:none; ＿padding:0; } table[summary="50音"] th{ ＿background-color:orange; } table[summary="あ"]{ ＿width:100%; ＿border:none; } table[summary="あ"] td{ ＿height:30px; ＿position:relative; ＿padding:0; ＿position:relative; ＿border:outset 3px orange; } table[summary="50音"] td a{ ＿display:block; ＿height:100%; ＿width:100%; ＿background-color:aqua; } div.nav{ ＿margin:0 auto; ＿background-color:yellow; ＿width:50%; } div.nav ul,div.nav ul li{ ＿list-style:none; ＿margin:0; ＿padding:0; ＿text-align:center; ＿font-size:0; } div.nav ul{ ＿width:100%; ＿display:block; ＿background-color:orange; } div.nav ul li{ ＿font-size:12px; ＿line-height:2em; ＿width:100%; } div.nav ul li ul li{ ＿display:inline-block; ＿width:20%; } div.nav ul li ul li a{ ＿display:block; ＿background-color:aqua; ＿border:outset 3px orange; ＿text-decoration:none; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<table summary="50音" border="1"> ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="あ行">あ行 ＿＿＿＿＿＿<table summary="あ" border="1"> ＿＿＿＿＿＿＿<tbody> ＿＿＿＿＿＿＿＿<tr> ＿＿＿＿＿＿＿＿＿<td><a href="./A">あ</a></td> ＿＿＿＿＿＿＿＿＿<td><a href="./B">い</a></td> ＿＿＿＿＿＿＿＿＿<td><a href="./C">う</a></td> ＿＿＿＿＿＿＿＿＿<td><a href="./D">え</a></td> ＿＿＿＿＿＿＿＿＿<td><a href="./E">お</a></td> ＿＿＿＿＿＿＿＿</tr> ＿＿＿＿＿＿＿</tbody> ＿＿＿＿＿＿</table> ＿＿＿＿＿</th> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿</table> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li>あ行 ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li><a href="./A">あ</a></li> ＿＿＿＿＿＿<li><a href="./B">い</a></li> ＿＿＿＿＿＿<li><a href="./C">う</a></li> ＿＿＿＿＿＿<li><a href="./D">え</a></li> ＿＿＿＿＿＿<li><a href="./E">お</a></li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
パララックスですね。①css3だけでできるものと、②javascriptも併用してできるものがあります。 また一番簡単に実装できる③パララックスっぽいものもあります。質問者さんの知りたいものは恐らくこれ③かと思います。 ①,②の方法についてはcss3に対する知識やjavascriptの知識が必要となるのでここでは説明しません。 ③は、bodyにbackground-position: fixed(こんなプロパティ名だったと思います。いつもショートハンドで書いてるので忘れました)で背景を当て、セクションごとにbackground-color: #fffなどと設定します。 するとbackground-colorを設定していないセクションだけにbodyの背景が見え、添付画像のような効果になります。 <body style="background: url(bg.png) fixed"> <div class="sec1" style="background-color: #fff">ここは白背景</div> <div class="sec2">ここだけにbodyの背景が見える</div> <div class="sec3" style="background-color: #fff">ここは白背景</div> ただ、この場合sec2では左右いっぱいに背景画像が広がるので、基本的には添付画像のように左右に色は乗りません。解決方法としては例えばborder-widthを20pxなどをsec2につけるなどがあるかと思います。もう一つの解決方法として、bodyではなくsec1, sec3, あるいはその中の任意の要素にbackground-position: fixedを設定する方法もあります。しかしこの場合、モバイルブラウザではfixedが無効になります(モバイルではbodyに対するfixed以外は無視されます)。 一般的には②javascriptと併用するものが主流ですが、新しいブラウザに対応を限るのであれば①の方法でも可能です。 背景画像は主要なコンテンツではないので、個人的には①css3のみで実装、あるいはそれっぽくなればいいだけなら、ここで紹介した③の方法でもいいのではないかなとも思います。
AngularJSを利用しているようなのでHTML5+JavaScriptだと思います。
ダメですね。 自分も以前、テンプレートをフォルダに移動してみた事がありますが、同じようにDreamweaverに認識されなかったです。 ドキュメントを「テンプレートとして保存」とやったとき、自動的にDocumentsフォルダを生成されてその中に保存する動作などを見ていると、フォルダ最上層だけがDWテンプレートの保存場所なのだと納得するしかありませんでした。 それにしても。。 そもそも、テンプレートをフォルダに分けて管理とは、大げさなサイトですね。 テンプレートパラメータを使ってまとめたり、入れ子テンプレートにして階層管理すれば、そんな必要もなかったです。。 自分はテンプレートパラメタを使うようになって、階層管理の悩みから解放されました。ぜひ。
こんにちは。 ご提示のサイトではjavascriptを利用しているようですが、結局のところCSS3のtransformなどを利用しているようですので、スクリプト抜きでもできそうな気がします。 画像を投稿しにくいので、画像の代わりにテキストや枠線で代用していますが、こんな感じではどうでしょう。 （Fx37で確認。　場合によりベンダープレフィックスの追記が必要かも） <!DOCTYPE HTML> <html lang="ja"> <head><title>sample</title> <style type="text/css"> html, body, #openning{ width:100%; height:100%; } #openning{ background-color: #FFF; position: absolute; top: 0; left: 0; display: table; opacity: 0; animation: anim2 4s linear; } #openning>div{ display: table-cell; width:100%; height:100%; text-align:center; vertical-align: middle; } #image-frame{ display: inline-block; border: 10px solid #AAA; width: 200px; height:200px; } #image{ font-weight: bold; font-size: 200px; padding: 0px; animation: anim1 3s linear; } @keyframes anim1{ from{ font-size: 100px; padding: 50px; color: #999; } to{ font-size: 200px; padding: 0px; color: black; transform:rotate(180deg); } } @keyframes anim2{ 0%{ opacity: 1; } 75%{ opacity: 1; } 100%{ opacity: 0 } } #main{ height:1000px; background-color: #FFC; } </style> </head> <body> <div id="openning"> <div> <div id="image-frame"> <!-- 画像をテキストで代替 --> <div id="image">※</div> </div> </div> </div> <div id="main"> 本文をいろいろと </div> </body> </html>
position で * absolute(絶対) * fixed(固定) * relative(相対) - ただし、絶対配置のための包含ブロックとして使用する場合を除く の位置指定をしたら、top/bottom/left/right にて具体的な値を指定しましょう。 さもなければ指定する意味がありません。 値の指定方法は色々あります。よく使うのは以下の三種類でしょうか。 320px -- ピクセル単位、固定幅画像を扱うのに便利 2.5em -- 文字 'M' の高さ単位、かな漢字の縦横と同じなため、和文の読み物系に便利 8ex -- 文字 'x' の高さ単位、英小文字の一般的な縦横であるため、英文の読み物系に便利 参考 https://developer.mozilla.org/ja/docs/Web/CSS/po … https://developer.mozilla.org/ja/docs/Web/CSS/le … 余談ではありますが、 最近の携帯電話は小さい画面で高解像度を使うため、 CSS でピクセル指定した数値が、そのまま物理的なピクセル数に対応しない場合も有ります。 http://www.paintcodeapp.com/news/ultimate-guide- …
CSSは、Cascading Style Sheetsの略でカスケードが最大の特徴であることはご存知だと思います。 　順番はそのごく一部、詳細度が同じだとはじめて記述の順番が影響を与えるのですよ。 それ以前に優先度 　ユーザーの重要宣言＞著者の重要宣言＞著者＞ユーザー 詳細度 などがあります。 CSS2.1仕様書 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) HTML4.01仕様書 4.カスケードするスタイルシート( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　えらく複雑で特殊なプロパティも書かれていますが、そんなプロパティより先に身につけないとならないのが、セレクタやカスケーディングの仕組みですよ。 　基本的な運転もできないのにドリフト走行で走っているようなものです。 ・元々のスタイルシートのセレクタの記述がまずいため、詳細度が低い ・かき加えたスタイルシートのセレクタの記述がまずくて、適用したい要素以外にも適用されてしまう。 　のいずれかでしょう。 ウェブ開発されているなら、当然開発ツール( https://addons.mozilla.org/ja/firefox/extensions … )の豊富なfirefoxをお使いだと思いますが、firebugやDOM inspectrで確認すると分かるのではないかと・・
それじゃ分からん。 基本は参照しているスタイルシートを編集します。 しかし、CSSはカスケーディングの仕組みがありますから、上書きされるように記述すれば、どれでも良いし、別途追加しても良い。 　CSSとは、カスケーディング スタイル シートの略ですよ。カスケーディングの仕組みは基本ですから、それを理解しましょう。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　プロパティとかより先に身につけるべきです。 ウェブ開発なら、当然、開発ツール( https://addons.mozilla.org/ja/firefox/extensions … )の豊富なfirefoxをお使いだと思いますが、そのアドオン firebug で分かるのじゃないかと・・。
＞にしたのですが、やはり、スマホを横にすると、動画の下３分の１ は見えません。 　繰り返しますが。。。何度も書きませんのでよく読んで理解してください。 ＞画像と異なり内容自体がサイズを持たない非置換インライン要素です。したがって内容によって伸縮しません。height:60%;とか。※ hightはウィンドウの表示高さです。 Visual formatting model details - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　あくまで表示領域を基準に決定されます。内容では決まりません。 ＞よって呼び出すHTML側でサイズを指定します。 　iframe内に呼び出されるHTMLでサイズを指定する。
webデザインならPhotoshopとillustratorは触れる必要があります。webデザイナーさんのポートフォリオを見るとwebデザイナーにどんな仕事が必要なのかわかると思います。 例えば有名なブロガーのManaさんのポートフォリオ( http://www.webcreatorbox.com/webinfo/portfolio-r … )を見るとHTML/CSSは当り前として、wordpress(つまりphp)/jquery(javascript)/グラフィックデザイン/SEOなどがスキルとして上げられています。またworksではwebだけでなく紙媒体を意識した広告グラフィックなども公開されています。 しかしphpをきちんと理解するにはネットワークの知識が必要で、更にそれを理解するためにはlinuxサーバーの知識が必要であるなど、やり始めるとキリがありませんので、優先順位をつけて、webデザイナーとして必須でないものは働いていく中で覚えていくといった割り切りが必要です(そもそもこの辺りはwebデザイナーの職域から外れてくるところなので、新人なら「できたら/概要を理解できていたらより良い」程度のところです)。 webデザインに大前提として必要なのは「デザインできるセンス」と「それを伝える技術」です。最低限photoshop/illustratorで描いたwebカンプが3～4枚と、javascriptやphpは組み込まなくていいのできちんとデザインされていて商業利用に耐えうる静的なwebページが1つ2つ、バナーやロゴのデザインを5点ほど、そしてそれを収めるデザインされたポートフォリオが必要かと思います。なおここでいう「商業利用に耐えうる」というのは完璧な物を作り出すことではなく、そのwebページを叩き台にして、チームで商用webページを作れる程度のクォリティの物を指しています。webは現状技術がかなり複雑化しているので、いきなり一人で完璧なwebページを作ることは上に挙げたようなかなり広い知識が必要になり、難しいと思います。 webページにはできればjqueryで少しでも動きをつけて上げるとより良いと思いますが、そもそもwebページはjavascriptが入っていなくても問題なく動作する必要があるので、まずは静的なwebページを完全に作り上げることが最優先になるかと思います。 コーダーやフロントエンドエンジニアになりたい場合はまた別で、javascriptやgitが使えるかなど、プログラマ寄りの制作物を提示する必要があります。どちらにせよ、「商業利用に耐えうるクォリティ」のものを完成した状態で一定量ポートフォリオに収めるということは絶対条件です。コネとかはこれができてれば要らないですし(そもそも就職した後につくるものですし)、canvasとかsvg(アニメーションのこと？)とかサーバーに関する知識はフロントエンドエンジニアの場合はあったほうがいいですが少なくとも新人webデザイナーにとっての優先度は低いです。
No.6です。 ＞やってみたのですが、動作確認すらできませんでした。 　いや、いくらなんでもそれはないでしょう。 ★タブは、＿に置換してあるので戻す。 ・・・【中略】・・・ ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> 　単純に＿をタブに置換して、文字コードをShift_JISで保存するだけです。 　HTMLも余計なもの一切なく文書構造しか書かれていないので、半年後の自分でも他人でもメンテナンスできる簡単ですよね。dropmenuなんて、文書構造に関係ないclass名もないのですからね。 　ちゃんとテストして、Another HTML LINTで文法チェックもした模範的なコードにしてあります。 　今一度ご確認を
まったく違います。 HTML5が開発されるときの大きな目標に、文書の構造を明確化するというのがあります。 　そのいきさつは HTML5“とか”アプリ開発入門（1）：Webの3つの問題を解決する「HTML5」とは何なのか (2/2) - ＠IT( http://www.atmarkit.co.jp/ait/articles/1008/30/n … ) 　の「【問題2】文書内に埋め込まれた「意味」が不明確」を読まれると良く分かります。 　そのためにheader,section,footer,nav,aside,articleなどが用意されました。 　ごく簡単に説明すると header:その文書のヘッダ section:その文書の本文 　★内部に【ひとつだけ】見出し要素<h1>～<h6>も必ず持ちます。 　★階層は<section>の入れ子で示されます。 footer:その文書のフッター nav:ナビゲーション(navigation) 　★ナビゲーションheaderないにあるときはサイト内 　★section内にあるときはそのsectionの目次などに使われます。 aside:そのブロックの本文と直接関係ない記事(aside) 　本文の内容とは直接関係ない記事は必ずasideで括ります。 article:内部にheader,section,footerを持つと期待される記事の集合 よって、headerをひとつ,section,blockをひとつ持つだけの場合は、articleは不要です。なぜならbody要素がまさにそれなのですからね。 [使用例] <body> 　<header><!-- ヘッダ --> 　　<h1>ページタイトル</h1> 　　<nav>サイトナビゲーション</nav> 　</header> 　<section><!-- 章 --> 　　<h2>本文見出し</h2> 　　<p>段落</p> 　　<section><!-- 項 --> 　　　<h3>本文(項)見出し</h3> 　　</section> 　　<section><!-- 項 --> 　　　<h3>本文(項)見出し</h3> 　　　<article><!-- 独立した完結する記事 --> 　　　　<header><header> 　　　　<section></section> 　　　　<footer></footer> 　　　</article> 　　</section> 　　<nav><!-- この章の見出し --> 　　<aside><!--このセクションの内容とは関係ない記事--> 　</section> 　<footer> 　　<h2>文書情報</h2> 　　<p><a href=""></a>・・ここではnavは使わない</p> 　</footer> </body> ★以下詳しい説明 <article>　×　通常は不要です。×内部にheaderがない。 　<p> 　　<h1>コンテンツタイトル</h3> 　　× P要素には一切のブロック要素は入れられません。 　</p> 　<ul> 　　<li> 　　　<a href="#"> 　　　　 × a要素ないにブロック要素は入れられません。 　　　　HTML5では仕様上は入りますが、この場合は入れられません。 　　　　<p><img (雑誌の表示画像) /></p> 　　　　 × />と書いても良いです(HTML5では許されている)が、 　　　　　この場合は>で閉じる方が良い。XMLに合わせる書き方も 　　　　　ありますが、難しい。 　　　　　→Polyglot マークアップ: HTML 互換の XHTML 文書( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　　　　なお、表紙画像が重要でしたら入れますが、普通入れずに背景にしてスタイルシートで指定します。 　　　　<h2>雑誌名</h2> 　　　　<p>内容</p> 　　　</a> 　　</li> 　・・・【中略】・・・ </ul> </article> 著書の紹介だとすると、それがそのページの本文ですから、sectionに入るのじゃないかと。 <body> 　<header></header> 　<section> 　　<h2>本の紹介</h2> 　　<ul> 　　　<li><a href="" tuitle="本のタイトル"><img (雑誌の表示画像)></a> 　　　　<p>内容</p> 　　　</li> 　　　<li><a href="" tuitle="本のタイトル"><img (雑誌の表示画像)></a> 　　　　<p>内容</p> 　　　</li> 　　</ul> 　</section> 以下略 　こうする事で検索エンジンにページの主たるコンテント(内容)が本の紹介である事が分かる。 または <body> 　<header></header> 　<section> 　　<h2>本の紹介</h2> 　　<ul> 　　　<li><a href="">本のタイトル</a> 　　　　<p>内容</p> 　　　</li> 　　　<li><a href="">本のタイトル</a> 　　　　<p>内容</p> 　　　</li> 　　　<li><a href="">本のタイトル</a> 　　　　<p>内容</p> 　　　</li> 　　</ul> 　</section> の方がシンプルでメンテナンスも容易でしょう、カバー画像はスタイルシートを用いていれる。 これは気づきなのですが ◆サイト　　　：整体サロンのサイト ◆対称のページ：トップページ ◆対称のコンテンツ： サロンが過去に受けた雑誌取材のうち３つをトップページにあげる。 　これはとてもまずいのですよ。あなたのサロンの紹介が主であって、「過去に受けた雑誌取材」は基本的には「aside・・」に入るないようじゃないかと。最も困るのは、読者は記事内容を探しているわけじゃない。 　視覚系ブラウザ対象で、それをビジュアルにそれを紹介したい場合は、スタイルシートで見えやすいように配置すれば良い。 　また、articleも使いますが・・その場合は 　<section> 　　<h2>本の紹介</h2> 　　<article> 　　　<section> 　　　　<h5>本の見出し</h5> 　　　　<p><img></p> 　　　<section> 　　　<footer></footer> 　　</article> 　</section> 　本文で説明するのでしたらfigure要素を使う方が良いかもしれません。他のページなどからも参照されることを想定されるなら・・ 　<section> 　　<h2>本の紹介</h2> 　　<figure> 　　　<img> 　　　<figcaption> 　　　　<p>本の紹介</p> 　　</figure> 　　<figure> 　　　<img> 　　　<figcaption> 　　　　<p>本の紹介</p> 　　</figure> 　</section> HTML5のそれぞれの要素の使い方は、厳しいです。 なぜならHTML改訂の大きな目標の一つですから とても良い、すばらしい記事があります。 HTML5 Doctor, helping you implement HTML5 today( http://html5doctor.com/ ) 　今探したら邦訳も・・ありますね。古いかも html5doctor - HTML5.JP( http://www.html5.jp/html5doctor/index.html )
NO11です。忘れ物をしました。 http://www.forest.impress.co.jp/library/nav/genr … 上のサイトあたりで何か便利なものがあれば良いのですが、少なくともメモ帳をお使いになるよりは便利なエディタがそろっています。これ以外にも http://www.vector.co.jp/ などにもたくさんのフリーソフトがあります。 窓の杜とベクターと、どちらが良いかということですが、昔、自分はベクターの方に自作ソフトをアップしていたことがあります。誰れでもアップできますので（笑）一方窓の杜の方はなかなか掲載してもらえません。以上参考になりますでしょうか？
がんばって営業して仕事を取ってきてください webデザイナーって余ってるので営業能力があるかどうかが長続きできる秘訣です。
なぜjavascrit？？ javascriptは、ユーザー側のセキュリティ設定やブラウザ自身の機能差で動作しないことも・・ 　動作しないときは致命的になる場面には使用しない。 単純に<header></header>内に書けば良い。 　なお、プレゼンテーションで左右に何もおかないのでしたら、幅を固定せずにリキッドで作成すれば良いのでは？？ 　mediaqueryは、以前から存在するメディア別スタイルシートの拡張です。すなわち、 media="screen"と併用する。 リキッドデザインであること に追加するものなのです。 screenメディアにおいて 1) リキッドでデザインして、840～1200px程度はサイドにナビゲーションnavや（直接無い用途は関係ない）関連記事asideを配置しておく 　印刷(media="print")や携帯電話(media="handheld")には、navやasideは本文(section)のあと 2) screenにおいて、840pxより狭い場合は、asideは後回し、640より狭いとnavも後回し。 　リンクはボタンにする。 などと使います。 ＞PCのサイトのサイズが横幅940pxのサイト 　幅を固定したらHTMLで作成する最大の目的が失われてしまいます。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで [Introduction to HTML 4 (ja)]( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )より
>aside,navって何でしょう。 　初心者でしたら、必ず理解しておくべきところですから、詳しく説明します。ここを間違えると後々泣く事になります。 　文書構造を示すものです。(形ではない) 　asideの意味 - 英和辞書 - 英語辞書 - goo辞書( http://dictionary.goo.ne.jp/leaf/ej3/4719/m0u/as … ) 　navigationの意味 - 英和辞書 - 英語辞書 - goo辞書( http://dictionary.goo.ne.jp/leaf/ej3/56324/m0u/n … ) ★HTMLはデザインは一切関係なく、ひたすら文書の意味的構造をマークアップするものです。HTMLの元となったSGMLの歴史を知っておきましょう。 『プレーンテキストのみを用いて、「タグ」を使うことによってデータに意味を持たせる( https://ja.wikipedia.org/wiki/Standard_Generaliz … )』 　HTMLもブラウザで読むと見出し(h1～h6)は大きなゴシック体で表示されたり、段落<p>で改行されますが、それはブラウザが持っているスタイルシートで、そのように表示しているに過ぎません。スクリーンリーダーだと男声で大きな声で読んでくれす。 　ところが、元々科学技術関係の世界で誕生したものですから、一般に開放されたら、持ち合わせのスタイルシートではなんとも貧弱・・ 14.1 スタイルシートの概説( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　に具体的に例が上げてある。 　それがあまりに悲惨な結果、検索エンジンには ・どこが主文かも分からない ・どこが関連内記事(aside)なのかがわからない。 ・単なるリストなのか、ナビゲーションなのか分からない 　その反省に基づいてHTML4.01が策定され、今から１６年前(1999年)に勧告されました。現時点でのweb標準。そこには、 ★構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　が明記され、HTMLはもっぱら文書構造をマークアップするもの。プレゼンテーションはスタイルシートとなりました。 ★たとえばdiv要素については、 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』となりました。 　とっても重要なHTML4.01最大の目的と言って良いでしょう。 　ところが、残念ながら未だにこれが理解されずに、wrapperとか、leftとかclass名がつけられてきました。 　そこでHTML5では、文書構造を示す新しい要素が追加されました。 　→HTML5 における HTML4 からの変更点( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) <header><section><nav><aside><footer><article><figure>など 　※最終的にhgroupは無くなり、main(ページ内に一箇所のみ)が追加された ★そして、divは安易に使わない事になりました。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから NOTE:Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors. ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで [4.4 Grouping content — HTML5]( http://www.w3.org/TR/html5/grouping-content.html … )より 　著者には、他に適切な要素が無いときの最後の手段としてdiv要素を使用することが強く推奨される。div用の代わりにより適切な要素を使用することは、読者のた​​めにはより良いアクセシビリティに、作者のためには簡単な保守性につながります。 　先のaside,navの意味は分かりましたね。HTML4.01でしたら <body> 　<div class="header"></div> 　<div class="section"> 　　<div class="nav"></div> 　　<div class="aside"></div> 　</div> 　<div class="footer"></div> </body> となっていた物を、 <body> 　<header></header> 　<section> 　　<nav></nav> 　　<aside></aside> 　</section> 　<footer></footer> </body> となるということ。 ＞下記のように、記号などで枠作って理解したいと思っていたので、ありがたいです。 　違います。あくまで文書の意味的な構造を示すためです。 　HTMLをマークアップするときはデザインは一切考えません。だってデザインは回答1で示したように、クライアントや、オーナーの心変わりでいつ変わるかもしれません。 　段組の例ではありませんしhTML5でもありませんが、firefox、IEやOperaなど代替スタイルシートをサポートしているブラウザで, ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　を訪問して[表示]→[スタイルシート]と進んで任意のスタイルシートを選択してみてください。また印刷プレビューで印刷も確認してみると良いでしょう。 　あわせてHTMLソースをご覧になると、HTMLの変更--内容の使いなど誰でもメンテナンス可能な簡単なものだと分かると思います。 ★HTMLは文書構造だけをひたすらマークアップするもの ★その文書構造に基づいてスタイルシートでプレゼンテーションを指定する。 　これが、1999年以来、そして今後ますます重要になる基本です。初心者の時にここを間違って、将来それを知ってゼロから学びなおさなければならない人がとても多い。 　先のサンプルのHTMLなら、あなたでも書けるでしょ。(^^)
まるでレスポンシブとは無縁の問題ですね。 レスポンシブにするときは、デバイスの幅や解像度で振り分けて別のスタイルシートを適用させます。 　レスポンシブでなくリキッドでしたら、500pxのように高さを固定せずに、直近のスタティック以外の親ブロックの高さを基準にして%指定をします。 [補足] ★なお、div要素はそのような使い方をしてはなりません。 ・DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/html5/grouping-content.html … ) 　この場合は単に <p class="MainPhoto"><img src="" width="" height=""></p> 　とか・・ ★セレクタを書くときは基点セレクタを書くように header p.mainPhoto{} 　詳細度が分かりやすくなり衝突が避けられる。
＞ただ文字とか画像を整えるのにtableを使っています。 　これも16年前から厳しく戒められてきたはず。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 単に文書内容を整形する目的だけで表を用いるべきでない。 さらに、見た目のために表が用いられると、その表が大きなディスプレイのあるシステムで作られた場合、表を見るために水平スクロールを強いられることがある。 こうした問題を最小限に押さえるため、著者は文書の整形には表ではなくスタイルシートを用いるべきである。 ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで [Tables in HTML documents (ja)]( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )より 　ウェブページを作成するのでしたら、仕様書くらいは一通り目を通して起きましょう。 ＞ランディングページを作りました。 　これも今は作らない。検索エンジンが進歩した現在、ユーザーは直接該当ページに飛んで来ます。すべてのページがランディングページとして機能するように作成するべきです。そのためのHTML4です。 『HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』
回答の意味わかりづらかったらすみません。 最初ただのボタンだと思って、何でdivでやってんだろうと不思議に思い、実際にhtmlにかきだしてみてみました。 全体をクリックしたいとのことでしたので、.botan aの部分に width: 100%; height: 100%;を足して .botan a { color: #fff; text-decoration: none; position: relative; display: block; width: 100%; height: 100%; } でどうでしょうか。 色を変えたいとのことでしたが、.botan a:hoverにはcolorしか指定されていませんでしたよ。 aをブロック要素で指定しているので、divに直接hoverをかけて以下でどうですか？ .botan:hover { background: red; } あと細かく面倒くさいこと言いますね。 ・box-shadow,border-radiusにベンダープレフィックスはいりません。(文字数が無駄に多くなる) ・コードが見にくいので、コーディング規約を決めたほうがよいです。(後々楽) ・カラーコードはすべて小文字の方がよい。(←これは任意だけど、よく言われる) 「css コーディング規約」で検索すれば大体わかると思います。 話それましたが、これでどうですかね？
携帯電話や印刷機には適用されません。 ＿<style type="text/css"> <!-- /* 一般指定 */ html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6,p{margin:0;line-height:1.6em;} p{text-indent:1em;} --> ＿</style> ＿<style type="text/css" media="screen"> <!-- ＿/* screenへの指定 */ div.header,div.section,div.footer{ ＿width:90%;min-width:630px;max-width:1000px; ＿margin:0 auto;padding:5px; } div.section{position:relative;min-height:400px;} div.section h2,div.section p,div.section div.section{ ＿margin:0 200px; } div.section div.section{ ＿width:auto;min-width:0; ＿min-height:200px; } div.section div.nav,div.section div.aside{ ＿position:absolute; ＿width:190px;height:100%; ＿top:0; } div.section * p{margin:0;} div.section div.nav{left:0;} div.section div.aside{right:0;} /* 本題のfooterの背景画像と配置 */ div.footer{ ＿height:240px; ＿background:url(./images/background/sky.jpg) 50% 50%; ＿text-align:center; } /* 分かりやすいように色分け */ div.header{background-color:aqua;} div.section{background-color:silver;} div.section div.section{background-color:white;} div.section div.nav{background-color:lime;} div.section div.aside{background-color:orange;} /* 分かりやすいように色分け */ div.header{background-color:aqua;} div.section{background-color:silver;} div.section div.section{background-color:white;} div.section div.nav{background-color:lime;} div.section div.aside{background-color:orange;} /* 文字自体は左寄せにするなら下記コメントをはずす。 */ /* div.footer dl{ width:50%; margin:0 auto; text-align:left; } */ --> ＿</style>
child2 の中身を、箇条書きに変更 <ul> <li>日本 <li>中国 <li>タイ <li>グレートブリテンおよび北部アイルランド連合王国 <li>... </ul> 箇条書きの各項目を "inline-block" で表示させる <style> .child2 ul { list-style:none; padding:0; margin:0; } .child2 ul li { display:inline-block; margin-right:1ex; } /* 前後の間隔は半角1字程 */ </style> これで * 項目が同じ行に収まる → 同じ行に表示 * 項目が同じ行に収まらない → 改行してから表示 * 項目が一行に収まらない → 自分自身を途中で改行させる が実現できます
・まず示したサンプルをそのまま上げてから動作を確認する。 開発ツールの豊富なfirefoxをお使いだと思いますが、そのアドオンのfirebugを使うと理解しやすいかと。 　元々あったものも、参考にされたページも駄目なのでしょう。ちゃんとできていたら簡単なはずです。(^^) 　私は仕事でもそれをしてますが、ざっと見てダメだったらテキストと画像だけ抜き出してゼロから書き起こします。そのほうが早い。
レスポンシブっていうより、リキッドでいいのでは？ つまり、親tableに対して子tdはパーセントで幅を決めてやる。3枚なら、33.3％だし、4枚なら25%。 style------ table{width:100%;} td{width:33.3%;} td img{width:100%;} html------- <table> <tr> <td><img src="写真.jpg" alt=""></td> <td><img src="写真.jpg" alt=""></td> <td><img src="写真.jpg" alt=""></td> </tr> <tr> <td><img src="写真.jpg" alt=""></td> <td><img src="写真.jpg" alt=""></td> <td><img src="写真.jpg" alt=""></td> </tr><tr> <td><img src="写真.jpg" alt=""></td> <td><img src="写真.jpg" alt=""></td> <td><img src="写真.jpg" alt=""></td> </tr> </table>
CSSの基本： まず、ブラウザごとにマージンやパディングのデフォルト値には違いがありますので、最初にリセットしないとすべてのブラウザに共通したCSSの記述ができません。（ほんとうはブラウザ毎にCSSを切り替えると思いますが書き方によっては同じCSSでも共用できます。） http://ps60.blog109.fc2.com/blog-entry-31.html IDとCLASSの使い方を知ってください。 次に、継承について調べてください。ネストになっている親の要素を継承するなどのことです。ここ結構ネックです。 ネストすれば、同じ名前のHTMLタグに別個のCSSを指定できます。 .ul #wrapper #side .ul とするとこれらは別物になります。最後に指定したものが有効です。 #wrapper #side .ul .ul とすると、まずいです。#wrapper #side .ul の意味はなくなります。 次に、ブロックレベル要素とインライン要素の違いを理解していないとCSSは使いこなせません。 http://mozilla.gr.jp/standards/webtips0015.html インライン要素をブロック化することもできます。 http://webdesignrecipes.com/css-blocklevel-eleme … このほかにもいろいろな注意点があります。 いきなりCSSでやろうとしても混乱しますので、TEST用のHTMLとCSSで動きを実験してある程度理解してからやったほうがいいとおもいます。毎日やっていれば２Wくらいでなんとかできるようになります。 （２Wでできればすごいですよ。） ブラウザごとに若干の違いがあると思いますので各ブラウザで表示のチェックをします。 IEのデベロップメントツールバーというプラグインもあります。 HTMLやCSSの確認ができます。FireFoxにもあります。
header h1 { ※ header配下のh1要素　タイプセレクタ二個で詳細度は [0 0 2] →5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) →6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) font-size: 50px; 　font-size:は50px　　　ユーザーの設定に合わせるため%指定のほうが良い 　　　　　　　　　　　　視覚弱者にも配慮します。 font-family: sans-serif; 　　　　　　　　　　　　見出し要素のデフォルトはsans-serifで、 　　　　　　　　　　　　font-weight:bold;なので指定しなくて良い color: lightyellow;　　　lightyellowはありません。 →14.1 前景色: 'color'プロパティ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) →<color>( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　(aqua、black、blue、fuchsia、gray、green、lime、maroon、navy、olive、orange、purple、red、silver、teal、white、yellow) text-shadow: 0px 0px 4px purple,0px 0px 4px purple,6px 6px 6px rgba(0,0,200,0.7); CSS3ですね。 →CSS Text Module Level 3( http://www.w3.org/TR/css3-text/ ) ウェブ開発に、ホームページビルダーやChromeは使えないです。 　開発者ツール( https://addons.mozilla.org/ja/firefox/extensions … )の豊富なfirefoxを使いましょう。そのアドオンにfirebugがあります。これで要素ごとのスタイルなどが簡単にチェックできます。期待通りにならないときは必ず使う。 　ビルダーはCSS3には対応していない部分がたくさんあります。しかもウェブ標準ではないし・・ →ホームページ・ビルダー - Wikipedia( https://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC … ) 　まず、HTMLで文書構造だけをマークアップします。対でスタイルシートを書きますが、それぞれのプロパティより先に、それよりはるかに重要な →5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) →6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　の二つをマスターしましょう。他により高い詳細度の指定があるのではないですか？が回答ですが、その意味すらわからないのでは困るでしょ。 　HTMLやCSSの仕様書にまず目を通しておきましょう。それが上達の最短距離です。
それだけの情報では回答しようがありません。 ウェブ開発でしたらfirefoxお使いだと思いますが、 Web 開発( https://addons.mozilla.org/ja/firefox/extensions … ) の Firebug( https://addons.mozilla.org/ja/firefox/addon/fire … ) FireMobileSimulator( https://addons.mozilla.org/ja/firefox/addon/fire … ) 　で調べるのが良いでしょう。 　CGIなりPHPで何らかのclass名とか、urlとかがその要素に書かれていると思いますので、それに合わせて、クラスセレクタないし属性セレクタで指定すれば良いです。
＞wapper,main_contentsの2個のみです。 　代表的な無駄なデザインのためだけのdivですね。素人さんのサイトや、あるツールで製作されたサイトで良く見かけます。 ｛Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/2014/REC-html5-20141028/gro … )｝←とっても重要。 　header,section,footerから構成されると期待される一塊のブロックはarticleです。wrapperとかcontenerとかじゃありません。どう考えても文書構造を示す物じゃない。 　全体をarticleで囲うという手もありますが、おかしいです。なぜなら、body要素がまさに「header,section,footerから構成され」ているのですからね。ですから、それらがワンセットしかないときはbodyがあるので不要なはずです。 body{margin:10%;background-color:red;position:relative;} header,section,footer{width:80%;margin:0 auto;border:solid:orange 2px;} 　articleを使用するとなると <body> 　<header></header> 　<section> 　　<article> 　　　<header></header> 　　　<section></section> 　　　<footer></footer> 　　</article> とか・・・ mainは特殊で、詳しくは 4.4 Grouping content — HTML5( http://www.w3.org/TR/2014/REC-html5-20141028/gro … ) 　その意味から、文書内に一箇所しか使えませんし、article, aside, footer, header, nav要素内には置けません。もちろん、文書のアウトラインにも影響しない。 <body> 　<header></header> 　<section> 　　<section> 　　　<article></article> 　　</section> 　　<section> 　　　<main> 　　　　ここにこの文書の最も重要なメインテーマ 　　　</main> とか。 wrapper → <body>もしく不用 main_content → <section>
私も同様の状況で困っておりました。デジタルステージに問い合わせたところ対処できました。 Dropboxアプリケーションの仕様変更により、 BiNDアプリケーション内の読み込み先に関する設定が変更されている事が判明致しました。 上記について、仕様変更後のDropboxに対応した修正手順を下記に記載致しましすので、 ご確認の上、操作をお試しください。 ---------------- ※ご注意※ あらかじめ、BiND7のアップデータ最新版「v7.11」適用後にご利用いただく必要がございます。 現在最新版をご利用になられていない場合は、先にアップデータを適用してください。 アップデーターについては、下記マイページへログインし、ダウンロードしていただけます。 ■マイページサービス https://mypage.digitalstage.jp/ 登録製品一覧を見る > BiND7 > ダウンロード > アップデーターv7.11 アップデータ7.11を適用後、下記操作を行っていただけますでしょうか。 ---------------- 【操作手順について】 PC内の下記個所を開きます。 ■Cフォルダ > Program Files (x86) > digitalstage > bind7 > Resources 「Resources」内に「setting.ini」と言うファイルがございますので、 コピーし、デスクトップ等に保管します。 その後、コピーした「setting.ini」を開きます。 その中の中央より上付近、[Dropbox]の記載の中に下記のテキストがございます。 AppPathWin = @ApplicationData/Dropbox/bin/Dropbox.exe 上記を、下記の内容に書き換えてください。 AppPathWin = @Applications/Dropbox/Client/Dropbox.exe ※「ApplicationData」を「Applications」に、「bin」を「Client」に書き換えます。 その後、上書き保存を行ないます。 以上の操作により書き換えた「setting.ini」データを、 元々のファイル「Resources」内の「setting.ini」と差し替えます。 操作は以上です。 BiND7を起動し、Dropboxサイトデータの保存先を認識するか、ご確認ください。
＞display:table;を使っても意図する表現ができました！ 　display:inline-block; だと、インライン(行内要素)ですから、pre(ブロック要素)を偏光してしまいます。そのためサンプルで示したものをdisplay:inline-block;にすると横に並んでしまうはずです。
＞レスポンシブにできそうな予感です。 レスポンシブより先にすべきはリキッドですよ。ここを間違えている。 下記だといちいちHTML見なくても構造が分かっていればスタイルシートはかける。構造化は著者にもメンテナンス性の向上に繋がる。 　たったこれだけで、印刷にも対応しているはず。 　 <style media="screen"> <!-- html,body{margin:0;padding:0;background-color:black;color:white;} h1,h2,h3,h4,p{ margin:0;line-height:1.8em; } h1{ background-image:url(http://carshop-glanz.com/img/Glanz_logo4.png); width:480px;height:160px; text-indent:-100em; overflow:hidden; } table[title="Glanzの会社概要"]{ border-collapse:collapse; } table[title="Glanzの会社概要"]{ border:solid gray 2px; } table[title="Glanzの会社概要"] th, table[title="Glanzの会社概要"] td{ border:solid gray 2px; padding:10px 5px; vertical-align:top; } table[title="Glanzの会社概要"] th{ width:5em; background-color:rgb(30,30,30); text-align:left; } table[title="Glanzの会社概要"] td{ text-indent:1em; } footer ol#siteMap{text-align:center;} footer ol#siteMap li{ display:inline-block; position:relative; margin:10px 2%; width:7em; } footer ol#siteMap li a{ display:block; height:100%; width:7em; color:aqua; padding-top:5px; padding-bottom:5px; } footer ol#siteMap li a:hover{ background-color:blue; width:100%; text-decoration:none; } -->
画像自体に枠をつけると当然、フェードアウト/インをすれば枠も一緒にフェードイン/アウトします。 　枠をスタイルシートのborder-imageなどを使用すると枠のデザインは限定されますが、リキッドでも対応できます。 　スライドショーではありませんが、ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … )で、代替スタイルシートガ扱えるブラウザ(firefoxやIE)で、表示→スタイルシート→画像を枠に配置で画像を枠にする実例がわかるでしょう。--ウィンドウ幅を変えても追随するはずです。 　透明GIFで重ねると画像内に配置したリンクが機能しなくなるのでz-indexで前面に出します。
そもそも CSS 内容が間違っていますので、反映されていたことが驚きです。 .tbl95{text-align: left; width: 95%; margin-left: auto; margin-right: auto;" border="0" cellpadding="2" cellspacing="2"} 正しくは .tbl95{text-align: left; width: 95%; margin-left: auto; margin-right: auto; border: none;} 何かの手違いで CSS に余分な記述が混入したと推測しますので、直せば解決します。 余計なおせっかいではありますが、 ご提示の内容でしたら、 <table class=クラス1><tr><td class=クラス2>内容</td></tr></table> よりも <section class=内容を表すクラス>内容</section> をオススメします
表示したい要素はわかっているのでしょうから・・・ 　scrollIntoView() を利用なさるのが簡単かと思います。 引数をtrueにするとブラウザのトップに、falseにするとボトムに合わせて表示されます。 　https://developer.mozilla.org/ja/docs/Web/API/El …
半角英数で長い文字列はdivだろうがtableだろうが普通何をやっても改行されないのでは？ はみだすか、隠すか、スクロールするかです
どうも学び方を間違えてしまったような・・・。正しく学べば余暇を使って2ヶ月もあればできるはずです。 　IT技術なんて、理科や数学と同じで基礎からきちんと学べば、とても簡単なものです。 　まずHTMLは、文書構造だけをマークアップする言語でそれ以外の目的はありません。なぜなら出自はSGMLだからです。HTMLの基礎の基礎ですから御存知だと思いますが。 →SGML#背景 - Wikipedia( https://ja.wikipedia.org/wiki/Standard_Generaliz … ) 　10年前でしたら、HTML4.01が勧告(1999年)されて５年以上経過していますが、それ以来、『構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』が強く叫ばれていました。 　それをデザインするためのCSS1は当時からありましたし、CSS2は９年前の2008年、現在のCSS2.1の勧告は今から４年前の2011年7月ですから、理解されていないのかもしれませんね。 　現在、ウェブ標準は HTML4.01 + CSS2.1とされれていますから（HTMLがとても増えてきましたが・・）それを目標にされたらよいでしょう。 >自分で構築するには知識が足りず、ネットで調べて拾っては編集して作っています。 　これは最悪の学習方法です。理数科を問題と回答集だけで身につけよと言うものですよ。そうではなく、まず仕様書を読みそれにしたがって身につけていく。それが一番早く効率的で応用が利きます。 　私は　２５年前にこの世界に入りましたが、当時から仕様書を読み解くことから始めてきました。 　例えば、この場合のHTMLは、【人名と紹介記事ののリスト】ですから、率直に <ul id="album"> 　<li>山田太郎 　　<ol> 　　　<li><img src="" width="" height="" alt=""></li> 　　　<li>自己紹介</li> 　　　<li><a href="">山田太郎のページ</a></li> 　　</ol> 　</li> ・・・・で良いのですよ。 　あとはスタイルシートでデザインします。 幅広のディスプレイでは、4列に小さな画面だと２列、携帯電話だと１列、印刷だとシンプルなリスト形式とかが、自在に・・・ 　あせってつまみ食いしても時間のロスですよ。
解決したようで良かったです(^^) 表示されていた線は段落罫線と言い、段落ごとに表示される罫線です。 エンターを押して改段落するごとに罫線が付きます。 Ctrl+Aは「全選択」のショートカットで、どの部分に段落罫線が設定されているかわからなかったので文書全部を選択してもらいました。 Ctrl+Qは段落書式のクリアのショートカットです。 段落書式とは例えば文字の配置（左寄せとか中央揃えとか）やインデントやタブの設定のことで段落罫線もこれに含まれます。 これとは別に文字書式があり、これはフォントや文字色などの書式を指します。 文字書式のクリアはCtrl+スペースキーでできます。
上下のバナーを一つに括って、行間を padding または margin で指定しては如何でしょうか <style> aside { float:right; } aside ul { list-style-type:none; margin:0; padding:0; } aside ul li { padding:0.5em; } </style> <aside><ul> <li><a href><img src></a> <li><a href><img src></a> </ul></aside>
質問の意味がまったくわかりません。 インターネットとは、世界中に広がる最も普及したネットワーク、それをウェブとも言います。 ウェブサイトとは、そのネットワーク上のひとつのデータの集まりです。 　書籍がインターネットとすれば、ウェブサイトとは一冊の本 インターネット広告表現とはなんでしょう。 PR型のWEBサイトでも適用ですか？ 　先の例で言うとカタログ冊子・・ 　まったく意味不明の質問になっていますよ。 　下記の用語を再チェック ウェブサイト - Wikipedia( https://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A7 … ) World Wide Web - Wikipedia( https://ja.wikipedia.org/wiki/World_Wide_Web ) インターネット - Wikipedia( https://ja.wikipedia.org/wiki/%E3%82%A4%E3%83%B3 … )
> テーブルで作成した表2つを横に並べたいので > 縦1横2のテーブルの中にひとつづつ表を入れました。 テーブルをレイアウト目的に使用してはいけません。テーブルを横に並べたいのであればfloatを使用しましょう。
スタイル(プレゼンテーション)もHTML(文書構造)も質問からは読取れないので、具体的なアドバイスは不可能です。 ＞変なスペースが表示されます。 　これは、firebugでどの要素に由来する物か確認する。 　『リストを表示して画像を右にだしたのですが、』に絞って、潤を追って方法を説明します。 [1] ひたすら文書構造をHTMLでマークアップします。 　構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )は、現在のHTML+CSSを用いたページ作成の基本ですが、もう15年になるのに(^^) 下記をサンプルとします、 <body> 　<header> 　　<h1>ページタイトル</h1> 　　<nav>ナビゲーション</nav> 　</header> 　<section> 　　<h2>写真リスト</h2> 　　<dl><!-- 写真が主要なコンテンツなのでimg要素を使用する。--> 　　　<dt id="Photo1"><img src="" width="" height="" alt=""></dt> 　　　<dd>画像の説明</dd> 　　　<dd>撮影場所</dd> 　　</dl> 　　<nav> 　　　<h3>目次</h3> 　　　<ol> 　　　　<li><a href="#Photo1">写真1</a></li> 　　　　<li><a href="#Photo2">写真1</a></li> 　　　</ol> 　　</nav> 　　<aside> 　　　<h3>本文とは関係ない記事</h3> 　　</aside> 　</section> 　<footer> 　　<h2>この文書のフッタ</h2> 　</footer> </body> [2] HTMLが正しいかAnothe html Lint( http://www.htmllint.net/html-lint/htmllint.html )などでチェックし、修正します。 　これがまずいと期待通りにデザインできないので [3] スタイルシートを書きます。 　このとき、[1]の文書構造を使ってセレクタ書きます。 section dl dt{clear:right;} section dl dt img{float:right;} これで画像が右でリスト項目ごとに整理されるはずです。 ★数日前に( https://oshiete.goo.ne.jp/qa/9016357.html )でも回答しましたが、きちんとHTML書くことが基本です。 [より具体的なサンプル] ★ Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　の[DATA}でチェック済みのHTML5+CSS2.1です。 ★ タブは＿に置換してあるので戻す。 ★ :は：(全角)に置換してあるので戻す。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> ＿<link rel="stylesheet" href="css/style.css"> <style media="screen"> <!-- /* ここから一般的な1+3+1カラムの指定 */ html,body{margin:0;padding:0;} header,section,footer{width:95%;min-width:640px;max-width:1000px;margin:0 auto;} section{position:relative;} body>section>*{margin:0 200px;padding:5px;} section nav,section aside{margin:0;position:absolute;top:0;width:180px;height:100%;} section nav{left:0;} section aside{right:0;} section dl{position:relative;padding:0;} section dl{} section dl dd{margin:0;padding:0 0 0 1em;text-indent:1em;} /* ここからが主題の画像を右にfloatの指定 */ section dl:after{content:"";display:block;clear:right;height:0;} section dl dt img{float:right;width:30%;height:auto;margin:2px 5px;padding:5px;} section dl dt{clear:right;font-weight:bold;padding-top:5px;} /* ここまで */ /* わかりやすいように色指定 */ body{background-color:gray;} body>section>*{background-color:silver;} section dl{background-color:silver;} section nav,section aside{background-color:lime;} section dl dt img{background-color:white;} --> </style> </head> <body> ＿<header> ＿＿<h1>ページタイトル</h1> ＿＿<nav>ナビゲーション</nav> ＿</header> ＿<section> ＿＿<h2>写真リスト</h2> ＿＿<p>使用した画像は<a href="https://pixabay.com/">Pixabay - 無料の写真</a>のフリー画像です。</p> ＿＿<dl> ＿＿＿<dt id="Photo1">金魚の写真1<img src="https://pixabay.com/static/uploads/photo/2012/01 … width="640" height="480" alt=""></dt> ＿＿＿<dd>画像や画像のタイトルは定義リスト(dd)の定義要素(dt)、画像の説明は定義リストの説明要素(dd)を使ってマークアップする。</dd> ＿＿＿<dt id="Photo2">金魚の写真2<img src="https://pixabay.com/static/uploads/photo/2013/12 … width="640" height="426" alt=""></dt> ＿＿＿<dd>画像の説明</dd> ＿＿＿<dd>HTMLやCSSを学ぶときに、素人の説明をつまみ食いしても上達しません。多くは誤まったHTMLやCSSを覚えてしまいます。</dd> ＿＿＿<dd>まず仕様書をしっかり読んで理解してから書いてみる。判らないところを探すというのが、最も短期間で上達します。</dd> ＿＿＿<dt id="Photo3">金魚の写真3<img src="https://pixabay.com/static/uploads/photo/2012/01 … width="640" height="480" alt=""></dt> ＿＿＿<dd>divは文書構造を示すためです。安易に使ってはならない。適当な要素がないか探す。</dd> ＿＿＿<dd>適当な要素がないときは、idやclassで何のブロックであるかを示す。例えば要約だったら(summary)、アルバムだったら(album)とか・・</dd> ＿＿＿<dd>その文書構造を元にセレクタを書く。デザインのためにclassやidを書くなんて事は決してしない。初心者が最も犯しやすい間違い。後でメンテナンスで困る。</dd> ＿＿</dl> ＿＿<nav> ＿＿＿<h3>目次</h3> ＿＿＿<ol> ＿＿＿＿<li><a href="#Photo1">写真1</a></li> ＿＿＿＿<li><a href="#Photo2">写真2</a></li> ＿＿＿＿<li><a href="#Photo3">写真3</a></li> ＿＿＿</ol> ＿＿</nav> ＿＿<aside> ＿＿＿<h3>本文とは関係ない記事</h3> ＿＿</aside> ＿</section> ＿<footer> ＿＿<h2>この文書のフッタ</h2> ＿</footer> </body> </html>
まあ、結論だけ言うと ＞リスト<li>の、アンカー行<a>の、hover された行の、前行・次行の、色を変えたい 　のためのCSSは、 header nav ul li{ position:relative; } header nav ul li a{ z-index:100; } header nav ul li+li:hover:before{ content:""; display:block; width:100%;height:100%; position:absolute; top:-39px;left:0; z-index:5; background-color:aqua; } header nav ul li:hover+li{background-color:yellow;} たったこれだけ・・
ローカルだと動作するのにリモートでは動作しない原因は、パスの指定によるものでしょう。 web製作でしたらfirerfoxお使いだと思いますが。、そのアドオンfirerbugでパスがきちんとし通っているか確認する。
Bootstrapが設定したグリッドにmarginやpaddingを再定義すると、挙動がおかしくなりますよ。 div.col-md4 内部にボックスを定義し、そのCSSを触ればいのではないかなと。
質問の意味が分かりません。 その言葉の通り実装すれば良いだけに思えますが、どこで、どのような問題が起こっているのですか?
No.3の方の「内容物の幅を指定を例えば6８0pxなど固定ピクセルで指定されていませんか？」に一票。 ここの幅指定を、例えば width:680px から max-width:680px という指定に変えてみてはいかがでしょう？
私の場合は反対でJSPから入り、HPB→DW CS4 になりました。 JSPは慣れるまで大変ですよ。 廃盤とは思いますが、「はじめてのJSP＆サーブレット　 Eclipse 3.7 Indigo＋Tomcat 7対応版 (TECHNICAL MASTER 67) 」 WINGSプロジェクト/東 浩二 Tomcatなどバージョン上がっても殆ど変わらず、 この本から入るのが一番楽です。 古書で売っていると思います。 今は楽すぎて、JSPに戻ろうとは到底思えません。 参考までに。
大変難しい質問です。 1) 本の良し悪しは他人にはわからない。 　一人ひとり、学習パターンは異なります。先生と生徒の相性と同じように、私に良かった本があなたによいとは限らない。 　通常はまったく合わないことのほうが多い 2) 本で学ぶのは好ましくない。 　a) 本になるまでには日数がかかります。進歩の激しいこの世界では出版される頃には陳腐化している。 　b) 本来は仕様書にすべて、それも正確に書かれているものを、わざわざ著者の先入観や思い込みでずれた物を学ぶ価値はない。 　各仕様書を最初からきちんと目を通して、必要なときどこを見ればよいか程度がわかるように・・ HTML HTML 4.01 Specification (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification 日本語訳( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) ついで、 HTML5--英文--( http://www.w3.org/TR/html5/ ) All Standards and Drafts - W3C( http://www.w3.org/TR/#tr_CSS ) の各文書(英文) 　幸いなことに約しているサイトもあります。 　⇒HTML5タグリファレンス - HTML5.JP( http://www.html5.jp/tag/index.html ) 　⇒CSS3リファレンス( http://www.htmq.com/css3/index.shtml ) など。 　そして絶対に追わなければならないのが 　⇒HTML5 Doctor, helping you implement HTML5 today( http://html5doctor.com/ ) 　仕様書に書かれていない「意図」などが良くわかります。仕様書では「section要素はheading要素(h1～h6)をひとつだけ持つべき」としか書かれてなくても、それがどんな目的のときに使われるか、こんなときは使ってはならないなどよくわかります。 　これも邦訳があって 　⇒html5doctor - HTML5.JP( http://www.html5.jp/html5doctor/index.html ) 　ただし、邦訳はいずれも最新の情報ではありませんので注意すること。 　基本的に仕様書を読むのが、正確で間違いがありません。無料ですし、著者による変なフィルターかかっていません。 　仕様書に明確にそして正確に書かれているものを本にするのは馬鹿らしい。「仕様書の存在を知らない」か「聞きかじり」のときでないと、恥ずかしくて本は書けないです。そのために、どの本を見ても、「えっ??、そりゃ嘘だろ」と言うのがたくさんありますからね。 　まあ、いきなりHTML5ではなく、HTML4.01の仕様書を読破して身につけたら、 ⇒HTML5 における HTML4 からの変更点( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　を読むのが最短で正確で、何より楽でしょうね。
ORUKA1951です。 　了解しました。今日は終日、出たり入ったりですので後でゆっくり説明しましょう。 HTML5だと <body> 　<header></header> 　<section> 　　<ul> 　　　<li> 　　　　<p></p> 　　　　<p></p> 　　　</li> ・・・・ 　</section> 　<footer></footer> </body> とかが、マークアップは楽でしょう。HTML4.01では文書構造を示す要素が用意されていませんので、『id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』ことになるでしょう。 <body> 　<div class="header"></div> 　<div class="section"> 　　<ul> 　　　<li> 　　　　<p></p> 　　　　<p></p> 　　　</li> ・・・・ 　</div> 　<div class="footer"></div> </body>
サイトを評価するときにまず確認するのが 　⇒Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) ですが、 ・炭化水素系洗浄剤の適正使用について( http://www.juntsu.co.jp/qa/qa1206.html ) よりは ・Hi-Fi オーディオ - Technics（テクニクス）( http://jp.technics.com/ ) のほうが高得点ですね。 　ついで、★Googleなど検索エンジンでどのように見えているかを確認するために、テキストブラウザで確認です。Lynx( https://ja.wikipedia.org/wiki/Lynx_%28%E3%82%A6% … )で表示した結果が添付画像です。右がTechnicsのもの ★あなたが大きく誤解されていること 　ウェブページ(HPではない!!)は、カタログを作成する卓上出版=DTP( https://ja.wikipedia.org/wiki/DTP )とは、まったく逆の発想によるものです。それがCMS( https://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3 … )で作成された物であろうと、Webオーサリングツール( https://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83 … )で作成された物であろうと関係なく、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　なのです。 　カタログを作るのとは違います。!!パソコン用のブラウザだけでなく、スマホのような小さな画面、携帯電話、プリンター、点字出力、読み上げブラウザ、検索エンジンなどでも利用できることが唯一最大の目的なのですよ。。 　それを取ってのけたら、WordやDTPソフトで作成してPDFにすれば良いですから・・・(^^) 　例えばその二つを表示しているウィンドウの横幅を縮めてみてご覧なさい。あるいは携帯電話で・・。印刷プレビューで確認しても。 ＞HPの作成方法もhtmlから入力して作成するタイプと、 ホームページビルダーみたいに最初からソフトで作成するタイプと大きく分けて二つあると思います。 　CMS、Webオーサリングツール、テキストエディタのどれで作成しようと基本は同じです。テキストエディタで作成できる技量がないと、CMSもWebオーサリングツールも使いこなせませんし、返って酷い物を作ってしまいます。 　ちなみに、「炭化水素系洗浄剤の適正使用について」はテキストエディタで作成した特有のミスがありますので、骨格はテキストエディタじゃないかと。 　文章の長短は関係ありません。プログラム的に流し込めばよいだけですから、、 [HPの作成方法もhtmlから入力して作成する] ↓ ↓　修正すると ↓ ウェブページ( https://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A7 … )の作成方法も、HTMLエディタ( https://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83 … )などで作成する方法と、CMSを使う方法と ★ホームページとはブラウザを起動したときに最初に表示されるページの事です。「私はブラウザのホームページにgoogleを指定しています。」とね。 　ましてやHPとは略しません。HP,hpはヒューレッドパッカードを意味しますので(^^) 　聞かれているデザインですが、これはHTMLとは独立した別のものです。 ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　にて、表示→スタイルシートと進み、色々なスタイルを選択してみてください。ソースを見ると判るようにHTMLは極めてシンプルですから、あなたの技術の上昇や、気分、心変わりによってデザインはどのようにでもなります。印刷プレビューではまた違いデザインになる。 　★ウェブページを作られているなら、開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )の豊富なfirefoxをお使いだと思いますが、そのアドオンのfirebug使うと良くわかります。
ごく簡単なサーバーサイドスクリプト( http://ja.wikipedia.org/wiki/%E3%82%B5%E3%83%BC% … )を書いておくのが一番簡単です。 　例えば、 message.gif 　というファイルを作ります。これは画像ではなく単なるテキストのプログラムです。Perlが情報が多く扱いやすいでしょう。拡張子は関係ない。 　このファイルには実行権限を与えておきます。 内容は #/usr/local/bin/perl と使用する言語を呼び出して localtime関数で時間を取得して その時間に必要な画像をそのまま出力する。 冗長に書いても最大で２０行もあれば・・ 　⇒beginners CGI　 - CGI からの画像表示 -( http://www.aimix.jp/cgi/syohoimgview.html ) とか・・ 　⇒Perl 時間によって画像を変える CGI - Google 検索( https://www.google.co.jp/search?q=Perl%20%E6%99% … )
あくまでプレゼンテーションの問題ですから、HTMLは関係ないです。 率直に階層のあるナビゲーションをマークアップして、スタイルシートでデザインすれば良いです。 すなわちHTMLでしたら <nav> 　<ul> 　　<li> 　　　<ul> 　　　　<li></li> 　　　　<li></li> 　　　</ul> 　　</li> 　</ul> </nav> HTML4.01なら、文書構造はclassなどを使います。 『id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　あとはスタイルシートで、:hoverを使って・・ 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　こちらが参考になるでしょう。Crome以外のブラウザで、表示→スタイルシートで「横並びプルダウン2」「ページの最上部」あたり・・ 　HTMLは共通でスタイルシートだけです。HTMLは文書構造しか書かれていないので好きに出来る
No.3です。Wikiに書かれている内容を抜粋すると 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 特徴 　XML で記述する為、ブラウザ上で閲覧でき、テキストエディタ等で編集することができる。また、ハイパーリンクを画像中に埋め込んだり、JavaScript 等と連携させることもできる。ベクターイメージであるため、ベクターデータによる画面表示では拡大や縮小をしても描写の劣化が起きない。 編集 　・・・【中略】・・・ 　SVG ではそれ自身に回転・拡大・移動などの表現を定義しているため、単体で多様な表現をすることが可能である。 　従来のウェブサイトでは、いわゆるインタラクティブな双方性のある画面変化を伴う表示を JavaScript や FLASH を用いてきた。HTML/XHTML に SVG を組み合わせることにより、JavaScript や FLASH を導入せずとも同様の効果が発揮されることが期待される。 　XML なので、原理的には専用のアプリケーションを用いることなく通常の文章として作製・編集できる。 　・・・【中略】・・・拡大するとジャギーと呼ばれる文字外延部のギザギザが生じて見にくくなる点が解決されている。 ・・・【中略】・・・ 　更に、ベクターデータのみで表現した塗りつぶしでは色の重ね合わせが可能であり、塗りつぶしの透過度の指定により集合論で用いるベン図のような形を必要最低限度の色数で表現できる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Scalable Vector Graphics - Wikipedia( https://ja.wikipedia.org/wiki/Scalable_Vector_Gr … )］より 　ま、そう言うわけですから、 ＞勉強してみる価値が有りそうですね。 　で良いでしょう。 　SVGのテキストは一見冗長ですが、そんなに難しくはありませんので、・・
ヘッダーとは何をさしているのかわからないのでなんとも言えませんが PCがsonleをnoneしても表示されるなら、PCが適切にcssを読んでないのでは？ また、sonlyのせいかどうかも微妙です 例示されたものも中途半端にdivをとじてあるし、 よくよく見なおせばなにか単純な記述ミスが見つかるかもしれませんよ
一回、電源落としたら直るのかな。
回答が無いようなので… どこまでが共通でどこまで可変なのかよくわかりませんが、とりあえずご質問文にある経度、緯度だけ変わるものと考えて。 1）関数googleMapを変化する内容（表示要素のID、経度、緯度など）を引数として受け取る形式に変更する。 例えば、 　function googleMap(id, lat, lng){　～～ （当然、内容もそれに合わせる） 2）load時の関数呼び出して、必要な数だけ呼び出す。 　　googleMap("map1", 35.681, 139.767); 　　googleMap("map2", 35.628, 139.739); 　　googleMap("map3", 35.466, 139.622); で、とりあえずは可能と思います。 後からの操作等を考慮するならば、マップオブジェクト等を返すようにしておいた方が便利なのではないかと思います。
＞どのように記述をすれば、全ての端末にきちんと表示されるでしょうか？ ＞あと、参考になるページもございましたら、ぜひ教えていただきたいです。 　すべての端末と言う意味を理解されていますか？ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML4.01仕様書2.2 HTMLとは何か?/2.2.1 HTMLの略歴( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　単に、iOS,Android,IE,firefoxにとどまらず、携帯やプリンター、スクリーンリーダーなど、さらに刃検索エンジンも含むのですよ。 　そのために、文書構造はHTMLでプレゼンテーションはスタイルシートで行なうのです。 →構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　まず、HTMLですが ・色々なナビゲーションのひとつだとすると、それが判るようにHTML書きます。 <div class="nav"><!-- divは文書構造をidやclass名を使って補完するための物 --> 　<ol> 　　<li><a href="/form/mail.cgi">空メールで簡単!!<br>無料会員登録はコチラ!!</a></li> 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 ・・・・単にリンクのためだけの段落だとすると <p><a href="">空メールで簡単!!<br>無料会員登録はコチラ!!</a></p> で良いですよね。 　これでテキストブラウザ(=検索エンジン)にも、どの端末も理解できる。もちろん著者であるあなたも、後日メンテナンスを引き受ける誰かも・・ 　その上で、screen端末--PC用ブラウザやスマホのことに対して media="screen"のスタイルシートで a[href="/form/mail.cgi"]{/*フォームメールへのリンクは */ display: block; width: 200px; margin: 10px; text-align: center; color: #fff; font-family: Helvetica, sans-serif; font-size: 18px; border: 1px solid #D23692; background: linear-gradient(white, gray); background: -moz-linear-gradient(white, gray); background: -webkit-gradient(linear, left top, left bottom, from(white), to(gray)); border-radius: 10px; line-height: 35px; } もちろん、携帯電話でのアクセスも考えるなら media="handheld"で別のスタイルを指定しましょう。 また印刷ではこのスタイルは指定しないほうが良いでしょう。
.itemBox ul {display:inline;} を追加してみては？
そんな酷いHTML書いてたら、他人どころか自分ですら手がつけられない。 確か何度もアドバイスしていると思いますが・・。 スタイルシートを書くときは正当なHTMLが必要です。スタイルを書き始める前にAnother HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html )などでチェックすることは必須です。 　★ul内にdivは置けません。 HTMLは率直にこれだけで良いです。/ルートからのパスなのでどのページにおいても良いし、includeで使いまわしもできる。 無駄なものは一切書かない。 　あとは子孫セレクタや要素セレクタ、隣接セレクタを駆使するだけですから簡単でしょう。 <nav> ＿<h2>MENU</h2> ＿<ul> ＿＿<li><a href="/category/cambodia">カンボジア</a> ＿＿＿<ul> ＿＿＿＿<li><a href="/category/cambodia/anything">いろいろ</a></li> ＿＿＿＿<li><a href="/category/cambodia/youtube">ぢゃがいもチャンネル</a></li> ＿＿＿</ul> ＿＿</li> ＿＿<li><a href="/category/cambodia/sightseeing">観光スポット</a> ＿＿＿<ul> ＿＿＿＿<li><a href="/category/cambodia/sightseeing/karaoke">カラオケ</a></li> ＿＿＿</ul> ＿＿</li> ＿＿＿<li><a href="/category/cambodia/secrity">治安</a> ＿＿＿＿<ul> ＿＿＿＿＿<li><a href="/category/cambodia/secrity/ebola">エボラ出血熱、デング熱</a></li> ＿＿＿＿</ul> ＿＿＿</li> ＿＿＿<li><a href="/category/cambodia/eating">食事</a> ＿＿＿＿<ul> ＿＿＿＿＿<li><a href="/category/cambodia/eating/phnompenh">プノンペン</a> ＿＿＿＿＿＿<ul> ＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/phnompenh/restaurants-phnonpenh">レストラン</a> ＿＿＿＿＿＿＿＿<ul> ＿＿＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/phnompenh/restaurants-phnonpenh/japanese">日本食</a></li> ＿＿＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/phnompenh/restaurants-phnonpenh/western">洋食</a></li> ＿＿＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/siemreap/restaurants/chinese">中華料理</a></li> ＿＿＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/siemreap/restaurants/khmer-siemreap">クメール料理</a></li> ＿＿＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/siemreap/restaurants/korean-siemreap">韓国料理</a></li> ＿＿＿＿＿＿＿＿</ul> ＿＿＿＿＿＿＿</li> ＿＿＿＿＿＿</ul> ＿＿＿＿＿</li> ＿＿＿＿＿<li><a href="/category/cambodia/eating/siemreap">シェムリアップ</a> ＿＿＿＿＿＿<ul> ＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/siemreap/bar-siemreap">BAR</a></li> ＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/siemreap/cafe-siemreap">カフェ</a></li> ＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/siemreap/restaurants">レストラン</a> ＿＿＿＿＿＿＿＿<ul> ＿＿＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/siemreap/restaurants/japanese-siemreap">日本食</a></li> ＿＿＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/siemreap/restaurants/western-siemreap">洋食</a> ＿＿＿＿＿＿＿＿＿＿<ul> ＿＿＿＿＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/siemreap/restaurants/western-siemreap/hamburger">ハンバーガー</a></li> ＿＿＿＿＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/siemreap/restaurants/western-siemreap/steak">ステーキ</a></li> ＿＿＿＿＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/siemreap/restaurants/western-siemreap/pizza">ピザ</a></li> ＿＿＿＿＿＿＿＿＿＿</ul> ＿＿＿＿＿＿＿＿＿</li> ＿＿＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/phnompenh/restaurants-phnonpenh/chinese-restaurants-phnonpenh">中華料理</a></li> ＿＿＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/phnompenh/restaurants-phnonpenh/korean-restaurants-phnonpenh">韓国料理</a></li> ＿＿＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/phnompenh/restaurants-phnonpenh/khmer">クメール料理</a></li> ＿＿＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/siemreap/restaurants/india">インド料理</a></li> ＿＿＿＿＿＿＿＿＿<li><a href="/category/cambodia/eating/siemreap/restaurants/dessert">デザート</a></li> ＿＿＿＿＿＿＿＿</ul> ＿＿＿＿＿＿＿</li> ＿＿＿＿＿＿</ul> ＿＿＿＿＿</li> ＿＿＿＿</ul> ＿＿＿</li> ＿＿＿<li><a href="/category/cambodia/move">移動</a> ＿＿＿＿<ul> ＿＿＿＿＿<li><a href="/category/cambodia/move/domestic">国内の移動</a> ＿＿＿＿＿＿<ul> ＿＿＿＿＿＿＿<li><a href="/category/cambodia/move/domestic/tuktuk">トゥクトゥク</a></li> ＿＿＿＿＿＿＿<li><a href="/category/cambodia/move/domestic/bike">バイク</a></li> ＿＿＿＿＿＿＿<li><a href="/category/cambodia/move/domestic/bus">バス</a> ＿＿＿＿＿＿＿＿<ul> ＿＿＿＿＿＿＿＿＿<li><a href="/category/cambodia/move/domestic/bus/phonmpenh">プノンペンーシェムリアップ</a></li> ＿＿＿＿＿＿＿＿</ul> ＿＿＿＿＿＿＿</li> ＿＿＿＿＿＿</ul> ＿＿＿＿＿</li> ・・・【中略】・・・ ＿＿＿<li><a href="/question">お問い合わせ</a></li> ＿＿</ul> ＿</ul> </nav>
多分floatを使っている。 ＞header、contents, footer header,section,footerですよね。contentsは変?そもそも複数形じゃないし。 　⇒HTML5新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) にあわせたほうが良かろうかと <div class="header"> </div> <div class="section"> 　<h2>本文見出し</h2> 　<p>・・・</p> 　<div class="section"> 　　<h3>項見出し</h3> 　　<p><img src="" width="" height="" alt=""></p> 　　<p>記事</p> 　　<div class="article"><!-- header,section,footerをもちうる完結した記事 --> 　　　<div class="header"></div> 　　　<div class="section"></div> 　　　<div class="footer"></div> 　　</div> 　</div> 　<div class="nav"><!-- ナビゲーション --> 　</div> 　<div class="aside"><!-- このsectionと直接関係ない記事 --> 　</div> </div> <div class="footer"> </div> header,section,footerは何箇所も登場する可能性があるのでclassのほうが良いかな・・ [HTML5だと] <header> </header> <section> 　<h2>本文見出し</h2> 　<p>・・・</p> 　<section> 　　<h3>項見出し</h3> 　　<p><img src="" width="" height="" alt=""></p> 　　<p>記事</p> 　　<article> 　　　<header></header> 　　　<section></section> 　　　<footer></footer> 　　</div> 　</section> 　<nav> 　</nav> 　<aside> 　</aside> </section> <footer> </footer> floatを使ってブロックの配置をしないことが原則ですが、画像の場合はfloatさせることもあるでしょうから、その場合にはfloatを終了させるコンテナブロックに対して :afterまたは:beforeの擬似要素にて {content:""; clear:[right|left|both]; display:block; } のセットで良いはずです。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　のDATAでチェック済みHTML4.01 + CSS2.1 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951&#64;hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} body>div.header, body>div.section, body>div.footer{ width:90%;min-width:630px;max-width:900px; margin:0 auto; padding:5px; } body>div.section{position:relative;} body>div.section>h2, body>div.section>div.section, body>div.section>p{ margin: 0 200px; } div.section div.nav, div.section div.aside{ position:absolute; top:0; width:200px; height:100%; } div.section div.nav{left:0;} div.section div.aside{right:0;} /* ここからが本題 */ /* もしもfloatを使って配置していたら */ div.section img{ float:right; } body>div.section:after{ content:""; display:block; clear:right; } /* わかりやすいように色分け */ div.header{background-color:aqua;} div.section{background-color:blue} div.aside{background-color:fuchsia} div.nav{background-color:gray} div.footer{background-color:green} div.section div.section{background-color:lime} div.div.aside{background-color:maroon} div.section div.article{background-color:orange;} div.section div.article div.header{background-color:purple;} div.section div.article div.section{background-color:silver;} div.section div.article div.header{background-color:yellow;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿</div> ＿<div class="section"> ＿＿<h2>本文見出し</h2> ＿＿<p>・・・</p> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p><img src="./images/01.jpg" width="240" height="180" alt="写真"></p> ＿＿＿<p>記事</p> ＿＿＿<div class="article"><!-- header,section,footerをもちうる完結した記事 --> ＿＿＿＿<div class="header">HEADER</div> ＿＿＿＿<div class="section">SECTION</div> ＿＿＿＿<div class="footer">FOOTER</div> ＿＿＿</div> ＿＿</div> ＿＿<div class="nav"><!-- ナビゲーション --> ＿＿＿ナビ ＿＿</div> ＿＿<div class="aside"><!-- このsectionと直接関係ない記事 --> ＿＿＿補足 ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>フッタ</h2> ＿</div> </body> </html>
スタイルシートを期待通りに動作させるためにはHTMLがよくないと・・ <div class="nav"><!-- classやidはデザインのためじゃなく文書構造を示すため --> 　<ul> 　　<li><a href="/A">A</a></li> 　　<li><a href="/B">B</a></li> 　　<li><a href="/C">C</a></li> 　</ul> 　<ul> 　　<li><a href="/D">D</a></li> 　　<li><a href="/E">E</a></li> 　　<li><a href="/F">F</a></li> 　</ul> </div> div.nav{ text-align:center;/* 継承される */ line-height:20px;/*継承される */ font-size:2px;/* ボタン間の間隔 */ width:60%;margin:0 auto;/* 幅60%,左右中央 */ position:relative;/* 以下の一屋サイズの基準 */ } div.nav ul,div.nav ul li{ list-style-type:none; margin:0padding:0; } div.nav ul li{ display:inline-block; width:30%; position:relative; } div.nav ul li a{ display: block; border-left: 8px solid #39B146; background-color: #FEFE98; width:100%;height:100%; text-decoration: none; color: 333; } div.nav ul li a:hover{ border-color:#39B146; background-color: #39B146; color:#fff; } div.nav ul+ul li a{ border-color: red; background-color: lime; } div.nav ul+ul li a:hover{ border-color: blue; background-color: green; }
せっかくスタイルシートを使うのに、PC用とスマホ用を作るのは、典型的な誤った方法ですよ。 スタイルシートを使用する最大の目的は!! ・構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ここも 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ・メディア依存のカスケード( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　フィーチャホン、ガラケー、いわゆる携帯電話用に、media="handheld,tty"、印刷用にmedia="print"、読み上げようにmedia="speech" とかを用意して、スタイルシートだけ異なる物を読み込ませます。 　ただ、HTMLから見るとPC用もスマホ用も、サイズ以外はまったく同じ media="screen" 　なのですから・・ CSS3で拡張されたmediaqueryを使うとスマホのサイズ--縦にしたとき、横にしたときも含めて自在にデザインできるのですから・・ 　⇒CSS3 Media Queries を使って、Webサイトをスマートフォンに対応させるときの注意書き( http://webdesignrecipes.com/web-design-for-mobil … ) 　⇒ウェブサイトをスマートフォン対応するために必要な５つの事 | コノルブログ( http://conol.co.jp/blog/archives/837 ) 　⇒ウェブサイトをスマートフォン対応するために必要な５つの事 | コノルブログ( http://conol.co.jp/blog/archives/837 ) ★基本はたった一つのHTMLを作成して、PC用、携帯用、必要なら印刷機用とスタイルシートだけを切り替える。 　・・・数年前--スマホが登場してブームになった頃に、スマホ用や携帯用に別々のページを作成する誤った方法が流行したことがありますが、Googleなどが「SEO的にも極めてまずい」と警告し始めて今はほとんどないはずです。 その上で・・・とりあえずの対処法ですが 1) スタイルシートへのパスが絶対配置になっているか？ 　示されたディレクトリ構成では、同じPATHだと異なるディレクトリを示すと思います。 　スタイルシートへのパスはルートから始まる絶対パスだと、HTMLがどこにあっても利用できます。 <link rel="stylesheet" type="text/css" media="screen" href="/styleSheet/standard.css"> <link rel="styleSheet" type="text/css" media="handheld,tty" href="/styleSheet/keitai.css"> <link rel="styleSheet" type="text/css" media="print" href="/styleSheet/print.css"> とか・・
見え方という意味での専門用語なんて無いと思いますよ。せいぜい、スマホ対応～ってぐらい。 スマートフォンを含めたモバイル端末で使いやすい仕様やデザインにする事を「モバイルフレンドリー」と呼ぶ事はありますが。PCにおける専門用語も無い。
Bootstrap3のCSSを読んでいくと、普通にメディアクエリの振り分け記述があって、その中で、クラス名ごとのWidth設定が出てきます。 基本的にマージン＝15pixel、ガッター＝30pxを取り、残りをカラム幅/12で分割するCSSが書かれていますよ。 元々LESSで書かれたスタイルがコンパイルされているので、非常にややこしい記述ですが。 グリッド幅については12が基本ですが、上記のLESSから嬲れば、16グリッドや24グリッドも可能です。その場合はカラム幅スタイルと、そのレスポンシブ設定値の追加が必要ですけど。 12グリッドだと、幅広のPC画面用にもう少し細かい制御がしたい、という事になると思いますが、自分はそういうものだと割り切って使っています。「レスポンシブビュー」であることを前提に、顧客には理解いただいています。 どうしてもイヤなら、24グリッドでいく。それもイヤなら、最初から自力でメディアクエリ書いて、CSSフレームワークのグリッドは無視。パーツだけ使う方法もあります。
スタイルシート部分です。 一行ずつ追加していき、意味を理解し、最後にposition:relativeを有効にしてみてください。 relativeはこのように使います。 <style type="text/css"> <!-- /* わかりやすいように色を付けておきます。 */ html{background-color:black;} body{background-color:gray;} div.header{background-color:aqua;} div.section{background-color:silver;} div.footer{background-color:orange;} div.section div.nav{background-color:lime;} div.section div.aside{background-color:fuchsia;} html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} /* ここから本題の説明 */ div.header,div.section,div.footer{ width:90%; min-width:630px;max-width:900px; margin:0 auto; padding:5px; /* 以下のコメントを外すとrelativeの意味がわかる */ /* position:relative; */ } div.section div.nav, div.section div.aside{ position:absolute; width:200px; top:0; height:100%; } div.section div.nav{ left:0; } div.section div.aside{ right:0; } div.section h2, div.section p, div.section div.section{ margin:0 205px; width:auto; } div.section div.section{ min-width:0; } div.section div.section p, div.section div.aside p{ margin:0; } --> </style>
スタイルシート部分<!-- と -->の間に挿入 ★800px幅以上ならOK 　ウィンドウ幅を変えてみる。 ★HTMLもCSSもメンテナンス性、SEOを重視してある。 ★http: はhttp：に置換してあるので戻す。 <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:790px;max-width:900px;margin:0 auto;padding:5px;} div.header{ background:black url(http：//cdn-ak.f.st-hatena.com/images/fotolife/j/japanesemassagemasa/20141102/20141102131729.png) center center; color:white; } div.header{text-align:center;} h1{margin:60px 5px 0px 5px;} p{margin:0;font-weight:bold;} div.header div.nav{width:100%;} div.header p{margin-bottom:40px;} div.header div.nav ul, div.header div.nav ul li{ margin:0;padding:0; height:48px; } div.header div.nav ul{ line-height:48px; list-style-type:none; font-size:0; width:100%; border-bottom:gray 1px solid; position:relative; bottom:-5px; } div.header div.nav ul li{ display:inline; font-size:12px; } div.header div.nav ul li a{ display:inline-block; height:100%;width:100%; background-size:cover; overflow:hidden; text-indent:-100em; } div.header div.grobal.nav{height:30px;position:absolute;top:0;left:0;background-color:black;} div.header div.nav ul li a[title="Home"]{ width:16.25%; background-image:url(http：//cdn-ak.f.st-hatena.com/images/fotolife/j/japanesemassagemasa/20150415/20150415160627.png); } div.header div.nav ul li a[title="Menue"]{ background-image:url(http：//cdn-ak.f.st-hatena.com/images/fotolife/j/japanesemassagemasa/20150415/20150415164137.png); width:17.5%; } div.header div.nav ul li a[title="Location"]{ background-image:url(http：//cdn-ak.f.st-hatena.com/images/fotolife/j/japanesemassagemasa/20150415/20150415164136.png); width:23.1%; } div.header div.nav ul li a[title="Reservation"]{ background-image:url(http：//cdn-ak.f.st-hatena.com/images/fotolife/j/japanesemassagemasa/20150415/20150415165803.png); width:24.8%; } div.header div.nav ul li a[title="Staff"]{ background-image:url(http：//cdn-ak.f.st-hatena.com/images/fotolife/j/japanesemassagemasa/20150415/20150415164138.png); width:18.3%; } div.header div.nav ul li a[title="Garary"]{ background-image:url(http：//cdn-ak.f.st-hatena.com/images/fotolife/j/japanesemassagemasa/20150428/20150428001729.png); width:25.1%; } div.header div.nav ul li a[title="FeedBack"]{ background-image:url(http：//cdn-ak.f.st-hatena.com/images/fotolife/j/japanesemassagemasa/20150428/20150428001727.png); width:32.1%; } div.header div.nav ul li a[title="HouseMassageService"]{ background-image:url(http：//cdn-ak.f.st-hatena.com/images/fotolife/j/japanesemassagemasa/20150428/20150428001732.png); width:42.7%;
どういう環境にあるのかで状況が変わってくるため、正解は無いと思いますが… という前置きで、 ・そこそこの規模の所にお勤めでしたら、バリバリのSEO対策専門の担当が居るのでRubyプログラマーが専門外のSEO対策を行う事はないでしょう。 ・一人社長なら全部できる必要があるでしょう。
やれば出来るかもしれないけど、HP作成する人はたくさんいますし なによりお客を取ろうとするならばHPのデザインセンスと値段ですね HP作るのにもかなりの手間と時間がかかるので１ヶ月の収入を考えると高いのは当然ですね その人の生活費があるわけですから しかも１件の依頼で完成までに１ヶ月とかかかるんだったら妥当な値段だと思いますけどね 完成しても、修正とか、更新とかはしていかないといけないので 依頼件数が増えるとそういうのも頻繁に依頼がくるしその中でHPの作成もしていかないといけないわけなので独立って事は一人でやるって事ですか？
背景画像はあくまで背景画像ですから、それはできません。 ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣★とっても重要です。 なぜなら、背景はそのブロックのサイズに本来は依存するもので自身のサイズを参照してはまずいからです。 　例えば視覚障害のあるユーザーが文字を拡大したら背景がちょん切れたりしたらまずいでしょ。 　もし画像のアスペクト比を保持して表示しなければならないとしたら、それはもはや背景ではなくそのページのコンテンツのひとつなのですよ。 　コンテンツでしたら、画像要素は置換インライン要素ですから、 img{ display:block;/*なくても良いが */ width:100%;height:auto; } で横幅優先で表示されます。なぜなら、画像はコンテンツなのですから・・ 　これはスタイルシート全般で言える事です。
戻ったらリンクの色が変っているのは、visited　で色を指定しているからだとおもいますが、これはマウスとは直接関係ないです。 hoverアクション（マウスオーバー）が必要かどうかはこちらが参考になるとおもいます。 http://takahashifumiki.com/web/design/1280/ 私も使用上タッチスクリーンではhoverはあまり意味がないとおもいます。
＞残念ながら、おっしゃることは観念的すぎてよく分かりませんし、私がお聞きしている問題の結論や提案がどこにあるのかも、 　それは、先に ★ 必要なページから、レスポンシブでないにしても、リキッドでユーザの環境に依存せずに利用できるページに改訂していく。 　と回答しました。詳しく説明すると 『新しい内容のページはリキッドでユーザの環境に依存せずに利用できるページで製作し、既存のページは必要なページから順次改訂していく』 　が最も現実的で効率的でしょう。 　仕事としてウェブの世界に携わっているのでしたら、仕様書は頭に入っているはずですが、ここをご覧になっている、そうでない方にもと根拠は示してきました。 　私は、個人で関わり始めて20年弱ですが、新しい仕様が議論されている状況から、議論をウォッチするようにしています。 　それは、結論である仕様書だけでは、なぜそのような改訂されるかがわからないからです。その目的や理由がわかっていないと、現実の問題にぶつかった時に対処できないからです。数学や理科と同じですね。 ＞ウェブの世界ではなく、ウェブがある世界、つまり人間同士が世界中で大量の情報をやり取りすることによって栄える時代には、色々な技術が必要とされます。・・・ウェブは向かっていくのではないかと思っています。 　まさにHTML3.2の時代に、それによる悪影響という重大問題が起きたのです。 　HTML誕生の参考にされたSGML(1986年)に立ち返ろう。 Standard Generalized Markup Language/背景 - Wikipedia( http://ja.wikipedia.org/wiki/Standard_Generalize … ) 　⇒14.1 スタイルシートの概説( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　に書かれている問題点、まずそこから。 　『スタイルシートはこれらの問題を解決すると同時に、HTMLにおける制限されたプレゼンテーション機構に取ってかわる。スタイルシートでは、行間の設定やインデントの設定、テキスト色や背景色、フォントのサイズとスタイル、その他様々なプロパティの設定が簡単にできる。 』 　できるところから、必要なところからで良いです。 「実際私の経験はいつも、あの分からず屋のプログラマーをどう説得してくれよう、という戦いでした。」 　わからず屋は、貴方かもしれないのですよ。 　　一歩下がって、見直してみることも必要です。悩んだときは仕様書を最初から読み返してみる。そしたら、理由や根拠を示して説得もできるでしょう。
長すぎるデータは必要なデータへのアクセス性もわるく、すべきではありません。 ページングしてください または全データ一括で出力したいのであれば、csvやexcelのデータにして ダウンロードさせるのが賢明でしょう 一応、httpやブラウザの特性を生かせば途中段階のデータも順次出力することは可能です。 出力したいデータがループで処理しているなら、何行かに一度フラッシュする処理を いれてやってください。 <?PHP set_time_limit( 0 ); echo str_repeat(' ',1024); for($i=0;$i<=9;$i++){ print $i; @ob_flush(); @flush(); sleep( 1 ); } このような処理の場合、window.onloadの処理などがうまく利かない可能性もあるので 運用のさいは注意してください
何はともあれ仕様書は確認するように・・。 簡単に説明できる内容ではないので、下記を読んでおくこと。 8 ボックスモデル( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 9 視覚整形モデル( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 10 視覚整形モデル詳細( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　抱合コンテナブロックのpaddingだけでなく、borderを引いても同様になります。 >boxの上にスペースが開いてしまいますが、 　ではなく、p要素のマージンが、上の要素のマージンと相殺された結果です。抱合ブロックの境界、paddingやborderが指定されると、そこからの寸法になります。 　paddingを指定すると、そのボックスのサイズはpaddingを含んだものになります。 　⇒8.1 ボックスの寸法( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　paddingやborderの幅があれば、そこからのサイズになる。 ★ただし互換モードでは含まない。そのため標準モードで動作するようDOCTYPEで指定する 　ウェブ開発をされると開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … ) が豊富で最もウェブ標準に近い動作をするfifefoxを利用だと思いますが、そのアドオンの Firebug( https://addons.mozilla.jp/firefox/details/1843 )を使われると、paddingやmarginの取り合いがよくわかると思います。
実際のサンプルです。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) でチェック済みのHTML4.01strict+CSS2.1のウェブ標準です。 ★タブは＿に置換してあるので戻す。 試し方 ※文字コードはShift_JIS ※このHTMLと同じ場所に[css]というフォルダーを作成し、下の5つのスタイルシートを入れる。 ※代替スタイルシートに対応した(Chrome以外の)ブラウザで、[表示]→[スタイル(シート)]に進み、任意のスタイルを選択し、ウィンドウ幅を変えて確認する。。 ※印刷プレビューで印刷時の状態を確認する。 ※携帯電話にはデザインは適用されません。 ※最低限必要なものは、sample.css、sample1.cssだけです。残りは他のデザインと印刷用 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951&#64;hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<link rel="stylesheet" type="text/css" media="screen" href="./css/sample.css"> ＿<link rel="stylesheet" type="text/css" media="screen" href="./css/sample1.css" title="右2コマ"> ＿<link rel="alternate stylesheet" type="text/css" media="screen" href="./css/sample2.css" title="左右"> ＿<link rel="alternate stylesheet" type="text/css" media="screen" href="./css/sample3.css" title="補足下"> ＿<link rel="styleSheet" type="text/css" media="print" href="./css/print2.css"> </head> <body> ＿<div class="header"> ＿＿＿<h1>文書のタイトル</h1> ＿</div> ＿<div class="section"> ＿＿<h2>記事タイトル</h2> ＿＿<p>段落(Paragraph)</p> ＿＿<div class="section"> ＿＿＿<h3>項目タイトル</h3> ＿＿＿<p>記事</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h3>項目タイトル</h3> ＿＿＿<p>記事</p> ＿＿</div> ＿＿<div class="nav"> ＿＿＿<h3>目次</h3> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<h3>補足</h3> ＿＿＿<p>本文と直接関係ない記事</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿</div> </body> </html> スタイルシート [sample.css] @charset "Shift_JIS"; html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6,p{/* これらのマージンを0にして代わりに行高さを大きくする */ margin:0;line-height:1.6em; } p{text-indent:1em;} [sample1.css] @charset "Shift_JIS"; div.header,div.section,div.footer{ width:100%; min-width:640px;/* 最小幅 */ margin:0 auto; } div.section{ position:relative; min-height:400px;/* 最小高さ */ } div.section div.section{ width:auto; min-height:150px; } div.section div.section p,div.section div.aside p{ margin:0; } div.section div.nav,div.section div.aside{ position:absolute; top:0; width:200px; height:100%; } div.section div.nav{ right:200px; } div.section div.aside{ right:0; } div.section h2,div.section p,div.section div.section{ margin-right:400px; width:auto; } /* 背景色 */ div.header{background-color:aqua;} div.section{background-color:fuchsia;} div.footer{background-color:green;} div.section div.section{background-color:silver;} div.section div.nav{background-color:lime;} div.section div.aside{background-color:orange;} [sample2.css] @charset "Shift_JIS"; div.header,div.section,div.footer{ width:100%; min-width:640px;/* 最小幅 */ margin:0 auto; } div.section{ position:relative; min-height:500px;/* 最小高さ */ } div.section div.section{ width:auto; min-height:150px; } div.section div.section p,div.section div.aside p{ margin:0; } div.section div.nav,div.section div.aside{ position:absolute; top:0; width:200px; height:100%; } div.section div.nav{ width:150px; } div.section div.nav{ left:0; } div.section div.aside{ right:0; } div.section h2,div.section p,div.section div.section{ margin:0 200px 0 150px; width:auto; } [sample3.css] @charset "Shift_JIS"; div.section{ position:relative; min-height:300px;/* 最小高さ */ } div.section div.nav{ position:absolute; top:0; width:200px; height:100%; left:0; } div.section h2,div.section p,div.section div.section,div.section div.aside{ margin-left:200px; width:auto; } [print2.css] @charset "Shift_JIS"; h1,h2,h3,h4,h5,h6,p{ margin:0;line-height:1.8em; } div.header,div.section,div.footer{ margin:0 1em; } div.section div.nav{ display:none; } div.section div.aside{ border:solid 2px blue; font-size:0.9em; width:80%; margin:1em auto; padding:5px; }
CSSとは、カスケーディングスタイルシート(Cascading Style Sheets)の略です。この名称にもなっているカスケーディングの仕組みは、CSSのもっとも重要な仕組みですが、それは理解されていますか？？ .heading4{・・・プロパティ・・・}の{}内のプロパティなんかより、はるかに重要で基本ともなる部分です。いわゆる「セレクタ」「詳細度」「継承」などです。 　その要素を指定するセレクタをすべて読み取って、詳細度が高いもので上書きし、同じ詳細度なら後述な物で上書きする。さらに、優先順位--読者の最重要宣言＞著者の最重要宣言＞著者の宣言＞読者の宣言-- 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　これはCSS2.1ですが、セレクタが追加されただけで、CSS3も大差ありません。この二項目を、そんなプロパティなんて手を出す前に確実に身につけましょう。 　指定したスタイルが適用されないのは単純にこの問題じゃないかと。 ★web開発でしたら開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )の豊富なfirefoxお使いでしょうが、そのアドオンに Firebug( https://addons.mozilla.jp/firefox/details/1843 )があります。それでどのように継承されているかがわかるはずです。 　class="heading4",class="news_headline1"のようなクラス名はつけないほうが楽ですよ。単純に div.section h3{}と、本文(section)中の見出し3要素h3はと指定するほうが楽ですし、HTML書きなおす必要もない。
gifもpngも、取り扱い的にはほぼ同じです。 厳密には同じ画質なら若干pngのほうが容量が効率化されることのほうが多いと思います。 昔は企業戦争と言うのがあって、 特許権付きのgifを広めようと言う活動が営利団体側でありました。 pngはそれに対抗して作られ発展して行った側面もあります。 ところが、そうゆうものは非営利的になってくるので、営業などが入らず普及しません。 さらに、すでにgifがある中、似たようなpngが出来ても、対応するソフトウェアはあまりありません。 現在ではpngがよく普及し、使い勝手に困ることもありません。 むしろ性能の良いpngが好んで使われます。 と言うことで、 >gifにするのが普通じゃないのか？ この「普通」と言うのは、営利団体の洗脳と市場操作、各ソフトウェアへの対応促進の営業の結果です。 もう過去の「普通」ですけどね。
表をつかってみてはどうでしょうか＾＾ http://html.eweb-design.com/0703_td.html http://html.eweb-design.com/0703_td.html そのまま入力すると線が見えっぱなしになってしまいますので「border」を指定してあげるといいです。 テーブルタグは割と使うので覚えておいた方が良いですよ～。
notice.htmlには以下のように記述しています。 <h3>新着情報</h3> <ul> <li>2015-03-17 <a href="https://drive.google.com/file/d/file01=sharing" target="_blank">文書01</a> <li>2015-03-17 <a href="https://drive.google.com/file/d/file02=sharing" target="_blank">文書02</a> ↓ notice.htmlには以下のように記述しています。 <h3>新着情報</h3> <ul style="list-style-type:none;margin:0;padding:0 1em;"> <li>2015-03-17 <a href="https://drive.google.com/file/d/file01=sharing" target="_blank">文書01</a> <li>2015-03-17 <a href="https://drive.google.com/file/d/file02=sharing" target="_blank">文書02</a> とか。。。スタイルは読み込むHTMLには無効です。 なお、list-style-typeは継承されるプロパティなので、ulに記述すると、他により詳細度の高い指定がない、あるいは同じ詳細度でも後出の指定がない限りliに適用されます。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 'list-style-type' 値: disc | circle | square | decimal | decimal-leading-zero | lower-roman | upper-roman | lower-greek | lower-latin | upper-latin | armenian | georgian | lower-alpha | upper-alpha | none | inherit 初期値: disc 適用対象: 'display: list-item'をもつ要素 継承: yes　←★ ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Generated content, automatic numbering, and lists - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )］より 　この継承や詳細度と言うカスケーディングはCSS(カスケーディングスタイルシートの命です。プロパティを学ぶより先にしつかり身につけましょう。) 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification 日本語訳( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )
MediaQueryのスクリーン幅はjavascriptで簡単に取得できますから、容易にコントロールできますよ。 http://qiita.com/blogger323/items/ba66326badc172 … 仮にクラス名を付加しておき、jQueryで別の位置に定義したDOMの内容をゴッソリ移すとかすればスッキリすると思います。
TwitterやFacebookですと、簡単なプラグインがあるようなのですが、LINEで送るボタンの計測には調べた限りソーシャルプラグインを使うしか方法はないようです。 設定方法がわかりにくい、というのは難しい、ということでしょうか？ 一つ一つ読んで設定していけば、難しい部分はあまりないと思いますので、是非トライしてみてください。 Googleで「LINEで送る　Googleアナリティクス　計測方法」と検索して一番上に出たブログがおススメです。 LINE公式とも見合わせてやってみてください。 http://media.line.me/howto/ja/
firefoxはブラウザの中では最もウェブ標準に基づいているといわれています。 よってfirefoxで動作しないと言う事は致命的な問題があるようです。 jaueryを当てはめる前に、 　⇒Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) の「DATA」でHTMLの文法チェックを行なってください。 また、firefoxにはたくさんの開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )がありますので、それを使っても調べることができます。 Firebug( https://addons.mozilla.jp/firefox/details/1843 ) Web Developer( https://addons.mozilla.jp/firefox/details/60 ) Html Validator( https://addons.mozilla.jp/firefox/details/249 )
HTML修正 <div id="hogehoge"> 　<ul> 　　<li><a href="リンク">文章…………</a></li> 　　<li><a href="リンク">文章…………</a>/li> 　　<li><a href="リンク">文章…………</a></li> 　　<li><a href="リンク">文章…………</a></li> 　　<li><a href="リンク">文章…………</a></li> 　　<li><a href="リンク">文章…………</a></li> 　　<li><a href="リンク">文章…………</a></li> 　</ul> </div> CSS修正 #hogehoge li{ margin:0; } #hogehoge li:nth-child(3n){ margin:10px; } #hogehoge li:nth-child(3n) a { color:red; } ※<br />や<br>は原則使うべきではない。スタイルシートで指定しましょう。 　⇒行区切りの強制: BR要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　なお、未だにXHTML使ってるの??? ※li要素の色を変えてもaには適用されないです。 ※ひょっとして、 <div id="hogehoge"> 　<ul> 　　<li><a href="リンク">文章…………</a></li> 　　<li><a href="リンク">文章…………</a> 　　　<p><a href=""></a></p> 　　</li> 　　<li><a href="リンク">文章…………</a></li> 　　<li><a href="リンク">文章…………</a></li> 　　<li><a href="リンク">文章…………</a></li> 　　<li><a href="リンク">文章…………</a></li> 　</ul> </div> のほうがよいのじゃないかと、HTMLは文書構造を正確にマークアップしましょう。
良いところに気づいたではないですか。 まさしくその通り。Wordpressのクソ仕様です。 正確には、管理画面から入力した記事やアップロードの情報は、すべてMySQLに保存されます。 （ファイルそのものはwp_uploadフォルダに入る） んで、「基本設定」画面で指定するサイトアドレス（サイトの絶対パス）までMySQLに保存されます。 これがどうして重要かというと、ローカルで構築したWordpressを公開サーバに移す際、MySQLの内容をコピーするのですが、その際、「基本設定」画面で指定するサイトアドレスを修正しなけれないけない、ということです。 Wordpressは画像パスだけでなく、ロクイン～管理画面への遷移にもこのパスを使いますので、ログインすら入れなくなります。もちろん、パーマリンクも全部、ローカルアドレスになります。 コンテンツはFTPで普通にコピーすればOKです。 必要なのはローカルMySQLのデータベースファイルで、サイト基本情報に当たる部分を修正しなければいけないということ。 逆に言うとこれができなければ、ローカルでのWordpress開発はムリと言うことですね。
デザインのためにtableを使うのは誤りですけど・・・ それは置いておいて・・・ <table summary="テスト"> 　<tbody> 　　<tr> 　　　<td> 　　　　<img src="hoge" width="33" height="100" alt="チューリップ"> ここにはテキスト 　　　</td> 　　　<td> 　　　　<img src="hoge" width="33" height="100" alt="チューリップ"> ここにはテキスト 　　　</td> 　　</tr> 　　<tr> 　　　<td> 　　　　<img src="hoge" width="33" height="100" alt="チューリップ"> ここにはテキスト 　　　</td> 　　　<td> 　　　　<img src="hoge" width="33" height="100" alt="チューリップ"> ここにはテキスト 　　　</td> 　　</tr> 　</tbody> </table> table[summary="テスト"] tbody tr td{height:300px;white-space:nowrap;}/* 行の折り返しを防ぐ*/ table[summary="テスト"] tbody tr td{vertical-align:top;}/* テキストの位置*/ table[summary="テスト"] tbody tr td+td img{vertical-align:middle;}/* 画像の位置 */ table[summary="テスト"] tbody tr+tr td{vertical-align:middle;}/* テキストの位置*/ table[summary="テスト"] tbody tr+tr td+td img{vertical-align:middle;}/* 画像の位置 */ とりうる値 baseline | sub | super | top | text-top | middle | bottom | text-bottom | <percentage> | <length> | inherit 本当に表ですか・・・
javascript使えば一発です。 その場でMediaQueryをでっち上げることもできますよ。 いまどきjavascript切ってるクライアントも稀だと思うし、クレーム付いたこと一度もありません。 簡単頻繁につかうならこれがいいです。 MediaClassというライブラリです。 https://github.com/jonathantneal/MediaClass
[サンプル] ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済みのHTML4.01sttrict + CSS2.1　ウェブ標準 ★リキッドですから、パソコンでもスマホでも使えるはず。ウィンドウ幅を変えてみましょう。 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951&#64;hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:470px;max-width:900px;margin:0 auto;padding:5px;} div.header div.nav{width:80%;min-width:470px;margin:0 auto;position:relative;height:300px;} div.header div.nav ul,div.header div.nav li{list-style-type:none;margin:0;padding:0;} div.header div.nav ul li a{display:block;position:absolute;text-indent:-10em;overflow:hidden;background-color:gray;width:23%;height:30%;} div.header div.nav ul li a{top:0%;} div.header div.nav ul li+li+li+li+li a{top:33%;} div.header div.nav ul li+li+li+li+li+li+li+li a{top:66%;} div.header div.nav ul li a[href="/products1"]{left:0%;} div.header div.nav ul li a[href="/products2"]{left:25%;} div.header div.nav ul li a[href="/products3"]{left:50%;} div.header div.nav ul li a[href="/products4"]{left:75%;} div.header div.nav ul li a[href="/products5"]{left:0%;} div.header div.nav ul li a[href="/products6"]{left:25%;height:63%;} div.header div.nav ul li a[href="/products7"]{left:50%;width:48%;} div.header div.nav ul li a[href="/products8"]{left:0%;} div.header div.nav ul li a[href="/products9"]{left:50%;} div.header div.nav ul li a[href="/products10"]{left:75%;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿<div class="nav"> ＿＿<h2>製品</h2> ＿＿<ul> ＿＿＿<li><a href="/products1">製品1</a></li> ＿＿＿<li><a href="/products2">製品2</a></li> ＿＿＿<li><a href="/products3">製品3</a></li> ＿＿＿<li><a href="/products4">製品4</a></li> ＿＿＿<li><a href="/products5">製品5</a></li> ＿＿＿<li><a href="/products6">製品6</a></li> ＿＿＿<li><a href="/products7">製品7</a></li> ＿＿＿<li><a href="/products8">製品8</a></li> ＿＿＿<li><a href="/products9">製品9</a></li> ＿＿＿<li><a href="/products10">製品10</a></li> ＿＿</ul> ＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
htmlでは複数の空白文字は集約されるって習わなかったですか？ どうしてもというならpreタグを使ってください (一部ブラウザをのぞきcssのwhite-spaceで処理することも可能) <pre> 1-&#009;▼AAA 2--&#009;&#009;▼BBB 3---&#009;&#009;&#009;・CCC </pre>
Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) とか The W3C Markup Validation Service( http://validator.w3.org/ ) ・・・この程度で気に言ってもしごとにゃならない。 firefoxの Html Validator( https://addons.mozilla.jp/firefox/details/249 )でもエラーで真っ赤っか。 　癖のあるclass名などから、Dreamweaverだとは思うけど、そうとうテキストで書き直しているので詳細は不明。 　googleChromeじゃ製作には無理でしょ。その程度の機能はどのブラウザも持っている。単にflashを使わずjqueryを使っているということ。 　開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )の豊富なfirefoxは欠かせない。firebugで仕組みは調べてみましょう。 そもそもHTML5で <body id="pagetop"> <div id="page"> <div id="page-header"> <div class="container"> <div id="identify-logo"></div> <div id="page-header-nav"></div> </div> </div> <div id="wrapper"> <div id="wrapContent"> <div class="breadcrumb"> こりゃないだろう。 <body> <article> <header> <h1></h1> 　 <nav></nav> だろう・・・ 　こんなの真似する奴がいるから、いつまでも旧態依然の物であふれる
素直に テキストをHTML特殊文字だけエスケープして <pre> で囲む が一番かと
うちの母親がそっくりです(笑) 学生の頃は友達を家に呼ぶのも恥ずかしいし凄く嫌でした。 今では母には求めず自分達でするようにしてます。 そのような性格は、なおらないようです。 片付けても母がさわると元に戻って散らかります(笑) でも、あきらめてます。 そんな母に育ててもらって良かったこともあります。 片付けなさいと怒られない。 女子が「やだーきたな〰い」って言う状況が案外平気だったりすること(一緒にきたな〰いとは言いますが) 参考なならない話ですいません。
＞そして任意.css内には@media screen and (max-width: 640px) ではなくて、ブラウザの時点でリンクで切り替えるほうが良いです。 mediaqueryを理解できるブラウザのみそのスタイルを読み込むことができる。 <link rel="stylesheet" href="css/screen.css" media="screen"> <link rel="stylesheet" href="css/mobile.css" media="screen and (max-width: 480px)"> ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　でチェック済み、HTML5+ CSS3 ★タブは＿に置換してあるので戻す。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <!--[if IE]> <script src="http://html5shiv.googlecode.com/svn/trunk/html5. … <script src="http://css3-mediaqueries-js.googlecode.com/svn/t … <![endif]--> ＿<link rel="stylesheet" media="screen" href="pc.css"> ＿<link rel="stylesheet" media="screen and (max-width: 640px)" href="mobile.css"> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿</header> ＿<section> ＿＿<h2>本文</h2> ＿＿<section> ＿＿＿<h3>質問</h3> ＿＿＿<p>現在従来のデスクトップ用に作成したWEBサイトを640px以下のスマホ用に対応させるため、CSSを書き直しレスポンシブ化しているところです。</p> ＿＿＿<p>全体的には画面サイズに合わせて自動で縮小できるように設定できたのですが、以下の２点ができなくて困っています。</p> ＿＿＿<ul> ＿＿＿＿<li>CSSで指定した背景画像の縮小</li> ＿＿＿＿<li>見出し部分の文字の縮小</li> ＿＿＿</ul> ＿＿＿<p>WEBサイトはヘッダー、左メニュー、右コンテンツ、フッターの一般的な２カラムです。</p> ＿＿</section> ＿＿<section> ＿＿＿<h3>回答</h3> ＿＿＿<p>最初のステップとして最善なのは</p> ＿＿＿<ol> ＿＿＿＿<li>現在のPC用のHTMLを、HTML4.01strict（strictですよ!!）に直すこと。</li> ＿＿＿＿<li>divは極力使わない。使うときはclass名を使って文書構造を示すためだけ、その際のclass名はHTML5の文書構造を示す要素に習う。</li> ＿＿＿＿<li>詳細度に基づいてスタイルを適用する要素を指定するセレクタの書き方を身につける。</li> ＿＿＿＿<li>それでリキッドのデザインに変更する。</li> ＿＿＿＿<li>mediaqueryを使ってスマホ用のデザインを作成する。</li> ＿＿＿＿<li>新しいページはHTML5で作成し始める。</li> ＿＿＿</ol> ＿＿</section> ＿＿<nav> ＿＿＿<h3>ナビゲーション</h3> ＿＿＿<ul> ＿＿＿＿<li>リンク</li> ＿＿＿＿<li>リンク</li> ＿＿＿＿<li>リンク</li> ＿＿＿＿<li>リンク</li> ＿＿＿</ul> ＿＿</nav> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html> [screen.css] @charset "utf-8"; html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6,p{margin:0;line-height:1.6em;} p{text-indent:1em;} header,section,footer{ width:100%;max-width:900px; margin:0 auto; padding:5px; position:relative; } section{ min-height:300px; } section nav{ position:absolute; top:0;left:0; height:100%; width:160px; margin-left:0; } section section,section h2{ margin:0 0 0 165px; width:auto; min-width:0; min-height:0; } [mobile.css] @charset "utf-8"; section nav ul,section nav ul li{ margin:0;padding:0; line-height:50px; text-align:center; } section nav ul li{ font-size:0.9em; list-style-type:none; dispaly:block; width:140px; height:50px; border:outset 10px gray; } section nav ul li+li{ margin-top:10px; }
文法がまず違う。エラーだらけなので、「仕事」といわれるとはぁ？ですが、それは先の回答者も指摘されてますね。 それに加えて、スペースが邪魔をしているように思えます。全角スペースなどを本番でもインデントに使用していませんか？
No.1です。 そういうご事情でしたら、ご自身のPCにローカル環境を作りそこにWordpressを入れ（データベースも今の内容をコピー）で、ゆっくりテーマをお作りになれば良いのではないでしょうか。 私はXAMPPでのWordPressローカルしか経験はありませんが 「Instant WordPress」ならもっと簡単にローカル環境が作れるようですよ。
jqueryを使ってます。fixedされていた要素が、ある位置を過ぎるとfixedが解除される。 　⇒【 jQuery 】ページのスクロール途中で指定要素の位置を「固定 / 解除」する方法 | mae's blog( http://mae.chab.in/archives/2222 ) の下にある「#bottom-bar」はページ中ほどまでスクロールすると固定されてしまいます。 　JQUERYを利用すると様々なことが可能ですので・・
No.5 です。 ＞面白い例ですが、（Chrome以外で）下記のページに行って、 肝心のページを示していませんでしたね。 　面白い例ですが、（Chrome以外で）下記のページに行って、まず画面を右クリックからソースを見てください。シンプルなのが分かるしメンテナンス性がよいのも理解できるでしょう。 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　ついでブラウザの[表示]メニューから[スタイル(シート)]を選択して、色々なスタイルシートを選択してみてください。ウィンドウ幅を変えても良いでしょう。 　さらに、[ファイル]メニューから[印刷プレビュー]を選択しても良い。「スタイルシートを使用しない」・・を選択すると検索エンジンがどう見ているかも分かるでしょう。これはSEO的にもベストなものになります。 についての説明です。 No.4への補足 ＞せっかくデザインカンプ、スライスなどを教わっても、実際は業務では使われない傾向が強くなってきているのかと思い、 　上記ページでも分かるように、スライスではリキッドなページは作れませんし、スマホに対応させるためのmediaqueryも不可能です。そもそも、あのようなHTMLは書けません。世界は『HTMLエディタで作成するシンプルなコードは検索エンジン最適化にも効果的であることから、一部のウェブデザイナーには見直されつつあり( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … )』よりさらに進んでいるということです。 　いまさら20年も前の手法、スライスなんか学んでどうするの？？？ 　シンプルなHTMLを書いて、様々なデザインの提案を代替スタイルシートで切り替えて説明するほうがよっぽど楽です。HTMLは手を加えずにスタイルシートだけ、チョコチョコと弄くればよいのですから。 　先日回答した 【至急】ul li 行間調整ができない!! ブラウザごとに画面表示が異なります!!( https://oshiete.goo.ne.jp/qa/8938261.html#an9827 … ) 　の見本コードは、書けますか？
その画像が、そのページのコンテンツそのものでしたら、IMG要素でマークアップしなければなりません。背景のように、そうでなければbackgroundです。 　HTMLは、文書構造をマークアップするための物で、デザインのためではありません。これはHTML4.01の時代から厳しく言われ続けてきました。 　構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　一方、「画像を奇麗に並べたい」はプレゼンテーションの問題ですから、スタイルシートで対処します。background-sizeのようなCSS3の機能も、javascriptの手を借りるまでもなく対処可能なはずです。
> 当方がブログを作成しています。 > MAC側では好みの文字装飾になっているのですが、Windowsでみた際、全然違う文字装飾になって > いるので、フォントを探している状況です。 これはつまり、第三者があなたのブログを閲覧した際に、あなたが望むフォントで描画したい、ということでしょうか？ もしそうならば、cssでメイリオなり、望むフォント名を優先的に指定すればいいと思いますが。 http://www.6666666.jp/design/20140428/ http://d.hatena.ne.jp/n-yuji/20130225/p1 http://pnra.hatenablog.com/entry/2014/09/23/143453 指定しているにも関わらず異なるフォントになるとすれば、優先順位を誤っているか、描画しているクライアントにはそのフォントがインストールされていないのでしょう。
ul li:first-child div で、テストしてみてください
device-widthは、ドットバイドット(拡大縮小がされてない状態)にするものなので、 そのような場合は <meta name="viewport" content="width=320"/> でどうでしょうか？
どのようなものを作ろうとなさっているのかよくわかりませんが・・・ 普通に画像を表示した状態でクリックした位置を特定したいのなら、クリッカブルマップのしくみを利用するかANo2様の回答のようにマウスの位置から計算するぐらいでしょうか… ＞透過pngファイルの一部(透過していない部分)のみを選択可能とするにはどうしたら～ 一枚の画像の部分をオブジェクト的に選択したいという意味でしたら、直接は無理です。（画像はあくまでも一枚なので） ANo1様が回答なさっているように、事前にパーツに分けておけばそれぞれのパーツごとに選択することは可能かと思います。 線を書いたり色を塗ったりするのであれば（Windowsのペイント的なもの？）、それに類したものを作成している先人がいますので参考になるかも。 HTML5のcanvasを利用していると思われます。 http://labs.artandmobile.com/jspaint/index.php http://ascii.jp/elem/000/000/513/513377/ canvasでの描画を比較的簡単にしてくれるライブラリなどもあるようです。 http://ejohn.org/blog/processingjs/ canvasの場合、基本的に描いた結果は一枚の画像的になりますので、書き加えることはできますが、後から一部を選択したり変更するのは難しいでしょう。 図形をオブジェクト的に扱いのであれば、SVGを利用する方法もあるかも知れません。 ただしこちらの場合はベクター画像が基本になります。（ラスターも扱えますが） http://www.hcn.zaq.ne.jp/___/SVG11-2nd/ SVGに関しても、簡単に扱うためのライブラリがあるようです。 http://raphaeljs.com/ ※ライブラリに関しては一例ですので、探せばいろいろあると思います。
質問が分からないです。 　　　　　↓「そこ」とはどこですか? 「画像でそこから画像を表示させると、」 　↑画像でとは?　↑どの画像 右下とは、なにが右下に行くのですか？ 　　　カソールですか・ 　　　表示領域ですか 　　　それとも画像が移動するのですか? ＞また、画像では２つですが、3つ以上の掲載の場合も教えてもらえると助かります。 　示された物には画像が二つではなく、三つあるように見えますが 　　　最近目が悪くなったけど、私の目には３つあるように見える。 デザインのためにHTMLを書くのは間違いです。そのため余計分かり難くなる。HTML5になると安易にデザイン目的でDIVは使えなくなりますよ。--HTML4のときもそうだったけど 例えば <ul> 　<li id="a"><img src="" width="" height="" alt="A"> 　　<ol> 　　　<li id="a-1"><img src="" width="" height="" alt="A-1"></li> 　　　<li id="a-2"><img src="" width="" height="" alt="A-2"></li> 　　</ol> 　</li> ・・・・とマークアップされている時に、id="a-2"にリンクした時に、カソールが移動しないようにしたいとか・・意味あるHTMLだったら説明しやすい。自身もメンテナンスしやすいし、検索エンジンも内容を理解(SEO)してくれるし、デザインは自由になるし・・ 1) まずそれぞれの画像を含むHTMLの文書構造を示してください。 2) ついで、それをどのようにプレゼンテーションしたいかをネットのこちらにいる私にも分かるように説明してください。 3) そして「画像でそこから画像を表示させると、画像のような表示にする」を説明してください。 　HTMLさえちゃんと書かれていたら、好きなようにデザインできます。 　￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣
Windowsだろうが、Macintoshだろうが、関係ないような・・(^^) 確かに、DTP( https://ja.wikipedia.org/wiki/DTP )あがりの人は、Mac使いが多いですが、ウェブはDTPのまったく逆の目的ですからね。 　DTP（卓上出版）は、文書を構成する要素の意味--文書構造--ではなく、プレゼンテーション(表現)が目的です。DTPは、いわゆる印刷物ですから、デザイン操作のしやすいツール---adbeのIllustratorとかPhotoshopとか、CorelのCorelDRAW、 Paint Shopとかが重宝します。 　しかし、ウェブは、その文書を構成する要素をマークアップして、ひとつひとつの要素の明確にするのが目的です。そしてそれをどのように表現するかはブラウザやプラットホーム（の利用するスタイルシート）に任せます。プレゼンテーションと文書構造は独立している。仕様書の ・HTMLの略歴( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・スタイルシートの概説( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) や、 ・Webの3つの問題を解決する「HTML5」とは何なのか (2/2)( http://www.atmarkit.co.jp/ait/articles/1008/30/n … ) 　の中ほどの『【問題2】文書内に埋め込まれた「意味」が不明確』 あたりを読まれると理解できるかと。 　特に最後の物は、今後主力となるHTML5についての記事です。 　Webデザインとは、DTPのように印刷物を作るデザインではなく、マークアップがメインとなります。例えば <body> 　<article> 　　<header> 　　　<h1>ページの見出し</h1> 　　　<p>このページのヘッダ</p> 　　　<nav>ナビゲーション</nav> 　　</header> 　　<section> 　　　<h2>本文見出し</h2> 　　　<section> 　　　　<h3>見出し</h2> 　　　　<aside>本文(このセクション)と直接関係ない記事</aside> ・・・・ 　これがWebデザインの最も大事な最初のステップです。 　それをスタイルシートでプレゼンテーションをしていくのですが、・・・・ ＞ソフトはどんなソフトをお使いでしょうか？ 　お分かりのように、文書の内容を理解してマークアップする作業はソフトでは不可能です。 　これは、人がするしかありませんからテキストエディタになります。 　それをスタイルシートでデザインしていくのは、現在市販されているDTPソフトでは、ほぼ不可能です。 Dreamweaverやfireworksなら出来なくもないですが・・テキストエディタのほうが早いし自由度が高い。(^^) [例]上記HTMLに対して、 body>section{　　　　article直下のsectionは・・ width: 100%;　　　　巾はディスプレイの100%で max-width: 1000px　それでも最大は1000pxで min-width:640px;　　スマホなど小さいディスプレイでは640pxが最小で background:url() silver 　背景は灰色で画像は()で ・・・ 　と指定していくのは、ソフトでは面倒になります。 ※HTML5が勧告された今、ウェブデザインはテキストエディタ--HTMLエディタ( https://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83 … )が主力にならざるを得ないでしょう。 ★ただし!! 　クライアントに、このようなデザインになりますよとかを説明するときは、Illustratorの力を借りることが今でもあります。 　私は、率直にHTMLを書いて、代替スタイルシートを何種類か用意して、それを実際に見せて相談することが多いです。最近は!! ★テスト環境としては、Linux,FreeBSD,Macなども持ってはいますが・・
引き続いて質問されるなら、前の質問に続きの質問のURLを書いた上で閉じる。 ＞gooで質問するのが初めてで、 　それぞれのQ&Aでルールがあります。まずそれを理解してから質問しましょう。 　質問が分岐してしまうと、質問したほうも回答も、またこのQ&Aを利用する人も混乱してしまいます。 　物後を進めるのに、上っ面だけ真似しても上達しません。必ず理解して進めるようにしましょう。 1).htaccessは、それがおかれているディレクトリ以下のすべてのディレクトリに影響を与えます。 2)The requested URL /home/kyouko-t/www/sp/ was not found on this server. 　そのまま、「/home/kyouko-t/www/sp/というURLはこのサーバーには見つからない」 　HTTPプロトコルでの接続ですから、その.htaccessからのパス(HTTPサーバーにおける)ですね。 　　これは、あなたが、独自ドメインなのかそうでないかで異なります。 (例) A)　http：//hoge.com/ 　　　とは、HTTPのルート(/)を示していますね。/はパス情報でしたね。 　　　ここに、directory index ディレクティブでファイル名がない時に表示する 　　ファイル名が指定してあると、それが表示されます。 <IfModule dir_module> DirectoryIndex index.html index.htm index.cgi index.sh </IfModule> 　と順番で記していきます。 　これはディレクトリ、または/でURLが指定されたときにどのファイルを指定するかで重要な指定です。 　あなたの受けたエラーメッセージの末尾が/である場合、理由が二つあります。 1) DirectoryIndexで指定されたファイルがない 2) http：//hoge.com/home/kyouko-t/www/sp 　というディレクトリがない!! B) http：//hoge.com/home/kyouko-t/ 　が、その.htaccessを置いているディレクトリでしたら・・ http：// 　|-- hoge.com/ 　　　　|-- home/ 　　　　　　　|-- kyouko-t/ 　　　　　　　　　　|-- .htaccess 　スマホ用を http：// 　|-- hoge.com/ 　　　　|-- home/ 　　　　　　　|-- kyouko-t/ 　　　　　　　　　　|-- .htaccess 、　　　　　　　　　|-- sp/ 　　　　　　　　　　　　|-- index.html とかでしょう。 　とにかく、サーバーの仕組みを理解していないと、先に進めませんし、それが示されていないのですから、誰も正確な解答はできない。 ★それよりも、もっと簡単なこと。 　その方法は根本で誤っています。 　そもそも、HTMLでウェブページを記述する最大の目的は、HTMLが 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 　HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 　・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ※これが最大の根本的なHTMLを使用する目的なのですよ。 　だとすれば、『スマホからアクセスされた時に自動的にスマホ用のサイトに振り分けられるように』は、今から15年前の1999年のHTML4.01の勧告の意味がない!!・・・とっても古い手法です。 　トップページは、「様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境」で利用できるように作成すれば済む話です。 　そのうえでスタイルシートで、スマホ用の表示にして、その場合はスマホ用のディレクトリにリンクを表示させれば済む話です。---　なおパソコンもスマホもメディアタイプはscreenです。 　⇒ウェブサイトをスマートフォン対応するために必要な５つの事 | コノルブログ( http://conol.co.jp/blog/archives/837 ) 　⇒CSS3 Media Queries を使って、Webサイトをスマートフォンに対応させるときの注意書き( http://webdesignrecipes.com/web-design-for-mobil … ) 　携帯電話(メディアタイプはhandheld)にも対応させたければ 　⇒フィーチャフォン向けの CSS - 携帯電話向けコンテンツの書き方( http://www.marguerite.jp/Nihongo/WWW/Mobile/CSS. … ) 　今のパソコン用のページをそのままスマホで利用できるようにするべきなのですよ。15年以上も前の古い手法を使う意味はないかと・・
ご提示されたURLでは「Flash」というソフトを使っております。 私は10年ほど前に触れたきりなので大分変わっているとは思いますが Flashを作成するにはなかなか学習コストがかかると思います。 No.1の回答にもありますがJavaScriptまたはjQueryを使用するのが良いと思います。 （jQueryはJavaScriptをより使いやすくしたもの） 例）簡単なサンプル <html> <head> <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/2.1. … <script> var questionAnser1; var questionAnser2; function question(num, anser) { if(num == 1) { questionAnser1 = anser; $("#question1").css("display", "none"); $("#question2").css("display", "block"); return; } if(num == 2) { questionAnser2 = anser; $("#question2").css("display", "none"); $("#anser").css("display", "block"); $("#result").text("設問１:" + questionAnser1 + ", 設問２:" + questionAnser2); return; } } </script> </head> <body> <div id="question1"> 設問１ <div> <input type="button" value="はい" onclick="question(1, 'yes')" /> <input type="button" value="いいえ" onclick="question(1, 'no')" /> </div> </div> <div id="question2" style="display:none"> 設問２ <div> <input type="button" value="はい" onclick="question(2, 'yes')" /> <input type="button" value="いいえ" onclick="question(2, 'no')" /> </div> </div> <div id="anser" style="display:none"> 答え <div id="result"> </div> </div> </body> </html>
CGIで行うのであれば以下のようにCGIプログラム（example.cgi）を呼び出すイメージです。 サンプルなどはsendmail.cgiやmailsend.cgiなどで検索すれば出てきます。 <form method="post" action="example.cgi" enctype="multipart/form-data"> <p>お名前：<input type="text" name="name" size="50"></p> <p>ファイル：<input type="file" name="upfile" size="50"></p> <p><input type="submit" value="送信する"></p> </form> ----------------------------------------------------------------- メーラを起動させるのであれば <a href="******@*****?subject=問い合わせ&amp;body=氏名：%0d%0a問い合わせ内容：%0d%0aご記入ください">メール</a> となります。 現状のコードでのメール送信は難しい（無理？な）ようですよ。 最後に、頑張ってください。わたしも最初は試行錯誤でした。
PC用のトップページには正常にアクセスできるけど、スマホで見た場合にそのエラーメッセージがブラウザに表示される、という認識でいいでしょうか？ home/kyouko-t/www/sp/ という場所にファイルが存在しません、と言っているようです。 .htaccessで記述しているスマホ用のトップページまでのパスが違っているのではないでしょうか？
【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 4.1.9 コメント 　コメントは文字"/*"に始まり、文字"*/"で終わる。コメントは他のトークン以外の どこでも出現してよく、その内容がレンダリングに影響することはない。コメントは ￣￣￣￣￣￣￣￣￣￣￣￣ 入れ子にすることはできない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Syntax and basic data types - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )］より 　コメント/* ～ */ は、どこにあろうと構いません。 　まず仕様書だけは全部に目を通して、何がどこに書かれているか位は分かるようになっておきましょう。ネットにあるCSSの説明は、まるで仕様書読んでないのじゃないかと言うものがたくさんあります。 　特に重要な 4 構文と基本データ型 5 セレクタ 6 プロパティ値とカスケーディング、継承の割り当て あたりはね。
A、 headerに背景画像(images/header_back.gif)を表示していて、 bodyに背景画像( )を設定していないからです！ 全体の背景画像とヘッダの背景画像を勘違いしていないですか？？ ちなみに、DIVボックスにコンテンツ（テキストや画像）が無い場合には高さが潰れるので、背景画像は表示されません・・・ /* ●CSSを修正　ショートハンドで記述● */ body { margin:0; font-family:"Hiragino Kaku Gothic Pro","メイリオ","ＭＳ Ｐゴシック",sans-serif; text-align:center; background: #FFF url(images/■■■■.jpg) no-repeat center 0;} #container{ text-align:left; width:1020px; margin:0 auto;} #header{ background: url(images/header_back.gif) no-repeat; } --------------------------- 蛇足： HTML4.01 Transitional では空要素を <META /> <LINK />　としません！ HTML4.01の場合、閉じタグの　/　（スラッシュ）は不要 閉じタグに / を利用するのは、XHTMLです。 そもそも、DTDが過去互換モード になっているようですが、 どうせなら、標準準拠モードにしたほうが良いでしょう。 DIVの初期値は元々 0 だから、 margin:0; padding:0; を書く必要は無い。
＞/*スライドが絶対配置で移動するので、positionはabsoluteである必要があります*/ それはおかしいです。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ absolute 　ボックスの位置（と場合によっては大きさ）は'top'、'right'、'bottom'、'left'プロパティで指定される。これらのプロパティはボックスの包含ブロックとの関係を示すオフセットを指定する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Visual formatting model - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )］より 　その親になる抱合ブロックがstatic以外でしたら、その位置を基準になります。 ですから、rerativeでも（floatでも）良いです。 それよりもっと大事なこと・・リンク先を示しておくので・・ HTML5のようですが、 ＞このスライダーの位置を、上の画像とdivに対して、 これは、基本的な間違いです。市かもとても重要な・・ なぜ、HTML5を作らなければならなかったか？？？ それは、HTL4.01では、構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )が叫ばれながら、HTML4.01では文書構造を示しきれないために、DIVやSPAN要素をid属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )ことしかできなかった。 ★HTML4.01でも　contener、clearfix、stage、clear、slide、slideInというようなID,class名はおかしい。文書構造ではなくプレゼンテーションのようですね。 ★HTML5は、文書構造を明確に示すように新しい要素が追加されました。 　　http://standards.mitsue.co.jp/resources/w3c/TR/h … 　　　⇒【問題2】文書内に埋め込まれた「意味」が不明確( http://www.atmarkit.co.jp/ait/articles/1008/30/n … )ページ中ほど ★HTML5では、DIVは原則として使いません。使うべきではないとされています 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから NOTE: Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.4 Grouping content — HTML5( http://www.w3.org/TR/2014/REC-html5-20141028/gro … )］より 　(著者は他に適切な要素がないときの最後の最後の手段としてDIV要素を使うよう強く推奨する。） 　せっかくHTML5で始められるのでしたら、以上はとても大事なことなのですよ。 その上でTMLを書くと <body> 　<article><!-- 内部にheader,section,footerをもちうるそれだけで完結する記事を示す --> 　　<header> 　　　<h1><img src="img/0.jpg" alt="なんたらのページ" > 　　　<nav><!-- ナビゲーションを示す --> 　　　　<ul> 　　　　　<li> 　　　　　　<a href="1.html"><img src="img/1.jpg" alt="1" ></a> 　　　　　　<p>1</p> 　　　　　</li> 　　　　　<li> 　　　　　　<a href="2.html"><img src="img/2.jpg" alt="2" /></a> 　　　　　　<p>2</p> 　　　　　</li> 　　　　　<li> 　　　　　　<a href="3.html"><img src="img/3.jpg" alt="3" /></a> 　　　　　　<p>3</p> 　　　　　</li> 　　　　</ul> 　　　</nav> 　　</header> 　　<section> 　　　<!-- このarticleの本文が入る --> 　　</section> 　　<footer> 　　</footer> 　</article> </body> HTMLはこれで良いです。articleは一つしかないのでなくても良いです。さらにシンプルになる。 html,body{ margin:0;padding:0; background-color:white; } h1,h2,h3,p,li{ margin:0 line-height:1.6em; } header{/* headerは・・*/ width:100%; max-width:1000px;min-width:630px; margin:0 auto; background-color: white; } header h1 img{/* header内のh1内の画像は　*/ width:100%; height:auto; } header nav{ position:relative; } header nav ul { text-align:center; line-height:20px; list-style:none; margin:0; } header nav ul li{ display:inline-block; width: 187px; height: 120px; background-color: fuchsia; font-size: 10px; } このように、スタイルを指定する要素は子孫セレクタを使って指定します。idやclassをつかって指定すると、あとで分からなくなりますよ。また示された記述方法はCSS1の時代の古いもので、CSS2以降は必ず基点セレクタから書き始めます。 ※HTML5の閉じタグは/>である必要はありません。 　HTML5だと、文書構造しか書かないのでメンテナンスもとても楽になります。デザインは好きに変更できるし、mediaqueryをつかって端末ごとにデザインを変えるのも楽になります。
divを安易に使わないように・・ ・HTMLはそれを構成する要素を示すタグでかこって文書構造を示します。 　 <h1>ここは見出し</h1><p>ここから一つの段落・・</p> 　これでは【文書構造を示しきれないために】、DIVやSAPNAにid属性やclass属性と併用して文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・HTML5では、更に厳しく他に文書構造を示す要素がない時の最後の最後の手段としてしかDIVは使えなくなります。 ※質問とは直接関係ないのですが、とっても重要なことですから、 その上で、本文記事---HTML5では<section>要素--内の見出しを装飾したしたいとします。 <div class="section"> 　<h2>本文見出し</h2> 　<p>HTML5では、更に厳しく他に文書構造を示す要素がない時の最後の最後の手段としてしかDIVは使えなくなります。HTML5では、更に厳しく他に文書構造を示す要素がない時の最後の最後の手段としてしかDIVは使えなくなります。</p> </div> とマークアップされていたとします。・・・一目でわかるようにメンテナンスも楽でしょ。 　その上でスタイルシートは div.section div.section h2{ /* 本文中の見出し */ 　　margin-left:10px; 　　color: black; 　　background-color: white; } div.section h2:before{ 　　content:url(/image/pointer.jpg); 　　float:left; } HTML5だと、 <section> 　<h2>本文見出し</h2> 　<p>HTML5では、更に厳しく他に文書構造を示す要素がない時の最後の最後の手段としてしかDIVは使えなくなります。HTML5では、更に厳しく他に文書構造を示す要素がない時の最後の最後の手段としてしかDIVは使えなくなります。</p> </section> section h2{ /* 本文中の見出し */ 　　margin-left:10px; 　　color: black; 　　background-color: white; } section h2:before{ 　　content:url(/image/pointer.jpg); 　　float:left; } (補足) 　class名をつけるときには文書構造を示す物にしましょう。メンテナンスがとても楽になります。 　記事が段落一つしかない場合でしたら <dl> 　<dt></dt> 　<dd></dd> 　<dt></dt> 　<dd></dd> </dl> のように定義リストを使うほうが文書構造上は適しているかもしれません。
アップロードもれはありませんか？ 開発者ツールで希望のスタイルがあたっているか、変更箇所が変更されているかの確認をしてください。
input { } とすると 全てのinputタグが対象になりますが [属性=属性値] をつけることで inputタグのうち、この属性がその属性値を持っているものだけを対象にする と言うことができます http://www.webword.jp/cssguide/basic/ この辺がまとめられているかも？
より上位のセレクターを使うか、!importantを追加して優先度を上げれば大丈夫だと思います。
＞html,body,div,span,applet,・・・【中略】・・・video {padding:0;border:0;margin:0;} ＞と最初にリセットされてあり（ここまで書く必要があるのか？と疑問に思っていますが） 　まったくですね。結局また書き足さなければならない。 　基本的にはfirebugで分かるとは思うのですが・・・・。それぞれのブロックの内部にあるすべての要素のmarginを調べてみる。 　それ以外の原因としては改行コードやタブなど・・その前後を選択して[選択部分のソース]で確認する。 　私はスタイルシートはすべて自分で書いています。それでも不都合があればHTMLのテンプレート自体書き直す。最終的にはそれが一番早かったりして・・
slider部分のheightにvhを使用して、画面の大きさだけに固定するのではダメなのでしょうか。 http://dev.classmethod.jp/ria/html5/css-length-v …
chromeのエクステンションには詳しくないので、直接の回答ではありませんが、 htmlはなんのソフト(エディタ)を使って書かれていますか？ エディタによってはマクロなりプラグインを入れれば、書いてる時にエラーを表示してくれますよ。 牛刀ですが、例えばVisual Studioにはそういう機能があります。
このテーマ、セッティング付ですね。 ワードプレスの管理画面 ダッシュボード　＞　外観　＞　Parabola Settings これで、このテーマのセッティング画面になると思います。 ＞TEXT SETTINGS という場所にタイトルのPXを設定する項目があると思いますが、そこで変更セーブできますか？
　サンプルなのでそうなのでしょうが、そんなHTML書いたら後々メンテナンスで泣くことになる。HTML5では、安易にDIVは使えない。 ・DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加する 　HTML4.01 http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ・Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. 　(著者は他に適切な要素ない時の最後の手段としてdiv要素を使用するよう奨励される。) 　HTML5 http://www.w3.org/TR/html5/grouping-content.html … 　たとえば、ある新着情報（ニュース）の一覧が、ブロック（section）としてマークアップされているとします。 <section> 　<h3>新着情報</h3> 　<p>大阪都構想、５月１７日住民投票へ　府と市の法定協賛成(17:08)</p> 　<p>建築廃材１０４トンを不法投棄、容疑者を逮捕　鹿児島(19:02)</p> 　<p>ＪＲ阪和線、天王寺駅―鳳駅で運転見合わせ　列車不具合(18:53)</p> 　<p>誕生パーティーだった…ベトナム人被告、ヤギ窃盗認める(17:08)</p> 　<p>ＡＳＫＡ氏知人の栩内被告に有罪判決　覚醒剤事件で地裁(16:34)</p> 　<p>お茶１杯「９６万円」　上海で日本人ぼったくり被害急増</p> </section> 　先刻の朝日新聞社のニュースサイト( http://www.asahi.com/ )より拝借・・ HTML4.01でしたら、 <div class="section" id="news"> 　<h3>新着情報</h3> 　<p>大阪都構想、５月１７日住民投票へ　府と市の法定協賛成(17:08)</p> 　<p>建築廃材１０４トンを不法投棄、容疑者を逮捕　鹿児島(19:02)</p> 　<p>ＪＲ阪和線、天王寺駅―鳳駅で運転見合わせ　列車不具合(18:53)</p> 　<p>誕生パーティーだった…ベトナム人被告、ヤギ窃盗認める(17:08)</p> 　<p>ＡＳＫＡ氏知人の栩内被告に有罪判決　覚醒剤事件で地裁(16:34)</p> 　<p>お茶１杯「９６万円」　上海で日本人ぼったくり被害急増</p> </div> それに対してスタイルシート書きます。それだけで良い。HTML分かりやすいでしょ。 サンプル ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済みHTML4.01strict + CSS2.1 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6,p{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} div.section{ ＿width:700px; ＿height:400px; ＿background:gray; ＿display:table-cell; ＿vertical-align:middle; ＿position:relative; } div.section div#news{ ＿display:block; ＿width:500px; ＿height:auto; ＿min-height: 100px; ＿margin-right:auto; ＿margin-left:auto; ＿background:silver; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<div class="section" id="news"> ＿＿＿<h2>新着情報</h2> ＿＿＿<p>大阪都構想、５月１７日住民投票へ＿府と市の法定協賛成(17:08)</p> ＿＿＿<p>建築廃材１０４トンを不法投棄、容疑者を逮捕＿鹿児島(19:02)</p> ＿＿＿<p>ＪＲ阪和線、天王寺駅―鳳駅で運転見合わせ＿列車不具合(18:53)</p> ＿＿＿<p>誕生パーティーだった…ベトナム人被告、ヤギ窃盗認める(17:08)</p> ＿＿＿<p>段落を増減してみよう・・</p> ＿＿＿<p>ＡＳＫＡ氏知人の栩内被告に有罪判決＿覚醒剤事件で地裁(16:34)</p> ＿＿＿<p>お茶１杯「９６万円」＿上海で日本人ぼったくり被害急増</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
animation-duratioプロパティの値は秒数だけです。 よって animation-duratio:27s しかない。 　そんな背伸びしなくて、まずCSS2.1あたりを徹底的に身につけましょう。スタイルシートの書式から・・ 　⇒Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification 日本語訳( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 4 構文と基本データ型 5 セレクタ 6 プロパティ値とカスケーディング、継承の割り当て は必須中の必須。
先のHTMLと同じディレクトリに[CSS]というディレクトリを作成して、次の５つのファイルを置きます。 　印刷プレビューもOKです。 　ブラウザはChrome以外をお使いください。Chromeは代替スタイルシート使えません。ページ製作なら、開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )の豊富なfirefoxが良いです。特に Firebug( https://addons.mozilla.jp/firefox/details/1843 )があるととても楽です。 ＞トップページのみ3カラムで、他の詳細ページは2カラムで表示したいのですが、 　HTMLさえちゃんと書いておけば、適用するスタイルシートを変えればすむ話です。先のサンプルだと <link rel="StyleSheet" type="text/css" media="screen" href="./CSS4/default.css" title="2カラム_ナビ上"> <link rel="Alternate StyleSheet" type="text/css" media="screen" href="./CSS4/3column.css" title="3カラム_ナビ左"> を <link rel="StyleSheet" type="text/css" media="screen" href="./CSS4/3column.css" title="3カラム_ナビ左"> <link rel="Alternate StyleSheet" type="text/css" media="screen" href="./CSS4/default.css" title="2カラム_ナビ上"> とするだけ・・ 　HTMLはご覧のようにとても楽だと思います。スタイルシートはもう少し頑張って身につけてくださいね。 [simple.css] @charset "Shift_JIS"; html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6,p,ol{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} div.section div.section{width:auto;min-width:0;} /* 色分け */ body{background-color:gray;} div.header{background-color:fuchsia;} div.section{background-color:silver;} div.section div.section{background-color:white;} div.section div.nav{background-color:lime;} div.section div.aside{background-color:yellow;} div.footer{background-color:aqua;} [default.css] @charset "Shift_JIS"; div.section{position:relative;} div.section div.section,div.section h2,div.section p{ margin-right:200px; } div.section{margin-top:2em;} div.section div.section p,div.section div.aside p{margin:0 auto;} div.section div.nav,div.section div.aside{position:absolute;} div.section div.nav{width:100%;height:2em;left:0;top:-2em;} div.section div.aside{width:200px;height:100%;right:0;top:0;} div.section div.nav h3{display:none;} div.section div.nav ol,div.section div.nav ol li{text-align:center;list-style-type:none;margin:0;padding:0;line-height:2em;} div.section div.nav ol li{display:inline-block;width:10%;} [3column.css] @charset "Shift_JIS"; div.section{position:relative;} div.section div.section,div.section h2,div.section p{ margin:0 200px; } div.section div.section p,div.section div.aside p{margin:0 auto;} div.section div.nav,div.section div.aside{position:absolute;top:0;width:200px;height:100%;} div.section div.nav{left:0;} div.section div.aside{right:0;} [2column.css] @charset "Shift_JIS"; div.section{position:relative;} div.section div.section,div.section h2,div.section p,div.section div.aside{ margin-left:200px; } div.section div.section p,div.section div.aside p{margin:0 auto;} div.section div.nav{position:absolute;top:0;width:200px;height:100%;left:0;} [3column2.css] @charset "Shift_JIS"; div.section{position:relative;} div.section div.section,div.section h2,div.section p{ margin:0 200px; } div.section div.section p,div.section div.aside p{margin:0 auto;} div.section div.nav,div.section div.aside{position:absolute;top:0;width:200px;height:100%;} div.section div.nav{right:0;} div.section div.aside{left:0;} [print.css] @charset "Shift_JIS"; body{width:180mm;font-size:10.5pt;} h1,h2,h3,h4,h5,h6{color:red;} p{line-height:2em;} div.header{page-break-after:always;text-align:center;} div.footer{page-break-before:always;} div.section div.aside{font-size:0.9em;width:80%;margin:1em 10%;border:solid gray 1px;} div.section div.section{margin-left:5em;width:auto;min-width:0;max-width:auto;} div.section div.nav{display:none;} ★忘れてました。文字コードはすべてShift_JISです。
スマホ用にレスポンシブデザインにしていない場合、 全体のwidthによるけど、PCサイトならば、 AndroidでもiOSでも、 　・ viewport 　・ text-size-adjust にて、全体幅をスマホ用の縦画面デフォルト：960pxで普通に全体表示する事ができますが、 他のサイトも全体表示されていないという事であれば、 Androidの設定が全体表示になっていないのでしょう・・・ Androidの「高度な設定」「全体表示」
文字のフォントを変更するもう一つの方法を紹介します。 ・文字の編集/入力できる状態にして、文字をドラッグして選択します。 ・文字が選択されて色が反転したら、フォントを選び直します。 多分これで出来ると思います。
Androidの標準ブラウザーでは一部のバージョンでfont-faceが有効にならない場合があるみたいです。ただ、Chromeなどの他のブラウザーでは問題なく表示されるようです。 http://stackoverflow.com/questions/20890489/font …
#2さん同様ですが、Chrome以外でも最近のブラウザなら F12キー の検証ツールで該当するコンテンツのレイアウトを見る事ができるので、原因がわかるでしょう。 まずは、画像とテキストがインライン内での改行なのか？ ブロックで分かれているのか？判断する事。 例１： <p><img ～～><br>テキスト</p> 上記のようなインライン要素内なら、line-height:0; にする。 例２： <p><img ～～></p> <p>テキスト</p> ブロックならimg以外にもブロック要素のmarginやpaddingを0にする必要があります。 また、CSSには優先度があって、貴方の指定を最優先にしないと上書きされません・・・ そのサイトを直で検証しないと誰にもわかりません・・・ わからなければ、 #1さんのようにネガティブマージンで強引にマイナスする方法もありますねｗ
.test:hover img {} testクラスの領域にマウスが入っているときのtestクラス内のimgに対するスタイル ※マウスがtestクラス内であってimgの外でもimgに対してスタイルが適用されます。 .test img:hover {} testクラス内のimg内にマウスが入っているときのimgに対するスタイル
A業者さんがどのように制作されているか、わからないので何とも言えませんが、 一般的にPCのみ作成して、自動でスマホ版も更新されることは無いと思います。 一度B業者さんにPC版のトップページとスマホ版のトップページをデザインしてもらって、 参考URLのサービスなどで事情を伝えてレスポンシブコーディングができるか問い合わせてみてはいかがでしょうか？ （B業者さんにそこまでをお願いしてもいいと思います） 無理な場合は無理と回答があると思いますし、修正してできる場合は修正してもらって進める。 トップと下層である程度デザインの整合性を取って進める前提であれば、トップページのみの確認で大丈夫だと思います。 参考URL：http://www.codingpack.jp/blog/responsive/
こんにちは。 既存のテンプレートを使う場合は、そのテンプレートに設定してあるヘッダー画像部分のCSSを自分で書き換える必要があります。 基本的な方法としては (1)　ヘッダーに使いたい画像をファイルマネージャーでココログにアップする (2)　使っているテンプレートのCSSを確認してヘッダー部分の記述をコピーする (3)　管理ページ＞デザイン＞カスタムCSSを編集　を開き、(2)でコピーしたCSSをはりつける (4)　貼り付けたCSSの画像のアドレスを(1)でアップした画像のアドレスに変更し保存する という手順になります。 ただし、CSSはテンプレートごとに違いますので、どのテンプレートに対してその処理をしたいのかが判らないと具体的な方法を提示することは出来ません。 更に具体的な内容を知りたいのであれば、お使いのテンプレートの名前を補足してください。　
素材サイトから買えば良いのでは？ http://nihongo.istockphoto.com/royalty-free/%E5% …{%2234%22:[%221%22,%227%22,%228%22],%2235%22:[%22%E5%9C%B0%E7%90%83%22]}#1d17ae06 http://activeden.net/search?utf8=%E2%9C%93&term= …
その画像が本当に透過になっているか、 完成した画像ファイルをPhotoshopで開くと目視で確認できます。 １、 古いパソコンで、例えばIE6などでは透過pngの透過部分がグレーになる。 ２、 画像の後ろ部分になる背景自体がグレーなら、当然ですが透過部分がグレーになる。
chromeとie10で確かめましたが、問題なく動きました。 どの環境で試したのでしょうか？ リンクが機能しないというのは、遷移できないのでしょうか？ それとも、リンクにすらなってないのでしょうか？ 言語系に関する質問は、ブラウザ環境などを書くようにするとスムーズに進みますよ。
＞１．上下のスクロールだけでなく、左右のスクロールも出てしまう（こちらは常時出ています）ので、左右のスクロールをなくしたいのですがどうしたらよいのでしょうか？ 　scroll:autoをつかう。CSS3のscroll-yでもよい。 ＞２．高さを固定すると、上下のスクロールが常時出てしまうのですが、メインメニューへのオンマウス時のみ出現させるためにはどうしたらよいのでしょうか？ 　動的擬似クラスの:hoverをつかいます。 ごく簡単なサンプル ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済み HTML4.01 + CSS2.1　border-radiusはCSS3 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6,p{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} /* ここから */ div.header div.nav{/* header内のナビゲーションブロックについて */ ＿width:50%; ＿margin:0 auto; ＿text-align:center; } div.header div.nav ul,div.header div.nav ul li{/* ulとli */ ＿margin:0; ＿padding:0; ＿line-height:30px;/* 一行の高さを指定 */ ＿list-style:none; ＿position:relative;/* 以下のサイズや位置の基準にする */ } div.header div.nav ul li{ ＿display:inline-block; ＿width:40%; } div.header div.nav ul li ul{ ＿position:absolute; ＿top:30px; ＿width:100%;/* position:relativeな親liに対して */ ＿height:90px;/* 見せる範囲 */ ＿overflow:auto;/* またはoverflow-y:scroll; */ ＿display:none;/* 隠しておく */ } div.header div.nav ul li ul li{ ＿display:block; ＿width:100%;/* position:relativeな親liに対して */ } div.header div.nav ul li:hover ul{ ＿display:block;/* liにhoverするとblock、詳細度が大きいので上書きされる *. } div.header div.nav ul li{ ＿background-color:black; ＿color:white; ＿background:linear-gradient(gray,black); ＿border-radius:20px 20px 0 0; } div.header div.nav ul li ul li{ ＿background: linear-gradient(gray,gray); ＿border-radius:0px; } div.header div.nav ul li ul{ ＿background-color:rgb(40,40,40); ＿border-radius:0 0 20px 20px; } div.header div.nav ul li ul li:hover{ ＿background: linear-gradient(black,black); } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li>あ行 ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>あ</li> ＿＿＿＿＿＿<li>い</li> ＿＿＿＿＿＿<li>う</li> ＿＿＿＿＿＿<li>え</li> ＿＿＿＿＿＿<li>お</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li>か行 ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>か</li> ＿＿＿＿＿＿<li>き</li> ＿＿＿＿＿＿<li>く</li> ＿＿＿＿＿＿<li>け</li> ＿＿＿＿＿＿<li>こ</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
CSS の記述自体に誤りはありません。 他のCSSで設定が上書きされているか、CSS のセレクタの記述 が目的の要素と合っていないかのどちらかと推測されます。 回答No.1 さんがおっしゃるように、『CSSの適用状況を目視 できるツール』を利用して確認されることをお勧めします。
　デザインのためにHTML書くのじゃなく、あくまでHTMLは（文書）構造だけ、プレゼンテーションはスタイルシートで指定します。 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　がすべての出発点です。 　あなたの場合文書構造は <body> 　<div class="header"> 　　<div class="header"> 　　　<ol> 　　　　<li>あいうえお</li> 　　　　<li>かきくけこ 　　　　　<ol> 　　　　　　<li>かきくけこ1<a href="">かきくけこ</a></li> 　　　　　　<li>かきくけこ2</li> 　　　　　　<li>かきくけこ3</li> 　　　　　　<li>かきくけこ4<a href="">かきくけこ</a></li> 　　　　　</ol> 　　　　</li> 　　　　<li>さしすせそ</li> 　　　　<li>たちつてと 　　　　　<ol> 　　　　　　<li>たちつてと1</li> 　　　　　　<li>たちつてと2</li> 　　　　　</ol> 　　　　</li> 　　　　<li><a href="">なにぬねの</a></li> 　　　</ol> 　　</div> 　</div> ・・・・ 　あとは、それをスタイルシートで 横並び プルダウン にデザインするだけでよいです。 　文書構造さえきちんとできていれば、どうにでもなります。 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　にてブラウザの[表示]メニュー→[スタイル(シート)]→　で任意のスタイルを選択したり印刷プレビューを試されると、考え方はわかるかな？？ 　とりあえず、 1) あなたのナビゲーションの文書構造を具体的内容は伏せて上記例のような形でよいので示すこと。 2) そして、それをどのように表現したいかを明確に
スタイルシートを使用してプレゼンテーションを指定する最大の目的は 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )ですよ。 　デザイン目的でHTMLを書かないためです。 ＞海外サイトのテンプレートを元にホームページを作っています。 　文書構造が異なるため、それだと決してうまく行きません。 ★HTMLの文書構造が分からないので具体的なアドバイスは不可能です。 ＞ヘッダーとフッターを固定し、ヘッダーの中にはcssを使ったhtmlを入れ、中央部分にリンク先が表示されるようにしたいです。 　という発想ではなく。 ・ヘッダーを視覚系メディアではウィンドウのトップに固定して 　　position:fixed;height:100px; ・ヘッダーの下部にナビゲーションリストを横並びで表示して 　　position:absolute;top:100px; ・ポインターを項目に乗せると、その詳細がヘッダーの下にぶら下がって表れるようにしたい 　　li ul{display:none;} 　　li:hover ul{display:block;} 　という風に考えます。 例えば、HTML5で書くと下記のように ※HTML5より前のHTMLでしたら 　<header></header>は<div class="header"></div>のようになる。section,footer,navも同様です。 理由 ＞DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ＞HTML5 では、文書をよりよく構造化するために、次の要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) ★タブは＿に置換してあるので戻す。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <style media="screen"> <!-- html,body{margin:0;padding:0;background-color:green;} header{ ＿height:100px;width:100%; ＿position:fixed; ＿top:0;left:0; } header nav{ ＿height:50px; ＿position:absolute; ＿bottom:0; ＿line-height:50px;font-size:0; ＿width:100%;/* navの巾に合わせる */ } header nav ol,header nav ol li,header nav ul{ ＿margin:0;padding:0; ＿list-style:none; } header nav ol li{ ＿width:10%; ＿display:inline-block; ＿background-color:lime; ＿font-size:25px; ＿border:red 1px solid; ＿position:relative; } header nav ol li ul{ ＿font-size:50%; ＿position:absolute;top:52px;width:300%; ＿line-height:30px; background-color:white; } header nav ol li ul li{ ＿width:50%; ＿font-size:inherit; ＿width:100%; ＿border:none; ＿background-color:transparent; } header nav ol li+li+li+li+li ul{right:0;} header nav ol li ul{display:none;} header nav ol li:hover ul{display:block;} section{:margin-top:100px;} --> </style> </head> <body> ＿<header> ＿＿<h1>ページタイトル</h1> ＿＿<nav> ＿＿＿<ol> ＿＿＿＿<li>Menue1 ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li><a href="">あいうえお</a></li> ＿＿＿＿＿＿<li><a href="">かきくけこ</a></li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li>Menue2 ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li><a href="">さしすせそ</a></li> ＿＿＿＿＿＿<li><a href="">たちつてと</a></li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li>Menue3 ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li><a href="">なにぬねの</a></li> ＿＿＿＿＿＿<li><a href="">はひふへほ</a></li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿</ol> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>本文</h2> <section> <h2>本文</h2><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p><p>本文記事</p> </section> ＿</section> ＿<footer> ＿＿<h2>フッタ</h2> ＿</footer> </body> </html>
まず、HTMLから HTML4.01,XHTML1.0,XHTML1.1 <div class="footer"> ＿<address> ＿＿〒123-4567 東京都杉並区1234-5678<br> ＿＿TEL:012-345-6789<br> ＿＿FAX:012-345-6789 ＿＿<a href="/form">問合せ</a> ＿</address> </div> HTML5 <footer> ＿<address> ＿＿〒123-4567 東京都杉並区1234-5678<br> ＿＿TEL:012-345-6789<br> ＿＿FAX:012-345-6789<br> ＿＿<a href="/form">問合せ</a> ＿</address> </footer> 下記はいずれもスタイルシートで指定します。 ※ プレゼンテーションに関わる要素(<font>)は使いません。 ※ プレゼンテーションに関わる属性は使いません。 　　align=　color=　face= ※ DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　　refarenceは意味が合いません。この場合はaddress要素を使うべきでしょう。 HTML4.01 7.5.6 ADDRESS要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) HTML5 4.3.9 address 要素( http://www.html5.jp/tag/elements/address.html ) スタイルシートの実際 div.footer address{ color:silver; ffont-family:sans-serif; width:20em; position:fixed; right:5px; bottom:10px; font-size:12px; } div.footer address a{ color:#aaa; text-transform:uppercase; text-decoration:none; text-shadow:1px 1px 1px #000; } div.footer address a:hover{ color:#ddd; } HTML5用 footer address{ color:silver; ffont-family:sans-serif; width:20em; position:fixed; right:5px; bottom:10px; font-size:12px; } footer address a{ color:#aaa; text-transform:uppercase; text-decoration:none; text-shadow:1px 1px 1px #000; } footer address a:hover{ color:#ddd; }
No.2です。 ＞iPhone、iPadだけでもこれだけの種類に別けなくてはならないのですね。 ＞・・・【中略】・・・ ＞実際に皆さんはかなり多くの解像度振り分けをされているのでしょうか？ 　そんな無茶はできません。今後も益々増えていきますし・・ 　viewportをつかってデバイスの解像度で振り分けています。 　viewportを使うと、逆に文字数との指定は楽になります。 ＞取引先の言い分は、「スマホでも文字を見やすい大きさにしつつ、1行に収まるように、もし<br>を使っていたらきちんと改行も正しくなるようにしろ」 　ここは整理したほうが良いですね。 <br>を使う場面と言うと <address> 株式会社ABC<br> 東京都品川区<br> ・・・・町・丁目・番<br> </address> などでしょうが、その場合に 株式会社ABC 東京都品川 区 ・・・・町・ 丁目・番 と改行されてはまずいのはわかります。しかし、 <p>取引先の言い分は、<q>スマホでも文字を見やすい大きさにしつつ、1行に収まるように、もし&lt;br&gt;を使っていたらきちんと改行も正しくなるようにしろ</q>という感じでした。</p> が、 　取引先の言い分は、「スマホでも文字を見やすい大きさにしつ つ、1行に収まるように、もし<br>を使っていたらきちんと改行も 正しくなるようにしろ」という感じでした。 だろうが、 　取引先の言い分は、「スマホでも文字を見やすい大 きさにしつつ、1行に収まるように、もし<br>を使って いたらきちんと改行も正しくなるようにしろ」という 感じでした。 と表示されようと構わないというか、そうあるべきです。 　あなたが言われるように、 　これはテストサイトです。これはテストサイトで 　す。 　これはテストサイトです。これはテストサイトで 　す。 がまずい状況と言うのが思い浮かばない。 ★ウェブページをまるでカタログや印刷物のようなイメージで捉えているクライアントも存在します。その方には、実例を上げて説明して納得してもらう。それも請けた側の仕事の一つですね。 　端末によってと言われる方は、「携帯電話、モバイル機器、音声入出力機器、点字端末、プリンターはどうされますか？？」と問いかければ(^^) 　
ナビゲーションでしょうから、文書構造が分かるようにclass名をnavにしたdivで囲んでおきます。 <div class="nav"> 　<ul> 　　<li><a href="">トップページ</a></li> 　　<li><a href="">メニュー2</a> 　　　<ul> 　　　　<li><a href="">メニュー2のサブメニュー</a></li> 　　　　<li><a href="">メニュー2の長いんだよサブメニュー</a></li> 　　　　<li><a href="">メニュー2のサブメニュー</a></li> 　　　</ul> 　　</li> 　　<li><a href="">メニュー3</a></li> 　　<li><a href="">メニュー4</a></li> 　　<li><a href="">メニュー5</a></li> 　　<li><a href="">メニュー6</a></li> 　　<li><a href="">メニュー7</a></li> 　</ul> </div> /* ナビゲーションのリストのスタイルをリセット*/ div.nav ul,div.nav ul li{ margin:0;padding:0; line-height:2em; text-align:center; width:100%; position:relative; background-color:white; z-index:100; } /* 横並び */ div.nav ul li{ display:inline-block; width:13%;/* ７項目なので100÷7≒14.29 */ } div.nav ul li ul{ position:absolute; top:2em; width:300%; } div.nav ul li ul li{ display:block; text-align:left; width:auto; } /* hover */ div.nav ul li ul{display:none;} div.nav ul li:hover ul{display:block;}
カスタマイズする程度なら必要なところを必要に応じて検索すれば事足りると思います。 自分で1から作るとなると、それなりにお勉強が必要です。 オススメとしては、作りながら覚える系の書籍なりサイトですね。 自分は使ったことありませんが。 http://www.amazon.co.jp/作りながら学ぶ-HTML-CSSデザインの教科書-高橋-朋代/dp/4797373024
示された部分以外に原因があるようです。 とりあえず、それをmedia="screen"に変更(screen用のスタイルと置き換えて)して、firebigなどで、スタイル指定を確認すること。 ・HTMLからプレゼンテーションに関わる物をなくすこと ・セレクタは基点セレクタからきちんと書かないとメンテナンス出来ないですよ。 (例) <div id="table_pnl" class="table-responsive"> じゃなくて、 <div id="data1"> div.section div#data1{} とかね。
Google Chromeでやってみてください。
解りやすい解説を、というか一言で済んでしまいます。 「ブラウザの幅ごとにcssを設定する」と言うものです。 具体的な作り方は「レスポンシブ 作り方」とかで検索すれば山ほど出てきますので割愛し、なぜそんな作り方をするのかという点についてもう少し具体的に書きます。 レスポンシブが一般的になる前から、スマホサイトが流行っていました。 いわゆるスマホサイトはPCサイトとは別のサイトを構築するというもので、PCサイトとはかけ離れた作り方が出来るので自由度は高いですが、メンテナンスのコストが2倍になります。 スマホが出て来てしばらくしてからは、iPadやタブレットが出てきました。 スマホサイトだと見難いしPCサイトだと能が無い、とタブレットに合わせたサイトを作る企業も多少ありましたが、これだとメンテナンスコストが3倍です。 そのあたりから急速に流行り出したのがレスポンシブウェブデザインです。 ブラウザの横幅の情報を取得し、幅ごとに適用するcssを変更する事で、ひとつのhtmlであらゆるデバイスに対応したサイトを作ろうというものです。 これだとひとつの更新にあたって何か所も更新する必要が無く更新コストは下がります。 レスポンシブデザインの一番の目的は「更新コストの軽減」です。 もう一つメリットとしてよく挙げられるのは、SEOに有利と言う点です。 スマホサイトを別に作った場合はURLが別なので、その時点で多少効果が軽減される恐れがあります。 PCサイトとスマホサイトで同じような情報がWeb上に二つあるので、ダミーサイトだと判断されると順位を落とされるという危険もある、という意見もありました。 （実際にはないと思いますが） また、Googleがレスポンシブを推奨しているという情報が出て、SEOに有利だという噂が広がりました。単純にURLが一つだと1度のクロールで済むので検索エンジンに優しいのはある意味当然です。 ただ、その後改めてGoogle社員がレスポンシブだからと言ってランキングには影響しないと公表しました。 ですので、実際にSEOに有利かどうかは実際にははっきりしていません。 個人的にはあまり関係ないと思ってます。 レスポンシブはメリットばかりではなくデメリットも多いです。 ・構築コスト レスポンシブデザインでサイトを作るにはしっかりとした企画と技術力が必要になり、PCサイトとスマホサイトの二つを作るよりも制作コストがかかる事が多いので、ほとんどの場合で初期費用は上がります。 ・通信量 PC用のコンテンツ分の容量を全て読み込むので、スマホサイトを作った場合とは異なり、通信量は上がり、単純にスマホサイトよりも表示速度が遅くなります。 ・自由度の低さ スマホ用サイトを作る場合はスマホ独自の機能をふんだんに使用できますが、レスポンシブは1コードなのでスマホに特化したコンテンツを作る事には向きません。 あくまで「閲覧できる」であって、「最適化」ではありません。 ・スマホやタブレットではPCサイトを表示できない スマホサイトには「PCサイトを表示」というようなボタンがある事が多く、PCサイトに慣れた方はそちらのほうが使いやすいと思う場合も多いと思います。 レスポンシブでは幅ごとにレイアウトが固定されますので、PCサイトを見る事は出来ません。 また、ブラウザの拡大機能を切ってしまうため、拡大する事も出来なくなります。 このあたりを踏まえて、コストに見合う効果があるかを考えて判断しましょう。 最近では、こういうネガティブな記事もあります。 http://www.domore.co.jp/mobilelab/oneweb/oneweb1 …
テンポラリーファイルを削除して再読み込み。 文字コードはきちんと指定してあるか？ そしてそれが正しいか？ スタイルシートのチェック 　W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/ )
私も、No.1さん、No.2さんとほぼ同じ意見です。 本サイトに「近日公開」の１ページだけを作っておきます。 デザインは、本格的に公開するページとイメージ（色遣いやトップの画像など）を合わせておくといいと思います。 後は、 ・お店の概要（雰囲気、店内の写真、主なメニューなど） ・地図（外観の写真があると、お客様が近くまで来て迷うことがなくなります。） ・連絡先、住所 　…メールアドレスはヘタに載せると迷惑メールの餌食になります。 　　本サイト公開時にフォームにした方がいいと思います。 などの、基本的な情報を載せておきます。 後は、Facebook（正確にはFacebook page）やブログのアカウントを作成して、そこへリンクを張るようにします（逆にFacebook pageやブログから本ページへのリンクを張っておきます）。 両者とも、記事の編集が簡単なので、クライアント様が頻繁に記事を更新することで、読者が定期的に読んでくれることが期待できます。 デザイン面では、 Facebook page: 　変更できるのはトップ画像と、プロフィール写真のみ 　…自由度がない分、逆に変更の手間が少なくて済みます。 ブログ： 　ある程度自由にデザインできますが、基本的には、本ページとイメージの近いテンプレートを選んで、トップ画像を入れ替える位でいいと思います。 以上のような方法をとれば、最初の公開までの時間は短縮できると思います。 ※ 本サイトを作成してから独自ドメインの設定をすると、独自ドメインでサイトが表示されるまで１～３日程度かかることがあります。 仮サイトを設置しておいて、本サイトができたときに差し替えれば、更新が即座に反映されます。（ブラウザにキャッシュが残ることがあるので、F5キーで表示を更新してください） ----------------------- 本格運用後も、基本情報は本サイト、新着情報はFacebook pageやブログで行うと、更新がクライアント様でできるので、こまめな更新を行うことができます。 …Facebook pageやブログの最新情報を本サイトに自動的に反映させることもできます。
ランニングコストが・・・となると、嫌がるお客さんがおおいので現状、使わない方向になってしまう。
　フォントワークスの『FONTPLUS』やモリサワの『TypeSquare』などは、必要な文字だけをダウンロードしているようです。それでも多少は待たされますし、フォントデータすべてをダウンロードするタイプであれば、もっと待たされるかと思います。 　また、Windowsのフォント表示はアップル製品やスマホに比べて粗いところがあり、小さいWebフォントは逆に読みづらいです。MacTypeを入れれば解決できますが、わざわざ訪問者さんにソフトをインストールさせるのは難しいかもしれません。 ◆Webフォントのモリサワ TypeSquareに申し込んでシャレオツ和欧混植 | 高橋文樹.com 　http://takahashifumiki.com/web/design/2863/ ◆モリサワTypeSquareを比較してみる 　http://wakufactory.jp/densho/TypeSquare/hikaku.h … ◆Macに慣れたらWindowsのフォントが耐えられないので解決してみた｜Mac - 週アスPLUS 　http://weekly.ascii.jp/elem/000/000/206/206833/ 　Windows（やブラウザ）が正式対応するまでは、大きいタイトルにのみWebフォントを使うか、あるいは画像で置き換えたほうが簡単ではないでしょうか。
レスポンシブ対応のこと？
画像には前景/背景の二種類が存在します。 img要素は前景、background-imageは背景です。 前景は「コンテンツとしてなくてはならないもの」なので画像が非表示であっても代替テキストを表示する仕組みになっています。 背景は「コンテンツとしてはなくてもいいもの」であり、前景に表示されているコンテンツと背景を重ねて表示する事で背景が表示されなくても問題ない仕組みになっています。 従って背景には代替テキストそのものが不要です。 そもそも、代替テキストを表示したら前景に表示されているコンテンツと重なって見づらくなるはずです。 もし、あなたが背景を前景としての機能を期待している(コンテンツを空にして背景にコンテンツとしての意味を求めている)のなら実装法が誤りですのでimg要素に変更してください。 <div style="background-image: url(http://www.hogehoge.com/header1.jpg)"></div> これは画像非表示にしたり、CSSを無効化すればコンテンツが見えなくなります。 背景は次のように使います。 <div style="background-image: url(http://www.hogehoge.com/header1.jpg)">ここにコンテンツを書く</div> 背景画像がなくてもコンテンツは表示されているので問題ありません。 # Re: pekochan18さん
＞♯headerに幅100%、その子要素が2つあり、各々フロートをleftとright、幅はピクセルで指定しておりますが、 　その場合はfloatを使用すべきではありません。 　巾は、padding辺の内側ですから、子要素にpaddingやborder、marginがあれば、それを差し引かないとなりません。 　DOCTYPEスイッチ( https://www.google.co.jp/search?q=DOCTYPE%E3%82% … )がtrictで動作する様に記述してあれば、多くのブラウザでの誤差はなくなりますが、その場合はpadding辺の内側がサイズになります。
まず、定番のチックサイト 　⇒Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) ウィンドウ巾は皆さんが1200px以上の環境で使用するわけではありません。最近はスマホなどでの利用も多いです。640px巾でも横スクロールなしで利用できるように・・ 　ウェブページにHTMLを利用する最大の目的は 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　なのですから、それを忘れると・・
HPご自分だけが満足するものでは無いと思います　低解像でも情報がより正確に伝わる方が　大切だと思います なるべく軽く　きれいで　解りやすい　ページが　良いと思います PC とスマホ用のページがあれば　なお良い　
文法的に誤っているためにきちんと動作しないでしょう。 『メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。( http://jigsaw.w3.org/css-validator/#validate_by_ … )』 　私には良く分かりませんが、ここでとても詳しい方(ORUKAさん)が回答されるはずなのですが。みのがされているのかな
. : クラス > : 直下の要素 , : セレクタの併記 table-hoverクラス直下のtbody直下のtr上にマウスが来たときの直下のtdまたはth の背景色を#550055、文字色を#eeeeee
最初の最初から間違っている。わざわざwordやpowerPointで作成せず、HTMLでウェブページを作成するのは、（ちょっと長い引用ですが） 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　Web開発されているのでしたら、開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )の豊富なfirefoxお使いだと思いますが、Default FullZoom( https://addons.mozilla.jp/firefox/details/6965 )などで拡大縮小してもよいし・・・。簡単なものならどのブラウザでもCtrl＋＋やCtrl＋－でも 　支社で使用しているブラウザやＯＳ、使用しているフォントなどですべて代わります。利用するのが支社の特定のパソコンからだけで、一般の人や第三者が利用するウェブページでしたら、『どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境』を考慮すべきです。 　 　
それはできないのです。（無理やりは可能でしょうが) 理由は ・並列した要素は互いに他に属していないために、他の要素の子孫足りえない。 　あなたのあげられたサンプルでいうと、三行目の新たな要素の巾が３つの要素の巾を決定したとしても、他の要素がそれを参照できることはない。 　※無理やりなら可能です。 　display:table,display:table-rowを指定してもダメです。 　　三番目の要素がもっとも長いと分かっていれば、それを元に親要素の巾を決定し、他の要素はその親要素の子孫としてabsoluteないしrelativeで指定する。 　理由はお気づきのようにtableは、その描画方法が特殊だからです。
変なサイトを見ないこと。 「+を利用して次に来るタグが対象になっています」違います。それも初歩的な嘘。 +ある要素に続く要素を示す隣接セレクタと呼ばれるものです。 　タグはその要素を示すマークアップであって、要素自体を示すものではない。これはHTMLのようなマークアップ言語を扱うときの基本中の基本。 input[type="checkbox"].on-off:checked + ul{ 　HTMLが糞だからセレクタの書き方も糞になる。on-offなんてクラス名はつけないでしょう。classは、要素では文書構造が示しきれないときに、文書構造を補完するためにつける。 input[type="checkbox"].on-off:checked + .test ul{ 　CSS2以降は基点セレクタを書くこと。上記(.test)の様になくても、そこに全称セレクタが省略してあると判断して、*.testと解釈はしてくれるけど。 　まず、CSS2.1の 5.セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) をマスターしましょう。 ＞上記の様に記述すれば、<div class="test">～</div>を操作できますか？ 　前後の文書構造が分からないので答える事は不可能です。 　ただ、input要素は行内要素ですから、その直後にdiv要素が閉じられもせず繰ることはありえません。 　form　　　　　　　<form> 　|-- p　　　　　　　　<p> 　|　|--input　　　　　　<input> 　|--div　　　　　　　 </p> 　　　　　　　　　　　　<div> 　　　　　　　　　　　　　<ul> のはずですから、HTMLが正しければそのような書き方にはならないはずです。 もちろん、 input[type="checkbox"].on-off:checked + ul{ にもね。 　 　
ご希望のリスト（<ul><li></li></ul>）で作成する方法です。ちょっと無理やりですが、 cssのulやliに関わる記述を削除し、次のcssを乗っけてみてください。 ul li{ margin-bottom:10px;{/*liと次のliとの間のスペースです。*/ } ul li p{/*liの中のpをテーブルのセルとして表示させる事により、お隣のセルと高さを揃えています。また、縦方向の中央揃えも可能となります。*/ display:table-cell; border:1px solid #cccccc; } .title1{ width:180px; background:#444AFF; color:#fff; padding:5px 0 5px 14px; vertical-align:middle; border:none; border-right:10px solid #ffffff;{/*白い罫線をタイトルの右にいれることで、空白に見せかけています。*/ } .content1{ width:500px; padding:5px 0 5px 14px; } ーーーーーーーーーーーーーーーーーーーーここまで tableでborder-spacingが効かなかったのは、border-collapseでcollapseを指定しているからだと思います。 <link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/3.18.1/build/cssreset/c … にtable{border-collapse:collapse;border-spacing:0}の記述があります。 border-collapse: separate; を指定し直せば、効く筈です。
解決しますよ。でも10万くらいのじゃまたすぐ同じになるかと。。。 高いのが難点ですがクリエイター向けのPCにしとけば問題なくサクサクです。 DELLの　Graphic Pro や http://www.dell.com/jp/p/deals.aspx?c=jp&l=ja&s= … mouse computerのクリエイターPCなど。。 http://www.mouse-jp.co.jp/abest/creator/ 本題。イメージ図ですが、 > そこに一つ一つパーツや文章を作ってイメージ図を完成させてます こうなるとイメージというより、デザインですよね。 やり方は人それぞれ異なりますし自分が効率良い方法を探っていけば 自然と一番の方法にたどり着くかと思います。 全ページデザイン起こしてからコーディングに移る人もいれば トップ＋中1ページのデザインのみ作成して後はコーディングしながら組み込んでいくなどなど、 クライアントに全ページデザイン見せて！と言われれば嫌でも作りますし。笑 時と場合や気分と案件によってやり方変えてもいいと思います。 Photoshop以外はないと思ってます。 余談ですが、試してませんでしたらメモリ不足も考えられますので 環境設定 > パフォーマンス > メモリの使用状況でphotoshopで使う容量とか設定できますので 現PCでも試してみるのもありかと思います。
Wordpress アーカイブテンプレートで <?php if ( have_posts() ) : while ( have_posts() ) : the_post(); ?> <dl class="accordionLister"> <dt><?php the_title() ?><span class='showExcerpt'>[概要表示]</span><a href="<?php the_permalink() ?>">[詳細表示]</a></dt> <dd><?php the_excerpt() ?></dd> </dl> <?php endwhile; else: ?> <p>404</p> <?php endif; ?> <head>内に以下のjQueryを $(function(){ $('accordionLister dd').hide(); $('document').on('click','.showExcerpt',function()){ $('accordionLister dd').hide; $(this).parent().find('dd').show(); } }); 内容が約わからないのですが、だいたいこんな感じ？
ブラウザの設定によります。詳しく説明すると 　CSS(カスケーディング スタイルシート)の根幹でもあるのですが、スタイルは ユーザーの最重要宣言＞著者の最重要宣言＞著者のスタイル＞ユーザーのスタイル＞デフォルト(ブラウザのもつ)スタイル で適用されます。それぞれはさらに詳細度や出現順番で決定されます。 　ブラウザのもつスタイルは、基本的には kbd, samp { font-family: monospace } 　のみで、それ以外はブラウザの各ベンダーが指定しています。 ブラウザの設定項目を探してみてください。 　font-familyだけじゃなく 　⇒HTML 4のためのデフォルトスタイルシート( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　にあるように、様々なスタイルが基底として指定されています。 　 　
意図が分かりません。 <table summary="テスト" border="1"> 　<tbody> 　　<tr> 　　　<th abbr="あ列">あ</th><th abbr="い列">い</th><th abbr="う列">う</th><th abbr="え列">え</th> 　　</tr> 　　<tr> 　　　<td colspan="4">・・・・</td> 　　</tr> 　　</tbody> </table> ですか?
それで動作するなら ^^^^^^^^^^^^^^^^^^^^^ /ssiSample に [.htaccess] Options +Includes AddHandler server-parsed html を入れておく。ファイル名、リンク先の.shtmlを.htmlに変更する。 ※保存時に".htaccess"として""で括らないと勝手に.htaccess.txtとするエディタもある。 [index.html] <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<link rel="stylesheet" type="text/css" media="screen" href="./CSS/test.css"> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section" id="section1"> ＿＿<h2>このサイトの目次</h2> ＿＿<p>本文はsection</p> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<div id="contentTable"> ＿＿＿＿<ol> ＿＿＿＿＿<li><a href="./index.html">トップ</a></li> ＿＿＿＿＿<li><a href="./P1.html">１章</a></li> ＿＿＿＿＿<li><a href="./P2.html">２章</a></li> ＿＿＿＿＿<li><a href="./P3.html">３章</a></li> ＿＿＿＿</ol> ＿＿＿</div> ＿＿</div> ＿＿<!--#include file="SSI/nav.html" --> ＿＿<!--#include file="SSI/aside.html" --> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<!--#include file="SSI/history.html" --> ＿＿<!--#include file="SSI/address.html" --> ＿</div> </body> </html> [nav.html] <div class="nav"> ＿＿＿<h3>目次</h3> ＿＿＿<ol> ＿＿＿＿<li><a href="./index.html">トップ</a></li> ＿＿＿＿<li><a href="./P1.html">１章</a></li> ＿＿＿＿<li><a href="./P2.html">２章</a></li> ＿＿＿＿<li><a href="./P3.html">３章</a></li> ＿＿＿</ol> ＿＿</div> SSIは、とても古い技術で、質素で目立ちませんが、簡単に実現できるため意外と多くのサイトで使われています。いくつか理由があります。 ・javascriptを使用すると、それを利用できないユーザーエージェントや検索エンジンに利用できない ・別途プログラムを用意したりしなくて良い。 目安として 数ページなら一つのページにまとめてフレーム風に(今回のCSS) 数～数十ページなら、同じ項目はコピペ それを越えた場合や、動的に変化する場合はPHPやPerlやRubyを使用 　　単に同一コンテンツだけの場合はわざわざ使わない CSSをframeset風に書き換えると [test.css] @charset "Shift_JIS"; html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6,p{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:470px;max-width:900px;margin:0 auto;padding:5px;} div.header{height:100px;} div.section{position:relative;} div.section div.nav,div.section div.aside{font-size:0.9em;} div.section div.nav{position:fixed;top:110px;width:100%;left:0;} div.section div.aside{position:absolute;top:0;width:150px;height:100%;padding:0 5px;} div.section div.aside{right:0;} div.section div.section{width:auto;min-height:400px;min-width:0;margin:0 160px;} div.section h2,div.section p{margin:0 160px;} div.section div p{margin:0;} div.section div.nav ol{width:90%;margin:0 auto;padding:0;} div.section div.nav ol li{width:150px;list-style:none;line-height:2em;text-align:center;} div.section div.nav h3{display:none;} /* 色分け */ body{background-color:gray;} div.header{background-color:aqua;} div.section{background-color:white;} div.section div.section{background-color:transparent;} div.section div.aside{background-color:lime;} div.section div.nav ol li{background-color:silver;} div.footer{background-color:fuchsia;} #section2{background-color:yellow;} #section1{background-color:orange;}
間違えた div.section p.sample.word-wrap{ word-wrap:break-word; background-color:yellow; } div.section p.sample.word-break{ word-break:break-all; border:solid red 1px; }
＞という認識であってますでしょうか？ 　プロパティには継承されるものと継承されないものがあります。 　borderやwidthは継承されません。 　line-heightやtext-align、font-familyなどは継承されます。 　　とは言っても常識的なものですね。 　　bodyに枠をつけたら子孫要素にすべてborderがつくわけない 他人に薦めている＝私自身が役立ったと思う仕様書は HTML 4.01 仕様書邦訳( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　特に「5 セレクタ」「6 プロパティ値とカスケーディング、継承の割り当て」 HTML5,CSS3に比較してずっと簡単ですからね。 その後、HTML5なら、その上で HTML 5 differences from HTML 4( http://www.html5.jp/trans/w3c_differences.html ) とか・・
何をやろうとしているのかよくわかりませんね。 そもそも、「すべてのモニターで写真が切れずにぴったりフィットする」というのはどういう状態をお考えでしょうか？ 少し考えると、技術云々ではなくそんな状態はあり得ないとわかります。 このサイトは動画1つと画像2つの合計3つが切り替えられていて、画像はどちらも背景画像になっており、ブラウザの横幅のサイズによって幅に合わせて縮小し、ある程度の狭くなると画像サイズは固定され左右が切れるようになっています。 これを左右が切れないようにしたとすれば、当然縦がウィンドウいっぱいいっぱいにはならず下に隙間ができます。 また、ウィンドウ幅が大きい状態で見ている場合も、「写真が切れずにぴったりフィット」しているわけではなく、当然画像の下部分は切れています。 「すべてのモニター（ウィンドウサイズ）で写真が切れずにぴったりフィットする」というのは、要は「ウィンドウサイズに合わせて縦横の比率を変える」という事ですので、当然閲覧環境によっては縦や横にみょーんと伸びた画像になります。 それがやりたいわけではないですよね？ ですので、コードやプログラミングで出来るかどうかと言うよりも、「そんな状態ないです」と言うのが答えです。 そもそも、このテンプレートはウィンドウ幅によってレイアウトが変わる「レスポンシブデザイン」で出来ていますので、このテンプレートを選択した上で、別の端末で同一の表示をさせると言う事自体ナンセンスです。 思っているデザイン・レイアウトを実現させる目的を考えて、どうすればその目的が達成できるか、端末（ウィンドウ幅）によってどのような表示が最適か、を考えて幅ごとにcssを書くのが最適でしょう。
これといって問題はありませんよー。ただ、SEO対策上最低限やっておきたいことの１つです。 Googleのペンギン＆パンダからSEOはコンテンツ重視になってますので ページの内容も考えて、ページ毎適切な説明文とキーワードを入れた方が良いと思います。 ただメタタグくらいでは大きな変化（効果）はありません。。。 （ページと関係ないワードばかりあったら問題ですが…） 各ページに読み込む形とのことですが部分部分でインクルードしている感じですよね <head> ～ </head> を1ファイルにしているのでしょうか？ この場合JSやCSSなど、ページによっては不要なファイルまで読み込みんでしまうと思うので、 あまりよろしくないかと。 インクルードさせるのであれば <?php require_once($_SERVER["DOCUMENT_ROOT"] . "/common/html/header.html"); ?> <?php require_once($_SERVER["DOCUMENT_ROOT"] . "/common/html/nav.html"); ?> <?php require_once($_SERVER["DOCUMENT_ROOT"] . "/common/html/footer.html"); ?> など細かくし、更新しやすくすれば良いのではとおもいます。
ブラウザの[表示]→[スタイル(シート)]→スタイルなし でご覧になると分かるように、普通に画像としてマークアップされています。スタイルシートで指定した背景ではない。 　その部分のソースを見ると・・ <div style="left: 3250px;" class="carousel_slide starting_slide positioned"><img style="width: 630px; height: 450px;" class="theme_image" src="https://33.media.tumblr.com/themes/screenshots/1 … alt=""></div>
　画像がそのページにおいて、主たる内容である場合は<img src="" width="" height="" alt="">で指定しなければなりません。 　そうではなく画像が背景の場合は、background-image:で指定します。 　これは、HTMLが守るべき目標に｛構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )｝があるからです。また、スタイルシートの概説( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )にも ・テキストを画像に置き換えて表現する。 ・余白制御のために画像を用いる。 　などは否定されています。 　ナビゲーションのリンクをボタンやアイコンの画像で表示するような場合は、<a href="/products">製品</a>として、スタイルシートで a[href="/products"]{display:inline-block;width:160px;height:80px;background:url(/images/icon/products.gif) no-repeat blue;}と指定する。 　アルバムのように画像自体がコンテンツである場合は、当然<img src="" width="" height="" alt="">で指定することになりますね。
https://www.google.co.jp/search?num=100&newwindo … jQueryで出来ますよ。 検索で丁寧に解説されたサイトが山のように出てきます。 多分、プラグインを探すまでもないかと思います。 ちょっと最初は戸惑うかも知れませんが、jQueryをサイトに導入して、数行だけJavaスクリプト（jQuery）の打ち込みをすることになるかと思います。 そして、HTML部分も多少のID要素やclass要素を追加することになるかも知れません。 とりあえず、検索に引っかかったわかりやすそうなサイトのソースをコピペして改造していけば、初心者でも導入できますよ。 分からないと思ったら、とりあえず「jQuery+○○」で検索です。この手の解説サイトはネットで飽和状態になってます。 ID要素、「＜div id="なんとか"＞いろいろ＜/div＞」とか Class要素「＜div class="なんとか"＞いろいろ＜/div＞」とかが jQuery（Javascript）とHTMLを繋ぐ鍵です。 難しくないので、とりあえず動くまで辛抱して勉強してみるのをお勧めします。 最初はスクリプトとか取っつきにくいですが、特にjQueryの構文だけで動くこういうエフェクトの場合は、やってみれば数学とかやるより遙かに楽だと思います（笑） ページの構成は、1ページ完結のトップページですね。 フレームなどで他のページを呼んでいる様子はないです。映像データとか画像データなどを除けば。（と言うことを聞かれてます？）
altタグはテキストの量・ｐタグのキーワードの量などアルゴリズムを解析して表示順位を決められます。 大量にネームしたところで、ペンギンアップデート以前のサイトが一気に除外されたような事になりますよ。 適切な対応をしましょう。 またHTML5　CSS3を　熟知してサイト作成に勤めましょう。 そんなに目先のテクニックでは、無駄です。
えっ？とは何ですか？ livedoorブログなら下記を参考にスタイルシートを記述できるんではないですか？ http://help.livedoor.com/blogroll/guide1037
CSS における width の % 指定は 親要素の content-width (width指定) を100%とした場合の相対値ですが、HTML全体の幅は border, margin, padding, width の和算で求められます。 親要素の border, margin, padding 値が 0 を超えていた場合、HTML全体の幅が 100% を超過するので横スクロールバーが発生します。 http://hp.vector.co.jp/authors/VA022006/css/box. … http://hp.vector.co.jp/authors/VA022006/css/visu … 対象の要素(#target1 とする)がbody要素直下に存在するなら、下記を指定すれば期待通りに動作すると思われます。 --- html, body { margin: 0px; padding: 0px; border-style: none; } #target { margin: 0px; padding: 0px; border-style: none; width: 100%; } --- # Re: umioyoさん
質問内容を伺う限りでは float が適切な気がしますが、いかがでしょうか。 http://jsfiddle.net/cjq0zc6g/1/ --- .navi { display: block; width: 600px; margin: 1em auto; padding: 0px; color: #F00; } .navi li { float: left; display: block; margin: 0px; width: 288px; border: solid 1px #CCC; } ---
　画像があるべき場所で、右クリックして［画像だけを表示］もしくは画像の情報を確認すると、想定とは異なった画像のパスになっているはずです。 　javascriptを使用すると、そのページの位置からのパスになりますから階層が変わると当然見つけられない。画像へのパスをサーバーのルートから、あるいはネット上のパスにすれば良いのでは 　='img/*** ↓ 　='/img/*** または 　='/http://hoge.com/*** スタイルシートを利用するのでしたらスタイルシートからのパスになる。 　
ちゃんと検索エンジンでも分かるように---単なる外部へのリンクではあるけど---きちんとHTML書かないとまずいですよ。 <div class="nav"><!-- ナビゲーションだよ --> 　<ol> 　　<li><a href="">google</a></li> 　　<li><a href="">facebook</a></li> 　　<li><a href="">twitter</a></li> 　</ol> </div> HTML5ならら当然 <nav><!-- ナビゲーションだよ --> 　<ol> 　　<li><a href="">google</a></li> 　　<li><a href="">facebook</a></li> 　　<li><a href="">twitter</a></li> 　</ol> </nav> その上でjavascript使うなら <div class="nav"><!-- ナビゲーションだよ --> 　<ol> 　　<li><a href="" onclick="OpenWin(this.url);return false;">google</a></li> 　　<li><a href="">facebook</a></li> 　　<li><a href="">twitter</a></li> 　</ol> </div> とか、デザインはスタイルシートに任せればよい リンク先へのPATH_INFOはnameと値のペアをURLエンコードして&でつなげればよい。
参考のページの ■imgに埋め込んだclassを使って画像を中央揃えする方法。 にも、 「imgをブロック要素にしてからmargin指定を書くことで中央揃えに出来ます。（display:block;をmarginより先に書くのがコツ。）」 と明記されていますが、どうして削除したのでしょう？（蛇足：理解はしていないが解説してますてきなページなのでそのサイトで学習するのはお勧めできません。） ブロックレベル要素とインライン要素には、性質が大きく違いますので、これをきっかけに学ばれてはいかがでしょうか？ ちなみに、imgはインライン要素の中でも、インラインブロック要素というちょっと特殊な要素になります。 箱の中にビー玉を入れ、その箱を机の上に置くイメージをして下さい。 インライン要素への指定、text-align:centerや、left,rightはビー玉を箱のなかのどこに揃えるか（傾けるか）への指示です。箱の中でビー玉の数が多ければ左から右に上から下に詰まります。そしてその1列づつに対して右にするのか中央にするのか左にするのかの指示がtext-alignでの指定になります。インライン要素は通常高さや幅を持てません。画像タグを並べると文字のように並べられますよね。これが、インライン要素の特長で改行を含まない要素です。インライン要素は他にもa要素やstrong要素があります。 その箱の大きさを決めるのが、ブロックレベル要素へのwidthとheight となります。その箱の机に置く位置が、今回の場合はmarginとなります。左右ともautoなので中央というわけです。ちなみに、箱のwidthが決まっていなければ、中央とはなりません。width、marginの左右がautoのセットで、中央になります。箱の大きさが決まっていなければ何を基準に中央にすればいいのかわからないので当然ですよね。ブロック要素は通常前後に改行を含みます。見出しやp要素、箇条書き、表などもブロック要素です。 で、今回のimg要素は、インラインーブロック要素。外向きにはインラインで、内向きにはブロック要素となり、インライン要素の１つです。外部に対してはインラインなので画像を文字のように並べる事も可能ですし、内向きにはブロック要素なので、高さや幅を持て、paddingなども思った感じに効かせることが可能です。 上記を含めその他の特長は以下のページがまとまっているように思います。ブロックレベル要素とインライン要素はhtml+cssを理解するうえで重要な概念ですので、しっかり学ばれることをお勧めします。 ブロックレベル要素とインライン要素 - Web標準普及プロジェクト - もじら組 mozilla.gr.jp/standards/webtips0015.html
CSSのタイプセレクタはHTMLで言うと要素だけを書きます。 a.{text-decoration: none;} ではなくて a{text-decoration: none;} です。.はクラスセレクタでそれに続けてclass属性の値リストの中の一つを書きます。属性セレクタ E[class~=]と同じものです。 なお、a{}でしたら、a要素すべてに適用されますから、 a:link{}と擬似クラスをつけておくと、<a name="">には適用されませんから確実です。 これらは、 a:link{} a:visited{}　　リンク　と訪問済みリンク a:focus{} a[hover{}　　　フォーカスが当たっている物　ポインターが乗っているもの a:active{}　　　　　　　アクティブなリンク 　と組み合わせて使用することが多いです。その場合この順番で書かないと詳細度が同じですからうまく動作しません。 a:link{text-decoration:none;} a:link img{border:none;}/* 古いIE */ a:hover,a:focus{text-decoration:underline;position:relative;} a:hover:after,a:focus:after{content:"▼";position:absolute;top:-1em;right:0;} とか・・ ★CSS(カスケーディング スタイル シート)がここまで利用されHTML5ではデフォルトのスタイルシートになった最大の長所は、カスケーディング機能なのです。 　セレクタや、それによるカスケーディングの機能をしっかり身につけないとスタイルシートは使いこなせません。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　この二項目は、必須です。これをマスターするとまったく違う世界が現れますよ。
> ヘッター部分やフッター部分 というからには、「この部分をヘッダーにする」と決めている個所があるかと思われます。 以下、ヘッダーに対する手順を書きますが、フッターの場合も同様の手順でできるはずです。 （１）もしその箇所が複数の要素になっている場合、つまり、 ＜！－－ ここからヘッダー －－＞ 　……（何らかの要素）…… ＜！－－ ヘッダー終わり －－＞ となっていたならば、まずそこを header (HTML5 の場合)または div （既存の HTML の場合）で囲みます。このとき div の場合にはクラスとして header を設定します。 すでに上記のような状況になっている場合はそのまま次に進みます。 （２）上記で設定した header または div に対して CSS で背景色・背景画像を設定します。 たとえば背景色を赤にしたい場合は 　header { background-color:red; } または 　div.header { background-color:red; } となります。
phpのframeworkと言うと、 zendFramework fuelPHP drupal cakePHP Larvel くらいでしょうか。 http://www.google.co.jp/trends/explore?hl=ja&q=c … たしかに、google trends でみても、cakePHPですね。 利用したほうがやりやすいかどうか？ という意味で言えば利用者が多いほうがQAも揃っているでしょうし、なにかわからない時の対処法が得やすいのではないでしょうか？ 自分も過去、「流行りのframwork」に手を利用せざるをえない状況が有り利用しましたが、自力解決するしかない状況に陥り困ったことが有ります。 基本どんなフレームワークも海外で作られ伝わってくるものがほとんどだと思います。 新しいもののほうが処理が高速だったり、コードがわかりやすかったりする場合もありますが、 所詮どんなフレームワークも欠点もあり、ドキュメントを読むだけでは意味がわからなかったりします。 それを上回るだけのメリットがあれば別ですが、 何かあった時に解答を得やすい = ユーザーが多い フレームワークを選ばれる方が、賢明ではないでしょうか？
ブラウザのデフォルトの背景色が異なる。 <body style="background-color:white;">
＞テンプレートを利用して何ページか作っているのですが、 　それでは絶対に不可能!!根本的に間違っている。 　最初の最初からきちんと本道を歩むと、決して難しくもなんともない事です。 ＞　テンプレートをつかって文字を入替えるのはDTPです。　 絶対に理解すべきこと [HTMLはDTP( http://ja.wikipedia.org/wiki/DTP )じゃない] 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　なぜそうなのかは、HTMLが考案されたときのヒントになったのはSGML--背景( http://ja.wikipedia.org/wiki/Standard_Generalize … ) ★HTMLには文書構造だけを書きます。 　　文書を構成する要素(部品)をタグを用いてマークアップします。 　<h1>ここは見出し</h1><p>ここから新しい段落で、<strong>ここは重要</strong>なところ</p> 　 　とね。これをブラウザで見ると<h1>は大きな太字で、<p>で間隔をあけて改行され、<strong>は太字。スクリーンリーダーは<h1>ぱ男声の大きめな声で、<p>で間を空けて<strong>でアクセントをつけて・・・。それらの機能はHTMLを利用するソフトによるもので、HTMLがそれを指定しているわけではない。 　その上で、スタイルシートでscreenメディア(PCやスマホ)向けに、携帯電話向けに、あるいはプリンター向けにデザインして行きます。 ＞三本線のとこをクリックすると画像のようにメニューが出てくるようになっています。 　三本線らしきところはないし、メニューらしきものもないので分からないですが、はじめはデザインではなく、ひたすらHTMLをきちんとマークアップすることを身につけましょう。検索エンジンは無論、誰しもページのデザインでサイトを訪問してくれるわけではありません。決め手になるのは内容ですから。 　この説明の意味・・多分、急には理解できないと思いますので、(Chrome以外)のブラウザで下記サイトをご覧ください。　 ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) ・最初にHTMLソースを確認する。 ・次に、ブラウザの[表示]メニューから[スタイル(シート)]に進んで、色々なスタイルを選択してみる。 ・それぞれウィンドウ幅を変えたりフォントを大きくしたり小さくしたり ・印刷プレビューでプリントアウト時の状態を確認 　HTMLさえ、きちんと書けていたら後はスタイルシートで自在にデザインできるのですよ。
まずHTMLはstrictにして、DOCTYPEスイッチは標準モードで起動するようにすること 『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 →https://www.google.co.jp/search?q=DOCTYPE%E3%82% … 　これは、ブラウザ間の誤差をなくすための最低限の設定です。 ・tableなどのブロック要素は、align:leftでは移動してはなりません。 　古いIEや互換モードで動作すると、この誤った指定に従うことがあります。 　もちろんalignというプロパティはCSSにはありません。 　※ 全プロパティ表( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html )でチェックすると分かるように、tableはsummary属性が必須ですので、それを使って指定すると楽でしょう。 <table summary="日本の人口推移" border="1"> 　<tbody> 　　<tr><th abbr="2003">15</th><td>127,694</td></tr> 　　<th abbr="2004">16</th><td>127,787</td></tr> 　　<th abbr="2005">17</th><td>127,768</td></tr> 　　<th abbr="2006">18</th><td>127,901</td></tr> 　</tbody> </table> <table summary="男女の人口推移" border="1"> 　<tbody> 　<td></td><th abbr="男">男性</th><th abbr="女">女性</th></tr> 　　<th abbr="2003">15</th><td>62,368</td><td>65,326</td></tr> 　　<th abbr="2004">16</th><td>62,380</td><td>65,407</td></tr> 　　<th abbr="2005">17</th><td>62,349</td><td>65,419</td></tr> 　　<th abbr="2006">18</th><td>62,387</td><td>65,514</td></tr> 　</tbody> </table> とすると、table要素全体の指定を table{margin:3em auto;} /* タイプセレクタひとつのみ　詳細度0 0 0 1 */ そして、特定のtableだけ、左に寄せたければ table[summary="男女の人口推移"]{margin-left:0;} /* タイプセレクタ＋要素セレクタ　詳細度0 0 1 1 */ で、登場順に関わらず後者で上書きされます。 　誰が見ても表は中央、男女別の表は左寄せだと分かるでしょ。 ★余白をあけるために<br>の連続はしてはなりません。 ★セレクタや詳細度というカスケーディングを活用して、HTMLには余計な事は書かない。 　せっかくのCSS(カスケーディング スタイルシート)の根幹機能使いましょう。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　絶対にマスターすべきです。
＞と書き換えるのは、すごく大変な作業なので、その方法以外で今のままのHTMLで、CSSを書き換えるだけで ★必ず読んでおくこと→『構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　そして、このサンプルを確認する。 ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　　・(Chromeを除く)ブラウザで[表示]メニューから[スタイル(シート)]を選択してみる。 　　・印刷プレビューで印刷状態を確認 　　・ウィンドウの幅を変えたりCtrl + ＋/－で拡大や縮小してみる。 　　・HTMLソースを確認 『今のままのHTMLで、CSSを書き換えるだけ』には、このようにHTMLには文書構造だけが書かれていることが最大のポイントになるでしょう。HTMLの変更・メンテナンスも簡単。 ★アルバムのようなページでしたらHTMLは次のようになっているはずです。 1)画像とその説明が一つの項目であるリストでマークアップされているはず <dl> 　<dt>山中湖から望む富士山1</dt> 　<dd><img src="" width="" height="" alt=""></dt></dd> 　<dd>コメント</dd> 　<dd>撮影条件 　　<ol> 　　　<li>シャッター速度、絞り</li> 　　　<li>焦点距離</li> 　　</ol> 　<dd> 　<dt>山中湖から望む富士山2</dt> 　<dd><img src="" width="" height="" alt=""></dt></dd> 　<dd>コメント</dd> 　<dd>撮影条件 　　<ol> 　　　<li>シャッター速度、絞り</li> 　　　<li>焦点距離</li> 　　</ol> 　<dd> ・・・あるいは、 <ul> 　<li><img src="" width="" height="" alt=""> 　　　<p>コメント</p> 　</li> ・・・・ 　そのいずれであっても、可能になりますね。 補足 <img src="http:～.jpg" alt="～" title="～" border="0" width="600" height="294" /> 　borderは非推奨『推奨しない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　いまどき、/> XHTMLは使わなくて良いでしょう。 　『HTML5が持つ本当の意味( http://www.atmarkit.co.jp/news/200801/25/html.html )』 <div class="img-block"> 　class名は文書構造を示す物にしましょう。 　『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 .img-block { 　きちんと基点となるセレクタを書きましょう。CSS2以降はそうなりました。 　HTMLの要素にいちいちclassを付ける必要はありません。HTMLもCSSも煩雑になって「マウスオーバーで画像を拡大」という簡単なことすら面倒になります。 　きちんと子孫セレクタ,隣接セレクタ,子供セレクタなどを使用し詳細度によって適用させるようにしましょう。それがカスケーディングと言ってCSS(カスケーディングスタイルシート)の命ともいえる重要な基本というか、それがすべてと言っても良い。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) ★今のままのHTMLで、CSSを書き換えるだけで 　これはきちんとセレクタで指定すれば簡単だと思いますが、今までのHTMLの文書構造が分からないと回答のしようがありません。その要素を含むDOMを教えてください。 　firefoxだと「DOMインスペクター」 　
ちゃんとHTMLがマークアップされていれば難しくはないです。 a要素をサイズ指定のブロックにして並べればよいだけです。 ★デザインのためにHTML書かれている『構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )ができていない』と、悩むことになるかも・・・ <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="/Products/1">製品1</a> ＿＿＿＿＿<p>新製品です。</p> ＿＿＿＿</li> ＿＿＿＿<li><a href="/Products/2">製品2</a> ＿＿＿＿＿<p>この製品は当社のベストセラー・・</p> ＿＿＿＿</li> ＿＿＿＿<li><a href="/Products/3">製品3</a> ＿＿＿＿＿<p>ロングセラー商品で当社の基礎をつくった製品</p> ＿＿＿＿</li> ＿＿＿＿<li><a href="/Products/4">製品4</a> ＿＿＿＿＿<p>説明するまでもなく・・</p> ＿＿＿＿</li> ＿＿＿</ol> ＿＿</div> ＿</div> だとして、 div.header div.nav{サイズを指定して} div.header div.nav ol{位置を上の50%にしてtext-align:center;} div.header div.nav ol li{display:inline-block、幅を20%程度} div.header div.nav ol li a{display:block;にして背景画像をつけて} div.header div.nav ol li a p{その下に置く} ★リンクを ＿＿＿＿<li><a href="/Products/2"><img src="" width="" height="" alt=""></a> ＿＿＿＿＿<p>この製品は当社のベストセラー・・</p> ＿＿＿＿</li> のように書かれていたら、完全なリキッドに出来ますから、幅広ディスプレイでもスマホ縦置きでもデザインは崩れないでしょう。 ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) にて、[表示]→[スタイル]で、「画像の上に配置」が同様な方法が使われています。(Chromeは代替スタイルシートが使えないので他のブラウザで) 　ソースをご覧になると分かるように、HTMLに文書構造しか書いてないと、自在にデザインは可能なはずです。
名前はないでしょう。 ＞一般的なナビゲーションとは違う 　そうとは思いません。 　デザインが少し異なるだけです。 　それらのサイトflashを使っていたりCSSだったりjavascriptだったりするだけです。
input[type="text"] {height:30px;} input[type="submit"] {height:30px;} そりゃダメでしょう。行内ブロックとして扱われる物と行内要素として扱われる物。 どうしてもなら、 input[type="text"],input[type="submit"]{line-height:40px;} 同じ設定をするのなら統一部分は一つのグループに書くほうがメンテナンス楽になりますよ。 念のため input[type="text"],input[type="submit"]{line-height:40px;display:inline-block;} かな。
なにはともあれ、 ウェブマスター向けガイドライン( https://support.google.com/webmasters/answer/357 … ) をまずしっかり読んで理解してください。特に「 技術に関するガイドライン」と「品質に関するガイドライン」は・・ 　まずあなたの製作されたページをLynxなどで開いてみてください。それが、検索エンジンが見ているあなたのサイトの姿です。 　また、どこが本文(section)でどこが関係ない記事(aside)やヘッダ(header)やフッタ(footer)で、どこがナビゲーション(nav)なのかが、きちんとマークアップされているかも確認してください。これらのclass名はGoogleは理解しているようです。重要な語句はちゃんと<strong></srong>でマークアップするとか・・。 　DTP・・・デザインは検索エンジンにも訪問者数にも一切関係ないです。大事な事は、内容・・ 『どうすれば自分のウェブサイトが独自性や、価値、魅力のあるサイトといえるようになるかを考えてみる。同分野の他のサイトとの差別化を図ります。( https://support.google.com/webmasters/answer/357 … )』 　それによって、他サイトから自然な自発的なリンクが増えるのが一番です。また検索エンジンででてきてとしても、そのページに進んで、すぐ次のページに進むようでは、検索エンジンの結果順位は日々下がっていきます。 ＞内容を咀嚼できてなくて分かりにくいからだと的外れなことを言います。 　この言葉の主語が検索エンジンでしたら、的外れではない。 「検索エンジンが内容を咀嚼できてなくて分かりにくいから」 ＞内容の変わらない企業のサイトのためある程度はしかたないですが、 　それであっても、この分野の説明や解説はどの競合サイトにも負けないページがいくつかあれば、それが引き金となるでしょう。すべてのページがランディングページとして機能するように・・ 　
F12押すと大体のブラウザは開発者ツールが開くからそれで見てみるといいよ。 Canvasを使ってるみたいね。
＞borderが継承されないと言う点は理解しているのですが、<table>に対して指定したclassがその下に位置する<td>に継承されないという点で困っております。 　それは「継承」ではありません。 ★それは、tdに指定したスタイルが適用されないという事です。 　　カスケード処理の順序( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) table.sample td{} は、 ・class属性の空白で仕切られた値リストの一つにsampleを持つtable要素の子孫であるtd要素という意味です。詳細度は[0 0 1 2]＝12です。 　これが適用されないと言う事は、 ・より高い詳細度の指定がある。 　　一意セレクタ[0100]とか、スタイル属性[1000] 　　より詳細な記述がある。body div.section table td [0 0 1 4]、 ・同じ詳細度で後述の指定がある。 ・HTMLの文書構造かセレクタの記述に誤りがある。 　の何れかでしょう。 　Web開発されているなら、開発者ツールが豊富なfirefoxお使いだと思いますがそのアドオンにFirebug( https://addons.mozilla.jp/firefox/details/1843 )があります。それでスタイルが適用されない要素を選択すると、カスケードの順番に従ってスタイルが明示されます。 　それを使うのが、最もよくわかる。
HTMLを <div id="container"> 　<div id="main"></div> 　<div id="leftside"></div> 　<div id="rightside"></div> </div> のように、関係ない事を書くからこんなことになる。 スタイルシートでデザインする最大の目的は ★構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) です。ここを読むと、失敗の原因が分かりますよね。 1) HTMLは、タグを使って文書構造をマークアップするもの!! 　<h1>ここは見出し</h1><p>ここから一つの段落</p>とね!! 　何のためかは、SGMLの背景( http://ja.wikipedia.org/wiki/Standard_Generalize … )を読むと良く分かるでしょう。 　HTML4.01でも、「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」とされていました。 　★残念ながらこの大事なところを見落としている人があまりに多かった反省から、HTML5では「文書をよりよく構造化するために、新しい要素が追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」 2) すなわち、header,section,nav,footer,asideなど・・ HTML4.01なら 　<div id="header"></div> 　<div id="section"> 　　<div class="nav"></div> 　　<div class="aside"></div> 　</div> 　<div class="footer"></div> HTML5なら、とうぜん 　<header></header> 　<section> 　　<nav></nav> 　　<aside></aside> 　</section> 　<footer></footer> となるはずでした。 HTML4.01の勧告が1999年(15年前)なのに、未だにletsideはないでしょう。 2) その上でスタイルシートで 　sectionの両サイドにnavとasideを置く。 　いやnavだけ左において、asideは下に 　スマホはasideは表示させない。印刷時はコラムで枠で囲む 　とかデザインすれば良い。 　なお、floatは、ブロックの配置には使わないほうが無難です。必ずトラブルの元になる。floatは画像の周囲にテキストを回りこませるなど本来の目的で使用する。 ★印象的なサンプルを上げておきます。 　あわせて、ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … )を参考に 　・ブラウザの[表示]メニューからスタイルシートを選択する。ウィンドウ幅を変えたり印刷プレビューも試すと良い ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　で検証済みのHTML4.01+CSS2.1です。 ★タブは＿に置換してあるので戻す。 ★たったこれだけで良いのですよ。ナビを左右いずれにも変更できるし、印刷や携帯電話には適用されないし・・ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:470px;max-width:900px;margin:0 auto;padding:5px;} div.section{position:relative;} div.section h2,div.section p,div.section div.section{margin-left:200px;min-width:0;width:auto;} div.section div.section{min-height:300px;} div.section div.section p{margin:0;} div.section div.nav{position:absolute;top:0;width:190px;font-size:0.9em;height:100%;} div.section div.nav{left:5px;} /* 分かりやすいよう着色 */ body{background-color:gray;} div.header{background-color:aqua;} div.section{background-color:white;} div.section div.section{background-color:silver;} div.nav{background-color:lime;} div.aside{background-color:yellow;} div.footer{background-color:orange;} /* 本文の内容を追加して変えたければ下記のコメントを外す */ /* div.section h2,div.section p,div.section div.section{margin-right:200px;} div.section div.aside{position:absolute;top:0;width:190px;font-size:0.9em;height:100%;} div.section div.aside{right:5px;} */ --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li>あいうえお</li> ＿＿＿＿<li>かきくけこ</li> ＿＿＿＿<li>さしすせそ</li> ＿＿＿</ol> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<h3>補足記事</h3> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
>>タグうち メモ帳で始めた夢のウェブクリエイターへの道。まだ何から勉強したらいいかわからず検索をしてみると『サイトの模写』とありました。そこで質問です。具体的に何をしていくのでしょう。 「夢のウェブクリエイター」ってのは幻想ではないですか？ アニメ業界でも、「夢のアニメータになりたい！！」って人は多いようですよね。子供達に夢を与える仕事ですし、エンドロールに名前が出たりして、自分の子供や孫などに「これ、おれの作ったアニメなんだよ！」と自慢できたりします。でも、現実は、不安定で収入が低い仕事でもあります。（アニメータさんの描いたマンガ「アニメがお仕事！」は主人公のおかれている状況が辛くて読むのが苦しくなったりしました・・・） >>根本的かつ基本的な質問で恐縮ですが、よろしくおねがい致します！ それを問うなら、自分のやりたい仕事はどんなものか？その自分の想いと実際のウェブクリエイターの仕事は一致するのか？を最初に調査・確認すべきではないかと思います。 目的を明確にしないまま、手段であるHTMLとかCSSの勉強にのめり込んでいくと、「手段の目的化」となってしまいますよ。 ちなみに、Webの世界に限りませんが、IT業界は技術進歩のスピードが速いです。一生懸命にCSSの技術を覚えたけど、別のアプローチから、LESSやSassなどのCSS拡張メタ言語が利用されています。 これを使うと、CSSの記述が３倍速くなるといわれたりしています。 また、ホームページ・ビルダーみたいに、ワープロ感覚でサイトが作れるCMSソフトもあります。 もちろん、HTMLやCSSの知識を得るための勉強はある程度は必須でしょうけどね。 でも、例えば「一戸建ての家を得る」という目的があるとき、「建築設計師や大工さんの勉強をして自分で建てる」という方法もあるけど、お金を貯めて「その道のプロにお願いする」という方法を普通はとります。 苦労の末に「ウェブクリエイター」といわれる職についたけど、安い給与の派遣だったり、仕事がもらえず稼ぎが乏しい自称「ウェブクリエイター」の自営業ということもありえます。 まあ、いずれにしても、「サイトの模写」とか、タグ打ちの勉強も大切でしょうが、サーバとWEBシステム、ブラウザの関係など、大きな枠組みを学んだほうがいいと思いますよ。 HTMLやCSSが全く判らないでも、LinuxサーバやApache、Database,それにCMSソフトの知識さえあれば、そこそこのWebサイトが簡単にできあがります。さらにPostfixやDovecotの知識があれば、メールサーバも構築できたりします。ここまでくれば、「おたくの会社のサイトを作ってあげますよ。」なんて商売ができるかも？しれません。 自分の長い将来を考えるなら、もうすこし業界全体像と自分自身のやりたいことを考える時間をとったほうがいいと思います。
ol#filters,ol#filters li{margin:0;padding:0;line-height:1.6em;text-align:center;} ol#filters li{display:inline-block;paddig:0 1em;}
#container_aと#container_bを囲う1000pxのラッパーを追加してはいかがですか？ #container_wrapper{ width:1000px; margin:0 auto; } さらに#container_a と　#container_b　にはfloat:left;が必要ですね。 floatさせた場合、親となるボックス（#container_wrapper）の高さが思い通りに ならないことがありますのでclearfixを使うか、簡単に済ませるならoverflow:hiddenを入れるなど。
やはりよくわからないのですが・・ 結論から言うと、 10.5 内容の高さ: 'height'プロパティ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 『このプロパティはボックスの内容幅を指定する。』 headerのサイズはfixedやabsoluteでウィンドウの高さを参照しますが、そうでない要素はウィンドウの幅を参照します。 　そのため、親(articleやbody)以降のpaddingにしろ、それに引き続くsectionにしろ、サイズを指定しようとすると幅になってしまいます。 　全体をboderで囲むのは先に示したサンプルで可能ですが、読み込み時に続く要素をぴったりとheaderにつなげるのは不可能です。
「ソースの#borderで全てを囲むボーダー線は出せないのか」ということですが、先の私の書いたhtml/cssで実現してません？私がしたことは#borderを.wrapperに変えただけです。 他回答者さんが「デザインの為にhtmlは書かない」という話があったので、.wrapperを削る場合は以下のようになると思います(これに関しては単に.wrapperっていう名前が悪いだけで、#mainとかいう名前だったらいいんじゃないのかなとか個人的には思うんですが・・・)。 とにかく、以下のポイントが分かればどのような書き方もできるんではないでしょうか？ ・height:100%はブラウザウィンドウのサイズに対して100%で固定。 ・min-heightは可変だが最低限の高さを指定する。 ``` <!DOCTYPE html> <html lang="ja"> <head> <meta charset="UTF-8"> <title>Document</title> <style> html, body{ margin: 0; } html{ height: 100%; } body{ min-height: 100%; box-sizing: border-box; border: solid 5px red; } .footer{ height: 50px; background-color: lightgray; } .section{ height: 0;/*500pxとかに変えてみて*/ width: 100%; border: solid 5px blue; } </style> </head> <body> <div class="section">Hello1</div> <div class="section">Hello2</div> <div class="section">Hello3</div> <div class="section">Hello4</div> <div class="section">Hello5</div> <div class="footer">コンテンツが足りなくても、html,body{height:100%}と、ここがせり上がらない。</div> </body> </html> ```
一つ訂正です。 Windows phoneやストアアプリにも対応しているようですね。 ということで、Windowsはインターネットエクスプローラーのエンジンなので-oや-mozはいりませんが、場合によっては-msがいるものもあるかもしれません。
■質問１ <?php the_permalink(); ?>を<?php bloginfo('url'); ?>/test/ に変更すれば意図したカテゴリーへリンク出来ますが、この方法で正しいのでしょうか？ 「カテゴリーのアーカイブへリンク」でしたら、もしアーカイブのパーマリンク形式がそうなっていれば、別に固定urlでも構いません。 わざわざ絶対リンクになる<? bolog_info() ?>使わなくても、単に"/wp-name/bcategory-name/ でOKです。 要はパーマリンク設定や、サイト設定に左右されずに、正しいurlを得るのがベストなんだけど、最初から決まっていて変えないのなら固定でもOKよ、というだけです。 ■質問２ 「アイキャッチに対応した記事」 書き方があいまいで意味不明ですが、「アイキャッチつき投稿のみ表示」ということでしたら、ループ中で <?php if ( has_post_thumbnail() ) { the_post_thumbnail(); } ?> で判定してやればOKです。 ■蛇足 特定カテゴリの記事をループで表示する程度でしたら、query_poosts()だろうが、WP_Query()だろうが、ほとんど違いはありません。 どうせ中でWP_Queryに変換されているだけなので
　基本中の基本で、borderなどのプロパティに取り掛かる前に、最初にきちんと身につけておかないと、class="bordercolor_white"というclassを書いてしまうとんでもない事をしてしまいますよ。 ★HTMLは文書構造だけを記述する。プレゼンテーションに関わる物は書かない。 　プレゼンテーションに関わる要素、属性は廃止される。 　『スタイルシートによる代替が可能なHTMLのプレゼンテーション属性は、推奨しないこととなった。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　まずclass名ですが、これはDIVやSPAN要素に対しての『id属性及び class属性と併用することで、文書に構造を付加する』と同様にデザインのためではありません。たとえば将来枠線を黒くしたい時にHTMLを書き換えなければならなくなる。 [例] <table summary="50音" borcer="1"> <!-- HTML4.01ではsummaryは必須、HTML5では任意、固有のsummaryがあれば、文書構造は明確になるのでidやclassはなくても良い --> 　<tboby><!-- 原則は必須、<thead><tfoot>もなく、本体が一つしかないときは省略できるが書いておいたほうが先で<tbody><thead><tffot>を追加したりするときに楽 --> 　　<tr> 　　　<th abbr="あ行">あ行</th> 　　　<td>あ</td><td>い</td><td>う</td><td>え</td><td>お</td> 　　</tr> 　</tbody> </table> <table summary="アルファベット" borcer="1"> 　<tboby> 　　<tr> 　　　<th abbr="A～E">A-E</th> 　　　<td>A</td><td>B</td><td>C</td><td>D</td><td>E</td> 　　</tr> 　</tbody> </table> というふたつの表をHTMLでマークアップする。 　(注意)スタイルシートの説明を読んでいると、こうデザインするためにはHTMLにleft-menueとclass名をつける・・・なんて書いてありますが、それは説明のためです。 　本来はナビゲーションは左に配置する場合、事前にHTMLでは<div class="nav"></div>とclass名を使ってマークアップされているはずですので、div.nav要素は左に配置するにはスタイルを下記の様に記述する。・・でなければならない。 　そうするとHTMLもスタイルシートも、とっても楽になります。 ★CSS(Cascading Style Sheets)の命ともいえるカスケーディング(Cascading)は正確にマスターしましょう。この知識なしでは、CSSは使えません。 ・5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) ・6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 上記の例ですと、５０音の表は赤枠で、アルファベットの表は青枠でしたら table,th,td{ border:solid 1px black; border-collapse:collapse; } /* 意味は、table th td タイプセレクタ　詳細度は0 0 0 1 */ table[summary],table[summary] th,table[summary] td{border-width:2px;} /* summary属性を持つtable、その子孫のthとtdは枠線の太さは2px、他の属性はカスケードされる。なぜなら、詳細度が それぞれ、0 0 1 0、0 0 1 2、0 0 1 2 ですから */ /* 半角スペースは子孫セレクタです。 */ table[summary="50音"],table[summary="50音"] th,table[summary="50音"] td{ border-color:red; } /* これでsummary属性の値が50音のtableとその子孫であるth,tdは枠線が赤くなる */ table[summary="アルファベット"], table[summary="アルファベット"] th, table[summary="アルファベット"] td{ border-color:blue; } /* これでsummary属性の値がアルファベットのtableとその子孫であるth,tdは枠線が青くなる */ 　先で色を変えたくなってもHTMLに手を加える必要はない。 　他にも様々なセレクタの書き方でスタイルを適用したい要素は指定できます。 table[summary]td+td{background-color:yellow;} /* 2升目以降は黄色 */ table[summary]td+td+td{background-color:lime;} /* 4升目以降はライム */ 　　、 　
単純にそのセルの幅を一文字とか入らないようにすればよいだけです。 下記にサンプル上げておきます。 ※なお、文書の整形のためにtableは使用してはなりません。スタイルシートを使用しましょう。 『単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　table使わないほうが、はるかに楽ですし。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATA入力でチェック済みのHTML4.01strict+CSS2.1 ★印刷時には適用されません。 　印刷プレビューで確認 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} /* 色分け */ body{background-color:gray;} div.header{background-color:aqua;} div.section{background-color:white;} div.footer{background-color:fuchsia;} table[summary="都道府県"]{ width: 50%; margin:0 auto; border-collapse:collapse; } table[summary="都道府県"],table[summary="都道府県"] th,table[summary="都道府県"] td{ border: 2px #2b2b2b solid; } table[summary="都道府県"] th,table[summary="都道府県"] td{ padding:0.5em; } table[summary="都道府県"] th{ width: 2em; } table[summary="都道府県"] td{ min-width:5em; } table[summary="都道府県"] td+td{ text-indent:1em; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<table summary="都道府県" border="1"> ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="北海道">北海道</th> ＿＿＿＿＿<td>北海道</td> ＿＿＿＿＿<td>47都道府県中、唯一の「道」で、道庁所在地は札幌市である。</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th rowspan="6" abbr="東北">東北地方</th> ＿＿＿＿＿<td>青森県</td> ＿＿＿＿＿<td>日本の本州最北端に位置する県である。県庁所在地は青森市。</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>岩手県</td> ＿＿＿＿＿<td>東北地方に属する日本の都道府県の一つ。県庁所在地は盛岡市。</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>宮城県</td> ＿＿＿＿＿<td>東は太平洋に面し、西は奥羽山脈に接する。県庁所在地は仙台市。</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>秋田県</td> ＿＿＿＿＿<td>日本の東北地方の県のひとつで、日本海に面する。県庁所在地は秋田市。</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>山形県</td> ＿＿＿＿＿<td>日本の東北地方南西部の県。日本海に面する。県庁所在地は山形市。</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>福島県</td> ＿＿＿＿＿<td>東北地方の南部に位置する。県庁所在地は福島市。</td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿</table> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2013-03-03 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
えー、かなりぼっこぼこにされちゃったようなので少し助け舟。 基本的な話をします。 あなたがフリーランスである以上、客のサーバを代理で借りる事はありませんし、 その費用負担をする事もありません。 （そこまでセットでやる会社は存在しますが、ここでは割愛します） あくまでも客のサーバの上にサイトを構築するのが普通です。 でも、客側に知識が無い事もあります。 そんな場合には、いくつかおすすめを出し、選んで契約してもらいます。 ここで重要なのは、あなたが決めない事、そしてあくまでアドバイスであって責任は持たない事。 （でなければトラブルがあった場合にあなたにクレームが来てしまいます） そこまで知識の無い客であれば、サーバだけでなく、ドメイン取得も分かってない可能性がありますので、 その場合にはそこもアドバイスしてあげます。 これらにかかった時間は作業と看做し、制作費に上乗せして請求します。 （あくまで作業費であってサーバの費用は関係ありません） ではあなたはサーバを持たなくていいか？というとそんな事はありません。 テストアップしなければいけないからです。 まともな客であればテスト環境も自前で持っていますが、 恐らくあなたに依頼をする客は持っていない事がほとんどでしょう。 この費用はもちろんあなた自身が負担します。 その客の為に持つのではなく、WEBデザイナーとしてのあなたの道具ですから。 このサーバはどこが良いのか？これも実は答えはありません。人によって異なるからです。 しかし、少なくとも一般的な構成であること、ある程度の自由度があることが必須になります。 例えばhtaccessが使えるか、cgi、phpやperlが使えるか、SQL関係はどうか、WordPress（以下WP）やMovableType（以下MT）は、マルチドメインは、などなど。 よく聞くところで言えば、 さくらインターネット http://www.sakura.ad.jp/ エックスサーバー http://www.xserver.ne.jp/ あたりでしょうか。 客にすすめるとしてもまずはこの辺でしょう。 普通のサイトも作れるし、MTやWPなどのCMSを入れて更新性の高いサイトも作れます。 （CMSを入れる場合はあなたの方にもその知識が必要ですけどね） サービス系はあなたの手に余るので、話が来たら断った方が良いです。 他にも注意事項は沢山あるのですが、最後にひとつだけ。 ど素人の客は出来るだけ避ける事。 何故か？作業の価値を理解してもらいにくい＋一度仕事すると手離れが悪いからです。 そういう客を悪く言うのではありませんよ。仕方ないんです。 でも、相手をする側としては、これほどやっかいな客もいません。 そういう客には、まず軽はずみな気持ちでウェブサイトなんて持ってはいけない事を説明します。 ウェブサイトの戦略、人員を計画的に考え、十分な投資が出来る状況でなければサイトなんてもつべきではない。 どうしても何かやりたいなら飲食店ならぐるなびや食べログでページを持てば良いし、 ショップなら楽天、一般企業ならFacebookで十分です。
他のお答にもある様に、深く悩む理由が分からない、 仕事がキツくて精神科のお世話になるのは困るが、若いんだし目標もある、 次のソフトバンクはあなたが作るのかも知れない。 そのくらいの夢を持とう。
今のやり方で問題ないです。 まとめる方法も特にありません。 3つのaではなく、a , a img , a.noline とそれぞれ別の指定ですので。 何かあるとすれば、下記の記述を1の方が言うようなスマートな書き方にする事でしょうか。 a.noline { text-decoration: none; } ただ.nolineのように、文書的な意味は無いものの一つの指定を色々な場所で使いまわせるclass指定を多用する方法は「オブジェクト指向CSS」と呼ばれる立派なテクニックです。 html・cssの理想とは違いますが、ひとつのサイトを多人数で管理する場合などに便利で、プロもよく使っています。 1の方が言う、まずはhtmlとcssの基本をしっかり学べというのにはある程度同意は出来ますが、職業にでもしない限りそこまで厳密にやる必要はありません。 私が気になるのは、今のままではマウスオーバーが分かりづらい事ですね。 下記のようにすると、普段は下線が無く、マウスオーバー時に下線が復活するので、少しユーザーに優しいサイトになります。 a.noline:link, a.noline:visited{ text-decoration: none; } a.noline:active, a.noline:hover{ text-decoration: underline; }
質問がありますって言ってるけど、これ１．２．３の通りに作ってってのと一緒だよね。 lancers.jp このあたりで依頼出せば3,000円くらいでやってくれるひとがいると思うよ。
こんな感じでいいですか？ <!DOCTYPE html> <html lang="ja"> <head> <meta charset="utf-8"> <style type="text/css"> body{margin:0;padding:0;} #wrap{ width:100%; width:100%;} #header{ width:100%; height:145px; background:#fcc; position:fixed; top:0;z-index:10;} #nav{ width:100%; height:69px; background:#ccc; position:absolute; bottom:0;} #a{ width:100%; height:522px; background:#ccf; margin-top:150px;} #b{ height:758px; background:#cff; padding-top:44px; padding-left:24px; position:relative;} .c_box{ width:332px; height:328px; border:1px solid #000; padding:6px 15px 20px -25px; } #c1{ position:absolute; left:0; bottom:0;} #c2{ position:absolute; right:0; top:0;} #footer{ height:100px; background:#fac; } </style> </head> <body> <div id="wrap"> <div id="header"> header <div id="nav">nav</div> </div> <div id="a">a</div> <div id="b" class="box">b <div class="c_box" id="c1">c1</div> <div class="c_box" id="c2">c2</div> </div> <div id="footer">footer</div> </div> </body> </html>
されたいことが理解できていないのですが・・ イメージで上げられた形は ┌──┬──┬─────┬──┬──┬───┬──┬──┐ │html│css │javascript│php │CGI │Python│Ruby│java│ └──┴──┴─────┴──┴──┴───┴──┴──┘ なのですが、どのようにアコーディオンするのですか・・ 　それぞれに二階層目のリストがあって ┌──┬──┬─────┬──┬──┬───┬──┬──┐ │html│css │javascript│php │CGI │Python│Ruby│java│ └──┼──┴┬────┴──┴──┴───┴──┴──┘ 　　　│CSS2.1│ 　　　├───┤ 　　　│ CSS3 │ 　　　└───┘ と開くのか。
＞ブラウザ ブラウザのツールバーから「表示」「エンコード」「Unicode(UTF8)」を「日本語（自動選択）」に変更
＞body要素直下出なければインライン要素はブロック要素で囲まなくても良いのですか？ 　ですから、ちゃんと読まないと・・ <body> 　<strong>ここは大事です。<a href=""><img src="" width="" height="" alt=""></a> </body> はダメです。なぜなら<strong><a><img>すべて行内要素ですからね。 ★BODY要素内にはブロック要素しか置けない≠画像はブロックで囲まないとならない 　この二つ、まったく意味が違いますよ。 　画像の前後を<p></p><div></div>で囲めばよいとも違いますね。 ★「構造とプレゼンテーションの分離」の良いサンプル Chrome以外の代替スタイルシートが利用できるブラウザで 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　に行って、表示→スタイルシートへ進み、色々なスタイルを選択してみてください。ウィンドウ幅を変えてみたり、印刷プレビューを確認しても良いです。 　スタイルシート無しで画像の読み込まない状態が検索エンジンが理解するページです。SEO的にも完璧 　あわせて、このページをAnother HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html )でチェックしてみても良いでしょう。 　文書構造(HTML)とプレゼンテーション(スタイルシート)が独立していますから、HTMLの変更も、デザインの変更も楽です。気が向いたときにデザインを自由に変更できる。 　たぶん、ウェブページの作成方法、スタートを間違えられて？？、沢に迷い込まれてらっしゃる。スタート時点に戻って本道を歩まれるほうが、はるかに早く簡単じゃないかと。やがてHTML5の時代が来ます。HTML5は、文書構造とプレゼンテーションは完全に分かれています。 HTML4.01の勧告時の予告参照!! 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 推奨しない 　推奨しない要素・属性とは、新しい枠組みができたことによって、陳腐化したものを指す。推奨しない要素は、リファレンスマニュアルの各所で定義し、推奨しないことを明記する。推奨しない要素は、HTMLの将来のバージョンでは廃止になる可能性がある。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Conformance: requirements and recommendations (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　皆が通ってきた道です。頑張ってください。私は15年前、50代にHTML書き始めました。そして、このような壁に何度もぶつかりました。 　一度HTML4.01の仕様書を通しで読んで置かれることをお勧めします。 　そのほうが、絶対に早いですし簡単です。 　 　
確かにウチの環境でもずれています。 .footer-nav li { の要素に white-space: nowrap; margin: 0 0.5em; を入れたみたらどうでしょうか。 0.5emの部分は、まあ適当に調整するとして、ですけど。
　ホームページではなくウェブサイトを作られて、そのトップページではなく、会社概要のページが出てしまうということですね。 　そのページに <meta name="robots" content="noindex"> 　なお、検索エンジンは、作者のためではなく、検索するユーザーのためにある。 　中身のないトップページよりも会社情報のページのほうが価値があると見られているのでは(^^)実際にそうかもしれない。 　よって、どのページであっても、ランディングページとして機能するようにすればよいのですが。
そのうち間違いは見逃していましたが結局 接続先URLはhttp://localhost/wordpressだと思います。 こちらに接続するとどうですか？
<div class="hoge"><img （画像）></div>……【原型】 とのことですね。 img.hoge { /* hogeクラスのついているimgという意味です。 <div><img （画像） class="hoge"></div> なら、効きます。 【原型】hogeクラスの中の要素なら .hoge img と書がなくてはなりません。 スペースで開けると子孫を意味します。 もし、直下の子どもだけなら.hoge>imgとなります。 */ float: left; height: 100px; } よくある一覧表では、前者はE.Fと表され、後者はE　Fと表されます。直下の子どもならE>Fですね。とっつきやすそうなセレクタの一覧表を紹介します。実験だけではなかなかわからないので、説明書・解説書などを見ておくと理解が速いと思います。 http://zero.css-happylife.com/selectors/ http://www.tohoho-web.com/css/selector.htm
ものさしで計られると分かると思いますが、実際には縮小されて表示されていると思います。 Viewportで、なにも指定していなければ、スマホの解像度は高いので小さくなっているはずです。 　本来は1pxは約0.26mmですから200pxと指定してあれば、パソコンでは52cm幅ですが、スマホでは26cm程度になっているはずですが？？？ 　そのために、幅広固定で小さい文字で作っているとスマホでは読めない。 　スマホもパソコン用も同じデザインでしたら、当然リキッドでデザインされていると思いますから、通常は半分の実サイズで機種のデフォルトのサイズ、980px(PC用490px)とかでしたらそのサイズまでは文字は小さくなりますが表示されるはずです。 　それを避けたければ <meta name="viewport" content="width=device-width; initial-scale=1.0"> とviewportで縮小しない用に設定しておきます。 ★mediaqueryにしろviewportにしろ、あくまでページがリキッドで製作されていることが大前提です。 header,section,footer{width:100%;min-width:630px;margin:0 auto;max-width:980px;} header h1{width:100%;background-image:url();background-size:cover;} と言う風に・・
あくまでユーザー依存です。ユーザーが好きなように・・ 　とりあえず、さきに本文は一通り読むならリンクのコンテキストメニュー(その場(コンテキスト)で可能なメニューを右クリックで選択して（リンクを新しいウィンドウで開く）を選択されるでしょう。 私は、 「今読んでいるページを最後まで読みたいが、とりあえず参照先は後で読むために新しいタブで開いておこう」と思ったときは、リンクをセンターボタンでクリックすると、フォーカスを移動せずにバックグラウンドでタブが開く設定にしています。「内容によったら知りたいことがリンク先」と思ったときは、そのページを読むのを中断して左クリックでリンク先に移動します。 ※私は、firefoxですが、そのアドオン Tab Mix Plus( https://addons.mozilla.jp/firefox/details/1122 )で動作指定しています。 　これは、あなたが本を出版したときと同じです。 ＞今は、私のページを最後まで見てほしいというのが願いです。 　それは傲慢と言うものです。 ★著者が、前書き、目次、１ページ目からきちんと読んで、飛ばして読んだらならない 　なんて、読者に強制はしない、すべきではないです。推理小説を、いきなり最初に結末を読んでから、読み始めるのは読者の都合です。 　著者がそこまで傲慢になってはなりません。 『Ｑ35． 「創作者なら、自分の作品を思い通りに見て欲しいと思うのは当然だ。 創作をしている人ではないので、創作系サイトの管理人の気持ちとはズレがあるようだ」( http://park5.wakwak.com/~tanaka02b/column/faq2.h … )』 　
こちらをどうぞ。 http://developer.yahoo.co.jp/webapi/auctions/
> ※上記以外のことは一切行っておりません それが本当なら、肝心のjQuery本体（jquery.min.js）がないよ。 ダウンロードしてくるなりCDNを参照するなりしないと。 あと、ファイルの指定ミスとか初歩的な間違いなら エラーが絶対に出てるはずなのでエラーメッセージくらいは確認しましょう。 ブラウザにもよるけど、開発者向けにエラーメッセージを確認する手段が普通は準備されてます。 エラーメッセージを表示させる - とにかくやってみるブログ - Ingwer Design http://ingwer-design.com/blog/javascript/post-5. …
HTMLとスタイルシートの役割分担とSEOを誤解されている。以下をよく読んで叩き込んでおくこと HTML 4による文書の設計( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) スタイルシートの概説( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　一言で言うと、HTMLには文書構造だけを記述し、プレゼンテーションはスタイルシートに任せる。これが、検索エンジンにそのページの内容が正確につかめる＝【Search Engine Optimization:検索エンジン最適化】ですよ。 ★検索順位で上位に表示されるのは、その結果であって目的ではない。 　だとしたら、それがナビゲーションメニューでしたら <div class="header"> 　・・・・・・ 　<div class="nav"> 　　<ul> 　　　<li><a href="/Top">ホーム</a></li> 　　　<li><a href="/Products">製品</a> 　　　　<ol> 　　　　　<li><a href="/Products/Tools">作業工具</a></li> 　　　　　<li><a href="/Products/Erect">電設工具</a></li> 　　　　</ol> 　　　</li> のようにマークアップされているはずですよね。 　なぜ？かというと、HTML4.01の時代、文書構造は「id属性及び class属性と併用することで、文書に構造を付加( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」してきましたから、googleなどの検索エンジンは、header内のnavだからグローバルナビだと理解してきました。SEOされているからです。 　ただ、個の部分理解されていたとは言いがたく。デザインのためにclassなどが乱用されていたためHTML5では、「文書をよりよく構造化するために、新しい要素が追加されます。( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」 　すなわち、HTML5では・・ <header> 　・・・・・・ 　<nav> 　　<ul> 　　　<li><a href="/Top">ホーム</a></li> 　　　<li><a href="/Products">製品</a> 　　　　<ol> 　　　　　<li><a href="/Products/Tools">作業工具</a></li> 　　　　　<li><a href="/Products/Erect">電設工具</a></li> 　　　　</ol> 　　　</li> 　ここまでは、理解されていますよね。HTMLはひたすら文書構造だけを記述する。これによって「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」、SEOは完璧。 　画像を入れていないのは ・検索エンジンは画像は読まない ・スタイルシートも読まない ・javascriptも読まない 　この場合、画像は文書の主体、コンテンツではない。 　その上で、まずmedia別スタイルシートを記述します。レスポンシブということは少なくとも印刷用(print)、携帯電話(handheld)、ディスプレイ(screen)は分けられていると思います。 ・出力メディア型( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・メディア依存のカスケード( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　そして、screenは基本的にリキッドデザインで製作されてきたと思います。 ・・・・その拡張が、mediaqueryであり、レスポンシブデザインだからです。・・・・ 　リキッドデザインで製作して、その上で幅の狭いディスプレイ＝マウスのようなポインターデバイスが使えないスマホ用に、mediaqueryでデザインを変える。 1.は画像が主要なコンテンツでない場合は論外です。 2.はjavascriptを使うため排除されます。 　画像を切り替えるくらいは良いですが、特にナビゲーションに関わる場合はね。 　『JavaScript、Cookie、セッション ID、フレーム、DHTML、Flash などの特殊な機能が使用されているためにサイトの一部がテキスト ブラウザで表示されない場合、検索エンジンのスパイダーがサイトをうまくクロールできない可能性があります。( https://support.google.com/webmasters/answer/357 … )』 ということは 3.が基本でしょう。 下記サイトはレスポンシブではなくリキッドですが、HTMLには文書構造しか書かれていないために、HTMLもCSSも自由に変更できますし、結果的にSEOも ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … )
>ただサーバーなどが無い場合は、リスクを理解してもらった上で、こちらのサーバーにjavascriptを置くこともありですね。 料金にもよりますが、ディスクスペースを再販するよりは、その顧客専用のサーバーを用意した方が良いですね。 特にディスクスペース再販で顧客ごとに専用ドメインを用意しないのであれば、サーバー管理業務を引き継ぐ時にお客様のウェブサイトのファイル（外部サーバーへのリンクURL）を更新しなければならなくなります。 顧客ごとにホスティングサービスを契約していれば、ホスティングサービスのアカウント情報を引き渡すだけで簡単に処理できます。 （支払いも代行していれば、支払い情報のデータを削除しておくことに注意。） >No.2お礼 >世の中にはお客様に何も言わずにとりあえず自社サーバーにjavascriptを置いて、知らないうちに廃業や病気でサーバーが解約されると将来的にお客様に迷惑かけてるようなところもありそうなので、 直リンクOKな素材配布やライブラリ配布を行っていて、そこにリンクさせているだけならともかく、（それでもサーバー停止時や配布停止に関係する利用規約、契約内容は細かく規定されています。） 業務ならありえませんね。 契約不履行で管理料金の返却、もしくはウェブサイトが停止した事による損害賠償を訴える事が出来ますし、そうでなければ詐欺となります。
＞　会社概要に書かれている会社名に引っかかったんだと思うのですが、 ＞　理想としてはまず、会社名をリンクとし、会社のホームページの ＞　ホーム画面が表示されるようにしたいです。 グーグルのウェブマスターツールやアナリティクスに登録していますか。 最低でも前者はやっておきましょう。 そして、トップページを頻繁に更新して、それをGoogleに通知します。 それから、一般に言われている、以下には注意してください。 　・各ページのtitleは絶対重複させない 　・サブページにはトップページへ戻れるリンクを設置 　・サプページの内容は、トップとかぶらない固有の内容にする ＞　もっと言うと会社名の下に事業内容や会社概要等４項目ぐらい表示される ＞　ようにしたいです。 これは、サイトリンクと言って、グーグルがそれなりの優良サイトと判断した 場合に表示されるようです。 ご自分で操作することはできないと思います。
はは、いくつかミス ＞<div class="sevtion">　訂正 →<div class="section"> ＞<sevtion> 訂正→　<section> <body> 　<div class="header"><!- タブは　(全角スペース)に置換してある --> 　　<div class="nav"> 　　　<ul> 　　　　<li><a href="/siteMap.html">サイトマップ</a></li> 　　　　<li><a href="/privacy/">プライバシーポリシー</a></li> 　　　</ul> 　　　<ul><!-- 抜けてる。 --> 　　　　<li><a href="/contactUs/">観光協会について</a></li> 　　　　<li><a href="/FAQ">FAQ</a></li> 　　　</ul> 　　</div> 　</div> でしたね。
No.1の追記です。 　⇒CSSでレイアウトするなら絶対覚えておきたい配置のルール：フロートや絶対配置、z-index とかいろいろ( http://webdesignrecipes.com/css-visual-formating … ) 　⇒CSS の z-index について整理してみる | かたつむりくんのWWW( http://www.tinybeans.net/blog/2009/02/19-134819. … ) 　要は、HTMLとCSSの仕様書くらいは読みましょうということ。
＞transform や font-stretch以外にも、何かご提案いただけるものがあれば是非ご指導くたさい。 　ないです。これは議論が続いていて、ひょっとするとひょっとしてCSS3 font に入るかも・・(他の段落との競合やブラウザ(OS)のフォント処理などの問題があって現状では難しい) 　一連の質問で、気になるのは「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」という基本部分。HTMLは文書構造を示すもの、プレゼンテーションはスタイルシートに任せる。その効果はリンク先に簡潔に書かれいている。 　すなわち「段落の中の一部だけ、サイズを変える方法はないのでしょうか。」の部分、例えば、本文はHTML5の場合<section>、それ以前のHTMLでは<div class="section">でマークアップしてきました。 　『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　その本文内で、重要な語句があれば・・ <section> 　・・・・・・・ 　<p><strong>文書の構造をプレゼンテーションと切り離すことで</strong>広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になる。</p> 　のようにマークアップされていて、「本文(section)内の段落(paragraph)中の重要(strong)な語句は、普通の太さで赤文字で背景は黄色」としたければ section p strong{color:red;font-weight:normal;background-color:yellow;} とスタイルシートを書きます。伸縮したければ、本来の用途ではないが・・ section p strong{display:inline-block;font-weight:normal;transform:scaleY(1.6);} で可能でしょう。 　ただ、transformはすべてのブラウザに対応していないので、 section p strong{display:inline-block;font-weight:normal;transform:scaleY(1.6);background-color:yellow;} など他のスタイルも付け加えておいたら良いでしょう。
アメーバブログでどこまでの情報をいじれるのかは知らないので、とりあえずずれる理由だけを。 現在のhtml構造は、 <body> ... <div class="skinContentsArea"> 　<div class="skinContentsArea2"> 　　<div class="layoutContentsA">...</div> # ←中央＆右サイドバー 　</div> 　<div class="layoutContentsB">...</div> # ←左サイドバー </div> ... </body> となっています。 レイアウトがくずれている理由は メインコンテンツ(layoutContentsA)でfloat:rightで右寄せを行い、 その後メインコンテンツを包含しているラッパー(skinContentsArea2)のafter要素でclear:bothで寄せ指令を解除し、 サイドバー(layoutContentsB)でfloat:leftで左寄せを行っているからです。 解決方法としては2つあり、 1つ目はclear:bothで寄せ指令を解除する前に左サイトバーを入れること。 具体的には <div class="skinContentsArea"> 　<div class="skinContentsArea2"> 　　<div class="layoutContentsA">...</div> # ←中央＆右サイドバー 　　<div class="layoutContentsB">...</div> # ←左サイドバー 　</div> </div> とする。 2つ目はラッパー(skinContentsArea2)のafter要素でclear:bothを削除すること。 これはblog.1.009.cssに記述されているようです。
＞スマホは回線がまだ脆弱な事が多いのでスマホ用のときは小さい画像を採用にして負担を小さくするという意味でディスプレイの解像度で読み込む画像を変える必要がある場合どのようにしていますかということです。 　それだと逆です。PCの場合画面解像度は96dpiで計算されて、ディスプレイに表示されます。ディスプレイ自体の解像度(1インチあたりいくら点があるか)とは関係ない。スマホの場合はディスプレイの解像度が高いために、OSで解像度を大きく計算して高解像度のディスプレイに表示しますから、96dpiの通常の画像では汚くなってしまいます。 　そのためにスマホ用には高画質の画像を読み込ませよう!!というのが、srcsetです。 ＞スマホ用のときは小さい画像を採用にして 　とは逆の目的です。 　mediaqueryで、 @media screen and (max-width: 480px) {...} 　として、デザインを変更する。 ★先に回答したように、リキッドでデザインされているページで、横幅が480px以下になると、伸縮していた画像は必要以上に無駄なデータ量になりますから、 [セレクタ]{ 　　width:80%; 　　background-image:url(highImage); 　　background-size:cover; } @media screen and (max-width: 480px) { 　　width:100%; 　　background-image:url(lowImage); } で済ませたりします。 　また画像自体がコンテンツの場合は、要素別にdispaly:none;display:block;などを組み合わせればよい 　いずれにしても、スマホ用、あるいは携帯電話(media="handheld")に対して、低画質のものを提供するためにsrcsetは可笑しいです。 　なぜって、デバイスの解像度が高ければ低画質を送るってことになるので・・・。 IE8にmediaquery対応させたければ css3-mediaqueries-js - css3-mediaqueries.js: make CSS3 Media Queries work in all browsers (JavaScript library) - Google Project Hosting( https://code.google.com/p/css3-mediaqueries-js/ )
div{width:100%;position:absolute;line-height:0;} div p{text-align:center;height:0;margin:0;padding:0;} div p+p{text-align:right;right:0;top:0;} <div> 　<p><a href=""><img src="big.jpg" width="50%" height="200"></a></p> 　<p><a href=""><img src="small.jpg" width="200" height="200"></a></p> </div> こんなかんじでしょうか？ 大きなイメージに小さなイメージがのっているイメージかなと。
cs4のドリームウィーバーさんの場合、デザインビューでinline-blockなどはあまりうまく動作してくれないっぽいです。 http://cssnite.jp/ginza/vol29/ cs4にライブビューって入ってましたっけ？ そっちを使った方が良いかも。 　 ブログで横並びにならないのも謎。 たとえばliの親のulにwidth設定してみてはどうでしょう？ 　 入れ子は気になるなら一旦消してから検証してみた方が良いかもしれません。
特定の子要素（または孫要素）を持つ親要素（または子要素）にスタイルを適用したい、ということですが、CSSでは無理だったかと思います。 jQueryなら「has」を使って子（または孫）要素のあるなしを判定できますが、この方法はダメなんですか？ 例： ●子要素にh3が「ない」場合にクラス「none」を追加 $(function() { $("#親 #子:not(:has(h3))").addClass("none"); }); ●子要素にh3が「ある」場合にクラス「none」を追加 $(function() { $("#親 #子:has(h3)").addClass("none"); }); わかり辛いのでIDで表現してますが、クラスでも指定可能です。
＞必要なクセはあえて自分で残すということですね。 　の意味が分かりません。 　ウェブ標準(HTML4.01strict+URL入りのDOCTYPE)だと、ブラウザ間の誤差--癖はほとんどないはずです。 　大事な事はユーザーインターフェースで、ユーザーが常用しているブラウザのもつデフォルトのスタイルシートは大きく変更しないほうが良いのです。リンクの色や下線とか、リストや引用ブロックの字下げとか・・。 　凝ったデザインが必要な場面は、トップページやナビゲーション部分だと思います。それ以外の記事の部分は、極力デフォルトのスタイルを活用することになると思います。それをいちいち再設定するのは労力の無駄じゃないかと。 　私的には、欧文と日本語の表記の差、具体的には、p{text-indent:1em;margin:0;line-height:1.7em;}とか・・一般的には固定スタイルシート(persistent style sheet)に書く程度のものとか。 　具体的にリセットCSSにしろ、normalize.cssにしろ、ほとんどの項目は、改めて設定しなければならないものが大部分を占めています。 　とにかくシンプルに分かりやすくしないとメンテナンス困る。 　
No.3です。 ごめん。質問の意味を取り違えた。 スルーしてください。
質問が分からない。それだと ┌───┐ │　　　│ │　　　│等幅フォントで見ること │　　　│ └───┘ ┌┐┌──┐ └┘│　　│ 　　│　　│ 　　└──┘ になるだけ。どうスクロールしたいのか？？
<style> table[border] { border-collapse: separate; border-spacing: 0 1ex; border: 0; } table[border] td, table[border] th { border: solid black; border-width: 1px 1px 1px 0; } table[border] td:first-child, table[border] th:first-child { border-width: 1px; } </style> <table border> <caption>行だけ間隔を空けた表</caption> <tr><th> name <th> age <th> memo <tr><td> alpha <td> 12 <td> AAAAAAAAA <tr><td> beta <td> 345 <td> BBB <tr><td> gamma <td> 6789 <td> C </section>
逆向きの画像を作ったほーが早いし楽だよ
> まだ並べ替えでしか試していないのですが、DBから取ってくると数秒かかるのですが配列の中身を並べ替えて再表示だと1秒もかからず一瞬で出来たので それ、比較対処を間違えてませんか? DB から並べ替え後のデータを取得する場合、当然ながら DB からのデータ送信というコストがかかります。 もしあなたが「配列の中身を並び替え」た時間の計測が並び替え前のデータを用意した時点から行っていたなら、それは DB からのデータ送信コストを計算に入れることを忘れています。 本気で DB での並べ替えと配列での並べ替えを比較したいのなら、配列側は DB から未並び替えのデータを取得するところから計測を始めなくてはいけません。
＞なぜか、サイト下部に固定されずに 　位置を指定しなけりゃそうなる。 　サイズやデザインは好きに指定すればよい p.telNum{position:fixed;bottom:0;left:0;width:100%;text-align:right;line-height:2em;} p.telNum a{display:inline-block;width:10em;border:solid 2px red;}
どーもこんにちは。みなさん手厳しいですねぇ（笑） 「これから勉強する」という文言や質問の仕方からして、websaitojisakuさんはウェブクリエイターに関してはまったくのド素人という理解でいいですか？ まず「HTMLってそもそもなぁに？」ってところからだと思います。 そしてテキストエディタでHTML,CSSのコーディングをして簡単なホームページ（とあえて呼んでおきます）を作って公開してみること。 そうすれば「CSS３だけ」とかいう疑問がそもそも無為なものである事がおわかりいただけると思います。jQueryより先にJavascriptが先だと言うことにも気づくはずです。 そもそもウェブクリエイターとか言っても結構抽象的で、おおざっぱに考えてウェブサイトビルディングには 企画、立案、設計、ライティング（コンテンツつまりコピーライティングやストーリーテリング等々）、コーディング、デザイン（ビジュアル面等） ↑死ぬほどおおざっぱです（笑） などなどの行程があるので（しつこいですが超ざっくり言ってですよ）、これらを一人でこなすことは稀です。自分がどの位置に特化していきたいのかによっても掘り下げて学ぶべきものが変わってきます。 まぁ一から学ぶのなら、実際に手を動かして学習を進めていくタイプのものがおすすめです。 （リンクを張るとアフィリリンクがどうだの鬱陶しいのが沸きそうなのでググってくださいｗ） PCすら初心者なら（中小企業のオヤジさんでもいける）→ できるホームページ HTML&CSS入門　佐藤和人 (著), できる編集部 (著) PCを普通に道具として扱える程度の操作スキルがあるなら（ボックスの概念まで学べる）→ HTML/XHTML&スタイルシートレッスンブック―ステップバイステップ形式でマスターできる　エビスコム (著) 次にコレ（ここでやっとCSS3）→HTML5&CSS3レッスンブック（エビスコム著） あぁ、何も知らない人がいきなりHTML5とCSS３から入るとたぶん後で混乱します。 普通にHTML4.01（XHTML１）から入ればHTML5の整合性の高さが実感できるはずです。 個人的にエ・ビスコムテックラボ著と「１０日で覚えるシリーズ」の書籍はおすすめできます。 あとほかに先輩方で「これいいよ！」てのがあったら教えてもらえると私もうれしいです。 てなところです。長くなりましたけど。
たとえば、 ★Another HTML Lint Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済みのHTML4.01strict + CSS2.1 ★タブは＿に置換してあるので戻す。 ★印刷やガラケーには適用されない。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- html{padding:0;position:relative;background-color:black;height:auto;height:100%;} body{position:relative;width:95%;height:95%;padding:0;background-color:gray;border:red solid 1px;margin:1.25% auto;padding:0;} p{height:50%;text-align:center;position:relative;margin:0;} p span{display:block;position:absolute;bottom:0;width:100%;} --> ＿</style> </head> <body> ＿<p><span><input type="button" value="新規(N)" tabindex="1" accesskey="N"><input type="button" value="変更(C)" tabindex="2" accesskey="C"></span></p> ＿<p><input type="button" value="戻る(R)" tabindex="3" accesskey="R"></p> </body> </html>
＞そこをクリックすると、一瞬私のサイトが出てきて、すぐに別のサイトに飛びます 　ここが分からない。 　「一瞬私のサイトが出てきて」ということは、あなたのサイトに行くのはいくということ？？ 　それがないのでしたら、CSSをCGIから出力させる。HTTP_REFERERを参照して他のドメインからだと、display:none;を書き出す。
＞PCが絡んだ場合はHTML5はまだ実務では使わないということですね。 スマホだけが対象ならHTML5でよい。 　私は公共的なサイトの場合はHTML4.01strictです。HTML5は<video><canvas>が必要なときには使う。 　ただし、HTML4.01strictであっても、HTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )をclass名にして、その使い方は守ります。HTML5では<div>は原則使いません( Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/html5/grouping-content.html … )ので・・。 　将来HTML5に移行するのが楽ですから。<div class="header">などを<header>に変更するアプリもあるしね。 　HTML4.01strictに戻って、徹底的に復習。そのときにHTML5の仕様を常に参考においておくと良いでしょう。 　CSS3は、CSS2.1に追加する形、補強する形での利用でよいでしょう。随分と素人受けする機能もありますが・・・・(^^)。秀逸なサイトかそうでないかは、デザインじゃなくコンテンツ(内容)ですからね。 　
floatを使わない。 　使うなら、DOCTYPEスイッチ( https://www.google.co.jp/search?q=DOCTYPE%E3%82% … )を標準モードで起動するように正しく記述する。 　そのブロックと抱合ブロックの幅をリキッドでかつ、mi-widthで指定する。 ※標準モードにするのは、ブロックのサイズの計算方法が違うためです。 ※抱合ブロックに最低限必要なサイズをmin-widthで指定しないと折り返されるから position:absoluteがベスト
　ウェブページ作成となると、開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )の豊富なfirefoxをお使いだと思いますが、 Firebug( https://addons.mozilla.jp/firefox/details/1843 )があれば、F12でスタイルの適用が確認できるはずです。 　CMSやブログツールで、テンプレートを、そのまま使用しないのでしたら、当然HTML/CSSの知識はテキストエディタで作成できる以上の知識が必要です。なぜなら、しばしば複雑で分かり難いソースを相手にしなければならないし、そのツール独特の癖やルールの知識が必要だからです。 　★ここは理解されていますよね。 <td height="15px"> 　HTML要素の属性での指定は、 『ユーザーエージェントは、HTMLソースドキュメントの体裁用の属性を尊重してよい。その場合、これらの属性は0に等しい詳細度と対応するCSS規則に変換され、それらは著者スタイルシートの先頭に挿入されたかのように扱われる。( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )』 　です。詳細度は0にしかなりません。 　一方、 <td style="padding:0px;"> の場合は「HTMLでは、要素の"style"属性値は、スタイルシート規則である。これらの規則はセレクタを持たないので、a=1、b=0、c=0、かつd=0。( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )」 　他での指定（セレクタや詳細度）がどうなっているか分かりませんが、 tableの関連したプロパティは 　border-collapse、border-spacing、line-height、height、paddingなどが関わります。 　firebugで、その要素にどのようなスタイルが、どうカスケーディングの上、有効になっているかを確認してみましょう。 　少なくとも、セレクタやカスケーディングはCSS(カスケーディングスタイルシート)の命ですから、それを理解したうえで指定すると簡単です。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )
単純に:before擬似要素とcontentプロパティを使う <ol> ＿<li>あ行 ＿＿<ol> ＿＿＿<li>あ</li> ＿＿＿<li>い</li> ＿＿＿<li>う</li> ＿＿</ol> ＿</li> ＿<li>か行 ＿＿<ol> ＿＿＿<li>か</li> ＿＿＿<li>き</li> ＿＿＿<li>く</li> ＿＿</ol> ＿</li> </ol> にて、 ol,ol li{list-style:none;line-height:1.4em;margin:0;padding:0;font-famiry: monospace;} ol li:before{content:"├ ";font-size:1.6em;} ol li:last-child:before{content:"└ ";} ol li ol li:before{content:"│　├ ";} ol li ol li:last-child:before{content:"│　└ ";} ol li:last-child ol li:before{content:"　　├ ";} ol li:last-child ol li:last-child:before{content:"　　└ ";} ※セレクタは、文書構造にしたがって書き直すこと。例えば div.AIUEO ol,ol li{list-style:none;line-height:1.4em;margin:0;padding:0;} div.AIUEO ol li:before{content:"├ ";font-size:1.6em;} ol li:last-child:before{content:"└ ";} div.AIUEO ol li ol li:before{content:"│　├ ";} div.AIUEO ol li ol li:last-child:before{content:"│　└ ";} div.AIUEO ol li:last-child ol li:before{content:"　　├ ";} div.AIUEO ol li:last-child ol li:last-child:before{content:"　　└ ";} ●も付けられますが、それは工夫してみましょう。 セレクタの書き方は 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) それに伴う継承は 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )
発想がそもそもちょっと違うような気がします。 レスポンシブでの制作の場合には、「レスポンシブ対応できるようにデザイン等を企画する」というのが大前提です。 既存のサイトをそのままレスポンシブ化するわけではないです。 ですので、レスポンシブに出来ないデザインになるわけがないですよね。 既存のサイトをレスポンシブ化しようとした場合でも、 レスポンシブに出来ないデザインというのは基本的には無いです。 最悪津堂の悪いものは消せばいいだけなので。 レスポンシブを意識していないサイトは9割以上が「やりにくい、やらないほうがいい、やる意味がない」サイトです。 レスポンシブへの対応は無理ではないですが、無理矢理感の強いサイトになるでしょう。
absoluteを使います。absolute(絶対配置)の場合、直近のstticでない親コンテナブロックの位置が基準になります。 　⇒'display'、'position'、'float'の関係( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　⇒'display'プロパティ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )
こんにちは。 キャンペーンページとはたぶん「ランディングページ」の事だと思います。 ランディングページを集めた参考サイト→　http://lp-web.com/ キャンペーン商品に特化したランディングページはそこそこ需要があります。 ランディングページはアフェリエイト広告やメインサイトから飛ばしたりする事が多いので、時間経過でのSEOは気にしないと思います。 （SEO最適な形でのサイト制作は基本ですが） デザイン力・説得力・構成力がランディング制作には必要なので、しっかりしたランディングページが作れれば普通のサイトも簡単だと思います。 頑張ってください。
まず、根本的なこと。 HTMLは徹底して文書構造だけを記述すること。将来のメンテナンスが格段に楽になります。 スタイルシートは、プレゼンテーションを指定します。 「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」必読!! <section> 　<h2>商品一覧</h2> 　<section id="NewGoods"> 　　<ul> 　　　<li>2014年8月1日(金) 　　　　<p> 　　　　　　<a href="">商品説明・・・。商品説明・・・。商品説明・・・。</a> 　　　　　　<img src="" width="" height="" alt=""> 　　　　</p> 　　　</li> と、まったく率直(すなお)に文書構造をHTMLでマークアップしていきます。 上記は、HTML5ですが、HTML4.01には文書構造を示す要素が用意されてなくて、『id属性及び class属性と併用することで、文書に構造を付加( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』します。 <div class="section"> 　<h2>商品一覧</h2> 　<div class="section" id="NewGoods"> 　　<ul> 　　　<li>2014年8月1日(金) 　　　　<p> 　　　　　　<a href="">商品説明・・・。商品説明・・・。商品説明・・・。</a> 　　　　　　<img src="" width="" height="" alt=""> 　　　　</p> 　　　</li> 　そのうえで div#NewGoods{padding:10px;} div#NewGoods ul,div#NewGoods ul li{ list-style:none; margin:0;padding:0; font-size: 12px; } div#NewGoods ul li{ float: left; width: 170px;height: 240px; padding:0 10px 8px 0; position:relative; } div#NewGoods ul li p{ margin:0;text-indent:1em;line-height:1.6em; } div#NewGoods ul li p img { display:block; width:140px;height:auto; position:absolute; bottom:5px;left:15px; } だけでよい。 ※ただし、標準モードで動作するように<DOCTYPE>を指定すること。IE7への対策が不要になるし。
floatの挙動を理解しておられないようです。 結論から言うと、「float:left」を全てに入れ、5つめに「clear:left」を入れてください。もっと続くなら、同様に4つごとに入れてください。 なぜそうなるかですが、 まず何も指定しないdivはブロックレベル要素であり、ブロックレベル要素は通常では横に並びません。 これを通常の流れから切り離して横にも並ぶようにする指定がfloatです。 ですので横に並べる全ての要素にfloatを入れなければなりません。 そして、そのままでは横幅いっぱいまで並ぶところ、それを解除する指示がclearです。 具体的には、それ以前の全てのfloatした要素より下に表示されるようになります。 floatとclearについてはこちらのページがとても参考になります。 http://webdesignrecipes.com/css-visual-formating … 4つごとにclearを入れる方法ですが、個別に入れるのは望ましくないので、cssを分離した上で、親要素に「nth-child(4n)」で指定するのが常套です。 なお、No1さんの書き方のように、divの代わりにliを使っても構いません。最近の流行りですね。 また(説明がありませんが)親要素の幅を子要素の4倍にすることで4つ置きに改行させているようですが、子要素の内容やマージンの指定で大きさが変わった時に破綻しますので、個人的にはあまり好きではないです。 (きちんと調整できれば)古いブラウザでも確実に動くのは利点なのですが…。
＞マウスを右や左端に持ってくとブラウザが半分になる機能が有りますよね、 これは分からない・・・ 　ブラウザの通常の機能としてはありません。 　サイトで独自にjavascript入れているか、あなたのブラウザに何のアドオンを入れているのでしょう。 　それは兎も角、単純にスタイルシートの書き方が悪くてウィンドウサイズに追随しないだけでしょう。 　現在のように同じスクリーンメディア(media="screen")であってもスマホから超幅広ディスプレイのある時代、600px以上でリキッドで製作し、それを越える場合はmediaqueryでスタイルシートを書き換えますので、そのような問題は起きないはずです。 　ウェブページをわざわざHTMLを使用して作成するのは、HTMLが 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　だからです。 　そのようなことが起こらないために、HTML使うのですから。 [サンプル] ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATAでチェック済みのHTML4.01strict + CSS2.1です。 ★370ox幅以上に対処　スマホの縦置きでも ★印刷にも対応(URLが印刷され、目次は印刷されない ★タブは＿に置換してあるので戻す。 ★HTML5の場合、<div class="header"><div class="section"><div class="nav"><div class="footer">はそれぞれ<header><section><nav><footer>になる。 HTMLは文書構造しか書かれていないので、スタイルシートも分かりやすいし、HTML/CSSの変更も簡単 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>テストのサイト</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:360px;max-width:900px;margin:0 auto;padding:5px;} div.header h1{text-align:center;} div.nav ul,div.nav ul li{list-style:none;margin:0;padding:0;text-align:center;line-height:2em;} div.nav ul li{border:1px gray solid;} div.header div.nav ul li{display:inline-block;width:18%;} div.section{position:relative;min-height:300px;} div.section h2,div.section p{margin-left:170px;} div.section div.nav{position:absolute;left:0;top:0;width:160px;} body{background-color:gray;} div.header,div.section,div.footer{background-color:white;} div.nav ul li{background-color:aqua;} div.nav ul li:hover{background-color:fuchsia;} --> ＿</style> ＿<style type="text/css" media="print"> <!-- ＿div.nav ul li:after{content:"\A　　　URL:http：hoge.com/**";white-space:pre;} ＿div.section div.nav{display:none;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>テストのサイト</h1> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li>リンク</li> ＿＿＿＿<li>リンク</li> ＿＿＿＿<li>リンク</li> ＿＿＿＿<li>リンク</li> ＿＿＿＿<li>リンク</li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<p> ＿＿＿こんにちは、こんにちは、こんにちは、こんにちは、こんにちは、こんにちは、こんにちは、こんにちは、こんにちは、こんにちは、こんにちは、こんにちは、こんにちは、 ＿＿</p> ＿＿<div class="nav" id="contentTable"> ＿＿＿<ul> ＿＿＿＿<li>リンク</li> ＿＿＿＿<li>リンク</li> ＿＿＿＿<li>リンク</li> ＿＿＿＿<li>リンク</li> ＿＿＿＿<li>リンク</li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
CSS2以降、基点セレクタを書くことになってますが？？？ *.ranking:after { content:"";background:url(../image/arrow.png) no-repeat;position: absolute;display: block;top: 50%;right: 10px;width: 20px;height: 20px;} margin要りますか？？absoluteされる要素のmarginは他と相殺しませんけど・・ でもひょっとして *.ranking:after { content:url(../image/arrow.png);position: absolute;top:50%;right:10px;}で良さそうな気もしますが(^^)
>　これをそのままHTML5で作られたサイトやブログに貼り付けると、ブラウザは気を利かせて表示はしてくれるかもしれませんが、HTML5のルール上は違反ですよね。 勘違いされているようですが、HTML4でも<table>でレイアウトするのはルール違反です。 http://www.w3.org/TR/html5/tabular-data.html#tab … HTML5では<table>でレイアウトする人が非常に多いという状態を鑑みて、レイアウトテーブルという考え方を導入しています。 CSSレイアウトが推奨されてはいますが、HTML5の方が<table>の扱いに対して寛容です。 >　単に楽天側が修正してないだけなのか、それともHTML5でも廃止された要素や属性を使っても問題無いということなんでしょうか？ ブラウザはHTML4とかHTML5という区別をしていません。 サポートしているタグか、サポートしていないタグかの区別しかありません。 http://www.w3.org/TR/html5/text-level-semantics. … たとえば<ruby>のように、HTML5で定義されていてHTML5に対応しているブラウザでも表示できないブラウザもあります。 表示上は、サポートしているタグであれば問題ありません。
他の接続環境からは？？ 　個人のスマホから等・・ 　プロキシ使ってませんか？？
テンプレート？ このサイトの表示制御には『CSS』を使ってます。 CSSを解釈すれば構築出来るはずです。 今風のサイトはリソース表示とリソース制御は別ファイルで構築してますので 単体のテンプレートが有っても構築出来る訳では無い。
「htmlのルールもスタイルシートの知識もない人がテキスト部分だけを頻繁に書き換える前提」でも、文字数を数えてclassを入れることぐらいはできるのでは？ <td>のあと、class="l"は何文字かのおまじないですよ。lはレタースペースのエルでその後に実際の文字数が入りますよと伝えておけば、８文字未満でしたら、できた表を目視すれば、間違いは簡単に発見できますでしょ？理解できなくても、間違いがわかれば、文字数を数え直して入れればいいだけですので、対応できると思います。 見た目の為にクラスを入れるのはダメという原理主義者もいるでしょうが、そんな理想論ではやっていけない事もあります。 また、これを機会に少しずつhtmlのルールを教育していけば、やる気のある人なら覚えますよ。htmlは挟むだけ、簡単！簡単！といって、心理的敷居を低くし、成功して苦手意識が薄くなっているところ、慣れたところで、できることを増やしていけばいつのまにか覚えてたいうことになりませんかね？ 参考になれば、幸いです。 <html> <head> <title>無題ドキュメント</title><style type="text/css"> .l2{letter-spacing: 6em;}/**２文字用**/ .l3{letter-spacing:2.5em;}/**３文字用**/ .l4{letter-spacing:1.33em;}/**４文字用**/ .l5{letter-spacing:0.75em;}/**５文字用**/ .l6{letter-spacing:0.4em;}/**６文字用**/ .l7{letter-spacing:0.17em;}/**７文字用**/ </style> </head> <body> <table> <tr> <td class="l2">ああ</td> </tr> <tr> <td class="l3">あいう</td> </tr> <tr> <td class="l4">あいうえ</td> </tr> <tr> <td class="l5">あいうえお</td> </tr> <tr> <td class="l6">あいうえおか</td> </tr> <tr> <td class="l7">あいうえおかき</td> </tr> <tr> <td class="l8">あいうえおかきく</td> </tr> <tr> <td class="l8">１２３４５６７８</td> </tr> </table> </body> </html>
ちなみに英語が出来ないことは個人レベルの話であって、日本人という国民とは無関係です。 ご存知でしょうが業種関係なく世界で働いたり評価されている日本人は特別ではありません。
>No.1お礼 よくわかりませんが、それは$colorArrayを調整すべき事ではないですかね。 でなければ@mixin backColorの中身、つまり @mixin backColor( $colorName ){ この部分 } で調整できると思いますが。
＞テーブルでとspace.gifを使ってやるしかないのでしょうか？ 　最低限仕様書は理解しなくても一度は目を通しておきましょう。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから そのためのテクニックには思わぬ副産物があった。こうしたテクニックは、特定の人々、特定の時代状況でしか成り立たず、すべての人々、すべての時代状況において成り立つものではないのだ。こうしたテクニックの例を挙げよう。 　・ メーカー独自拡張のHTMLを使う。 　・ テキストを画像に置き換えて表現する。 　・ 余白制御のために画像を用いる。　　★★space.gifを使って 　・ ページレイアウトの目的で表を用いる。★★テーブルで 　・ HTMLでページを作らずにプログラムに頼る。 　こうしたテクニックによって、Webページはより複雑化し、限られた環境にしか適応しなくなり、相互運用性問題に悩まされることとなり、障害を持つ人々にアクセス障壁が設けられてしまう。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Style Sheets in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　1999年のHTML4.01の勧告以来強く言われ続けてきた事です。 　大事な事は、HTMLは文書構造を、プレゼンテーションはスタイルシートという大原則です。構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　例えば、ナビゲーションリストなので次のようにマークアップされていたとします。 <div class="nav" id="globalNavi"> 　<ol> 　　<li><a href="/">トップ</a></li> 　　<li><a href="/products">製品一覧</a></li> ・・・・ 　このようにHTMLではデザインをまったく考えずにひたすら文書構造をマークアップします。 　そして、スタイルシート(media="screen")で #globalNavi{ background-image:url(images/index_main01_02.jpg); width: 629px; height: 390px; positio:relative; } #globalNavi ol li{ list-style:none; position:absolute; } #globalNavi ol li{ left:0; top:60px; } #globalNavi ol li+li{ top:100px; left:100px; width:520px; } #globalNavi ol li+li+li{ top:300px; left:200px; width:420px; } とか、好きにデザインすれば良い。 こうしておけば、携帯電話や印刷、読み上げブラウザでは、きちんとリストで表示、印刷、読み上げてくれるが、PCやスマートフォンでは、629px; height: 390px;の背景画像の上に、最初の項目は右サイドに上から60px、二番目は上から100px左から100px、三番目は上から100px左から200pxに表示してくれる。 　もちろん、先でデザインをまったく変えたくなってもHTML書き換える必要はないし、必要なら印刷用、携帯用でデザインを変えることもできる。
　掲示板の文書構造が表でもおかしくは無いと思います。 　横軸が各項目（投稿時間・投稿者・メルアド・発言内容）で、縦軸が時系列とすれば、立派な表ですね。一発言が表の１行として表現される形です。 　個人的には、どちらかというと、構造化された（入れ子の）リストと考えた方が、すっきりするように思います。 　特に、発言へのレスを元発言に対して、インデントして表現するとなると、ますますリストっぽくなります。 　 　どちらにしても、レイアウトは完全にＣＳＳでコントロールできます。 　リスト構造の一部を横に並べる方法がよく見られるのは、ページトップのメニューです。 　このＯＫＷＥＢサイトの上部にあるカテゴリのメニュー表示が、一番近くにある実例。（スクリプトが絡んでいますが、スクリプトの部分は、マウスを置いた時に子メニューがでるようにするためです。これを無視すればたんなる単純なリストです。） 　classをきちんと分けていけば、あまりdivに頼る必要も無いはずです。
こんばんわ 原因としてIEの不具合が原因だと思います。 一度、下記の事をする必要があります。 ０：不要なIEツールバー削除 http://ebid.cals-ehime.lg.jp/info/20080905.html １：０が終わりましたら、IE設定初期化 富士通Q&A - [Internet Explorer] 設定を初期化する方法と検索、IE設定の初期化をします ２：１が終わりましたら、ドライバー更新 ・Driver Booster Free - 窓の杜ライブラリと検索し、Driver Booster Freeを使い、ドライバー全体を更新します。 ・DirectX エンド ユーザー ランタイム Web インストーラによるＤｉｒｅｃｔｘの更新 http://www.microsoft.com/ja-jp/download/details. … ３：２が終わりましたら、FLASH　PLAYERの更新をします。 ４：３が終わりましたら、PC　チェックディスクと検索し、チェックディスクを行います。
スタイルシート使うのが今時普通だけど・・・あえて使わない方法で。 <NOBR> <img src="画像のアドレス" alt="簡単な説明" height="高さ" width="幅"> <img src="画像のアドレス" alt="簡単な説明" height="高さ" width="幅"> </NOBR> <NOBR>～</NOBR>：改行禁止 これ、ＨＴＭＬ5で廃止されたはず？
・異なるライセンスが混合するなら、ライセンス間で内容が矛盾しないこと。 　昔の記事なのであまり役に立たないかもしれませんが、こういう感じの。 　http://sourceforge.jp/magazine/06/06/09/1537222 ・内容ごとに、一番厳しいライセンスに従います。 　最もうるさそうな1つのライセンスにだけ従えばいいというわけではありません。 　なので、複数ライセンスが混ざると、正直めんどくさいことになります。 ・大抵はダウンロードした内容にlicense.txtなどのファイルに記されています。 ・ホームページには特に必要ありませんが、公開しているそのもの自体がどのようなライセンス体系で 　公開しているかは記した方がユーザーに優しいでしょう。 ・ホームページに記載していても、ダウンロードした内容には必要です。 　それもほとんどのそれぞれのライセンス条項に記されているはずです。
ちょっと確認 ★header内のナビゲーションは:focus、section内のナビゲーションは:target ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　で検証済みのHTML5 + CSS3(targetのみ) ★タブは＿に置換してあるので戻す。文字コードUTF-8 ★リキッド(640px～900px) <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> ＿<style media="screen"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} header,section,footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} /* プルダウンメニュー */ nav{line-height:2em;text-align:center;} nav ul,nav ul li{list-style:none;margin:0;padding:0;} nav ul{font-size:0;} nav ul li{font-size:16px;display:inline-block;position:relative;width:25%;} nav ul li ul{font-size:16px;position:absolute;top:2em;width:100%;display:none;} nav ul li ul li{width:100%;} /* header内のナビ */ header nav ul li:hover ul,header nav ul li:focus ul{display:block;} /* 本文内のナビ */ section nav ul li ul:target{display:block;} /* 色分けなど */ nav ul li a{display:block;width:100%;height:100%;text-decoration:none;} nav ul li{background-color:yellow;} nav ul li:hover{background-color:orange;} nav ul li ul li:hover{background-color:lime;} body{background-color:gray;} header,section,footer{background-color:white;} --> ＿</style> </head> <body> ＿<header> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="/">Top</a></li> ＿＿＿＿<li><a href="/Books">Books</a> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li><a href="/Books/001.html">ABCD</a></li> ＿＿＿＿＿＿<li><a href="/Books/002.html">EFGH</a></li> ＿＿＿＿＿＿<li><a href="/Books/003.html">IJK</a></li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li><a href="/Product">Product</a> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li><a href="/Product/001.html">LMNO</a></li> ＿＿＿＿＿＿<li><a href="/Product/002.html">PQRS</a></li> ＿＿＿＿＿＿<li><a href="/Product/003.html">TUVW</a></li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li><a href="/Manual">Manual</a> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li><a href="/Manual/001.html">XYZA</a></li> ＿＿＿＿＿＿<li><a href="/Manual/002.html">BCDE</a></li> ＿＿＿＿＿＿<li><a href="/Manual/003.html">FGHI</a></li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<section> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</section> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="/">Top</a></li> ＿＿＿＿<li><a href="#Book">Book</a> ＿＿＿＿＿<ul id="Book"> ＿＿＿＿＿＿<li><a href="/Books/001.html">ABCD</a></li> ＿＿＿＿＿＿<li><a href="/Books/002.html">EFGH</a></li> ＿＿＿＿＿＿<li><a href="/Books/003.html">IJK</a></li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li><a href="#Products">Products</a> ＿＿＿＿＿<ul id="Products"> ＿＿＿＿＿＿<li><a href="/Product/001.html">LMNO</a></li> ＿＿＿＿＿＿<li><a href="/Product/002.html">PQRS</a></li> ＿＿＿＿＿＿<li><a href="/Product/003.html">TUVW</a></li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li><a href="#Manuales">マニュアル</a> ＿＿＿＿＿<ul id="Manuales"> ＿＿＿＿＿＿<li><a href="/Manual/001.html">XYZA</a></li> ＿＿＿＿＿＿<li><a href="/Manual/002.html">BCDE</a></li> ＿＿＿＿＿＿<li><a href="/Manual/003.html">FGHI</a></li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿</ul> ＿＿</nav> ＿</section> ＿<footer> ＿＿<h2>文書情報</h2> ＿＿<dl id="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</footer> </body> </html>
ルール的な理由は先の回答者に譲りますが。。。 　 記述する時は「#id 要素」みたいな書き方をするケースは多いと思います。 理由としては「idをつけた方がどの要素の箇所なのかわかりやすい」ということ、 そして、「適用の優先度」の問題があります。 　 たとえば、 td { background-color:#ffffff; } よりも、親要素を書いた #id td { background-color:#333333; } の方が優先されたりだとか。 (但し衝突しないスタイルは引き継ぐ) 　 あらためて。 どの要素どのスタイルがあたっているなどで混乱しないよう、 そして、仮にぶつかっててもなんとかするために(本当はダメな考え方でしょうねｗ)、です。
.gifなのか.pngなのか.jpgなのか、 拡張子が不明なら書き様がありません。 1のときは.gif、2の時は.jpgと決まっているのなら、最初から1.gif、2.jpgと書けばいいです。
No.2です。 すみません。訂正します。 http://msdn.microsoft.com/en-us/library/ff955275(v=vs.85).aspx EmulateIE8は規定されていました。 ということは、おそらく質問文に書かれていない別の場所に原因があると思います。
＞4で割って320pxという意味でしょうか？ 　この4の根拠がわからない・・ *1 ・・・・ *2 ・・・・ *3 ・・・・ *4 HD:1280×720 ピクセルと言う意味じゃないのですか。 レスポンシブデザインの前段階で、リキッドがあると思いますが？？？ そんなに小刻みに指定なんかしません。 例えば 　640px（ディスプレイサイズのpx数）以上の幅と、それ以下で分ける。 　640幅以上だと、最大幅1000px以下なら100% それを越えると1000pxで中央 　640以下だとデザインを変更する。 　　いずれも当然、リキッド 　スマホなど高解像度デバイスの場合は、Viewportの指定をしないと、文字が小さくなって読取れなくなります。 　 Viewportの指定がwidth=device-widthでしたら、実寸例えば480とかになります。 　解像度と、スタイルシートで言う単位のpxをきちんと区別しないとわけが分からなくなります。 　またフィーチャーホン(携帯電話用　media="handheld"のスタイルシートも用意すると良いです。
以前少しwebページ制作の営業をやっていました。正直需要はどこにでもあるのですが、電話していてアポが取りやすいのは美容院やレストランでした。病院はまず受付から委員長に繋げるのが難しいのと、つながってもネットがわからないおじいちゃんが多いのでキツイです。 また、実際起業する際は人づてでの仕事がある程度見込めないと厳しいと思いますので、必然的に案件=交友関係のある年齢層からが中心となります。そうなると病院や大企業、法律事務所などのHPを受ける機会はあまりないんじゃないでしょうか。 しかしその反面、個人経営の美容院やレストランが投資できるお金は少ない(一案件100万円いけばかなりいい方。それでブログつけてくれとか通販できるようにしてくれとかメンテナンスもしてくれというリクエストが来る。)なので、一長一短です。 例えば病院なんかはお金もある事が多いし、仕事を受注してからは簡単なことが多いですからね。 結局は自分の交友関係と、やりたい物と相談することになるかと思います。言うまでもありませんが、スキル・センス的にはあらゆる業種のwebページを作れなければ独立することは難しいと思いますが。
サイトのどこにおいても良いように書き換えた。 サーバーのどこかに置いてください。 ★HTMLとCSSの基本を身につけましょう。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』であって、デザインのためではありません。 ★スタイルシートの 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) は、絶対にひつような知識。これがないとDIVをデザインのために書いたり、煩雑なHTML/CSSになる。 頑張ってください。 <style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;line-height:1.8em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;position:relative;} div.header h1,div.header h2{width:49%;display:inline-block;position:relative;} div.header h1 img,div.header h2 img{width:90%;height:auto;} div.header div.nav{width:100%;line-height:2em;text-align:center;} div.header div.nav a{text-decoration:none;font-weight:bold;color:black;} div.header div.nav ul,div.header div.nav ul li{list-style:none;margin:0;padding:0;} div.header div.nav ul li{display:inline-block;width:13%;position:relative;margin-left:1px;font-weight:bold;} div.header div.nav ul li+li:before{content:"|";position:absolute;left:-1px;top:0;} div.header div.nav ul li ul{position:absolute;top:2em;width:100%;display:none;z-index:10;} div.header div.nav ul li:hover ul{display:block;} div.header div.nav ul li ul li{font-weight:normal;width:100%;} div.header div.nav ul li ul li:before{content:"";} div.section h2,div.section p,div.section div.section,div.section div.aside{width:auto;margin:0 300px 0 0;min-width:0;border-color:gray;border-style:dotted;} div.section{min-height:800px;} div.section div.section{min-height:0;} div.section div p{width:auto;margin:0;} div.section div.nav{position:absolute;width:295px;top:0;right:0;font-size:0.95em;} div.section div.nav h4{line-height:33px;border-bottom:ridge 5px rgb(255,100,100);} div.section div.nav h4:before{content:url(/wp/wp-content/uploads/2014/07/icon_sidebar1.png);position:relative;top:10px;} div.section div.nav ul{list-style-type:none;line-height:1.8em;} div.section div.aside{font-size:0.95em;} div.section div.aside h4{line-height:3em;margin:1em 2em;text-align:center;font-size:1.5em;} div.section div.aside dl{margin-left:170px;line-height:1.6em;position:relative;} div.section div.aside dt{position:relative;font-widght:bold;} div.section div.aside dd{min-height:2em;margin-left:0;text-indent:1em;} div.section div.aside dd a{position:absolute;background-color:rgb(255,200,200);width:8em;text-decoration:none;display:block;right:10px;} div.section div.aside dt a:before{content:"";background-image:url(/wp/wp-content/themes/stinger3ver20140327/images/no-img.png);position:absolute;top:0;left:-160px;width:110px;height:110px;display:block;background-size:cover;} div.section h2{border-width:1px 1px 0 1px;} div.section div.section,div.section * p{border-width:0 1px;} div.section * p{border:none;} div.section div.aside{border-width:0 1px 1px 1px;} div.section div.aside h4{border-style:dotted;border-width:1px 0px;border-color:gray;background-color:rgb(200,200,200);} div.section h2,div.section p,div.section div.section{background-color:white;} div.section * p{background-color:transparent;} div.header div.nav ul li ul li{background-color:rgb(255,240,240);} body{background-image:url(/wp/wp-content/uploads/2014/07/04-polish-wood.png);} div.section div.aside dl a{text-decoration:none;} div.section div.aside dl a:hover{text-decoration:underline;} div.section div.aside{background-color:rgb(255,225,225);} --> </style>
No.1です。 ＞.htmlファイルを作成してそれを編集しWebでレイアウトなどを見るといったことはわかります。 そのファイルなどをどうしたら周りと共有できるようになるのでしょうか？ 　これが作成中のウェブサイトを、閲覧できると言う意味でしたら・・・sambaじゃなくイントラネット上のウェブサーバーです。 　ネット環境のない状態でHTTPプロトコルを使ってローカルのウェブサイトに接続して、表示などを確認したり、プレゼンテーションを行なったりするのですから。 HTTPプロトコルで閲覧できないと意味無いです。 　・PHP---WordpressなどCMSを利用したウェブサイトも確認できる。 　・HTMLやCSSをルートからの絶対パスで作成できる。 　　関連ファイルへのパスが/で書き始められます。 　・CGI、PHPなどのテストもできる。 Sambaがあると便利なのは、UNIX系OSとFTPを経由せずにファイルの交換ができる。 　Sambaは、UNIXなど他のOSをWindowsのネットワークに参加させてファイルサーバー、プリントサーバーなどに使用するもので、Windwos通しでしたら簡単なフォルダー共有でも良いです。 　作成中のページには http://local.host/ などで接続できます。 　開発されているのでしたら、開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )の多いFirefoxをお使いだと思います。firefoxのアドオンに Server Switcher( https://addons.mozilla.jp/firefox/details/2409 )があります。ファイル(file：///C:\)⇔ローカルホスト(http：//local.host/)⇔リモートホスト(http：//hoge.com)が、シームレスに移動して編集確認できます。
1行ずれるのは、改行タグ（<br />）を乱用しているからではないですか？ 基本的に、改行タグ（<br />）は2個以上続けて使うものではありません。 段落ごとに空間を設けたい場合は、段落タグ（<p>）にマージンを設定します。 また、「<h1>　　　　　　　　　　暮」の半角の連打も意味がわかりません。 開始タグの直後にある半角の解釈がブラウザによって異なっていることによる表示差異ではないでしょうか？ インデントを表現したいのであれば、スタイルで「text-indent:**px;」と設定します。
display: table-cell と、メディアクエリーを組み合わせです。 table-cell もサポートしていなければ dipslay: inline-block とメディアクエリー、 それもサポートしていなければ display: block と float: left とメディアクエリーで段組み数の切り替える方法が使えます。
　スタイルシートを書き直すことになりますが、Wordpressの場合、HTML出力がまずいとスタイルシートだけではカバーできないことがあります。 　テンプレートを書き換えた上で、スタイルシートをリキッドに書き直しましょう。 　スマホはCSS3のMediaQueryが使えますので、スタイルシートを切り替えると良いでしょう。 　縦置きで眺めるときだけでよいでしょう。
return falseしてください。 onclick="gotodate(this.id); return false;"
<img src="該当画像名.jpg" alt="" style="width:auto;height:auto"> DOCTYPEが書かれていませんから、想像ですが・・
　ウェブページ製作されているならfirefoxと Firebug( https://addons.mozilla.jp/firefox/details/1843 )はお使いだと思いますが、それはp要素のもつマージンだという事は分かりますよね。 　英文の場合は、段落は前後にmarginをとって表示するのが一般的ですが、日本語は文字も大きく、新しい段落はインデントで示しますので、タイプセレクタで p{margin:0;line-height:1.8em;text-indent:1em;} のようにしておくと良いでしょう。他のp要素--例えば画像を入れるためにpを使うときは、しdiv.figure>p{text-indent:0}として上書きします。 　まだスタイルシートでのデザインを始められたばかりのように見受けられますので、今のうちに大事な事を簡単に説明しておきます。 <!doctype html> これはHTML5のDocument typeですが、そうなるとdivは安直に使えません。 Note:Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/html5/grouping-content.html … ) 　著者は他に適切な要素がないときの最後の最後の手段としてdiv要素を使用する。 　この場合は明らかに <body> <header> <h1>タイトル</h1> <nav> <p>ナビゲーション</p> </nav> </header> <section> <h2>本文タイトル</h2> <p>記事</p> <section> <h3>項見出し項見出し項見出し</h3> <p>HTML5ではh(headding)ではなくsectionの階層で階層が決まる。</p> <section> <aside> <p>本文と直接関係ない(asideな)記事。これは本文より前に書かない!!</p> </aside> </section> <footer> <h2>文書情報</h2> </footer> </body> 　ですよ。 ※HTML5 では、文書をよりよく構造化するために、次の要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　たとえ(HTML4で)DIVを使っても<div id="warapper">や<div id="leftside">はありません。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』でしたから、 <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<div class="nav"> ＿＿＿<p>ナビゲーション</p> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>本文タイトル</h2> ＿＿<p>記事</p> ＿＿<div class="section"> ＿＿＿<h3>項見出し項見出し項見出し</h3> ＿＿＿<p>記事</p> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<p>本文と直接関係ない(asideな)記事。これは本文より前に書かない!!</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿</div> </body> 　プレゼンテーションにスタイルシートを用いる最大の理由は「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」なのですから、HTMLに文書構造と関係ないことは書かないほうがメンテナンスも楽になります。例えば将来asidを右にしたいとか、スマホだと下にというとき、left-sideじゃまずいでしょ。 　そのうえで、スタイルシートでscreen対象のデザインをしていきます。 段組にfloatを使うと本文(section)内でfloatやcleaerが使えませんし、そもそも重要でないものを先に書くのはSEO的にもまずい。 [CSS2.1]<head></head>内に記述する場合。 ・たったこれだけ ・必ず基点となるセレクタを書くようにしましょう。(CSS2.1) ・グループ化,継承を活用しましょう。 <style type="text/css" media="screen"><!-- HTML5はtypeは不要,mediaはかならず指定しておく --> html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6,p{margin:0 auto;line-height:1.8em;} p{text-indent:1em;} div.header,div.section,div.footer{ width: 80%; min-width:460px;max-width:800px;/* スマホや幅広ディスプレイ用下限と上限 */ margin:0 auto;padding: 5px; position:relative; } div.header{ padding-bottom:50px; min-height: 160px; position: relative; } div.header div.nav{ height: 50px; position:absolute;bottom:0;left:0;width:100%; } div.section{padding-bottom:20px;min-height:300px;} div.section h2,div.section p,div.section div.section{ margin-left:180px; width:auto; } div.section * p{margin:0;} div.section div.section{min-width:0;min-height:0;padding:0;margin:0;} div.section div.aside{ width: 180px; position:absolute; top:0;left:0; height:100%; } /* 色づけ */ div.section div.aside p{background-color: red;} div.header{background-color:black;} div.header div.nav{background-color: silver;} div.section div.aside{background-color: aqua;} div.section{background-color: fuchsia;}/* pinkはキーワードにない */ div.section div.section{background-color:yellow;} div.footer{background-color:gray;} --> </style>
そのようにセレクタで指定すればよいです。 ＞ border=0 cellspacing=0 cellpadding=1 bordercolor="FFFFFF" 　tableには、非推奨なcellspacing、cellpadding、bordercolorあるのに、必須なsummary属性がない。 　単純にtable[summary="test1"]{}でよいですし。summaryが同じでも文書構造からセレクタ指定すればすむ事です。一般的な設定をしていても、詳細度を高くすれば上書きしてくれますよ。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) はスタイルシートを記述するより前に、完璧に理解しておくこと。 　そうしないとスタイルシートは書けないです。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html )のDATA入力で 　で検証済みのHTML4.01+CSS2.1です。 1) まず率直にHTMLで文書構造だけ書く 2) 文法チェック後、スタイルシートを文書構造に基づいて書く ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} table{border-collapse:collapse;} table tbody th,table tbody td{background-color:red;padding:0.5em 1em;} div.figure{width: 20em;font-size:0.8em;width:auto;float:right;} table tr+tr+tr td{background-color:yellow;} div.figure table tr+tr td{background-color:lime;} div.figure table tr+tr+tr td{background-color:orange;} div.figure table tr+tr+tr+tr td{background-color:fuchsia;} table tr+tr+tr+tr td+td{background-color:silver;} table[summary="コーヒー消費量2"]{font-size:1.4em;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<table border="1" summary="コーヒー消費量1"> ＿＿＿＿<caption>各評議員のコーヒー消費量</caption> ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="member">評議員</th><th abbr="cup">杯</th><th abbr="kind">種類</th><th abbr="sugger">砂糖は?</th> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>T. Sexton</td><td>10</td><td>エスプレッソ</td><td>入れない</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>J. Dinnen</td><td>5</td><td>カフェイン抜き</td><td>入れる</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>A. Soria</td><td colspan="3"><em>データなし</em></td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿</table> ＿＿<p> ＿＿＿また（他から独立して参照されるなど）挿絵的な意味でtableが使われるときがあるでしょう。 ＿＿</p> ＿＿<div class="figure"> ＿＿＿<div class="figcaption">各評議員のコーヒー消費量</div> ＿＿＿<table border="1" summary="コーヒー消費量1"> ＿＿＿＿<tbody> ＿＿＿＿＿<tr> ＿＿＿＿＿＿<th abbr="member">評議員</th><th abbr="cup">杯</th><th abbr="kind">種類</th><th abbr="sugger">砂糖は?</th> ＿＿＿＿＿</tr> ＿＿＿＿＿<tr> ＿＿＿＿＿＿<td>T. Sexton</td><td>10</td><td>エスプレッソ</td><td>入れない</td> ＿＿＿＿＿</tr> ＿＿＿＿＿<tr> ＿＿＿＿＿＿<td>J. Dinnen</td><td>5</td><td>カフェイン抜き</td><td>入れる</td> ＿＿＿＿＿</tr> ＿＿＿＿＿<tr> ＿＿＿＿＿＿<td>A. Soria</td><td colspan="3"><em>データなし</em></td> ＿＿＿＿＿</tr> ＿＿＿＿</tbody> ＿＿＿</table> ＿＿</div> ＿＿<table border="1" summary="コーヒー消費量2"> ＿＿＿＿<caption>各評議員のコーヒー消費量</caption> ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="member">評議員</th><th abbr="cup">杯</th><th abbr="kind">種類</th><th abbr="sugger">砂糖は?</th> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>T. Sexton</td><td>10</td><td>エスプレッソ</td><td>入れない</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>J. Dinnen</td><td>5</td><td>カフェイン抜き</td><td>入れる</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>A. Soria</td><td colspan="3"><em>データなし</em></td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿</table> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
内側の線と言う意味が分かりません。 サンプル上げておく。 　スタイルシート使えれば、たいていの事はできます。 tableは、それ自体のborderと、セルのボーダーで別のものです。 tableのボーダーを二重にしたいのか、--doubleじゃまずいのか？ tbodyにボーダーを引きたいのか tableの各セルにボーダーを引きたいのか その内容imgとpを囲むボーダーをつけたいのか borderのデザインは？？dotted、dashed、solid、double、groove、ridge、inset、outset ★HTMLソース内に書くのは面倒なので、<head></head>内にこのページだけ適用させるスタイルを書くほうが良いでしょう。 <table border="1" summary="test" style="border:double 10px green;border-collapse:separate;border-spacing:20px;"> ＿<tbody style="display:table;border:10px outset red"> ＿＿<tr> ＿＿＿<td style="border:10px blue inset;padding:5px;"><img src="./images/photo/01.jpg" width="480" height="360" alt=""></td> ＿＿</tr> ＿＿<tr> ＿＿＿<td style="border:10px lime ridge;padding:5px;"><img src="./images/photo/04.jpg" width="480" height="360" alt=""></td> ＿＿</tr> ＿＿<tr> ＿＿＿<td style="border:10px fuchsia groove;padding:5px;"><img src="./images/photo/06.jpg" width="240" height="180" alt=""></td> ＿＿</tr> ＿＿<tr> ＿＿＿<td style="padding:5px;border:none;position:relative;"><img src="./images/photo/09.jpg" width="300" height="300" alt="" style="dispaly:block;width:100%;height:auto;border-style:dashed;border-color;aqua;border-width:4px 4px 0 4px"> ＿＿＿＿<p style="width:100%;margin:0;border-style:dashed;border-color;aqua;border-width:0 4px 4px 4px"> ＿＿＿＿＿＿説明 ＿＿＿＿</p> ＿＿＿</td> ＿＿</tr> ＿</tbody> </table>
そんな難しいものではありません。 ＞web初心者ゆえ参考サイト等色々調べて見よう見まねでやってみたのですが、 　それでは、時間ばかりかかって、決して上達しません。 　この世界、理数系の勉強と似たところがありますね。基礎からきちんと積み上げていけば簡単で、応用が利きます。しかし、問題集をいくらこなしても応用は利きませんね。 　HTML/スタイルシートを使用するのは、「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」でしたね。 　HTMLでひたすら文書構造だけをマークアップして、スタイルシートでscreen(パソコンやスマホ)用、handheld(携帯電話、フィーチャホン)用、print(印刷機)用にプレゼンテーションを指定していきます。 　すなわち、<h1>ここは見出し</h1><p>ここから一つの段落</p><ul><li>順不同リストの項目</li><li>二つ目の項目</li></ul>とマークアップさえされていれば、 ・ロゴ画像のすぐ横にメニューボタンが綺麗にならべようが ・画像の中心部から横１列にしたいのですが ・ウィンドウを縮めると連動してテキストが勝手に動いて段分かれ 　も自在に出来るでしょう。 他のくだらないサイトをまねするのではなく ・HTML 4.01 仕様書邦訳( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・CSS 2.1仕様（日本語訳）( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　くらいは、しっかりと読んでおきましょう。 　それから始めたほうが断然早いですよ。 　
せっかくHTML5も書いたので追加して置きます。 　質問タイトルは{floatを使うと・・・}になっていますが、このような段組に はfloatを使わないほうが良いです。 ・主要でない要素を先に書く必要がある。 ・段内でfloatが使えない ・marginなどの指定が厄介 　先のサンプルをHTML5にしてみました。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造 を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』に使用してありますから、そのままHTML5に直せたのです。leftのような文書 構造に関係ないclass名は使わない。左じゃなく右や下に配置しようとしたとき 混乱する。 ★HTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) ★改善点 　スマホ縦置きのような狭い画面460px以下では、デザインが変わります。ウィ ンド幅を縮めてみてください。 ★HTMLもスタイルシートも、とっても簡単で分かりやすいと思います。数年後に 手を入れたくなっても楽でしょう。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="ORUKA"> <!--[if IE]> <script src="http://html5shiv.googlecode.com/svn/trunk/html5. … <script src="http://css3-mediaqueries-js.googlecode.com/svn/t … <![endif]--> ＿<style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6,p{margin:0;line-height:1.6em;} p{text-indent:1em;} header,section,footer{width:90%;min-width:460px;max-width:880px;margin:0 auto;padding:0;} section{position:relative;min-height:460px;} section h2,section p{margin:0 150px 0 0;} section section{width:auto;min-width:0;min-height:0;margin:5px 150px 0 0;} section section p{margin:0;min-height:0;} section nav{position:absolute;width:150px;top:0;height:100%;right:0;} /* 色づけ */ body{background-color:gray;} header{background-color:aqua;} section{background-color:white;} section section{background-color:silver;} section nav{background-color:fuchsia;} footer{background-color:orange;} @media screen and (max-width:460px){ header,section,footer{min-width:200px;} section{position:relative;min-height:0;} section h2,section p{margin:0;} section section{margin:0;} section nav{position:static;width:100%;height:auto;right:auto;} } --> ＿</style> </head> <body> ＿<header> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</header> ＿<section> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<section> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿＿<p>HTML4.01でclass名が文書構造を示す物にしてあるため、HTML5にする ときはそのまま&lt;div class="header"&gt;&lt;/div&gt;は&lt;header&gt;&lt; /header&gt;とすれば良いです。</p> ＿＿</section> ＿＿<nav id="contentTable"> ＿＿＿<h3>目次</h3> ＿＿</nav> ＿＿<section> ＿＿＿<h3>チェックすべきこと</h3> ＿＿＿<ol> ＿＿＿＿<li>DTDはstrictであるか</li> ＿＿＿＿<li>DOCTYPEは標準モードで動作するよう適切に書かれているか</li> ＿＿＿</ol> ＿＿＿<p> ＿＿＿＿基本的にこれだけを守っておけば、現行のブラウザでの差は出ないはず です。 ＿＿＿</p> ＿＿</section> ＿＿<nav id="contentTable"> ＿＿＿<h3>目次</h3> ＿＿</nav> ＿</section> ＿<footer> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistory"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2014-07-02</dd> ＿＿</dl> ＿</footer> </body> </html>
私は経験ないです。 * {margin:0 auto;} こんなことしません。そもそもmargin:0;pdding:0;はセンタリングには関係ないです。 マージンは外のpaddingは内側の余白 　*は全称セレクタで詳細度は0ですが、カスケーディングの仕組み上、デフォルトのすべての要素のmargin,paddinを0にしてしまいます。 　そのため、本来は存在するはずのすべての要素のmargin,paddingを再度、すべて書き加えなければならなくなります。blockqutte,ol,ul,dl,li・・などすべて登場するたび再設定なんて無駄はしない!! 5.3 全称セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6.4 カスケード処理( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　はスタイルシートを利用するときの基本ですので、これだけは完璧に理解しておくこと。プロパティとか算出値などは、必要なとき見ればよい。 たぶん、原因は違うところにあります。 サンプル・・・とっても単純なサンプルです ★タブは＿に置換してあるので戻す。 ★のDATAで検証済みのHTML4.01strict ★IE7以降、firefox,Opera,Googlechrome,Safariなどすべてで同じになるはず 　とはいっても 　　IE5,5.5ではセンタリングされない 　　IE6以前ではnav,asideが低いまま 　で使用には差し支えないはずです。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:400px;max-width:880px;margin:0 auto;padding:10px;} div.section{position:relative;min-height:300px;} div.section h2,div.section p{margin:0 160px;} div.section div.section{width:auto;min-width:0;min-height:0;margin:5px 160px;} div.section div.section p{margin:0;min-height:0;} div.section div.nav,div.section div.aside{position:absolute;width:150px;top:0;height:100%;} div.section div.nav{left:0;} div.section div.aside{right:0;} /* 色づけ */ body{background-color:gray;} div.header{background-color:aqua;} div.section{background-color:white;} div.section div.section{background-color:silver;} div.section div.nav{background-color:fuchsia;} div.section div.aside{background-color:lime;} div.footer{background-color:orange;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿＿<div class="nav" id="contentTable"> ＿＿＿<h3>目次</h3> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h3>チェックすべきこと</h3> ＿＿＿<ol> ＿＿＿＿<li>DTDはstrictであるか</li> ＿＿＿＿<li>DOCTYPEは標準モードで動作するよう適切に書かれているか</li> ＿＿＿</ol> ＿＿＿<p> ＿＿＿＿基本的にこれだけを守っておけば、現行のブラウザでの差は出ないはずです。 ＿＿＿</p> ＿＿</div> ＿＿<div class="nav" id="contentTable"> ＿＿＿<h3>目次</h3> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<h3>補足</h3> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistory"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2014-07-02</dd> ＿＿</dl> ＿</div> </body> </html>
結果だけを求めて、適当と思われるソースをひっぱってきて・・ なんて最悪です。 $・・はSassの書き方ですよね。CSSもHTMLもその段階でSassまで飛躍しても役に立たないです。 jaquery、mediaqueryも混同されているような・・ さらに!importantの意味はごぞんじないと思われます。 レスポンシブデザインとは、CSS2.1の時代に存在した、media別スタイルシートの拡張で、端末のscreenの幅によってスタイルシートを切り替える手法です。 　その前提として、サイト自体はリキッドで製作してあることが前提と言っても良いでしょう。 1) まずブラウザ間の誤差をなくするためHTML4.01以降ではstrictを使用(XHTML1.1,HTML5にはstrictdかない) 2) DOCTYPEをブラウザが標準モードで動作するよう適切に記述する。 　　・・・これでブラウザ間の誤差はほとんど解決する。 3) HTMLには文書構造以外書かない。 　　・・・デザインに合わせてHTML書くとスタイルシートで困る。 4) それをスタイルシートを用いてリキッドで製作する。 　　・・・ たったこれだけです。必要なら 5) mediaqueryを使ってディスプレイサイズに合わせてスタイルを変更する。 mediaquery( http://www.w3.org/TR/css3-mediaqueries/ )は、media( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )の拡張です。 !importantは最重要宣言と言われ、 6.4.1 カスケード処理の順序( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6.4.2 !important規則( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　を読まれたら分かるように、示されたような用途に使用するものではありません。 単純にリキッドでデザインし、その上にmediaquery(jqueryじゃない)でスタイル鋪切り替えれば済む話です。 ・つぎはぎではなく、ちゃんと基礎から順を追って身につけましょう。そうしないと応用はできません。それは、HTMLから必要なように見受けます。
kyabochaさんのｃｓｓは、考え方はある意味間違っていますが、記述はほぼ合っています。 cssの余分なスペースを取ると、思った通りになると存じます。つまり、プロパティの前のスペースに、余計な物が入り込んでいるため解釈されていないだけです。スペースは削除するかtabか「半角スペース」に置き換えてみてください。それと、その記述だと、影が上に乗る気が。透明gifで問題ないのですかね？ 次に間違っている部分ですが、ｈｔｍｌ＋ｃｓｓでは、装飾的なことはｃｓｓを使い、ｈｔｍｌには入れないという基本理念があります。ですので、影をｈｔｍｌに入れるのは、間違いだと思います。私ならこんな感じで影を付けると思います。こっちだと、影はgifでなくても、jpgでも問題なく使用できます。 <div class="staffphoto"> <img src="写真.jpg" width="160" border="0"> </div> .staffphoto img{ background:url(影.gif) no-repeat 5px 5px; padding:0 5px 5px 0; }
　肝心なCSSの部分です。 　こんな簡単なものですむのです。 ★いくつか、示された画像と変更しています。 ・幅はリキッドにしてあります。スマホも超幅広ディスプレイにも対応しています。 　ただし、フィーチャホン(ガラケー)、印刷用は用意していません。 ・sidemenueとされている部分は、navやasideに変えてあります。 　将来デザインを変更したり、フィーチャーホン用のスタイルではsideにしないので ・nav(contentTable)やasideの高さは、本文に合わせてあります。 　これを、示された図の右側のようにfloatで回り込ませることも出来ますが 　そうすると、本来主ではないaside的な記事を先に書くと言うまずいことになる。 ★DWでは、このようなスタイルシートのセレクタは、決して書いてはくれませ ん。そのため、ひとつひとつにidを振るなど、HTMLもスタイルシートも訳が分か らなくなります。 　セレクタは、どんな優秀なオーサリングツールを使っても、著者が自分で書か なければなりません。 　もちろん、HTMLにどのようなclass名、あるいは要素が適しているかもツール は教えてくれません。 <style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6,p{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section{ width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px; } div.section{position:relative;padding-bottom:150px;} div.section h2,div.section p,div.section div.section{ margin:0 215px 0 195px; } div.section div p{margin:0;} div.section div.section{ min-width:0;width:auto;padding-bottom:5px;min-height:150px; } div.section div.nav,div.section div.aside{ position:absolute;top:0;height:auto;margin:0 0 100px 0; } div.section div.nav{width:190px;left:0;} div.section div.aside{width:210px;right:0;} div.footer{position:fixed;bottom:0;width:100%;} div.footer h2,div.footer dl{ width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px; } /* おまけ 色づけ */ body{background-color:gray;} div.header{background-color:rgb(255,160,160);} div.section{background-color:silver;} div.section div.nav{background-color:aqua;} div.section div.aside{background-color:rgb(160,255,160);} div.section div.section{background-color:rgb(200,255,160);} div.footer h2,div.footer dl{background-color:orange;} --> </style>
Wikiシステムのほうが向いていると思いますが・・ 　⇒ウィキ( http://ja.wikipedia.org/wiki/%E3%82%A6%E3%82%A3% … ) ログインして表示は特に難しいものではなく、簡単なものならそのディレクトリのみbasic認証すれば良いです。
javascriptの影響はありませんか？ importantもダメですかね？
こんなところで聞いたってまともな答えは得られない。なぜ仕様書を確認しないのですか？？ 4.3.3 パーセント値( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6.1 指定値、算出値、実効値( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 8 ボックスモデル( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 10.2 内容の幅: 'width'プロパティ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　特に「10.1 "包含ブロック"の定義」 　これだけの情報が絡むので、ここで説明しきれる内容ではありません。 bodyに幅を指定しても、その祖先にstaticでない参照すべき親コンテナブロックがないのですから無意味です。 html{margin:20px;position:relative;} body{width:50%;margin:0 auto;} 　仕様書だけはかならず目を通しておきましょう。そうしないとつまらないところで足踏みしてしまう。 <body style="background:red;width:100%"> aaaa </body> 　こんなHTMLはありえません。こんなことしてるとだめです。bodyにはブロック要素しか置けません。 <!ELEMENT BODY O O (%block;|SCRIPT)+ +(INS|DEL) -- document body -->( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) それがないため、ブラウザは匿名ボックスを作ってしまいます。そうすると、スタイルシートがうまく機能しなかったり・・ 　⇒メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。.( http://jigsaw.w3.org/css-validator/#validate_by_ … )
＞望みどおりに実現できてしまっているのでしょうか？ 　出来てないです。! 　左に配置する要素(ここでは#left)の内容「あの文字数」を減らせば一目瞭然です。 　それは、floatで後続の内容が回り込んでいるためですね。 　これを回避するためには、#right p{margin-left:200px;}とすると回り込む要素がなくなると、自身のmargingが生きてきます。(floatではmarginは相殺されない) 　⇒Box model - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　まだ始めたばかりだと思いますので、細かいことも含めて指摘しておきます。 ・HTMLは文書構造だけ記述する。 　2.4.1 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・idやclassは文書構造を補完するため 　「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　container,left,rightというのは(内容の意味)文書構造じゃないでしょう。 　header,footerはその意味から一つの文書内に行くとも登場する可能性があるので、idじゃなくclass。HTML5の新しい要素を見ると <body> 　<header> 　　<h1></h1> 　　<nav></nav> 　</header> 　<section> 　　<section> 　　　<article> 　　　　<header></header> 　　　　<section></section> 　　　　<footer></footer> 　　　</article> 　　</section> 　</section> 　<footer></footer> </body> のようになることを考えても ・<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"・・略・・ 　XPもサポート終了、HTML5が勧告直前でいまだにTrnsitinalはさすがにないでしょう。 　1999年のHTML4.01の勧告以来『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 ・*{} 全称セレクタでブラウザのもつすべてのmarginを０にしてしまうと、登場するすべての要素に対してスタイルを追加しなければならなくなります。どこかの糞オーサリングツールが行なっている手法ですが、必要なとき必要なものだけリセットしましょう。 ・#headerではなく、きちんと基点なるセレクタを書きましょう。 　「単体セレクタは型セレクタもしくは 全称セレクタのいずれかの直後に、0個以上の属性セレクタ、IDセレクタ、擬似クラスが任意の順序で続くものである。( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )」 　後方互換でCSS1の書き方で通用はしますが・・。 ・<a href="#" onClick="history.back(); return false;">戻る</a> 　javascriptを使用するときはjavascriptが無効なUAのことも考慮すること。 [サンプル] ☆Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) ☆タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=UTF-8"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} div.section{position:relative;min-height:400px;} div.section div.nav,div.section div.aside{position:absolute;top:0;width:150px;height:100%;padding:0 5px;font-size:0.9em;} div.section div.nav{left:0;} div.section div.aside{right:0;} div.section div.section{width:auto;min-width:0;margin:0 160px;min-height:0;} div.section h2,div.section p{margin:0 160px;} div.section div p{margin:0;} /* 色分け */ body{background-color:gray;} div.header{background-color:aqua;} div.section{background-color:white;} div.section div.aside{background-color:lime;} div.section div.nav{background-color:silver;} div.footer{background-color:fuchsia;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<div class="section" id="section1"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿＿<div class="section" id="section2"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿＿<div class="nav" id="contentTable"> ＿＿＿<h3>目次</h3> ＿＿＿<ol> ＿＿＿＿<li>１項</li> ＿＿＿＿<li>２項</li> ＿＿＿＿<li>３項</li> ＿＿＿</ol> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<h3>補足記事</h3> ＿＿＿<p>ここには、本題から外れた(aside)、本題とは直接関係しない記事を書く</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
　Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) の右でDATA入力にして、貼り付けてチェックしてみたら・・？？
class属性の指定に対応していないのでは？ style属性で指定してみてください。 <div style="float:left">あああ</div> <div>あああ</div>
帰ってきたので、休憩時間中に少しだけ・・。 スマホがメインと言うことで、HTML5で作成したとします。 1) まずHTMLは率直に文書構造だけをマークアップします。 　　HTML5では、これは特に重要になります。 　　・・DIVは原則使いません。 　　・・文書構造は要素で示します。 　　HTML4.01などでは、DIVにclassやidを併用します。(HTML5の新しい要素が参考) 2) スタイルシートで、その文書構造に基づいてデザインしていきます。 ★タブは＿に置換してあるので戻す。 ★画像の縦横比に関わらず横幅の一定比で表示される。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <!--[if IE]> ＿<script src="http://html5shiv.googlecode.com/svn/trunk/html5. … ＿<script src="http://css3-mediaqueries-js.googlecode.com/svn/t … <![endif]--> ＿<link rel="stylesheet" href="css/style.css"> <style media="screen"> <!-- html,body{margin:0;padding:0;} header,section,footer{width:100%;min-width:470px;max-width:900px;margin:0 auto;padding:5px;} section figure{ width:70%; min-width:470px; margin:0 auto; position:relative; border:solid 5px white; } section figure img{ width:100%; display:block; height:auto; } section figure figcaption{ width:100%; background-color:rgba(0,0,0,0.6); text-indent:1em; position:absolute; left:0;bottom:0; padding:5px 0; } section figure figcaption p{ margin:0; padding:5px 10px; text-indent:1em; line-height:1.6em; } body{background-color:black;color:white;} a:link{color:yellow;} a:visited{color:maroon;} a:hover{color:lime;} a:active{color:fuchsia;} --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="/Top">Top</a></li> ＿＿＿＿<li><a href="/books">Books</a></li> ＿＿＿＿<li><a href="/links.html">Links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section> ＿＿<section> ＿＿＿<h2>A smaller heading</h2> ＿＿＿<figure> ＿＿＿＿<img src="./images/photo/01.jpg" width="480" height="360" alt=""> ＿＿＿＿<figcaption> ＿＿＿＿＿<p> ＿＿＿＿＿＿そこに掲載する画像の下部にキャプションを入れたいと思っています。デザインでいうと下記サイトに掲載されているようなキャプションです。 ＿＿＿＿＿</p> ＿＿＿＿</figcaption> ＿＿＿</figure> ＿＿</section> ＿＿<section> ＿＿＿<h2>A smaller heading</h2> ＿＿＿<figure> ＿＿＿＿<img src="./images/photo/02.jpg" width="540" height="720" alt=""> ＿＿＿＿<figcaption> ＿＿＿＿＿<p> ＿＿＿＿＿＿上記のサイトと違う点は画像の周りに5pxの白い枠を作成したこと、画像のキャプションには半透明の黒い画像を予め作成し背景として使用していることです。 ＿＿＿＿＿</p> ＿＿＿＿</figcaption> ＿＿＿</figure> ＿＿</section> ＿＿<section> ＿＿＿<h2>A smaller heading</h2> ＿＿＿<figure> ＿＿＿＿<img src="./images/photo/03.jpg" width="800" height="800" alt=""> ＿＿＿＿<figcaption> ＿＿＿＿＿<p> ＿＿＿＿＿＿スマホサイトの場合は、縦で見る時と横で見る時で横幅が変わります。 ＿＿＿＿＿</p> ＿＿＿＿＿<p> ＿＿＿＿＿＿HTML4などでは&lt;div class="figure"&gt;のようにする。 ＿＿＿＿＿</p> ＿＿＿＿</figcaption> ＿＿＿</figure> ＿＿</section> ＿＿<aside> ＿＿＿<h3>Something aside</h3> ＿＿</aside> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
どの端末でも早く見せようと言うのが目的のウェブページのようですね。 なので、ブラウザによって差が出る方が自然です。 これは、ユーザー側、サイト運営者側でどうにかできることではない要素が多すぎるので、あまり最適化と関係はなさそうです。 サイト運営者側でできることと言えば、スクリプト処理を最適化することぐらいかと思います。が、多分最適化しても、IEの採点は低いままじゃないかな？ IEがスクリプト処理を強化してアップデートすれば、採点は高くなるかと思います。 採点は、どっちかというとブラウザのスクリプト処理の採点じゃないかと。 googleは、SEO関係の最適化ページに見せかけて、マイクロソフトをスクリプト処理が遅いと笑っている感じでしょう。 単純にchromeアピールページかと。アップデートか何かしたのかな。私はGoogleyoutube自体の運営方針が卑劣でキモイので関わりたくないしGoogle関係は自分のコンピュータにインストールしたくないので、最近のchrome事情は詳しくは分かりませんが… 実際体感的には、IEは8辺りまでスクリプト処理が明らかに重かったのですが、最近はもはや人間の体感では差は分からないレベルなので、今度は数値でマイクロソフトを貶めてアピールしようと言うことなのかもしれませんね。
＞スマホ用のメニューを作成しています。 ＞viewportを入れると 　まず、ここが問題ですよ。 　そもそもHTMLでウェブページを作成する最大の目的は 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 　HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　PC用もスマホ用も、mediaタイプはscreen( http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … )ですから、まずリキッドで作成し、それで足りない部分をmediaqueryなどを使ってカバーするのが常道です。 ＞.globalnavi ul{ と書かれていますが、CSS2以降は本来は基点となるセレクタから書き始めます。ただし、「全称セレクタが単体セレクタの唯一の構成要素でない場合、"*"を省略してよい。( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )」ですので、.globalnaviの場合は、*(全称セレクタ)が省略されているとみなされます。 　後方互換のために、それで有効ではあるのですが、例えば、同じclass名を他の要素にもつけたいときなど、後々メンテナンスするときなどに困ります。 div.header div.nav{} div.section div.nav{} div.footer div.nav{} 　とかできるでしょう。 お待たせしました。本題です。HTML5として書くと、 (header内のnavはサイトマップだと分かっているのでしたらclass名をつける必要はない) (インデントは全角スペースに置き換えてあります。) (当然ですが背景黒、文字白はscreenにしか適用されません。) <header> 　<h1>タイトル</h1> 　<nav> 　　<ul> 　　　<li><a href="/home">Home</a></li> 　　　<li><a href="/menu1">menu1</a></li> 　　　<li><a href="/menu2">menu2</a></li> 　　　<li><a href="/menu3">menu3</a></li> 　　　<li><a href="/menu4">menu4</a></li> 　　</ul> 　</nav> </header> <style media="screen"> <!-- body,html{margin:0;padding:0;} header,section,footer{ width:100%;min-width:470px;max-width:1000px; position:relative; margin:0 auto;padding:5px; } header h1{margin-top:40px;} header nav ul,header nav ol li{ list-style:none; margin:0;padding:0; text-align:center; line-height:30px; } header nav ul{ width:100%; position:absolute; top:0;left:0; font-size:0; } header nav ul li{ font-size:16px; position:relative; display:inline-block; width:20%;height:30px; } header nav ul li a{ display:block; margin:0.5px:width:auto;height:auto; } /* 分かりやすいように色分け */ body{background-color:gray;} header,section,footer{background-color:black;color:white;} a:link{color:yellow;} a:visited{color:maroon;} a:hover,a:focus{color:red;background-color:yellow;} a:active;{color:lime;} --> </style> <style media="print"> <!-- /* 印刷用スタイル */ --> </style> <style media="handheld"> <!-- /* フィーチャーホン(携帯電話用) */ --> </style>
＞css,htmlは同じ場所に入れています 同じ場所であればcssの指定は、以下のようになります。 　　css/main.css　→　main.css また、gifファイルのパスも間違っていますよ。
ブラウザを変えて1通り動作チェック。話はそれからだ。 P.S. 最近のブラウザはセキュリティチェックが高く設定されてるので、別窓リンクを「ポップアップ」と見なして自動的にブロックする機能がDefaultで働いてる事もある。 他には同時に別の何かJavascriptが裏で走ってる場合、上手くリンクが機能しないと言う事例をgoogleのフォーラムで見た覚えあり。何か心当たりは？ 考えられる要素を全て書き出し、それを愚直に1個1個ずつ潰していくしか方策は無い。Try＆Error
　Illustrator,PhotoshopとCSS3がどうしても結びつかない。ウェブデザインされていたにしてはあまりに突拍子もないので・・ 　CSS3はグラフィクを作るのではなく、プレゼンテーションを指定するものです。画像の切り貼り加工は出来ない。HTML5のSVG( http://ja.wikipedia.org/wiki/Scalable_Vector_Gra … )でしらInkscapeを使ってイラストは作れるでしょうが・・ 　Illustrator,Photoshopは、プレゼンテーション指定するものではなく、イラスト(ベクター画像)や写真(ビットマップ)を処理するソフト。Illustrator,Photoshopは、部品を作るソフトに過ぎません。 　CSS3はまだ勧告にいたっていない。いまだにしばしば変更が続いています。勧告にいたっているのは多くのモジュールのうちCSS Color、CSS Namespaces、Selectors Level 3だけ。 ＞他によい本やサイトを 　そういう状況だから本はない。W3Cの草案をひたすら追いかけて、ブラウザの対応状況を見ながら進めていくしかない。 勧告済みの二点だけ Selectors Level 3( http://www.w3.org/TR/css3-selectors/ ) CSS Color Module Level 3( http://www.w3.org/TR/css3-color/ ) 　IllustratorやPhotoshopでウェブデザインされていた経歴から、およそのことが想像できます。HTMLとCSSを基礎から学びなおす良いきっかけを与えられたと考えましょう。 　今後ウェブはHTML5が主流となるでしょう。その時に絶対に役に立ちます。 ★HTMLはデザインのためじゃない 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 　HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTMLの略歴( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ★HTMLは文書構造をマークアップします。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になるということが、経験的に知られている。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　HTML5/CSS3では、それがより徹底されます。すなわち、 <header> 　<h1>ページタイトル</h1> 　<nav><ol></ol></nav> </header> <section> 　<h2>本文</h2> 　<section> 　　<h3>下の階層</h3> 　　<aside>このsectionと直接は関係ない記事</aside> 　</section> 　<nav>このセクションの目次</nav> </section> <footer></footer> 　のようなHTMLに対して section section aside{ position:absolute; right:0; width:20%;min-width:100px; } のようにスタイルシートを書くことになります。 HTML4.01でも指摘されていた ・テキストを画像に置き換えて表現する。 ・余白制御のために画像を用いる。 ・ページレイアウトの目的で表を用いる。 ・HTMLでページを作らずにプログラムに頼る。 　(注)Illustratorで作って切り貼りするような手法 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) は、より使えなくなります。 　HTMLは、IllustratorやPhotoshopといったDTP的なものとは、まったく逆の発想によるものです。DTPはどのように表現するかから出発しますが、HTMLはどういう内容かから出発します。そうすることで、スクリーンリーダーは見出しは男声の大きめな声で読み上げてくれるでしようし、印刷するときはfixedされている物は各ページに印刷してくれますし、ディスプレイには黒字に白地で表示していても印刷するときは反転させるとか・・。点字端末には点字で出力してくれます。 　これを機会に、HTML/CSSを基礎から復習しましょう。IllustratorやPhotoshopの経験のある新人には、すべて忘れろ!!と言ってます。 　CSS3の必要はありません。 ・HTML 4.01 仕様書邦訳( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・CSS 2.1仕様（日本語訳）( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) をまず一通り読んでおきましょう。 　それだけでIllustratorやPhotoshopで作成されたページより、はるかによいものができるでしょう。 　
皆がワードやIllustratorでページを作らず、HTMLを使用してウェブページを作るのは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　という目的の言語だからです。これが唯一最大の目的と言っても良い。 　あなたがお使いのノートとか、Mac bookなんて狭い範囲じゃありません。最近は様々な解像度のスマホも訪問してくるし、レガシーな携帯電話も、超幅広のPCでも、縦型画面のデスクトップでも訪問されます。 　そもそも最初から画面サイズを固定してしまったのが原因かと思います。
いえ、不可能ではありません。 　ただnavをHTML内で最初にもって行くか、header全体をスタイルシートで左に置くかだけです。・・・いずれも好ましい文書構造ではないですよね。 　なお、その範囲ではabsoluteはまったく必要ありません。 　あなたのHTMLの文書構造が分かりませんし、具体的なスタイルのイメージがつかめない部分があるので、実例はかけません。 　先のHTMLで、「navを先頭に持っていく」「header全体を左」なら簡単にできますから試してください。 　ただ、繰り返しになりますが、プレゼンテーションはあくまで文書構造に反したものになってはならない、もしそうしたらユーザビリティの上で齟齬が生じます。
boxサイズは、ウェブ標準だとmargin,paddingの値を引いた物のサイズです。 ┏━━━━━━━┓ ┃┌─────┐┃ ┃│← width→│┃ ┃└─────┘┃ ┗━━━━━━━┛ margin 　padding しかし、互換モードだと ┏━━━━━━━┓ ┃┌─────┐┃ ┃← 　width　→┃ ┃└─────┘┃ ┗━━━━━━━┛ だったりします。 　その差が出たのでしょう。 　そのような差を回避するために、HTMLのDOCTYPEを標準モードで動作するようにしておかないと、このようなトラブルに頭を悩ますことになります。 　⇒DOCTYPE スイッチ - Google 検索( https://www.google.co.jp/search?q=DOCTYPE%20%E3% … ) ＞昔から受け継がれてきたサークルのサイトの更新担当をしているのですが、 ＞テーブルレイアウトとcssレイアウトがごちゃまぜで、わけの分からない ＞スペーサーｇｉｆなども多用されていたりと、悲惨な有様なので、必死に ＞修復しているところです。 　御愁傷様としか言いようがない。まさに 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから こうしたテクニックは、特定の人々、特定の時代状況でしか成り立たず、すべての人々、すべての時代状況において成り立つものではないのだ。こうしたテクニックの例を挙げよう。 　・メーカー独自拡張のHTMLを使う。 　・テキストを画像に置き換えて表現する。 　・余白制御のために画像を用いる。 　・ページレイアウトの目的で表を用いる。 　・HTMLでページを作らずにプログラムに頼る。 　こうしたテクニックによって、Webページはより複雑化し、限られた環境にしか適応しなくなり、相互運用性問題に悩まされることとなり、障害を持つ人々にアクセス障壁が設けられてしまう。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Style Sheets in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　を絵に描いたようなものだと推察します。 　この指摘が1999年のHTML4.01の勧告から15年も経過しての状況なのですから・・・ 　WYSIWYG（What You See Is What You Get)のWebオーサリングツール( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … )を使用して「HTMLでページを作らずにプログラムに頼」って作成したときの致命的な欠陥ですね。 　私は、WYSIWYGで作成されたウェブサイトの修正が仕事の一部であり、最大の負担ですから、よくわかります。 　今後HTML5の時代に移行すると思いますが、そうなるとWYSIWYG的なツールでの作成は困難になるでしょう。だって、この部分はheaderだな、この部分はasideだな、いやfigureだ、なんて判断はツールには不可能ですし、「DIVは他に適当な要素がないときの最後の手段( http://www.w3.org/TR/html5/grouping-content.html … )」と言われても・・ 対策:最善な物から 1) 全面的にテキストエディタで書き換える。 　　私の経験からは結局一番早かったりする。SEO的にも最善ですし 　　『HTMLエディタで作成するシンプルなコードはSEO（検索エンジン最適化）にも効果的である( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … )』 2) DOCTYPEスイッチを標準モードで動作するように指定する。 　極力、strictに書き換える。 　「HTML文書を作る場合には、・・・【中略】・・・strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　これって、期待はずれの動作を防止するには重要 3) すべてのHTMLの属性やタグにおけるプレゼンテーションを消してスタイルシートに置き換える。 　
手がつけられない・・ Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) でチェックすれば分かります。 あまりに酷すぎてスタイルシートではどうしようもない。 <center><BR><right>なんてないし。 　そもそもHTMLでページを作るのは【ただひとつ】 ＿＿＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 『CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。.( http://jigsaw.w3.org/css-validator/#validate_by_ … )』 　なのです。 　
>ワードプレスで吐き出されているページに載っている画像については動作しないようでした。 その吐き出し方はどのようにしていますか？ ワードプレスの投稿で画像挿入をした場合はclassがつきますので、そのclassセレクタにスタイルが指定されていたり、widthやheightが書かれているはずですので、 投稿時に編集画面のコードビューでclassなどの指定を消すか、 テーマファイルのCSSを書き直さないと無理です。
レスポンシブデザインは、閲覧者の環境にあわせ、最適な表示をするための手法の一つです。 考え方の違いで、その手法はさまざまです。 WEBの基本は、すべての閲覧者に対し、その情報を正しく伝えるというものです。 デザインとは全く異なった考え方から生まれたものなので、その辺を正しく学ぶ必要があるのでは？・・・ あらゆるデバイスに対し、閲覧者の環境に合わせ、最適な表示を行う！ この基本を理解すれば、なぜレスポンシブにするのかが、ご理解いただけるのでは？・・・
＞複数のdivを横並びさせる 　これ意味不明です。DIVは「id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」であって、デザインのためじゃありません。HTML5では「Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/html5/grouping-content.html … )--他に適切な要素がないときの最後の手段として使用すること」となります。 　プレゼンテーション(表現)をスタイルシートで行なう最大の目的は「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」です。そこや、「スタイルシートは・・・HTMLにおける制限されたプレゼンテーション機構に取ってかわる。スタイルシートでは、・・・その他様々なプロパティの設定が簡単にできる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」書かれているように。 　ここ、HTML/スタイルシート書く時に最も重要な根幹に関わる部分です。しっかり読んで復習しておきましょう。 　例えば、ナビゲーションリストとして次のようにマークアップされているものとしたら、HTMLには一切手を加えないでスタイルシートで ・複数のdivを横並びさせる時一つだけ中央 ・ウィンドウトップ（または最下段）に固定して横並び ・左または右に縦に配置 ・画像の上にボタン的に配置 ・ディスプレイ幅に合わせて中央に横並び 　など、自由自在にHTMLに頼らずにデザインできます。先でデザインの変更もHTMLには無関係にできますよ。 <div class="header"> 　<h1>ページタイトル</h1> 　<div class="nav"><!-- ナビゲーションだよ!!HTML5ではnav --> 　　<ol><!-- 序列リストだよ --> 　　　<li><a href=""></a></li><!-- リストの項目とリンクだよ --> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　</ol> 　</div> </div> 　ちなみにHTML5だと <header> 　<h1>ページタイトル</h1> 　<nav> 　　<ol> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　</ol> 　</nav> </header> さて、ここで「３つのリンクを横並びさせる時一つだけ中央」とデザインしたければ div.nav{ width:100%; min-width:470px;/* スマホ縦置き用 */ max-width:1000px;/* 幅広ディスプレイ用 */ line-height:40px;/* ボタンの高さ */ position:relative;/* 子孫の位置やサイズの基準とする */ margin:0 auto; height:40px; } div.nav ol{ list-style:none;/* リストとは表示しない */ margin:0;padding:0;/* ブラウザのもつスタイルを消す */ } div.nav ol li{ margin:0;paading:0;/* ブラウザのもつスタイルを消す */ top:0;left:0;width:100%;/* div.nav内に */ text-align:left; position:relative; } div.nav ol li+li{ text-align:center;/* 二つ目は中央 */ } div.nav ol li+li+li{ text-align:right;/* 三つ目は中央 */ } div.nav ol li a{ display:inline-block;/* ブロック */ width:25%;min-width:200px;max-width:300px;/* サイズを指定 */ text-align:center; background-color:yellow; position:relative; z-index:100; } div.nav ol li+li a{top:-40px;} div.nav ol li+li+li a{top:-80px;} とHTML見なくても書ける。他にもいろいろ方法はあります。 他のデザインも考えて見ましょう。(HTMLは触らず) 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 全体サンプル ★タブは＿に置換してあるので戻す。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATAでチェック済みHTML4.01strict+CSS2.1 ★スマホから幅広ディスプレイまで対応 　印刷には適用されない(印刷プレビューで確認) <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} /* ここに上記をコピペ */ body{background-color:gray;} div.header,div.section,div.footer{background-color:silver;] --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<div class="nav"><!-- ナビゲーションだよ!!HTML5ではnav --> ＿＿＿<ol><!-- 序列リストだよ --> ＿＿＿＿<li><a href="/">Top</a></li><!-- リストの項目とリンクだよ --> ＿＿＿＿<li><a href="/Products">Products</a></li> ＿＿＿＿<li><a href="/Contact">Contact</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
ライブラリを使われているならそのライブラリが他のライブラリとの併用をサポートしていないか、 ブラウザが対応していないか、 書き方が間違っているか、 それ以外に何らかの不具合や適用できない理由があるかもしれません。
＞ＰＣ用とスマートフォン用でトップページのみデザインを変えているサイトで、 ＞トップページからそれぞれのページへのリンクが、以前は問題無く繋がっていたのですが、 ＞スマートフォン用のみ、いつからか外れてしまいました。 　デザインが変わるだけで変わるはずありません。 　リンクが外れているのではなく、他の要素がかぶっていてリンクできないのでは？？ポインターのデザインが変わらない。 　スマホ用のスタイルシートを見直してみましょう。 ＞スマートフォン用のトップぺージは“i”というフォルダ内に入れ、 　始めには「トップページのみデザインを変えている」ですので、矛盾しますよ。 　「ＰＣ用とスマートフォン用でトップページのみデザインを変えている」は、ひとつのトップページをPC用とスマホ用でデザインを変えているのですから、別のフォルダ(ディレクトリ)にあるということはない。 「トップページのみデザインを変えている」とは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　
header1,header2とは分からないidですが・・ 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　勧告(1999)後15年になるのに理解されなくて、HTML5では、この反省からDIVは極力使わないで構造を明確にする新しい要素が追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　ここをしっかり理解しておかないとデザインをちょっと変えたいとき困りますし、HTMLのメンテナンスも大変になる。 ・#header1,header2は、本当のところなんでしょう。見出しなら、<h1></h1>で良いです。 　「テキストを画像に置き換えて表現する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」はちょっとまずいので、実際の内容はなんなのでしょう。 ・横に並べる方法は、inline-block、でもinlineでもcontent:url()でも、もちろんfloatでも構いません。内容によって選択します。 ・ディスプレイの最大幅、最小幅の想定は？ ・画像はウィンドウ幅に合わせて伸縮させるのか？ 　<----余白---->[-----画像-----]10px[--画像--]<----余白----> 　[--像-]10px[画像] ・それとも画像は伸縮させずに余白で制御するのか 　<----余白---->[---画像---]10px[画像]<----余白----> 　　　　<余白>[---画像---]10px[画像]<余白> 　HTMLさえ、きちんとマークアップされていれば、いかようにも出来ます。 例えば、標準的な <body> 　<div class="header"> 　　<h1>ページタイトル</h1> 以下省略・・・ 　だけで良いのですよ。それで画像を２枚並べられる。
どこでそのようなHTML/CSS身につけられたか分かりませんが、それでは上達しないです。 スタイルシートを導入する最大の目的は「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」です。読まれたら分かるように、HTMLには文書構造しか書かないのです。デザインのためにHTMLを書かない!!!。それによってデザインの自由度も良くなるのです。 　XHTMLは今後は使われる機会は減ると思います。より簡単なHTMLが主流となるでしょう。(XHTMLは他のプログラムと連携するなど限定されていくでしょう)。またtransitinalは使うべきではないHTML5ではなくなります。 　『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 ★原因は、pのマージンです。直接的な解決は div.TopArea p{margin:0;} 　⇒8.3.1 マージンの相殺( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　ページを作成されているなら開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )の豊富なfirefoxお使いだと思いますが、そのアドオンfirebugで見ると、なにが影響しているかすぐに分かります。 　 ＞ページの上部に横100%、高さ35pxのメニューエリアを設け、その部分だけを固定させスクロールしないようにしたいと思います。 　ここを根本的に直しましょう。 「ナビゲーションリストを表示領域の最上部に幅100%で固定したい」 　と考えます。ナビゲーションリストですから、HTMLは 　　　　　　　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <body> 　<div class="header"> 　　<div class="nav"> 　　　<ol> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　</ol> 　　</div> 　</div> のようにマークアップされているはずですね。この時点でデザイン考えたらダメです。そのためのスタイルシートですから・・ 　DIVは文書構造を補完するために使います。 　id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　ちなみにHTML5では、文書構造をより明確にするための要素が追加されますから、 <body> 　<header> 　　<nav> 　　　<ol> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　</ol> 　　</nav> 　</header> となります。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　のDATAで検証済みのHTML4.01strict + CSS2.1 ★HTMLには文書構造しか書かれていないので、先でheaderの下だろうがページの左右だろうが下だろうがいくらでも変更できる。 ★リンクの色が白なので印刷されないので、印刷時はスタイルは適用されない。 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} div.header h1{margin-top:40px;/* 少しあける */} div.header div.nav{ position:fixed;/* ウインドウに固定 */ top:0;left:0;/* 位置を指定 */ width:100%;height:35px;/* 幅と高さを指定 */ background-color:black;color:white; line-height:35px;/* 行中央に */ text-align:center; min-width:480px;/* 最小幅を指定 */ } div.header div.nav ol{ list-style:none;/* リストを解除 */ margin:0;padding:0; width:100%;/* 直近のstaticでない親を参照 */ position:relative;/* 自らもstaticでなくする */ } div.header div.nav ol li{ margin:0;padding:0; display:inline-block; width:20%; position:relative; } div.header div.nav ol li a{ display:block; width:100%;height:100%; color:white; text-decoration:none; } div.header div.nav ol li a[href]:hover{ background-color:gray; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="/">トップ</a></li> ＿＿＿＿<li><a href="/products">製品</a></li> ＿＿＿＿<li><a href="/manual">マニュアル</a></li> ＿＿＿＿<li><a href="/info">会社情報</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
それでしたら、それぞれの項目(子孫要素)に擬似要素を追加すればよいだけでは？？ 先の例で言うと、印刷用スタイルシートのh3のように・・ あるいは、それぞれの子孫要素に背景をつけるとか・・ 　HTMLがわからないので、具体的には示しませんが、方法はあるかと思います。
端的にいえば、サイトを構築するのに特別なソフトは必要ありません。 TeraPadなどのテキストエディタにタグを手打ちして、まったく問題ないです。 HTML5やCSS3を勉強するのにDreamWeaverが絶対というわけでもないので、そこは悩まないでもいいですよ。 仕事で使用していますが、DreamWeaverはサイトの構築や修正にかかる時間を軽減するソフトだとたまに感じます。 タグの入力短縮や候補表示、色分け表示などは、打ち間違いやタグの閉じ忘れを防止するに役立ちます。 ブラウザ互換性のチェックや、複数のページの一括置換機能など、色々と『便利だなぁ』と実感することもあります。 こういう面もあるので、メリットばかりではないですが、個人的には使えて良かったと思います。 何より自分はうっかりミスを極端に怖がるので助かるなと感じます。 逆にコーディングに自信がある人にとっては、必要のないソフトだと思います。 ですので、古いバージョンでもDreamWeaverを持っているのでしたら、一度触ってみるのも良いと思います。 時間がある状況なら、そうやって色々と試してみるのも一つの勉強になると個人的には思っているので。 「至急知識が必要で！」というようでしたら、慣れた形式で勉強するのが良いと思いますが…。 というか、もうDreamWeaverを触っていたら、的外れなことを上から目線で言ってしまって申し訳ないです。 すみません、話が逸れました。 HTML5やCSS3を学び、サイトを構築するにあたって、特別なソフトは必要ないです。 先の方も仰っているように、テキストエディタとサーバー、FTPがあればできます。 なので、DreamWeaverでもエディタに手打ちでも、どちらとも併用でも、Jaguar555さんが「いい！」と思った方法で勉強、構築すると良いと思います。
HTMLが不正だとそうなる・・・という単純な理由です。 body直下にはブロック要素しか入らない <!ELEMENT BODY O O (%block;|SCRIPT)+ +(INS|DEL) -- document body --> 　　　　　　　　　　　　↑ブロック要素とスクリプトだけ ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) いきなりimg要素を入れたら、ブラウザのDOM解釈時に匿名ブロックがおかれてしまう。 1) style要素は<head></head>内に 2) id="wrap"、id="bottom"はないでしょう。 　「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 (例) <body> 　<div class="header"> 　　<h1>タイトル</h1> 　</div> 　<div class="section"> 　　<h2>本文</h2> 　</div> 　<div class="footer"> 　　<h2>文書情報</h2> 　</div> </body> [HTML5]だと、「文書をよりよく構造化するために、要素が新しく追加され( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」たので、 <body> 　<header> 　　<h1>タイトル</h1> 　</header> 　<section> 　　<h2>本文</h2> 　</section> 　<footer> 　　<h2>文書情報</h2> 　</footer> </body> となるべきところ <head> ・・・【中略】・・・ <style type="text/css" media="screen"> html,body{margin:0;padding:0;} div.header,div.header,div.section{width:630px;margin:0 auto;padding:5px;} div.header{height:100px;background:url(top.gif) div.section{min-height:200px;background:url(middle.gif) repeat-y center center;} div.footer{height:100px;background:url(bottom.gif);} </style> </head> ★コンテンツでない画像は背景 　将来画像を書き換えるときスタイルシートを外部ファイルにしておけばそれだけ変えれば済む。 　HTMLには文書構造しか書いてないのでメンテナンスが楽。デザインの自由度も高くなる。 不正なHTMLによる匿名ブロックはしばしば悩ませます。 　⇒横並びdivで一部の初期高さがずれる理由について - Webデザイン・CSS - 教えて！goo( http://oshiete.goo.ne.jp/qa/8620878.html ) 　スタイルシートを書く前に、Lintなどで文法チェックしてからスタイルを書き始めましょう。
No.1です。 出力の期待値をまちがえました。 test2.cssとなっていますが、test.cssの間違いです。 正しくは。 arScssConfig: { 　"test": { 　　src: 'sass/test.scss', 　　dest: 'style/test.css' 　}, 　"sass2/test": { 　　src: 'sass/sass2/test.scss', 　　dest: 'style/style2/test.css' 　} }
tr:beforeにheightを指定する方法があるみたいです。 http://stackoverflow.com/questions/8822082/how-t …
例えば、標準的な構成だとして・・ 文書構造が分かりやすいようにHTML5で書くと <body> 　<header> 　　<h1>見出し</h1> 　</deader> 　<section> 　　<h2>本文</h2> 　　<nav> 　　　<h3>目次</h3> 　　</nav> 　</section> 　<footer> 　　<h2>文書情報</h2> 　</footer> </body> [HTML4]などでしたら <body> 　<div class="header"> 　　<h1>見出し</h1> 　</div> 　<div clas=="section"> 　　<h2>本文</h2> 　　<div class="nav"> 　　　<h3>目次</h3> 　　</div> 　</div> 　<div class="footer"> 　　<h2>文書情報</h2> 　</div> </body> ですかね。 　navに最低限必要と思われる高さをsectionにmin-heightで設定しておいて、navをsectionを基準にabsoluteで配置するのが率直でしょう。
No.1です。 基本的な考え方は、absoluteとfixedの組み合わせです。 　absoluteもfixedも、それが含まれる部分から切り離されるため、他の要素はあたかもそれが存在しなかったように振舞います。 　⇒9.3.1 位置決め方式の選択: 'position'プロパティ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) absolute 　絶対配置のボックスは通常フローの範囲外である。これはボックスが以降の兄弟に影響を与えないことを意味する。 fixed 　handheld、projection、screen、tty、tvメディアタイプの場合、ボックスはビューポートに対して固定され、スクロール時に移動しない。 　注意点は、absoluteは、staticでない直近のコンテナブロックの位置を基準にし、fixedはビューポート(表示範囲)を基準にするという事です。 　absoluteで指定されていたものが、スクロールされて末端まできたら、fixedに切り替わるわけです。 ＞メイン部分（#main）をfloat:rightからfloat:leftにかえると、 　floatは使えないことが分かると思います。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 文書構造的には <body> 　<header> 　</header> 　<section> 　　<nav> 　　　<ol></ol> 　　</nav> 　</section> 　<footer> 　</footer> </body> とする。 ★HTMLより前のHTMLでしたら、それぞれ「id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」のですから、<div class="header">と読み替えてください。 詳しい説明や方法は参考ページを挙げておきます。 ＞画面を一定量スクロールさせたあと、左側のサイドバーが固定される方法をお教えいただけないでしょうか？ 　なお、この方法は欠点もあります。左側--ナビゲーションをクリックしてリンクしたらナビゲーションの位置が変わってしまうということになり、ユーザーインターフェース的には使いづらいものになります。 　当初からfixedにしておいて、そこに収まる程度のメニューにして、必要ならプルダウンにしておくほうが圧倒的に使いやすくなると思います。だから私は使わない。 　リンク先のページでは、head内にカレントのメニューは開いたままにするスタイルを追加する。 　⇒サイドメニューなどを一定の範囲でのみ position:fixed させる jQuery Ex Flex Fixed - Cyokodog :: Diary( http://d.hatena.ne.jp/cyokodog/20110904/exflexfi … )
＞赤で囲った部分を見出しタグにと考えたのですが、ここではリストタグが使われています。そもそもHTML的に見出しタグは必要ないでしょうか？ 　私も経験が在るのですが、初心者がデザインを目的にHTMLを書こうとするからうまく行かなくなるのです。 　⇒2.4.1 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　⇒14.1 スタイルシートの概説( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　をしっかり読んでみてください。 　HTMLには文書構造だけを記述することに心がけます。 　それをどのようにプレゼンテーションするかは、もっぱらスタイルシートに任せるのです。No.2の例を見られたら分かるように、スタイルシートがない状態で機械にも内容が分かるように書かれていることが前提です。プレゼンテーションはその文書構造に反するものになれば、ブラウザで閲覧---プレゼンテーションとしても失格でしょう。 　示された添付画像の内容から考えると <div class="news"> 　<ol> 　　<li> 　　　<dl> 　　　　<dt><img src="" width="" height="" alt=""></dt> 　　　　<dd> 　　　　　<h3>なんたらかんたら</h3> 　　　　　<ul> 　　　　　　<li>説明</li> 　　　　　　<li>説明</li> 　　　　　</ul> 　　　　</dd> 　　　</dl> 　　</li> 　の繰り返しでも、良いかもしれません。まずスタイルシートなしでHTMLをマークアップしてみます。 　その上でスタイルシートで、このように表現（プレゼンテーション)したいと考えてスタイルシートを書いていけば良いのです。それが現実的にも最も楽です。HTMLをメンテナンスするのも泣くになりますし、デザインを大きく変える事もできますし、印刷用、スマホ用、スクリーンリーダー用にスタイルシートを書くのも楽になります。 　そうすると ＞ 画像の横にテキストを縦方向中央に配置したい ＞ 画像の右側にテキストを縦中央揃えにしたく、下記のように記述しました。 ではなくて、 Q: 見出し<h3></h3>の頭にアイコン的な画像をおきたいのですが Q: 画像を説明したリストがあるのですが、画像の説明を画像の横にtableのようにデザインしたい Q: 文章中にいくつか挿絵や表があるのですが、キャプションはその右に配置したい 　という質問になるでしょう。 　それぞれスタイルシートはHTMLを見なくても A: h3{padding-left:100px;} 　　h3:before{content:url();} A: div.news ol{display:table;} 　　div.news ol li{display:table-raw;} 　　div.news ol dl dt,div.news ol dl dd{display:table-cell;} ・・・とHTML見なくても書いていける。 まずきちんとしたHTMLを記述し、意味的な構造の正当性はチェックできませんが、少なくとも文法はLintなどでチェックして、HTMLを完成されてから、スタイルシートを書いていく。
ブラウザの幅でスタイルを変更するのでしたら、CSS2.1のmedia別スタイルシートの拡張、CSS3のmediaqueryを使用します。javascriptのようにjavascriptの有効無効等に関係しませんから。 　従来 <link rel="stylesheet" type="text/css"> media="screen"> <link rel="stylesheet" type="text/css" media="print"> のようにされていたと思いますが、それを <link rel="stylesheet" media="screen and (max-width: 480px)" href="mobile.css" > とか追加する。【外部スタイルシートを使用する場合】
＞この場合、ボタン要素は必ずしも画像で表示する必要はありませんので、画像の配置はCSSで行うのがいつも仰る「仕様に則った」考え方であると思うのですが、違うのでしょうか。 　確かに微妙なところです。 　このフォーム+画像は、商品説明などでも使われる手法ですから、どこで線を引くかは微妙なところです。画像を使用する場合は、必ずalt属性にテキストを入れておくので良いでしょう。 　もちろん、<input type="submit" value="ログイン">でも、A要素によるリンクのようにデザインすることも可能です。 <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <style media="screen"> <!-- button,input[type="submit"]{border:none;background-color:transparent;font-size:1em;} button:hover,input[type="submit"]:hover{cursor:pointer;} input[type="submit"]{ display:inline-block;width:192px;height:43px; overflow:hidden;text-indent:-100em; background-image:url();/* width:192px height:43pxの画像 */ } form p{margin:2px auto;} form p label{display:inline-block;width:5em;text-align:right;} form p label:after{content:" :";} --> </style> </head> <body> ＿<header id="login"> ＿＿<h1>ログイン</h1> ＿＿＿<form action="./"> ＿＿＿＿<p> ＿＿＿＿＿<label for="my_id">ID</label> ＿＿＿＿＿<input id="my_id" type="text" size="10" maxlength="10" name="my_id"> ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿<label for="my_pass">パスワード</label> ＿＿＿＿＿<input id="my_pass" type="password" size="10" maxlength="10" name="my_pass"> ＿＿＿＿</p> ＿＿＿＿<p><button><img src="./image/b-3.gif" width="62" height="50" alt="ログイン"></button></p> ＿＿＿＿<p><a>パスワードを忘れた方はこちら</a></p> ＿＿＿＿<p><input type="submit" value="新規会員登録（無料）"></p> ＿＿＿</form> ＿</header> ＿<section> ＿＿<h2>本文</h2> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
＞html5にはインライン要素やブロックレベル要素の概念がないことを知りました。 　そんなことはありません。HTML5では構造とプレゼンテーションが完全に分かれていますから、プレゼンテーションの意味としての「ブロック要素」「インライン要素」がHTMLに現れてこないだけで、それぞれの要素がプレゼンテーションとしてなんであるかは、スタイルシートに書かれています。 ★ nav要素のdisplay値のデフォルトは、blockです。 <header> 　<nav> 　　<ul> 　　　<li><a href="/a">a</a></li> 　　　<li><a href="/b">b</a></li> 　　　<li><a href="/c">c</a></li> 　　　<li><a href="/d">d</a></li> 　　　<li><a href="/e">e</a></li> 　　</ul> 　</nav> </header> 横並びさせるのにtabeはないでしょう。 header nav{width:100%;position:relative;text-align:center;line-height:40em;} header nav ol{list-style:none;margin:0;padding:0;font-size:0;} header nav ol li{display:inline-block;margin:0;padding:0;position:relative;font-size:16px;width:14%;} header nav ol li+li{margin-left:2px;} とか・・ 　⇒横並びdivで一部の初期高さがずれる理由について( http://oshiete.goo.ne.jp/qa/8620878.html )
発想が間違っている---厳しくて申し訳ない。でも大事なことなので HTMLには文書構造、プレゼンテーションはスタイルシートで行います。 ＞例えばあるCSSではnav要素とarticle要素（更新情報のお知らせ欄）をheader要素に入れる ＞のに対し、別のCSSではnav要素のみをheader要素に入れ、article要素はsection要素内に ＞表示させたい、となった場合、同じHTMLを使用することは難しいのでしょうか。 　本来、ヘッダの一部であるナビゲーションを本文ブロックに入れる--文書構造を変える。あるいは、ナビゲーション自体が本文の主たるコンテンツであるのにヘッダーに入れるという発想は正しくありません。 　また、articleはこの場面ではおかしいですね。articleは内部にheader,section,footerを持つと期待される完結した記事(article)です。完結しているのですからその内容が外に出て行くのはおかしい。 　ナビゲーションのプレゼンテーションを変更するふたつの方法を示しておきます。 ★サイト全体のナビゲーションであり、それが、そのページの主たるコンテンツでない場合はHTMLは <header> 　<nav></nav> </header> <section> 　本文 </section> 　とマークアップされているはずです。 　headerをプレゼンテーションしているブロック内にこれを配置する方法は、今さらですので省きます。 　これを、本文(section)の右脇に表示したい場合は header{ 　　position:relative;/* static以外 */ } header nav{ 　　position:absolute; 　　width:160px; 　　top:100%; 　　right:0; } で、headerの下、右に配置されます。 ★サイト全体のナビゲーションであるが、それが、そのページの主たるコンテンツの場合 　例えばそのサイトのトップページなどです。その場合は <header> </header> <section> 　本文 　<nav></nav> </section> 　ですので、 これをheaderの上に・・ header{ 　　padding-top:40px; } section[ 　　position:static; } section nav{ 　　position:absolute; 　　top:0;left:0; 　　width:100%; } headerの下なら section{ 　margin-top:40px; 　position:relative; } section nav{ 　position:absolute; 　top:-40px; } 　文書構造とプレゼンテーションは分けなければならないが、文書構造に反したプレゼンテーションになるのは、HTMLに問題があります。article内のnavが、無関係の外に出て行くはずがない。articleではなくdivなりでマークアップすべきでしょう。 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　にサンプルがある
＞確認にはchromeでF12を押して出てくるウィンドウを使っていますが 　これはfirefox+firebugが圧倒的に有利です。 　firefoxは開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )を初めとしてアドオンが豊富なことですかね。 ＞これはまず基本的にDIV内にFORMを敷くということが誤りだということなのでしょうか？ 　そうです。formの内部に直接行内要素は置けません。formが登場した時点でその前後に匿名ボックスが出来てしまいます。 ＞ただ分からないまま書いて、その度lint 　lintの良いところは、理由と対策も示してくれる。それを読まなきゃダメです。芋づる式に色々な知識が見につきます。 　欠点は、文法上の誤りは指摘してくれるが、根本的なマークアップ自体はチェックしてくれない。例えば、 　<div><a href="/">トップ</a></div> 　<div><a href="/product">製品</a></div>　 　<div><a href="/manual">マニュアル</a></div> はエラーにならない。「これはナビゲーションですし、並列な情報が並んでいるので順不同リストでマークアップするほうがよい」・・・なんては言ってくれないです。 ＞その分時間もかかるのでなんとかしてこういう誤りの法則のようなもの、をあらかじめ分かるようになっておきたい 　もっとも早いのは、仕様書を徹底的に読んでおくこと。すくなくとも全体の流れとどこを調べればよいか位は・・・。急がば回れ、変な「付け焼刃」で積み上げていくより、根本を理解してからのほうが圧倒的に上達は早いです。 ＞DIVで並べる想定の箇所がOL/LIに変わっておりますが、inline-block化してDIVを並べることそのものに問題があるということでしょうか？ ★HTMLでこれが最も大事な--最重要なポイントなのです。 　1) 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　2)『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　DIVは、「文書の構造を補完するため」であって、「デザインのため」じゃありません。 　ところが、あなたが参考にされた多くのサイトのように実際には「デザインのため」に使用されている例がとても多い。理解されてこなかった!!。そのために 　3)『HTML5 では、文書をよりよく構造化するために、次の要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』 　　そして、「Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/html5/grouping-content.html … )」(--著者は他により適切な要素がないときの最後の最後の手段としてDIV要素を使用することを強く推奨する。) 　　となります。 　よって ＞DIVで並べる想定の箇所が 　はHTMLを作成する上で最も犯してはならない誤りなのです。 　￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ 　どのようにプレゼンテーションするかはスタイルシートに任せて、ここはナビゲーションリストだから、そのようにマークアップするべき。 　誤解されないように!!断じてきれいに横に並べるというデザインのために「<div>ではなく<li>を使っている」わけではありません。・・・結果はそうであっても・・・DIVでも可能です。 　デザインを考えずにとにかく徹底的に文書構造を示すようHTMLを記述するというのは、HTMLをワープロやDTP( http://ja.wikipedia.org/wiki/DTP )のひとつだと思って歩んでこられた方には、とてつもなく大きな壁だと思います。登山するのに道を誤って沢に下りてしまった---、元の道に戻るのは苦労します。 　しかし、私も含めて皆ここを乗り越えてきました。 　面白い例を紹介しておきましょう。Chrome以外のブラウザで!!（Chromeは代替スタイル扱えない） ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　このページを表示させてブラウザの[表示]→[スタイル(シート)]へ進み、色々なスタイルを選択してみてください。HTMLにプレゼンテーション的な要素はまったくないために、自在にデザインできるのです。印刷プレビューやウィンドウ幅を伸縮させたり、フォントサイズをCtrl + ＋/－で変更しても良いでしょう。 ★まず仕様書を通しで読んでみましょう。 　HTML 4.01 仕様書邦訳( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　CSS 2.1仕様（日本語訳）( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) （解説） １．たぶん折り返しをするような必要がないはずなのになぜdiv test5だけが一つ沈み込んでいるのか？ 　本来あるべきブロックがないために匿名ブロックが作られる。(HTMLの文法誤り) ２．div test1-5の間で横に奇妙な隙間がでてきている根本的な原因は？ 　ユーザエージェントは、語間スペースの出力処理に際しては、連続する空白類の入力があった場合は1つにまとめてしまう必要がある。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　改行やタブは空白文字ですから、ここに空白文字がひとつあるように整形される。 　よって、 　div.header div.nav{position:absolute;top:0;width:100%;font-size:0;}/* li間の空白文字を0 */ 　　このフォントサイズを2pxにすれば2px空く ３．cssのinline-block等の属性を変えずに隙間を詰めることはできるか？ 　　上記が回答
ユーザー側が自動で設定するのはむつかしいですが、 自分でやるなら、簡単にできます。 フレーム設定が基本ですが、 単に<TABLE>でもできます。
positionにtopという値はありません。 　⇒Full property table - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　　static | relative | absolute | fixed | inherit です。 詳しくは、 　⇒'position'( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) #test1 {} #test2 {} 　こんなCSS書いてたら、自分を含めて誰にも分からない。原因はもちろんHTMLにあるのですが・・ 　推測の域を出ませんが、ブロック要素になっている。 ＿＿＿＿＿＿＿＿＿＿＿＿＿＿ここから 整形 　　デフォルトでは、ブロックレベル要素は行内要素とは異なるように整形される。 一般に、ブロックレベル要素は新しい行を開始し、行内要素は新しい行を開始しない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで 　7.5.3 ブロックレベル要素と行内要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )より ＞（画像はヘッダー部分です。） 　でしたら、HTMLは <div class="header"> 　<h1>見出し</h1> 　<h2>見出し</h2> </div> 　のようになっているはずですね。 ・・『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　そしてスタイルシートは div.header{position:relative;} div.header h1,div.header h2{height:59px;line-height:59px;text-align:center;} div.header h1{margin:0 300px 0 0;width:440px;} div.header h2{position:absolute;top:0;right:0;width:300px;} /* 色づけ */ div.header h1{background-color:red;} div.header h2{background-color:aqua;} とかになります。 　これだと、 ・スタイルシート見ただけでHTMLの構造が分かるし、HTML見なくてもスタイルシート書ける。 ・HTMLには文書構造しか書いてないので、メンテナンスが楽 ・デザインは自由に変更できる。
デザインのためにHTML書かない!!--先でデザイン変えるとき困るし、何のために「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」かわからない。 <body> 　<div class="header"> 　　<h1>ページタイトル</h1> 　　<h2>サブ見出し</h2> 　　<div class="nav"> 　　　　<h3>ナビゲーション</h3> 　　</div> 　</div> とする。 html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:1000px;margin:0 auto;padding:5px;} div.header{min-height: 270px; background-image: URL(./images/background/sky.jpg); } div.header h1{ float:right; top: 20px; right: 20px; height: 60px; width: 550px; text-align:center; line-height:60px; position:relative; z-index:10; } div.header h1:before{ content:url(./images/background/white550_60.gif); position:absolute;top:0;left:0; opacity:0.5; z-index:-10 } div.header h2:after{content:"";clear:both;display:block;white-space:pre} div.header div.nav{background-color:yellow;} ・スマホや狭いディスプレイから幅広まで対応 ・ユーザーがフォントサイズを変更してもよい ・border-radiusと、background-color:rgba(255,255,255,0.5)のほうが本来の方法
スタイルシートに取り掛かる前に、HTMLを根本から学びなおす必要があります。 ・・・厳しいですが、そのほうがはるかに早く上達できます。・・・ a要素--行内要素--内にDIVは置けません!! ★今のページをAnother HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html )でチェックしたらよいです。 ★スタイルシートを使ってデザインする最大の目的は 　1) 構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　　文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になる 　2) 豊富なプレゼンテーション 　　スタイルシートでは、行間の設定やインデントの設定、テキスト色や背景色、フォントのサイズとスタイル、その他様々なプロパティの設定が簡単にできる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　上記のリンク先は必ずしっかり読んで理解すること ★DIVの使い方も含めHTMLの基本が出来ていません。 　デザインを目的にHTMLが書かれていますが、HTMLは文書構造をマークアップするものです。出生はSGMLです。 　『プレーンテキストのみを用いて、「タグ」を使うことによってデータに意味を持たせることが考えられた。( http://ja.wikipedia.org/wiki/SGML#.E8.83.8C.E6.9 … )』 　<h1>は見出し)heading>、<p>は段落(Paragrph)、<li>はリストのアイテム(List Item) 　それで足りないときにDIVやSPANを使って 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　(ここが理解され難かったためHTML5では新しく構造を示す要素が追加されて、DIVやSPANは原則使わなくなります。) 　Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/2012/CR-html5-20121217/grou … ) 　適切な要素がないときの最後の最後の手段としてdivを使うことを強く推奨する。--とね 　また、スタイルシートのセレクタも基点となるセレクタを書かれていませんが、本来は書くべきです。 　と全般的に基礎が全く出来てない上にCSS3などを積み上げてらっしゃる。それでは崩れ落ちます。 　IE11は、他のウェブ標準ブラウザと同じでハックは必要ありません。もしIE11で崩れるならfirefoxやChromeでも崩れるはずです。 　標準モードで動作するようにDOCTYPEを記述し、HTML/CSSが正しければIE8以降のブラウザでは崩れはないはず。 　HTMLは文書構造しか書きませんから・・こんなシンプルなものでよい。 　class名などもデザインではなく文書構造を示すようにする。もちろん無駄なものは書かない。書く必要はない。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="/" title="トップページ">Home</a></li> ＿＿＿＿<li><a href="/about" title="当サイトについて">about</a></li> ＿＿＿＿<li><a href="/album" title="写真・画像置き場">Photo</a></li> ＿＿＿＿<li><a href="/twiter" title="ツイッター - Twitter -">Twitter</a></li> ＿＿＿＿<li><a href="/contact" title="お問い合わせ">Mail</a></li> ＿＿＿</ol> ＿＿</div> ＿＿<div class="form"> ＿＿＿<form action="./"> ＿＿＿＿<h2>サイト内検索</h2> ＿＿＿＿<p> ＿＿＿＿＿<input type="text" name="q" maxlength="200" value="%search_word"> ＿＿＿＿＿<input type="image" src="pngファイル(15px*14px)"> ＿＿＿＿</p> ＿＿＿</form> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
PC用のサイトをスマホで見た時、PCで見た状態のまま（画像や文字も縮小されて）表示されてしまうという認識で良いのでしょうか。 それとも、スマホのブラウザの端をはみ出てPCサイトが表示されてしまうというお話でしょうか…。 どちらにしてもviewportが絡んでいるのではないかと思います。 運営されているサイトのmetaタグに、 <meta name="viewport" content="width=device-width"> を追加してみてください。 スマホはブラウザ幅を擬似的に表示します（これは端末によって幅が違います） viewportは、ざっくり言えばこれらのブラウザ幅に合わせて表示させるために必要なタグです。 参考になりそうなサイトを2つほど挙げておきます。 http://tech.nitoyon.com/ja/blog/2013/02/15/viewp … http://www.tagindex.com/html5/page/meta_viewport … 意図されている事がこれまでのお答えで合っているようであれば、とりあえず『viewport』で検索してみると良いと思います。 これ以外にスマホサイトにも耐えられる画像やテキスト、コンテンツ幅の計算などは色々と面倒な場合があるので、こだわりがあるなら調べてみてください。 応用すればレスポンシブ対応のサイトも作れますので、知識として持っておくと良いです。 自分なりに解釈をしての回答なので、間違っていたら申し訳ないです。 サイト運営、頑張ってくださいね。
プロジェクトは、最大５人まで！これ以上になると、収集がつかない！ 納期は、十分あるとは思いますが、構成するスタッフの能力がどの程度なのかによる。 まずは、システムの流れを徹底して分析、検討することが大切なのでは？・・・ 私の知る医療関係のシステムでは、とんでもない状況になっているところがあります。 まずは、必要なデータと文章を入手し、効率的な分類を考え、データ化するものと、変数化するものを選びだすことから、始められては、いかがでしょうか？・・・
CSSの括弧が全角になってますねー
No.2です。 えらく冗長だと思ったら重複してますね。 <style type="text/css"> <!-- html,body{margin:0;padding:0;background-color:gray;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;background-color:white;} div.header{position:relative;} div.header div.nav{width:100px;position:absolute;top:100%;left:0;} body>div.section h2, body>div.section>p,body>div.section>div.section{ margin-left:100px; width:auto;min-width:0; } div.header div.nav ol,div.header div.nav ol li{margin:0;padding:0;list-style:none;} div.header div.nav ol li{width:100px;height:40px;position:relative;overflow:hidden;} div.header div.nav ol li a{display:block;width:100%;height:100%;text-indent:-100px;} div.header div.nav ol li a:after{display:block;position:absolute;left:100px;top:0;opacity:1;} div.header div.nav ol li a:hover:after{opacity:0;} /* 時間的変化 */ div.header div.nav ol li a:hover:after{ -moz-transition-property: opacity; -webkit-transition-property: opacity; -o-transition-property: opacity; -ms-transition-property: opacity; -moz-transition-duration:1s; -webkit-transition-duration:1s; -o-transition-duration:1s; -ms-transition-duration:1s; -moz-transition-timing-function:ease-in-out; -webkit-transition-timing-function:ease-in-out; -o-transition-timing-function:ease-in-out; -ms-transition-timing-function:ease-in-out; } /* ここまで */ div.header div.nav ol li a[href="/"]{background-image:url(./images/navi/home2.gif);} div.header div.nav ol li a[href="/"]:after{content:url(./images/navi/home.gif);} div.header div.nav ol li a[href="/books"]{background-image:url(./images/navi/books2.gif);} div.header div.nav ol li a[href="/books"]:after{content:url(./images/navi/books.gif);} div.header div.nav ol li a[href="/profile"]{background-image:url(./images/navi/profile2.gif);} div.header div.nav ol li a[href="/profile"]:after{content:url(./images/navi/profile.gif);} --> </style> 　まあ、デザインのためにHTMLは書かないようにしましょう。その意味でTABLEは禁止!! 　先でナビゲーションを横に並べようとしたり、増えたりするたびにHTMLやスタイルシートを書き直すなんて羽目になります。 ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) で、ブラウザの表示メニュー→スタイル(シート)と進んで、スタイルを色々と変えたり印刷プレビュー見たりしてみましょう。HTMLにはデザイン的要素は全くないので、どのようにもデザインできますね。 　それをしないことには、始まりません。
　いまどきXHTMLとは・・・少し古いですが、ひょっとして他のアプリケーションから出力されるとか、他に利用する目的があるとかですかね。XHTMLでしたら、文法的な間違いは出にくいとは思いますが、作るのは大変ですね。 　対象がそのブラウザでは、ブラウザ間の差異は基本的に起きないはずですが・・ 1) 標準モードで動作するようにDOCTYPEスイッチは適切か？ 2) strictで作成されているか--HTML4.01/XHTML1.0の場合 　　※XHTML1.1以降はstrictしかない 　Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　などでチェック 3) デザインにfloatを使ってないか？ 　この三点を守っていれば、IE6以降で差が出る事は基本的にありません。
CSS3のcolumnsプロパティを使う。 [例]HTML5 + CSS3 ベンダーフィックスつき ★タブは＿に置換してあるので戻す。 ★対応ブラウザが少ないので時期尚早でしょう。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <style media="screen"> <!-- html,body{margin:0;padding:0;background-color:gray;} header,section,footer{ width:800px; margin:0 auto; padding:5px; background-color:silver; } section section{ width:90%;background-color:white; columns:220px auto; -moz-columns: 220px auto; -webkit-columns: 220px auto; -o-columns: 220px auto; -ms-columns: 220px auto; } section section p{ text-indent:1em; margin:0;line-height:1.8em;} --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">段組</h1> ＿</header> ＿<section> ＿＿<h2>段組の簡単な例</h2> ＿＿<section> ＿＿＿<p> ＿＿＿＿CSS。横並びBOXに長文textを流し込む方法はありますか？ ＿＿＿</p> ＿＿＿<p> ＿＿＿＿CSSについてです。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿高さ固定の横並び３連BOXに長文テキストを流し込む場合。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿ブロック要素で区切るでもなく、センテンスの終わりでもない箇所で、複数のBOXにまたがるCSSになります。。。。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿レイアウトのBOXサイズは固定だが、 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿テキストは文章の途中で隣のBOXへ移り、文字サイズの変更 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿（ブラウザやOSの違い）で隣のBOXへ移る位置も変わる。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿これを実現させたいのですが、、、。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿まぁ紙媒体においての、１ページ３段組みレイアウトの流し込みをHTMLで可能なのか？という質問になります。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿文書作成ツールやデザインアプリでは当たり前な方法ですが。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿CSSでも可能なんでしょうか？ ＿＿＿</p> ＿＿</section> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
div.nav ol li{ 　　width: 19%; /* とかでないと、折り返される。 */ 　　display:inline-block; 　　position:relative;/* 忘れてた */ }
<link rel="apple-touch-icon" href="favicon_big.png"> ですかね。
スタイルシートはCSSだけじゃない!!! XHTMLだと、XSLT使うかもしれませんし・・ 　HTML5では、scriptはjavascript、スタイルシートはCSSがデフォルトとなりましたから、不要です。 HTML4.01(XHTML1.0,XHTML1.1)以前は必須です。 <meta http-equiv="Content-Script-Type" content="text/javascript"> <meta http-equiv="Content-Style-Type" content="text/css"> <style type="text/css"> <script type="text/javascript"> はセットで必要です。 なぜ仕様書は目を通さないのですか？？ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 14.2.3 ヘッダスタイル情報: STYLE要素 　type = content-type [CI] 　この属性は、当該要素内容のスタイルシート言語を指定し、デフォルトスタイルシート言語を上書きする。 スタイルシート言語は、例えば「text/css」のように、MIMEタイプで指定する。 　この属性にデフォルト値はなく、著者が指定しなければならない。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Style Sheets in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　疑問があったら、まず仕様書を確認する。 HTML 4.01 仕様書(邦訳)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　→要素索引 　　→STYLE 　　と進めば出てきます。 ※仕様書だと正確で正しい情報が手に入りますし、付随した多くの知識も手に入ります。 　一度通して読まれることをお勧めします。このような時、どこを見ればよいかがすぐ分かる。 ※その上でわからないことを聞かれると効率的です。 　また、 Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　(右上のDATAでソースをチェックできる)でも、指摘されるはずです。 　製作されているなら開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )の豊富なfirefoxお使いだと思いますが、 Html Validator( https://addons.mozilla.jp/firefox/details/249 )や Firebug( https://addons.mozilla.jp/firefox/details/1843 )でもわかるはずです。
＞CSSとhtml記述を提供頂けますと幸いでございます。 　HTML(大文字)は、プレゼンテーションのために書くわけではないので関係ないでしょう。 　⇒CSS記載ルールで参考になるもの( http://oshiete.goo.ne.jp/qa/8582303.html ) 　の回答も参照 footerなんて、HTML4.01でしたら・・ ＿＿<div class="footer"> ＿＿＿<h2>文書情報</h2> ＿＿＿<dl class="documentHistry"> ＿＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿＿<dd>2013-03-03</dd> ＿＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿＿<dd>2013-03-03 12:00:00 (JST)</dd> ＿＿＿</dl> ＿＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿＿</div> ＿</body> </html> HTML5でしたら ＿＿<footer> ＿＿＿<h2>文書情報</h2> ＿＿＿<dl class="documentHistry"> ＿＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿＿<dd>2013-03-03</dd> ＿＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿＿<dd>2013-03-03 12:00:00 (JST)</dd> ＿＿＿</dl> ＿＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿＿</footer> ＿</body> </html> とかぐらいしかない。 footer address{ margin:0; padding:5px 0; background-color:silver; } [HTML5用] div.footer address{ margin:0; padding:5px 0; background-color:silver; }
SMACSSは本流から外れた手法なので参考にはならないでしょう。 　そもそもスタイルシートを導入する最大の目的は ★構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　です。短い文章ですからよく読んで理解しておくこと。 　言っている事は、プレゼンテーションのためにHTMLは書かない。文書構造だけを記述する。スタイルシートはプレゼンテーションをになうので、HTMLの文書構造に基づいて指定していく。 例えば、下記のようなスタイルシートだといかがでしょう。 div.nav ol,div.nav ol li{ 　　list-style:none; 　　margin:0; padding:0; 　　line-height:2em;height:2em; 　　text-align:center; 　　position:relative; } div.nav ol li{ 　　display:block; 　　width:100%; 　　height:100%; 　　text-decoration:none; } div.header div.nav{ 　　width:100%;position:relative; } div.header div.nav ol li{ 　　display:inline-block; 　　width:20%; } div.section{ 　　position:relative; } div.section div.nav{ 　　position:absolute; 　　right:0; 　　width:160px; height:100%; } 　たぶん、誰が見てもなにをしようとしているかがわかるはずです。 ＞HTML5,CSS3についてちょっとずつ理解を深めてきた段階です。 　失礼ですが、それでしたらこのような質問は出ないと思います。 　HTML4.01で 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』とされました。プレゼンテーションのためにとは書いてない!! 　しかしあなただけでなく、巷ではこれが理解されずにプレゼンテーションのためにDIV,SPAN,id,classが使われてきました。その典型がSMACSSと言っても過言ではないでしょう。 　その反省から、HTML5では、『文書をよりよく構造化するために、新しい要素が追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』 　【問題2】文書内に埋め込まれた「意味」が不明確( http://www.atmarkit.co.jp/ait/articles/1008/30/n … ) 　↑このページの上から1/4あたり 　すなわち、上記スタイルシートは nav ol,nav ol li{ ・・・・・ } nav ol li{ ・・・・・ } header nav{ ・・・・・ } header nav ol li{ ・・・・・ } section{ ・・・・・ } section nav{ ・・・・・ } となるはずです。 　私はHTMLは開かなくてもスタイルシートを書けます。書けるようにHTMLを作成しているといったほうが良いでしょう。 　このスタイルシートを見るだけで、あなたにも適用されるHTMLの文書構造は手に取る様に分かると思います。 　結果『広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』です。 　印刷用スタイルシート、スマホなど小さなscreenメディア、点字端末や携帯電話用のメディア別スタイルシートが必要になってもHTMLに手を加える必要もありません。 ＞CSSの構造の参考となる記事や、参考ファイル、参考文献などがありましたら 教えていただけると幸いです。 1)まず、HTML4.01の仕様書を完璧にマスターしましょう。 　HTML 4.01仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 2)その際に、HTML4.01の反省を盛り込んだ 　HTML5 における HTML4 からの変更点( http://standards.mitsue.co.jp/resources/w3c/TR/h … )を目を通しておくと良いでしょう。 　【すこし古いです。最新版はDifferences from HTML4( http://www.w3.org/TR/html5-diff/ )】 3)その上で、CSS2.1をマスターしましょう。 　Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　特に、 　5 セレクタ 　6 プロパティ値とカスケーディング、継承の割り当て 　は、完全に理解すべきです。 　そのうえで、HTML5,CSS3を身につければよいです。 [実例] ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　ブラウザの[表示]メニュー→[スタイルシート]→で様々なスタイルシートを選択してみる。　--Chromeは代替スタイルシート機能はありません。 　印刷プレビューで印刷時の状況を確認 　画面の幅を変えてみる。
＞クライアントから送られてくる原稿に一貫性がなく、 ＞ある事業所のページではリストがひとつで見出しがあり、文字数が膨大なのに ＞違う事業所ではリストが複数、見出しがなく、文字数が少なくサムネール画像が必要とか 　全く異なるクライアントではなく、ひとつのクライアントで部署が複数あるという場面について説明します。 　重要な事は、ひとつのクライアントサイトの場合、そのサイトのデザインや文書構造が変わるとユーザーから見た時に統一感がなく、使い勝手が極めて悪くなるからです。 　その場合は、Wikiのようなシステムがサイト構成では最も楽です。タグの代わりとなるタグ、または目印をしようする。あるいはXMLでデータを受け取ります。 　それが導入できない場合は、あらかじめフォーマット（雛形）を決めておきます。各部署から典型的な文書をいくつか提示を受けて、共通な構成で雛形を作っておきます。私の経験からは概ね ・インデックス(索引)ページ 　　部署のトップ、カテゴリーのトップなどの目次・表紙となるページ ・内容の詳細ページ ・会社情報や部署情報、連絡先等 　程度になるでしょう。 　そのうえで、 body 　|-- header/ 　|　　　|-- navigation/　★SSIを使用するので内容は不要 　|-- section/ 　|　　　|-- heading 　|　　　|-- section/　<!-- indexページだとここはnav --> 　|　　　|　　　|-- heading 　|　　　|　　　|-- 本文 　|　　　|　　　|-- artice/ 　|　　　|　　　|　　　|-- header/ 　|　　　|　　　|　　　|-- section/ 　|　　　|　　　|　　　|-- footer/ 　|　　　|　　　|-- aside/ 　|　　　|-- section 　|　　　|-- (略) 　|　　　|-- contentTable/ 　|　　　|-- aside/ 　|-- footer/ 　　　↑ これらはclass名　もしくはHTML5だと要素名 　このように提出された文書を元に雛形を作成して、それに基づいて原稿を提出してもらいます。別の要素が必要と言う場合は都度すりあわせが必要になります。 　これが苦手な、出来ない部署に関してはXMLでの提示をお願いします。 <ヘッダ> 　<見出し></見出し> </ヘッダ> <本文> 　<見出し></見出し> 　<説明文> 　　<段落></段落> 　</説明文> 　<項> 　　<見出し></見出し> とね。 　事前の打ち合わせ、それができない場合は、全く素のテキストデータを貰ったほうが速いです。
回答がつかないようなで・・・。 自分もやったことが無いので、詳しくは調べて欲しいのですが、Dreamweaverの検索には、正規表現が使えるとのこと。 「正規表現　以外」でググってみると「^(?!.*STRING).+$」で「STRING」以外が検索出来るようです。 検索対象でhtmlファイルが入っているフォルダを指定して、検索をソースコードにすれば、いいのでは？
このページて、iframeに読み込んでいるだけでしょう？ 同じようにするなら、せめてレスポンシブレイアウトにして、アコーディオンメニューを採用された方がスマートでは？・・・
＞今はまだ、HTMLに書くべき画像とそうでない画像の区別が少し曖昧ですが、 　デザイン畑から入られると、ここが一番慣れない部分でしょうね。 ・その文書のコンテンツとして必要なものなのか 　　商品写真とか、旅行記・図鑑・アルバムなどの場合はコンテンツそのものですから ・将来、変更する可能性があるか 　　背景(ページや各要素の) 　　リンクボタン 　　見出し要素(h1～h6) 　　　これらは、ページのデザインを変更する時にHTMLに書いていたら全部のHTML書き直さなければならなくなります。 　基本的には「画像自体がコンテンツの主要な要素でない場合、すべてCSSで指定する。」で良いと思います。 　企業サイトで「イメージカラーやロゴの変更でサイト全体のロゴや背景、ボタンを変更する」なんて時にスタイルシートだけ書き換えれば済むのですからね。 　HTMLもシンプルになるため、変更や追加がとっても楽になります。後任の誰が見ても、どこに何が書かれているか一目瞭然。(もちろん検索エンジンも) 　それができると、極端な話--HTMLを一切見なくてもスタイルシートを記述できるようになります。 [例] html,body{margin:0;padding:0} div.header,div.section,div.footer{ 　width:100%;min-width:630px;max-width:1000px; 　margin:0 auto;padding:5px; } div.header div.nav ol, div.header div.nav ol li{ 　　margin:0;padding:0; 　　line-height:2em; 　　text-align:center; 　　position:relative; } div.header div.nav ol li{ 　　display:inline:block; 　　width:20%; } と書いていける。あなたが見てもHTMLの構造もCSSで何をしているかが分かるはず。 ・タイプセレクタなど広いものか順に詳しく記述していくだけで随分とわかりやすくなるでしょう。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 2.4.1 構造とプレゼンテーションの分離 　・・・【中略】・・・ 　また、文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になるということが、経験的に知られている。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　頑張ってください。数ヶ月で基本的な事は身につけられますよ。後は繰り返すだけです。No.1の説明が今は理解できるようになってることでしょう。 HTML5では、mainは、ちょっと特殊な意味を持ちます。使用は避けたほうがよいかも ・4.4 Grouping content — HTML5( http://www.w3.org/TR/html5/grouping-content.html … )
TDの書き出し部分が閉じられていないからとかどうでしょう？ 　 <TD <p id="slideshow" valign="middle" width="800" height="250"> ↓ <TD><p id="slideshow" valign="middle" width="800" height="250"> 　 あと、pタグ内の余分なものはcssに移した方が検証しやすいかもです。 valignとかwidthとかheightとか。
製作されているなら、当然、開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )firefoxをお使いだと思いますが、その代表的なアドオンに Firebug( https://addons.mozilla.jp/firefox/details/1843 )があります。 　私はHTML自体の編集にはEmEditorというテキストエディタですが、そのテキストエディタの表示確認にメインはfirefoxを指定しています。EmEditor自体は複数のタブで使えますから、HTML本体/CSS(標準スタイルシートや代替スタイルシートなど)をタブで切り替えたり、複数ウィンドウで編集します。 　そしてブラウザ(firefox)に切り替えて、firebugでテストや弄ってみて、必要ならエディタに戻る。
＞しかし、スマホで画面を大きくしたり、小さくしたりの作業が容易ですから、特別複雑な設定をするメリットってあるように思いませんがね～ 　特別じゃないです。何度も書きますが、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 2.4.1 構造とプレゼンテーションの分離 　HTMLは、常に構造的マーク付けを規定するところのSGMLをルーツに持っている。HTMLの性質上、プレゼンテーションに関する要素や属性は、次々と他の機構、とりわけスタイルシートに置換えられていく。 また、文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になるということが、経験的に知られている。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　逆に製作はとっても楽なはずですよ。 　あなた自身が自白されているように ＞現在、幅８５０pxのサイトを作成して ＞・・・【中略】・・・ ＞スマホ用に再度サイトを作り変えるほうがいいのでしょうか？ 　No.4の回答で示した(1)～(3)なら、こんなことで悩む必要すらない。 　「ナビゲーションリストを様々にデザインしてみよう。」のHTMLをご覧になると分かるように、検索エンジンを含めて誰にでもわかる超シンプルなソースになっていますね。文書の改定も楽だと想像できますし、スマホに対応させようとしてもスタイルシートを書き換えるだけでよいはず。
ソーシャルプラグインは、この設置したタグを置換したり挿入される形でボタンを出します。 なので、ちょっと変わった配置をしたい時などは、その「スクリプトが動いた後のソース ＝ 実際のソース」に基づいた変更を行う必要があります。 firefoxとかで読み込み後のソースを確認してみてください。 　 facebookは、 【1】<div class="fb-like"～ にdisplay:inline;position:relative; 【2】script動作後に挿入されるspanにposition:absolute;left:0;bottom:0; でいけたようないけなかったような。
自分の場合、よくあるケースで １）どっかでclearfix使っている（タグはなくても擬似要素でやってたりとか） 2）タグが正しく記入されているか（謎のdivがあったりしてはまる） 3）ブロック全てにの幅計算が当たっているか（よく100％きっちりにしてIEであぼん） などなど。 　 可能性ありそうなのは、まずは1と2とかでしょうか？ 　 対策として ◇cssの中に「clear」設定している箇所を探していじる ◇html lintなどで、（主にdivの）閉じ忘れ、余分なものがないかチェックする ◇（ちょっと難易度上がりますが）ブラウザのプラグインなどで要素のチェックをする （firebugとかwebdeveloperとか） 　 cssのリンク先を間違えてるなんてこともしょっちゅうですが；
Ｎｏ．３です。 下記参考URLのようにしたいということなのでは？・・・ ソース　↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓↓ http://www.8341web.com/test/test/text.zip アドセンスをいらう必要がないのであれば No.4さんの答えが正解です！ 参考URL：http://www.8341web.com/test/test/text.html
http://rubentd.com/gifplayer/ この辺を使ってみてはどう？
＞PC用ならば72dpiとする所だとおもいますが、 　標準は96dpiですけど・・・CSS2.1で、このあたりの曖昧さをなくすために 『基準画素は、腕の長さのデバイスからの距離と96dpiのピクセル密度におけるデバイス上の1ピクセルとの視角である。( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )』 　そもそも、スマホに限らずmedia=screenのサイズは様々ですから、サイズを固定する事はしません。 ＞スマホ向け横幅いっぱいのランディングページを製作中です。 　わざわざスマホ用と言うことも通常はしません。今後、大画面のスマホも普及していくでしょうし。 　単純にbackground-siaze:coverあたりでよいのでは？？ 　media-queryを使って背景画像を変えることまではしなくて良いでしょう。 　横幅1000px程度の背景画像を用意して section{width:80%;min-width:630px;max-width:1000px;margin:0 auto;} section nav{background-image:url();background-size:cover;}
もしかして、RGBのソースに別のAのみを合成して ブラウザ内で、RGBAのソースを作り出す？ことは可能か？ という意味でしょうか？ 知っている限りCSSのみでは難しいと思います。 HTML5では、可能でしたが。 CANVASを使ったつくり方では、可能なので、 一度チャレンジしてもいいかもしれませんが。 一応質問がCSSのみで出来るか？ なので、現状、出来ないと思います。 で、とめておきます。
＞全体的にはリンクの文字を青色に指定していて、 が、a{color:blue;}だとしたら、 ＞p a{color:gray;} だと、詳細度は前者が[0,0,0,1]、後者が[0,0,0,2]ですから、後者が優先されるはずです。 しかし、 a:link{color:red;} と指定されていれば、詳細度は[0,0,1,2]ですから上書きは出来ません。 リンクの擬似クラス a:link a:visited 動的な擬似クラス a:hover a:focus a:active はいずれも、属性セレクタ、クラスセレクタと同様詳細度は[0,0,1,0]となります。 このセレクタ、カスケーディング、詳細度はCSS（カスケーディングスタイルシート）の命ともいえる重要な部分です。これを使えないとスタイルシートなんて扱えません。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )
DIVは、HTML5では原則使わない!!! 4.4 Grouping content ― HTML5( http://www.w3.org/TR/html5/grouping-content.html … )］簡単 に訳すと 「他に適切な要素がないときの最後の手段として、div要素を使用する事を強く 勧める。div要素のかわりにより適切な要素を使用するとで、著者のためにはよ り簡単な保守性に、読者にはより良いアクセス性の向上につながる。」 　もし使用するならarticle要素を使用すべきですが、今回は header,section,footerがワンセットしかないので不要です。 ＞CSSでfloatした要素の高さを100%にしたい 　floatは、他の要素から独立しますから、親要素に含まれていないのですから サイズを参照できません。 　そもそもfloatを使用すると ・文字サイズや内包要素のサイズが変わると崩れる。 ・本来のfloatの使い方で画像の周囲にテキストを回りこませたりするときの衝 突する。 ・【重要】floatする要素を他の要素より先に書かなければならない。これは文 書構造を飼えることになり望ましくない。 ＞#root { 　このセレクタの書き方はCSS1のものです。基点となるセレクタを書くようにし ましょう。 　⇒5.3 全称セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) ＞height:100% 　ルート要素は、ウィンドウサイズを参照します。下位の要素は直近のstaticで ないコンテナブロックのサイズを参照します。そうでない場合は自身の内包する 要素のサイズに追随します。 　⇒視覚整形モデル詳細( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　HTMLを表示してみましたが、その程度でしたら下記のようにしたほうが簡単で しょう。 　本当はもっと良い方法があるが・・ リキッドですからウィンドウ幅にも依存しません。スマホから幅広ディスプレイ まで・・ ★タブは＿に置換してあるので戻す。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済み <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> ＿＿<!--[if IE]> ＿＿＿<script src="http://html5shiv.googlecode.com/svn/trunk/html5. … ＿＿＿<script src="http://css3-mediaqueries-js.googlecode.com/svn/t … ＿＿＿<![endif]-->＿<link rel="stylesheet" href="css/style.css"> <style media="screen"> <!-- html,body{margin:0;padding:0;height:100%;} h1,h2,h3,h4,h5,h6,p,ul{margin:0 auto;} header{z-index:10;position:relative;} body{min-width:630px;max-width:1000px;width:100%;margin:0 auto;} section{min-height:100%;position:relative;top:-30px;} section h2,section p{margin:0 165px 0 185px;} section * p{margin:0;} section aside,section nav{position:absolute;top:0px;height:100%;} section aside{width:160px;right:0;} section nav{width:180px;left:0;} section h2{margin-top:30px;} footer{height:200px;position:relative;top:-230px;z-index:10;} /* 色 */ html{background-color:silver;} body{background-color:green;} header{background-color:red;} section{background: white;} footer{background: blue;} section nav{background: gray;} section aside{background-color:yellow;} --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">記事タイトル</h1> ＿</header> ＿<section> ＿＿<h2>本文タイトル</h2> ＿＿<p> ＿＿＿本文記事 ＿＿</p> ＿＿<p>この部分の行数を増減して確認する。</p> ＿＿<p style="margin-bottom:200px;">section内の最後の要素</p> ＿＿<aside> ＿＿＿<h3>補足記事</h3> ＿＿＿<p>ここは本文と直接関係ない記事</p> ＿＿</aside> ＿＿<nav> ＿＿＿<h3>目次</h3> ＿＿＿<ul> ＿＿＿＿<li><a href="#some">Some</a></li> ＿＿＿＿<li><a href="#nav">navigation</a></li> ＿＿＿＿<li><a href="#links">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
方法は色々あるのですが、恐らくその知識では難しいのではないかと思います。 実際の記述方法は他の方に任せて概要を書きますが、固定ページの記入欄に何を書いてもそのようにはなりませんので、どうやっても使用テンプレートの<head></head>内をいじる事になります。 ただ記述を変更するだけではなく、その記述を使用するページと使用しないページが発生する事になるので、最低限wordpressのテンプレートを複製してから記述を変更し、振り分けを行う作業が必要になります。 レスポンシブ用のテンプレートとは別に、レスポンシブ非対応ページ用のテンプレートを用意するような感じですね。 （もしくは、特定のurlだけ記述を変える様な方法。こっちの方が難しい。） これはhtmlやphpの知識があるだけでなく、Wordpressのテーマ作成や改造にもある程度慣れた方でないと難しいと思います。 ですので、そういったことは諦めて思いっきり力技で行う事をお勧めします。 というのは、単純にテーブルだけを記述したhtmlをサーバーにアップし、 元のページ内には「表を見る」というようなリンクを貼るという方法です。 特に何の指定もしなければ、そのhtmlはレスポンシブにはなりませんのでテーブルを何とか作れば一応はPCと同じ表示で見れることになります。
位置を揃えるスタイルを設定してはいかがでしょうか <head> <style> p.高さ位置を揃えたい * { vertical-align:middle; } </style> <body> <p class=高さ位置を揃えたい> <input type="checkbox"> <label> 読書 </label>
.only に display: none; を入れれば消えませんか。
No.3です。 ＞CSS2.1なら参考書で勉強できたりできるものでしょうか？ 　CSSに限らず、仕様書が今のあなたには最適だと思います。 　CSS(カスケーディング・スタイル・シート)の最も重要なカスケーディング(セレクタや詳細度を含む)の説明がきちんと書いてある参考書なんて見たことないです。一番大事なことなのに・・ 　なぜかって(^^)、仕様書見ればわかることだから--かな。 　ごく簡単なCSS2.1のサンプルを、"そら"で下記に書いてみます。上から順に読んで書かれていることを解釈してみてください。 div.header div.nav ol,div.header div.nav ol li{ list-style:none; margin:0;padding:0; text-align:center; line-height:30px; } div.header div.nav ol{ display:block; width:100%; } div.header div.nav ol li{ display:inline-block; width:20%; position:relative; } div.header div.nav ol li a{ display:block; width:100%;height:100%; text-decoration:none; } div.header div.nav ol li a[href="/"]{ text-align:left;text-indent:-100em; overflow:hidden; background-image:url(./images/logo/GoTop.gif); } ・・・HTMLをまったく見なくても、CSSをこのように書いていきますが、当事者でないあなたが見ても、なにをしているかわかるはずです。当然HTMLもどう書かれているかが分かるはず。 　スタイルシートを記述する前提としてまずHTMLがきちんと書かれているが必要なことがこれだけでわかると思います。 　『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』・・・とっても重要!! 　たったこれだけのことすら理解していないから、HTML5では「新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」が追加されました。(そしてDIVは原則使わないことになった) 　このスタイルを適用するHTML4.01は、「文書に構造を付加するため」にDIVが使われている。 ・HTML 4.01 Specification (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　を読んで、何がどこに書かれているかがすぐに出せるくらいになりましょう。
下記ソースを、reset.cssとして最初に読ませては？・・・ ブラウザ間の仕様をクリアーするため、まず、CSSをリセットしてから、新たに記述すれば問題の発生を防げます。 /* Reset Styles ***********************/ html, body, div, span, applet, object, iframe,h1, h2, h3, h4, h5, h6, p, blockquote, pre,a, abbr, acronym, address, big, cite, code,del, dfn, em, img, ins, kbd, q, s, samp,small, strike, strong, sub, sup, tt, var,b, u, i, center,dl, dt, dd, ol, ul, li,fieldset, form, label, legend,table, caption, tbody, tfoot, thead, tr, th, td,article, aside, canvas, details, embed,figure, figcaption, footer, header, hgroup,menu, nav, output, ruby, section, summary,time, mark, audio, video { margin: 0; padding: 0; border: 0; font-size: 100%; font: inherit; vertical-align: baseline; } /* HTML5 display-role reset for older browsers */ article, aside, details, figcaption, figure,footer, header, hgroup, menu, nav, section { display: block; } body { line-height: 1; } ol, ul { list-style: none; } blockquote, q demo blockquote:before, blockquote:after,q:before, q:after { content: ''; content: none; } table { border-collapse: collapse; border-spacing: 0; } strong { font-weight: bold; } em { font-style: italic; }
ソースを見ることはどのブラウザでも可能ですが、基のソースが正しく記述されているかどうかまで、調べて勉強をするのであれば、HTMLlintか、Ｗ３ＣのValidata!がいいと思います。 http://validator.w3.org/ 日本語でしか無理な場合は、HTMLlintが、お薦めです。 参考URL：http://www.htmllint.net/html-lint/htmllint.html
Ｗｏｒｄｐｒｅｓｓに同じようなテーマは、ないでしょう！ 基本構造から考え、自作するしかないのでは？・・・ 私が以前作成し、運営していたものがありますが、体調を崩し運営をやめたものがあります。 参考になれば？・・・ソースをさしあげますが？・・・ 参考URL：http://www.8341web.com/sinceq/
初心者が、WEBFrameworkを使う場合、グリッドレイアウトを選ぶか？ フロートを用いたレイアウトを選ぶか？・・・ どちらかの方法を選ぶと思いますが、簡単なのは、グリッドレイアウトだと思います。 基本的には、１ソースですべてのデバイスに対応するため、MediaQueryを、使用します。 おすすめなのは、skelton（16分割）・Fandation（12分割）などですが考え方は同じです。 機能は、Fandationの方が多いです。Add_inが多いことも特徴！ 画像はできるだけ使わず、web_fontを利用するのが最近の手法です。 記述は、文章構造とデザインの分離（html+CSS)+データの分離（databaseの利用)、操作を、Javascript/PHPなどで記述する。 デザインよりも文章構造のしっかりしたページを作り、その後、デザインを取り入れる方法をとられた方が、正しい記述の習慣がつくでしょう。
＞「連絡先はこちらまで。」の「こちら」の部分を赤い文字で少し大きくしてそこだけハイパーリンクにしたいと思っております。 　その部分のHTMLが、 　<p> 　　　連絡先は<a href="./mailForm.html">こちら</a>まで 　</p> となっていたら、属性セレクタを使ってスタイルシートで a[href="./mailForm.html"]{color:red;font-weight:bold;} とすればよい。他の部分にも同じ属性を持つa要素がありそれと区別したければ、 div.footer p a[href="./mailForm.html"]{color:red;font-weight:bold;} とでもしておけば、ページ内の他の部分に同じ属性を持つa要素があっても影響しない。
御存知のように 『単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 『ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　はしてはなりません。 ★vertical-align は必要ありません。 ★class名は、文書構造を補足するためでデザインのために書かない!! 　DIV,SPANに限らず、『id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』ためのものです。 　たぶん何らかの階層をもつリストでしょうから・・ 　<ul> 　　<li> 　　　<ul> 　　　　<li>ABC</li> 　　　　<li>DEF</li> 　　　　<li>GHI</li> 　　　　<li>JKL</li> 　　　　<li>MNO</li> 　　　</ul> 　　</li> 　　<li> 　　　<ul> 　　　　<li>PQR</li> 　　　　<li>STU</li> 　　　　<li>VWX</li> 　　　　<li>YZA</li> 　　　</ul> 　　</li> 　</ul> とマークアップすべきではないですか?? 　それを、ふたつのブロックにして並べたいのでは??? 　HTMLには、率直に文書の意味的構造だけを記述して、スタイルシートで「リスト2行を左右に並べて設置したい」と考えれば良いです。そうすれば、スマホなどの狭いディスプレイなら縦に並べるとか、印刷時は整形しないで置くとか・・自在にできます。
ちなみに表示結果ですが・・
No.1です。とりあえず、HTMLの文書構造が間違っている--特に閉じ忘れのタグがないかは注意してください。firefoxのツール→DOMインスペクターで解析されている樹構造を確認。 　★その上で、カスケーディングを見直す。--CSSカスケーディングスタイルシート--- 　★後出しじゃんけんとは全く異なります。 　まず、出所・重要度でソートされます。 　1) ユーザー指定の最重要宣言＞著者の最重要宣言＞著者の指定＞ユーザーの指定＞ブラウザの指定 ついで 　2) 詳細度でのソート 　　　style属性(1000),一意セレクタ(0100),属性セレクタ(0010),要素セレクタ(0001),全称セレクタ、属性での指定(0000) 最後に 　3) 出現順位 　⇒6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　firebugで確認されると、どのスタイルが適用されているか事細かにわかります。
普通にコーディングするなら、Mediaqueryを、使うのでは？？？ 閲覧者に無駄な操作をさせる必要がないとおもえるが？・・・ ユーザビリティを考えると、閲覧者の環境に自動対応しないと、意味がないのでは？・・・
酷すぎるのでパス・・・ 　⇒Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# )
固定したいエリアのＣＳＳに、position:fixed;を記述する。 上下だと、headerとfooterということになるかな？・・・ ************************************************* #header,footer{ background-img:url(claud.png); postion:fixed; } *************************************************
HTMLやPHPを覚えていっそのこと最初から作ってみては?
No.3です。 ≫IE7以下に対応させる方法はあるものでしょうか。 過去のブラウザに対応させるなら簡単に、 <h3>STAP細胞のその後<img src="./images/icon/new.gif" width="40" height="20px" alt="(新着)"></h3> で全く問題ないです。テキストブラウザ、検索エンジンには STAP細胞のその後(新着) と読まれるでしょう。 スタイルシートを利用する時に有効なのは <div class="contentTable"> 　<h2>記事一覧</h3> 　<ol> 　　<li><a href=""></a></li> 　　<li><a href=""></a></li> 　　<li><a href=""></a></li> 　　<li><a href=""></a></li> 　</ol> </div>　 のような場合に、 モダンブラウザに対して div.contentTable ol li:after{content:url();} div.contentTable ol li+li+li+li:after{content:none;} のように、最初の３つだけ新着マークをつけるときです。 ★　セレクタをいきなり .contentTable と書くスタイルシートを時々見かけますが、CSS2以降は基点となるセレクタを書くルールになりました。 「単体セレクタは型セレクタもしくは 全称セレクタのいずれかの直後に、0個以上の属性セレクタ、IDセレクタ、擬似クラスが任意の順序で続くものである。セレクタの構成要素のすべてが一致する場合、単体セレクタはマッチする。( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )」 .contentTable　は、後方互換のため、*.contentTableの省略形とみなされるため省略可能ですが、詳細度は[0010]です。出来れば、基点となるセレクタ、この場合はdiv、あるいは他のすべての要素なら*(全称セレクタ)を書く癖をつけましょう。 　セクションの場合は div.section h3:after{content:url();} div.section+div.section+div.section+div.section h3:after{content:none;} [HTML5] section h3{content:url();} section+section+section+section h3{content:url();} 　IE7以前への後方互換を考慮する必要があれば、<img>を追加する。この新着アイコンの表示のように、さして重要でなければ、スタイルシートで対応しているブラウザのみ表示させるという判断で良いと思いますよ。
とりあえず、サンプルをそのまま表示してみてください。ウィンドウ幅を変えてみる。 なおthの行は ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="名称">Name</th> ＿＿＿＿＿<th abbr="要素">Related Elements</th> ＿＿＿＿＿<th abbr="タイプ">Type</th> ＿＿＿＿＿<th abbr="コメント">Comment</th> ＿＿＿＿</tr> のほうがよいかも。 　その場合DOCTYPEは、 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> になります。 ＞上記を宣言していたのですがtransitionalはもうないでしょうか。 　HTML自体は『どのバージョンのHTMLも、コンテンツプロバイダの投資が無駄にならないよう、また短期間で文書が読み取り不能となったりすることがないよう、産業界の幅広い賛同を反映するようにされてきた。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』『過去との互換性のため、HTML 4 を解釈するツールについては、HTML 3.2 ([HTML32]参照)並びにHTML 2.0 ([RFC1866]参照)をもサポートすることを推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』のように過去への互換性がブラウザには求められていますから、使い続ける事はできます。 　しかし、1999年のHTML4.01の勧告のとき ★HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 推奨しない 　推奨しない要素・属性とは、新しい枠組みができたことによって、陳腐化したものを指す。推奨しない要素は、リファレンスマニュアルの各所で定義し、推奨しないことを明記する。 　推奨しない要素は、HTMLの将来のバージョンでは廃止になる可能性がある。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Conformance: requirements and recommendations (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ★予告どおり、HTML5ではプレゼンテーションだけを目的とする要素、属性はすべて廃止されます。 ＞> いまどき、さすがtransitinalはないでしょうから、 　の理由は、そういう意味です。サンプルをご覧になると文書構造しか書かれていないHTMLは極めてシンプルで「文書提供コストを低下でき、文書の改訂も容易になる( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」の意味がわかるかと・・
> JABEE認定コースか、Webやゲームデザイン系コースか ずいぶん乱暴な分類かと思います。 ゴリゴリの技術者認定が、それ以外全部って感じ。 基本的にWeb関連技術はゲームやデザインとは無関係な、ビジネス色の強い分野ですし、 ゲームといっても開発部分はデザインとは無関係な、硬派なエンジニアリング分野です。 また、デザインはWebやゲームと基本的には関係のない分野です。 コンピュータの利用技術をマスターし、就職に役立てたいのであれば、どの分野でも大きな意義はあるでしょう。「デザイン」だけは感覚とかセンスが重要な分野ですが、それにしてもいきなりカンバスに絵を描くわけじゃあるまいし、多様なソフトウェアを使いこなし、ユーザニーズに合った（ここ重要）イメージを作り上げるには、技術や経験の積上げが重要です。 ただ言えるのは、「面白そうで派手に見える分野」ほど（身の程知らずな）就業希望が多く、地味で複雑な分野ほど就職は楽だということです。 いずれの分野でも、就業出来た後も仕事上の大変な努力が必要になりますので、自分が興味を持って取り組める分野、あとは自分の「他人と峻別できる」才能の見極めが必要です。 自分が「少し賢い普通の人」であると自覚されれば、エンジニアリング分野や、基幹業務系のWeb開発分野が向いています。
透過pngの種類ということで言うと、インデックスカラーとフルカラーがあります。 インデックスカラーでは大抵1色のみが完全透明ですが、フルカラーは半透明(アルファ値)を扱えます。 インデックスカラーの半透明は使われているのを見たことがありません。 Vieasはインデックスカラーとフルカラーのどちらかのみ使えるのかもしれません。
垂直方向のマージンは、親コンテナ要素にpaddingやborderが指定されている場合は、親要素の内寸からになります。それらが指定されていない場合は先出のマージンが指定されている要素の間で計算されます。 　⇒8.3.1 マージンの相殺 ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　の後半
https://developer.mozilla.org/ja/docs/Web/Guide/ … このやりかたどうですかね？
mediaqeryを使用して、幅によってスタイルシートを変えれば出来ますが勧めません。 普通にfloatにしましょう。
＞。CSSのbase とかside とかをいじらないとだめなのでしょうか。もしくは先ほど調べてたら、<ht> <hd> などのタ 　CSSにbaseとかsideなんて、プロパティにもその値にもありませんし、<ht> <hd> もHTMLの要素として存在しません。 ＞本来左側にでていたメニュー一覧項目がなぜか下に落ちてしまいました。汗 　ちゃんと作られたページならソースを見ただけで素人でもわかるはずだけど・・・
まず、Amebaブログの無料プランでは残念ながら広告を外すことはできません。 もし、これを無理にやれば会員規約違反行為なので、ブログは強制閉鎖されます。 どうしても、有料月額980円（税込み）のAmebaプレミアム【広告をはずすコース】に申し込みください。 http://helps.ameba.jp/faq/premium/1901/ameba_6.h …
やはりわからないです。 ・その画像がコンテツンの一部なのか、背景なのか？ 　　<h1><img src="" width="" height="" alt=""></h1> 　or 　　<div class="header"> 　　　<h1>タイトル</h1> 　　　・・・・　　　　　headerの背景 　　</div> 　or 　　<ol> 　　　<li>項目</li>　　この背景 ・cssで画像（width: 1920px;　height: 1200px;）の表示範囲を指定して 　どう指定するのか？ 　具体的に、開始位置の座標～終点の座標なのか、単に画像の中心なのか 　質問内容がわからないので回答のしようがないのじゃないでしょうか？ 具体的な例を示してください。わかりやすい。
質問の意味がわかりません。 ＞cssで画像（width: 1920px;　height: 1200px;）の表示範囲を指定して 　例えば、左上から100px、100pxから、200px,350pxの範囲のものを ＞height: 150px;width: 100%;の大きさで 　幅100%(何を基準？？)、高さ150pxで・・ 　どこに表示したいのでしょう。 　基本的には、スプライトと同じ技法になるはずですが？？？ 　添付のように具体的な数字と、されたいことを明示されれば良いかと思います。
ごく簡単なサンプル。 　後から現れているのでz-indexは不要!! ★タブは＿に置換してあるので戻す。 ★http: はhttp：（全角)に置換してあるので戻すこと。 ★スマホ以上のディスプレイ対応のリキッド 　ディスプレイ幅・フォントサイズを変えてもＯＫ。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済みのHTML4.01strict+CSS2.1 ☆HTMLが文書構造だけ本来の順番で書かれていると悩む事はない。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6,p{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:80%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} div.section{position:relative;padding-top:2em;min-height:350px;} div.section div.nav, div.section div.aside{position:absolute;top:0;text-align:center;line-height:2em;} div.section div.nav{width:100%;} div.section div.aside{width:8em;right:0;height:100%;top:100px;} div.section div.nav ul,div.section div.nav ul li, div.section div.aside ul,div.section div.aside ul li{list-style:none;margin:0;padding:0;} div.section div.nav ul li, div.section div.aside ul li{width:8em;} div.section div.nav ul li{display:inline-block;} div.section div.nav ul li ul li{display:block;} div.section div.nav ul li ul, div.section div.aside ul li ul{display:none;position:absolute;} div.section div.nav ul li ul{top:2em;} div.section div.aside ul li ul{left:-8em;top:0;} div.section div.nav ul li:hover ul,div.section div.aside ul li:hover ul{display:block;} div.iframe{float:right;margin:0 8em 10px 1em;} div.section div.figure{width:80%;position:relaive;margin:10px auto;z-index:10;} div.section div.figure img{width:100%;height:auto;} /* 色分け */ body{background-color:gray;} div.header,div.section,div.footer{background-color:white;} div.section div.aside ul li{background-color:yellow;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<div class="iframe"> ＿＿＿<iframe title="googleMap" width="425" height="350" frameborder="0" scrolling="no" marginheight="0" marginwidth="0" src="https://maps.google.co.jp/maps?f=q&amp;source=s_ … href="https://maps.google.co.jp/maps?q=%E9%8C%A6%E5%B8 … ＿＿</div> ＿＿<p>錦帯橋（きんたいきょう）は、山口県岩国市の錦川に架橋された木造のアーチ橋である。</p> ＿＿<p>写真や文章はいずれもWikiより引用</p> ＿＿<div class="figure"> ＿＿＿<img src="http://upload.wikimedia.org/wikipedia/commons/th … width="800" height="150" alt="錦帯橋周辺パノラマ"> ＿＿</div> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li>日本三名橋 ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>日本橋</li> ＿＿＿＿＿＿<li>錦帯橋</li> ＿＿＿＿＿＿<li>眼鏡橋</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li>日本三奇橋 ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>錦帯橋</li> ＿＿＿＿＿＿<li>猿橋</li> ＿＿＿＿＿＿<li>かずら橋</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿</ul> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<ul> ＿＿＿＿<li>日本三名橋 ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>日本橋</li> ＿＿＿＿＿＿<li>錦帯橋</li> ＿＿＿＿＿＿<li>眼鏡橋</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li>日本三奇橋 ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>錦帯橋</li> ＿＿＿＿＿＿<li>猿橋</li> ＿＿＿＿＿＿<li>かずら橋</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
JavaScriptやライブラリー（mootools、jQueryなど）は見よう見まね程度の私ですがCSSなら大体わかります。 サイトを見てみたところ。重なり順を指定するz-indexが指定してあります。 z-indexの後の数字を小さくする（今回は0）にすることで解決できそうです。 実際に変更する箇所は3箇所で以下のHTMLです。 <div id="hpb-nav" style="z-index: 3;">を <div id="hpb-nav" style="z-index: 0;">に <div id="banner" style="z-index : 4;">を <div id="banner" style="z-index : 0;">に <div id="toppage-news" style="z-index : 1;">を <div id="toppage-news" style="z-index : 0;">に 変更してみてください。
参考ＵＲＬでwordpress用の主なプラグインサイトを紹介しています。 設定ができないのは、理論的なことがわかっていなければ無理かな？・・・・ 画像サイズx枚数＝画像幅と高さ＝画像領域 移動させる位置と時間この関係がわかれば、簡単に政策できると思います。 参考URL：http://nanden.co.jp/wp_test/?page_id=24
４．０１での解説は、詳しく書かれているので、HTML5で説明 listで記述した方が、楽では？・・・floatを使っても可能！ 記述方法はいろいろあります。 構造の分離は、もちろんですが・・・・・ いかに少ないステップ数で読みやすい記述をするか？？？ その辺が、製作者の技量を問われる部分です。 <section id="lang"> <ul> <li>EN</li> <li>FR</li> </ul> </section> ***************************************** CSS #lang ul{ text-align:center; } #lang ul li{ list-style:none; display:inline; padding-right:10px; } この程度でいいのでは？・・・
<li><a href="#page2l">Page Two</a></li> ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ 記述ミス <li><a href="function.html#anker">Page Two</a></li> ＨＴＭＬの記述が理解できていないのでは？・・・ <li><a href="ｆunction.htm#name">Page Two</a></li> となるはずですが、function.htmlに、ID名が記述されていないだけでは？ 関数辞書などを作る場合、 1.どのように分類するかを決まる（ABC順かアイウエオ順か？） index.htmlの配下に、a.html,b.htmlのように26のページができる（ただしaはアンカー、bはボールドと誤解される可能性があるので、このような場合は、命名に気を遣る） 2、いろは順の場合も同様 ３、それぞれの配下に、IDを設けリンクする。 各リンク先には、必ずindex.htmlに戻るボタンと、各A・Ｂ・Cに移動できるリンクと現のホルダ位置を示す表示を行う ＤＬ、ｄｔ、ｄｄタグで記述するのだとは思うが？・・・ 特にスマホのようなモバイル環境では階層を深くしないことがコツ！ ２階層までtarget_blankで別ウィンドウを開かないとエラーになる！ 参考URL：http://dev.screw-axis.com/doc/jquery_mobile/
１.＞幅を直近のstatic以外のコンテナブロックのサイズを参照して%で指定するのがセオリーでしょう。 「直近のstatic以外のコンテナブロック」というのは<img>を囲む親要素ということですか？ 　HTMLにおいて、「囲む」というような考え方はしない。　あくまでHTMLは要素(Element)の積み重ねです。「そのIMG要素を含む」です。 　positionの値はstatic(初期値)、relative、absolute、fixedがあります。 　 ２. HTMLにて<img>要素にwidth height属性を指定しいても、CSSで％指定すると、大きさはそちらの値になるのでしょうか？ 　widthなどの属性での指定は詳細度0として扱われます。 ３.各要素のmargin / padding も ％指定で統一するものなのでしょうか？？ 　状況次第です。 　⇒Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　をまずお読みください。このような質問場所では断片的で、しかも不正確な情報であふれています。仕様書には正確にすべて書かれています。その中で分からない部分を聞くような使い方をするほうが効率的です。また身にもつきます。 　特に 5 セレクタ 6 プロパティ値とカスケーディング、継承の割り当て 　あたりはプロパティの説明よりは先に確実に身につけないとスタイルシート利用できません。
　ガラケー・・・というか、それは利用者のスキルの問題で基本的にはどのCMSも対処可能です。 　そもそもHTMLは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　なのですから・・ 　MT--Movable Type--やWord Pressは、ブログシステムでCMSの一部です。コーポレートサイトでしたら、CMSのほうが良いです。 XOOPS Cube( http://xoopscube.jp/ ) OpenCms( http://www.opencms.jp/ ) あたりが扱いやすいかと思います。 なお、機種チェックは行う必要がないです。HTMLはそうしたものです。 デザインをすべてスタイルシートに回せばスタイルシートに対応していないガラケーも利用できます。 　そこはあなたの技量次第です。
基礎をもっと学んでください！ >>ほぼ同時にリクエストが飛ぶので、・・・ あなたがそう思っているだけで、実際には、あとから読み込んだCSSが、優先される！ ゆえに、記述に気を付ける必要がある！ 仕様書等を理解できるまで、熟読してください！
既に試されていたらすいません。 －－－－－－－－－－－－－－－ <style type="text/css"> body { -webkit-text-size-adjust: 100%; } </style> －－－－－－－－－－－－－－－ 「-webkit-text-size-adjust: 100%;」を入れると直るようです。 こちらでもテスト環境で実験してみましたが、 そもそも同じような問題（バグ？）を再現することが出来ませんでしたので、 そうなってしまった理由は分かりませんが。 ご参考までに。 参考URL：http://m.designbits.jp/13031617/
質問の意味が（第三者には）読取れないのです。 状況やされたいことがわからないです。 類推ですが ・HTMLのソースで 　<div id="tab"> 　　<ul> 　　　<li><a href=""></a></li> Q) 部分の、div#tab要素を表示画面中のセンターに配置したい？？ 　　スタイルを適用したい要素にwidthを指定してmargin-left:auto;margin-right:auto; ・スタイルシートを外部ファイルにしたい 　⇒14.2 HTMLへのスタイル付加( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　の２点かな？？
それでも・・・何をされたいかがさっぱり不明。 透明なブロックと言うのが、そもそもわかりません。 例えば、次のように説明していただくとわかります。 ・本文内のナビゲーションを本文の開始位置と同じ高さからはじまるようにしたい。 ・ナビゲーションは半透明の白の背景にしたい。 というのでしたら、スタイルシートは div.section{position:relative;} div.section div.nav{position:absolute;tio:0;background-color:rgba(255,255,255,0.4);} と、そのままスタイルシートを書けば良いです。 　セレクタ間の [半角スペース]は子孫セレクタです。後方互換を考えないなら子供セレクタを使います。 後方互換でしたら、半透明GIF画像を使用するほうが無難です。opacityでも出来ます。 [サンプル] ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATAでチェック済みのHTML4.01strict ★タブは＿に置換してあるので戻す。 ★http:はhttp：と全角に置換してあるので戻す。 ★リキッドですからスマホでも幅広ディスプレイでも利用可能 ★印刷にはこのままは適用されない。(印刷プレビューで確認) ☆HTMLには文書構造しか書いてないので、デザインは自由に変更できる。 　また、本文見なくてもスタイルシートは書ける。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http：//www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} --> ＿</style> ＿<style type="text/css" media="screen"> div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} /* ここから */ div.section{position:relative; min-height:300px;/*ナビゲーションに最低限必要な高さはここで */} div.section div.nav{ position:absolute; top:0;right:0;/* borderの内側0 paddingを含まない */ /*paddingの内側にするときは・・ */ /* top:5px; right:5px; */ width:160px;background-color:rgba(255,255,255,0.4); } /* ナビゲーションのための余白 */ div.section div.section{min-width:0;width:auto;margin:0 170px 0 0;} div.section h2, div.section p{margin:0 170px 0 0;} div.section div.section p{margin-right:0;} div.section div.nav h3{margin:0;line-height:2em;} /*ページの背景 */ body{background:url(http：//upload.wikimedia.org/wikipedia/commons/thumb/e/ee/Mt_fuji%28R469_Yuno%29.jpg/1280px-Mt_fuji%28R469_Yuno%29.jpg) 50% 50%;} /* 位置の目安 */ div.section{border:solid 1px red;} div.section div.section{border-color:green;} div.section div.section{border:blue solid 1px;} div.section h2, div.section p{border:lime solid 1px;} div.section div.nav h3{background-color:lime;} --> ＿</style> ＿<style type="text/css" media="print"> <!-- div.section div.nav a{color:black;text-decoration:none;} div.section div.nav a:after{content:" URL( http：//hoge.com"attr(href)" )\A\A";white-space:pre;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>本文はsection</p> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿＿<div class="nav"> ＿＿＿<h3>ナビゲーション</h3> ＿＿＿<ul> ＿＿＿＿<li><a href="/">Top</a></li> ＿＿＿＿<li><a href="/books">Books</a></li> ＿＿＿＿<li><a href="/contactUs">ContactUs</a></li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
iPhone5を基準にするのであればiPhone5の幅で良いのでは？
HTMLを作ってからウェブページにする方法と デザインを作ってからウェブページにする方法の２種類あります。 HTMLを作ってからデザインする場合、デザインがクライアントに気に入らなければ、最初から、CSSも関連するアイコンや背景画像、写真の選択も全て最初からになります。それを防止するためのデザインカンプです。 もっとも、低価格なものですとデザインの選択肢がなく、お客さんが気に入らなくても1種類限定でいきなり完成品の納品を強制する事もあるでしょうし、 デザインテンプレートを使うパターンなら、デザインカンプがない方が作りやすいですが。（デザインカンプに合わせてテンプレートを作り直さなくて良い。むしろデザインテンプレートの状態がデザインカンプ。） デザインカンプを作るのであれば、とくにレスポンシブウェブデザインではイメージしやすくするためにディスプレイ、ウインドウサイズに合わせて何パターンか作る事の方が多いですが、 何パターンも作る手間を省くために、デザインカンプは1種類だけにすることもあります。 パターンを1種類にする時は、レスポンシブウェブデザインというよりも、 基本パターンからほとんど変更のない、リキッドレイアウト、フローティングレイアウトと呼んだ方が適切なデザイニングになりますね。
選択するセレクターに間違いがある。dl要素は、整形型のリストを書くためのもの、横に並べて色を付けたいのであれば、 <table summary=""></table>要素を選ぶべきでしょう！ 各要素（セレクタ）の意味を理解して利用しなければだめなのでは？・・・ 私もtable要素は、嫌いなので、使いませんが、他の方法で同じことをするなら、グリッドレイアウトで行うことになるでしょう。 セルをならべる？・・・ ならば、<ul>か、<ol>要素を使い、<li>にdisplay:inline;にすればいいだけでは？・・・ <ul><li>menu1</li><li>menu2</li><li>menu3</li></ul> CSS li{display:inline;padding-right:10px;} この程度の記述で十分では？・・・ ほかにもfloatを使ってもできるし？・・・
使用するサーバーの仕様は？・・・ レンタルサーバーを用意しているのか？ 自宅サーバーでの運用なのか？・・/ ＰＨＰのソースは読める？・・・ HTML・CSSどの程度の知識があるのか？ まずは、参考ＵＲＬの説明でも読んでみてはいかがでしょうか？・・・ 参考URL：http://ja.wordpress.org/
No.3,4です。 ＞floatを使わずリストでレイアウトを作るなんて、考えてもみませんでした。 ＞参考のHPのソースをいくつか見てますが、初めてです。 たまたま、今までにそのようなサイトしか出会えなかっただけでしょう。 プロの作成したページだと逆転すると思います。 ちょっと説明しておきます。 1) floatを使わず【absolute/relative】で並べてレイアウトする 2) 【ナビゲーションのリストをそのまま正直に】リストでマークアップ (2)は言わずもがなですので(1)について 　先のサンプルで <style type="text/css"> となっているところを <style type="text/css" media="screen"> と書き換えて印刷プレビューでご覧頂くだけで効果は実感できるでしょう。本文 と関係ないナビゲーションリンクは後回しにされるはずです。 ★それは「検索エンジンにもそう見えている!!」と言う意味です。 　このページの本文に直接関係ないが関連した補足記事(asideと言います)を追 加したとします。もしこれを右なり左に表示しようとすると本文より前に置くこ とになります。これはSEO上もメンテナンスの上からも望ましくありません。 　また本文中でfloatやclearが使えないという致命的な問題が発生します。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 例えば絶対配置による方法では、HTMLを記述する上で内容の配置順序が自由にな ることが回り込ませるボックスを先に記述する必要がある回り込みによる方法よ りも優れているが、場合によっては後続のボックスに重なって表示されるおそれ がある ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［段組 - Wikipedia( http://ja.wikipedia.org/wiki/%E6%AE%B5%E7%B5%84 )］より ＞これから組みなおすのはちょっと難しく、今後の目標とさせていただくことと しました。 　でしようね。 　いずれHTML5の時代が到来します。HTML5では完全に文書構造とプレゼンテー ションが分離されることが望まれます。今までも物はそのままで良いので、順次 切り替えていかれるのが良いでしょう。サンプル見られたらわかるように、なに せ色々な面で楽になります。デザインは気が変わったら自在に変えられる。スマ ホやプリンターに対応させようとしたらスマホ用やプリンター用のスタイルシー トを別に書けば良い。
現象がわからないです。 ・・・
そのサイトの説明間違ってます。 ＞<div>や<span>でスタイリングのためのタグ付けをする 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　とはっきり書かれている!!。これを理解できない人があまりに多かったため、HTML5では「文書をよりよく構造化するために、次の要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」 　になっちゃった。 　その上で文書構造に従ってカスケーディングの仕組みを使ってスタイルを適用する要素を選択（セレクトselect）していくのですよ。 　たとえば、先の CSSのh1,h2,h3で色付けをしたい - Webデザイン・CSS - 教えて！goo( http://oshiete.goo.ne.jp/qa/8510613.html ) 　のHTMLでしたら、 ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> が下のように次々につながっていたとしたら ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>本文項記事</p> ＿＿＿<p>sectionの階層でレベルが判断される</p> ＿＿</div> スタイルシートで div.section div.section:nth-child(2n){background-color:rgb(200,255,255);} sectionブロックの偶数番目のsectionは背景を薄い水色になるとなる。 　他の書き方もある。 ＞現在４０００文字を超えるので 　でしたら、当然HTML上もsectionで区切られていて、リンク用にidなどが振られていると思いますから、そのidを使って 　#section2{color:blue;} でよいですね。 スタイルシート仕様書の 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　はしっかり理解しておきましょう。 　その前に、HTMLはデザインを考えずにひたすら文書構造をマークアップすることに専念しましょう。 　先のサンプルでしたら、将来スマホ用にデザインを変えるもの楽です。今でもリキッドなのでスマホで利用できますが・・ div.section div.section{width:auto;min-height:0;min-width:0;} div.section div.section,div.section h2,div.section p{margin:0 180px;} div.section div.section div.section, div.section div p{margin:0;} div.section div.aside,div.section div.nav{position:absolute;top:0;width:170px;height:100%;} div.section div.aside{left:0;} div.section div.nav{right:0;} を div.section div.section{width:auto;min-height:0;min-width:0;} div.section div.section,div.section h2,div.section p{margin:0 0 0 180px;} div.section div.section div.section, div.section div p{margin:0;} div.section div.nav{position:absolute;top:0;width:170px;height:100%;} div.section div.nav{right:0;} とするだけ 　4000字とか大きなページらいちいちid振っていたらそれだけで頭がパンクする。馬鹿らしいので止めなさい。
>sample.cssがどこかに消えてしまいました。 そのCSSファイルの中に色を指定している部分があるはずなので、なくなってしまったら作り直すしかないでしょう。 どこかにバックアップとか取っていないのでしょうか。
具体的にはと書いているけど…。 HTMLで提示せずにいったいどんな回答を期待しているのでしょうか？
通常はPATH_INFOを使用します。 たとえば下は回数指定してありませんから幾度でも有効ですが・・ http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/Null0 … とか、QUERY_STRINGや標準入力と同じようにデータを渡せます。 wikiの記事はすべてそうですし、新聞社の記事とかは期間指定で使用しています。 上記はindex.cgiになってますが、別に何でも構わない。 PATH_INFOの値で・・・「メールで一度だけ有効」なだけじゃなく、個人のメールアドレスの習得などに悪用されている。 　メールに添付されているURLは、このPATH_INFOを除いてアクセスするとかしなければなりません。 　詳しいテクニックは、悪用の恐れがあるので説明は遠慮します。
スタイルシート部分だけ、差し替える ★タブは＿に置換してあるので戻す。 ★HTMLの文書構造のマークアップさえきちんと出来ていれば、HTMLメンテナンスは楽になる。 　デザイン関係はHTMLに一切書いてない。 　そうしてあると、どのようにマークアップされていても、同じようにデザインできます。 ★もちろんデザインを変更すことも容易でわかりやすい。 　div.figure imgと書かれていれば、figureブロック内の画像 　ul.album li imgと書かれていれば、アルバムリスト内の画像 とね。 ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;} /*ここから*/ div.figure,ul.album{width:50%;margin:5px auto;border:solid 1px gray;padding:5px 10px;} div.figure img,ul.album li img{ ＿float:left;display:block; ＿width:200px;height:auto; ＿margin:5px 10px; } ul.album {list-style:none;} ul.album li{margin:0;padding:5px;} div.figure div.figcaption,ul.album li p{margin-left:180px;} /* これを忘れると重なっちゃう */ div.figure div.figcaption:after,ul.album li:after{ ＿content:""; ＿display:block; ＿clear:left; ＿white-space:pre; } /* おまけ(色分け) */ body{background-color:gray;} div.header,div.section,div.footer{background-color:white;} --> ＿</style>
＞下記ブラウザで表示させたところ、全て異なる表示となってしまった為、この辺の解決策も含めて、お伺いした次第です。 　でお分かりのように、<DOCTYE>は必須です。!! tabel以外でマークアップしたものを合わせるためには ⇒DOCTYPEスイッチ - Google 検索( https://www.google.co.jp/search?q=DOCTYPE%E3%82% … ) 　これは必須です。 ★DOCTYEなしで、どのブラウザでもほとんど同じになるのは、tableだけです。 ★tableにすると、高さ指定が不可能になりますから、 ３．「領域b-x」「領域b-y」のそれぞれの枠の高さは同じにしたい。（＝「領域a」の枠の高さの５０％ずつ） 　は実現できません。 ということは、DIVソースとなって汚いHTMLになりますが <div> 　<div> 　　<div> 　　　<div> 　　　　領域a 　　　</div> 　　</div> 　　<div> 　　　<div> 　　　　領域b-x 　　　</div> 　　　<div> 　　　　領域b-x 　　　</div> 　　</div> 　</div> </div> とするしかなくなります。・・・後々HTMLのメンテナンスが大変になります。 簡単なtable・・・ ※HTML4.01strict ※タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6{margin:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:90%;min-width:630px;max-width:900px;margin:0 auto;padding:5px;position:relative;} /* ここから */ table.oilList{border-collapse:separate;width:100%;border-spacing:10px;margin:10px 0;} table.oilList th{font-weight:normal;text-align:left;} table.oilList th,table.oilList td{border:inset 10px silver;} table.oilList td{width:300px;} /* ココまで */ body{background-color:gray;} div.header,div.section,div.footer{background-color:white;} table.oilList{background-color:silver;} table.oilList th{background-color:rgb(255,200,200);} table.oilList td{background-color:rgb(255,222,180);} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<table class="oilList" summary="不飽和脂肪酸"> ＿＿＿<tr> ＿＿＿＿<th rowspan="2"> ＿＿＿＿＿<h3><abbr title="eicosapentaenoic acid">EPA</abbr>エイコサペンタエン酸</h3> ＿＿＿＿＿<p>魚油に含まれる炭素数20のペンタ不飽和脂肪酸。必須脂肪酸の一つである。</p> ＿＿＿＿</th> ＿＿＿＿<td class="figure"> ＿＿＿＿＿<img src="http://upload.wikimedia.org/wikipedia/commons/th … width="246" height="40" alt=""> ＿＿＿＿＿<p class="caption">エイコサペンタエン酸の構造</p> ＿＿＿＿</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td class="aside"> ＿＿＿＿＿<p><a href="http://ja.wikipedia.org/wiki/%E3%82%A8%E3%82%A4% …エイコサペンタエン酸</a></p> ＿＿＿＿</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<th rowspan="2"> ＿＿＿＿＿<h3><abbr title="docosahexaenoic acid">DHA</abbr>ドコサヘキサエン酸</h3> ＿＿＿＿＿<p>魚油に含まれる炭素数22の4,7,10,13,16,19-ヘキサ不飽和脂肪酸である。人体内ではα-リノレン酸から生成される。</p> ＿＿＿＿</th> ＿＿＿＿<td class="figure"> ＿＿＿＿＿<img src="http://upload.wikimedia.org/wikipedia/commons/th … width="272" height="39" alt=""> ＿＿＿＿＿<p class="caption">ドコサヘキサエン酸の構造</p> ＿＿＿＿</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td class="aside"> ＿＿＿＿＿<p><a href="http://ja.wikipedia.org/wiki/%E3%83%89%E3%82%B3% …ドコサヘキサエン酸</a></p> ＿＿＿＿</td> ＿＿＿</tr> ＿＿</table> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-03-03</dd> ＿＿</dl> ＿</div> </body> </html>
考え方は個人によってさまざま。仕様書の解釈も、同じで人によってさまざま。 そのため、ブラウザの解釈も変わってきます。 line-heightに単位をつけないのは、ブラウザによっては誤動作するものもあるとでも思ってください。 bodyにはあまり属性を設定しません。 各セレクタに設定します。 ↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑ これも、人それぞれ、仕様書の解釈問題 文字の単位は、１文字（em)を基準に指定しますが、制作時の状況により様々です。
(min-width: 640px) とは、最小640pxまでと言う意味です。 max-width だと、それより小さい物には適用しない 1) 永続的スタイルシートに、共通な設定を記入する。 2) screen用にscreen共通のスタイル--リキッド-- 　　　mediaQueryを利用できないブラウザ用 　print用は別途 3) 小さな画面用に(2)を上書きさせる形でmax-widthにて・・
そもそもスライスする必要もないのでは？？ プログラムに頼るとへんな物ができてしまう。「HTMLでページを作らずにプログラムに頼る。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 HTMLはあくまで文書構造しか書かない。プレゼンテーションはスタイルシートで行いましょう。 例えば、ある風景の説明だとするとHTMLは本来こんな構造のはずですね。 <div class="figure"> 　<img src="" width="" height="" alt=""> 　<div class="figcaption"> 　　<ol> 　　　<li><a href="./photo/abc.jpg"><img src="" width="" height="" alt=""></a></li> 　　　・・・・ 　　</ol> 　</div> </div> HTML5でしたら <figure> 　<img src="" width="" height="" alt=""> 　<figcaption> 　　<ol> 　　　<li><a href="./photo/abc.jpg"><img src="サムネイル" width="" height="" alt=""></a></li> 　　　・・・・ 　　</ol> 　</figcaption> </figure> あるいは、単純に <div class="albam"> 　<p><img src="" width="" height="" alt=""></p> 　<ol> 　　<li>目<img src="サムネイル" width="" height="" alt=""></li> ・・・かもしれない。 ★あるいは単なるナビゲーションでしたら・・ <div class="nav"> 　<ol> 　　<li><a href=""></a></li> 　　<li><a href=""></a></li> (HTMLだと) <nav> 　<ol> 　　<li><a href=""></a></li> かもしれません。良く使われるのはこれですが・・ 　スタイルシートも何もない。文書の改訂や検索エンジンにわかるように文書構造だけをHTMLに書けば良い。それがスタイルシートを導入する最大の利点「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」なのですから。 心配なのは ＞そのスライスの一部の画像にマウスオーバーするとスライス全体の1000×1076と同じサイズの背景透明画像を上に表示したいのです。 　これって扱い難くないですか？ ・その位置に達するまでに経由する他の区画の画像がかぶさってしまう。 ・スライスした小さな画像を拡大すると画質が悪い ・ページ読み込みの際にランダムにバラバラに表示されてしまう。 ・印刷への対応が出来ない 　どのような内容・文書構造か分かりませんがプレゼンテーションはリストなどから選択なりマウスオーバーして画像を変えるほうが良いと思います。 　まず、それを実現するために、デザインは一切考えずにHTMLを書いて見ましょう。
間違えて説明文まで置換しててしまったので・・ 　画像要素は置換インライン要素ですから本来は指定サイズ、もしくは置換される画像のサイズになります。 　⇒10.3.2 置換インライン要素の場合( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) ★方法のポイント 　一方ブロック要素は直近の先祖コンテナブロックのサイズを参照できます。 　⇒10.3.3 通常フローでの非置換ブロック要素の場合( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　下記サンプルではaside要素がrelativeである親コンテナブロックのサイズ(heightの値)を参照してます。 　同様にimg要素は親のrelativeなfigure要素の横サイズ参照しています。高さはautoで再指定して、img要素のheight属性(詳細度0)を打ち消しています。 ★なお、HTML5では、DIV要素は原則として使いません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから NOTE:Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.4 Grouping content — HTML5( http://www.w3.org/TR/html5/grouping-content.html … )］より 　たぶんfigure要素内のimg要素だとして・・下記のようになります。 ★HTMLはHTML5で、スタイルシートはCSS2.1の範囲内で行っています。 　後方互換のためjavascript使ってます。 　個人的にはHTML5はいまだに変更がされているので時期尚早で使っていません。HTML4.01にする場合はHTML5の新しい要素をclass名にしたDIVに変更すること。(例:header></header>→<div class="header"></div> 　後方互換のため子供セレクタや隣接セレクタも使っていません。 　IE7以降対応、IE7も利用には問題ないはずです。 ★スマホ(480px幅)～1200pxまでリキッド ★タブは＿に置換してあるので戻す。 ★http:はhttp:に置換してあるので戻す。 ★印刷用スタイルシートは画像を小さめにしてあるのできれいに印刷できるはずです。
そのようなHTMLの描き方は誤りですが・・ <div class="test"> 　<div></div> 　<div></div> 　<div></div> 　<div></div> ・・・ </div> であったとしても、 div.test{width:1000px;text-align:center;} div.test div{ width: 150px; height: 150px; overflow: hidden; border: 1px solid; color: #a9a9a9; padding: 3px; display:inline-block; } div.test div+div+div+div{display:block;float:left;} ですむはずです。 ★スタイルシートを使用する最大の目的は「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」です。【必読】 　divの目的は『id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』です。outer-frameとかinner-frameは、HTML4.01で強く否定されている「ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」と発想は変わりません!!。 次のようにマークアップされるのじゃないですか？？ <div class="nav"><!-- class名にnavを使用してナビゲーションだとマークアップする --> ＿<ol> ＿＿<li> ＿＿＿<ol> ＿＿＿＿<li><a href="">1</a></li> ＿＿＿＿<li><a href="">2</a></li> ＿＿＿＿<li><a href="">3</a></li> ＿＿＿</ol> ＿ </li> ＿＿<li><a href="">4</a></li> ＿＿<li><a href="">5</a></li> ＿＿<li><a href="">6</a></li> ＿＿<li><a href="">7</a></li> ＿＿<li><a href="">8</a></li> ＿＿<li><a href="">9</a></li> ＿＿<li><a href="">10</a></li> ＿</ol> </div> このように、HTMLはひたすら、文書構造だけをマークアップします。 そして、 div.nav{ min-width:480px;max-width:1000px;/* ただし最小470px(スマホ)、最大1000px */ margin:0 auto;/*左右中央 */ } div.nav ol{/* ナビゲーションブロック内のolは */ list-style:none;/* リストじゃないよ */width:100%;/* ディスプレイの幅一杯 */ display:block;/* ブロックだよ */ padding:0; position:relative; margin:0; } div.nav ol li ol{ width:100%; text-align:center; min-height:100px; } div.nav ol li{ width: 100%; margin: 0; } div.nav ol li ol li, div.nav ol li+li{ width:150px;height:150px; float:left; margin:5px; padding:3px; text-align:left; } div.nav ol li ol li{ float:none; display:inline-block; } div.nav:after{content:"";display:block;clear:left;} HTMLの改定も楽ですし、デザインも独立しているから自由に変更できる。 もちろん、 <div class="nav"><!-- class名にnavを使用してナビゲーションだとマークアップする --> ＿<ol> ＿＿<li><a href="">1</a></li> ＿＿<li><a href="">2</a></li> ＿＿<li><a href="">3</a></li> ＿＿<li><a href="">4</a></li> ＿＿<li><a href="">5</a></li> ＿＿<li><a href="">6</a></li> ＿＿<li><a href="">7</a></li> ＿＿<li><a href="">8</a></li> ＿＿<li><a href="">9</a></li> ＿＿<li><a href="">10</a></li> ＿</ol> </div> でしたら、 div.nav{ min-width:480px;max-width:1000px;/* ただし最小470px(スマホ)、最大1000px */ margin:0 auto;/*左右中央 */ } div.nav ol{/* ナビゲーションブロック内のolは */ list-style:none;/* リストじゃないよ */width:100%;/* ディスプレイの幅一杯 */ display:block;/* ブロックだよ */ padding:0; position:relative; margin:0; text-align:center; } div.nav ol li{display:inline;} div.nav ol li a{ width:150px;height:150px; display:inline-block; margin:5px; } div.nav ol li+li+li:after{content:"";display:block;clear:left;} div.nav ol li+li+li+li:after{content:none;} div.nav ol li+li+li+li a{ display:block; float:left; } div.nav:after{content:"";display:block;clear:left;} div.nav ol li a{background-color:aqua;} でよい。
カートや支払いページ、問い合わせのページのドメインが.ocnk.netとなっているので、 http://www.ocnk.net/ このサービスではないでしょうか。 テンプレート名まではわかりません。
すべてのブラウザで同じ表示にすることは、製作者の知識が必要になります。 現時点で、勧告として出されているものは、html4.01+CSS2.1です。 これ以外に、先駆けてHTML5+CSS3で記述されてる場合、 ブラウザによってそれぞれ対応が異なるため、表示が異なって見えます。 これらを避けるためには、すべてのブラウザに対応したタグ以外は使用しないことが必要です。 また使用する場合は、必ずハックをあてることが、必要です。 この処理をしていないと、同じ表示は、できません！ せめて、GoogleChrom、Firefox、Ｏｐｅｒａ、Safari、IE6～IE11までの、ブラウザでの確認をする程度のことは製作者の義務だと思ってください！ Javascriptは、閲覧者が、scriptを切っていれば実行されません！ これを防ぐには、サーバーサイドの実行ファイルが必要になります。(parl・phpなど) 詳しくは、W3C、WHATWGなどの仕様書をご覧ください。 参考URL：http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 …
FTPソフトであれば、ファイルをアップする時点で上書きすればいいだけでは？・・・ なぜ削除が必要なのか？・・・ それともパーテーションの設定が必要とか？・・・ ディレクトリをアップ？・・・意味が理解できない！ WEBのトップは一般的には、index.htmlあるいはindex.htmだと思いますが？・・・ サーバーへは、public_htmlとかwebディレクトリにアップするようになっていると思いますが？・・・ そこにディレクトリごとアップしたのであれば、アクセスするには、http://hogehoge.jp/アップしたディレクトリ名/ でアクセスすることになります。 ＦＴＰはなんであれ操作は同じです。
面白そう(^^) 本当に様々な方法がありますが、文書構造=HTMLが示されていませんので、されたいことがわかりません。 　例えば、機器の説明などで画像があったとして、それぞれの部分を200×200で表示したいということでしょうか？ ・背景画像としてbackground-positionを使用する。 　HTML側には画像は一切記入せずCSS側で可能。 ・画像自体をスタイルシートでサイズや位置を指定する。 ・他にも文書構造に合わせて色々な手法があります。 　例えば２番目の例ですが 　img要素は置換インライン要素ですのでwidth,height共にautoで本来のサイズになります。それを利用します。 　それを囲むブロックにposition:relative;とoverflow:hidden;を指定して画像自体はrelativeで任意の位置に移動させると、期待通りになるはずです。 ＞可能なら、どの範囲の部分を表示させるか指定したい(左上とか) 　contentプロパティで属性値を指定するのが楽です。content:attr(title)とか・・ 　そうすれば、HTML側でのメンテナンスだけですみます。 【重要】 　HTMLがきちんと文書構造をマークアップできていればドウにでもなります。 　￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ [サンプル] 画像はライセンスの関係もありWikiの物を使用しています。 ☆リキッドですから親画像はウィンドウ幅に合わせて伸縮します。 ★タブは＿に置換してあるので戻す。 ★http:はhttp：に置換してあるので戻す。 詳細画像はここではWiki画像を使用していますが、適当な画像でも良いです。contentでオリジナル画像を追加すればすむ事ですから・・ (HTML) <ul class="sample"> ＿<li> ＿＿<img src="http：//upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Sundown_and_cross_section_2.jpg/1024px-Sundown_and_cross_section_2.jpg" ＿＿ width="501" height="" alt="268" style=""> ＿＿<ol> ＿＿＿<li>ヘタ ＿＿＿＿<p title="左上"><img src="http：//upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Sundown_and_cross_section_2.jpg/1024px-Sundown_and_cross_section_2.jpg" ＿＿＿＿ width="121" height="" alt="54" style="left:-180px;top:-60px;"></p> ＿＿＿</li> ＿＿＿<li>表面 ＿＿＿＿<p title="中央少し左"><img src="http：//upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Sundown_and_cross_section_2.jpg/1024px-Sundown_and_cross_section_2.jpg" ＿＿＿＿ width="121" height="" alt="54" style="left:-190px;top:-200px;"></li></p> ＿＿＿<li>種 ＿＿＿＿<p title="左中央"><img src="http：//upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Sundown_and_cross_section_2.jpg/1024px-Sundown_and_cross_section_2.jpg" ＿＿＿＿ width="121" height="" alt="54" style="left:-640px;top:-240px;"></li></p> ＿＿</ol> ＿</li> </ul> (CSS) ul.sample,ul.sample li,ul.sample ol{display:block;margin:0;padding:0;list-style:none;} ul.sample{width:70%;margin:0 auto;position:relative;} ul.sample li img{width:100%;height:auto;} ul.sample ol li{display:inline-block;width:200px;} ul.sample ol li p{width:200px; height:200px;overflow:hidden;position:relative;} ul.sample ol li img{width:auto;height:auto;position:relative;} ul.sample ol li p:after{content:attr(title);position:absolute;top:5px;left:5px;background-color:white;padding:3px;}
現象が再現できないのですが？？ Q:フッター固定とは、fixedで常にウィンドウに固定されているという意味です。 　ひょっとして表示領域が低い場合はディスプレイ高さ一杯、相でない場合は追随と言う意味じゃないのですか？
jQueryを使用するのであれば、参照URLをご覧ください！ 参考URL：http://bassistance.de/jquery-plugins/jquery-plug …
提示されたサイトを見ると、単にjavascriptで画像を切り替えているだけのようだけど。 「javascript」を「初心者に分かりやすい説明」で、と言われても難しい。 それよりもpdf化して「Adobe　Reader」で読んでもらうのが簡単じゃないかな。 画像や文字をpdf化するソフトは、こんなんで http://cutepdf-writer.apportal.jp/ 読む方はたいていのPCには入っているはず。 イメージは下記みたいになる。 http://www.chijihon.metro.tokyo.jp/tokyo_of_2020 …
属性値を記述する時に使用出来るクォーテーションは、""と''です。 『すべての属性値を二重引用符(ASCII十進34)または単引用符(ASCII十進39)のどちらかを用いて 囲うよう求めている。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 使われている“”ではありません。 サイズにpixはありません。意図は、0.75emだと思います。0.75pxじゃ見えません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから ・in: インチ―1inは2.54cmに等しい。 ・cm: センチメートル ・mm: ミリメートル ・pt: ポイント―CSSで用いるポイントは1inの1/72に等しい。 ・pc: パイカ―1pcは12ptに等しい。 ・px: ピクセル―1pxは0.75ptに等しい。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Syntax and basic data types - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )］より ★transitinalは、あくまで古いブラウザ用の後方互換です。 　さすがにHTML5を控えた現在では、transitionalの必要はないでしょう。 　『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 ★XHTML1.0はHTML4.01をそのままXMLにしたものです。 　HTMLは4.01で終了予定でしたが、時代は変わりHTML5が主流になりそう。なら、HTML4.01strict→HTML5のほうがスムーズ ＞入門書を片手に独習を始めたばかりで、早くもつまずいています。 ---余り良い物がありませんね。本当に!!・・仕様書を通読しておいたほうが良いですよ。 ・HTML 4.01仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・CSS 2.1仕様書( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) そして ☆Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) ☆W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … ) サンプル 　このままコピーペーストする。 ★タブは＿に置換してあるので戻す。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　でチェック済みのHTML4.01strict+CSS2.1 ウェブ標準 ☆文字コードはUTF-8 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=UTF-8"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1{font-size:40px;} h1,h2,h3,h4,h5,h6,p{margin:0;line-height:1.6em;} div.header,div.section,div.footer{ ＿width:90%;min-width:470px;max-width:900px; ＿padding:5px;margin:0 auto; } div.section{min-height:300px;position:relative;} div.section div.section{width:auto;min-width:0;} div.section div.section, div.section h2, div.section p{margin:0 170px;} div.section div p{margin:0;} div.section div.nav,div.section div.aside{position:absolute;top:0;width:160px;height:100%;font-size:0.9em;} div.section div.nav{left:0;} div.section div.aside{right:0;} /* 色づけ */ body{background-color:silver;} div.header{background-color:rgb(240,240,240);} div.section{background-color:rgb(247,247,247);} div.footer{background-color:rgb(200,200,247);} div.nav{background-color:aqua;} div.aside{background-color:rgb(255,200,200);} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿＿<div class="section"> ＿＿＿<h3>見出し</h3> ＿＿＿<p>・・・</p> ＿＿</div> ＿＿<div class="nav"> ＿＿＿<h3>ナビゲーション</h3> ＿＿＿<ol> ＿＿＿＿<li>・・・・</li> ＿＿＿＿<li>・・・・</li> ＿＿＿</ol> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<h3>補足</h3> ＿＿＿<p>記事</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
text-align:justifyも使えないかと。 工夫すれば、もっと良い方法があるかも HTMLは下記と変更なし 　CSS ２カラムの可変( http://oshiete.goo.ne.jp/qa/8492850.html ) HTMLさえちゃんと書かれていたらなんとかはなる。 <style type="text/css"> <!-- html,body{margin:0;padding:0;} div.header,div.section,div.footer{ width:90%;min-width:470px;max-width:1000px; margin:0 auto;padding:5px; } div.section{position:relative;} div.section div.nav{ position:absolute; left:0;/* ★位置 */ top:0; width:60%;/* ★幅 */ border:solid green 1px; } div.section h2, div.section p, div.section div.section{ width:auto;/* ★width:auto;*/ min-width:0;margin:0 0 0 61%;/* ★左右のマージン */ line-height:1.6em;background-color:white; border:solid 1px green; } div.section div.nav ol{width:100%;position:relative;list-style:none;text-align:center; } div.section div.nav ol,div.section div.nav ol li{ margin:0;padding:0; } div.section div.nav ol li{ border:solid 1px gray; display:block; position:absolute; top:0; left:5%;/* right:64%;*/ width:100px; } div.section div.nav ol li+li{width:90px;position:relative;left:10px;display:inline-block;} div.section div.nav ol li+li+li{position:absolute;width:70px;right:5%;left:auto;/* left:74%; */} div.section div.section p{margin:0;} div.section div.section{min-height:200px;} div.section div.nav ol:after{ content:"←可変→\A";white-space:pre; position:absolute; bottom:-2em; } div.section div.nav{background-color:white;} div.section div.nav li{background-color:yellow;} body{background-color:gray;} div.header{background-color:aqua;} div.section{border:solid 1px green;padding:3px;} div.footer{background-color:yellow;} --> </style>
HTMLの書き方自体がおかしい？・・・ 以下例文 ********************************************************************* <body> <div id="header"> <h1>総務部からのおしらせ</h1> </div> <div id="sidebar"> <h2>メニュー一覧</h2> <ol> <li><a href="irai/kirai_add.php">至急の依頼・連絡・問合せ 受付</a></li> <li><a href="irai/01_緊急依頼受付状況.xls">至急案件の進捗状況</a></li> <li><a href="irai/irai_add.html">計画工事の依頼書 受付</a></li> <li><a href="irai/02_計画依頼受付状況.xls">計画工事の進捗状況</a></li> <li><a href="irai/依頼書原紙.xls">依頼書原紙 ダウンロード</a></li> <li><a href="irai/02_計画依頼受付状況.xls">総務アクセス・連絡先</a></li> <li><a href="irai/02_計画依頼受付状況.xls">エネルギーデータ</a></li> <li><a href="irai/02_計画依頼受付状況.xls">総務からのお知らせ</a></li> </ol> </div> <div id="main"> <h2>ホームページ試験開設のお知らせ</h2> <p>業務効率化のため、総務への工事依頼や各種問合わせの受付、及びそのフィードバックなどを試験的にこのホームページを介して行わせて頂きます。</p> <p>関係者の方々のご理解とご協力をお願いいたします。 <span class="update">2014年2月○日 総務 </span></p> </div> </body> **************************************************************************** <br></br>タグは、改行ではなく、ブレーキです。 強制的に停止させる、そのため、ブラウザは、改行する。 HTMLを理解すれば、開業タグは、使うことがないはずです。 CSSでどのようにでも対応できます。 <p>はパラグラム（段落）という意味です。 ＨＴＭＬ５になると、記事（artcle）、セクション(section)、aside（補足）、ナビゲーション(nav)という要素が利用できます。 なお、リスト項目は、<ul><ol><dl>のいずれかを利用し、<p>タグでは、ない方がいいとおもいます。 同じ作るのであれば、レスポンシブレイアウトにされた方が、賢明だと思います。 CSSの記述については、参考サイトをご覧ください！ 参考URL：http://www.8341web.com//temp/template/index.html
簡単なサンプル ★タブは＿に置換してあるので戻す。 ★HTML5のときは<div class="header"></div>などはそれぞれ<header></header>になる。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済みのHTML4.01strict+CSS2.1 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} div.header,div.section,div.footer{ width:80%;min-width:630px;max-width:900px; margin:0 auto;padding:5px; } div.section{position:relative;} div.section div.nav{ position:absolute; left:30px;/* ★位置 */ top:0; width:298px;/* ★幅 */ border:solid green 1px; } div.section h2, div.section p, div.section div.section{ width:auto;/* ★width:auto;*/ min-width:0;margin:0 30px 0 360px;/* ★左右のマージン */ line-height:1.6em;background-color:white; border:solid 1px green; } div.section div.section p{margin:0;} div.section div.section{min-height:200px;} /* 説明 */ div.section div.nav:before, div.section div.nav:after, div.section h2:after{ content:"←→\A 30px"; text-align:center; display:block; white-space:pre; position:absolute;top:0; font-size:12px; font-weight:normal; } div.section h2:after{right:0;} div.section div.nav:before{left:-30px;} div.section div.nav:after{right:-30px;} div.section div.nav ol:before{ content:"←───300px──→\A";white-space:pre; } div.section div.nav{background-color:white;} body{background-color:gray;} div.header{background-color:aqua;} div.section{border:solid 1px green;padding:3px;} div.footer{background-color:yellow;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿＿<div class="section"> ＿＿＿<h3>見出し</h3> ＿＿＿<p>記事</p> ＿＿</div> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li>リスト</li> ＿＿＿＿<li>リスト</li> ＿＿＿＿<li>リスト</li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-02-27</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
No.4の方も書いておりますが、属性セレクタ使ってみてはどうでしょう？ img[width="1"] {display:none;} こんな感じで。 アクセス解析の場合、さらに読み込み後に直接スタイル直書きされたりしてる場合もあるので、cssでは無理かもしれませんが。。
その内容によってどれを使うか判断します。 ・dtの内容は常にddよりheightが小さいか？ ・線を新しいdt,ddの上に引きたいのか ・ddは複数あるのか、あるいはdd内に<p>があるのか 　一般的で、楽なのはddにmargin-leftを指定する方法ですね。 　他にも、 ・display:inline-block;を使う ・float:leftとcontentを使用する ・absoluteで決め打ちする 　など、最適な物を選択します。 　どんなHTMLなのかがわからないと一律な方法はないでしょう。
他のサイトやマニュアルなんか読むより、先に仕様書は読まれていると思いますが・・ (1)a:hoverにプロパティを指定する際、a要素に指定していたプロパティから変更があるものだけ記述すれば良いのでしょうか？ 　同じ優先順位(出所)、詳細度の場合後出のスタイルで上書きされます。 (2)子孫セレクタでcssを指定する際、ひとつ要素を抜かして記述すること。（全て記述すると　正直面倒な気がしてしまいます。） 　必要なら書きますし、そうでなければ書きません。 　本文の階層毎に字下げしたいが、3階層以下はしたくなければ 　div.section {margin-left;} 　div section div.section div.section div.section{margin-left:0;} 　でしょ。 (3)<div id="example">にcssを指定する際の記述の仕方。 　CSS2以降は基点となるセレクタを書くことになりました。 　当然、div.exampleで詳細度は[0 0 1 1]で、意味はclass属性の値リストにexampleを含むdiv要素と言う意味。 　.example と書けば、基点セレクタがないために、:(全称セレクタ)が省略されているとみなして詳細度[0 0 1 0]として計算されますよ。この場合<p class="example">にも適用されます。 　CSS2がウェブ標準ですから、すべてのexampleクラスに属する要素に指定したければ*.example{}ですし、exampleクラスのdiv要素だけに指定したければdiv.example{}です。 　目的に応じて使い分けます。 (4) フッターにてdisplay:inlineで横並びにしたli要素を、センタリングする際の一般的な方法。 　CSS2.1の本来の方法はdisplay:inline-blockです。 　div.footer div.nav ul{text-align:center;list-style:none;margin:0;padding:0;} 　div.footer div.nav ul li{margin:0;padding:0;display:inline-block;} 　floatじゃ、ウィンドウ幅変化しり、要素数が変わったらセンタリングできないですよ。 (5)サイト全体（コンテンツ部分）をセンタリングする場合、コーディングのどのタイミングでするのが一般的なのでしょうか？？ 　意味不明です。HTMLには文書構造しか書きませんので、プレゼンテーションを指定するときに指定します。 　通常は、要素セレクタでの指定などは最初に書いて、後で子孫セレクタなど詳細度が高い物に順次追加しないとわからなくなるので、どちらかと言うとスタイルシートでは前段のほうに出てきますね。 (6)idとclassの使い分けが未だによくわかりません....それと、あまり使いすぎるのはよくないっていうのをよく見るのですが、実際のところどうなのでしょうか？ 　idやclass名はHTML4.01のときから明確に 　『id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』とされていますから、文書構造を示すために必要なら記述します。idはさすがにリンクやjavascriptのターゲットになるとき以外は使用しません。煩雑になるからです。 ＞正直、まだまだ疑問ばかりなのですが、キリがないので...... 　質問から仕様書をご覧になったことが無い様に見受けられます。 ・HTML 4.01仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　というすばらしい邦訳があります。 　そこにあなたの疑問のすべての答えがあります。すべて完璧に覚える必要はありませんが、必要な情報がどこに書かれているか位は分かるよう通読しておきましょう。 　CSSについても 1 CSS 2.1仕様について 2 CSS 2.1の手引き 3 適合性: 必要条件と推奨事項 4 構文と基本データ型 5 セレクタ　★ 6 プロパティ値とカスケーディング、継承の割り当て　★ 7 メディアタイプ 　と、あなたが見よう見真似で取り掛かっているプロパティより前に、重要な「セレクタ」や「カスケーディング、継承の割り当て」が詳しく記述されています。それを身につけておかないとスタイルシートは絶対に書くことはできません。 例)　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　HTMLソースをご覧になると、文書構造以外何も書かれていません。そのために、ブラウザの表示メニューからスタイルシートを選択すると、様々なデザインになるし、印刷プレビューで印刷状態を確認すると印刷向きにデザインされていることがわかるでしょう。スクリーンリーダーやガラケー用のスタイルは書いてありませんが、それらの端末でも支障なく利用できる。もちろん検索エンジンもどこがheaderで、どこが本文(section)でどこがナビゲーションか理解できている。
質問を整理してください。 ＞width: 150px; height: 250pxのフレームの中に 　<iframe>ということですか？それだと読み込まれるHTML側で指定。 ＞画像がフレームの真ん中に来て画像と商品説明の間が空かないようにしたいと思っています。 　マージンを消せば消えるはず ＞画像幅が150px未満の画像は左によって商品画像と商品の説明文の間には１行の空きが入ってしまいます。 　一行と言うと上下の間隔です。左によるという現象と合わない ＞<center><img src="画像のURL"></center> 　centerはいくらなんでも使うべきじゃない。 [例] <div id="productList"> 　<ul> 　　<li><img src="" width="" height="" alt=""> 　　　　<dl> 　　　　　<dt>商品名</dt> 　　　　　<dd>扇風機(青)</dd> 　　　　　<dt>価格</dt> 　　　　　<dd>5,000</dd> 　　　　　<dt>説明</dt> 　　　　　<dd>音の静かな床置きタイプ</dd> 　　　　</dl> 　　</li> 　　<li><img src="" width="" height="" alt=""> 　　　　<dl> 　　　　　<dt>商品名</dt> 　　　　　<dd>扇風機(赤)</dd> 　　　　　<dt>価格</dt> 　　　　　<dd>5,000</dd> 　　　　　<dt>説明</dt> 　　　　　<dd>音の静かな床置きタイプ</dd> 　　　　</dl> 　　</li> 　　<li><img src="" width="" height="" alt=""> 　　　　<dl> 　　　　　<dt>商品名</dt> 　　　　　<dd>扇風機(黒)</dd> 　　　　　<dt>価格</dt> 　　　　　<dd>5,000</dd> 　　　　　<dt>説明</dt> 　　　　　<dd>音の静かな床置きタイプ</dd> 　　　　</dl> 　　</li> 　</ul> </div> とかでしたら、画像スペースを150px×150px確保するか、画像の縦サイズに合わせて説明部分を伸縮させるかになるでしょうね。画像サイズごとに位置を指定しても良いでしょう。
　あらかじめテキストを読み込ませておいてtext-indentで隠して、:hoverで表示させれば速いです。いわゆるスプライトをさせるということ。ただIMG要素は内容自体を持ちませんのでcontent(内容の追加が使えませんので<p>要素などに使用すると良いでしょう。
background-positionの個別指定をしてるセレクタの方が 最初にbackgroundを指定してるセレクタより 指定が厳密でなく弱いからじゃないですかね 後ろに書いたところで #gnav ul li　の指定の方が .gnav_2より強いでしょうから IDのほうがclassより強いので 個別のbackground-position指定を より厳密にするほうがいいでしょうね #gnav ul li.gnav_2 とかにするのが確実ではないでしょうか
widthの値は初期ではpaddingを含みません なので width:691px; padding: 16px 230px 16px 30px; だとpの幅は691+230+30pxになります width:431px;にしましょう 蛇足ながらhtml5だと box-sizing:border-box; でwidthをpaddingを含んだ値にできますが まだ時期的に早いかもしれません
様々な方法で実現できますので、ごく簡単な例をCSS2.1の範囲で、 HTMLは、本文セクション内にあるナビゲーションブロックだとします。 すなわちDOMは body 　|-- div .header 　|-- div　 .section 　|　　|-- div　　.nav 　|　　　　　|-- ul 　|　　　　　　　|-- li 　|　　　　　　　|　　　|-- a 　|　　　　　　　|-- li 　|　　　　　　　・・以下略・・ 　|-- div　　.footer div.section div.nav ul li{ list-style-image:url(); } div.section div.nav ul li:hover, div.section div.nav ul li:focus{ list-style-image:url(); } が基本形です。 [サンプル] ★HTML4.01strict+CSS2.1のウェブ標準(IE8以降) ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} div.section p{margin:0 200px 0 0;text-indent:1em;line-height:1.6em;} div.header,div.section,div.footer{ width:80%;min-width:470px;max-width:900px; margin:0 auto; padding:5px; } div.section{min-height:400px;position:relative;} /* ここから */ div.section div.nav{width:200px;height:100%;position:absolute;top:0;right:0;} div.section div.nav ul li{ list-style-image:url(./images/navi/redN.gif); line-height:20px; } div.section div.nav ul li:hover, div.section div.nav ul li:focus{ list-style-image:url(./images/navi/redH.gif); } div.section div.nav ul li:hover:after, div.section div.nav ul li:focus:after{ content:"　　←今ここだよ"; } /* 色塗り */ body{background-color:gray;} div.section{background-color:silver;} div.header,div.footer{background-color:white;} div.section div.nav{background-color:yellow;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>20px角のふたつの透明化GIF./images/navi/redN.gifと中心の赤丸の大きい./images/navi/redH.gifを用意する。</p> ＿＿<p>hover時点で画像を切り替える。</p> ＿＿<p>スムーズに伸張したい場合は、CSS3のtransformを使用しても良いが、色々と複雑になる。</p> ＿＿<p>なお、ページはリキッドですからスマホから幅広ディスプレイに対応ししてます。</p> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li>リンク</li> ＿＿＿＿<li>リンク</li> ＿＿＿＿<li>リンク</li> ＿＿＿＿<li>リンク</li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
＊＊＊＊＊＊＊＊引用＊＊＊＊＊＊＊＊＊＊ ＞契約は、衝突しません ・要はどちらが先に「ＣＣ０」「all right reserved」宣言するか、という話でしょうか？ ・例えば、自分で「all right reserved」した画像を、誰かが勝手に「ＣＣ０」した場合、争点はどちらが先に宣言したか、ということ？ ＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊ 　根本的に間違ってます。 　他人の作った、自分が何の権限も持っていない画像に対して、どうして、all right reservedだのＣＣ０だのの宣言が出来ると考えているんですか？ 　そんなもの、たんなる虚偽表示です。後だろうが先だろうが、虚偽表示になんらかの効果があるはずがないでしょう？ちゃんと権利者が虚偽表示した人を訴えたら、立派な詐欺罪ですよ。 　ＣＣ０の効力と何の関係もない話です。 　ちなみに、ＣＣ０もパブリックドメインも、その画像を誰が作ったかを証明するためのものではありません。 　そこが争点になる場合の話をしているなら、これは、まったく別次元の話です。
これも「HTML、ＣＳＳ が、なかなかうまくいきません。 - Webデザイン・CSS - 教えて！goo( http://oshiete.goo.ne.jp/qa/8486859.html )」と同じです。 　先のHTMLそのままでスタイルシートだけ置き換えます。 ★HTMLに文書構造しか書かれていないため、自在にデザイン変更できます。 ★今回は印刷されるとまずいので印刷用スタイルシートを用意してある。 　　印刷プレビューで確認。 ★構造とプレゼンテーションの分離 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になるということが、経験的に知られている。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ★大事な事は、「どのようにプレゼンテーションしようかでHTMLを書かない!!」。これはHTML/CSSのもっと重要な基礎です。 ＞HTMLを始めたばかりで、 　最初の最初にこれだけは身につけましょう。効率がずっとアップします。SEO的にも優れています。 <style type="text/css" media="screen"> <!-- div.header div.nav{/* header内のnav */ background:url(img/Bule.png) 0 100% repeat-x aqua; height:150px; margin-top:45px; text-align:center; position:relative; text-align:center; line-height:50px; } div.header div.nav ol{list-style:none;margin:auto;width:450px;height:100%;position:relative;} div.header div.nav ol li{position:absolute;top:10px;left:75px;width:300px;height:50px;background:red url();} div.header div.nav ol li+li{width:200px;top:70px;left:0;background:lime url();} div.header div.nav ol li+li+li{left:290px;} div.header div.nav ol li a{display:block;width:100%;height:100%;} div.header div.nav ol li a[href="/Books"]{width:100px;height:25px;margin:15px 50px;background-color:yellow;line-height:25px;font-size:0.7em;} div.header div.nav ol li+li+li+li{display:none;} --> </style> <style type="text/css" media="print"> div.header div.nav a:after{content:"\A URL( http://hoge.com" attr(href) " )";white-space:pre;} </style>
＞HTMLを始めたばかりですので、 　それは書かれなくてもすぐ分かります。 　最初に仕様書を通読されることをお勧めします。スタイルシートを導入すると言う事は、すなわち、「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」をすると言う事です。リンク先を読んでください。HTMLにはデザインに関する事は書かない。ひたすら文書構造だけをマークアップするのです。 [例] <div class="nav"> 　<ol> 　　<li><a href="/">トップ</a></li> 　　<li><a href="/Products">製品</a></li> 　　<li><a href="/Books">書籍</a></li> 　　<li><a href="/Manual">マニュアル</a></li> 　　<li><a href="/contact">問合せ</a></li> 　</ol> </div> 程度しかマークアップしないのです。navというclass名は、 「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」だから、ナビゲーションのブロックだと明示するためです。HTML5では、<nav></nav>となる予定です。 　⇒HTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　HTML4.01のこの説明が理解されなかったために、機械に文書構造が分からない反省からHTML5では要素になり、DIVは原則使わなくなります。 　このように書かれていたら、HTML自体の製作も改訂も楽ですし、デザインも独立しているので自由に変更できますね。 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　で、ブラウザの[表示]メニューからスタイルシートに進み色々な物を選択してみましょう。文書構造しか書かれていないシンプルなHTMLでしたらデザインの自由度も高くなるのです。 [サンプル] ★タブは＿に置換してあるので戻す。 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済みのHTML4.01strict+CSS2.1のウェブ標準です。 ★35px×35pxの赤丸を./images/redwheel.gifを用意する。 ★IE8以降に対応。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.header div.nav{/* header内のnav */ width:600px;margin:20px auto; height:200px; position:relative; text-align:center; line-height:70px; } div.header div.nav ol{list-style:none;} div.header div.nav ol li a{ display:block;position:absolute; width:100px;height:60px; border:outset 5px yellow; background-color:yellow; top:120px; text-decoration:none; } div.header div.nav ol li a:hover,div.nav ol li a:focus{background-color:rgb(255,180,180);} div.header div.nav ol li a:active{border-style:inset;} /* メッセージのあるリンクについての指定 */ div.header div.nav ol li a[title]:before{content:url(./images/redwheel.gif);position:absolute;top:-20px;left:0px;} div.header div.nav ol li a[title]:after{content:attr(title);position:absolute;top:-30px;left:3px;font-size:0.8em;} /* 以下、リンク先によって位置やサイズを指定 */ div.header div.nav ol li a[href="/"]{top:10px;left:10px;width:200px;height:75px;} div.header div.nav ol li a[href="/Products"]{top:10px;left:250px;width:200px;height:75px;} div.header div.nav ol li a[href="/Books"]{left:10px;} div.header div.nav ol li a[href="/Manual"]{left:180px;} div.header div.nav ol li a[href="/contact"]{left:350px;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="/">トップ</a></li> ＿＿＿＿<li><a href="/Products" title="新着">製品</a></li> ＿＿＿＿<li><a href="/Books">書籍</a></li> ＿＿＿＿<li><a href="/Manual" title="新着">マニュアル</a></li> ＿＿＿＿<li><a href="/contact">問合せ</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
table自体が、リキッドですからレスポンシブにする必要はないと思います。 また、インデントさせるとわかるように @media(max-width:#{$bp}px){ 　　table.break-at-#{$bp}{ 　　　　display:block;width:100%; 　　　　tbody,thead{display:block; 　　} 　　tr{ 　　　　display:block;width:100%; 　　　　th,td{ 　　　　　　　display:block;width:100%; 　　　　　　　box-sizing:border-box; 　　　　} 　　} } } 　あきらかにエラーになってます。 　⇒W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … ) もし、これがプレゼンテーションのために使用されているのではないtableでしたらそのまま。もしプレゼンテーション--整形のためのtableでしたら、tableを使うべきではないです。
CSS3でしたら、background-sizeが利用できます。 背景画像はコンテンツには無関係ですから、画質は悪いほうが良いです。(^^) くっきりした画像でしたら、コンテンツに含まれる画像がかぶったり、文字が読みにくくなります。ウェブ開発で重要な事はWAIです。 　⇒WAIガイドライン:ページ制作( http://www.doraneko.org/wai/contents10/19980918/ … ) 　HTML,CSS,WAI,DOMなどを含めてウェブ標準なサイトを作ろうとします。特にWAIは無視できません。 　極めて淡いパステル調にします。(濃くして文字を白系統にすることもありますが、その場合は印刷用スタイルシートを用意します) 　写真の場合は思いっきりぼかします。 　スタイルシートは、mediatype="screen"を必ず指定します。 　サイズ的には、1024×768あたりが最大ですね。ページ自体は640-1024pxのリキッドで作成しますので、position:50% 50%;で中央におきます。CSS3対応のブラウザにはbackground-size:cover;などで覆い、fixedにします。 　ただたくさん作ってきましたが、fixedは無論、背景がでしゃばるサイトは好まれませんね。
formの機能自体は、 　⇒Forms in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 「その後フォーム処理のためにWebサーバやメールサーバ等のエージェントへとフォームを提出する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　form action="[データを送信するサーバー上のプログラム]" です。 　基本的にはＣＧＩ(Common Gateway Interface)-- http://ja.wikipedia.org/wiki/Common_Gateway_Inte … --を使うことが多いです。 　⇒CGI RESCUE チャレンジＣＧＩ - 初心者向けミニ講座( http://www.rescue.ne.jp/cgi/beginners/ ) など
ウェブ開発されているならfirefooxお使いだと思いますが、そのアドオンにfirebug( https://addons.mozilla.jp/firefox/details/1843 )があります。・・・開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )が豊富なので。 　firebugにて、HTMLのソース側を開いていって、要素を選択すると、プレビュー画面で該当する要素の色が変わります。 　右側のスタイルシートが表示されれば、そこに追加する。 　なければセレクタごと追加します。 　それでCSSの変更を確認したら実際のソースに追加すれば良いです。
.btn:hover { color: red; background-image: url(nikoniko.png); /* 22px x 22px */ } ただし、互換モードでは正しく表示されないので、DOCTYPE宣言が必要です。 <html> から書き始めているとダメという意味です。 HTML4.01 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> <html lang="ja"> HTML5 <!DOCTYPE html> <html lang="ja">
.ddd { color: #ff0000; font-weight: bold; font-size: 100%; } これでどうかな。
No.1です。具体的な方法。 No.1でも描きましたが、何かのリストだとして。 例えば熱伝導率のリストがあったとします。 <ol class="dataList"> <li>ダイヤモンド（C）<span class="value">1000 - 2000</span></li> <li>銀（Ag）<span class="value">420</span></li> <li>銅（Cu）<span class="value">398</span></li> <li>金（Au）<span class="value">320</span></li> <li>アルミニウム（Al）<span class="value">236</span></li> <li>シリコン（Si）<span class="value">168</span></li> <li>真鍮<span class="value">106</span></li> </ol> だとして、 ol.dataList{width:300px;position:relative;border:solid 1px gray;padding:0.5em 1em;} ol.dataList li{position:relative;width:100%;white-space:nowrap;overflow:hidden;} ol.dataList li span.value{position:absolute;right:0;background-color:white;padding-left:1em;} ol.dataList li:after{content:" -----------------------------";>
No.1です。 ＞サイズや色などの種類の数が違う為に並べるときの数にも違いが出てくる 　ということは、 「商品リスト」「種類が違う物がある」 　から、HTMLは２階層のリストとしてマークアップすることになりますね。どのようにプレゼンテーションするかはHTMLを書くときは、一切気にしない・・・くらいの気持ちで。 ★「1列目】_靴下A_1赤色_2白色_3黄色_4緑色、【2列目】靴下B_1赤色_2白色、【3列目】靴下C_1赤色_2白色_3黄色…のように商品によって」 ですから、率直に <div class="productList"> <!-- 商品リストを示す要素なんてないのでclassを併用したdiv要素でマークアップします。--> ＿<ol><!-- 序列リストにしておきます --> ＿＿<li>靴下A ＿＿＿<ol> ＿＿＿＿<li>赤色</li> ＿＿＿＿<li>白色</li> ＿＿＿＿<li>黄色</li> ＿＿＿＿<li>緑</li> ＿＿＿</ol> ＿＿</li> ＿＿<li>靴下B ＿＿＿<ol> ＿＿＿＿<li>赤色</li> ＿＿＿＿<li>白色</li> ＿＿＿</ol> ＿＿</li> ＿＿<li>靴下C ＿＿＿<ol> ＿＿＿＿<li>赤色</li> ＿＿＿＿<li>白色</li> ＿＿＿＿<li>黄色</li> ＿＿＿</ol> ＿＿</li> ＿</ol> </div> だとして div.productList{width:648px;border:solid 1px gray;} div.productList ol,productList ol li{list-style:none;margin:0;padding:0;} div.productList ol li ol{margin-left:40px;} div.productList ol li ol li{width:150px;height:150px;float:left;border:solid 1px; gray;} div.productList ol li ol:after{content:"";display:block;clear:left;} とか・・・ もっと増えたら２段になる。
No.1です。 　せっかく仕様書の存在をお知らせしたので、御自身で調べてください。(^^)絶対にそのほうが身につきます。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 6.2.1 'inherit'値 　各プロパティは、カスケードされた値'inherit'を持ってもよい。この値は、与えられた要素に対して、プロパティが要素の親の算出値を指定値として取ることを意味する。'inherit'値は、値の継承を強制するために使用でき、正常に継承されないプロパティにも使用できる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Assigning property values, Cascading, and Inheritance - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )］より 　直近の親コンテナブロックで、指定された本来は継承しないプロパティを強制的に継承させるのがinheritですよ。もし親要素で他の値が指定されていると、left:プロパティの初期値(auto)に戻りません。 　継承やカスケードを大きく誤解されているようです。復習しましょう。 div#test {} ↓ body#top div#test {} は継承ではありません!!! <div style="border:solid 2px red"> 　<p style="border:inherit">なんたらかんたら</p> 　<p style="border:inherit;border-color:green">なんたらかんたら</p> </div> が継承です。
No.3です。 　回答者同士でやり取りしてはならないので、No.3の回答への補足です。 質問への疑問 　「HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」---スタイルシートを解釈しないユーザーエージェントや検索エンジンも含めて---のですから、もし、それらが意味的に異なる３つのリストなのでしたら、そのようにマークアップすべきでしょう。 　また、順不同リスト(UL)--順番は関係ないリストでしたら、項目を並び替えればよいです。 　確かにColumnを使用する手法もありますが、ブラウザのサポートが追いついていません。(来年4月以降の状況を見てから)。その場合は、No.3で示したように (1)----- (4)----- (8)---- (2)----- (5)----- (9)---- 　 ----- (6)----- (3)----- (7)----- 　とColumnを使用するとたとえリストが長くなっても対処は出来ます。 　単にボタンのように画像に置き換えて並べるのでしたら、絶対配置を使用する方法もあります。 　要は、HTMLの文書構造が分からないと適切なアドバイスは無理です。 　
修正したはずが修正前の物をあげてしまったようです。 セクションや行数を増減、ウィンドウ幅を変更してみてください。 常に高さ一杯(少ないときはウィンドウ高さ一杯)で左のborderは引かれる筈です。 ★HTMLにはデザイン的要素はありませんから、自由にデザインは変更できるはずです。 ★印刷時には表示されません。 ★子供セレクタ(>)使用していませんので冗長ですが、IE7以降は問題なく表示されるはずです。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;position:relative;} /* 左右の枠線指定 */ /* 検索フォームを左に、最底画面高～body高さ */ /* 本文目次は本文右、高さは本部高 */ html{height:100%;} body{min-height:100%;} div.header form p, div.section div.nav{ position:absolute; height:100%; top:0;width:150px;/* 位置 */ border:ridge gray; } /* 枠線など細かい調整 */ div.section{position:relative;}/* 位置サイズの基準 */ div.section div.nav{border-width:0 0 0 2px;right:0;} div.header form p{ border-width:0 2px 0 0; left:0;text-align:center; } div.header,div.section,div.footer{margin-left:155px;} h1,h2,h3,h4,p{margin:0;line-height:1.6em;} div.section p{text-indent:1em;} div.section div.section{margin:0 155px 0 5px;} div.header form p form{ margin-top:20px; } /* テストのため */ div.section div.section{min-height:300px;} /* おまけ */ div.header form p:before, div.section div.nav ol:before{ color:red;font-weight:bold;white-space:pre; } div.header form p:before{content:"ディスプレイ高一杯\A";} div.section div.nav ol:before{content:"本文高一杯\A";} pre{border:solid black 1px;padding:0.5em;1em;} body{background-color:silver;} div.section{background-color:white;} div.section div.section{background-color:rgb(255,255,200);} div.header form p{background-color:aqua;} --> ＿</style> ＿<style type="text/css" media="print"> <!-- div.section div.nav,form{display:none;} div.footer{page-break-before:always;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<form action="./"><p><input type="text" size="10" value=""><input type="submit" value="検索"></p></form> ＿</div> ＿<div class="section"> ＿＿<h2>質問と回答</h2> ＿＿<div class="section" id="Question"> ＿＿＿<h3>CSSについてです</h3> ＿＿＿<p> ＿＿＿＿tumblrのテーマを作っているのですがサイドバーのレイアウトがうまくいきません。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿具体的には、サイドバーがコンテンツがある部分の長さまでしか伸びず、それより下は記事の部分が食い込んでしまうといった問題が発生しています。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿僕は、サイドバーの横にあるborder-rightを記事などほかの部分と同じ長さまできっちり伸びるようにしたいです。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿このサイトを見てこんな設定をしてみたのですがこれでは画面に表示されている部分までしか効果がなくスクロールしたら意味がなくなってしまいます。</p> ＿＿＿</p> ＿＿</div> ＿＿<div class="section" id="Answer"> ＿＿＿<h3>親コンテナブロックを基準に</h3> ＿＿＿<p> ＿＿＿＿デザインは必ず文書構造に従うはずです。文書構造に反したデザインは利用しづらい。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿このサンプルでは記事全体に付随したヘッダは記事全体に、本分に付随した目次は本文のサイズに従います。 ＿＿＿</p> ＿＿＿<pre>position:absolute; height:100%;</pre> ＿＿＿<p>ポイントは、この2プロパティだけ・・・</p> ＿＿</div> ＿＿<div class="nav" id="tableContent"> ＿＿＿<ol> ＿＿＿＿<li><a href="#Question">CSSについてです</a></li> ＿＿＿＿<li><a href="#Answer">親コンテナブロックを基準に</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-02-13</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
> <h2>の中にいきなり<h4>は変ですよね。 劇的かどうかはわかりませんが、本来、国語や英語、小説では、 見出し１ 　見出し２ 　　見出し３ 　　見出し４ 　見出し５ と、区分（セクション）でわけていくと、勝手に「章」「節」「項」と別れてしまいます。 見出し１ 　　見出し２ 　　見出し３ 　　見出し４ このように、２つめの見出しを２段下げて書いてみても、デザイン的に２段下がっているだけで、 それは「項」ではなく、「節の見出し」ということになります。 （2段階入れ子にしたセクションを1回の入れ子で入れる事はできませんから、（日本語での呼び方として）1段階下げた呼び方をする事になります。） せいぜい、見出しなしで小さなセクションを作り、その中にさらに小さなセクションを入れ子にできる程度です。 見出し１ 　（見出しのない区分の本文） 　　見出し２ 　見出し３ 　見出し４ その国語や英語のルールをもとに、XHTML2（この規格は消滅しました）では、「ここからここまでが見出しである」という意味のタグ<h>があります。 <section> <h>見出し１</h> 　<section> 　<h>見出し２</h> 　　<section> 　　<h>見出し３</h> 　　</section> 　　<section> 　　<h>見出し４</h> 　　</section> 　<h>見出し５</h> 　</section> </section> また、HTML5でも同様の方法として、<h1>だけでタグ付けができます。 <section> <h1>見出し１</h1> 　<section> 　<h1>見出し２</h1> 　　<section> 　　<h1>見出し３</h1> 　　</section> 　　<section> 　　<h1>見出し４</h1> 　　</section> 　<h1>見出し５</h1> 　</section> </section> これらには「見出しのレベル」という概念はありませんので、 先に書いたように、「節（<h2>に相当する部分）」という区分をつくらずに、それより小さな「項（<h3>に相当する見出し）」を作る事はできません。 国語の書き方と同様に、単純に、「セクションが入れ子になっているから、その入れ子の度合いと同じレベルの見出しである」という意味になります。 この入れ子の度合いを、わざわざ明示しているのが<h2-6>です。
>windows7にアップする方法 Windows7アップグレード版買ってきて、アップグレードですかね。 アップグレード版まだ売っているかは疑問ですが。 ただ…… http://www.mouse-jp.co.jp/company/news/2007/news … 2007年のモデルだといろいろ厳しいんじゃないですかねぇ。 新しいヤツ買った方がたぶんいろいろ速いですよ。 # PCなんて消耗品ですし。
私自身も今、レスポンシブに対応するサイト制作のため色々と調べているのですが、 実機をエミュレートできるサービスがNTTレゾナントで始まっています。 http://appkitbox.com/testkit 参考になさって下さい。
問題はCSSの切り分け方と順番ですね。 まずCSSのルールですが、基本的に後に書いたスタイルが優先されます。 それは良いですよね？ で、ご質問者様のheadでのmedia指定ですが、 min-width:1024px→min-width:768px→min-width:480pxと指定します。 この場合注意しないといけないのは、すべてmin-widthによる指定なので、結局min-width:480pxでのCSSに指定したものは、480px以上の場合必ず適用されると言うことです。 考えてみれば当然です。 min-width:480pxって指定しているんですから、横幅が1024以上のPC画面でも、もちろん横幅480px以上あるわけですから、適用されるに決まってます。 そして、先ほど書いた、CSSは後の方が優先されるルールです。 この場合、smart.cssが後に読み込まれるので、layout.cssよりsmart.cssが優先されるのは当然です。 なので、この場合、 min-width:1024px→min-width:768px→min-width:480pxではなく min-width:480px→min-width:768px→min-width:1024pxという順番で指定した方が良いと言うことです。 PCから記述したい場合は、 layout.css→media制限なし tabletcss→max-widht:1023px smart.css→max-widht:767px という感じで指定します。 ご参考まで。
javascriptが使えない前提でページをかき つかえる環境のブラウザを別ページに飛ばせばよいでしょう もしくはnoscriptタグのなかでmetaタグで飛ばす手も考えられます <noscript> <meta http-equiv="refresh" content="0;URL=hoge.htm"> </noscript> いずれにしても環境依存なので、きっちりやるなら トップページにPC用、スマホ用、ガラケ用のページへのリンクを貼り ユーザーに任意で選ばせることです
HTMLのバージョンには関係ないです。 ＞firefoxではfontにアンチエイリアスが掛かる一方、IEでは掛からないのですが、 　それも違います。私のWinには、TrueTypeのヒラギノ角ゴ Pro W3ありませんから、firefoxとIEは同じです。 　これは、ClearType( http://ja.wikipedia.org/wiki/ClearType )フォントの特性です。 　擬似的にアンチエイリアスをかける手法として 　⇒“ＭＳ Ｐゴシック” をメイリオみたいにアンチエイリアスさせるCSS3ハック | Webロケッツマガジン( http://webrocketsmagazine.com/entry/20120206/ant … ) 　フォントのアンチエイリアスなんて、本当に些細な枝葉末梢の問題です。視覚弱者にはアンチエイリアスは見難くなります。ウェブの最重要課題は『HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )・・・・』 　 　サイト作りで最も重要なのは、 ★どうすれば自分のウェブサイトが独自性、価値、または魅力のあるサイトといえるようになるかを考えてみる。同分野の他のサイトとの差別化を図ります。( https://support.google.com/webmasters/answer/357 … ) 　なのですよ。
HTML側に問題があることが多いです。DOCTYPEスイッチを標準モードで起動するように書き加えて 　⇒DOCTYPEスイッチ－HTMLの基本( http://www.htmq.com/htmlkihon/302.shtml ) 将来性を考慮すると、HTML4.01strict、すなわち <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> ついで、 　⇒Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html ) 　のDATA入力(右上)で大きな減点が無いように修正します。 　ここまではHTMLを作成するときの基本です。 　その上で、JQeryなりCSSを導入していきましょう。これでほぼ100%解決するはずです。
質問と絵が一致してない？？ 　ひょっとして、タブ(tab( http://dictionary.goo.ne.jp/leaf/ej3/84023/m0u/t … ))じゃなくて、タグ(tag( http://dictionary.goo.ne.jp/leaf/ej3/84132/m0u/t … ))のこと 　サムネイル(thumbnail( http://dictionary.goo.ne.jp/leaf/ej3/86164/m0u/t … ))じゃなくて、アイコン(icon( http://dictionary.goo.ne.jp/leaf/ej3/42520/m0u/i … ))、いわゆるファビコン(Favicon( http://ja.wikipedia.org/wiki/Favicon )) 　質問は、ファビコンを指定する方法ですか？ 　上記Wikiに詳しい説明がありますが、アイコンエディタでアイコンを作成してサイトに置き、HTMLの<head></head>内に <link rel="SHORTCUT ICON" href="/favicon.ico"> <link rel="ICON" href="/favicon.ico"> とでも、そのファイルへのパスを支持しておけば良いです。 　アイコンエディタは色々ありますから探してください。 　⇒アイコンエディタ - Google 検索( https://www.google.co.jp/search?q=%E3%82%A2%E3%8 …
＞E8のCSSハックを使用したいのですが、 IE8には、特段のハックは不要だと思いますが？？HTMLを標準モードで動作するようDOCTYPEを記述するほうが先 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> として、HTML4.1strictで作成すればよいはず、 ＞バックスラッシュをどのようにしたら入力できるかわかりませんでした。　 バックスラッシュは、日本語のOSでは\と表示されます。
いずれにしろスタイルシートは数枚でしょうからスタイルシートを書き換える。 スマホも利用ユーザーエージェントとして考慮されているなら、リキッドで作られているはずです。「min widで1100」はないでしょう。
普通に正規表現を利用した置換で <\w+(\s[^>]*)> ↓ \1
質問の意味がさっぱりわかりませんが、想像ですが・・ そのページを開いたとき、フォーカスが特定の要素に当たった状態にしたいということ？？ 通常はページを開いたときは、ルートにフォーカスはありますが、タブでフォーカスが移動することを省略して・・ということ。 ＞ペライチの縦長サイトを作成しています。 　サイトではなく「ページ」 ＞そのサイト【ページへ】のURL【リンク】をクリックし【て移動し】た際に、ページ内の特定の高さ【位置】に自動的に表示させる方法を探しています。 Ａ：本来はページ内アンカーでよいはずです。 　　<a href="hoge.com/abc.html#AnchorName>ほげ</a> ＞ページ内のコンテンツにて一つ目の括り方を<div class="base">、二番目のコンテンツを<div class="info">という形で、メニューをクリックするとそれぞれindex.html#base、index.html#infoという風に翔ぶようにしています。 　ということは、すでにページ内にはアンカーがあるのですから・・ ＞そのサイト【ページ】に初めて訪れる際に、index.htmlをクリックした人が、表示する段階で<div claas="info">の箇所にスクロール【フォーカス】がいっているようにしたいのですが、どのようにすればいいのでしょうか。 　とても不親切ですのでそんな事はしません。 　あくまで、目的を持っていく場合は#ですし、そうでない場合は最初から ＞そのサイト(ページ)へ移動したURL（リンク）をクリックした際に、ページ内の特定の高さに自動的に表示させる方法を探しています。 　最初に戻りますが、ページ内アンカーを使用します。 [例] href = uri [CT]( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
質問者様は今まで「自作や知人サイト作成」の経験しかなく、業務としてきちんと契約を結んで作業をするのが初めてとお見受けします。ならば、そのような人に対して継続して仕事を依頼するにあたっての最初の依頼としては妥当なものと思います。 仕事を依頼する側からすれば、あなたへの今回の依頼のような基礎的な仕事をこなせるかどうかわからない人に「クライアントの要望に答える為にガッツりソースを変更」する業務を依頼するなんて無謀な賭けはできません。おそらくは簡単な仕事を依頼してみてあなたがその仕事をきちんとできるかどうかを見ているのでしょう。あるいは相手にあなたを戦力として鍛え上げる気があるならば、一連の業務の流れを単純な仕事を通じて勉強させるという意図が含まれているでしょう。 上のようなことを書くと「俺はそんなことぐらいきちんとできる、自分のサイトを見てくれ」と言うかもしれませんが、相手が見たいのは完成品に加えて制作の過程であなたがきちんと依頼者とコミュニケーションできるかどうかです。 なお、 > htmlは使いまわしで、CSSで見た目を変更するくらいのものです。 > デザインの経験には全くならないでしょうが というのはあなたの発言について。 現在のページ制作はHTMLでは文書構造のみを記述してCSSでデザインを付けていくという流れになっています。このことをきちんと認識しているならば上記のような発言は現在では見当違いであることが理解できると思います。
　スタイルシートにしろHTMLにしろ、学ぼうと思ったら、何よりも先に仕様書に一応目を通しておく。勉強だっていきなり問題集から始めないでしょ(^^) すくなくとも 　いずれも邦訳--今のところウェブ標準--- ・HTML 4.01仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　ここに、こんな掲示板で得られる断片的であやふやな情報ではなく、正確な情報があります。 *は 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　→5.3 全称セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) です。詳細度は 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　→6.4 カスケード処理( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　　→6.4.3 セレクタの詳細度を計算する( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) あたりです。 　CSS2では、セレクタを記述する際に基点となるセレクタから書き始めることになりました。CSS1で、.headerと書かれていたものが、div.headerと書くことになった。CSS1との整合性のために、詳細度は0のセレクタとして*(全称セレクタ)が導入され、.headerは、*.headerと一旦解釈される。 * { margin: 0; padding: 0; } 　は私は使用しません。なぜなら、ブラウザの持つすべてのスタイルシート HTML 4のためのデフォルトスタイルシート( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　におけるmargin,paddingをすべて上書きしてしまうため、要素すべてに再設定しなければならなくなり、スタイルシートが肥大化・混沌として非効率だからです。 *を他に変えてCSSを組むことはできないのでしょうか？ *{} は詳細度が0000ですが、p{}とすれば詳細度が0001になります。私は必ず書いています。 html,body{margin:0;padding:0;} p{margin:0;text-ndent:1em;line-height:1.7em;} というふうに・・ 　セレクタや詳細度、カスケーディングの仕組みは、CSS(カスケーディングスタイルシート)にとって肝です。ここを完全に理解しておかないとスタイルシートは書けませんよ。
上からですか？プロの人からしたら素人の質問が的を得なさすぎて若干イラッと来てしまうのはしょうがないと思います。 それでも答えてくれているんですからとても良い方だと思います。 ググれ。 とかで解答が終了してるわけでもないですし、むしろ真面目に質問者さんをスキルアップさせたいと思っているからこその厳し目の言葉な感じがします。
HTTP要求ヘッダに含まれる、 firefox User-Agent: Mozilla/5.0 (Windows NT 5.1; rv:26.0) Gecko/20100101 Firefox/26.0 iphone5 User-Agent: Mozilla/6.0 (iPhone; U; CPU iPhone OS 6_0 like Mac OS X; ja-jp) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/6.0.0 Mobile/8J2 Safari/7875.18.5 　すなわち、サーバーの.htaccessなり、HTTP_USER_AGENT--(CGI,PHPなど)でHTML出力を変更しています。それ以上はわかりません。 　この方法は、あまり感心しません。新しいuserAgentが登場するたびに、その指示を書き換えなければならない。膨大なユーザーエージェントに対応できない。現に携帯電話やメジャーでないユーザーエージェントを指定するとパソコン用と同じものが返ってきます。 　firefox + FireMobileSimulator( https://addons.mozilla.jp/firefox/details/8519 )で確認!! 　また、複数のコンテンツを作成する必要があるなど、HTML本来の 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　に反するからです。
@charset "utf-8"; です。
現象が確認できない!! 　もう解決したのなら、頭を悩ます人が発生するので・・ 　ただ、あまりにもHTMLがタグスープになって酷いので、ちょっと手を入れるにもハードルが高すぎます。--とってもまずいテンプレートです。 　1/10のHTML/CSSで同等以上のことが出来ます。そしてとってもわかりやすくなる。 　テンプレート自体を見直したほうが良いでしょうね。
その仕組みどおりに書けばよいです。 ・・・・<abbr title="Hyper Text Markup Langage">HTML</abbr>・・・じゃまずいの？ 　⇒次に、 ABBRの用例を幾つか示す。 <P> <ABBR title="World Wide Web">WWW</ABBR> <ABBR lang="fr" title="Soci&eacute;t&eacute; Nationale des Chemins de Fer"> SNCF </ABBR> <ABBR lang="es" title="Do&ntilde;a">Do&ntilde;a</ABBR> <ABBR title="Abbreviation">abbr.</ABBR> 　( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
ぜんぜんフレームっぽく無いですが？？？ 　タグとは、HTMLの用語で、HTMLは文書を読み解き、それを構成する要素に分解して、ひとつひとつの要素をタグを用いてマークアップする物で、デザイン(プレゼンテーション)とは関係ありません。 　その文書構造を利用して、どのように表示するかはスタイルシートのお仕事です。<h1>ここは見出しだよ</h1>とマークアップされていれば、ブラウザが持っているスタイルシートで、大きな太字で表示されるに過ぎません。!! 　タグ自体は、HTMLのソースを見れば一目瞭然なのですが、決して参考になるサイトじゃないですよ。 ・・・固定幅なので幅の狭いディスプレイやウィンドウ幅を縮めたらスクロールが必要!!になりますね。このサイトを作られた方は、そもそもtableが否定されている根底を知らない・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 単に文書内容を整形する目的だけで表を用いるべきでない。 さらに、見た目のために表が用いられると、その表が大きなディスプレイのあるシステムで作られた場合、表を見るために水平スクロールを強いられることがある。 こうした問題を最小限に押さえるため、著者は文書の整形には表ではなくスタイルシートを用いるべきである。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Tables in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　全く参考にしてはならない悪い見本・・。これじゃスタイルシートを使う意味がない。 ★そのページでは、headerブロックを上部に置き、ナビゲーションリストを横に並ぶようにスタイルシートで指定してあります。
＞例えばその操作を実行したとして、 がどれを指すのかわかりませんが、firebugでの操作でしたら、それはあくまでHTMLやCSSをどのように書き換えたらよいか確認するだけで、リモートにあるファイルを書き直すものではありません。 　変更を確認したら、サーバー側のスタイルシートなりを書き換えることになります。
上げていらっしゃった条件に当てはまるようなものだと、こういうものがあるみたいでした。 ○PC・スマートフォン対応　動画配信・販売システム【ソーシャルキャスト】 http://socialcast.jp/ レンタル形式で借りるか、ライセンスを購入？するかで利用できるようです。 詳しくは問い合わせて頂いた方が良いと思うのですが、さっと見た感じおっしゃっていた条件は満たしていそうです。 価格もSI会社規模の費用では無いみたいですね。 その他だと、以下のようなものでダウンロード型の動画サイト構築は出来るみたいです。 ○デジタルコンテンツ王 http://haishin.tv/ ダウンロード販売で、Windowsメディアのみということみたいです。 価格はさっきのものと同じ程度か少し高い程度のようです。 ○ムービーコマース http://movie-commerce.com/ ダウンロード販売みたいです。価格はのってないので分かりません。
>横はwidthで出来ますが。 　そうです。ブロック要素なので、height:width:共にautoなのですが、ちょっと扱いが変わっていて、ブロック要素の場合は横幅一杯、縦は折り返しなどもあるため内容に追随・・・幅は無くても一杯、縦はなかったらゼロ。 　置換インライン要素とか、非置換とか、私もこの部分はややこしくて実際にやってみないとと(苦笑)。 　⇒10 視覚整形モデル詳細( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　⇒10.6 高さとマージンの計算( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　私は原則としてline-height:を指定しています。テキストが中央に表示されますし、継承されるので・・
javascript(またはjquery。jqueryはjavascriptを使いやすくするライブラリ)を使用して、ホバーしたタイミングでopenMegaというクラスを付与してスクロールダウンアニメーションで表示させているんですね。 つまり、javascriptでCSSを操作しています。
細かい修正 ★Another HTML Lint - Gateway( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATA入力 ★W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … ) でチェックすみ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> <meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> <title>サンプル</title> <meta name="author" content="ORUKA1951"> <meta http-equiv="Content-Style-Type" content="text/css"> <link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > <link rel="START" href="../index.html"> <style type="text/css"> <!-- html,body{margin:0;padding:0;background-color:gray;} div.header,div.section,div.footer,div.footer div.nav ol{ width:80%;min-width:420px; margin:0 auto;padding:1px; background-color:white; } div.header{height:100px;} div.section{margin-top:30px;} div.footer div.nav{position:absolute;top:100px;left:0;width:100%;} div.footer div.nav ol li{margin:0;padding:0;} div.footer div.nav ol{ list-style:none;text-align:center;font-size:0; background-color:aqua; } div.footer div.nav ol li{ display:inline-block;width:105px;height:30px; position:relative;font-size:16px; } div.footer div.nav ol li a{ display:block;width:100%;height:100%; overflow:hidden;text-indent:-20em; } div.footer div.nav ol li ol{ position:absolute;top:30px;width:105px;margin:0;padding:0;min-width:0; display:none; } div.footer div.nav ol li:hover ol{display:block;} div.footer div.nav ol li ol li{height:17px;display:block;} div.footer div.nav ol li a{background-image:url(./images/menue.jpg);} div.footer div.nav ol li a[href="/"]{background-position:0 -2px;} div.footer div.nav ol li a[href="/News"]{background-position:-105px -2px;} div.footer div.nav ol li a[href="/Products"]{background-position:-210px -2px;} div.footer div.nav ol li a[href="/Products/P1"]{background-position:-210px -102px;} div.footer div.nav ol li a[href="/Products/P2"]{background-position:-210px -150px;} div.footer div.nav ol li a[href="/Support"]{background-position:-305px 0;} div.footer div.nav ol li a[href="/"]:hover, div.footer div.nav ol li:hover a[href="/"]{background-position:0 -36px;} div.footer div.nav ol li:hover a[href="/News"], div.footer div.nav ol li a[href="/News"]:hover{background-position:-105px -36px;} div.footer div.nav ol li:hover a[href="/Products"], div.footer div.nav ol li a[href="/Products"]:hover{background-position:-210px -36px;} div.footer div.nav ol li a[href="/Products/P1"]:hover{background-position:-210px -119px;} div.footer div.nav ol li a[href="/Products/P2"]:hover{background-position:-210px -169px;} div.footer div.nav ol li:hover a[href="/Support"], div.footer div.nav ol li a[href="/Support"]:hover{background-position:-305px -36px;} div.footer div.nav ol li a[href="/"]:active{background-position:0 -68px;} div.footer div.nav ol li a[href="/News"]:active{background-position:-105px -68px;} div.footer div.nav ol li a[href="/Products"]:active{background-position:-210px -68px;} div.footer div.nav ol li a[href="/Products/P1"]:active{background-position:-210px -135px;} div.footer div.nav ol li a[href="/Products/P2"]:active{background-position:-210px -185px;} div.footer div.nav ol li a[href="/Support"]:active{background-position:-305px -68px;} --> </style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿</div> ＿<div class="footer"> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="/">Top</a></li> ＿＿＿＿<li><a href="/News">News</a></li> ＿＿＿＿<li><a href="/Products">Products</a> ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li><a href="/Products/P1">P1</a></li> ＿＿＿＿＿＿<li><a href="/Products/P2">P2</a></li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿＿<li><a href="/Support">サポート</a></li> ＿＿＿</ol> ＿＿</div> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿</dl> ＿</div> </body> </html>
ul#topicpath{ background-image: url(img/base/blackground.png); width: 200px; white-space: nowrap; text-align: center; padding: 40px auto 0px auto; } ↑これどこにあるんですか？ なんとなくやりたいことはわかりましたが、ulじゃなくて、liに指定しないとダメなんじゃないですか。
その部分のHTML(DOM)が分からないと・・ 　特に、HTMLが文書構造ではなく、このようにプレゼンテーション(デザイン)目的に書かれているとなおさらです。 ・改行させたくなければ、display:inline-block;＋white-space:nowrap;、又は縫合ブロック幅を固定する。 ・ディスプレイ幅が狭くなると折り返して表示させるほうが横スクロールをしなくてすむので、ユーザーインターフェースを考慮すると良いはずですが？？ ・折り返したくないときはリキッドを使ってブロック幅が全体の幅に合わせて縮小させるのがセオリーですが？ clip: auto !important;　なぜ!important?詳細度が0030なので要らないと思うけど? 　　・・・基点となるセレクタが書かれていないので分からないけど
askaaskaさんのに付け足して、どの要素よりも一番上に来る指定としてz-indexを書いてあげればスライドショーの上にロゴが来ますよ！
#2です > イラストレータで３Dを行うと 今日びはドローソフトの定番であるAdobe Illustratorの3D作成などはよく行われるのですか？ Adobe Illustratorの3Dエフェクトは、一般の3Dレンダリングとはかなり趣の違った処理だと思われます。 http://detail.chiebukuro.yahoo.co.jp/qa/question … ゲーム用途のビットマップマッピングやエフェクトよりも、OPEN GLによるべクタドロー系のアクセラレーションが有効に思えるのですが。。 （不肖私めのマシンはCorei7＋のWin7デスクトップ=メモリ8GB＋SSD128DB＋HDD 1TB、最安のQuadro挿してます） ただ、実際のWeb制作の仕事で、Illustratorの3D制作は皆無だと思いますので、あまり3Dに拘泥するとシステムの価格が跳ね上がりますので。。 自分はアプリやデバッガの同時多重動作が命だと思っていますので、SSDによるスワップの高速化を重要視しています。 会社ではWinもMacも使っているのですが、ノートPCでいうとMacBookAirは非常に優秀です。 グラフィックスカード、WiFi、SSDとも非常に高速で安定、Adobeなどのソフトを使ったときのウィンドウやパレットのルックアンドフィール、画面解像度、画像再現の良さ、スタイリシュさなど、同一価格帯のWindowsノートではまったく歯が立たないことから、最近のノート購入はMBA一択になりました。
スタイルシートの場合、tableとtd,thのborderは別の物として扱われます。 出力されるHTMLのDOMを参考に、セレクタを記述し該当するtable要素とセル要素のborderを消すと良いです。
No.1です。 質問から、<span>自体は書けるのでしたら・・ div.header div.news span{quotes: '"' '"' "'" "'" } div.header div.news span:before{content:open-quote;} div.header div.news span:after{ content:close-quote;} とすればよいし、 他の文字なり画像を入れたければ div.header div.news span:before{content:"▲";} div.header div.news span:after{ content:"▼";} とか div.header div.news span:before{content:url();} div.header div.news span:after{ content:url();} とすればよい!! 要は、DOM上で、その新着情報部分が特定できれば、スタイルシートで出来ます。 サンプル新着情報内のA要素に、"や三角や画像を追加して見ました。 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- body>div.section{height:300px;position:relative;} div.news{border:solid 1px gray;} div.news h3{margin:0;line-height:1.4em;} div.news ul,div.news ul li{list-style:none;margin:0;padding:0;} div.header div.news{width:50%;margin:0 auto;padding:10px;} div.header div.news a{quotes: '"' '"' "'" "'" } div.header div.news a:before{content:open-quote;} div.header div.news a:after{ content:close-quote;} div.section div.news{position:absolute;right:0;top:0;width:20%;} div.section div.news a:before{content:"▲";} div.section div.news a:after{ content:"▼";} div.footer div.news a:before{content:url(http://cmm001.goo.ne.jp/img/logo/goo.gif);} div.footer div.news a:after{ content:url(http://cmm001.goo.ne.jp/img/logo/goo.gif);} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<div class="saside news"> ＿＿＿<h3>新着情報</h3> ＿＿＿<ul> ＿＿＿＿<li><a href="./products/1.html">新製品1</a>が追加されました。</li> ＿＿＿＿<li><a href="./blog.html">ブログ更新</a></li> ＿＿＿＿<li><a href="./info/">会社情報</a>を更新しました。</li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<div class="section news"> ＿＿＿<h3>新着情報</h3> ＿＿＿<ul> ＿＿＿＿<li><a href="./products/1.html">新製品1</a>が追加されました。</li> ＿＿＿＿<li><a href="./blog.html">ブログ更新</a></li> ＿＿＿＿<li><a href="./info/">会社情報</a>を更新しました。</li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<div class="section news"> ＿＿＿<h3>新着情報</h3> ＿＿＿<ul> ＿＿＿＿<li><a href="./products/1.html">新製品1</a>が追加されました。</li> ＿＿＿＿<li><a href="./blog.html">ブログ更新</a></li> ＿＿＿＿<li><a href="./info/">会社情報</a>を更新しました。</li> ＿＿＿</ul> ＿＿</div> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
スタイルシートを使ってる事になります。 style=　以降がスタイルシートの部分です。 スタイルシートを使うにはいくつかの方法があります。 今回のようにtdタグの中で直接指定する方法も、その一つです。 スタイルシートの指定方法は下記URLで詳しく紹介されているので、参考になさってください。 http://www.tohoho-web.com/css/basic.htm
1.　ブラウザが、その指定に対応しているかいなかの問題で、HTMLとCSSのバージョンには関係ありません。HTML2で書かれたものでもCSS4でデザインできます。 2.　@charsetは、HTMLのmetaと同様、実際に書かれている文字コードとあわせます。基本はHTMLともあわせたほうが安心です。 　Windowsじゃあるまいし、拡張子は一切関係ありません。.cgiだろうが、htmlだろうが関係ないです。HTTP応答ヘッダで指定されていればそれに従います。CGIから、content-type:text/csssと出力させても良いし、.htaccessで指定しても良い。 3. CSS3ではmediaqueryの機能が追加されましたから、必要ならそれが使える。
＞文法解析エラーが発生しました 　これ以上の説明は無いです。文法が間違っている。 　　具体的には、*font-sizeというプロパティはありません。宣言ブロックは{}で囲います。 　⇒Syntax and basic data types - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )
>左端、右端のli要素にそれぞれidを付けてborderを指定したところイメージ通りに出来ました。 例えば、ulの左右にborderを付ければ、は不要になりませんか？または、last-childを使うとか。デザインの為のidやclassはいかがなものかと存じます。 >しかしどうしてa要素のborder-left（right）とli要素のborder-left（right）がかぶらないのでしょうか？？ 完全な入れ子ですから、被りません。margin.borderの中にwidthがありますので、border同士は特別な事をしないと、かぶらないです。また、a要素には文字のみならず範囲でリンクを反応させたい為、display:blockを当てる事が多いですが、その場合はwidth:100%を指定しているようなものです。 >また、このような方法は一般的なのでしょうか？？ 文章構造を利用してのcssは一般的です。
Youtubeの共有埋め込みコードをコピーペーストしてください。
<head>～</head>内に、 <meta http-equiv="Content-Style-Type" content="text/css"> <style type="text/css"> <!-- body{ background-color: aqua; animation-name: anime1;/* どのアニメーションを使うか */ animation-duration: 10s;/* 動作時間 */ animation-timing-function: ease;/* 動作の形 */ animation-iteration-count: 1;/* 何回??? */ } @keyframes anime1{ 0% {background-color: blue;} 100% {background-color: aqua;} } --> </style> を加える。 古いブラウザ対応のためにベンダーフィックスが必要になる場合もあります。 また、極めて簡便な方法として、背景を一回動作のアニメーションGIFにするという奥の手もあります。
サイト構築のためにデザイン・コーディング、どちらも兼務している者です。 発注も行っておりました。一意見としてご参考になればと思い、回答させて頂きます。 結論としては、当事者間でいかに緻密な連絡をとるかでやり易くもやりにくくもなります。 （結局、緻密な連絡ができず、兼務することになっているのですが・・・。） 長文となり申し訳ないのですが、ウェブ作成時の流れ概要、その段階ごとの困った点という流れで記載いたします。 ・・・技術者視点か、と言われると微妙です・・・ 当方のウェブ作成時の流れと困った点は大まかに下のような感じです。 （肝は両者間の連絡取り合いによるイメージの共有と、共有できるくらい土台の 知識があるかどうかかな？と感じております。） １．コンセプト・目的・必要なページなどもろもろ土台を決めます。 　　（ここ大事です。目的が決まっていないと大変です。 　　とりあえず作って！だけではデザイン側もコーディング側も大弱りです。 　　一番出戻りコストが発生しやすい根本です。（失敗談あり。） 　　どんな目的で、何のために作るのか。その場合、どんなページが必要なのか、 　　と細かく決めていきます。 　　ページ階層やそれぞれの目的もあると楽です。 　　そしてこの段階からデザインの方と共有します。（できればコーダーの方とも。。。） 　　そうするとここはこんな感じのデザインになります、それではこんなコーディングが 　　良いですね、とアイディアをいっぱい出して頂けます。ラフ画レベルまで 　　この段階で作ったりしてます。） 　　→参考までに... 　　どんなことをどんな風に決めるか、 　　実際にWEB作成の流れを掴まれると良いと思います。 　　下記サイトは非常に参考になると思います。 　　http://webdesignrecipes.com/web-development-flow/ 　　目的によってデザインも異なります。 　　基本をしっかり作ると、後々楽です。 ２．デザインでラフ画から細かいレベルまで作成（デザイン編） （ワイヤーフレームのみの設計図のみでは、コーディングの方に 　ウェブデザインも色も画像も全て自分で判断してね、というお話になります。 　コーディング者は泣きます。正直。もれなくイメージと違うサイトができあがります。 　2回程経験しました。） →ある程度の解消法 ラフ画だけではなく、 色、ピクセル、使用する写真など、フレームワークレベルよりもさらに細かく、 全ページ端から端まで色を載せたものを作ります。 そうすることで、コーディング側業務でここは何ピクセル？とかここは何色？ どのフォントを使用するかとか、フォントは商用利用可能かとか、そんな疑問を解消します。 そしてそのデザインを共有します。 なぜこのデザインか、サイトの目的にあっているか、コーディングはできるか、等。 明るい色にして、とかもうちょっと暗く、とか。 ここは動かしたいとかどういう風に動かそうとか。 　　　 部分部分は良いパーツでも、全体に載せてみたらぐちゃぐちゃ、なんてこと多々あります。 フォントの数とか、色合いとか。まとめるためのコツがありますので・・・。 それを経験してから、デザインは上から下まで作ることにしました。 以来、お互いの認識違いによる戻り手間が解消しました。 ３．そのサイトの目的に沿ってコーディング メンテしやすく単純なものにする、キレッキレの最新コーディングにする、など 目的に応じて言語を使い分けしてもらいます。 今はメンテナンス必須ですので、メンテナンスのしやすい単純なコードを使ったりしています。 きれっきれのコードで書いて、理解できずに結局全部リニューアル時に全カット。 よくよく見たら不安定な動きだった。ブラウザによって総崩れ。 なんていうこともありましたので。 デザイン画に従ったコードをお願いします、と何度も・・・。 　　　 　　　→あとはプラスとして・・・ 　　　稼働検証も必須です。Macの場合、Macの主要ブラウザでは？ 　　　Windowsの主要ブラウザでは表示が崩れないか？など。 　　　対応OSによってバージョンも異なりますので、コーディング時、ここのブラウザに 　　　対応したコーディングをしてください、とします。 　　　ブラウザによっては結構崩れたコーディングで納品されて、手直し、 　　　なんてこともありました。 　　　 時々デザインが甘くてコーディング⇔デザインでいったりきたりします。 途中でこんな風にしたい、とか出てしまいます。（WEBは流れが速いので...） そうした場合はまた3者で相談→改訂といいう流れになりますね。 如何に両者間の連絡を密にとり、お互いの認識を一致させるか、でだいぶ解消します。 連絡が潤滑ができれば、やり易い業務になるかと。 （結局、当方が数回デザイン～コーディングまで担当して、基本知識をつけました。 全て細かくデザインまでやって、コーディングも使用するコードを限定して、 という感じで差異を少なくしています。 あとはテストを繰り返してオープンしています。 オープン時に出る想定しなかった差異など、それでも出てしまう差異部分はこっちで直してます。） ご参考になれば幸いです。 ※余談 遠隔で離れている人との連絡は、下記ツールを使ったりしています。 タスクもあわせて管理できるので、楽です。 グループとなると有料ですが・・・。 http://www.chatwork.com/ja/
position:fixed; です。 　⇒Visual formatting model - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　視覚系メディアに対しては表示域を基準にします。 　印刷メディアに対しては各ページに印刷されます。
body以外では、background-imageプロパティは、width、heightを指定しないと表示されないようです。
　まず仕様書を読んでおきましょうね。あなたの疑問は【すべて】【詳しく】【正確に!!】に書かれています。スタイルシートにしろHTMLにしろ、まず仕様書に目を通しておくこと。そうすれば分からない時に何処を読めばよいかがわかります。 　⇒HTML 4.01 Specification (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　⇒Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) ＞id"left-sidebar"とクラスtoc-itemは 　違います。!!子孫セレクタでつながってますから、一意セレクタ(#left-sidebar)の子孫( )のクラスセレクタ(.toc-item)を持つ要素と言う意味です。「id"left-sidebar"とクラスtoc-item」の場合は #left-sidebar,toc-item{}と書かれているはずです。 5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) はスタイルシートを使用する場合の必須で重要な部分です。font-size: 12px;というプロパティの説明より前に、ページ数を割いて書いてある。 ★それは古い書き方です。現在ウェブ標準とされているCSS2.1では、基点となるセレクタを書かなければなりませんから、 *#left-sidebar *.toc-item { font-size: 12px;} が正式な書き方です。*は全称セレクタで詳細度は0です。 ★#left-sidebar .toc-item のようなidやclass名は望ましくありません。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』と書かれているようにね。 class*=hide 　そのような書き方はありません。属性セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )とクラスセレクタは同じものですから .abc は、*[class~=abc] と言う意味です。
こちらのほうが分かりやすいかな？？ body{counter-reset: Section 1;} div.section h2{ counter-reset: subSection 0; counter-increment: Section 1; } div.section div.section h3{ counter-reset: subSubSection 0; counter-increment: subSection 1; } div.section div.section div.section h4{ counter-increment: subSubSection 1; } div.section h2:before { content: counter(Section) ": "; } div.section h3:before { content: counter(Section) "-" counter(subSection,upper-alpha) ": "; } div.section h4:before { content: counter(Section) "-" counter(subSection,upper-alpha)"-"counter(subSubSection)": " ; } いずれにしても、counterはとってもよく使用するスタイルシートですから、身につけましょう。目次も利用できますが、普通にOLで良いでしょう。
テキストの上をpaddinかmarginで広げる。
HTML4.01の時代には、スタイルシートで 　⇒外部スタイルシート( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　⇒カスケードするスタイルシート( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) に詳しく書かれています。 　基本的には、基本的なmedia別のスタイルシート ・media="screen"　media="print" 程度はほしい ・ついで、 　1) 固定スタイルシート 　2) 優先スタイルシート 　3) 必要ならCSS3/HTML5のmediaqueryです。 @importは、細切れにするだけですから無関係 .htaccess、新しい端末が登場するたび設定を変更しなけりゃならないので非実用的 ★基本はリキッドで作成して、それでもカバーできない時にMediaqueryを使うので良いかと。 　デザインなんて所詮、作者の自己満足に過ぎません。大事なのはコンテンツです。デザインで訪問するのじゃなく、内容がも止めている物だからですよ。 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　このページ、ブラウザの表示メニューからスタイルシートを選択するとデザインが変わる。しかし印刷するとURLまで印刷される・・。多くのデザインはリキッドなので、そのままスマホも幅広ディスプレイに対応している。
キャッシュが残っていたためでしょうか？ ブラウザの更新「Ctrl+R」か、ブラウザを立ち上げなおして確認してみてください。 変わっていませんか？
最終的なHTMLにスタイルを指定すれば良いです。 <div style="text-indent: 0px; margin: 0px; padding: 0px; background: none repeat scroll 0% 0% transparent; border-style: none; float: none; line-height: normal; font-size: 1px; vertical-align: baseline; display: inline-block; width: 106px; height: 24px;" id="___plusone_0"> <iframe・・・【中略】・・・></iframe> </div> とかになっているはずです。 　style属性で指定されているため、詳細度が1000で上書きできない。 　⇒（HTMLでは、要素の"style"属性値は、スタイルシート規則である。これらの規則はセレクタを持たないので、a=1、b=0、c=0、かつd=0。）( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　よって、著者のimportant宣言( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )を使用します。 HTMLのソースを見て、上記なら <style type="text/css"> <!-- #___plusone_0{margin-left:100px!important;} --> </style> firefoxをお使いだと思いますが、そのfirebugを利用して確認すると簡単です。
まずhtmlタグが二個ありますね。 そういうときはbody{color:red}位にしたほうが良いですよ。 htmlファイルも然りです。中身盛りすぎです。
>やはりいられのように選択すればわかるなどフォトショは無いようですね。 イラレとまったく同じ機能はありませんが、移動ツール（[V]キー）の状態で左上に出てくる「自動選択」をチェックしておくと、キャンバス内の要素をクリックすることで自動的にレイヤーもしくはグループが選択されます。どちらにするかはその横で選べます。さらにその横でバウンディングボックスの表示／非表示を選べます。 「自動選択」をチェックしておくことでイラレに近い操作感覚にはなります。Webデザインをする際はオススメです。 ただ、これだけでは情報パネルに大きさは表示されませんので、レイヤーを選択してから[command]（Winでは[Ctrl]）+[T]キーで一応情報パネルには表示されます。 あとは回答しました[command]キー押しながらレイヤーサムネールをクリックする方法は手軽で確実なのでよく使います。 >スペースキーとは選択範囲などを移動することでしょうか？ 長方形選択ツールでキャンバス内でクリックしている状態でスペースキーを押しながらマウスを動かすと、選択の開始ポイントを動かせます。
simplest03_3cのスタイルシートで、h3.entrytitleを探してください。 見つけたらその下に以下のコードを追加してください。 h3.entrytitle { font-size: 100%; font-weight: normal; margin: 0 0 5px; padding: 0 5px; border-bottom: 1px #DDD solid; } /*ここから下の3行を追加*/ h3.entrytitle a { color:red; } 色についてはcolorで指定して変更してください。 がんばって良いブログを作ってくださいね。
＞border="2" bordercolor="red" ・border = pixels [CN] 推奨しない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・bordercolorは存在しない属性です。 仕様書は、必ず目を通しておくこと。 書いたら Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) 　のDATA入力(右上)などでチェックすること 　そうしないと、とんでもない物を身につけてしまう。 　現状では ★HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　は守りましょう。 ★Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済みのHTML4.01strict ★200px×200pxの画像を./imagesに用意すること ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- p.test img{ border:solid lime 10px; border-color:red orange yellow lime; border-radius:10px; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p class="test"><img src="./images/abc2.jpg" width="200" height="200" alt=""></p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
リストに標準で設定されているマージンが原因のようです。 liやulタグにmargin:0などと指定してマージンをなくしてみてください。
同じサイトに説明書がありました。 http://f-tpl.com/make-homepage2/ 2-12.メイン画像の変更 背景色はstyle.cssを編集します。テキストエディタやメモ帳でOK /************************** /* トップナビゲーション **************************/ ul#topnav{ clear:both; overflow:hidden; margin:0 auto 30px; background:#134091; border-radius:5px; } この、 background:#134091;の6文字を仮にff0000にすると赤になります。 web上でカラーコードを調べる事も出来ますし レタッチソフトのカラーピッカーに表示されるカラーコードを使う事も出来ます。 デスクトップから色をチョイスできるカラーピッカー(フリーウエア)もあります。 http://freesoft-100.com/pasokon/rgb.html
No.3です。 ＞（型崩れが怖いので） 　ならfloatなんて使わないこと。 　floatは、本来は挿絵などの周囲にテキストを回りこませる方法で、段組に使 うといくつか問題が発生します。特に! 1) フォントや、画像サイズが変わると崩れる。 2) 必然的にfloatするデータを先に書かなければならないので、文書構造が制約 される。 　例えば目次を右端に置こうとすると目次を先に書かなければならない。検索エ ンジン最適化SEO上、これは不利ですね。 　例えばも先のHTMLにナビゲーションと目次を追加したサンプルをあげて置きま すが、ウィンドウ幅やフォントサイズを変更しても崩れないです。そもそもHTML 本体には文書構造しかいてないので、どのようにもデザインを変更できるし、検 索エンジンにもきちんと内容が伝わる。 　サンプルを表示させてスマホ480px程度から幅を広げてと色々表示させてみて ください。float使ってないのでデザインは崩れないですよね。 　それでいて、HTMLはシンプルなので記事を追加するのも簡単だし、何を書き加 えてもデザインは崩れない。 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} div.header,div.section,div.section,div.footer{ width:80%;min-width:470px;max-width:900px; margin:0 auto; padding:5px; } div.header{position:relative;} div.header div.nav{height:40px;line-height:40px;width:100%;overflow:hidden;text-align:center;} div.header div.nav ol{list-style:none;margin:0;padding:0;} div.header div.nav ol li{width:20%;display:inline-block;position:relative;} div.header div.nav ol li a{display:block;width:100%;height:100%;text-decoration:none;} div.section h2,div.section p,div.section div.section{margin-left:160px;} div.section{min-height:400px;position:relative;} div.section div.section{width:auto;min-width:0;}} div.section div.section p{margin:0;} div.section div.section{min-height:300px;} div.section div.nav{position:absolute;top:0;left:0;height:100%;width:160px;} /* 分かりやすいように色分け */ body{background-color:silver;} div.header{background-color:lime;} div.header div.nav ol li a{background-color:yellow;} div.header div.nav ol li a:hover{background-color:white;} div.section{background-color:rgb(220,220,220);} div.section div.section{background-color:white;} div.section div.nav{background-color:yellow;} div.footer{background-color:aqua;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿＿<div class="nav" id="siteMap"> ＿＿＿<ol> ＿＿＿＿<li><a href="/Top">トップ</a></li> ＿＿＿＿<li><a href="/products">製品</a></li> ＿＿＿＿<li><a href="/info">情報</a></li> ＿＿＿＿<li><a href="/contactUs">問合せ</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿＿<div class="section" id="sub1"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p></p> ＿＿</div> ＿＿<div class="section" id="sub2"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>2項の文章</p> ＿＿</div> ＿＿<div class="section" id="sub3"> ＿＿＿<h3>項見出し</h3> ＿＿＿<p>3項の文章</p> ＿＿</div> ＿＿<div class="nav" id="contentTable"> ＿＿＿<ol> ＿＿＿＿<li><a href="#sub1">1項</a></li> ＿＿＿＿<li><a href="#sub2">2項</a></li> ＿＿＿＿<li><a href="#sub3">3項</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
もっと簡潔に書かなきゃメンテナンスに困りますよ。class名は文書構造を示す物にしておくと、先で他のデザイン・・ボックスじゃなくリスト・・・にしたいときなど混乱しなくてすむ。 ★darkblueは値として使えません。 　aqua、black、blue、fuchsia、gray、green、lime、maroon、navy、olive、orange、purple、red、silver、teal、white、yellow( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )の17色です。 ★タブは＿に置換してあるので戻す。 <div class="photoAlbum"> ＿<div class="figure"> ＿＿<img src="./photo.jpg" width="140" height="95" alt="海の写真"> ＿＿<div class="figcaption">キャプションですよ</div> ＿</div> ＿<div class="figure"> ＿＿<img src="./photo.jpg" width="140" height="95" alt="海の写真"> ＿＿<div class="figcaption">キャプションですよ</div> ＿</div> ＿<div class="figure"> ＿＿<img src="./photo.jpg" width="140" height="95" alt="海の写真"> ＿＿<div class="figcaption">キャプションですよ</div> ＿</div> ＿<div class="figure"> ＿＿<img src="./photo.jpg" width="140" height="95" alt="海の写真"> ＿＿<div class="figcaption">キャプションですよ</div> ＿</div> ＿<div class="figure"> ＿＿<img src="./photo.jpg" width="140" height="95" alt="海の写真"> ＿＿<div class="figcaption">キャプションですよ</div> ＿</div> </div> div.photoAlbum{ width:486px;margin:0 auto; fontt-size:0.8em; color:navy; text-align:center; background-color:yellow; } div.photoAlbum div.figure{/* アルバム中の挿絵 */ width:140px;height:140px; margin:5px;padding:5px; border:navy 1px dashed; float:left; background-color:rgb(238,238,255); } div.photoAlbum div.figure div.figcaption{/* 挿絵のキャプション */ text-indent:1em;text-align:left; } div.photoAlbum:after{ content:""; display:block; clear:left; } [HTML5]の場合。 <div class="photoAlbum"> ＿<figure> ＿＿<img src="./photo.jpg" width="140" height="95" alt="海の写真"> ＿＿<figcaption>キャプションですよ</figcaption> ＿</figure> ＿<figure> ＿＿<img src="./photo.jpg" width="140" height="95" alt="海の写真"> ＿＿<figcaption>キャプションですよ</figcaption> ＿</figure> ＿<figure> ＿＿<img src="./photo.jpg" width="140" height="95" alt="海の写真"> ＿＿<figcaption>キャプションですよ</figcaption> ＿</figure> ＿<figure> ＿＿<img src="./photo.jpg" width="140" height="95" alt="海の写真"> ＿＿<figcaption>キャプションですよ</figcaption> ＿</figure> ＿<figure> ＿＿<img src="./photo.jpg" width="140" height="95" alt="海の写真"> ＿＿<figcaption>キャプションですよ</figcaption> ＿</figure> </div> div.photoAlbum{ width:486px;margin:0 auto; fontt-size:0.8em; color:navy; text-align:center; background-color:yellow; } div.photoAlbum figure{ width:140px;height:140px; margin:5px;padding:5px; border:navy 1px dashed; float:left; background-color:rgb(238,238,255); } div.photoAlbum figure figcaption{ text-indent:1em;text-align:left; } div.photoAlbum:after{ content:""; display:block; clear:left; }
参考URLを載せておきます。 HTMLの知識がないとのことですが、今後のためにも勉強されることをお勧めします。 参考URL：http://lopan.jp/css-sprites/
高さが決まっていない要素の縦方向中央揃えは実は結構難しいことです。 親要素の高さが決まっていて、中の画像が1行以内で収まるという限定的な条件でしたら下記で行けます。ちなみに1行以内で収まるというのは、画像が2枚以上の場合でも親要素に十分が幅があり画像が改行しないで済む状態です。 .box{ width:210px; height:90px; line-height:90px; text-align:center; } .box img{ vertical-align:middle; }
＞自分のパソコン 　だけで良いのですよね。ユーザースタイルシートで、 セレクタ{background:repert-x!important;} とか・・・セレクタはその要素を指定するものを記述する。 　⇒5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )
テスト用簡単なサンプル ★タブは＿に置換してあるので戻す。 [HTML4.01strict] <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> <!-- 永続的スタイルシート --> ＿<link rel="stylesheet" type="text/css" href="./styleSheet5/persistent.css"> <!-- 優先スタイルシート --> ＿<link rel="stylesheet" type="text/css" media="screen" href="./styleSheet5/outline.css" title="優先スタイル"> ＿<link rel="stylesheet" type="text/css" media="screen" href="./styleSheet5/color.css" title="優先スタイル"> <!-- 代替スタイルシート --> ＿<link rel="Alternate StyleSheet" type="text/css" media="screen" href="./styleSheet5/alternate.css" title="反転"> <!-- このページ専用 --> ＿<link rel="StyleSheet" type="text/css" media="screen" href="./styleSheet5/page1.css" title="優先スタイル"> <!-- 印刷用 --> ＿<link rel="styleSheet" type="text/css" media="print" href="./styleSheet5/print.css"> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p> ＿＿＿terapadでhtmlとCSSを書いてます。5本のhtmlファイルに共通するCSSはちゃんとｌIEに反映されるのですが、個別のhtmlファイルに関するCSSが反映されません。IEの問題かと思うのですが、どうすれば解決できるのでしょうか？ ＿＿</p> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="/">Top</a></li> ＿＿＿＿<li><a href="/sample/page1">Page1</a></li> ＿＿＿＿<li><a href=".sample/page2">Page2</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-12-20</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2013-12-29 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html> [outline.css] @charset "Shift_JIS"; div.header,div.section,div.footer{width:80%;min-width:620px;max-width:900px;margin:0 auto;padding:5px;} div.section{position:relative;min-height:400px;} div.section h2,div.section p{margin-right:21%;} div.section div.nav{position:absolute;right:0;top:0;height:100%;width:20%;} [persistent.css] @charset "Shift_JIS";html,body{margin:0;padding:0;} h1,h2,h3,h4,h5,h6,p{margin:0;line-height:1.8em;} p{text-indent:1em;} [color.css] @charset "Shift_JIS"; body{background-color:silver;} div.header,div.section,div.footer{background-color:white;} div.section div.nav{background-color:yellow;} [alternate.css] @charset "Shift_JIS"; body{background-color:silver;} div.header,div.section,div.footer{ background-color:navy; color:white; width:90%;min-width:620px;max-width:1000px;margin:0 auto;padding:5px; } a:link{color:yellow;} [page1.css] @charset "Shift_JIS"; body{background-color:gray;} div.header,div.section,div.footer{background-color:rgb(220,255,255);} div.section div.nav{background-color:yellow;} div.section p{z-index:100;} div.section p:after{content:"\A このページ専用のスタイルシートが適用されています";white-space:pre;color:red;font-weight:bold;font-size:1.6em;} [print.css] @charset "Shift_JIS"; body{width:80%;margin:0 auto;} a{color:black;text-decoration:none;} a[href]:after{content:"\A (http://hoge.com"attr(href)")";white-space:pre;} div.section div.nav:before{content:"サイトマップ\A";font-size:1.6em;font-weight:bold;white-space:pre;} div.section div.nav{width:80%;margin:20px auto;border:solid 1px gray;}
なぜ仕様書を読まないの？？ 　こんなところで聞いたって正確な情報は不可能 　⇒10.8 行の高さの計算: 'line-height'、'vertical-align'プロパティ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　line-heightは、本来font-sizeよりも大きいのですが、このように小さな値が指定されていると期待と異なる表示になる事があります。 　特に、IEの互換モードでは、ボックスの寸法をボーダー辺で解釈します。 　IEの場合、ウェブ標準で動作するようにDOCTYPEを記述すると、ウェブ標準で表示されるはずです。 　しかし、行中央に表示させる場合は、heightとline-heightの値を同じにすべきです。 なお、font-familyには、必ず総称ファミリ名(generic-family)を書かなければなりません。 　
煩雑ですか？？ HTMLは、今後のHTML5を念頭において作成してあります。 ・class名はそのまま要素に置き換えられること 　<div class="header">→<header> ・文書構造しか書かない 　<div class="section"><div class="nav" ・sectionはhn見出しとセットで検索エンジンは文書のアウトラインを形づくる(目次を作る) 　ためdlではなくsectinに組み合わせてあります。 ・後日のメンテナンスを重視してあります。顧客の担当者でも手が入れられるように CSSは、 ・後方互換のため子供セレクタではなく子孫セレクタにしてある。 　　body>div.section{} body>div.section>section{}のほうが楽ですがIE7は認識しません。 ・他の場所に登場したときは適用されないように文書構造がセレクタに書いてある。 　　headerに登場するnavとsectionやfooterに登場したときが区別されるように この二点のため、CSSはちょっと冗長な部分があります。セレクタや詳細度が計算できるまで慣れれば楽になるでしょう。 　そのかわり、デザインを全く変える場合もHTMLには手を加えなくてよいようになっています。 ＞dlは使わないのですね。タイトルが無いからなんでしょうね。 　内容的に、文書のアウトラインが作られるとき、HTML5では(HTML4.01でも)、sectionはひとつの見出し(h1～h6)とセットで使用されます。 　内容的にアウトラインに含まれるべき内容ですのでsection+h3とマークアップしました。 ルート |-- header |　　┗h1 |-- section 　　　|┗ h2 　　　|-- section 　　　|　　　┗ h3 　　　|-- section 　　　　　　┗ h3 　⇒The section element | HTML5 Doctor( http://html5doctor.com/the-section-element/ ) 　⇒4.4.6 The h1, h2, h3, h4, h5, and h6 elements( http://www.w3.org/TR/html5/sections.html#the-h1, … ) 　他者へのアドバイスですから、可能な限り仕様に沿った形にせざるを得ないのです。 　なお、示したサンプルではリンクがキラキラ画像にも効いてきますが、それを避けたければa要素の:afrer擬似クラスにではなくdiv.figure:afterにして、a:afterはその上に置くと良いでしょう。
No.4です。ちょっと時間が取れたのでたぶん最も効果的な方法 ・SEO的に ・ごく小さな画像を読み込ませる 　スプライトと併用することで動作も速いしネットワーク負荷も小さい ・HTMLが極めてシンプルでメンテナンスが容易 ★タブは＿に置換してあるので戻す。 ★画像は添付の物(20px×160px) <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;background-color:silver;} div.header,div.section,div.footer{ width:80%;min-width:470px;max-width:900px;/* コンテンツの幅 */ margin:0 auto; background-color:white; padding:5px; } div.header h1{ margin:0 0 60px 0; line-height:60px; } div.header div.nav h3{display:none;} /* ここから */ div.header div.nav{ position:absolute; top:60px;left:0;/* 位置を指定 */ width:100%;height:40px;/* 幅を指定 */ background-image:url(./images/background/nav.jpg);/* 背景画像(スプライトとして利用) */ } div.header div.nav ol,div.header div.nav ol li{ margin:0;padding:0;/* 余計な物 */ } div.header div.nav ol{ text-align:center; list-style:none; width:80%;min-width:470px;max-width:900px;/* コンテンツの幅と同じ */ padding:0 5px; margin:0 auto; line-height:40px;/* 文字が縦中央 */ background-color:blue;/* 枠線になる */ } div.header div.nav ol li{ width:24.2%;height:100%; display:inline-block;/* 行内ブロックに */ } div.header div.nav ol li a{ display:block; width:100%;height:100%; background-image:url(./images/background/nav.jpg); text-decoration:none; } /* リンクの擬似クラス、動的な擬似クラスで背景をずらす */ div.header div.nav ol li a:link{background-position:0 -40px;font-weight:bold;color:blue;} div.header div.nav ol li a:visited{color:red;} div.header div.nav ol li a:hover{background-position:0 -80px;color:yellow;} div.header div.nav ol li a:active{background-position:0 -120px;color:red;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<div class="nav"> ＿＿＿<h3>サイトマップ</h3> ＿＿＿<ol> ＿＿＿＿<li><a href="./nav.htm">トップ</a></li> ＿＿＿＿<li><a href="http://google.co.jp">製品</a></li> ＿＿＿＿<li><a href="/Info">情報</a></li> ＿＿＿＿<li><a href="/Profile">プロフィール</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-12-18</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2013-12-19 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
keep-allは、CJKは改行しない、非CSKはnormalと同じです。 ＞word-breakは言語に依存しますけど・・ 　lang="ja" だと意味ないです。 ‘word-break’の値はnormal | keep-all | break-all　( http://www.w3.org/TR/css3-text/#word-break-prope … )で、 W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … )で、検証してもエラーにはなりません。 p.sample1 {word-break:normal;} p.sample2 {word-break:keep-all;} p.sample3 {word-break:break-all;} 　単に綴りを間違えているとか、そのツールが間違っているとか・・
>base.cssの記述をcenterに変えると他のページのテキストまで中央揃えになってしまいました＾＾； base.cssにどんな記述をされているのかがさっぱりわかりませんが... liをブロック要素にして、センタリングすれば良いと思います。 例） .bxslider ul li{display:block; margin:0 auto;} 参考URL：http://www.css-lecture.com/log/css-beginner/026. …
プレゼンテーション(表現)のためにHTMLを書くのは間違い・・ HTMLは文書構造しか書きません。 まず、その前後の脈絡にしたがってHTMLを書くことから始めましょう。 <span> ワイン（ボトル） </span> </br> 各種 　spanやdivは「id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」のものです。他に適切な要素がある場合は、spanやdivは使ってはなりません。HTML5では明確に否定されています。 Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/html5-author/the-div-elemen … ) 　他に適切な要素がないときの最後の最後の手段として使うべき・・ もし、商品項目と明細でしたら <dl> 　<dt>ワイン各種(ボトル</dt> 　<dd>ボジョレー・ヌヴォー 　　<p>フランスのブルゴーニュ地方南部に隣接する丘陵地帯・ボジョレーで生産されるヌヴォー（試飲新酒）仕様の赤ワイン</p> ・・・・ 　とかにマークアップされているはずですからね。 　それを一行で表示 dt{float:left;} しようが、説明を省こう dd p{display:none;}しようがは、スタイルシートで!! ※</br>を無くして、 　多くの場合、きちんとマークアップされていれば、必然的に余計な事はしなくて良いはずですよ。 <p>下記タグの&lt;/br&gt;を無くして、CSSで設定することはできますか？</br> </br> &lt;span&gt;</br> ワイン（ボトル）</br> &lt;/span&gt;</br> &lt;/br&gt;</br> 各種 </br> ↓ <p>下記タグの&lt;/br&gt;を無くして、CSSで設定することはできますか？</p> <pre><code>&lt;span&gt; ワイン（ボトル） &lt;/span&gt; &lt;/br&gt; 各種</code></pre> ★</br>が使われていて、かつ其処が改行でしたら、一部を除いて!!(※)確実に異なるブロック要素であるはずですから、<div><span>じゅなく、もっと適切なマークアップがあるはずです。 ※一部とは、住所を示す部分で <address>東京都新宿区<br> ****町**丁目</address> 　とか・・・・・それ以外、</br><br>は通常のHTMLには存在し得ないはずです。
今のタグがわからないのですが、、参考までに。 <table border> <tr> <th>ヘッダー１</th> <td>データ１</td> </tr> <tr> <th>ヘッダー２</th> <td>データ２</td> </tr> <tr> <th>ヘッダー３</th> <td>データ３</td> </tr> </table>
　ヘッダー画像、サイドバーの意味が分かりませんが、そのサイトでは背景画像をコンテンツの表示幅に合わせてありますね。 　ソースを見られたらお分かりのようにシンプルです。 ★DIVをデザイン目的で使用されていますが、これはHTML4.01で否定され、HTML5では否定されますから、このような使い方は間違いですが・・ 　それを除けばまずまず・・かな HTML5未満では、「DIV要素はid属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )に使うとされていました。」 <body> 　<div class="header"> 　　<h1>ページ見出し</h1> 　　<div class="nav"> 　　　<ul> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　・・・・・ 　</div> 　<div class="section"> 　　　<p>本文</p> 　</div> 　<div class="footer"> 　</div> </body> HTML5だとDIVは原則使えません、代わりに文書構造を明確にする要素が追加されました( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) <body> 　<header> 　　<h1>ページ見出し</h1> 　　<nav> 　　　<ul> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　・・・・・ 　</header> 　<section> 　　　・・・本文・・・ 　</section> 　<footer> 　</footer> </body> というHTMLになるはずです。 それに対して、スタイルシートで div.header{ background-image:url(); background-size:cover;/* CSS3 */ } と背景画像と表示サイズを指定します。 [サンプル]★HTML4.01strict + CSS2.1 HTMLには、このように文書構造しか書きませんから、極めてシンプルです。とっても楽です。 ※タブは＿に置換してあるので戻す。 ※一部:は：(全角）に置換してあるので戻す。 　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# )のDATAでチェック済み <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto：oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} div.header,div.section,div.footer{width:900px;margin:0 auto;} div.header{ background:url(http：//www.bungyjapan.com/assets/elements/header_wrap.jpg); width:880px; height:190px;padding:50px 10px 0 10px; } div.header h1{margin:10px;} div.header h1 a{text-decoration:none;} div.header #nav ul,div.header div.nav ul li{list-style:none;margin:0;padding:0;font-size:0.9em;} div.header #nav ul{height:20px;line-height:20px;} div.header #nav ul li{display:inline-block;text-align:center;padding:0 5px;} div.header #nav ul li+li:before{content:" | ";color:white;} div.header #nav ul li a{color:white;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1><a title="バンジージャパン" href="http：//www.bungyjapan.com/ja/index.php"> <img id="logo" alt="バンジージャパン" src="http：//www.bungyjapan.com/assets/logo.jpg"></a> <img alt="日本唯一" src="http：//www.bungyjapan.com/assets/tagline_ja.jpg" width="276" height="66"></h1> ＿＿<div id="nav"> ＿＿＿<ul> ＿＿＿＿<li><a href="/">ホーム</a></li> ＿＿＿＿<li><a href="/sites/">インフォ</a></li> ＿＿＿＿<li><a href="/booking/">予約</a></li> ＿＿＿＿<li><a href="/about/">バンジージャパン</a></li> ＿＿＿＿<li><a href="/gallery/">ギャラリー</a></li> ＿＿＿＿<li><a href="/bungy/">バンジーの話</a></li> ＿＿＿＿<li><a href="/blog/">ブログ</a></li> ＿＿＿＿<li><a href="/links/">リンク</a></li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
　HTMLから復習ですね。そんなHTML書いてたらメンテナンスが大変になるしデザインの制約が大きくなるばっかりです。スタイルシートを使用してデザインする最大の目的は「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」なのですよ。それなのにHTMLに構造以外のもの、デザイン的なものを書くことはしない。原則です。 ★原因はもちろん text-indent: -9999px; overflow: hidden; 　です。わざと消している。 単純にHTML4.01でしたら <body> 　<div class="header"> 　　<h1>見出し</h1> 　　<div class="nav"> 　　　<ol> 　　　　<li><a href='index.html'>Home</a></li> 　　　　<li><a href='navi1.html'>Navi1</a></li> 　　　　<li><a href='navi2.html'>Navi2</a></li> 　　　　<li><a href='navi3.html'>Navi3</a></li> 　　　</ol> 　　</div> 　</div> 　<div class="section><!-- 本文 --></section> 　<div class="footer"><!-- フッタ --></div> </body> DIVやSAPNは「id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」のもので、wrapperとかはへん。HTML5では、代わりに「文書をよりよく構造化するために、( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」新しい要素が追加され、DIVは原則として使わなくなります。 ちなみに、HTML5では、 <body> 　<header> 　　<h1>見出し</h1> 　　<nav> 　　　<ol> 　　　　<li><a href='index.html'>Home</a></li> 　　　　<li><a href='navi1.html'>Navi1</a></li> 　　　　<li><a href='navi2.html'>Navi2</a></li> 　　　　<li><a href='navi3.html'>Navi3</a></li> 　　　</ol> 　　</nav> 　</header> 　<section><!-- 本文 --></section> 　<footer><!-- フッタ --></footer> </body> そのうえで、スタイルシートはHTML4.01用でしたら <link href='./style_main.css' rel='stylesheet' type='text/css' media="screen"> <link href='./style_topNavi.css' rel='stylesheet' type='text/css' media="screen"> 　　印刷時には適用させたくないので・・ ★リキッドなのでスマホも幅広ウィンドウも対応してる。(ウィンドウ幅を変えて) ★HTMLの文書構造を見てセレクタを書くので、メンテナンスも楽なはず。 　継承する物は親に、同じ指定はグループ化して・・ html,body{ margin:0;padding:0; } body{ font-family: 'MS UI Gothic',"ＭＳ Ｐゴシック",sans-serif; /* 必ず総称ファミリ名を書く */ background-color:gray; } a:link{color:#000000;} /* underlineはデフォルトなので書かない! 書けばaに対して記述し継承させる */ a:visited{color:#990099;} a:hover{color:#ff0000;} div.header,div.section,div.footer{ margin: 0 auto;padding:5px; width: 80%; min-width:480px;max-width:900px; border-color:#cccccc; border-style:solid; background-color:white; } div.header{border-width:2px 2px 0 2px;} div.section{border-width:0 2px;} div.footer{border-width:0 2px 2px 2px;} /* --- nav ----*/ div.header div.nav{ position:relative; width:110%; height:40px; left:-5%;text-align:center; } div.header div.nav ol{list-style:none;font-size:18px;} div.header div.nav ol li{display:inline-block; width:20%;position:relative; line-height:40px; } div.header div.nav ol li a{ width: 100%;height:100%; display: block; color:#000000; } div.header div.nav ol li a[href='index.html']{background-color:#cc6672;} div.header div.nav ol li a[href='navi1.html']{background-color:#bf66cc;} div.header div.nav ol li a[href='navi2.html']{background-color:#6672cc;} div.header div.nav ol li a[href='navi3.html']{background-color:#66ccbf;} div.header div.nav ol li a[href='index.html']:hover{background-color:#ffd8dd;} div.header div.nav ol li a[href='navi1.html']:hover{background-color:#fad8ff;} div.header div.nav ol li a[href='navi2.html']:hover{background-color:#d8ddff;} div.header div.nav ol li a[href='navi3.html']:hover{background-color:#d8fffa;}
最新版ならホームページビルダーについてくるテンプレートをお勧めします。
＞サイト構築の時にソースで・・ と言うことから、たぶんその部分を他のソースで置き換えるときの「キーワード」として使われているのじゃないかな。 　今日は%date_tody%日ですね。 　としておけば、動的なサイトの場合、その部分が自動的にその時点での日時が入るとか。 　これは、そのプログラムを作成した本人にしか分からないです。 　また、SSIを使用している場合は、<!--#config timefmt="%Y年%M月%D日" -->とかです。 　いずれにしろ、その正体は、使用するシステムなどもう少し詳細が分からないと・・
デモページのどの部分を見て<div>の改行と判断されてますか？ <div>1</div> <div>2</div> <div>3</div> <div>4</div> <div>5</div> <div>6</div> というHTMLドキュメントがあるとして、（別に<li>でも<section>でも何でも良いです。） 参考サイトの用にcolumnを使用してレイアウトすると、 1 4 2 5 3 6 という順番で表示されます。 floatを使用すると、 1 2 3 4 5 6 という順番で表示されます。 もし表示順を考慮する必要があるのなら、 floatとcolumnに互換性はありませんので、各オブジェクトの高さが違うからcolumnを使えばよいという物ではありません。 デザインにあわせてCSSを書いてみてください。
Lightboxというプラグイン(JavaScript)で導入可能です。 http://ja.wikipedia.org/wiki/Lightbox 最新版はLightbox2らしいです。(サンプルもあり) http://lokeshdhakar.com/projects/lightbox2/#down … ブログやコミュニティサイトでは運営側で実装されている場合もあり画像アップロード時に自動で適用されたりします。個別での導入方法は別途『Lightbox2 使い方』などで検索してみて下さい。 ps 私もよく見かけてはいましたが実現方法がわからず１時間ほど探し続けていました。けっこう見当たらないものですね。。
>html と body に height:100%; を指定しているので、 予想ではヘッダー用のdivが指定の高さで表示され、 次のdivが残りの高さ分一杯に表示。 まずこの予想の部分が間違っています。質問の通りに作って、高さ500pxの画面で確認した場合、html、bodyの高さは500px、ヘッダー60px、そしてその次のdivの高さも500pxで、60pxはみ出る形になります。height:100%というのは親セレクタに対しての100%です、残りの100%ではありません。 残りの高さいっぱいにしたい場合はcssのみではできません。JSを使うか、似たような見え方で違う組み方をするか…
読まれないです。 あくまでブラウザの問題で、ブラウザはページをレンダリングするために必要になったら、必要なものを改めてサーバーに要求します。 　ページを製作されているなら、firefoxはお使いでしょうから、Live HTTP headers( https://addons.mozilla.jp/firefox/details/3829 )と言うアドオンがありますから、それで確認いてみると良いでしょう。　Firebug ( https://addons.mozilla.jp/firefox/details/1843 )や FireMobileSimulator( https://addons.mozilla.jp/firefox/details/8519 )と組み合わせて確認すると良いでしょう。
私は初期化はしません。スタイルシートがとても煩雑になるからです。 CSS(カスケーディング スタイル シート)にはカスケーディングと言う命ともいえる仕組みがあって---それだからここまで主流になった---、ブラウザのデフォルトのスタイルシートはカスケーディングの最下位に置かれています。 　⇒6.4 カスケード処理( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　⇒HTML 4のためのデフォルトスタイルシート( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　これをすべてリセットしてしまうと、それらの要素が登場するたびにスタイルシートを書き加えなければなりません。例えば普通に序列リスト(OL)が現れた場合、何も書かなくても1,2,3・・と番号を振ってリストに整形してくれますし、引用ブロック(blockquote)が現れると左右の幅を縮めてくれますが・・それをすべて書かないとならなくなります。 ＞処理スピードが遅いですか? 　なりますし、そもそもスタイルシートの量が肥大する一番の要因となることもあります。 　私は、せいぜい html,body{margin:0;padding:0;font-family:******} h1,h2,h3,h4,h5,h6,p{margin:0;line-height:1.6em;} 程度から書き始めます。 　
「ブラウザのキャッシュを活用する」は.htaccessと直接関係ありません。 HTTP応答ヘッダのCache-Controlのことですが、ショップサイトの場合は在庫や価格が変動する可能性があるので、これは短期間でユーザーごとに異なるものが保存されるようにしますので、触らないほうが良いです。 　それよりも、HTMLを見直したほうが良いです。 　例えば、HTMLには文書構造だけ記述して、プレゼンテーションはスタイルシートにすべて任せることで、ページを読み込むデータ量が圧倒時に少なくなります。いわゆる「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」です。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 多くの場合、著者はひとまとまりの文書には共通のスタイルシートを利用する。 この場合、スタイルルールを文書内部に分配することは、1つの外部スタイルシートにリンクすることよりも実際に効率が低下する。なぜなら外部スタイルシートにリンクした場合、大部分の文書にとっては、ローカルのキャッシュにスタイルシートが既に存在するからである。優れたスタイルシートが公有されることで、この効果は増大するだろう。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Style Sheets in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ＞ップページや全体の構成はテンプレートを使用し、 　と言う事ですので、そのようなサイトでは、もっとも効率的です。なぜなら、各ページは極めてシンプルになり、デザインを指定するスタイルシートは一度読んでおけば再利用されるからです。 [例] <body> 　<div class="header"> 　　<h1>ページタイトル</h1> 　　<div class="nav"> 　　　<ol> 　　　　<li><a href=""></a></li> ・・ 　</div> 　<div class="section"> 　　・・・本文・・・ 　</div> 　<div class="footer"> 　</div> </body> HTML5だと <body> 　<header> 　　<h1>ページタイトル</h1> 　　<nav> 　　　<ol> 　　　　<li><a href=""></a></li> ・・ 　</header> 　<section> 　　・・・本文・・・ 　</section> 　<footer> 　</footer> </body> のようなシンプルなHTMLにすれば、 「文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になるということが、経験的に知られている。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　多くの場合、この対処だけでページを移動するたびに読み込まれるデータ量は数十分の一になるはずです。
wordpressのfooterはわかりかねますが、敷詰めたいなら、どうしてno-repeat（繰り返さない）とかするんでしょうね？ background:url(../images/footer_bg.png) no-repeat center 13px; を background:url(../images/footer_bg.png); に変えちゃだめですか？
#1です。 提示したURLのサイトは見てくれてますか？ ＞親box内で自由に配置したいです 「自由に配置」するだけならどちらでもできます。「本来の位置」を基準にするのがrelativeで「親要素の左上」を基準にするのがabsoluteですから、状況に応じて使い分けてください。 難しいなら、リンク先で言う「relative(absolute)とabsoluteの組み合わせ」パターンを使うといいです。外側のボックスの左上が基準点になるので調整がしやすいと思います。 ＞実際にやってみたら、位置は同じように見えましたが ＞relativeとabsoluteでは位置が違ってくるかもしれないと思い それはたまたまです。これもリンク先サイトにありますが、relativeでは「本来配置されるスペース」がキープされます。だから親要素や前後の要素のスタイルによっては同じになりません。 繰り返しになりますが、どちらを使用するかの基準は「あなたがどうしたいか」です。 上記で説明した「基準点」「本来のスペース」の違いを理解したうえで、想定どおりのレイアウトになるほうを使ってください。 ＞どうゆうIDの書き方がわかりやすいでしょうか？ ×ゆう ○いう #2の方とは違い、本来はこんなIDじゃないというのは分かってます。 ただ、文章内で「box」という言葉を使うのなら例のソースで「box」というIDを使うと紛らわしいよ、ということです。 「out」「in」にするとか、それこそ「box1」「box2」でもいいので、紛らわしくなければなんでもかまいません。 ちなみに、#2の回答は長いしごちゃごちゃ理屈っぽいけど、言ってることは正しいので、ちゃんと読んだほうがいいですよ。
HTMLを標準モードで描画するようにDOCTYPEを書き直す!! DOCTYPEスイッチ( https://www.google.co.jp/search?q=DOCTYPE%E3%82% … ) 　IEはウェブ標準でない時代にIE用に作られたページを、当時のデザインで表示させる互換モードがあります。DOCTYPEで適切に記述しないと互換モードで描画するように設計されています。 　現在は、HTML4.01strict,XHTML1.0strict,XHTML,HTML5などで作成していると思いますので、その何れかにHTMLを直して Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) 　でチェックして、DOCTYPEもきちんと書いて・・ 　それでほとんどの誤差はなくなるでしょう。 IE6以前は無視して構いません。
質問の意味が分かりません。 ＞画像表示の上限を設定するために、max-width: はウィンドウ幅についての指定ですか?img要素についてですか？ 文書構造が分かりませんが、style属性においてmax-widthを指定しておけば、詳細度は1,0,0,0になりますから、他所でどのように指定しようとそれ以上は拡大されません。画像にはすべてwidth属性が指定されている(詳細度は0,0,0,0)はずですから、適当なテキストエディタで width="(\d+)" ↓ width="\1" style="max-width:\1" とすればよい。 例えば、 HTML4.01でしたら div.section div.albam{ width:80%;margin:0 auto; position:relative; border:solid 1px gray; } div.section div.albam ul{list-style:none;margin:0;padding:0;} div.section div.albam ul li{ float:left; position:relative; width:100%; } div.section div.albam ul li img{ display:block; width:49%;height:auto; } div.section div.albam ul:after{ content:"";display:block;clear:left; } HTML5でしたら section section.albam{ width:80%;margin:0 auto; position:relative; border:solid 1px gray; } section section.albam ul{list-style:none;margin:0;padding:0;} section div.albam ul li{ float:left; position:relative; width:100%; } section section.albam ul li img{ display:block; width:49%;height:auto; } section section.albam ul:after{ content:"";display:block;clear:left; } とか、本文(section)中のアルバムブロック(が親コンテナブロック)中のリスト内の画像は、statocではない直近の親コンテナブロックのサイズを参照します。 ★タブは＿に置換してあるので戻す。 [HTML4.01の例] <body> ＿<div class="header"> ＿＿<h1>見出し</h1> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<div class="albam"> ＿＿＿<ul class="alubam"> ＿＿＿＿<li><img src="./images/01.gif" style="max-width:80px" width="80" height="60" alt="画像1"></li> ＿＿＿＿<li><img src="./images/02.jpg" style="max-width:200px" width="200" height="200" alt="画像1"></li> ＿＿＿＿<li><img src="./images/03.jpg" style="max-width:240px" width="240" height="180" alt="画像1"></li> ＿＿＿＿<li><img src="./images/04.jpg" style="max-width:480px" width="480" height="360" alt="画像1"></li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿</div> </body> [HTML5] <body> ＿<header> ＿＿<h1>見出し</h1> ＿</header> ＿<section> ＿＿<h2>見出し</h2> ＿＿<section class="albam"> ＿＿＿<ul class="alubam"> ＿＿＿＿<li><img src="./images/01.gif" style="max-width:80px" width="80" height="60" alt="画像1"></li> ＿＿＿＿<li><img src="./images/02.jpg" style="max-width:200px" width="200" height="200" alt="画像1"></li> ＿＿＿＿<li><img src="./images/03.jpg" style="max-width:240px" width="240" height="180" alt="画像1"></li> ＿＿＿＿<li><img src="./images/04.jpg" style="max-width:480px" width="480" height="360" alt="画像1"></li> ＿＿＿</ul> ＿＿</section> ＿</section> ＿<footer> ＿＿<h2>文書情報</h2> ＿</footer> </body>
Apacheをご利用のOS VirtualHost利用の有無、もしありならば可能な範囲で設定を示してくださると回答が得やすいと思います。
CSS2は、今は使われていませんので、CSS2.1のほうのリンクですが原文はNo.2の回答で示しましたが、最新のものは 　⇒Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification( http://www.w3.org/TR/CSS2/ ) すこし古いですが、CSS2.1の邦訳は、 　⇒Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) です。原文と照らし合わせながら利用してください。 ★カスケーディングや詳細度の扱いが変わりました。この質問の部分です!! ★displayの値が変わりました。white-spaceの値が追加されたなど・・ ★音声出力用のスタイルは附則になりました。 　いくつか大事なところが変更されていますから、CSS2.1のほうを参照すること。 　⇒変更点(CSS2.1 Appendix C 邦訳)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )
jsにすこし問題があります。 元々の#blocknavにはpositionが指定されていない（初期値のstaticになっている）が、スクロールするとjsによって初めてナビにposition: fixed;が指定されるため。positionにabsolute、fixedと指定すると、先祖要素、兄弟要素にその幅と高さが計算されなくなりますので、#mainImgにナビの高さ分のマージンを入れてあげる必要があります。 そもそも、トップにナビを固定するのみでしたら、jsを使う必要がありません。 そのjsを切って、cssに下記を追加すればナビが固定されます。 （#mainImgのトップマージンは適当に変更してください） #blocknav{position:fixed; top:0; left:0; width:100%; background:#fff; z-index:999;} #mainImg{margin-top:160px;} どうしてもjsを使いたい場合は、if (winTop >= navTop) {　この間に下記を追加してください。　} 「160」の部分はcss同様ナビに合わせて調整してください。 $('#mainImg').css('margin-top','160px'); このスクリプトを使うメリットとしては、ウィンドウの高さがナビより低い場合、ナビを固定しないことです。 160pxより低いモニターというのもなかなかないと思いますが…
＞タブレットで見せるのはいいですね。 　最近は、プロジェクターとか、これが多いです。実現不可能なデザインにはなりませんしね。 　とはいっても、当然ですが、HTMLやCSSを知らなきゃこの方法は使えませんね。私は、テキストエディタでシャカシャカと書いてしまうので、とても早いです。なにせ、過去のデータの流用もできますから・・ 　HTMLの文書構造なんてまともに書けば、大差はないですから、何種類ももっているスタイルシートの蓄積があって、それを適用さえすればデザインは劇的にパッパッと目の前で変更できます。代替スタイルシートを10種類も用意しておいて、ボタンひとつでデザインを変えて見せてあげればよい。[表示]→[スタイルシート]
>質問1 使えません。 Android OS 4.0以下も多く使われており、4.0以下でサポートしていないプロパティがあります。（flash0さんの言い方をすると、亡霊のように残っています） 4.2以上なら大抵期待通りにはなると思いますが、PCブラウザ同様、発売/公開時以降に企画または制定されたCSSプロパティは使えないと思っておいていいと思います。 とはいえ使うのは勝手ですが、IE6～8であればデザインが他のブラウザと同じでないだけで問題なく読めるようなものでも、 Androidに限らずスマートフォン全体で、CSS2.1も含めて、注意しないと閲覧できない状態になることがあります。 >質問2 訪問者はHTMLやCSSを見ませんから、中身がどんな作りになっていても気づかれません。 >質問3 大量に使っていますし、使われています。
>どんな方法が一番良いのですか? 厳密、厳格に言えば文書構造にあわせた書き方です。 （デザインを一切無視して、文書構造だけを意識して書く書き方が、正しい書き方になります。 画像を左に表示したいからと言って、<img>を先に書かなければならないというわけではありません。） align属性、valign属性は使わずに、スタイルシートでデザイン（レイアウト）してください。 文書構造としてテキストが先に記載されるべきというのであれば、 テキスト<img style="float:left"> としておいて、CSSで、画像を左に、テキストを右に表示させるという書き方になりますし、 文書構造として画像が先に記載されるべきであれば、 <img style="float:left">テキスト という書き方になります。 その画像が背景画像であれば、<img>を使っては行けません。 <p style="background:略">テキスト</p> 一覧表であれば <table> <tbody> <tr><td><img></td><td>テキスト</td></tr> </tbody> </table> かもしれませんし、（テーブルの場合は文書構造とレイアウトが一致します。） 挿入画像などを示す <figure> <p><img></p> <figcaption>テキスト</figcaption> </figure> または <figure> <figcaption>テキスト</figcaption> <p><img></p> </figure> かもしれません。 >また、HTML5ではどんな方法がいいでしょうか？ HTML4でもHTML5でも基本は変わりませんが、 HTML4/XHTMLでは上記、<figure>のかわりに<div>、figcaptionの変わりに<p>や<span>が使われます。
white-space:nowrap; 'white-space'( http://www.w3.org/TR/CSS2/text.html#propdef-whit … ) その部分のテキストのlang属性はなんでしょう。 英文の場合は、空白文字で折り返され単語内では改行されません。日本語は任意の場所で折り返されるはずですが、折り返されない場合は、wihite-space:normalのほうが良いでしょう。 また 　⇒The following examples show what white space behavior is expected from the PRE and P elements and the "nowrap" attribute in HTML. ( http://www.w3.org/TR/CSS2/text.html#propdef-whit … ) 　絶対配置やフロートの場合は改行されません。 　もう一度、他のこの部分に継承されるプロパティも含めて再調査する。
こんにちわ。 前回、回答したものです。　 前回の回答で、解決しないということなので、追加の回答を、かきました。 もしかしたら、　もしかしたら～～ 自分の環境で、やってみたら、変化、ありませんでした。。。。 が、、、よくみたら、各セルが１文字分のサイズしかないので、ちゃんと、できてるはずなのに、 表示が変化してないだけ。でした。 つまり、セルのサイズを、大きくしたら、ちゃんと、できていました。 ちなみに、下記の修正で、テーブル全体を、大きくしてみると、ちゃんと、できてることが、わかります。 　■１５行目を、下記に、修正してみると、いいと、おもう。 　■　echo '<TABLE cellpadding="4" cellspacing="1" style="background-color : #aaaaaa;text-align : 　　↓↓↓　これを、下記に修正してみると、いいと思う。　　↓↓↓ 　■　echo '<TABLE width="70%" height="50%" cellpadding="4" cellspacing="1" style="background-color : #aaaaaa;text-align : 　■注意■ 　　この間の、修正箇所も、修正したうえで、上記の修正をする、といいかも。 　以上です。
HTML5バージョンです。後方互換のためjavascriptが書いてあります。CSSは2.1の範囲内で子供セレクタはつかってません。子供セレクタ>を使うとCSSはもっと簡単になる。 ※先のHTML4.01もそうですが、HTML自体、極めてシンプルなことが分かると思います。メンテナンスも容易ですし、デザインの自由度も変更も、とても楽になります。 　こちらは、印刷時にはスタイルが適用されないようにしてありますから、それも確認すること。 「文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になる( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」・・わざわざ印刷用のページやスマホ用のページを作らなくて済む。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <!--[if IE]> <script src="http://html5shiv.googlecode.com/svn/trunk/html5. … <script src="http://css3-mediaqueries-js.googlecode.com/svn/t … <![endif]-->＿<link rel="stylesheet" href="css/style.css"> <style media="screen"> <!-- html,body{margin:0;padding:0;} header,section,footer{width:80%;min-width:460px;max-width:900px;margin:0 auto;padding:10px;} section{position:relative;min-height:400px;} section section, section h2, section p{ margin:0 21%; min-height:0; min-height:0; min-width:0;width:auto; } section section p{margin:0;} section nav,section aside{ width:20%;height:100%; position:absolute;top:0; } section nav{left:0;} section aside{right:0;} /* 色つけ。背景 */ body{background-color:gray;} header,footer{background-color:lime;} section{background-color:silver;} section section{background-color:white;} section aside{background-image:url(./images/background/sky.jpg);} section nav{background-image:url(./images/background/stone.jpg);} --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿</header> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p>章記事</p> ＿＿<section id="S"> ＿＿＿<h3>項記事タイトル</h3> ＿＿＿<p>記事・・・・</p> ＿＿</section> ＿＿<section id="N"> ＿＿＿<h3>項記事タイトル</h3> ＿＿＿<p>記事・・・・</p> ＿＿</section> ＿＿<section id="L"> ＿＿＿<h3>項記事タイトル</h3> ＿＿＿<p>記事・・・・</p> ＿＿</section> ＿＿<aside> ＿＿＿<h3>補足記事</h3> ＿＿＿<p>本文と直接関係ない記事</p> ＿＿</aside> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#S">Some</a></li> ＿＿＿＿<li><a href="#N">navigation</a></li> ＿＿＿＿<li><a href="#L">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
いくつか方法はあります。 :hover z-indexで背景を指定した画像を前面に置く text-indentでずらす 何れかをvisibiltyで ・・・
ごく簡単な例です。 何はともあれ順当にHTMLを <div id="manga1"> 　　<ol> 　　　　<li id="C1"><a href="#C2">２コマ目へ</a></li> 　　　　<li id="C2"><a href="#C3">３コマ目へ</a></li> 　　　　<li id="C3"><a href="#C4">４コマ目へ</a></li> 　　　　<li id="C4"><a href="#C5">５コマ目へ</a></li> 　　　　<li id="C5"><a href="#C6">６コマ目へ</a></li> 　　　　<li id="C6"><a href="#C1">１コマ目へ</a></li> 　　</ol> </div> のように書きます。idに数字を最初にかけない! [画像]は、Wikiの 漫画 - Wikipedia( http://ja.wikipedia.org/wiki/%E6%BC%AB%E7%94%BB ) にある画像へ進み、名前を[Petit_Sammy_eternue.jpg]に変更してimagesホルダーに保存する。 また、それぞれのコマを指定サイズで切り抜いてPetit_Sammy_eternue_1.jpg～Petit_Sammy_eternue_6.jpgとして保存しておきます。 ★リンクの画像は単なるテキストでも良いです。 [例]<li id="C1"><a href="#C2"><img src="./images/Petit_Sammy_eternue_1.jpg" width="191" height="167" alt="２コマ目へ"></a></li> 　↓ <li id="C1"><a href="#C2">２コマ目へ</a></li> 　※本来はサンプルのように<img>で画像を入れておくほうか良いです。速度は変わらない。 ★印刷時にはちゃんと６コマの漫画になります。(印刷プレビューで・・) ※Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATA入力でチェック済みのウェブ標準HTML4.01strict + CSS2.1 ※タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- div.section{ position:relative; top:50px;width:100%; background-color:gray; height:180px; } div#manga1{ position:absolute; top:5px; width:100%; } div#manga1 ol,div#manga1 ol li{ list-style-type:none;display:block; margin:0;padding:0; } div#manga1 ol{ width:205px;height:170px; margin:0 auto; overflow:hidden; position:relatve; background-color:white; } div#manga1 ol li{ width:100%;height:100%; } div#manga1 ol li a{ display:block; width:196px;height:167px; margin:auto; text-indent:-200px; background-image:url(./images/Petit_Sammy_eternue.jpg); } div#manga1 ol li a[href="#C2"]{width:196px;height:167px;background-position:0px 0px;} div#manga1 ol li a[href="#C3"]{width:191px;height:167px;background-position:-196px 0px;} div#manga1 ol li a[href="#C4"]{width:195px;height:167px;background-position:-2px -165px} div#manga1 ol li a[href="#C5"]{width:191px;height:169px;background-position:-199px -166px;} div#manga1 ol li a[href="#C6"]{width:204px;height:169:px;background-position:0px -331px;} div#manga1 ol li a[href="#C1"]{width:185px;height:165px;background-position:-202px -335px;} --> ＿</style> <style type="text/css" media="print"> <!-- div#manga1 ol,div#manga1 ol li{ list-style-type:none; margin:0;padding:0; } div#manga1 ol{ width:400px; } div#manga1 ol li{float:left; } --> </style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<div id="manga1"> ＿＿＿<ol> ＿＿＿＿<li id="C1"><a href="#C2"><img src="./images/Petit_Sammy_eternue_1.jpg" width="196" height="167" alt="は"></a></li> ＿＿＿＿<li id="C2"><a href="#C3"><img src="./images/Petit_Sammy_eternue_2.jpg" width="191" height="167" alt="はあ"></a></li> ＿＿＿＿<li id="C3"><a href="#C4"><img src="./images/Petit_Sammy_eternue_3.jpg" width="195" height="167" alt="はあ～"></a></li> ＿＿＿＿<li id="C4"><a href="#C5"><img src="./images/Petit_Sammy_eternue_4.jpg" width="191" height="169" alt="はあ～く"></a></li> ＿＿＿＿<li id="C5"><a href="#C6"><img src="./images/Petit_Sammy_eternue_5.jpg" width="204" height="169" alt="はあ～くしょん"></a></li> ＿＿＿＿<li id="C6"><a href="#C1"><img src="./images/Petit_Sammy_eternue_6.jpg" width="185" height="165" alt="・・・・"></a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
#boxにもborder-box付けてあげると良いと思う。 height:100%;は親継承だから、 #containerのborder-boxした100%を継承して、そこを100%としているので、 #boxにもbox-sizing:border-box;付けたらそれが100%になるかと。 ごめんなさい、説明できそうにないので、 騙されたと思って付けてみてください。（笑）
No.1です。 ＞このような指定をしたところ、Firefox では正常に表示されています。 　正常かどうかと、正しいか否かは別です。あなたが期待したとおりに「たまたま表示された」からと言って正常とは限りません。他のすべてのブラウザ、IEの各バージョンと互換モードなどをチェックするわけには行きません。 　まず、No.1で示した方法を順番に確認してからですよ。
ご自身で挙げているサイトのjQueryでいいと思いますが、 何故それを使わないのでしょう…？ http://wataame.sumomo.ne.jp/archives/1841 そのサイトで紹介しているのも、 サムネイルは拡大画像の縮小版ではなく、別の画像ですよ。
#3 補足URLを読みました。text-align: justify の設定初期値のアルゴリズムはUA依存であり、全ブラウザで同じ表示にする事は出来ません。 http://hp.vector.co.jp/authors/VA022006/css/text … http://www.y-adagio.com/public/standards/tr_css2 … UA依存性をなくす為に「CSS Text Module Level 3」で text-justify が定義されていますが、2013/11/17現在の全ブラウザでは使用できません。 http://www.w3.org/TR/css3-text/#text-justify-pro … また、プロポーショナルフォントの横幅はフォント依存なので全環境で縦の行数を揃える場合は固定幅フォント(等幅フォント)を指定する必要があります。 http://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD% … ブラウザのフォントサイズはユーザCSSによってクライアント側で自由に変更できるのが実情です。 フォントサイズが変更されても正しく見えるように制作するのが現実的だと思います。 http://www.smbc.co.jp/accessibility/guidelines/g …
再現できません。どのブラウザでも、またIEの互換モードでも・・ 単純な表だけにして他の要因がないか調べるしかないかと・・ ★タブは＿に置換してあるので戻す。 [HTML4.01 strict]+[CSS2.1] <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- table[summary="テストのための表"]{ border-collapse:collapse; } table[summary="テストのための表"] tbody td{ border:solid 1px black; } table[summary="テストのための表"] tr:first-child td+td{ width:16em; } table[summary="テストのための表"] tr:first-child td+td+td{ width:auto; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<table summary="テストのための表"> ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<td colspan="2">あいうえお</td> ＿＿＿＿＿<td>かきくけこ</td> ＿＿＿＿＿<td>そしすせそ</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<td>あいうえお</td> ＿＿＿＿＿<td>あいうえお</td> ＿＿＿＿＿<td>かきくけこ</td> ＿＿＿＿＿<td>そしすせそ</td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿</table> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
どこまでのケースを想定するかに依りまずが、こんな感じでしょうか。 検索: (<a(?: +(?!title *=)[^ >]*)*) title *= *(?:"[^"]*"|'[^']*'|[\w.:-]*) 置換: $1 ■対象 <a title="ここは文字列が入っています" href="index.html" class="link"> <a title='ここは文字列が入っています' href="index.html" class="link"> <a title = test href="index.html" class="link"> <a class="link" title="ここは文字列が入っています" href="index.html"> ■対象外 <area title="ここは文字列が入っています" href="index.html" class="link"> <area class="link" title="ここは文字列が入っています" href="index.html"> <a class="<link>" title="ここは文字列が入っています" href="index.html"> <a class=' title="test"' title="ここは文字列が入っています" href="index.html"> ■参考URL http://w4ard.eplusx.net/translation/W3C/REC-xml- … http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … 本格的に対応すると複雑になるので多少妥協しました。対象外の <a> は妥協の産物です。 XML 1.0, HTML 4.01 に概ね準じていますが、対象外の class="<link>" なんかは違反なので考慮しなくていいかもしれません。 「この手の悪いコードがあるかもしれない」という前提で考慮したほうがベターではありますが。 class=' title="test"' は違反ではありませんが、通常見ない書き方なのでここはまあ妥協で。 http://w4ard.eplusx.net/translation/W3C/REC-xml- … これ全部対応するのはさすがに骨が折れる…。 # Re: kouta-222さん
ありません。 absoluteは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから absolute 　・・・【中略】・・・ 　これらのプロパティはボックスの包含ブロックとの関係を示すオフセットを指定する。絶対配置のボックスは通常フローの範囲外である。これはボックスが以降の兄弟に影響を与えないことを意味する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Visual formatting model - CSS 2.1 spec (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )］より 　absoluteは他の要素に影響を与えない目的で使用するのですから、 　￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ ｛中身に応じて高さを変えたいのですが、｝とは、矛盾しています。 ※文書構造にしたがってデザインしていくものてす。デザインのためにHTMLを書くのではありません。 　その要素に続く他の要素が、その要素の内容により影響を受けるのでしたら、それは決してabsoluteの関係ではないはずです!!!。文書構造に逆らうデザインはできません。するべきではありません。 　もう一度、HTML自体を見直しましょう。 　逆に、内容が伸縮する要素に関わるのでしたら続く要素はそれに含まれるはずですから、変化する要素に対してabsoluteさせればよいです。
すみません、補足です。 JavaScriptも、フロントエンドのプログラムと呼ぶ事があります。
質問1 大文字小文字の区別はありません。 XHTMLでは要素名や属性名を小文字で書くようになっていますから、小文字で統一しておくと良いでしょう。 質問2 Google ガイドラインでは3桁が推奨されています、処理速度に影響はないと思います。 /* NG */ color: #ffffff; /* OK */ color: #fff;
書くようにしましょう。!!! 　ウェブ、特にHTMLは対象の間違いがあっても何とか解釈して表示を試みるようになっています。(参考文献の後半)　だからと言ってそれに期待するのは不味いです。--すべてのブラウザが処理してくれるわけではない。 ＿＿＿＿＿＿＿＿＿＿＿＿＿＿ここから 　スタイルシートが別ファイルに存在する場合、ユーザエージェントはスタイルシートの文字エンコーディングをを決定するにあたり、以下の（高いものから低いものへ）優先順位を遵守しなければならない: 　　1. HTTPプロトコルでの"Content-Type"フィールドの"charset"パラメータ（または他のプロトコルの類似のパラメータ） 　　2. BOMと@charsetの両方またはいずれか一方（以下参照） 　　3. <link charset="">または（もしあれば）リンクの機構による他のメタデータ 　　4．スタイルシートやドキュメントが参照する文字集合（もしあれば） 　　5. UTF-8を仮定する ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで 　⇒4.4 CSSスタイルシートの表現( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　4.はリンク元のHTMLが使用しているcharsetが使われていると類推はしますが、その場合異なる文字集合のHTMLからの参照はうまく処理できない場合があります。 　言い換えると、上記の対応をすべて行っておけば良いです。ただし、HTML5以降は、HTMLもUTF-8で記述することが前提となります。 1. もしサイト内のCSSをすべてUTF-8で提供するなら、.htaccessなどでHTTP応答ヘッダに加えるようにする。 2. BOMは書かなくて良いですが、@chersetを記述する。 3. <link rel="stylesheet" media="screen" cherset="UTF-8"> 4. HTMLもUTF-8で書く ・・で完璧
SPECCTR http://www.specctr.com/ PS、FW、AIプラグインです。 Buy Specctrページの「Try Specctr Lite」から無料機能制限版（width、heightのみ）をダウンロードできます。 有料版は、やりたいことの全て＋αができると思います。 cacoo https://cacoo.com/ 先日知ったばかりですが、寸法線ツールがありました。 距離測定や色測定ができるかどうかはわかりません。 無料、または有料のウェブアプリです。 図形描画ツールもありますが、サイズ確認方法などが手間になると思いますし、Adobeのでやるのと大して変わらないかもしれません。 Visio http://office.microsoft.com/ja-jp/visio/ ArgoUML http://argouml.tigris.org/ EA http://www.sparxsystems.jp/ これらのツールは「UMLツール」で検索すると出てきます。
[解説] Q:背景を画像で敷き詰め（リピート表示）たいのですが Q:・containerの高さが0になってしまう。 何も指定しなければ、リピートされます。 ⇒初期値: repeat( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) Q:最初に表示されている部分より下がリピートしてくれません。 （ファーストビューより下の部分に背景が適用されない。 　floatさせると、それが所属していた要素から切り離されますから、元の要素からそれが欠落するために背景は残った要素分の高さになります。 　「浮動体はフロー内にないので、浮動体の前後に生成された位置指定されないブロックボックスは、あたかも浮動体が存在しないかのように垂直に流れる。( http://momdo.s35.xrea.com/web-html-test/spec/CSS … )」 .container {background: url("hoge.jpg") 0 0 transparent;} .inner {background: url("hoge.jpg")} ★bodyに指定したので良いでしょう。もちろんheader,section,footerに指定しても良い。 <div class="container"><div class="inner"> こんなclass名をつけると、検索エンジンは理解しないし、そもそも自分が困る。 とにかくHTMLは率直に文書構造だけを記述すること。それによってデザインの自由度がまします。 　あとは、その文書構造にしたがってセレクタを記述するだけです。タイプセレクタ、子孫セレクタ、クラスセレクタ、擬似要素・・・サンプルでは使ってませんが子供セレクタ、隣接セレクタ、擬似クラスもある。 　分からないときは、ハウツーサイトではなく仕様書に目を通すこと!!
＞擬似要素で挿入された文章はソースに表示されないようです。これだと不親切なので、記号などの挿入にとどめたほうがいいのかもしれません。 　いえ、逆です。ソースにはわざわざ入れたくないが、ユーザーエージェントによっては別の内容を加えたいときなどに使用するものです。 　視覚系ブラウザについては"!"の画像を入れる。スクリーンリーダーには、前後に余韻を入れる。プリンターには太字でアンダーラインを入れるなど・・ 例えば、 @media screen{ 　　div.section p strong{ 　　　　text-decoration:none; 　　　　color:red;font-weight:bold; 　　　　position:relative; 　　} 　　div.section p strong:after{ 　　　　content:"!";color:red; 　　　　position:absolute; 　　　　top:-1em;right:-0.5em; 　　} } @media aural{ 　　div.section p strong{ 　　　　pause-before:1s; 　　　　pause-after:1s; 　　　　volume:loud; 　　} } @media print{ 　　div.section p strong{ 　　　　font-weight:bold; 　　　　text-decoration:underline; 　　　　color:inherit; 　　} } とか、本来HTMLソースにあったほうが良い物はソースに書きますが、ないほうがよい物は書かない。例えばSTRONG要素の前後に「」なんてないほうが良いのは明白です。スクリーンリーダーや印刷、あるいは検索エンジンには、無いほうがよいですよね。 ・スクリーンリーダーが、"かっこ開く　ここは重要 カッコ閉じる"なんて読んだら困ります。 ・検索エンジンが、「ここは重要です」ではマッチしません。 　HTMLには文書構造しか書かない。装飾的なもの--特にユーザーエージェントごとに違う---は、HTMLには書かないのが望ましいのです。言い換えると、ユーザーエージェントに依存してその要素の内容に何かを追加したいときには使いましょう。 [例] <div class="nav"> 　<ol> 　　<li><a href="/Top">トップ</a></li> 　　<li><a href="/Products">製品</a></li> に対して、印刷用スタイルシートでは、 div.nav ol li a:after{ 　　content:"\A　　　　( http://hoge.com"attr(href)")"; 　　white-space:pre; 　　color:inherit; } とかはよく使うのじゃないでしょうか？？
WordpressをCMS（コンテンツ・マネジメント・システム）として使用する以上、その対象であるHTML5とCSSの知識は必須です。 その上で、構築ツールに当たるWordPressの知識が必要になるでしょう。 社内システムであれば、WordPressのカスタマイズは、プラグイン程度で済ませられると思いますので、phpによるカスタマイズ知識が必要になることはあまりないでしょう。 （VBやJavaによる一般的なWeb開発に比べて、WordPressをphpで拡張するのはかなりコツが要ります） また、実はWordpressはあまりjQueryと相性がよくないので、javascriptがらみのカスタマイズも、最初から必須になることはないと思います。 まずはHTML5とCSSを。
＞以前どこかのサイトでこの方法が書かれていたのですが、再度見つけることができなかったので 　さすがにそれは探し方が悪いです。 　まず最初、いの一番に見るのは仕様書ですよ。幸いに現在ウェブ標準のCSS2.1は邦訳もあります。 　⇒Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification (ja)( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　　　⇒12 生成内容、自動番号付け、およびリスト( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　気になるのですが・・・仕様書を御存知ないと言うことは、CSSでもっとも重要なセレクタやカスケーディングをご存知ないのでは？？？ 　ＣＳＳ(カスケーディングスタイルシート)と言うくらいですから、カスケーディングを知らないとCSSは使いこなせません。仕様書でもプロパティより先に書かれている。 5 セレクタ 6 プロパティ値とカスケーディング、継承の割り当て ※内容を追加するのですから、内容を持ち得ない--空要素--、img,brなどには使えません。また擬似要素の属性などを継承しますから、dispalyなどで上書きしなければなりません。 　よく使われるのが、counter関係のプロパティと組み合わせて、第１章２項のように章番号を付け加えたり、印刷用スタイルシートでリンク先URLを追記したり、float解除とか・・ 　仕様書をブックマークして、必要なときいつでも参照できるようにしましょう。ウェブ上に散在する「ハウツー」は、参考にしても、ほとんど(まったく)意味がありません。なぜなら仕様書を御存知の人だったら「仕様書をご覧ください」ですむはずです。詳しく正確に書かれています。 　そのようなサイトは、仕様書の存在を知らないか、理解していないからこそ「書ける」のですからね。 　HTML 4.01仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )もね 　仕様書を見て分からない時に質問されると効率的です。
まず、どちらがオリジナルかが分かるかですよね。 　それが、GNU Free Documentation License( http://ja.wikipedia.org/wiki/GNU_Free_Documentat … )で配布されているなら、無償で入手して有償で再配布しても一向に構いません。GPL( http://ja.wikipedia.org/wiki/GNU_General_Public_ … )のフリーソフトと同じです。 　フリー(すなわち自由)なのですから・・。BSDライセンス( http://ja.wikipedia.org/wiki/BSD%E3%83%A9%E3%82% … )ならもっと自由かも。いやコピーレフト( http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%94% … )じゃないのでGPL/GFDLのほうが自由と言う意見も。 　私もネットで公開する画像やHTML/CSSのコードは、GFDLかBSDにしてます。だって無断使用されて不愉快になるほどなら、初めからフリー(自由に・・)と宣言しておいたほうが良いです。 　日本では別の意味(無料)でフリーソフトと言う言葉が使われていますが・・・。
＞サイドと本文部分がフッターとくっついていませんでした。 　いえ、あなたの補足では「フッターはボトムに固定したいです。 」となっていましたよ。 　本文にくっつけたいなら、もっと楽です。 <!-- html,body{margin:0;padding:0;} h1,h2,h3,p{margin:0;line-height:1.8em;} p{text-indent:1em;} div.header,div.section,div.footer{ width:80%;min-width:470px;max-width:890px; margin:0 auto; padding:5px; } div.section{ position:relative;/* ★ */ min-height:200px;/* ★ナビゲーションに最低限必要な高さ */ } div.section h2,div.section div.section{ margin-left:20%;/* ★ナビの置き場 */ } div.section div.section{ width:auto;min-width:0; min-height:0; } div.section div.nav{ position:absolute; top:0;left:-2px; height:100%;/* ★ */ width:20%; } /* 色づけ */ div.header{background-color:red;} div.section{background-color:green;} div.section div.section{background-color:silver;} div.section div.nav{background-color:orange;} div.footer{background-color:navy;} -->
恐らく、これに近いソースになっているのだと予想します。 【html】 <dl class="news"> <dt>2013年10月30日</dt> <dd>メディア掲載のお知らせ</dd> <dt>2013年10月29日</dt> <dd>ホームページを立ち上げました</dd> </dl> 【css】 .news dt{ float:left; width:100px; } .news dd{ padding:0 0 10px 100px; margin-bottom:10px; border-bottom:solid 1px #CCC; } 2列目は中央に寄っているのではなく、上の段の日付部分が折り返されているのでdtの縦がddよりも長くなり、floatの自然な機能として上のdtの右側に回り込んでいるだけです。 これはdtにclearを入れる事によって簡単に解決します。 また、ddに入れている下線（borderでも背景画像でも同じ）はあくまでddの範囲の一番下に表示されますので、 この記述方法だと、dtの方がddよりも縦が長くなると、日付の文字と下線がかぶってしまいます。 これに関しては、上記のclearだけでは解決しません。 dtの折り返しを防ぐには単純に幅を広げればいいかと言うとそうではなく、閲覧者の環境によって文字サイズや文字幅は様々ですので、見ている方によっては崩れます。 どの環境でも崩れず作るには、dtのwidthとddのpadding-leftの数値をpxではなくemで指定するとよいです。 em文字サイズによって変わる相対的な指定ですので、文字サイズが大きくなるとemの幅も大きくなり、環境によって2行になるような事はありません。
こんにちは。 スクリプトをimg要素の後に持って行くか、ページのonloadで呼び出せば動くと思います。 エラーは document.getElementById("pict")が取得できないためです。 （imgタグ生成前に呼んでいませんか？）
できるだけDIVは使わない。使うときも「id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」が原則です。HTML5では、より厳しく「Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/html5/grouping-content.html … )訳すと「適切な他の要素がないときの最後の手段としてdiv要素を使用することが強く奨励される。」」 　例えば、 <body> 　<div class="header"> 　　ヘッダ 　</div> 　<div class="section"> 　　<h2>タイトル</h2> 　　<dl> 　　　<dt>2013.08.29</dt> 　　　<dd>本文が長いと日付の下に本文が来るようになってしまいます。本文の末尾が消えてdivが横並びになるようにしたいのですが良い方法はないでしょうか？</dd> 　　　<dd>よろしくお願いします。</dd> 　　　<dt>2013.08.30</dt> 　　　<dd>本文が長いと日付の下に本文が来るようになってしまいます。本文の末尾が消えてdivが横並びになるようにしたいのですが良い方法はないでしょうか？</dd> 　　　<dd>よろしくお願いします。</dd> 　　</dl> 　</div> と率直にHTMLを書いて、日付を左に表示したいとすれば、そのようにスタイルシートを書けばよいだけです。将来気が変わったら他のデザインにすることも容易です。 　別にdl(定義リスト)でなくても何でも良いです。 <div class="section"> 　<h2>見出し</h2> 　<h3>2013.10.29</h3> 　<p></p> 　<h3>2013.10.29</h3> 　<p></p> だろうが・・・・文書構造を示す最適なマークアップにすればよい。スタイルシートを使う目的は「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」なのですから、好きにデザインできるのですよ。HTMLには構造しか書いてないので作るほうも、スタイルシートでデザインを変えるのも楽ですし・・・ ★日付のfloatと本文のmarginを組み合わせてあります。 ★ウィンドウ幅には依存しません。スマホ縦でも横でも、幅広のパソコンでも 　　ウィンドウ幅を変更してみましょう。 ★タブは＿に置換してあるので戻す。 [HTML4.01strict]汎用(PC/スマホ兼用) <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;background-color:gray;} div.header,div.section,div.footer{ width:80%;min-width:460px;max-width:800px; margin:0 auto; padding:5px; background-color:white; } div.section dl dt{ float:left; } div.section dl dd:after{ content:""; display:block; clear:left; } div.section dl dd{ margin-left:6em; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>タイトル</h2> ＿＿<dl> ＿＿＿<dt>2013.08.27</dt> ＿＿＿<dd>本文が長いと</dd> ＿＿＿<dt>2013.08.29</dt> ＿＿＿<dd>本文が長いと日付の下に本文が来るようになってしまいます。本文の末尾が消えてdivが横並びになるようにしたいのですが良い方法はないでしょうか？</dd> ＿＿＿<dd>よろしくお願いします。</dd> ＿＿＿<dt>2013.08.30</dt> ＿＿＿<dd>本文が長いと日付の下に本文が来るようになってしまいます。本文の末尾が消えてdivが横並びになるようにしたいのですが良い方法はないでしょうか？</dd> ＿＿＿<dd>よろしくお願いします。</dd> ＿＿</dl> ＿</div>＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-10-30</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html> [HTML5]★スマホおよび、IE9以降のモダンブラウザ用 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <style media="screen"> <!-- html,body{margin:0;padding:0;background-color:gray;} header,section,footer{ width:80%;margin:0 auto; padding:5px; background-color:white; } section dl dt{ float:left; } section dl dd:after{ content:""; display:block; clear:left; } section dl dd{ margin-left:6em; } --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#">Some</a></li> ＿＿＿＿<li><a href="#">navigation</a></li> ＿＿＿＿<li><a href="#">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>タイトル</h2> ＿＿<dl> ＿＿＿<dt>2013.08.27</dt> ＿＿＿<dd>本文が長いと</dd> ＿＿＿<dt>2013.08.29</dt> ＿＿＿<dd>本文が長いと日付の下に本文が来るようになってしまいます。本文の末尾が消えてdivが横並びになるようにしたいのですが良い方法はないでしょうか？</dd> ＿＿＿<dd>よろしくお願いします。</dd> ＿＿＿<dt>2013.08.30</dt> ＿＿＿<dd>本文が長いと日付の下に本文が来るようになってしまいます。本文の末尾が消えてdivが横並びになるようにしたいのですが良い方法はないでしょうか？</dd> ＿＿＿<dd>よろしくお願いします。</dd> ＿＿</dl> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
この場合は、率直にtableで良いですよ。 ★こういうときこそ、tableを使う　表データだから virtical-alignが使える。 ★タブは＿に置換してあるので戻す。 <body> ＿<div class="header"> ＿＿<form action="http://www.google.co.jp/search"> ＿＿＿<table summary="searchForm" id="search" border="0"> ＿＿＿＿<tbody> ＿＿＿＿＿<tr> ＿＿＿＿＿＿<th>キーワード</th> ＿＿＿＿＿＿<td><input type="text" name="q" size="20" value=""></td> ＿＿＿＿＿＿<td><input type="submit" value="探す?"> ＿＿＿＿＿</tr> ＿＿＿＿</tbody> ＿＿＿</table> ＿＿</form> ＿</div> スタイルシートは table#search{ border-collapse:collapse; width:26em;margi:5px 5px 5px auto; line-height:2em; } table#search th{ border: red 1px solid; backgrund-color:rgb(255,160,160); vertical-align:middle; } table#search td{ border:none; vertical-align:middle; padding-left:5px; text-align:right; } table#search td+td{ text-align:left; }
一挙にそこに進んだって無理です。 スタイルシートを取り入れるには、何よりも先に、HTMLをきちんと学びなおしましょう。 ・W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　に「メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。」と書かれているのは伊達じゃありません。(英語でメモとは日本語のメモよりも重要な意味をもちます) 絶対に目を通しておく記事 ・スタイルシートの概説( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　そして、「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　必ず読んで理解すること。 　それには、 HTMLは文書構造を書く。文書構造しか書かない ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ 　と言うことが書いてあります。 　そしてスタイルシートの登場です。HTMLで示された文書構造を元にスタイルを適用する要素を指定するセレクタ(選択子)を書いて、そのプロパティを記述します。 要素(Element)とは、文書を構成する要素のことで、タグでマークアップされます。 　<h1>あいうえお</h1><!-- その文書の見出し要素であることを示す --> 　<p>かきくけこ、さしすせそ</p><!-- 他の文書のひとつの段落であることを示す --> 　<div class="section"><h2>見出し</h2><p>・・・</p><p>・・・</p></div> 　　<!-- この部分が文書構造で本文(section)であることをclass名で示しているブロック要素 --> 　デザインにかかわることはHTMLには書きませんし、デザインのためにマークアップするのではない!!! 　その上で例えば次のようにマークアップされたHTMLがあるとします。 [HTML4.01] <body> 　<div class="header"><!-- この文書のヘッダ --> 　　<h1>タイトル</h1><!-- 見出し --> 　　<p>記事でここは<strong>注目</strong>して</p> 　　<div class="nav"><!-- ナビゲーション --> 　　　<h2>サイトマップ</h2><!-- 見出し --> 　　<p>記事でここは<strong>注目</strong>して</p> 　　　<ol><!-- 序列リスト --> 　　　　<li><a href="">トップ</a></li><!-- リストの項目 --> 　　　　<li><a href=""><strong>新着情報</strong></a></li> 　　　　<li><a href="">製品</a></li> 　　　</ol> 　　</div> 　</div> 　<div class="section"><!-- 本文ブロック --> 　　<h2>本文</h2><!-- このブロックの見出し --> 　　<p>記事でここは<strong>注目</strong>して</p> ・・・・・ これがHTML5だとしたら <body> 　<header><!-- この文書のヘッダ --> 　　<h1>タイトル</h1><!-- 見出し --> 　　<p>記事でここは<strong>注目</strong>して</p> 　　<nav><!-- ナビゲーション --> 　　　<h2>サイトマップ</h2><!-- 見出し --> 　　　<ol><!-- 序列リスト --> 　　　　<li><a href="">トップ</a></li><!-- リストの項目 --> 　　　　<li><a href=""><strong>新着情報</strong></a></li> 　　　　<li><a href="">製品</a></li> 　　　</ol> 　　</nav> 　</header> 　<section><!-- 本文ブロック --> 　　<h2>本文</h2><!-- このブロックの見出し --> 　　<p>記事でここは<strong>注目</strong>して</p> となるでしょう。 【以下の説明はHTML4.01で行います。】 　そしてスタイルシートで、ヘッダーのstrong要素の文字を赤くしたいなら、セレクタを 外部スタイルシート、<hea></head>内に ・div.header p strong{color:red;}と書 と書きます。 　いずれを書いても、<div class="nav"></div>内、<div class="section"></div>内の、<strong></strong>の文字は赤くなりません。 　なぜなら、 div.header p strong{} とは、headerというclass名をもつdiv要素の子孫(半角スペース)の子孫のp要素の子孫のstrong要素と言う意味だからです。 　一方、単に strong{color:green;} 　と書いた場合は、すべてのstrongは緑の文字になりますが、上記のように指定したものがあると、そちらが優先されます。なぜならより詳しく厳密に指定してあるからです。 　また、 　さらにsection内の<p></p>について <p>記事でここは<strong style="color:blue">注目</strong>して</p> 　としたら、<head></head>内や外部スタイルシートで書いても変更することはできません。 　これらのどの要素にデザインをするかの指定方法--セレクタはスタイルシートで最も大事な部分です。 　Ultimateなどで作成するプロパティやその値の書き方なんて、テキストエディタで書いたってしれた物ですし、それがいくら書けたからと言って、目的の要素に対してスタイル(デザイン)が指定できるわけじゃありません。 　まず身につけなければならないことは 1) HTMLで文書構造をきちんとマークアップできるようになること!! 　　　デザインは文書構造さえきちんと出来ていれば好きになります。 2) 次にCSS(カスケーディングスタイルシート)のカスケーディングを身につけます。 　5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　　もちろん、その前の1 CSS 2.1仕様について 　2 CSS 2.1の手引き 　3 適合性: 必要条件と推奨事項 　4 構文と基本データ型 も一通りは・・ 　それが出来ると 「cssの記述は掲載されているのですが、html側の記述が掲載されていません。」 　が、【すでに書かれているHTMLにスタイルを指定する方法】が自然と分かるようになります。 　みんな通ってきた道です。プロパティより先に知っているはずですから、書かれてないのです。 　
メディアクエリにはデータベースなんてありません。 そのページを表示する端末の種別やサイズに応じてCSSを切り替えるための仕組みです。 とりあえず、このページがわかりやすいメディアクエリの説明になっているのではないかと思います。 http://d.hatena.ne.jp/amachang/20080425/1209139140 なお、書かれた時期が少々古いため、上記ページで書かれている対応ブラウザが少なくなっております。現在の対応状況は以下ページの表の"Media Queries"欄で書かれている通りです。 http://fmbip.com/litmus/#css3-properties なお、CSSを直接ページに記述する場合は、 <style type="text/css"> <!-- @media only screen and (min-width: 0px) and (max-width: 320px) { // ここにiPhone用のCSSを書く } //--> </style> という風にします。
いわゆるtableで言うところの、vertical-align="middle" ですよ。 難しく考えないで、そのまま率直に、スタイルシートを書けば良いです。 個人的には、HTML5は古いブラウザには利きませんので、HTML4.01strictで十分だと思います。 サンプルはHTML5 + CSS2.1 です。文字コードはUTF-8 ★Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# ) で検証済み ★タブは＿に置換してあるので戻す。 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <!--[if IE]> <script src="http://html5shiv.googlecode.com/svn/trunk/html5. … <script src="http://css3-mediaqueries-js.googlecode.com/svn/t … <![endif]--> <style media="screen"> <!-- header nav ul{ list-style:none; display:table; border-collapse:separate; border-spacing:3px; width:200px; margin:0 auto; padding:0; position:relative; } header nav ul li{ display:table-row; } header nav ul li a{ vertical-align:middle; display:table-cell; border:black 3px solid; padding:2px 2px 2px 64px; width:140px; height:56px; color:white; background-color:black; } header nav ul li a:before{ position:absolute; left:6px; } header nav ul li a[href="./a"]:before{content:url(./images/aa.gif);top:6px;} header nav ul li a[href="./b"]:before{content:url(./images/bb.gif);top:75px} header nav ul li a[href="./c"]:before{content:url(./images/cc.gif);top:144px} header nav ul li a:hover{color:yellow;} header nav ul li a:active{color:red;} --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="./a">あいうえおかきくけ</a></li> ＿＿＿＿<li><a href="./b">こさしすせそたちつてとなにぬね</a></li> ＿＿＿＿<li><a href="./c">のはひふへほ</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿</p> ＿＿<aside> ＿＿＿<h2>Something aside</h2> ＿＿</aside> ＿</section> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿</p> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
「PC用」というか、「ブラウザの横幅が広い」状態で見る、と想定しているならば、 width: 650px;もメディアクエリ分けしてあげたら良いのではないでしょうか。 @media only screen and (min-width:1000px){ #content{ width: 650px; } } とか。 min-widthなのか、min-device-widthなのかは是非お好みで。px数もお好みで。 記述内容の詳しい説明は「メディアクエリ 幅」とかで検索したら山ほど出てきます。多分。 もしくは、そもそもcommon-l.cssはスマホ端末では読み込みたくない、 というのであれば、そちらの読み込みをmin-widthで振り分けてあげるとか。 よきcssを！
基本的には都度書き換えるか、それが面倒なら生年月日だけ書いておく。 　Wikiの個人名はそうなってます。 　動的に書き換えるには、javascriptだと利用者に制約を受けますし、時計が狂っていたら・・ ということで、CGIなり、サーバー側のプログラムで作成したテキストをインクルードで読み込むかになります。 　最も簡単なのは、ページ自体をPHPなりCGIで出力させること。
No.1です。 まず試すこと。うまくサブメニューがその下に出るはずです。 ＞classは？ 　HTML4.01で、DIVは「id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。」でありました。デザインではなく、用意されているタグでは表しきれない文書構造を示すためでした。これが理解されたとは言いがたく、HTML5では「文書をよりよく構造化するために、( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」新しい要素が追加されました。 ＿＿<div class="nav" id="siteMenue"> のclass名は、ナビゲーションを示すブロックと言う意味で、HTML5のnavの代わりです。将来HTML5に直すときは、そのままコンバーターで ＿＿<nav id="siteMenue"> とすればよいように・・・。 　すなわち <body> 　<header> 　　<h1>title</h1> 　　<nav></nav> 　</header> 　<section> ・・・・・・ ★画像をずらして使いまわす方法は、「スプライト」と呼ばれる手法ですが、その目的はCSSで背景が変わるたびに画像を読み込ませるとタイムラグが生じるために、最初に画像を読み込んだ時点で、必要な画像を読み込ませておく手法です。 　そのため、ひとつのリンク先ですでに画像が読み込まれれば良いのですから、すべてを一枚にしなくても、最初に表示されて時点で完了しているからです。そのほうが画像サイズが小さく出来る。そして、なによりも位置の指定が楽だからです。 a:link{background:silver url() 0 50%;} a:visited{background-position:100px;} a:hover{background-position:200px;} a:active{background-position:300px;} とかける。 　先のソースは、CSS(カスケーディングスタイルシート)の命でもあるカスケーディングをうまく利用してシンプルになっています。詳細度を活用して同じ指定を繰り返さないように・・。 　まずは試してみること、なお、No.1の添付図は 200px×100pxの画像を左右50px、上下10pxあけて並べた物です。 　こちらの添付図は動作確認 JQueryを使う必要はありません。
IEが互換モードで動作してませんか？？ 　⇒IE8でサイドバーのレイアウトが崩れる場合の対処法 - Webデザイン・CSS - 教えて！goo( http://oshiete.goo.ne.jp/qa/8308987.html ) 　のNo.2参照 　また、 html,body{margin:0;padding:0;} 　をいれておくこと
右半分は表示されるが左側が最初の画像も消えてしまうということ。 二枚目以降はアニメーション部分のみ「書き換える」に設定します。 GIFを作成するときは 1) 全体をひとつのパレットにすること 2) 書き換える部分だけ書き換えること 3) 重ねるときは透過色を間違わないように Giamを使うと自動的に処理してくれるかと・・
>しかもIEの開発ツールでHTMLを確認したところ、なぜかサイドバーがメインコンテンツの中に入っていました。 こうなることが原因だと思いますので、その現象の直接の原因であるHTMLコードの不備を直せば、期待通り表示されるのではないでしょうか。 <div>の閉じ忘れなどのミスをチェックしてみてください。
ブラウザの持つデフォルトのスタイルは、カスケードの優先度が最も低いですが、指定されない場合はそれが利用されます。 　カスケーディングの仕組みは、CSSカスケーディングスタイルシートの根幹といえる仕組みです。それを無視してスタイルシートを書くから混乱するのですよ。 　ユーザーの最優先宣言スタイル＞著者の最優先宣言スタイル＞著者のスタイル＞ユーザーのスタイル＞デフォルトのスタイル(ブラウザなど) 　その上で、詳細度で比較され 　さらに出現順番 でしたよね。 ・5 セレクタ( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) ・6 プロパティ値とカスケーディング、継承の割り当て( http://momdo.s35.xrea.com/web-html-test/spec/CSS … ) 　#一意セレクタ(HTML上のID要素)で指定されていますが、これは詳細度が[0,1,0,0]です。(本来は*#id-nameの意味) 　この場合、タイプセレクタ(HTMLの要素)が*(全称セレクタ詳細度0000)が省略されているとみなすため、すべてのタイプ(要素)に対して既存ののスタイルがカスケーディングで引き継がれています。 <body> 　<div class="header"> 　　<h1 id="Top">タイトル</h1> 　　<p>この部分はヘッダーです。</p> 　　<div class="nav"> 　　　<ol id="siteMap"> 　　　　<li id="goTop">リンク</li> 　　　　<li>リンク</li> 　　　</ol> 　　</div> 　</div> 　<div class="section"><h2>本文</h2></div> 　<div class="footer"><h2>文書情報</h2></div> </body> と書かれていた場合・・ #Top{margin:0 20px 0px 0px;} #SiteMap{margin:0 20px 0px 0px;} #goTop{margin:0 20px 0px 0px;} と、 #Top{margin-right:20px;} #SiteMap{margin-right:20px;} #goTop{margin-right:20px;} は結果が異なるはずです。 　製作されているのですから、firefoxをお使いだと思いますが、firrefoxの開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )にある Firebug( https://addons.mozilla.jp/firefox/details/1843 )を使用すると、それぞれの要素のマージンやパテディングがどのように適用されていて、どのようにカスケーディングされているかが一目でわかります。 ★HTMLに<div id="outer"><div id="inner">このような書き方はしませんよ。 　「id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」と文書構造を示す物をつけます。具体的には、HTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )のような物をその意味に従ってつけるほうが良いです。後と絶対に楽です。 ★デザインためにidをフルと、その詳細度は0100と高く扱いにくいです。
#sidebar{ width:320px; float:right; background:green; } と背景background-colorの指定をしているのは、#sidebarだけだからです。 他の要素にもbackground-colorを指定すればよいだけです。 　それよりも、「独学で学んでいる初心者です。」が気になります。独学--私も--であろうと、なかろうと誤った道に入り込むと無駄です。 <div id="container"> <div id="header">ヘッダー</div> <div id="main">メイン</div> 　　　　　　<div id="sidebar">サイドバー</div> <div id="footer">フッター</div> </div> 　のマークアップは、とてもよく見かけますが、その時点で誤りです。DIVの目的は、HTMLに用意してある要素(どのような要素であるかはタグで示す)が足りないときに!! 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』ために存在するのですよ!! 　今後一般化するHTML5の「新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」を見られるとわかるように!! <body> 　<div class="article"> 　　<div class="header"><h1>ヘッダー</h1></div> 　　<div class="section"><h2>メイン</h2> 　　　<div id="aside"><h3>サイドバー</h3></div> 　　</div> 　　<div class="footer"><h2>フッター</h2></div> 　</div> </body> ・・・・header/section/footeをひとつしか含まないならarticleは不要ですから <body> 　<div class="header"><h1>ヘッダー</h1></div> 　<div class="section"><h2>メイン</h2> 　　<div class="aside"><h3>サイドバー</h3></div> 　</div> 　<div class="footer"><h2>フッター</h2></div> </body> 　だけでも良いです。idではなくclassを使用するのは、これらは文書内に何度も登場するはずのものなのでidではまずいです。HTML5では、そのまま要素(タグ)ですからね。 headerは、記事の見出し sectionは、本文、section内にsectionで見出しレベルが下がる footerは、記事のフッター asideは、本文と直接関係ない記事 ・・html5だと <body> 　<header><h1>ヘッダー</h1></header> 　<section><h2>メイン</h2> 　　<aside><h3>サイドバー</h3></aside> 　</section> 　<footer><h2>フッター</h2></footer> </body> となります。こうしてデザインとは関係なく内容で書かれていると、あとあとのメンテナンスもとっても楽になります。そして、デザインと無関係なので自在にデザインできます。 そのうえで、スタイルシートは 上記最初のHTMLなら・・ div.header,div.section,div.footer{ width:80%;min-width:480px; margin:0 auto; padding:5px; } div.section{ position:relative; min-height:300px; } div.section div.aside{ width:20%; position:absolute; right:0;top:0; height:100%; } div.section h2{ margin-right:21%; } /* 色をつけておく */ div.header{background-color:yellow;} div.section{background-color:lime;} div.aside{background-color:green;} div.footer{background-color:aqua;} div.section h2{background-color:red;} HTML5用なら header,section,footer{ width:80%;min-width:480px; margin:0 auto; padding:5px; } section{ position:relative; min-height:300px; } section aside{ width:20%; position:absolute; right:0;top:0; height:100%; } section h2{ margin-right:21%; } /* 色をつけておく */ header{background-color:yellow;} section{background-color:lime;} aside{background-color:green;} footer{background-color:aqua;} section h2{background-color:red;} ※CSS2以降、基点となるセレクタに続けてセレクタを書きます。 #section は、*#section の意味に解釈されます。#は兎も角classの場合は、基点セレクタを書くほうがわかりやすい。
公開・配布されているものも結構あります。 http://web-pc.net/jquery010 http://kachibito.net/snippets/open-slide-panel このあたりをちょっといじれば使えると思います。
<header></header>(HTML5)もしくは、<div class="header"></div>、<div id="header"></div>(HTML4)でマークアップされた部分に含まれる要素のうち、左に表示したい物は左に、右に表示したい物は右にスタイルシートで指定すれば良いです。 [HTML5の例] <body> 　<header> 　　<h1>ページタイトル</h1> 　　<p>ページの簡単な説明</p> 　　<nav> 　　　<ol> 　　　　<li><a href="/">Top</a></li> 以下省略 でしたら header h1,header p{margin-keft:50%;min-height:100px;position:relative;} header nav{position:absolute;width:50%;top:0;right:0;height:100%;} [HTML4の例] <body> 　<div class="header"> 　　<h1>ページタイトル</h1> 　　<p>ページの簡単な説明</p> 　　<div class="nav"> 　　　<ol> 　　　　<li><a href="/">Top</a></li> 以下省略 でしたら div.header h1,header p{margin-keft:50%;min-height:100px;position:relative;} div.header div.nav{position:absolute;width:50%;top:0;right:0;height:100%;} とでも書けばよい。 　HTMLさえちゃんと書けていれば、スタイルシートでいかようにも指定できます。
CSSをサポートしていないブラウザへの対応方法は昔から使われている決まった方法があります。 CSS適用後のデザインと同じ画像を用意して、その画像を表示してください。 グレースケールの画像を用意して、<img src="グレースケールの画像">とすれば、CSSを使わなくても（CSSをサポートしていないブラウザでも）グレースケールの画像が表示されます。
FireBugというものを知っていますか？ Firefoxのアドオンで開発者が使うツールの一つです。 ソースのどの部分にどのスタイルが当てられているか、すぐ調べることができます。 とりあえずそれをインストールしましょう。 ちなみに、Chromeならアドオンを入れなくてもデフォルトで入っている「要素を検証」というコマンドで同じような事が出来ます。 もう一つの「色違いにしたい」というような質問に関しても、 Firebugで調べれば解決すると思います。 これだけではアレですので、この件に関しての答えを言いますと、 twentytwelveのテーマフォルダの直下にあるstyle.cssの1508行目に .main-navigation li ul li aに対する背景の指定に色が書かれていますので、 そこを変更すれば背景色を変えることができます。 ローカルで変更してFTPでアップする、と言うのが一番安全で簡単なやり方ですが、 管理画面からも変更できます。 外観 > テーマ編集から直接テーマファイルを編集できます。 ミスした時に戻せるように、必ずバックアップを取りながら作業しましょう。
No.2 の回答と同様ではありますが タグ内でスクリプトレットを使われると読みづらいので 冗長ではありますが以下の様に記述するのがオススメです。 <% if (column == 0) { %> <td class="aiueo"><%= rowdata.get(column) %></td> <% } else { %> <td><%= rowdata.get(column) %></td> <% } %>
＞それともclass名のように或る程度自由に決める事が出来るのでしょうか。 　自由に決めることは出来ません。XHTML(XML)だと自由に決めることが出来ます。 　これには歴史があって、 　HTML自体、本来--その文書をタグを用いて、その文書を構成する要素(element)をマークアップする、言い換えれば文書構造をマークアップするものなのですが、それがデザインに流用されると言うことがされてきました。そのため・・ 　『Webページはより複雑化し、限られた環境にしか適応しなくなり、相互運用性問題に悩まされることとなり、障害を持つ人々にアクセス障壁が設けられてしまう。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　正しく理解されていなかったのですが、HTML4の時代から、『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』とされていました。 　その当時から、すでに自由ではなく、class名やidは「文書構造を示す物」だったはずです。そうすることで、検索エンジンはどの部分がheaderであり、どの部分が節--章--項(section)であるかが理解できるはずでした。 　「class名やidが文書構造を示すために使われてこなかった」という反省から、HTML5では、『文書をよりよく構造化するために、次の要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』となり、DIVは、原則として使えなくなりました。 　DIVは、文書構造を示す他に適当な要素がないときのための最後の手段として使用する---と変わりました。 　そのために、私は、HTML4であっても極力HTML5の新しい要素名を、class名として使用することにしています。もちろん、その意味も含めて!!! 　⇒3.1. 新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) に追加すると section　原則としてh1, h2, h3, h4, h5, h6 要素を(ひとつだけ)伴う。sectionの階層とhのレベルは一致する。 　<section> 　　<h2>・・・</h2> 　　<section> 　　　<h3>・・・</h3> 　　　<section> 　　　　<h4>・・</h4> article　内部に<header><section><footer>を持つ、あるいは持つと期待される。 　など・・ 　あなたの質問で示されている『main』『sub』をあえて使用しなかったのは、これらはそれぞれ『main』→section、『sub』→aside,ないしnavになるべき「構成要素」だと判断したからです。 ★class名は文書構造をしめすもの。その名称と意味はHTML5の新しい要素名をモデルとする。 　　将来HTML5が本格的に利用できるようになったとき移行が容易。 　　検索エンジンに正確に内容を示すことが出来る。(SEO) 　　自身も将来のメンテナンスが極めて楽になる。 【参考資料】 　⇒HTML5“とか”アプリ開発入門（1）：Webの3つの問題を解決する「HTML5」とは何なのか (2/2) - ＠IT( http://www.atmarkit.co.jp/ait/articles/1008/30/n … ) 　　の【問題2】 　⇒HTML5タグリファレンス - HTML5.JP( http://www.html5.jp/tag/index.html ) 　　邦訳です。原文は、 　　　⇒HTML5( http://www.w3.org/TR/html5/ )
＞今気になっているのはドメイン料とサーバー維持費です。 　これは、依頼者が持つほうが良いです。すくなくともドメインは自分で管理しましょう。必須です。!! 　作ってはもらったけど、気に喰わないときに、制作会社を変えようとしても、これを握られていたら、首根っこを取られているような物で、変更ができなくなります。 　良心的な制作会社では、そうしているはずです。 　
#2です。 jQuery2.0は、1.9.x系の命令を維持しつつ、旧タイプブラウザへの互換性を捨て、コードをすっきりさせてダウンサイジングし、実行速度を上げたバージョンです。 なので、「1.9.xにしたら動かないプラグインがある」という問題は、そのまま残ります。 あと、1.9.xは、1.8.3から複数の関数を削除して整理したバージョンですが、追加された内容は、おそらくほとんどのjQueryユーザには縁のないものでしょう。 また、1.9.x以降、仕様が必須になった機能は、1.8.3でも普通に動作するものです。 「jQueryの勉強」にも程度がありますが、市販されているjQuery書籍にも、1.8.3準拠（というより1.9だと動かない命令を含んでいる）のものが数多いことから、自分は1.8.3を使います。
初めまして。失礼します。 質問の趣旨とは異なっているとは思いますが、 Googleカスタム検索をご利用になるという方法も、 １つかと思います。 ご参考まで。 参考URL：https://www.google.com/cse/tools/create_onthefly …
拙作『だぶサラダ』http://dabsalad.wi-wi.jp/ で作ってみました。 http://pv.wi-wi.jp/okwave/q8292909/ スクリプトはHTMLコードをご覧ください。 "skip"のような仕組みは現段階では実装されていません。（今後実装するかどうかは現段階では未定です。） そのため、skipされたように見せていますが、実際にはバックグラウンドでスライドショーが続けられています。（CSSのz-index指定により隠れているだけです。） ---------- スライドショーに必要なスクリプトは、 <script type="text/javascript" src="jquery-1.10.1.min.js"></script> <script src="jquery.dabsalad.cw.js"></script> この２行と、 その下のHTMLファイルに直に記述している<script>です。 ------------- $("#eyecatch").dabSalad( {//グローバルオプション loop:false, onend: function(){ $('#menu').delay(2000).fadeIn(); } // スライドショー終了 }, [//使用画像 "images/photo1.jpg", "images/white.png", "images/text1.png", "images/white.png", "images/photo2.jpg", "images/white.png", "images/text2.png", "images/white.png", "images/photo3.jpg" ], // 以降、動作定義（タイムライン、脚本） {dressing:'image', duration: 1000, from:{width:'640px', height:'480px'}, to: {width:'640px', height:'480px'}}, // photo1 {dressing:'image', interval: 3000, group: true},//white {dressing:'image', interval: 4000}, //text1 {dressing:'image', interval: 3000, group: true}, // white {dressing:'image', interval: 4000}, // photo2 {dressing:'image', interval: 3000, group: true},//white {dressing:'image', interval: 4000}, // text2 {dressing:'image', interval: 3000, group: true},//white {dressing:'image', interval: 4000} // photo3 ); ------------ 第二引数で使用する画像を読み込み、 第三引数以降が、それぞれの動作を順番に定義しています（いわゆるタイムライン。個人的に"脚本（スクリプト）"と呼んでいます）。 だぶサラダにはフェードアウトする仕組みがありませんので、真っ白の画像（white.png）をフェードインさせる事で前の画像がフェードアウトしているように見せかけています。 すみませんがドキュメントが全くできておりません。（早くてもあと数日から１週間かかると思います。） サポートは個別に行いますので、サイトトップから問い合わせページにいき、メールを送信してください。
なぜ、table-cellなのか分かりません。 単純に記事全体の背景を一番下に設定すればよいだけです。 デザインのために、DIVを使うと反ってわからなくなりますよ。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 と書かれているように、あくまで、HTML4では不足していた文書構造を示す要素が不足していたために、その文書構造を補完するためのものです。 （HTML5では、文書構造を示す多くの要素が追加され、代わりにDIVは原則使うべきでない形に変わります。） 　HTMLの文書構造が <body> 　<header> 　</header> 　<section> 　　本文 　</section> 　<footer> 　</footer> </body> 　HTML4.01(XHTML1.0)でしたら、それぞれ<div class="header">になるべきところ 　※idでなくclassなのは、header,section,footerなどは複数回存在するはずなので・・ 　構造とプレゼンテーションを分離すること。それが最も大事です。 （ある形にデザインしようとするときは、当然文書構造に則したものなので) 　そうすることで、製作もメンテナンスも楽になるし、デザインもずっと楽になります。 ★横の仏像の背景を下から横一列のみ表示したいのですがうまくいきません。 　意味が通じません。 　　横とはどこに横ですか？？ Q: ページの最後のfooterの横ですか？ 　　bodyの背景を最下段にrepeat-xで指定するだけで希望の物になるはずです。 　　footerに背景を指定してもよいです。 Q: headerの横ですか？ [サンプルHTML] HTML5を考慮してHTML4.01strictです。 ※本来背景であるはずのものは背景に回してある。 スタイルシートや画像を読み込まない検索エンジンやスクリーンリーダー、展示端末、携帯電話、スマホなどどんな端末でも利用できます。HTMLに不要なものは書かれていないので、書き足すのも修正するのも楽なはずです。 もちろん ・Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# ) 　でチェック済みです。 スタイルシートはまた暇が出来たら・・ 　その前に、上記の不明点を <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- --> ＿</style> </head> <body> ＿<div id="header"> ＿＿<h1>○△□園<span>東京都＊＊＊＊＊保育園</span></h1> ＿＿<div class="nav"> ＿＿＿<h2>サイトマップ</h2> ＿＿＿<ul> ＿＿＿ <li><a href="/">Top</a></li> ＿＿＿ <li><a href="/info">information</a></li> ＿＿＿ <li><a href="/polycy">polycy</a></li> ＿＿＿ <li><a href="/contact">contact us</a></li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>園の案内</h2> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="/annai">◎◎園の御案内</a> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li> 給食について</li> ＿＿＿＿＿＿<li>◎◎園で学べる事柄</li> ＿＿＿＿＿＿<li>一時保育・延長保育について</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li><a href="/policy">保育方針</a> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>仏教精神</li> ＿＿＿＿＿＿<li>家庭的な雰囲気</li> ＿＿＿＿＿＿<li>共に育ちあう仏教精神</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li><a href="/admittion">園児募集一時保育</a> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>子育て相談</li> ＿＿＿＿＿＿<li>延長保育</li> ＿＿＿＿＿＿<li>園児の姿をネット配信</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li><a href="/plan">毎日、年間計画</a> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>一日の流れ</li> ＿＿＿＿＿＿<li>毎月の行事一覧</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿</ol> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h3>新着情報・お知らせ</h3> ＿＿＿<dl> ＿＿＿＿<dt>2012.12.14</dt> ＿＿＿＿<dd>体育教室,勤労感謝慰,手話おけいこ,避難訓練,観覧会,食育,七五三,落花生掘り,砂あそび,稲刈り,みそ作り,お店屋さんごっこ,手作りクッキング,　お散歩,◎◎園まつり,ＡＢＣ教室の写真をアップしました♪ ＿＿＿＿</dd> ＿＿＿＿<dt>2012.11.6</dt> ＿＿＿＿<dd>体育教室,絵画造形教室,食育,手話おけいこ,お散歩,ABC教室,本堂お集まり,防火訓練,保育参観の写真をアップしました♪</dd> ＿＿＿＿<dt>2012.10.15</dt> ＿＿＿＿<dd>・・・【中略】・・・</dd> ＿＿＿</dl> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<h3>関連情報</h3> ＿＿＿<ul> ＿＿＿＿<li><a href="/appendix/safty">○△□園が行っている安全対策</a></li> ＿＿＿＿<li><a href="/appendix/shool">○△□園私立小学校</a></li> ＿＿＿＿<li><a href="/appendix/safty">○△□園が行っている安全対策</a></li> ＿＿＿＿<li><a href="/appendix/shool">○△□園私立小学校</a></li> ＿＿＿＿<li><a href="/appendix/safty">○△□園が行っている安全対策</a></li> ＿＿＿＿<li><a href="/appendix/shool">○△□園私立小学校</a></li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>Copyright(C)幼稚園サンプル 2012 - 2016 All Rights Reserved mailto:*****</address> ＿＿<address>宗教法人長福寺◎◎園　福岡県○○市**町○○***○○○<br>(TEL)0942-**-****</address> ＿＿<address>園事務所<br>（TEL)0942-**-****/FAX0942-**-****</address> ＿</div> </body> </html>
SASS/LESSは、CSSの実装のうち、仕様的に貧弱だった部分を再定義して、近代的な「今風の」仕様に生まれ変わらせるメタ言語です。 単に「CSSを書きやすくする」だけでなく、例えばSASSの "Mixin" や "Extend" など、プログラム的なコード展開や演算子機能の追加、関数の存在など、簡単なマクロ言語環境も持っています。 決して「便利なツール」という位置づけではありません。 また、"Compass" のような多数のビルトインライブラリが使えるため、省力化効果も大きいです。 自分は VisualStudio でSASSパーサを使っていますが、生成されるcssが自動でminify(最適化=改行・コメントを自動削除、複数ファイル連結)されるため、内容を判断する事も出来ません（つうかその必要もないですが）。 また、一か所でも記述にミスがあると、内容が空白のcssが生成されるため、一発でエラーがわかります。 あと、ちょっと誤解があるようですが、SASS/LESS記述ファイルを、ネイティブなCSSに変換する作業は、JavaScriptを使用した「閲覧時リアルタイムパース」だけでなく、専用のコマンドラインツールを使ったり、エディタ（というより統合開発環境）に組み込まれたパーサレンダラで自動実行する方法もあります。 簡単な内容ならリアルタイムパーサでも構いませんが、一般サイトなら、事前にCSS生成しておく方が、スピード的にも有利です。 モバイル開発などを行うと、CSSははっきり言って、もう時代遅れの仕様だと痛感します。 いったんSASSを覚えると、正直、二度とネイティブなCSSは触りたくなくなりますよ。
　:afterで追加される画像は置換インライン要素ですからサイズは画像本来のサイズになります。displayでblockに指定しても利きません。 　スマホがメインの対象でしたら、HTML5、CSS3が利用できますから、6. Border Images( http://www.w3.org/TR/css3-background/#border-ima … )が使用できます。 <section> <figure> <img src="./images/sample01.jpg" width="480" height="360" alt=""> </figure> <p> テキスト、テキスト、テキスト、テキスト、テキスト、テキスト、テキスト、テキスト、テキスト、テキスト、テキスト、テキスト、テキスト、テキスト、テキスト </p> </section> の、figureの周囲に画像ボーダーを使用します。画像はz-indexで後ろに回すことになります。
No..4です。 ＞老眼鏡をかければいいだけじゃない？ ＞まとまった書籍でなければ、読めない・理解できない、というコトも ＞できれば、出版物としておすすめのものはないでしょうか？ 　あれば良いのですが・・・私も勉強は基本的に書籍派なのですが、悲しいことにこの世界、日々の変化が激しく、「出版されるころには過去の物になってしまうこと」。仕様書を見ればすべて書かれていることを、あえて書籍にすると言う事は「著者自身が無知か、不正確でも構わないとき」になってしまう。 　私も、還暦はトウに過ぎましたし、多少下地があったのですがウェブは、はじめて15年少々です。本当に初期は本を見てましたが、結局は公開されている仕様書を一通り目を通して、全体を把握した後は、必要なときは必要な箇所を読み返しては深めていきました。 　ネットも書籍も、ハウツー物は、ほとんど役に立たなかったです。 　ウェブ開発には、safariじゃなく、Firefoxと開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )の組み合わせが良いです。他のブラウザは Open With( https://addons.mozilla.jp/firefox/details/11097 )とか FireMobileSimulator( https://addons.mozilla.jp/firefox/details/8519 ) 　なお、各種仕様書をブックマークに整理して入れておいて必要なとき見れるようにしておけば良いでしょう。文字が小さければ、Ctrl+＋で拡大すれば良いです。 Default FullZoom Level( https://addons.mozilla.jp/firefox/details/6965 )つかってもよい。
<div id="header"> □□ □<div id="aa"> <h1>*********</h1> <h2>*********</h2> <p>**********<br /> *************</p> </div><!--aa--> □□□□<div id="bb"> <p>********</p> </div>><!--bb--> </div><!--header--> <!--navi--> それだけ全角スペース（□）が入っていたら隙間もできるでしょう。
＞cssで特定のidやclassを持った要素を指定することは常識ですが ＞本来は共通のクラスを割り当てるのが正しいやり方だと思いますが 　そもそも、これが根本的な間違いです。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　idやclassは、HTMLに文書構造を表す適当な要素がない時の最後の手段として、idやclass名をつけてその要素(ブロック要素、またはインライン要素)の文書構造を示すための物です。スタイルシートのためにつける物ではありません。 HTML4.01strict 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 HTML5 『div 要素を、他に適切な要素がないときなど、最後の手段の要素として見なすことが、強く推奨されます。( http://www.html5.jp/tag/elements/div.html )』 ★HTMLは、デザインのためではなく【文書構造】をマークアップする物です。 ★スタイルシートはその文書構造に基づいて、プレゼンテーションを指定していく物です。 　スタイルシートを学ぶには、まず ・正しいHTMLの作成方法 ・セレクタ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ・値の割り当て、カスケード処理、継承( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　を身につけることが必須です。 例 タイプセレクタ(HTMLの要素) p{color:red;}/* 詳細度[0,0,0,1]*/ クラスセレクタ p.memo{color:black;} /* 詳細度[0,0,1,1]*/ 　class属性の値のリストにmemoを持つもの 隣接セレクタ p.memo + p{margin-top:2em;}/* 詳細度[0,0,1,2]*/ 　p.memo の次にp要素があるときは・・
>ANo.1お礼 >私の希望は不可能なのですね。 多少の条件は付きますが、（IE9以上、Safari3以上、Firefox3.5以上、Opera不明バージョン以上、Chome不明バージョン以上）できるといえばできます。 marginやらwidthを適宜調整してください。 スクロールバーが出るとかでないとか、ブラウザごとの違いが結構あり、厳密に919px、619pxで切り替わるかというとそうではないので、（画像サイズに対して）余裕を持たせて切り替えた方が"自然"に見えます。 <style> #contents { width: 920px; margin: 0 auto; text-align: left; } #contents img { margin: 10px 0; width: 300px; border: 0 none; } @media only screen and (max-width: 919px) { #contents { width: 620px } } @media only screen and (max-width: 619px) { #contents { width: 320px } } </style> <div id="contents"> <a href="http://○○○○○○○/001.html"><img src="images/sample1.jpg" ></a> <a href="http://○○○○○○○/002.html"><img src="images/sample2.jpg" ></a> <a href="http://○○○○○○○/003.html"><img src="images/sample3.jpg" ></a> <a href="http://○○○○○○○/004.html"><img src="images/sample1.jpg" ></a> <a href="http://○○○○○○○/005.html"><img src="images/sample2.jpg" ></a> </div> ----------- なお、imgの横マージンは0にしていますが、このHTMLのままでは、 <a><img></a>（この部分の改行） <a><img></a>（この部分の改行） が画像間の空白として表示されます。 ---------- #contentsの部分全体に背景を入れるのであれば、 <div id="contents"> <div> のように入れ子にして、 #contents{width:100%; background: 何か} #contents>div {width:920px;} などとしてみてください。 ------------------ 「レスポンシブウェブデザイン」「mediaqueries」で検索してみてください。 920pxでデザイン、CSSを作成した後、 @mediaを使って620pxでデザイン、CSSを作成、 さらに@mediaを使って320pxでデザイン、CSSを作成しているだけです。 １ページに対して３回デザインするから面倒だというだけで、特別な事をしているわけではありません。
その広告にアクセスしているのならば、 履歴から戻れるのではないのでしょうか？
ただ単にこれだけであれば、javascriptのみで可能です。 要は画面だけあれば可能なのですよね？ 少しjavascriptを勉強してみることをおすすめします。
いえ、ブラウザだけではありません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　少なくとも、仕事としてなら、上記の基本は理解しておかないとならないでしょう。 　逆に考えて見ましょう。今から10年後のブラウザに対応したページはどうしますか？？ 　私が十数年前に製作したページHTML2.0やHTML3.2ですが、最新のブラウザでも問題な利用できますよ。ウェブサイトをHTMLで作成する最大の理由が上記「どんな環境からもWebの情報を利用できる」なのです。 　私は、あるサイトを構築する時に数種類(サイト|カテゴリートップ、主なコンテンツ、情報など)のテンプレートを作成し、Fireefox,Chrome,Opera,IE(IE Tester)、携帯端末とLynx、および印刷が想定される場合は(各ブラウザの印刷プレビュー)で確認します。その上で、それを元にページを作成していきますが、その時点で修正することは基本ありません。最初から基本どおりに作成していますから・・ 　今だけでなく、場合によったら十年２０年と残る物です。キチンと基本どおりに製作すれば、あまり悩むこともないのじゃないかと。
情報が少ない為、ヒントを得る方法を書きます。 レイアウト崩れで考えられる事として、CSS等の幅指定を思い浮かべます。 ディスプレイ、ブラウザーに関わらず、任意サイズに表示にしていた場合、 意図しない表示崩れを起こす場合があります。 ・ヒントを得る方法 １ ご友人環境で表示した画面は見たことありますか？ 見たことが無ければ、PCの全画面を撮影(キャプチャー)し、 保存した画像を送って貰い、表示崩れ状況を確認するだけでも 原因特定のヒントを得る事が出来ますよ。 ・ヒントを得る方法 ２ ブラウザーを最大化表示で画面一杯に表示させても、 カラム落ち等の不具合が発生するかを確認するのも手です。 ※PCの全画面を撮影(キャプチャー)する方法 Windows機なら、「PrintScreen」ボタンにて画面全体を撮影した後、 アクセサリにある「ペイント」に貼付け(Ctrl+v)て、保存で画像ファイルにします(⌒-⌒)
誰もが悩まされる問題です。私も以前悩まされました…。 canvas に vertical-align: bottom; を指定してやるだけで解決します。 詳しい説明は、以下のサイトが参考になると思います。 http://allabout.co.jp/gm/gc/23889/ http://webtech-walker.com/archive/2007/03/011436 …
インラインでpx指定されているんじゃ無理ですね。 さらに言うと ・テンプレートなのにインラインスタイル なのはまあ主義の違いでいいでしょうが、 ・PCでも20や18は大きすぎ ・そもそもpx指定は閲覧者に不親切 という問題があります。 根本的に考え直したほうがいいでしょう。
　article要素は、御存知と思いますが内部にheader,section,footer要素を持つ、あるいは持つと解釈される完結した一塊の文書を示します。 ★何かツール使ってますか? 　下記のように記述してもずれますか?? <body> ＿<header> ＿＿<h1>FOREST STUDIO</h1> ＿</header> ＿<section> ＿＿<article> ＿＿＿<header> ＿＿＿＿<h1>真夏のひまわり畑</h1> ＿＿＿</header> ＿＿＿<section> ＿＿＿＿<h2>タイトル</h2> ＿＿＿＿<p> ＿＿＿＿＿森の工房の隣にある畑は、毎年夏になると満開のひまわりの花で黄色く染まります。ひまわりは「日輪草」とも呼ばれ、太陽に向かって花を咲かせます。大きなひまわりは背丈が2メートルを超え、見ごたえも十分です。畑の周囲は約5キロの散策コースになっていますので、花を見ながら散歩をするのもおすすめです。 ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿太陽の光をいっぱいに浴びたひまわりの種は、冬の間の野鳥たちの餌になります。また、ひまわり油も抽出し、料理屋やお菓子作りに活用しています。ひまわりの種を香ばしくローストしたクッキーも人気商品です。 ＿＿＿＿</p> ＿＿＿</section> ＿＿</article> ＿</section> ＿<footer> ＿</footer> </body> <body> ＿<article> ＿＿<header> ＿＿＿<h1>FOREST STUDIO</h1> ＿＿</header> ＿＿<section> ＿＿＿<h2>真夏のひまわり畑</h2> ＿＿＿<p> ＿＿＿＿森の工房の隣にある畑は、毎年夏になると満開のひまわりの花で黄色く染まります。ひまわりは「日輪草」とも呼ばれ、太陽に向かって花を咲かせます。大きなひまわりは背丈が2メートルを超え、見ごたえも十分です。畑の周囲は約5キロの散策コースになっていますので、花を見ながら散歩をするのもおすすめです。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿太陽の光をいっぱいに浴びたひまわりの種は、冬の間の野鳥たちの餌になります。また、ひまわり油も抽出し、料屋やお菓子作りに活用しています。ひまわりの種を香ばしくローストしたクッキーも人気商品です。 ＿＿＿</p> ＿＿</section> ＿＿<footer> ＿＿</footer> ＿</article> </body>
No.2です。 ＞この情報は、古いのでしょうか？それとも。誤植なのでしょうか？ 　いえ、単純にご存知無いだけかと。(^^) 　HTMLを読み込んだブラウザは、そのページを表示するために更なるデータが欲しい場合--画像を読み込むとか--は、改めてサーバーにデータを要求します。スタイルシートやjavascriptの場合も、もしcharsetの指定がない場合は、本体のHTMLと同じであろうと推測して受け取ったデータを解釈します。 　すなわち、<link rel="stylesheet" href="" media="screen">にも、スタイルシートに@charset{}にも指定がない場合、本体HTMLがutf-8だとutef-8と解釈します。ブラウザによって多少動作が異なる場合もありますし、そのような解釈をしないブラウザの場合、どちらも同じ文字コードなのに読み込めない場合もあります。また、サーバーがHTTP応答ヘッダで、異なった文字コードを付与してくる場合もあります。 　それらの理由から、必ずスタイルシートに@charsetを付くことが推奨されています。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから ・HTTPヘッダにあるContent-Typeフィールドのcharsetパラメータ ・@charsetによる指定 ・参照元文書の構造化言語による指定（たとえばHTMLならLINK要素のcharset属性） ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［CSS2の構文と基本データ型( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )］より 　その著者はこのことを知らないと考えるのが率直なところです。(それか、あなたが読み飛ばしている) 　以前の質問(タグが反映してくれません - Webデザイン・CSS - 教えて！goo( http://oshiete.goo.ne.jp/qa/8269715.html ))で、スタイルシートを body {font-family:`メイリオ`,`hiragino kaku gothic pro`} 　と書かれていましたが、これもfamily名の最後に総称ファミリ名を書くことが推奨されています。 　⇒フォント( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　参考書として記述するのでしたら、これらは正確に記述するべきだと思います。 　ただ、私も関わったことがあるのでわかりますが、書籍と言うものは自分自身が、その対象に対して無知なときでないと書けないのです。(^^)なぜなら、公開されている仕様書には、すべて正確に漏れなく記述されているのですから、仕様書の存在を知っていたら、本なんて書きません。「そちらをお読みください」でおしまいです。 　本と言うものは、--知らないのですから---嘘とは言いませんが、相当割り引いて読まないとだめです。 　そもそも、デフォルトスタイルシートという考え方自体望ましくはありません。それをすることによって、ユーザーエージェントが持つすべてのスタイルを上書きしてしまいますから、改めて再設定しなければなりません。煩雑になるし・・
bodyの（他は見ていませんが） background-attachment:fixed; 「fixed」 はIE6未対応です。 IE6 に対応させるには下記URL下段記事を参考にどうぞ http://www.css-lecture.com/log/css-beginner/041. …
body {font-family:`メイリオ`,`hiragino kaku gothic pro`} 　全角文字や半角スペースを含むfamily nameは引用符で囲みますが、引用符は""でも''でも良いですが、``は引用符としては扱われません。 　また、必ず、最後に総称ファミリー名をつけなければなりません。 body {font-family:'メイリオ',"ＭＳ Ｐゴシック",'hiragino kaku gothic pro','Osaka',sans-serif;} ;はその宣言が最後のときは必須ではありません。 　⇒15. フォント( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )
ソースコードの編集で、横表示にする事は簡単ですが・・・ 希望の表示形態に改変して利用すると、「楽天アフィリエイト」では、 規約違反になりますのでご注意下さい。 下記楽天ページで確認出来ます。 ・知らないうちにやってませんか？「ルールを守って楽しくアフィリエイト！」 http://affiliate.rakuten.co.jp/guide/rule/ ・基本をしっかりチェックしよう！「楽天アフィリエイトのルール」 http://affiliate.rakuten.co.jp/guide/help/
No.2です。 真ん中あたり・・ <h1 style="background-image:url();text-indent:20em;width:120px;height:80px;">猫集まれ</h1> 　と書いてあります。 　^^^^^^^^^^^^^^^^^^^^^^^^ もちろん、 <h1><img src="" width="" height="" alt="猫集まれ"></h1> 　急がば回れ・・・きちんと理解したうえで御利用ください。のほうがSEO的にもネットワーク負荷(早く表示される)と言う意味からも、より良いです。
確認に使っているブラウザは何でしょうか? 最近のブラウザには「開発用ツール」が付属、あるいはアドオンとして追加できるようになっています。 これを使うと、原因究明等もやりやすくなります。 例:InternetExplorer8以降 http://msdn.microsoft.com/ja-jp/library/dd565628 … > 以下が、テキストを貼り付けて入力しましたデータ が見えないので、確認はできません。 > 1、背景画像を「image/sky82.jpg」で固定する。背景に壁紙の様に大きく単独で、この画像を使用したいのですが、　一切表示がなされない。 画像ファイルが指定場所に無い、指定方法が間違っている、あたりが考えられます > そもそも文字が表示されない。 本当に表示されていないのか、背景色と同じ色になっている等で「見えない」だけなのか、確認してください。 次のことくらいは最低限調べてください。 ・ソースコードを確認 →「ソースを見る」や開発ツールで確認できる ・URLの指定が間違っている ・ファイルが指定の箇所に無い → (開発ツール等で)フルパスでのURLを確認 → 画像単独でブラウザに表示してみる ・画像ファイルが正常ではない →別の画像閲覧アプリで確認してみる →ftpでサーバーに転送している場合は、バイナリーモード/アスキーモードの違いに注意 ・HTMLの文法が間違えている ・スタイルシートの文法が間違えている → 開発ツールを使えば、エラーチェックができるはず
No.2です。 みなさんの回答へのお礼も拝見しました。 　上司が無知すぎます。たしかにHTMLはHyper Text Markup Languageの略ですが、その言語を使う相手は人間ではなく機械です。 　人は前後の文脈や字の大きさから文意を判断できますが、機械にはそれが出来ません。HTMLはSGMLをヒントに考案されました。すなわち『そこで、プレーンテキストのみを用いて、「タグ」を使うことによってデータに意味を持たせることが考えられた。( http://ja.wikipedia.org/wiki/SGML )』のです。お馬鹿な機械に伝えるのですから、人相手の言語とは全く異なります。 　あなたが、あるいはあなたの会社がウェブ関係で利益が上げられるようになるためには、人材が何よりも必要です。一人のコンピューターを多少でもかじったことのある新入社員を、使い物になるようにするためには、優れた指導力のある先輩に付きっ切りで指導をしてもらったとしても一年はかかるでしょう。 　確かに、個人のサイトを個人のためにとりあえず作るのでしたら、確かに入門書一冊で一ヶ月もあったらできるでしょう。(^^) 　しかし、それは個人が趣味で作るのでしたら許されるかもしれませんが、会社のとなれば、ましてや他人の物を請け負ってとなると、一年でもきついでしょう。というか無理です。自分ちの物置をDIYで作るのと、他人が住む家を作るのでは訳が違います。 　
No.1です。 ＞上記のような意図した見栄えと違ってしまうのを防ぐ 　これはウェブの世界では、致命的な誤りだということは御理解されているとして。 下記のHTMLにおいて、特定の重要な単語が折り返されたくないときには <p> ここからはひとつの<em>段落</em>です。<em>段落</em>を<em>マークアップ</em>するときは&lt;p&gt;&lt;/p&gt;(Paragraph)というタグを使ってマークアップします。&lt;br&gt;は、ひとつの<em>段落</em>でありながら<strong>強制改行(orced line break)</strong>で、通常のHTMLでは一度も登場しないはずです。 </p> 　とマークアップしておいてあるとしたら em,strong{white-space:pre; font:bold normal;text-decoration:none;} strong{font-color:red;} とデモすれば、em,strong内では改行されません。 　長い文章には使うのは望ましくありません。20文字程度の文字しか表示できない端末(携帯電話)とか・・ <pre>を使うとしたら、詩とかコンピューター用のコードとかでしょうか？？
{block:Date} （略） {/block:Date} という部分を {block:Title} （略） {/block:Title} の下に移動させれば良いのではないでしょうか。
＞CSSで縦×横をどんなサイズに設定すればよいか 　最近の主流は、背景に関しては一部しか表示されなくてもすむようにして、コンテンツの表示サイズを%、min-widthとmax-widthで指定しておいて、max-widthにあわせます。 　また、内容的にfigure(挿絵)的な画像やそれ自体が目的の画像は当然固定することが多いのですが、その場合も伸縮させる必要があるときは、最大サイズに合わせます。印刷が想定されるページは、解像度を数倍にしています。 　 div.section{ 　width:80%;min-width:620px;max-width:980px; 　margin:0 auto; 　background:url() 50% 50%; 　background-size:cover;/* CSS3 */ 　position:relative; } div.section div.figure{ width:20%; position:relative; float:left; } div.figure img{ display:block; width:90%;height:auto; margin:5px auto; } ＞こういうサイトを作るにはどのような方法（ソフト）があるの？？ 　スタイルシートを身につけること。さすがにツールはありません。 　初心に帰って、仕様書を読破すること。
コピペするだけではなく自分で考えたり調べたりしていますか？ https://www.google.co.jp/search?q=%E3%83%99%E3%8 … IE向けまたはデフォルトの指定がないので、何も表示されるわけがありませんね。 私の手元のIE9のデバッグツールでも、backgroud関係は何も適用されていないと表示されます。
スタイルシートは、HTMLの属性を使用するより、はるかに多彩なプレゼンテーションの指定が容易です。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから スタイルシートはこれらの問題を解決すると同時に、HTMLにおける制限されたプレゼンテーション機構に取ってかわる。スタイルシートでは、行間の設定やインデントの設定、テキスト色や背景色、フォントのサイズとスタイル、その他様々なプロパティの設定が簡単にできる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Style Sheets in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　しかし、同時にHTMLの文書構造を変更することはできません。 『UAが木構造を変化させる訳ではない、ということに注意すること。( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )』 ＞と、並べる方法はありますでしょうか？ 　これは可能ですが!!! ＞※liのwidthを100pxとした場合、 ＞liの数が5以下の場合はulもwidthが100pxで親に中央配置、 ＞liが6以上の場合はulのwidthが200pxになって親に中央配置。 　これは出来ません。javascriptを併用するか、2列になるol要素にcolumns2のようなclass名を付けるしかないでしょう。 　【class名は数字から書き始めることが出来ない】 <div class="section"> ＿<h2>見出し</h2> ＿<ol> ＿＿<li>あ</li> ＿＿<li>か</li> ＿＿<li>さ</li> ＿＿<li>た</li> ＿＿<li>な</li> ＿</ol> ＿<ol class="columns2"> ＿＿<li>あ</li> ＿＿<li>か</li> ＿＿<li>さ</li> ＿＿<li>た</li> ＿＿<li>な</li> ＿＿<li>は</li> ＿＿<li>ま</li> ＿＿<li>や</li> ＿</ol> </div> div.section ol,div.section ol li{margin:0;padding:0;list-style-type:none;text-align:center;} div.section ol{display:block;width:100px;margin:0 auto;} div.section ol li{width:101px;float:left;background-color:yellow;} div.section ol li+li+li+li+li+li{display:inline-block;float:none;width:99px;} div.section ol:after{content:"";display:block;clear:left;} div.section ol.columns2{width:200px;} CSS3のMulti-column Layout モジュールを使用しても同様になるでしょう。
先に示されたフレーム以外の手法を３つほど １．CGIやPHP と DirectoryIndex を使用する 要するに index.html のようにファイル名不要で自動アクセスしてくれるファイル名にCGIやPHPを指定して、スクリプトでページを表示させます。 　ページ切り替えは、スクリプトに表示ページの指定パラメータを「POSTメソッド」で渡してやって行います 　PG=1を渡せば「a.html」の内容を、PG=2なら「b.html」の・・・ ２．WebサーバがApacheならmod_rewriteを使って表示URLを書き換える 　サーバの設定状況に依存しますが.htaccessというファイル内にmod_rewriteの規則を書いてやることでURLを自在に変更できます ３．CSSのdisplay:none とinlineで切り替え操作を駆使してJavaScriptから制御する方法 　一つのページ内に全コンテンツを書いておいてJSでCSSを操作して切り替える どっちにしてもコンテンツがいくら増えてもSEOとしては不利なので、特に商利用ではあまりお勧めしません そういう観点からお手本としては不適切なので、普通に組んだ方がはるかに実用的かと思います もちろん、仕事なら基礎知識としてそれらのことは知っておくにこしたことはありません
CSSを利用する目的はなんでしょう??。 　かってHTML3.2あたりまでは、プレゼンテーションをHTMLで行おうとしてきたために、人にはわかるけど、機械には無論、障害者のためのスクリーンリーダーや点字端末、あるいは画像を利用できないユーザーには利用できなくなってしまったからでした。 　そのため1999年勧告のHTML4.01では、文書構造とプレゼンテーションの分離が強く勧められることになりました。 　そのため、文書構造を記述するHTMLは極めてシンプルになりました。 　文書構造はidやclassを使ってDIVで行います。 　『id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 <body> 　<div class="header"> 　　<p class="go_Top"><a href="/">Top</a></p> 　　<h1>タイトル</h1> 　　<div class="nav"></div> 　</div> 　<div class="section"> 　　<h2>本文見出し</h2> 　</div> 　<div class="footer"> 　</div> </body> 参考--HTML5では、より厳密になって <body> 　<header> 　　<p class="go_Top"><a href="/">Top</a></p> 　　<h1>タイトル</h1> 　　<nav>ナビゲーション</nav> 　</header> 　<section> 　　<h2>本文見出し</h2> 　</section> 　<footer> 　</footer> </body> になります。 　これで、検索エンジンにも点字端末にもスクリーンリーダーでも理解できるHTMLができました。パンくずリスト( breadcrumb list http://ja.wikipedia.org/wiki/%E3%83%91%E3%83%B3% … )の一種ですね。 div.header,div.section,div.footer{ width:90%;min-width:640px;max-width:900px; margin:0 auto; } div.header{position:relative;} div.header p.go_Top{ position:absolute; top:3px;right:3px; width:80px;height:80px; background-image:url([画像のURL]); text-indent:-10em; } <p class="go_Top"><a href="/"><img src="[画像URL]" width="80" height="80" alt="トップへ"></a></p> の場合は、 div.header p.go_Top{ position:absolute; top:3px;right:3px; } だけでよいです。SEO的にも差があるわけではありません。 もしこの画像をCSSで変更したいなら、HTMLはそのままで上記CSSに変更すれば良いです。
HTMLの制限ははてなダイアリーのヘルプに書いてあります。（はてなブログに書かれてなかった） http://hatenadiary.g.hatena.ne.jp/keyword/%E3%81 … このページの本文に記されている通り、一部のタグが利用できると書いてあります。 有料版ならば、はてなの著作権表示やヘッダーを消すことができますよね。 サイドバーは設定で追加などができるし、http://e0166.blog89.fc2.com/のようなヘッダーもできると思います。
　ブロック要素は、それが含まれる直近のstaticでない親コンテナブロックの内寸を参照します。 　⇒9.1 視覚整形モデル概論( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 例えばHTML4.01strictでブラウザが標準モードで動作するなら、 <body> 　<div class="article"> 　　<div class="header"> 　　</div> 　　<div class="section"> 　　<div class="nav"> 　　</div> 　　<div class="footer"> 　　</div> 　</div> </body> という文書構造だとします。 スタイルシートは・・ html,body{margin:0;padding:0;height:100%;width:100%;} /* とルート要素の高さを指定しておきます。*/ div.article{ width:80%;min-width:640px; margin:0 auto; min-height:100%;position:relative; padding:5px; } div.article div.nav{ position:absolute; height:100%;width:200px; top:0;left:0; padding:0; } div.article div.header,div.article div.section,div.article div.footer{ margin-left:210px; } くらいでよいです。全文は・・ ★スマホの640px～幅広ディスプレイに対応(ウィンドウ幅を伸縮して確認) ★Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATA入力(右上)で確認済みのHTML4.01strictwです。CSSは2.1 ★class名は、文書構造を示す物にしてあります。 　「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　HTML5にするときは、それぞれ<article><section><header><footer><nav>になります。 　『HTML5 では、文書をよりよく構造化するために、次の要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』 ★目次もページの高さに合います。 ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;height:100%;width:100%;} /* とルート要素の高さを指定しておきます。*/ div.article{ width:80%;min-width:640px;max-width:1000px; margin:0 auto; min-height:100%;position:relative; padding:5px; } div.article div.nav{ position:absolute; height:100%;width:200px; top:0;left:0; padding:0; } div.article div.header,div.article div.section,div.article div.footer{ margin-left:210px; } /* 分かりやすいように色分け */ body{background-color:gray;} div.article{background-color:white;} div.header{background-color:aqua;} div.section{background-color:silver;} div.article div.nav{background-color:yellow;} div.article div.footer{background-color:lime;} --> ＿</style> </head> <body> ＿<div class="article"> ＿＿<div class="header"> ＿＿＿<h1>タイトル</h1> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h2>見出し</h2> ＿＿＿<p>記事・・・・・</p> ＿＿＿<p>記事・・・・・</p> ＿＿＿<p>適当に増やして・・確認</p> ＿＿＿<p>記事・・・・・</p> ＿＿＿<p>記事・・・・・</p> ＿＿＿<p>記事・・・・・</p> ＿＿</div> ＿＿<div class="nav"> ＿＿＿<h2>ナビ</h2> ＿＿</div> ＿＿<div class="footer"> ＿＿＿<h2>文書情報</h2> ＿＿</div> ＿</div> </body> </html>
その線は、<hr/>です。 そのタグの下にimgタグを挿入すればいいですよ。
<p class="msgnews">================ </p> こんな無意味な事↑　↑　↑　はやってはいけません。 　 例えば、下線を背景画像で入れれば良いのでは？ <p class="msgnews"> 『１１カ月後の「脱原発」』という特集記事に野菜デモが載りました。 <a target="_blank" href="img/attaka.jpg">紙面を見る </a> </p> <p class="msgnews">================ </p> まずは、上記の例だと、 <p class="msgnews line-2"> 『１１カ月後の「脱原発」』という特集記事に野菜デモが載りました。 <a target="_blank" href="img/attaka.jpg">紙面を見る </a> </p> と、追加＆削除して、 CSSに、 p.line-2 { background: url("img/画像.jpg") no-repeat 0 100%; margin-bottom: 20px; padding-bottom: 40px; } ---------------- つまり、 １、上記のようなCSSで画像を入れて、その画像のスペースを開ける。 ２、HTML側では、罫線を入れたい <p class="msgnews">～～～</p>の部分を <p class="msgnews line-2">～～～</p>のように設定したCSSのセレクタ line-2を入れてやる。 画像はお好きなように・・・
線をつければいいのでは？ 画像は赤にしてますが、色はお好きなように！
・ワードプレスで作り直してお客に渡したらいいと思います。
ちなみに <footer> 　<div class="linksList"> 　　<div class="savList"> 　　　<h2>あ行</h2> 　　　<ol> 　　　　<li><a href="">あ</a></li> 　　　　<li><a href="">い</a></li> 　　　　<li><a href="">う</a></li> 　　　</ol> 　　</div> 　　<div class="sabList"> 　　　<h2>か行</h2> 　　　<ol> 　　　　<li><a href="">か</a></li> 　　　　<li><a href="">き</a></li> 　　　　<li><a href="">く</a></li> 　　　</ol> 　　</div> 　　<div class="sabList"> 　　　<h2>さ行</h2> 　　　<ol> 　　　　<li><a href="">さ</a></li> 　　　　<li><a href="">し</a></li> 　　　　<li><a href="">す</a></li> 　　　</ol> 　　</div> 　</div> </footer> でしたら footer div.linksList{ display:block; text-align:center; } footer div.linkList div{ display:inline-block; width:28%; margin:0;padding:0; } footer div.linkList ol, footer div.linkList ol li{ display:block; margin:0;padding:0; } とかですかね。 　比較したら分かるように、SEO的にも文書構造からしても圧倒的に先のほうが優れています。
　Webデザイナーを目指しているとPhotoshop,Illustratorは、全くと言っても良いですが無関係です。 　Webとは何か？ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Webの背景をなす基本的な原理は次のようなものである。どこかの誰かが、 ひとたび文書、データベース、画像、音声、動画あるいはある程度まで インタラクティブな画面を準備したなら、もちろん使用許諾の範囲内のことだが、 いかなる国のどのようなコンピュータを使っている誰もが、この画面に対して アクセス可能でなければならない。そして、ほかの人たちが見つけることができる ように、リファレンスすなわちリンクをつくれるようにしなければいけない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［よいウェブページを書こうとする人のためのヒント( http://www.sal.tohoku.ac.jp/~gothit/webauthoring … )］より 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML 4.01仕様書(邦訳)/2.HTML 4の概説/HTMLとは何か?/HTMLの略歴( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　Webデザインとは、そのためにHTMLをきちんと文書構造が分かるように正しくマークアップすること、検索エンジンを含めどのようにユーザーエージェントからも利用できること。を言うのですよ。 　写真やイラストやロゴは、一部の視覚系ブラウザ(media:screen)だけを対象とした、しかも、その素材にしかすぎません。 　きちんと作成されたHTMLを、その文書構造を利用して、スタイルシートを用いて、視覚系ブラウザ用にデザインし行きます。もちろん、スクリーンリーダー用など用のデザイン、印刷用のデザインも必要な場合がありますが、その場合もスタイルシートを使用します。 　視覚系ブラウザに限定すると、ページに写真やイラストやロゴが必要な場合が多いでしょうが、ディスプレイで表示すれば解像度は96dpi/76dpiが標準です。その程度の解像度にPhotoshopは、あまりにも贅沢すぎます。カタログやパンフレットを製作するためにグラビア印刷用の1200dpi以上の写真を加工するとかなら・・(^^)。Illustratorも同様です。目的がロゴやイラストと言うベクトルデータに変わるだけです。 　そうそう、唯一利用価値があるとしたら、クライアントに事前に示すサイトイメージが必要なときは役に立つでしょう。 　本気でWWBデザイナーを目指すなら、そんな枝葉末端の技術ではなく、WEB標準の各技術 ・HTTP　Hypertext Transfer Protocol( http://ja.wikipedia.org/wiki/HTTP ) ・HTML HyperText Markup Language( http://ja.wikipedia.org/wiki/HyperText_Markup_La … ) 　少なくともHTML4.01strict + HTML5は完璧にマスターしておくこと ・CSS 2.1　およびCSS3 ・DOM Document Object Model( http://ja.wikipedia.org/wiki/Document_Object_Model ) ・WCAG Web Content Accessibility Guidelines( http://ja.wikipedia.org/wiki/Web_Content_Accessi … ) 　特に、CSSとWCAG はそれで喰っていくなら必須です。HTMLは当然です。
1の方の回答は誤りで、divのようなブロックレベル要素はwidthを指定しない場合は端から端までの範囲になります。 質問者様が試されたように、display:inline;を指定すれば一応は文字に合わせて変動するようにはなります。 padding等で文字に対しての背景色の範囲を設定しようと思えばdisplay:inline;ではできませんので display:inline-block;を入れるといいです。 ブロックレベル要素に対するinline-blockの指定はIE6で無効になるバグがあります。 スターハックで下記のように指定すれば有効にできます。（ハックは最後の2行） 【例】 div{ 　background-color:#000; 　padding:10px; 　display:inline-block; 　* display:inline; 　* zoom:1; } ブロックレベル要素・インライン要素にはどんなものがあるか、 それぞれどんな挙動をするかなどはcssレイアウトの基本中の基本ですので しっかり勉強して把握する事をお勧めします。
＞ロールオーバーしか方法はないでしょうか？と。 「マウスを画像にのせ」たときに「画像を動かす」という実装は「ロールオーバー」と呼ばれます。 つまりロールオーバー意外に「オンマウス時にどうこう」というのは「概念として」存在しない。 分かります？ というか、自分が説明下手なのを逆ギレしないでくれるかな？
初心者の方のようで・・HTMLの唯一最大の目的は、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　たとえ、それがWindowsユーザー限定と言ってよいサイトであっても、原則は「どんな環境からもWebの情報を利用できるようにすべ」きです。目の悪い人はCtrl+＋でフォントを大きくしてみるかもしれませんし、ウィンドウ幅も様々ですし、メイリオが嫌いな人もいます。 　どのフォントを使用しても、違和感のないデザインにしましょう。 なお、font-familyは、 font-family: "メイリオ", Meiryo, "ＭＳ Ｐゴシック", "MS PGothic", "ヒラギノ角ゴ Pro W3", "Hiragino Kaku Gothic Pro", Osaka, sans-serif; 　のように指定して、最後にgeneric-familyを必ず指定しておきましょう。
<style> html,body{width:100%;height:100%} </style> <form method="POST" action="" style="position:relative;height:100%"> <div style="position:absolute;top:0;bottom:300px;width:100%;"> <div style="height:50%;background-color:red"></div> </div> <div style="position:absolute;bottom:0;height:300px;width:100%;background-color:blue"></div> </form> >２つのdivは異なる親タグにしなければならないのでしょか？ もしかしたら他のやり方があるかもしれませんが、すぐに思いついたのは上のdivを二重にする方法でしたので。 「異なる親タグ」がよくわかりませんが、 position:absoluteなので、実質、親要素はほとんど関係ないです。
普通に area:active{outline:none;} で消えませんか？
No.2です。 ＞まさかマウスをかざしただけで変化するのにはびっくりです。 　それだけじゃないです。肝心なのは、ブラウザの[表示]⇒[スタイル(シート)]で様々なスタイルを選択するとデザインが変わる事です。 　スタイルシートを用いる最大の理由は、文書構造(HTML)とプレゼンテーション(CSS)が独立しているため、スタイルシートを変更するだけでデザインが変えられること。印刷プレビューで分かるように印刷用スタイルとも独立しています。 　複数のHTMLをひとつのスタイルシートでデザインできるため、読み込みの負荷も低減され、HTMLやスタイルシートが簡潔になる事です。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になるということが、経験的に知られている。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　リンク先のソースを見られたら分かるようにHTMLは極めてシンプルで分かりやすいので、将来誰かメンテナンスすることになっても楽でしょう。 　いきなり高度なスタイルシートに挑戦する必要はありませんが、多くの方は学ぶ順番を間違えています。CSSとは、Cascading Style Sheetの略で、Cascadingの仕組みが最大の利点で、「命」と言ってよい部分なのです。 5.セレクタ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 6.値の割り当て、カスケード処理、継承( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　それを知らないとむやみにidやclass名を振って複雑怪奇なHTML,CSSを作ってしまいます。「文書提供コストが高くなり、文書の改訂も難しくなり」何のための文書構造とプレゼンテーションの分離か、わからなくなります。ほんのちょっと変更したいときもできなくなりますし、デザインの変更も難しくなります。 　セレクタやカスケーディングは、決して難しい物じゃなく極めて常識的な仕組みです。例えば p{}だと段落(p)はと言う意味ですし、div.section p{}だと本文(section)ブロック内の段落(Paragraph)はと言う意味になり、後者のほうがより具体的に指定されているため優先される---ということ。 　{}内の書き方は、idやclass名をゴチャゴチャつけようが付けまいが、変わりません。つけないほうがずっと楽ではありますが・・。 　今は、とにかく文書構造のマークアップに専念して、シンプルなHTMLを書くことを練習しましょう。その時にHTML4.01strict(transitinalやframesetじゃなく)に絞ると良いでしょう。簡単ですし、次期HTML5はHTML4.01strictの改訂と位置づけられていますから。 ⇒4.1 定義( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。』 　『推奨しない要素は、HTMLの将来のバージョンでは廃止になる可能性がある。』 ⇒HTML5 における HTML4 からの変更点( http://standards.mitsue.co.jp/resources/w3c/TR/h … )
No.3,4,9,10です。 ＞具体的に私のサイトとどこが違いどこが原因でどう直せばよいのでしょうか？ 　これは忘れてください。 　　特にfloatで並べることは・・。古いサイトにはたくさんありますがね・・ 　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) でチェックされたら分かるように　80点とかじゃなく-30点となる。 　手を加えて、どうこうと言うレベルじゃないです。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　一方、No.3とNo.4を組み合わせたのものもチェックしてみてください。 　ウィンドウ幅を変えても、フォントサイズを変えても利用できるはずです。狭いウィンドウでリンクが下に折り返されても利用できるはずです。 スタイルシートの下記部分を書き直すともっとよいかも div.header,div.section,div.footer{ width:90%;min-width:800px;max-width:1000px; margin:0 auto; } No.10で、 『変わっても、利用しやすいデザインにしましょう。崩れるのではなく、崩れることも目的にするのです。』 　と言いました。 ＞display: inline-block;とはブロック要素をインライン要素に変える（displayの値）ではないでしょうか? 　displayは、その要素がどのようなブロックにするかを指定するプロパティです。 　⇒9.2.4 The 'display' property( http://www.w3.org/TR/CSS2/visuren.html#display-p … ) http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … 　定義上は、インライン要素もブロック要素も、ブロックです。 ※displayの値は、現行のCSS2.1では変更されています。 　inline-block が追加 　compact,markerは廃止されました。 　あなたが、ここ半年挑戦されているのは承知していますが、山に登るのに最初の登山口を間違えて、沢に迷い込んだ状態です。 　一度、原点に引き返して、まっとうな登山口から登られることをお勧めします。そうしないと、同じところで堂々巡りして、時間ばかりかかって昇れません。 　たかがHTMLとCSS、一ヶ月あったらもう少し先に進めたはずですよ。
＞となっている状態ですorz 　それじゃ、文書構造がめちゃくちゃです。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　footer内に画像を表示すると言う事は、その画像は文書構造上もfooter内に、なければなりません。スタイルシートはHTMLやその属性を使用するよりはるかに高度なプレゼンテーション機能を持っていますが、「HTMLの文書構造に反することはしてはならない!!」と明記されています。 <footer> 　<h2>文書情報</h2> </footer> footer h2:before{content:url(./images/abc2.jpg);float:left;} footer{min-height:200px;background-color:yellow;} footer:after{content:"";display:block;clear:left;} もし画像があらかじめ入っているなら <footer> 　<h2><img src="" width="200" height="200" alt="">文書情報</h2> </footer> footer h2 img{float:left;} footer{min-height:200px;} footer:after{content:"";display:block;clear:left;}
見当違いかもしれませんが、IllustratorのドキュメントのカラーモードはRGBになっていますか？ CMYKで製作しているとWEB用に保存した際に色が変わってしまう可能性があります。 ちなみにCMYKからRGBへのコピぺでも多少色は変わります。
1.問題ありません。 2.何色でもOKです。 補色の使用も普通に行います。差し色に補色を使うことは、教科書的な色遣いでもよくあります。引き締まったデザインになります。差し色は少量を使用するのがセオリー。 隣り合った色ばかりだと、無難ですが、平凡な印象ですね。素人には向いていますが、デザイナーがそればかりというのはいかがなものかと。 配色理論を少し学ばれてはいかがでしょうか？
W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … )に書かれているように、 『メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。.』 なのです。 　スタイルシートを導入する前にHTMLをきちんと書けるようにならないと、必ずそのような問題で悩まされることになります。 　必要ないので、詳しい説明は省きますから、おいおい学んでください。 [原因] 　IEは長く独自仕様でユーザーを囲い込んでいたため、ウェブ標準とは異なる解釈をする古いIE用の互換モードを持っています。IEであっても標準モードで動作するようにHTMLを記述すれば、多くの問題は解決します。IEがウェブ標準に方針変更をしたことから、互換モードに対する対応は不要になるでしょう。 [対策] 　HTMLをIEであっても標準モードで動作するDOCTYPEで作成しましょう。いくつかのDOCTYPEがありますが、HTML5の勧告が近いことを考えると、HTML4.01strictで記述するほうが良いでしょう。 　すなわち、 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 　と言う記述が良いでしょう。 　⇒DOCTYPEスイッチ－HTMLの基本( http://www.htmq.com/htmlkihon/302.shtml ) [HTML4.01strict] 　1999年のHTML4.01の勧告以来!!!「HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」とされてきました。 　HTML4.01strictでは、文書構造をHTMLで記述し、その文書構造に基づいてプレゼンテーションをスタイルシートで指定することになりました。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 ★DIVは、HTM5では原則として使わなくなります。その理由はHTML5では「文書構造を示すために新しい要素が追加された」からです。HTML4.01では、 ・ヘッダ,本文,フッタをもつような完結した記事は、<div class="article"></div> ・文書のヘッダにあたる部分は<div class="header"></div> ・本文は<div class="section"></div> ・ナビゲーションは<div class="nav"></div> 　のようにマークアップしなければなりませんでしたが!!HTML5では<heade><section><nav>などが導入されます。 　⇒新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　当然ですが、wrapperとかcontainer、kaijyo、mainのようなclass名ID名は、？？？です。 【サンプル】 　こんな簡単なHTMLとスタイルシートで実現できるはずです。それでいてリキッドデザインですから、スマホのような小さなディスプレイでも超幅広ディスプレイでも利用できるはずです。 　サイズ計算なんてほとんどしなくて良いですし、ブラウザ間の表示誤差も考えなくて良い。(ＩＥ６以前は除く) ・Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# )のDATA入力(右上)で、チェック済みのHTML4.01strict + CSS2.1です。 ・<div class="section"></div>→<section></section>などとするだけでHTML5になります。 　class名やid名をつける参考に ★タブは＿に置換してあるので戻す。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.header,div.section,div.footer{ width:90%;min-width:640px;max-width:1000px;/* 幅を固定したけりゃwidth:960px; */ margin:0 auto; padding:5px 10px; } div.section{ position:relative; min-height:300px; } div.section h2,div.section div.section{ margin-right:260px;/* 右側をあけておく */ } div.section div.section{ width:auto;min-width:0;/* 上書きして */ } div.section div.nav{ position:absolute; width:260px; height:100%; right:0;top:0; } /* ここまで・・以下は分かりやすいように色づけ */ body{background-color:gray;} div.header{background-color:aqua;} div.section{background-color:white;} div.section div.section{background-color:silver;} div.section div.nav{background-color:lime;} div.footer{background-color:yellow;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<div class="section"> ＿＿＿<h3>見出し</h3> ＿＿＿<p>ブロック配置にfloatを使用していないので、記事内でfloatやclearが自在に使える。</p> ＿＿＿<p>HTMLは誰(googleなどの機械も)が読んでも構造が分かる。書くのも楽・・。当然スタイルシートも簡単になる。</p> ＿＿</div> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li>トップ</li> ＿＿＿＿<li>著書</li> ＿＿＿＿<li>自己紹介</li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
<!DOCTYPE html> HTML5のつもりかな？？？ならもっとも基本的なこと!! 　DIVは他に適当な要素がないときの最後の手段です。【原則として使わない!!】 NOTE:Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors.( http://www.w3.org/TR/2012/CR-html5-20121217/grou … ) 著者は、 div要素を、他に適切な要素がないときなど、最後の手段として考えることを強く推奨する。適切な要素を使うことは、読者にとってはアクセシビリティ向上に、著者にとってメンテナンス性の向上につながる。 それによって、HTML/CSSは、下記のように簡単なものになります。 CSSの意味もHTML見なくても、何を指定しているかすぐわかる。 nav ul li:hover{} 　ナビゲーションの子孫のulの子孫のliにhover・・・ 　このくらいなら、差はないけど、大きなページになると、<DIV>や意味のないidやclass名を記述しているとワケワカメになります。 <!DOCTYPE html> <html> <head> <style type="text/css"> nav ul,nav ul li{ list-style:none; margin:0;padding:0; line-height:2em; } nav ul li{ display:inline-block; width:6em; text-align:center; position:relative; } nav ul li ul{ position:absolute; top:100%;left:1em; background-color:rgb(255,200,200); display:none; } nav ul li a{ display:block; width:100%;height:100%; } nav ul li:hover ul{ display:block; } nav ul li ul li{ display:block; } nav ul li:hover{ background-color:red; } </style> </head> <body> <nav> ＿<ul id="menu"> ＿＿<li><a href="#">menu 1</a></li> ＿＿<li><a href="#">menu 2</a> ＿＿＿<ul> ＿＿＿＿<li><a href="#">sub menu 1</a></li> ＿＿＿＿<li><a href="#">sub menu 2</a></li> ＿＿＿</ul> ＿＿</li> ＿</ul> </nav> </body> </html>
　本来は、Photoshopは写真の加工、Iiiustratorはパンフレットやカタログなどで使用するイラストの作成用です。専門分野は、Photshopはビットマップ(ラスター)、Illustratorは、ベクター(ドロー)の二次元コンピューターグラフィックス( http://ja.wikipedia.org/wiki/2%E6%AC%A1%E5%85%83 … )を扱うソフトです。 ・ビットマップ画像( http://ja.wikipedia.org/wiki/%E3%83%93%E3%83%83% … ) ・ベクタ形式( http://ja.wikipedia.org/wiki/%E3%83%99%E3%82%AF% … ) 　それぞれの特徴や詳細はリンク先を見ていただくとして、大きな差はベクタ形式は、拡大や縮小、あるいは変形してもギャザーが目立たないが、複雑な図形や微妙な色合いのものは苦手です。円を描いてコントロールポイントをつまんで引き伸ばすとかは得意です。一方のビットマップ画像を扱うソフトは、選択部分の色調を変えるとかは得意です。 　とは言っても、今は本来の対象を離れて、互いの機能の主だった機能は扱えるようになっています。 　ただ、これらは、本来はWebページのデザインを行う--それを専門とするツールではありません。 　Webで扱える画像は、基本的にはビットマップ(JPEG,GIF,PNG)です。 ・GIF-Graphics Interchange Format( http://ja.wikipedia.org/wiki/Graphics_Interchang … ) ・JPEGほJoint Photographic Experts Group( http://ja.wikipedia.org/wiki/JPEG ) ・PNG-Portable Network Graphics( http://ja.wikipedia.org/wiki/Portable_Network_Gr … ) 　※HTML5以降は、ベクタ形式のSVG(Scalable Vector Graphics( http://ja.wikipedia.org/wiki/Scalable_Vector_Gra … ))が利用できるようになります。 　よって、Photoshopにしても、Illustratorにしても、あくまで、素材を作るツールです。 写真に手を加えて適当な素材を作るならPhotoshopですし、ロゴやイラストを製作するならIllustratorと選択するのが、圧倒的に機能が豊富なため便利です。 　それを、最終的にはWeb用のビットマップデータに書き出すのは、設定さえ間違わなければ、それぞれのツールで良いです。 　一旦ビットマップにすると、それが最終データになり、後からの編集は行えないと考えたほうが良いでしょう。(GIFとPNGは可逆圧縮ですから画質は変化しませんがJPEGは非可逆です。) ★本題です。 　Webデザインとは、これらの素材を作る作業とは、全く別の作業です。!!ここを誤解されていると思います。 　Webとはなにかは、HTML4.01の仕様書の「HTML 4の概説」によくまとめられています。 　2.1.World Wide Webとは何か?( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　2.2.1.HTMLの略歴( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　『HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、・・・』 と、DTPやワープロのデザインとは、全く異なる次元のデザインです。 　もちろん、検索エンジンに内容が正しく伝わるデザイン--マークアップ---も重要なデザイン要素なのです。 　いいかえれば、IE,firefox,Chrome,Operaといった「視覚系ブラウザ」は、そのうちのひとつにしかすぎません。 　いまは徹底的に否定されていますが、かってのtableを用いたような手法、ページ全体を画像処理ソフトで作って、それを切り貼りするようなデザインは、今はされていません。すべきではありません。 　具体的には・・ ・テキストを画像に置き換えて表現する。 ・余白制御のために画像を用いる。 ・ページレイアウトの目的で表を用いる。←PhotoshopやIllustratorで作ってtableで並べる ・HTMLでページを作らずにプログラムに頼る。←PhotoshopやIllustratorで作った物をそのまま利用する。 　14.1 スタイルシートの概説( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )より 　とすれば、PhotoShopやIiilustratorで作成したサイトイメージは、クライアントに完成イメージを伝える用途にしか使えません。どちらを使用しても遜色はないでしょう。 　一方、Webページで使用する素材は、写真でしたらPhotoshop,イラストやロゴはIllustratorというのが原則でしょう。餅は餅屋というように、Iiilustratorで作成したロゴが汚くなるということはありません。もしそうなるとしたら使い方を間違っている。 　具体的な例を挙げておきます。 ★下記のページは、デザインはすべてテキストエディタを使っていると思われます。すなわち、HTMLとスタイルシートはテキストエディタでないとあのようには書けないでしょう。 　しかし、それぞれの素材は写真はPhotshopなどの写真を処理するツールで、ロゴやイラストはIllustratorなどのベクタ画像処理ツールで作成されていますね。 　そして、ブラウザの[表示]メニューから[スタイル(シート)]を選択することで、デザインは全く変わります。印刷イメージもまた異なります。 　それでいて、スタイルシートを「選択しない」で表示される姿が検索エンジン用のデザインと考えられます。 ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … )
背景画像を『バックグランドイメージ』にすると『一部』では無く全体に成ります。 HTMLコードの layer4 {position: absolute; top: 0px; left: 410px; height: 600px; width: 200px; padding: 0px; margin: 0px; z-index: 2} z-index: 1・・・・Xを使えば『重なり順序』を変更する事が出来ます。
補足いただきましてありがとうございます。 いただいたCSSを元にHTMLを作成してみたのですが、 <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitio … <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"> <head> <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /> <meta name="keywords" content="" /> <meta name="description" content="" /> <title></title> <style type="text/css"> <!-- #top { margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; padding-top: 70px; background: red; } #work { width: 840px; margin-top: -70px; margin-right: auto; margin-left: auto; padding-top: 70px; background: green; } #contact { width: 840px; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; padding-top: 70px; background: blue; } --> </style> <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.9. … <script type="text/javascript"> $(function(){ $('a[href^=#]').click(function(){ var speed = 500; var href= $(this).attr("href"); var target = $(href == "#" || href == "" ? 'html' : href); var position = target.offset().top; $("html, body").animate({scrollTop:position}, speed, "swing"); return false; }); }); </script> </head> <body> <div id="top">top</div> <div id="work">work</div> <div id="contact">contact</div> <div style="background: pink; height: 2000px;" ><a href="#top">to top</a><br /><a href="#work">to work</a><br /></div> <div style="background: yellow;" ><a href="#top">to top</a><br /><a href="#work">to work</a></div> </body> </html> このHTMLだと私の環境では、きっちりと各タグの先頭にページ内リンクできました。 （FireFox 最新版、GoogleChrome最新版、IE7～10） この動作がshiopple様がお考えの挙動と相違無いとすると、 ヘッダーを固定するスクリプトと何か干渉している可能性がありますでしょうか・・・？？(・・；) 可能であれば、現状のHTML、Javascript、CSSなどをもう少し仔細にお伝えいただければ、 解決の糸口を示すことができるかもしれません。 ご確認の程、何卒よろしくお願いいたします。
http://fw.v-colors.com/ http://fw.nijyuman.com/201106/tool_panel1/ 検索するといろいろ出てきます。 これらを観たり、本を読んだりするより、知ってる人にやりたいことを相談して教えてもらうのが一番早いでしょう。 その後でこれらを見ると非常に理解が深まります。 バージョンによって、機能や操作方法が結構違うので気を付けてください。
＞以下のようなhtmlを書いています。 　HTMLと大文字で書きましょう!!(Hyper Text Markup Languageの略です) 　ありえない、HTMLです。liは、<ol>ないし<ul>内にしかおくことができません。ブラウザは何とか表示しようと前後に<ol>などを追加して解釈しますが、その解釈は決められていませんから、期待通りにならないことが多いです。 『メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。.( http://jigsaw.w3.org/css-validator/#validate_by_ … )』 　まずHTMLを書いたら 　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) 　のDATA入力(右上)などで、HTMLが正しいことをチェックしてからスタイルシートを書きましょう。 ＞このhtmlの直下にdivで囲ったブロックを入れると、 　htmlの直下には、headとbodyしか入りません。 html 　|-- head 　|　　|-- title 　|　　|-- meta 　|　　・・・略・・ 　|-- body 　|　　|-- ul 　|　　|　　|-- li 　|　　|　　|　　-- div　liにはdivを含むことが出来る。 　直下とは、DOM構造上の樹構造の直系の子孫と言う意味です。 ＞divで囲ったブロックを入れると、 　divは意味のないブロックですが、<p>やtableと同様ブロック要素ですから、そのような差が出ることは考えられません。他の部分で間違っている。 <li class="a"><a h 　のようにいちいちclassをつけるべきではありません。例えばナビゲーションブロックのulにおけるli要素でしたら div.nav ul li{} 　で簡単に選択できるはずです。 　いずれにしても、スタイルシートの前に、正統なHTMLが書けるようになったほうが、はるかに早道ですよ。
参考：http://help.fc2.com/blog/manual/Home/template/te … プラグインを表示したいところに まず <!--plugin--> <!--/plugin--> を書きます プラグインが有効になると<!--plugin-->～<!--/plugin-->が表示されるようになります プラグイン１を表示したい場合 <!--plugin--> <table border="1"> <!--plugin_first--> <tr> <td><%plugin_first_title></td><td><%plugin_first_content></td><td><%plugin_first_description></td> </tr> <!--/plugin_first--> </table> <!--/plugin--> こうすればプラグイン１が表示順毎に テーブル１行に１つ 繰り返し表示されます あとはデザインセンスです
＞普通に枠線の表示を指定するとレイアウトが崩れてしまったため、 　これは、要素のサイズはpadding辺の内側とされているからです。 　width:100pxと指定してあるブロックのpaddingが10px,borderが20pxだとborderの外側は、100px+2×10px+2×20pxとなるからです。 　この場合border-color:transparentで透明色を指定しておかなければならないですね。 ＞画像の周りを全て枠線で囲みたいのですが、 　だとしたら、「borderは画像(img要素)」につけなければならないですよ。IEにはバグがあってa要素すべてに枠がつきません。 a[href="image/press_06.jpg"]{ margin: -2px; } a[href="image/press_06.jpg"] img{ border: solid 2px transparent; } a[href="image/press_06.jpg"]:hover img{ border-color:red; }
そういう便利な機能ブラウザは、Firefoxですよ！ ここでIEの利用方法を質問しても、ヘビーユーザーはIEを利用しないから回答がつかないかもしれません・・・ Firefoxを入れて、 http://www.mozilla.jp/firefox/ アドオン： stylishで https://addons.mozilla.org/ja/firefox/addon/styl … CSSを設定 @-moz-document domain(ドメイン～～.ＣＯＭ) { a:visited{color:red !important}} IEを一般的に利用しておいて、 ご希望状態にしたい時に、Firefoxを利用すれば良いでしょう。
すみません。理解が不足しておりました。以下でよろしいでしょうか。 ｂ画像は最初は非表示　→マイナスの数値で画面からはみ出させる ｂ画像が重なったら処理は終了　→　Henkou2は不要 <html> <head> <title>オンマウスで画像表示を入れ替え</title> <script type='text/javascript'> function init(){ document.getElementById('id1').style.position = 'absolute'; document.getElementById('id1').style.top = '50px';　//１枚目の画像の最初の位置 document.getElementById('id1').style.left = '50px';　//１枚目の画像の最初の位置 document.getElementById('id2').style.position = 'absolute'; document.getElementById('id2').style.top = '-2000px';　//２枚目の画像の最初の位置 document.getElementById('id2').style.left = '-2000px';　//２目目の画像の最初の位置 } function henkou1(){ document.getElementById('id1').style.zIndex = 1;　//１枚目の画像表示を下 document.getElementById('id2').style.zIndex = 2;　//２枚目の画像表示を上 document.getElementById('id2').style.top = '100px';　//２枚目の画像位置 document.getElementById('id2').style.left = '100px';　//２目目の画像位置 } </script> </head> <body onload='init()'> <div id='id1'><img src='aaaa.jpg' onmouseover='henkou1()'></div> <div id='id2'><img src='bbbb.jpg'></div> </body> </html> まだ間違っていたら言ってください。
floatボックス（ご質問では LI）で幅を指定しない場合、幅は子ボックスの幅で決定されます（IE6等の旧いブラウザを除く）。 ご質問の 3つの floatボックスのうち、最初と最後のものはそうなっているのですが、真ん中の floatボックスの幅は、2つの インラインボックス（img、iframe）が横に並ぼうとするのが原因で、ご希望の幅である 560pxを超えています。 そのため、3つの floatボックスを横に並べると親ボックスの幅を超えるため、縦ならびになってしまいます。 floatボックス（LI）に明示的に幅を指定すれば、ほぼ正常な表示になります。 また、#header li img,　#header li iframe {display: block;} を CSSに追加しても同様の結果が得られます。
firebugでソースとcssを確認すると解決すると思いますよ。
フォルダ構成に問題があるかもしれません。 たとえば6行目の 　<link href="css/bootstrap.min.css" rel="stylesheet"> という記述は「cssフォルダの中のbootstrap.min.cssを参照してね」という指示なので、 この通りの場所にbootstrap.min.cssが存在しないとこの指示は無視されます。 フォルダ構成は以下のようになっていますか？ / ├test.html ├cssフォルダ │└bootstrap.min.css └jsフォルダ 　└bootstrap.min.js
　あります。 　実務経験を積めば、ある程度自由がききますね。 　ただ営業に出る時は、私服でも（ユニクロ的な）フォーマルな感じが好まれますので、フォーマルなオシャレにしておいた方がベターでしょうか。 　メンズエッグとかそっち系の制作部とかだとチャラ男くんぽくても大丈夫な場合もあります。
viewportのwidthを625pxにしてみてはいかがでしょうか。
補足について。 VMware Fusionでうまくいかなかったのなら、Parallels Desktopも一度試してみてはどうでしょうか? 無料試用期間があるので、試してダメだったらやめる、ということができます(既に試していたらすみません) 別PCからのアクセスについては、MacのWeb共有を有効にして、サーバーとして使うのはどうでしょうか? OS10.8からは、ちょっと面倒になりましたが、「Mac Web共有」でやりかたを見付けることができます。 それより前のバージョンだと、システム環境設定から有効にできます。
＞ＰＣから閲覧するとちょうどよいのですが、 　font-sizeを指定している。・・・どんな方法で？ 　マルチユーザーエージェント対応ならfont-sizeはすべて相対サイズで指定されているはずなので、そうはならないはずですが？？ 　どこかで、pt,ps,inchi,mm,pxなどの絶対サイズで指定しているのではないですか？ pxはCSS2.1で絶対サイズに訂正されました。
#3です。 じゃあJavaScriptでしょうね。 一応属性値セレクタというやつで table, table * { 　border:solid #FF0000; } table[border="0"], table[border="0"] *{ 　border:none; } みたいなこともできますが（IEも7から対応）、おそらく太さはHTMLで指定したままにしたいのですよね？ CSS3なら「borderが0でないtable」の指定はできますがCSS3はまだ早いですし、 冗長になっていいなら table[border="1"],table[border="1"]*{ } table[border="2"],table[border="2"]*{ } とできますが、JavaScriptで全tableのborderの値を取得してスタイルを設定するほうが最終的には早いと思います。
＞で、サンプルを見て考えても、なぜこれで上手く表示されるのかが、現在自分では理解できていません。 　そのような時に役立つものがあります。 firefox とアドオン Firebug( https://addons.mozilla.jp/firefox/details/1843 )を使います。 　firebugを起動すると、左下にHTMLソースが表示され、右下にスタイルシートのソースが表示されます。 　スタイルシート側で禁止マーク(○に／)でスタイルを無効にすると、それがどのような作用をしているかすぐ分かります。 　他にも、 Html Validator( https://addons.mozilla.jp/firefox/details/249 )とか、開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )がたくさんあります。 ＞サンプルを見て考えても、なぜこれで上手く表示されるのかが、現在自分では理解できていません。 　スタイルシートの仕様書に Property index( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　があります。それを見てはコツコツと・・ 　私も独学です。教室とかだと、どうしても必要な情報以外も付き合わなきゃならないので・・(^^) ＞これが、幅を固定させないリキッドというものでしょうか。 　そうです。 　最近は様々な利用者のディスプレイ幅に合わせる必要がありますから・・・。 　慣れたら楽です。 　将来的にはmediaqueryというHTML5/CSS3の機能を使って、デバイスの幅でスタイルシートを切り替える手法を・・・・先でよいです。
デフォルトだから・・・ 好みの問題 ３番は、かなり古そう(Copyright (C) 2000 - 2004 )という事で、当時は普通だった。 １番のサイト、本家はかなり凝った作りのようですけどね。 本人に質問してみたら？
<nav>要素を使われていることから、HTML5だと思います。その場合は、 <doctype html> になります。これで、ほとんどのブラウザは標準モードで動作しますので、ブラウザによるレンダリングの差はなくなるはずです。 ★HTML5では、原則として<div>要素は使いません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Note:Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable. Use of more appropriate elements instead of the div element leads to better accessibility for readers and easier maintainability for authors. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.5 Grouping content — HTML5( http://www.w3.org/TR/2012/CR-html5-20121217/grou … )］より 　著者は、 他に適切な要素がないときなど、最後の最後の手段としてDIV要素を使うよう強く推奨する。DIV要素でなく適切な要素を使うことによって、読者にとってはアクセシビリティ向上に、著者にとってメンテナンス性の向上につながります。 　HTML4.01(1999年)でもすでに「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」と書かれていたのですから、<div id="wrapper">も好ましくはありません。 　この場合、<article>でしょう。なくても良いはずです。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　標準モードでは、サイズはpadding辺の内側です。 　⇒8.1 ボックスの寸法（Box dimensions）( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　リストは、各項目を字下げしてレンダリングするブラウザが多いのですが、それにpaddingを使用するかmarginを使用するかはブラウザによって異なります。 　この場合 nav ul,nav ul li{ list-style-type:none; margin:0;padding:0; } とそれらを消してから、改めて指定すると確実です。 最近のように、スマホやタブレット、幅広ディスプレイと様々な端末が想定される場合、固定ではなくリキッドでデザインするほうが良いですし、楽です。 <body> 　<header> 　　<nav> 　　　<ul> 　　　　<li><a href="#">about</a></li> 　　　　<li><a href="#">information</a></li> 　　　　<li><a href="#">party</a></li> 　　　　<li><a href="#">access</a></li> 　　　　<li><a href="#">contact</a></li> 　　　</ul> 　　</nav> 　</header> header,section,footer{ 　width:980%;min-width:640px;max-width:980px; 　margin:0 auto; } header nav ul,header nav ul li{ 　list-style:none; 　display:block; 　text-align:center; 　margin:0;padding:0; 　line-height:2em; } header nav ul{font-size:5px;} header nav ul li{ 　display:inline-block; 　width:18%; 　border: 1px #ffb366 solid; 　position:relative; } header nav ul li a{ 　display:block; 　width:100%;height:100%; 　text-decoration:none; } 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … )
Perlか何か使ったら?? use strict; use warnings; my @all_files = glob "*.html"; my @new_files; while(<@all_files.){ my $count = 1; my $b = sprintf("%03d",$count); open (IN,$_); open (OUT,"./new/$_); while(<IN>){ s/<h2 class="002">/$&$b/g/g; $count ++; push(@new_files,$_); } print OUT $_; close IN; close OUT; } とか・・・テストしてません。間違いあるかも・・ 　ウェブ開発をするなら、CGIなどでPerlは必須!!ですので、お持ちだと思います。 　ところで、class="class002"ってなんです。div.section h2{}とか、セレクタで指定できると思いますが・・・
NO なる訳がない・・・ 大手プロバイダ系のレンタルスペースなんて、複数者のアカウントで、 そのようなサブページ的ディレクトリ構成が多いのだから、他人のサイトに影響するような事はないです。 個人的な見解としては、 １者でのドメイン内の構造で、そのようなページを削除依頼する事は、 そのドメインに対して、悪い影響は与えないにしても良い評価は与えないでしょうね。 削除依頼するようなサイトは、不完全なサイトって認識だと思います。 （あくまで個人的見解です。Googleの評価は未知ですから） そのディレクトリからの被リンク効果（評価）などもあったとしたら評価は下がるという事もあります。 ----------------- /fuga/が削除される事はないです。
＞現在ルートディレクトリは ＞/www/test_hoge/ 　 はて？？ ttp://www.～～　のアクセスを想定しての転送だから、 その辺を認識というか把握できないと進めませんよ。 貴方しか方向性は知らないのだから。 Redirect 301 /test_hoge/ http://www.○転送先○.com/ とか Redirect 301 / http://www.○転送先○.com/ って話だろうか？ まずは、別のソースを書いて.htaccessが機能しているか試す事から・・・
ウソウソ・・・ canonical属性は、 検索エンジンに対して、正規化の「道しるべ」であって、301リダイレクトではありませんよ・・・
＞「a」から「z」、「あ」から「ん」の中から単語の頭文字を選んで次のページに行くようなナビゲーションを使ってます。 ＞次のページには選んだ頭文字から始まる単語を並べています。 ＞今はプルダウンメニューのような感じでナビゲーションを実装していますが、 　御自身はわかってらっしゃるのでしょうが、さっぱり分かりません。 　プルダウンでしたら、次のページに行かなくてもその場で選択できるでしょうに？？？ ＞使いやすくて素敵な 　デザインは、自分のナビゲーションメニューと他人のそれとは異なるので、そのまま移植と言うのは難しいでしょう。判断基準も人様々ですし・・・。イズレニシテモ、本人の美的センスが基本でしょう。その上で、色々なサイトのデザインを手本に自分でデザインしていくしかないです。 　ナビゲーションメニューが、きちんとマークアップさえされていたら、どのようにもデザインできるはずです。 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　上記で、ブラウザの表示メニュー⇒スタイル(シート)で様々なスタイルを選択すると、言っている事が分かるかも。(Chromeは代替スタイルシートを選択できないので、firefoxか、IE9以降で）
「Blogger template error variable」で検索したら、次のようなサイトがヒットしました。 http://blogger.kuribo.info/2006/02/blog-post.html 次の記事の翻訳だそうです。 http://www.blogdoctor.me/2007/01/error-messages- … また「Blogger template variable」で検索すると、次のような解説も見つかります http://www.bloggerguide.lk/2008/05/template-vari … これらによれば ・<Variable ～>で定義されていない $～ が使われている ・その$～ は 「side bar textcolor」である。(変数名にスペースが使える?) ということだと思われます。 修正方法はテンプレートをよく見て ・Variableを適切なものにする。必要なら追加する ・$～を、Variableで定義されている適切なものにする のいずれかになります。
No.1です。1000文字制限で書けなかったので ＿＿＿<ol id="contentTable"> ＿＿＿＿<li><a href="#CHECK">ご注文完了まで</a></li> ＿＿＿＿<li><a href="#NAME">お客様情報の入力</a></li> ＿＿＿＿<li><a href="#TEL">電話番号の入力</a></li> ＿＿＿</ol> は、 ＿＿＿<ol id="contentTable"> ＿＿＿＿<li><a href="#CHECK"><img src="http://img14.shop-pro.jp/PA01143/396/etc/botan1. … width="206" height="42" alt="ご注文完了まで"></a></li> ＿＿＿＿<li><a href="#NAME"><img src="http://img14.shop-pro.jp/PA01143/396/etc/botan2. … width="206" height="42" alt="お客様情報の入力"></a></li> ＿＿＿＿<li><a href="#TEL"><img src="http://img14.shop-pro.jp/PA01143/396/etc/botan3. … width="206" height="42" alt="電話番号の入力"></a></li> ＿＿＿</ol> のほうが、企業サイトでは後方互換を考慮すると良いと思います。
No.3です。 ＞今までのレイアウト無視して設定できますか？ 　ずばり可能です。というか、そのために「構造とプレゼンテーション( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」を分離して、スタイルシートを使うのですから!! 　そのための必須として、HTMLに文書構造を正しく、そしてそれしか書いてないことが条件です。 　HTMLにデザインに関わることが書かれていたら無理な場合が多いです。 ★デザインは、必ず文書構造に基づくものです。 　「本文の目次」が、他のfooterなどにあるわけないですから、footerに書かれている目次を本文内にデザインすることはありえないと言うこと。 　文書構造だけが正確に書かれていたら、文書構造に反しない限り、好き勝手にデザインできます。
いわゆるajaxです。 　⇒Ajax - Wikipedia( http://ja.wikipedia.org/wiki/Ajax )
＞CSSがおかしいのだと思います。 Ａ おかしい訳ではなく、 方向性によって違うのだから、見せ方に正解はないです。 スマホ側の仕様です。 ディスプレイの幅で見せる、いや、読ませる為ですよ。 iOS系以外もだけどね。アンドロイドとか。 body{ -webkit-text-size-adjust:100%; } meta viewport も調べると面白いかも。
＞「４つのボタンを等間隔で横に並べる。」という内容は、どのように伝えるべきでしょうか？ 　というより、全体のイメージを３～４つの形で伝えると同時に、それぞれに書きべき内容(テキスト)、画像、ロゴ、フォントなども伝えます。 ・サイトのトップ(ホーム)のデザイン ・各カテゴリーのトップデザイン（上と同じでよいかも） ・メインコンテンツのデザイン ・会社情報(理念・歴史・社長挨拶・紹介・問合せなど) 　それによって、HTMLのマークアップをしてもらいます。この時点では具体的なデザインはありません。そのようにデザインできる文書構造を決めます。 　その間に、平行して具体的なデザイン案を検討します。それぞれの文字数や内容によって実用的なデザインは決まっていくでしょう。 ・配色　企業カラー ・フォント　ロゴ ・メインコンテンツで使用する画像の用意 　基本的には、上の例で行くと３～４パターンの内容とそれぞれについて、数パターンデザインが固まっていくでしょう。一度のやり取りで終了することはありません。 　ユーザーが混乱しないように、可能な限りイメージやデザインや配色は統一します。ユーザーインターフェース(リンクの色とかは、個人のサイトならともかく企業サイトではデフォルトから弄ることはありません) 　徹底的にこの３(４)パターンを練り上げていきます。以後、それがテンプレートになります。 　デザインは、最終的にひとつに絞られることが多いですが、公共機関や幅広い利用者を想定してくる会社では、代替スタイルシートや、スマホやテレビ用にまったく異なるデザインを求められる場合もあります。また印刷が想定されるページについては印刷用スタイルシートを求められる場合もあります。 　そのため、純粋にHTMLだけ最初につくると反って非効率になります。いくつかのデザインも決めながらHTMLも書いていきます。 ＞・データに書き込む、 ＞・別途打ち合わせをするなどして口頭で伝える、 ＞・メールか何か文章で伝える、 　実際に、仮のサイトを作ってそれを見ながら、メールや電話でやり取りすることが多いです。 　最終的にはプレゼンテーションの機会を設けます。 　その後は、ひたすらテンプレートにデータを流し込むことになります。(大きなサイトでは動的に作成しますから、データベースなりXMLにデータを入れるだけですから、バイトの子でもできます) 　言い換えれば、資料(テキストと画像)とデザインを渡して、「ハイ、出来上がりました。」と言うことはないです。お互いに不満が残りますからね。 　想像できますように、ちゃんとした制作会社でしたら、そこまでの手をかけますから費用も高くなりますし、それに対処するノウハウも持ってます。 　そうでない場合は、安価ですが互いに不満が残るものになるでしょう。 　全体を拝見するところ、技術があれば、あなたがデザインされたと寸分たがわぬデザインも出来ますが、それは、小さなウィンドウで見ると横スクロールが必要だったり、フォントサイズが変わると崩れたりと、必ずしも望ましいデザインではないでしょう。 　利用されているのがＥＣサイトとのことですが、デザインが完璧にあわせられない要因は、技術もありますが、使用しているシステム(CMS-- http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3% … )の制約もあるのではないかと思います。 　同じECサイトの他社のデザインを比較すると、どこまでが可能でどこまでが不可能化の目安は立ったと思います。 　いずれにしても、先方との意思疎通が足りないのではないかと思います。 　
互換表示にしないこと!!鉄則です。 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　互換表示は、ブラウザごとに異なる仕様であった(特に古いIE)用に作られたページを見る目的、および古いブラウザ用の指定です。 ・DOCTYPEを、どのブラウザでもウェブ標準/標準モードで起動するように書いておけば、ブラウザの差はほとんどなくなります。 ・作成されているHTMLの書式が分かりませんが、HTML4.01strictでしたら、すべてのブラウザが標準モードで動作するには <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> になります。Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html )のDATA入力(右上)を使ってチェック。 　他の仕様もありますが、HTML4.01strictで学ばれたほうが良いでしょう。 ・次期HTML5はHTML4.0strictの改訂版であること ・「HTML文書を作る場合には、・【中略】・strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　さて、本題ですが、下記のように記述すると良いはずです。説明はスペースが無駄なのでHTML内に書いておきました。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.header,div.section,div.footer{ width:80%;min-width:480px;max-width:900px; margin:0 auto; } h1,h2,h3,p{margin:0 10px;line-height:1.6em;} p{text-indent:1em;} div.section{position:relative;min-height:400px;} div.section h2{display:none;} div.section div.section{ min-height:0; min-width:0; margin-left:162px;width:auto; border: 1px solid #C0C0C0; } div.section div.nav{ font-size:0.9em; position:absolute; top:0;left:0; width:160px;height:100%; border: 1px solid #C0C0C0; } div.nav ul{margin:0 2px;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<div class="section"> ＿＿＿<h3>説明</h3> ＿＿＿<p> ＿＿＿＿IE7以上、他のモダンブラウザで同じように表示されるはず(IE7はheight:100%が利かない)。またリキッドデザインですのでスマホでも幅広ディスプレイでも利用に制約はないでしょう。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿HTML4.01では、<q><a href="http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 …構造とプレゼンテーションの分離</a></q>が叫ばれながら文書構造を示す要素が不足していたために、<q><a href="http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 …属性及び class属性と併用することで、文書に構造を付加する</a></q>とされていましたが、これは理解されたとは言いがたく、&lt;div id="outline"&gt;、&lt;div id="main"&gt;のように、idやclass名が文書構造ではなく、プレゼンテーションのために使われていました。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿HTML5では、この反省から、文書構造を明確にするために、文書構造を示す要素が追加されました。⇒<a href="http://standards.mitsue.co.jp/resources/w3c/TR/h … 新しい要素</a> ＿＿＿</p> ＿＿＿<p> ＿＿＿＿このサンプルでは、文書構造を示すためにclass名にHTML5の新しい要素名を指定し、<em>その使い道もHTML5のそれに合わせてあります</em>から、&lt;div class="header"&gt;は&lt;header&gt;に、&lt;div class="section"&gt;は&lt;section&gt;に&lt;div class="nav"&gt;は&lt;nav&gt;、&lt;div class="footer"&gt;は&lt;footer&gt;に、それぞれ書き換えるとHTML5になります。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿なお、段落は、&lt;br&gt;必ず&lt;p&gt段落&lt;/p&gt;(pはparagraph(段落)を示す要素)でマークアップするようにしましょう。日本語のように文字の大きいフォントで段落を字下げで示す場合は、スタイルシートで行の高さやtext-indentを指定します。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿folatは、本来画像の周囲にテキストを回りこませる目的のプロパティで、この様な段組には適していません。⇒9.5 浮動体（Floats）( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ＿＿＿</p> ＿＿＿<p> ＿＿＿＿例えば左右を変更したり、３つ以上の段を並べ変えたり、本文中にfloatさせたい画像が現れたりすると厄介なことになります。絶対配置のほうがデザインの自由度は増しますし、文書構造がデザインに引きずられることもありません。 ＿＿＿</p> ＿＿</div> ＿＿<div class="nav" id="contentTable"> ＿＿＿<h3>目次</h3> ＿＿＿<ul> ＿＿＿＿<li><a href="http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … 4.01仕様書[邦訳]</a></li> ＿＿＿＿<li><a href="http://standards.mitsue.co.jp/resources/w3c/TR/h … における HTML4 からの変更点</a></li> ＿＿＿＿<li><a href="http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … 邦訳</a></li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2013-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2013-07-18 18:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
その場合は、 background-size:contain; /*横がはみ出しますが図は変形しない*/ もしくは、 background-size:100% 100%;/* 図を変形してあわせる */ ですかね。 なお、CSS3の機能ですからbackgroundの一括指定ではなく。background-sizeと個別に後から指定したほうが良いでしょう。 　後方互換を考えるならIMGで配置して、display:blodkと合わせて指定する必要があることもあります。 　そのあたりは臨機応変に
お疲れ様です。 　困ったクライアントですね。 　基本的にはありません。なぜなら、ページに表示された時点でそのパソコン内には画像があるのですからね。 　firefoxのアドオンにPage Saver( https://addons.mozilla.jp/firefox/details/10367 )がありますが、それで画面自体をキャプチャしてしまえば・・ 1. 透明gifで本体の画像をカバーする 　ページを保存してしまえば、いとも簡単に 2. JavaScriptで右クリックをさせなくする 　コンテキストの変更は最近のブラウザでは停止できます。 　これはユーザーに対して最もイメージダウン効果が高いです。 　　見難いのでちょっとサイズを大きくなんてのも出来なくなる。 3. html本体ではなく、CSSに画像を添付する ★はっきり言うと不可能です。 　私は、逆にクライアントを説得します。 ・ウェブと言うものは、『自分の知識や考えを共有させることが、他人の知識を 学ぶのと同じくらいに容易であるようなシステム( http://www.sal.tohoku.ac.jp/~gothit/webauthoring … )』として開発されたもので、HTMLなどの技術自体も誰でも自由に使えるものであること。その恩恵を受けながら、自分の物はだめと言うのは、逆に訪問者に対して企業イメージを大きく損なう ・著作権などで問題があるなら、それを解決すること ・高画質や他に流用されたくない画像は載せない。 　　ディスプレイの解像度なんて96dpiとか、印刷(最低でも200dpi)してもきれいには印刷できない ・サムネイルや荒い画像で代替して、必要な場合はパスワードを設定した圧縮ファイルで配布 　そんな画像はウェブには掲載しないでください。ときちんと理屈を説明して説得すること。企業イメージを大きく損ないますよと 　今まですべてのクライアントには納得していただいています。
本を買わなくても こういうのはどうでしょう？ Photoshopでコーディング http://css-happylife.com/archives/2012/1013_0106 … Webサイトの作り方のまとめ！デザイン制作からコーディング手前まで。 http://lopan.jp/how-to-make-website/ 参考URL：http://css-happylife.com/archives/2012/1013_0106 …
　グリッドレイアウトと言う考え方は、極めて古い勝手のtableでの配置を想定される手法で最近は見かけなくなりましたね。 　そもそも何をどのように表示したいかですが。 [例] <section> 　<section></section> 　<section></section> 　<section></section> 　<section></section> 　<div id="tableContent"> 　</div> </section> 　にて、目次を左において、右側に枠を置いてそこに各項目を表示するとかですか
> WORDPRESSでトップ > ページのみデザインして、その他の商品ページに関しては > 従来通りホームページビルダーで作ろうかなと思っている > のですが、こういう使い方って可能でしょうか？ このような使い方は出来なくはないですが、向いていません。 > デザインがあまり上手でなく、ＷＯＲＤＰＲＥＳＳだとテンプレートを > 使って比較的簡単にキレイなサイトができると聞きました。 Wordpressには無料で公開されているテンプレートが多く、それを利用すれば確かに簡単に綺麗なサイトが出来る、とは言えますが、 それを改造したり「デザインする」事は普通のサイト構築よりもはるかに難易度が高いです。 ある程度はphpを把握している必要がありますし、初めての方なら、無数にあるファイルのどこをいじればいいかすらわからないと思います。 Wordpressはブログシステムですので、テンプレートもトップページには当然記事一覧が表示されるものがほとんどです。 デザインを全く変えないとしても、記事一覧の削除やナビゲーションの変更は必要です。 記事一覧が無くなった場所に置くコンテンツも作る必要があるでしょう。 これは慣れていない方には骨の折れる作業です。 Wordpressは記事作成やパーツごとの管理、サイト内の連動が強みのツールですので それを利用せずにトップページのみWordpressで、というのは全く意味が無いように思います。 また、検索機能を使うなら、トップとそれ以外のページの文字コードが異なると文字化けします。 WordpressはUTF-8ですが、例えばショッピングサイトのシステムがEUC-JPだったとすると、検索は使えません。 「Wordpressでデザインする」のはそもそも目的が違うと考え、 好きなテンプレートがあったら、それを参考にデザインを考えるなどして 普通にhtmlでトップページを作成する事をお勧めします。 WordpressとMovable Typeはどちらもブログ構築システムで 使い勝手は違えど目的は同じです。 大きく違うのはMovable Typeは有償だという事です。 個人利用は無償ですが、商品数1000点のショッピングサイトなら、無償利用は無理でしょう。
＞html勉強中のものです。 　<abbr title="Hyper Text Markup Language">HTML</abbr>ですよね。 　DOCTYPEを<doctype html>とされているところから、HTML5を想定されているように見受けます。HTML5は膨大な内容を含んでいます。その前にHTML4.01strictを身につけたほうが効率的です。 ★floatは挿絵などの周囲にテキストを回りこませるためのプロパティです。 　ブロックの配置にも使うことがありますが、目的が違います。 ★DIV要素があちこちで使われていますが、その使い方は(HTML4.01の時代から!!)誤りです。 　HTML4.01『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　HTML5『Authors are strongly encouraged to view the div element as an element of last resort, for when no other element is suitable.( http://www.w3.org/TR/2012/CR-html5-20121217/grou … )』 　　要はDIVは適切な要素がないときの最後の手段として使え!! 　　そのときは文書構造が分かるclass名などをつけろ!!(float left ccなんてのはダメ!!) 　ということ． 　なぜ、この様な質問の回答らしからぬことを書いているかと言うと、文書構造がさっぱり分からないため、何をされたいかが全く見えてこないのです。 　もし、HTML5だと下記のようなものになり、その上で、 ・本文(section)内の見出し(h2)の左に画像を配置したい。 ・全体(header,section,footer)をページの中央に配置したい 　　最小640pxで最大900px内でウィンドウ幅の90%程度 にしたい場合は？？？ と、誰が読んでもしたいことが分かる．それが分からない。 <!doctype html> <html> <head> <meta charset="Shift_JIS"> <title>Director Blog</title> <style media="screen"> <!-- --> </style> </head> <body> <header id="TOP"> <hgroup> <h1>Director Blog</h1> <h2>Why not?</h2> <nav> <ul> <li><a href="#">Some</a></li> <li><a href="#">navigation</a></li> <li><a href="#">links</a></li> </ul> </nav> </header> <section> <h2>Miyuki Yamanaka</h2> <p> Photographing and questioning. </p> <p> Miyuki is a Japanese photographer. Her inspiration comes from the mundane scenes, which often relates to nostalgia and obsolescence. </p> <p> She explores the themes of existence, death, time, constancy and family through her work. </p> Her project THE LINE is a collection of photographs about a road markings, about a documentation of visual landscapes, about infinite and inspiring graphic resources, about the way of looking at world. What we all see is the same, but how we understand it is various and that is the way of making your visual journey in daily life different. </p> <aside> <h3>Something aside</h3> </aside> </section> <footer> <h3>A nice footer</h3> </footer> </body> </html>
まずは、簡易検証 <p style="font-family: arial,helvetica,osaka,"MS PGothic",sans-serif;font-size: small;">ほげほげほげほげほげほげ</p> これで、このフォントが適応されるなら、 元々の既存値で上書きされているか？　書いたCSSが間違っている・・・ つまり、 既存値で上書きされないように、 詳細度（優先度）を上げるか、既存のフォントを削除
どっちでもよいですよ。 ワイドモニターでも、ブラウザの表示領域を1000px程度にしていれば、大した差はないです。 映画やTVを見る時に、真正面が一等席なのはわかると思いますが、その程度の理由です。 左側に寄ってしまうと、ワイドで表示してる場合に 首や目が左に行きますから疲れるでしょう。快適に回覧して欲しいから。 他の多くのサイトがセンターで、切り変えたら左に寄っていたら目線が変わるから、同じセンターで見せたい。 左寄りで更にpaddingが無い場合、文章がブラウザの左端にくっ付いて読みにくい場合がある。 とか、 そんな程度の理由です。 ----------------- ＞また実際に中央揃えにする際は、やはりＣＳＳでレイアウトすべきでしょうか？ Ａ、 しょうもないサイトや放置サイトでしたら、わざわざ手間掛ける必要はないのでは？ 目的は何か？それを確認してからですね。 左寄りのサイトだけの理由で閉じる人はいないでしょう。 技術的には、 #1さんの<center>でも可能ですが、非奨励です。 昔は、HTMLで何でもかんでもやっちゃいましたが、 今は、デザイン部分（見た目の部分）は、CSSで設定しますので、 bodyに背景を設置し、次のdiv枠をメインと考えると、 その枠を、800～960px程度の枠幅にして margin: 0 auto; width: 940px; などを設定すると良いでしょう。 レスポンシブデザインが良いとは限りません。 フルブラウザモードで表示させたい人も多くいますから。 何をどう表示したいのか、 情報を読むサイトか？魅せたいサイトか？の違いにもよります。 センター配置なんてのは二の次で良いので、 ・HTMLは、構造化・マークアップ ・CSSは、見た目・デザイン と割り切って考え、リニューアルした方が良いとは思います。
セル内が１文字のみなら、表のタイトルも１文字にすれば、場合によっては縦書き風に簡単になります。 つまり、上の表タイトルと左の表タイトルの掛け合わせが★なのでしょ？ 上の表タイトルの幅を1em(字)指定おけば縦読みできる表示に簡単にお望みの物ができる筈です。長音（ー）等が交じるとまずいですがね。 つまり、１文字ごとに折り返されて こ う な る よ う に する。文字をセンターに揃えれば、上手くいくのでは？ cssがわかるなら thead th{width:1em;text-align:center;line-height:1;} ということです。
ここで聞くのは無駄!!! そのサイト以上に当てになりません。 仕様書を見ましょう。 その説明は、CSS2のときのものですね。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから The :before and :after pseudo-elements elements allow values of the 'display' property as follows: ・If the subject of the selector is a block-level element, allowed values are 'none', 'inline', 'block', and 'marker'. If the value of the 'display' has any other value, the pseudo-element will behave as if the value were 'block'. ・If the subject of the selector is an inline-level element, allowed values are 'none' and 'inline'. If the value of the 'display' has any other value, the pseudo-element will behave as if the value were 'inline'. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Generated content, automatic numbering, and lists( http://www.w3.org/TR/1998/REC-CSS2-19980512/gene … )］より 現行のCSS2.1は、この部分が削除されています。 　⇒Generated content, automatic numbering, and lists( http://www.w3.org/TR/CSS2/generate.html#before-a … )
ご質問文中のtestやtest2が何らかのセレクタを意味しているとするなら、 　test, test2 { color : red; } で可能では？ ＞jQueryでCSS名での指定を行いたいためです。 何か勘違いしているような… 「CSS名」という概念はないと思いますけれど、スタイルシートそのものを編集したければ、スタイルシートのデータを書き換えることで可能ではありますが、そういうことを考えているわけではないですよね？ 通常は、CSSと同様のセレクタを用いて要素を特定し、style属性を指定（設定）している場合が多いと思います。 その場合は、初期設定のＣＳＳの記述方法はほとんど関係しないはずです。 スクリプトからstyle属性に設定するスタイルは、個々の要素のstyle属性を定義していますので、HTMLソースに記述するstyle="～"の部分を書換えているようなイメージとなります。 このような直接属性を変更する方法のほかに、クラス属性を変更することで適用するスタイルを変えるという方法が通常は用いられていると思います。 上記のスタイルシートの定義そのものを書き換える方法はあまり用いられていないと思いますが…
横幅に関しては流行というか進化みたいなものです。 一昔前は一般的なモニターの解像度が低かったので、横スクロールが出ないように、WEBサイトの横幅が狭めでした。 横800ピクセルのモニターに対応するために、ブラウザの枠やスクロールバーなどを効力して760px以内で作成するのが基本、という時代です。 今は一般的に出回っているモニターの解像度もかなり高くなってきていますので、横幅に固執して作る必要が無く、各サイト自由に設定しています。 多いのは900～1000pxの間ですね。 ただ、横幅はデザインを決定する要素の一部でしかなく、 横幅を広くしたから問い合わせが増える、という事はありえません。 横幅の変更だけでなく、サイト全体をリニューアルして、デザインや情報整理の向上、検索エンジンへの最適化等を行えば可能性はあるでしょう。 問い合わせを増やすには、まずはサイトの内容を充実させることが第一。 ストレス無く内容をユーザーに伝え、問い合わせページに誘導するためにデザインがあります。 横幅はその要素の一つでしかありません。
＞画像を使わず、 　これは難しいと思います。角度をボックスのサイズを計算して算出する方法がないからです。(javascriptを使用すれば可能かもしれませんが・・・) 　それでしたら、背景を画像にしてbackground-sizeを使えば良いですよ。 また、後方互換を考えるなら画像をdisplay:blockでblockにして%で指定すれば良いです。content:url()で指定した画像でも良いでしょう。
ちゃんとブラウザごとの挙動を把握して使えるなら使っても全然問題ないです。 positionとの違いはパッと説明するのが難しいですが、 ネガティブマージンが一番主観的に使いやすいと思います。 例えば、高さが100pxのものに対して、それぞれ以下の指定を入れたとしましょう。 .a{margin-top:-50px;} .b{position:relative;top:-50px;} .c{position:absollute;top:-50px;} 「a」の場合は、単純に50px上に上がります。 IE6では親ボックスからはみ出した部分が切れてしまいますので、下側の50pxしか表示されません。 これはposition:relative;を入力する事で回避できます。 「b」の場合も同様に50px上に上がりますが、「元々それがあるはずだった範囲」に隙間が空いたままになります。 ですので、「b」の後に記述している内容は、必然的に「b」の下50px後に開始されます。 個人的にはあまりお勧めしません。 「c」の場合はまず親ボックスにposition:relative;を入れましょう。 こうしていることによって、「c」の基準点が親ボックスの左上になります。 親ボックスにrelativeの指定をしていない場合には、ブラウザの左上からの指定になりますので注意してください。 「c」の場合も50px上に上がりますが、感覚的には「浮いた」ような状態になります。 「c」の後に記述しているものは、「c」の位置や高さに関係なく親ボックスの左上から開始されますので、 「c」の後のオブジェクトに何も指定しなかった場合には「c」と必然的に被る事になります。 とりあえずやってみないと、それぞれの特徴はわかりにくいと思うので 色々試してみてください。 その時々によって、何が適しているかが変わります。 ガチガチの位置固定ではなく、単純に「ちょっとマイナスの値を入れたい」というような場合は ネガティブマージンで事足りる事が多いと思います。
No.3です。 ＞作り直しは辛いです・・・ 　もちろん、作り直さなくて良いです。 　私も十数年前に作ったページはそのままです。(old)というフォルダーにそのまま移動してしまいました。それはそれで、歴史ですから 　幸いに、50ページあまりのデータがあるのですから、少しずつ修正して作り直せばよいです。その時にHTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )を参考にして、divのclass名を指定しておくのも良いでしょう。DIVの用途としてとっても良い参考になります。 　section,article,aside,hgroup,header,footer,nav,figure,figcaptionの中から、それぞれの用途や目的に合わせてclass名を選択して、どうしてもそれだけでは【文書構造を表しきれない時に】DIVを使うつもりで作成すると良い勉強になるでしょう。 　私の経験からウェブサイトにあるページなんて ・サイトやカテゴリーのトップになるインデックス,ナビゲーション ・自己紹介、プライバシーポリシー、サイトマップなど事務的なもの ・各カテゴリーの詳細ページ 　位ではないでしょうか？？少なくともそれらは文書構造は同じでもプレゼンテーションは変えたいと思います。ユーザーが混乱しないように配色などは同じでもデザインは変えることが多いでしょう。 　そのように整理すると、テンプレートとなるHTMLを３種類ばかり作成して、それにデータを流し込めばHTMLは完成です。 　まあ、すでにサイトは出来ているのですから、気長に進めていけばよいでしょう。
世間的に「mixiはオワコン」なんじゃないでしょうか。私の周りでもやってる人ほとんど聞かないです。
ども！ 今では、 :hover はaタグ以外にも使えます！ なので、 div:hover　とすればいけますよ～＾＾ 一度お試しあれ
<!DOCTYPE html> <html lang="ja"> <head> <style type="text/css"><!-- .WebDesign{ border-collapse:separate; border-spacing:0; border:solid #1C79C6; border-width:1px 0 0 1px; border-radius:8px; width:400px;} .WebDesign th,.WebDesign td{ padding:.5em; border:solid #1C79C6; border-width:0 1px 1px 0;} .WebDesign tr:first-child th:first-child,.WebDesign tr:first-child td:first-child{ border-top-left-radius:8px;} .WebDesign tr:first-child th:last-child,.WebDesign tr:first-child td:last-child{ border-top-right-radius:8px;} .WebDesign tr:last-child th:first-child,.WebDesign tr:last-child td:first-child{ border-bottom-left-radius:8px;} .WebDesign tr:last-child th:last-child,.WebDesign tr:last-child td:last-child{ border-bottom-right-radius:8px;} --></style> </head> <body><div> <table class="WebDesign"> <tr><td>1</td><td>2</td></tr> <tr><td>3</td><td>4</td></tr> </table> <table class="WebDesign" style="margin:20px; box-shadow:3px 4px 8px silver;"> <tr><th rowspan="2">1</th><th>2</th></tr> <tr><th>3</th></tr><tr><th colspan="2">4</th></tr> </table> </div></body></html> 以前にそれを回答した者です。IE9以上かな。
Chromeがそのように動作するとしたら、Chromeの解釈が間違っています。 「上辺の位置は、包含ブロックに対して決まる。 また、位置指定されたボックスの包含ブロックは、同じく位置指定されている最も近い祖先に設定される( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )」 　言い換えれば、直近のstatic以外の親抱合ブロックの内辺を参照するという事です。 　位置の基準になる抱合ブロックにrelativeを指定すると良いでしょう。 　dispaly:none →　:hover{display:になっているのに、二箇所でborderやbackgroundを指定しなくても良い 　親にclassをつければ、子要素にいちいち同じclassをふるのは無駄です。
こんにちは。 審査の基準などについては、内部の方しかわからないことなので、 ご参考までに回答させていただきます。 おそらく確実に審査を通過するための HOWTOネタを読まれたのかと思いますが、 画像を貼ってはいけないというよりも、 テキストとしてのコンテンツの充実をしろという意味ではないかと。 画像やYoutubeばかりのページを審査にかけても、 コンテンツ不足として判断される可能性があるからではないかと思います。 また、画像とAdSenseを近くに並べて配置することも規約違反となる為、 そうしたAdSense掲載を懸念される恐れがある為、 画像はなしの状態が望ましいという意味ではないかと思います。 私は当初から画像入りで投稿していますが、 問題なく審査通過しております。 というか、画像ありで審査NGだと、 ほとんどのサイトがNGになっているかと。 コンテンツとして成り立っていれば画像ありは問題ないと思います。 リンク先は自サイトご紹介まで。 参考URL：http://algorhythnn.jp/blg/
縦スクロールは overflow-x:scroll 印刷がうまく出来ませんので使用していませんが
htmlソースがわからないので、何が#footerで何が#itemなのか？など、全くわからず想像の域を出ませんが、 >margin-leftを1pxでも入れると右端から消えてしまいます。 という現象が起きるという事は、もしかしたら#footerのposition:fixedとは関係ないのではないでしょうか？ 単純に「1px」幅が大きくなる事によって、画像を配置している親ボックスの幅より内容物のトータル幅が大きくなってしまい、溢れて内容物の最後の画像が下の段に移動してしまっているのではないかと考えました。 並べる画像や親ボックスに、paddingやborderなどを指定していませんか？paddingやborderは幅（width）にプラスされてしまいます。 例えば、画像が width : 100px; padding : 3px; border : 1px solid black; 等とCSSで指定されていたら、この画像を配置するのに必要なwidthは108pxとなります。 （画像自体の幅="100px"＋左右の余白"3px×2=6px"＋左右のボーダーライン"1px×2=2px"） また、親ボックスにpaddingが指定されている場合もトータル幅からpadding分を引かないと溢れてしまいます。 この辺の解釈or計算ミスではありませんか？ と…、想像からお返事してみましたが、的外れになる可能性も存分にありますがどうでしょう？ 的外れだった場合… それほど難しい質問ではなさそうですので、htmlも質問文に追加すると的確な答えが得られると思いますよ。各IDやクラスを何に対応させているのか？positionの親要素等がわからないとこの質問に的確な答えは返せないと思います。
3番目の……の原因は２番目がfloatしていないからです。それと、ｃｓｓは単位が省略不可です。width:480pxなどと書きましょう。 簡単に説明します。原則として文書は普通、左から右に、上から下に解釈し置いていきます。ブロックレベル要素であるboxnは、ブロックレベル要素であるdivであるため（前後に改行を含む塊）、そのままの解釈にまかせると左から右には流れず、上から下に置いていきます。 masarun53406 さんのソースでは、親要素があり、初めての子要素#box1はfloat:leftしていますので、floatつまり、浮動化します。本来の流れからは切り離されて左に寄ります。 次にbox2はfloat:leftがないと次のボックスは原則どおり下に来るのですが、前の要素が本来の流れから外れているため、box2がbox1のあった場所に入ります。但し、box1が左にいるため、その場所をよけます（水が氷に場所を譲るような感じ）。 masarun53406さんのソースでは、box2はfloatしていませんので、box3は本来の流れ通り、box2の下に来ます。 #1さんの改良案では、#2もfloatしているので、隣に来るわけです。 蛇足ですが、親要素の範囲ないで横に並べたいだけなら、 #mainR1>div{/*ここでひとまとめに*/ float: left; width: 138px; height: 138px; border: dotted 1px #9d9d9d; margin-right:10px; margin-left:10px; } /*以下は別々の指定に*/ #box1{ background-color: #ffcfff; -moz-box-ordinal-group: 1; -webkit-box-ordinal-group: 1; } #box2{ background-color: #ffffff; -moz-box-ordinal-group: 2; -webkit-box-ordinal-group: 2; } #box3{ background-color: #ffcfff; -moz-box-ordinal-group: 3; -webkit-box-ordinal-group: 3; } とすればOKです。floatはその他解除など、込み入ってくるのでしっかり理解しないとつまづきの原因になります。 http://webdesignrecipes.com/css-visual-formating … http://www.kanzaki.com/book/css/3-2.html 等、参考に詳しく学ばれることをお勧めします。
あまりに古いバージョンの場合は使えないかもしれませんが、最近のバージョンであれば 「ツール」⇒「エクスポート」⇒「エクスポートする内容を選択」の中の「投稿」をチェックするとカテゴリでフィルタした記事のエクスポートファイルが作成出来ますよ。 その後は新しく作成したWordPressサイトにそれぞれインポートすれば大丈夫だと思います。 参考URL：http://www.seotemplate.biz/blog/wordpress-tips/1 …
以前に全く同じ内容の質問を２回されていて、そのいずれも無視されていますね。 　努力された形跡もない。 HTMLの文書構造が分からないとデザインのしようがないです。 　⇒この画像を - HTML - 教えて！goo( http://oshiete.goo.ne.jp/qa/8134362.html ) 　⇒ホームページ作成に詳しい方、教えてください - その他([技術者向] コンピューター) - 教えて！goo( http://oshiete.goo.ne.jp/qa/8134317.html ) 　まず、それらを試してみてからですよ。
考え方としては2パターンあります。 【A】メニューだけのファイルを管理する 【B】更新時に全ファイルを置換する 【A】の場合は、特別なソフトや知識が必要ですが、管理が楽です。 【B】の場合はフリーソフトで十分ですが、ミスがあると大変。 【A】の場合は、さらに以下のような方法があります。 1. Dreamwerverのテンプレート機能を使う 少々高価なソフトですが、共通部分を一つのファイルで管理できるので便利。 2. CMSを使う WordpreeやMovableType等のブログシステム（コンテンツマネジメントシステム）は 各パーツごとに管理するので複数ファイルを更新する必要はありません。 無料のテンプレートが沢山公開されているので、ささっと作るには便利ですが、 好きにデザインするには難易度が高いです。 3. SSIを使う サーバーが対応している必要があり、設定も必要ですが、 特別なソフトが必要なく実現可能です。 こういう所で勉強してみてもいいかも。 http://www.tohoho-web.com/wwwssi.htm 【B】の場合は、1の方が挙げているようなEmEditorをはじめ、 複数ファイルを一括置換するフリーソフトを使用する事になりますが、 置換時にミスがあると全ファイルおかしくなり、ミスの内容によっては元に戻すのが困難な場合もあります。 また個別ファイルを更新時に、スペースや改行具合が変わるだけで置換に対応しなくなります。 意外と管理に気を使うので、【A】の方法をとれない場合に例外的に用いるのが良いかと思います。
それぞれ９個の選択肢をもつ３つのグループからひとつずつ選択するのですから、フォームコントロールはradioかseclectになります。 <form action="****" method="post"><!-- nameやidは不要です --> 　<ul> 　　<li>Aグループ 　　　<select name="A" size="1"> 　　　　<option value="1">商品1 　　　　<option value="2">商品2 　　　　・・・【中略】・・・ 　　　　<option value="9">商品9 　　　</select> 　　</li> 　　<li>Bグループ 　　　<select name="B" size="1"> 　　　　<option value="1">商品1 　　　　<option value="2">商品2 　　　　・・・【中略】・・・ 　　　　<option value="9>商品9 　　　</select> 　　</li> 　　<li>Aグループ 　　　<select name="C" size="1"> 　　　　<option value="1">商品1 　　　　<option value="2">商品2 　　　　・・・【中略】・・・ 　　　　<option value="9>商品9 　　　</select> 　　</li> 　</ul> ・・・【中略】・・ </form> あるいは、radioを使用して <form action="****" method="post"><!-- nameやidは不要です --> 　<ul> 　　<li>Aグループ 　　　<ol> 　　　　<li><input type="radio" name="A" value="1">商品1</li> 　　　　<li><input type="radio" name="A" value="2">商品1</li> 　　　　<li><input type="radio" name="A" value="3">商品1</li> 　　　　・・・【中略】・・・ 　　　　<li><input type="radio" name="A" value="9">商品1</li> 　　　</ol> 　　</li> 　　<li>Bグループ 　　　<ol> 　　　　<li><input type="radio" name="B" value="1">商品1</li> 　　　　<li><input type="radio" name="B" value="2">商品1</li> 　　　　<li><input type="radio" name="B" value="3">商品1</li> 　　　　・・・【中略】・・・ 　　　　<li><input type="radio" name="B" value="9">商品1</li> 　　　</ol> 　　</li> 　　<li>Cグループ 　　　<ol> 　　　　<li><input type="radio" name="C" value="1">商品1</li> 　　　　<li><input type="radio" name="C" value="2">商品1</li> 　　　　<li><input type="radio" name="C" value="3">商品1</li> 　　　　・・・【中略】・・・ 　　　　<li><input type="radio" name="C" value="9">商品1</li> 　　　</ol> 　　</li> 　</ul> ・・・【中略】・・ </form> いずれにしても、サーバーにはA=3&B=5&C=2 と言う形データが送られます。 　⇒17 フォーム ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
a {} と #example a{} は、対象が違います。 a{} は全てのa要素に適用されますが、#example a{}はid="example"に内包するa要素にしか適用されません。 <p><a>あ</a></p> <p id="example"><a>あ</a></p> ----------- #example{} と #example a{} も対象が違います。 -------------- #example a と #example a:hover の対象は同じで、実行されるタイミングが違いますので必須になりますが、 #example a, #example a:hover と #example a #example a:hover をまとめようと思うとまとめることができます。 -------------- #example a { display : block; width: ○○px; height: ○○px; padding-top: ○○px; background-image: url(○○.png); background-repeat: no-repeat; text-decoration: none; background-position: ○○px ○○px; } #example a:hover { background-position: ○○px ○○px; } -------------- ただし、「:hoverを切り替えている」ということを明確にするために、 （他のプロパティにまぎれて、background-positionがわかりづらいため） あえて不要な内容を書いたり、２つにわけて書くことは（人によっては）よくあります。 プログラミングでは「可読性」と呼ばれていて、 可読性を良くするためにあえて実行効率の悪い書き方をするのも、一つのテクニックです。
原因は、IEの互換モードによるものでしょう。他のブラウザでは問題ないはずです。 HTMLのDOCTYPE宣言を「IEが標準モードで起動するように記述する」ことで、IEの互換モードによる他のブラウザとの誤差は減ります。 DOCTYPE スイッチ 　⇒DOCTYPE スイッチ - Google 検索 ( https://www.google.co.jp/search?q=DOCTYPE%20%E3% … ) あなたのHTMLが HTML4.01strict!!!推奨!!!でしたら <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> HTML4.01transitinalでしたら <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> など。
＞「text-indent: -9999px;」などの方法は隠しテキストにあたり、あまり良くないことを知りました。 　それは、ありえません。<span class="hide">富士山が世界遺産に登録</span>検索エンジンはスタイルシートを読みませんが、<span class="hide">富士山が世界遺産に登録</span>そのページの内容と、<span class="hide">富士山が世界遺産に登録</span>文字の整合性の判断はします。それが「隠し文字がまずい」と言う意味です。 　上のように書いて、span.hide{text-indent:-20em;}なんてすれば、明らかに跳ねられる。 　と言う意味です。 ＞通常時もマウスオーバー時も画像を使ってのナビゲーションバーにしたい場合 どのような方法が適当になるのでしょうか？ 　a:after{content:url();display:black;width:***;height:****;position:absolute;top:***;left:***;} とか・・
Dreamweaverにはなかった気がしますが、FireFoxやクロームのアドオンに有用な物が、幾つかあります。 日本語の解説がなかなかないのですが、FireFoxのアドオンの日本語使いかたページを１点紹介します。 サイト全体で使用していないCSSセレクタを抽出する方法【Dust-Me Selectors】 http://www.faramoon.com/28.html
子セレクタ。 http://www.htmq.com/selector/child.shtml #itemCanvas .item >* なら、.itemの直下の要素のみの全てが対象になる。 「直下の要素」の子孫要素は対象外。
まず、勉強したい、という事なら上記単語をwikiで調べて読んでください。 そして、最低限表示させてみてください(htmlだけでいいので) それができないなら、お金を使って覚える必要があります、本ではダメです、人に教えてもらってください。本で理解できるなら、最初の一歩はネットでもできるはずです。 とにかく作れればいいというのであれば、 フリーソフトでも探せばそれなりに親切なものがあると思います。 ただ、たいてい見た目は綺麗でも中身の汚いものになるイメージがあります。
>* head内にスクリプトを記述することができますが、スクリプトの記述で解決できますでしょうか。 スクリプトでは無いですが、CSS の上書きで対処出来ます。 hesd 内で index.css の内容を全て上書きしてしまえば良いと思います。 スタイルシートは、head 内にもしくは、html 内に直接記述した内容が最優先されます。先に読み込んだ index.css の内容を上書きしてしまえば良いだけです。
ご回答申し上げます。 私もそれがわからず随分苦労しました。 プラグイン ↓ 一覧の中より、Subscribe2 ↓ 編集 ↓ class-s2-frontend.php の中の、 'size' => 20 がご要望のそれにあたります。 'size' => 50 など書き換えてみてください。
＞downreadした物でライブドアブログのテンプレートじゃないです 　であっても、基本的に同じです。 　自分で作成するなら、せっかくのカスケーディングスタイルシート(CSS)ですから、自分のHTML文書の文書構造に合わせて、セレクタを組み合わせてフルにカスケーディング機能を使いますが、テンプレートの場合は、ほとんど#の一意セレクタで済ますはずです。 ＞ぐぐっても意味不明です 　セレクタについては 　⇒セレクタ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　⇒値の割り当て、カスケード処理、継承( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　に必要な知識はすべてあります。 　
★HTMLはデザインのために書いたらダメ!!!--基本中の基本で、最も大事な基本です。 　文書構造とプレゼンテーションの分離は、HTML4.01の勧告以来十数年にわたって強く言われ続けてこられたのに、いまだに、それを理解していない説明サイトが多いですね。参考にされたページは、class名のつけ方も含めて参考にはならないですね。少なくとも仕様書を読んだ形跡がない。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。』どのようなclass名がよいかは、HTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )が参考になります。contenerとかhearfなんて、文書構造じゃなくプレゼンテーション(デザイン)用ですね。 本題です。 　CSSでは、ウィンドウの幅と高さを参照します。divの高さ,幅のデフォルトはautoです。 よって、htmlとbodyに高さ幅を100%と指定し、それをposition:relative;にすると、その子孫は「直近のstatic以外の親コンテナブロックのサイズを参照する。」より、簡単に指定できるはずです。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから パーセント値は、常に長さなど他の値に対する相対値である。 パーセント値を取ることができるプロパティには、それぞれ参照先の値も定められている。 参照先の値には、同じ要素の別のプロパティ、祖先要素のプロパティ、整形文脈に関わる値（包含ブロックの幅など）などがある。 パーセント値がルート要素に用いられ、かつその値がプロパティの継承値を参照する場合、継承値の代わりに初期値を参照する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［CSS2の構文と基本データ型( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )］より 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 初期包含ブロックの高さはルート要素の'height'プロパティで指定するとよい。 このプロパティが値'auto'を取る場合、初期包含ブロックの高さは文書の内容量に合わせて変化することになる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［視覚整形モデル( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )］より ごく簡単な例を挙げておきます。 ・HTML(class名を含めて)には文書構造しか書かれていませんから、デザインをどのようにも変更できます。 ・印刷には不向きですから、screenメディアのスタイルシートです。 ・Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# ) 　のDATAでチェック済み ・footerを一番下に、headerとsectionを上下二つでも良いでしょう。 ★タブは＿に置換してあるので戻すこと。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;height:100%;width:100%;position:relative;} div.header{position:absolute;z-index:10;height:60px;width:100%;} div.section{position:absolute;height:50%;top:0;left:0;width:100%;overflow:auto;} div.section h2{margin-top:60px;} div.footer{height:50%;position:absolute;bottom:0;width:100%;overflow:auto;} div.header{background-color:aqua;} div.section{background-color:yellow;} div.footer{background-color:lime;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>frameやiframeを使わずに上下２分割させ、50%ずつ固定にしたいのですが、うまくいきません。</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html> [HTML5] <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <!--[if IE]> ＿<script src="http://html5shiv.googlecode.com/svn/trunk/html5. … ＿<script src="http://css3-mediaqueries-js.googlecode.com/svn/t … <![endif]-->＿<link rel="stylesheet" href="css/style.css"> <style media="screen"> <!-- html,body{margin:0;padding:0;height:100%;width:100%;position:relative;} header{position:absolute;z-index:10;height:60px;width:100%;} section{position:absolute;height:50%;top:0;left:0;width:100%;overflow:auto;} section h2{margin-top:60px;} footer{height:50%;position:absolute;bottom:0;width:100%;overflow:auto;} header{background-color:aqua;} section{background-color:yellow;} footer{background-color:lime;} --> </style> </head> <body> ＿<header> ＿＿<h1>タイトル</h1> ＿</header> ＿<section> ＿＿<h2>見出し</h2> ＿＿<p>高さ100%は再現できたのですが、この中にheight:50%のdivを切ろうとしても上に詰まってしまいます。 表現する方法はあるでしょうか。</p> ＿</section> ＿<footer> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</footer> </body> </html>
IDには使用できる文字の制限があります。 HTMLの仕様上は、class名は、CDATA( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )ですから、特に制限はないはずです。 しかし、CSSの仕様では、クラスセレクタに数字から始まる文字は使えません。 しかし、クラスセレクタと同値であるはずの属性セレクタでは指定できます。 ★HTML的には正しく、それが文書構造上必要なら、属性セレクタで指定します。 span[class~="01"]{color:red;} ★通常はそのようにclass名は不要のはずです。なぜなら、divやspanについては 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　であって、デザインのためにつけるものではないからです。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　適当な要素がないか EM: 強調を示す。 STRONG: より強い強調を示す。 CITE: 引用か、他のリソースへの参照であることを示す。 DFN: 囲われた用語が定義を行っているものであることを示す。 CODE: コンピュータのコード片であることを示す。 SAMP: プログラムやスクリプトなどの出力例であることを示す。 KBD: ユーザから入力されるべきテキストであることを示す。 VAR: 変数またはプログラム引数のインスタンスを示す。 ABBR: 省略形であることを示す。例えば、WWW、HTTP、URI、Mass.、等。 　それが重要なものでしたら<strong></strong>や<em></em>でマークアップして、スタイルシートで指定すべきですし、これらに適当なものがないときに、最後の手段としてclass名で区別すべきです。例えば<span class="mark">、あるいは言語が変わるのでしたら<span class="en-us">です。 　class名は、デザインのためにつけるものじゃないです。数年後、あなたが手を入れようとして<span class="01">じゃ意味が分からないですよ。もちろん検索エンジンも・・・ ★これはspanだけじゃなく、特にDIVについては、もっと重要です。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
＞説明不足ですいません。WEBサイト作成に特化してクラウドソーシングのみで月25万位稼いで食っていくことはできるかということです。 　これは道具と言うより、センスと才能ですね。実際にランサーズ( http://www.lancers.jp/ )のようなクラウドサービスを双方の立場で利用しますが、画像製作では食べていくのが難しいでしょう。GIMPやInkscapeでこなしている人は沢山います。 　確かに、クラウドの場合、その多くはロゴ製作です、Illustratorでの提供を求められることが多いでしょう。Illustratorはドロー系のソフトですからね。 　一方、マークアップやサイト管理はそこそこ稼げると思います。それも、ほとんどは個別契約に移行してしまいます。
文書構造で不明な点 ・ID/class名からサブメニューだと思いますが、その親メニューはどれです？ 　<ol> 　　<li> 　　　<ol> 　　　　<li></li> 　　　　<li></li> 　　　</ol> 　　</li> 　</ol> なはずですが？？ ★floatは、floatは出現した位置が基準になるなど、色々面倒くさくなるので使わないほうが良いでしょう。 ★headerでメインナ情報はナビゲーションだと思いますので、それを基準にしたブロックとして考える。 ★サイズは、標準ではpadding辺の内側ですが、IEが互換モードで動作するとboreder辺までがサイズになります。標準モードで起動するように<DOCTYPE>を記述します。 ・さすがにXHTMLはここ数年使ってませんので、HTML4.01strict+CSS2.1のサンプルです。 ・サイズはリキッド(480px～1000px)にしてあります。スマホからワイドディスプレイまでOK ・class名は、HTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )とその用途を参考にしてあります。<div class="header"></div>⇒<header></header>のように、簡単にHTMLに変更できるように。 (注意)タブは＿に置換してあります。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;background-color:gray; } h1,h2,h3,h4,p{margin:0;line-height:1.6em;} div.header,div.section,div.footer{ width: 98%; margin:0 auto; min-width:480px;max-width:1000px; background-color:white; } div.header{ position: relative; background-color:yellow; } div.header h1,div.header div.aside{ position:absolute; width:18%; left:0;top:0; margin:0; } div.header div.aside{ right:0;left:auto; } div.header h1 img{ display:block; width:100%; height:auto; } div.header div.nav{ margin: 0 18%; width: 64%; min-height:90px; position:relative; background-color:fuchsia; } div.header div.nav ol,div.header div.nav li,div.header div.nav ul{ display:block;list-style:none; margin:0;padding:0; } div.header div.nav li a{margin:5px;} div.header div.nav ol li ul li{text-align:right;} div.header div.nav ol li ul{ position:absolute; top:0;right:0; height:100%; width:50%; } div.header div.nav ol li:hover{ background-color:lime; } div.header div.nav ol li+li ul{ z-index:-10; } div.header div.nav ol li:hover ul{ z-index:10; background-color:lime; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1><img src="./images/title.gif" alt="" width="175" height="64"></h1> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="@"><img src="./images/hoge1.gif" alt="" width="42" height="10"></a></li> ＿＿＿＿<li><a href="@"><img src="./images/hoge2.gif" alt="" width="42" height="10"></a> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li><a href="">テキスト</a></li> ＿＿＿＿＿＿<li><a href="">テキスト</a></li> ＿＿＿＿＿＿<li><a href="">テキスト</a></li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li><a href="@"><img src="./images/hoge3.gif" alt="" width="42" height="10"></a> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li><a href="">テキスト</a></li> ＿＿＿＿＿＿<li><a href="">テキスト</a></li> ＿＿＿＿＿＿<li><a href="">テキスト</a></li> ＿＿＿＿＿＿<li><a href="">テキスト</a></li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿</ol> ＿＿</div> ＿＿<div class="aside"> ＿＿＿<p>Dの部分は省略</p> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
それはクリッカブルマップではありません。クリッカブルマップの詳しい説明は 　⇒13.6 イメージマップ ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　にあります。 ＞各説明サイトをみても座標がどうのとかで分かりません。 　こればっかりは、なんとも(^^)。読解力の問題ですからね。 　座標は、適当な画像ソフトで拾っていくくらいしか方法はないでしょう。 　⇒3/3 １画像内に複数リンクを設定！イメージマップの作り方 [ホームページ作成] All About ( http://allabout.co.jp/gm/gc/23823/3/ ) 　Win95用ですが、WindowsXP以降でも動作します。 　⇒Client Side Image Map Editor ( http://hp.vector.co.jp/authors/VA001944/freesoft … ) 　ただ、最近ではあなたが示された http://www.pds-navi.com/ のように、ナビゲーションリストをスタイルシートで配置する方法のほうが多いようです。 　複雑な形状をトレースする場合はイメージマップになるでしょう。 　いずれにしても　HTMLは <div class="nav"> 　<ol> 　　<li><a href=""></a></li> 　　<li><a href=""></a></li> 　　<li><a href=""></a></li> ・・・のように普通にマークアップします。 スタイルシートを用いる方法は、 ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　において、表示⇒スタイルシート⇒画像の上に配置に配置　を選択すると。 　
過去の同様の質問を参考までにお示しします。 http://detail.chiebukuro.yahoo.co.jp/qa/question …
http://gyazo.com/c57dce773c71006b968189a796f6cd2f それにしても写真が下手ですね、建築写真がなっていない(^_^;
実際にどのような内容なのですか？ iframeでなければならないのか？ 親のHTMLはPHPではないのですか？ test.php・・せっかくのPHPなので別名にするのじゃまずいの？ 　　また、QUERY_STRINGやPATH_INFOで書き換えればよいのでは？ 静的なものなら兎も角、PHPならいかようにもなると思います。
＞どこかの誰かが各ブラウザのデフォルトCSSを研究し作り出したリセットCSSを、何も考えずにそのまま自分(自社)のサイトに使っているだけなのでは。 　でしょうね。 　もし、ここにない要素が出てきたらどうするのだろう・・？ブラウザはその仕様になくても、過去の仕様や廃れた仕様にも対処することが、強く求められています。 　*セレクタひとつ書いてしまったために、スタイルシートがとても複雑になってしまった経験があるのでは？ 　スタイルの照合手順は、DeFellさんが紹介された「意外と知らないCSSセレクタの照合順序とパフォーマンス( http://19-d.com/posts/view/116 )」に書かれているアルゴリズムとは違うはずです。 　⇒6.4.1 カスケード処理の順序（Cascading order）( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　が、プログラムするときの順当な手段でしょう。 　コンピューターがテキストデータを読み取るのは大きな時間はとりませんが、ソートは多少時間を食います。それ以上にデータのテーブルを保存するのは大きな負担となりますから、最初にそれぞれの要素に対するスタイル一覧を作成してHTML内を検索するという手段はとりえません。貧弱なコンピューターで大きなページを処理するとハングする(^^) ＞例えば、そのWebサイトでh1、h2が使われていたとしたら、使われていないh3やh4などのマージン・パディングも0になるようにブラウザ内で処理されているのでしょうか？ 　ないでしょう。 　描画に当たって、h3やh4がでてこなければ、スタイルシートを参照もしないでしょう。どうせ、他の部分でスタイルシートを読んでいるときには読みますが、単純に読み飛ばされるでしょう。
了解しました。(^^) その画像を含むブロック要素にposition:relative;を指定して、その要素に:afrer{content:"";display:block;width:100%;height:100%;position:absolute;}でよいです。 　これは先の回答、そのままです。jqueryは必要ありません。 ★contentで追加される要素は、元要素がblockならblockに指定できます。 ★afterは必ず後になるので、同サイズのブロックをかぶせれば利用できなくなります。 ★画像要素は内容を持たないため、内容の追加は出来ません。(当たり前ですが)
★absoluteは、直近のstatic以外の親コンテナブロックを参照します。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 例えば、次のようなHTMLがあったとします。挿絵要素内の画像 <div class="figure"> 　<p class="image"><img src="./images/05.jpg" width="480" height="360" alt=""></p> 　<div class="figcaption">なんたらの画像</div> </div> [CSS] div.figure{float:right;margin:10px;text-align:center;} div.figure p.image{position:relative;} div.figure p.image:after{display:block;content:"";position:absolute;top:0;left:0;width:100%;height:100%;} HTML5だと <figure> 　<p class="image"><img src="./images/05.jpg" width="480" height="360" alt=""></p> 　<figcaption>なんたらの画像</figcaption> </figure> [CSS] figure{float:right;margin:10px;text-align:center;} figure p.image{position:relative;} figure p.image:after{display:block;content:"";position:absolute;top:0;left:0;width:100%;height:100%;} 　それぞれのプロパティの説明は 　⇒REC-CSS2 邦訳( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) を参考に!! 自由に利用できます。 (完全に防ぎきれないことは重々承知しています)は重々承知していますが、それでも ＞画像の保存・転載を防止したい 　は、全く不可能です。ブラウザがディスプレイに表示する時点で完璧に保存されてしまっていますから。IEをご利用ならinternet tempフォルダーにすべてあります。 　もちろん、「スタイルシートを使用しない」を選択すればバッチリ利用できますし、右クリック禁止はjavascriptを停止すればオシマイてです。 　そもそもウェブは 『私が構想していたのは、自分の知識や考えを共有させることが、他人の知識を 学ぶのと同じくらいに容易であるようなシステムであった。( http://www.sal.tohoku.ac.jp/~gothit/webauthoring … )』ですし、あなたがウェブサイトを公開するために使用している根幹の技術は、全くフリーで利用できますよね。 　私は、自身、また自社のコンテンツに関しては、テキストも画像もすべて同列に自由に利用できるとしています。そもそも区別できないですし。皆さんに共に活用してもらえるようにウェブで公開しているのですから。 　逆にそれを利用して、それに制限をかけられる恐れのある場合はGFDLにしています。 GFDL: 有償無償に関わらず再利用も配布もOK・・売っても良いです。 　　　改造しても良いです。(どこを改造したか示せば) 　　　再々配布に利用制限をかけたらいけない 　　　無保証 ★それでも、制限したいなら 1) 画質をディスプレイでならきれいに見える解像度で作成する。 　表示サイズが 420px幅ならその幅で作成する。 　　(注)私は印刷や再利用までを考慮して表示サイズの数倍の解像度にしています。 2) HTTP_REFERERを調べて、そのページ以外からの要求を受け付けないようにする。 　　ダウンローダーには意味がありません。 3) 嫌われるのを覚悟して右クリックを禁止する。 　目が悪い人が、画像を拡大してみようとしても見ることが不可能になります。これは出来るだけ避けたい 　いずれにしてもウェブ初心者の方が、本当に良く気にされる案件ですが、あなたが利用しているHTMLやCSSの技術はどこから手に入れられましたか？？？誰でも自由に利用できる形で公開されているでしょ？？？。そもそも、その方法があったとして、その方法をいくら対価を支払って得ようとしていますか？？聞きなおします。 　上記のHTML,CSSは、改造するなり、なんなり、ご自由にご利用ください!!貴重なので(^^) 　　ただ、願わくば、別の用途に使っていただきたいです。 　本題と違うのは重々承知の上で、反発されるのも承知の上で、ウェブを利用するスタンスとして大事なことなので・・
　どのようなclass名やidを付けようと自由ですから、デザインのためにつけているのでしょう。しかし、本来の付け方ではありません。 　仕様書には、 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』と書かれていますから、本来はその目的で記述するべきでしょうね。 　例えば、その部分がheaderならclass="header"、本文ならclass="section"と言う風に・・ ★HTML4.01～XHTML1.1では、文書のブロック的--セマンティックな構造を示す要素がなかったために、class名やidを併用することになっていました。 ★それが理解されなかったために、実際には<div class="inner">ここは内側の文書</div>などというclass名が沢山登場しました。main,left-box・・とか。 　その反省から、HTML5では 　⇒文書をよりよく構造化するために、次の要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　section,article,aside,hgroup,header,footer,nav,figure,figcaption・・・・ 　ですから、HTML4的には、本来左のように付けられると期待していたものが、右のように書かれてしまった。と言う事です。 <div class="article">⇒<div class="outer"> 　<div class="header"></div> 　<div class="section"> 　　<div class="section"></div>⇒<div class="inner"> 　</div> 　<div class="footer"> 　</div> </div> 　もちろんHTML5では。 <article> 　<header> 　　<nav> 　　</nav> 　</header> 　<section> 　　<h2>本文見出し</h2> 　　<section> 　　　<h3>項見出し</h3> 　　</section> 　</section> 　<footer> 　</footer> </article> 　と書かなければなりませんし、DIVは適切な要素がないときの最後の最後の手段でないと使えなくなります。 ★Webページのソースでクラス名やID名 　は、文書構造を補完するために利用します。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　HTML5の新しい要素がとっても良い参考になるでしょう。inner,outerは、悪い見本と考えて良いでしょう。 　そうすることで、HTMLは誰(検索エンジンなどの機械も)が見ても、あなたや他人が将来、見直しても分かりやすくなるでしょうし、デザインも自由に変更できます。
あくまで私の見解ですので、100％信用しないで下さいね。 >ペンギンにほかくされたか、被リンクサイトの質が悪かったわけではないのでしょうか？ 無関係だと思います。 >上記の場合ほって置いても戻らないのでしょうか？ 放っておいてもグーグルが更新後に調整を入れてくれば戻る可能性も十分あると思います。ですので慌てて変な更新をしない事が大事です。アクセス減をすぐに改善したいお気持ちは良くわかりますが、ちなみに私のサイトのページは、10位以内から500位圏外まで飛んだページもありましたが、20位前後まで戻ってきたページも確認しました。コンテンツに自信があるなら、どっしり構えて様子見も大事です。 >この場合はただのアルゴリズムの変更 の影響だけどこちらに非はないのでしょうか？ ただのサンドボックスでしょうか？ 今までは全く非ではなかったのですが、今後は上位表示には『非』になったのだと思います。ただコンテンツ全てが否定されている訳ではありません。所詮相手はプログラムですから、ツボをつけば簡単に戻ります。グーグルが今まで一生懸命構築してきた優秀なアルゴリズムを全部捨てるなんて事、考えられませんよね？私達個人にとっては大きな影響ですが、ほんの少し数式が変わっただけなんです。 >故意に入れていなくてもキーワードが多いと疑わしきは罰するのでしょうか？ それならば狙っているキーワードはあえて入れ過ぎないようにしないといけないのですね。 もちろんそうです。故意でも偶然でも所詮相手はプログラム（機械）です。私たちの気持ちなど知りません。「かなりシビアな印象」と書きましたが、キーワードとかSEOという言葉を知っている人が自然にライティングしたら確実に入れすぎになると思います。昔はバカみたいに詰め込んだじゃないですか？私もそうですが今でも無意識に入れすぎてしまいます。SEOを意識している時点で、少し抑え目にしないと最新のアルゴリズムには「不自然」と解釈されるでしょう。 >新しくコンテンツを大幅に入れました。 関連はしていますが、少し違う話題もテレビでやっていたので文字おこししました。 それが、他のサイトあとで、パクリだと思われたのかもしれませんね。 それが悪く働くことなどないと思っていたのですが、そのようなことがあるのでしょうか？ 増やす分には問題ないというのは間違えなのですね。 コピーページでなければ、「他のサイトの後だからパクリ」等とは解釈されないと考えています。「似た内容の一番古いコンテンツ」がどのサイトか？などは、あるいは認識しているかもしれませんが。新しく作成したコンテンツが、やっつけで作ったよほど質の悪い物であったり、サイトテーマと無関係な物でなければ、特に悪く働くとは思いません。 >狙ったキーでうまく言ったらそのページは更新しない方が良いということでしょうか？ 更新が必要な内容ならする。必要無いならしない。単純にこれでいいと思います。 >またキーワードを狙う場合その内容を一ページに集約した方が良いのかもしれませんね。 確実に上位表示を狙わなければならない大切なキーワードならば、絶対にそうした方が良いと思います。いや、して下さい。SEO対策もしやすいし順位も安定しやすいと思います。実際ほとんどのサイト制作者はそうしていると思われます。 と、まぁ。またまた長文になってしまいましたが、かなり悩んじゃって悶々としてますね（笑） 私も何度となくそんな気持ちになりましたし、SEOを意識してサイト作りをしていると、今も月に一度くらいは何をしていいかわからなくなって苛立つ事があります。 そんな時は順位などは一度忘れて「サイトを昨日より少しでも良くしよう」「昨日より少し利便性を上げて使いやすい様に」「スマホからも使いやすい様にしてみようかな？」など、完全なユーザー目線でコンテンツのパワーアップを図ります。気持ちも楽になるし、長い間サイト運営していくために大切にしている考え方です。検索エンジンも大したもので、そんな事をしていると必ず順位も上がり、結果としてコンバージョン率も上がってくるものです。 SEOに行き詰まったらコンテンツを… コンテンツに満足しちゃったらSEOを… という具合に、どちらかばかりにならないのがいいと思います。現在のアルゴリズムは素晴らしく、SEOの為のコンテンツ作りでは見抜かれます。 ありきたりのつまらない答えで申し訳ありませんが、検索エンジンのアルゴリズム更新の目的はユーザーの利便性です。より検索キーワードに的確な内容のページで、かつユーザービリティの高いサイトを上位表示させる為に更新を繰り返しています。その事に立ち返ると「コンテンツの改良」に行きつくのではないでしょうか？つまらない答えですが絶対不変の100％確実な順位アップ方法です。 とりあえず、キーワードごとにページを分けて丁寧に作りこんだらいかがでしょうか？ くれぐれもあまり悩まずに少し気楽に頑張って下さい♪ SEOは精神衛生上よくないですから（笑）
　原因は分かりかねます。 　⇒W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … ) でチェックしてみてもよいかも・・ 　※ 日本語が入っていて、文字コードの指定との兼ね合いであるところ以降のスタイルが無視されるとか。 　list-style-type:は本来はリスト項目(Applies to:elements with 'display: list-item' )に対する指定ですが、ひょっとしてプレビューツールが誤っている可能性があります。継承されるプロパティ(Inherited:yes) ですので、下記のような記述することができます。 <div class="header"> 　<div class="nav"> 　　<ol> 　　　<li><a href="#TOP"><img src="images/keybridge.gif" border="0" alt="トップ"></a></li> 　　　<li><a href="#News" class="style14">News</a></li> 　　　<li><a href="#Schedule" class="style14">Schedule</a></li> 　　　<li><a href="#Contact" class="style14">Access</a></li> 　　</ol> 　</div> <div> だったとします。 div.header div.nav ol,div.header div.nav ol li{ display:block;list-style:none; margin:0;padding:0; text-align:center;/* これも継承する */ position:relative;/* 継承しない */ line-height:30px; height:30px; } div.header div.nav ol:after{content:"";display:block;clear:left;} div.header div.nav ol li{ width:24%;/* 25%じゃ折り返されることがある(borderをつけたとき) */ float:left;/* 本来はdisplay:inline-block; */ } div.header div.nav ol li a{ display:block;width:100%;height:100%; text-decoration:none; background-color:white; } div.header div.nav ol li a:hover{ background-color:yellow;/* keywordで指定できる16色はkeyword */ } とか、header,navはひとつのHTML内に何度も登場するものなのでclassにしておき、スタイルシートは子孫セレクタを使って区別する!! 　上記の例だと、headerDIV内のnavDIV内のol,liについてという意味ですね。 　セレクタの書き方を身につけないとHTMLが煩雑（当然スタイルシートも）になりますよ。ただし、DWは面倒見てくれません。
　CSSのposition:fixedを使いますが、この手法に対して良く使われる名称は「擬似フレーム」です。 　 　例ですが、分かりやすいのでHTML5で書くと <body> 　<header> 　　<nav></nav> 　</header> 　<section> 　　<nav></nav> 　</section> 　<footer> 　</footer> </body> 　　(注)旧 HTMはそれぞれ<div class="header"><div class="nav">となります。 　　class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　ここで、 header nav{position:fixed;top:0;left;0;} header{height:200px;} section nav{position:fixed;left:0;top:200px;width:200px;} 　とか
まず、cssの指定の仕方自体よくかわっていないようですね。 > .table tr > .table td こういう指定なら、htmlにはこのように書かなくてはなりません。 <table class="table"> <table class="css">とhtmlに記述した場合は、 cssの書き方はこんな感じです。 > .css tr > .css td クラス名と、それに対する指定の仕方をもう一度おさらいしましょう。 質問の件に関しては、基本的にはNo.2の方が言うように「>」を使えば楽ですが、 古いブラウザ（IE6等）では正しく表示されません。 古いブラウザにも対応した形で作るなら、 一度指定したものを、下層で打ち消す（または別の指定をする）必要があります。 .css td{ 　　　width:100px; } .css table td{ 　　　width:auto; } というような感じですね。
a:hover なら古いIEでも動作できますが、 a以外の :hover この疑似クラスは、古いIE(IE6以下)では動作しないでしょう。 つまり、 標準モード＆ ？？:hover だと、IE7以上なら動作するはずなので、 貴方のHTML/DTDが過去モードになっているとか、古いIEを利用しているとか・・・と推測できます。
<p style="float:left">テキスト・・・<span style="float:right">詳しくはこちら</span></p> ウインドウサイズと文字数の関係で、『テキスト・・・』が右端でちょうど終わっても『詳しくは』と重なる事もないと思います。 <td>の中なのでclearは不要だと思います。 <span>を使わずに<a style="float:right">でも良いと思います。 （タグ数を減らしシンプルにするために、できるだけ<span>を使わない方を推奨です。） ※line-height、font-sizeが異なる場合、その影響を受けるかもしれません。
最終的には、ウェブサイトを巡回して目視で確認するのが確実でしょうね。 無料テンプレートの場合は、著作権法違反を訴えるリスク、 つまり、どこで侵害が合ったかを調べる労力、調査費、人件費、さらに侵害に対する対応費を考えれば、 放置する方がマシだと考えるのが一般的だと思います。 GNU GPLでは大きな規模で侵害が合った場合はライセンス違反（利用規約違反に相当）として裁判になったりしてますが、 大きくならないとバレない、小規模な侵害では被害額よりも裁判費用などの方が大きいという問題があります。 >自分はhtmlとcssしかほぼわからないのでphpなどで対策の方法があるのでしょうか？ CMS テーマやプラグインなどは「制作者自身のサーバーにアクセスして何らかの処理を行う」という対策が施されているものがありますが、 その部分を削除すれば自由に使えるようになりますね。 ソースコードで提供されている以上、防ぎようがないと思います。
<noscript> <p>JavaScript を有効にしてご利用下さい.</p> </noscript> ｂｏｄｙのトップに書かれてますが見られないのかな？
以下のURLを参照したところ、AptanaStudio3.4.1あるいは3.5.0にて修正されている模様です。 https://jira.appcelerator.org/browse/APSTUD-7825 3.4.1のリリースは…明日？ https://jira.appcelerator.org/browse/APSTUD#sele …
アップロードしたときに確認しているブラウザはChromeではないのでしょうか？ ローカルとサーバーで、両方ともChromeで確認しているにもかかわらず、サーバー側でのみ表示が崩れるのでしょうか？ コードも、URLもないので憶測でしかお答えできませんが、まず確認するのは、CSSのリンク設定です。 head内に<link>タグでCSSファイルが読み込まれていると思いますが、その読み込み先がちゃんと設定されていますか？ まれに「<link href="C:\Document and Settings\・・・">」などとなっているままアップロードされているページを見かけることがあります。 そうではない場合は、せめてテストアップロードしたURLと、正常にローカルで見えているキャプチャ画像を添付して下さい。 それでお答えできる範囲が広がります。
No.1です。 いまいち希望が汲めないので、これで合っているかどうかもわかりませんが、HTML、CSS両方に手を加えています。 見やすいように、変更点のみ記載します。 <!-- HTMLのLIST内のみ変更 --> <li class="products"> 　　<p class="alignCenter"><a href="#"><img src="img/1.jpg" alt="" class="product-img" /></a></p> 　　<h3>商品名</h3> 　　<p>価格：&yen;200,000</p> 　　<p><a href="#">商品詳細ページ</a></p> 　　<p class="alignCenter"><a href="#"><img src="cart.jpg" alt="ショッピングカート" width="" height="" /></a></p> </li> /* CSSの変更点 */ .products{ 　　list-style-type: none; 　　float: left; 　　width: 120px; 　　padding: 5px; 　　height: 170px; 　　background: #F3F59C; 　　margin-top: 10px; 　　margin-right: 0px; 　　margin-bottom: 0px; 　　margin-left: 10px; } .products p { 　　padding: 0px; 　　margin-top: 0px; 　　margin-right: 0px; 　　margin-bottom: 5px; 　　margin-left: 0px; } .products h3 { 　　padding: 0px; 　　font-size: 1em; 　　margin-top: 0px; 　　margin-right: 0px; 　　margin-bottom: 5px; 　　margin-left: 0px; } .alignCenter { 　　text-align: center; }
プログラムがどこにも無いので回答不能ですね。
＞レスポンシブWEBデザインは、 ＞例えば、次のようにデバイスの横幅によって異なるデザインのサイトを表示させるわけですよね。 いいえ、私はこの使い方は本質的には良くないと思います viewportのサイズ（screen.widthとは関係ない）に頼るのがこの先どれだけ有効かわからないからですmedia screenはカラムがへんな風に折り返されたりしないよう調整するのが関の山です とはいえ、他にいい方法がないのでやっぱりブラウザに期待するしかないのが現状です まあdpi(真の解像度)を見たり http://moshimoworks.com/2012/04/06/viewport-and- … pxではなくインチで指定するといったことで多少は改善できるかもしれませんが どんな方法でもどこかで妥協が必要です 大事なのは、副作用が無いことです 例えばUAにAndroidとあるからモバイルだとか、Firefoxとあるからデスクトップだとか とするのは大間違いなのはわかりますよね？ 反対にmedia screenは役に立たないことはあるかもしれないけれど副作用は少ないです 基本的にターゲットデバイスに合わせて設計し、マルチデバイスについては そういった「無いよりマシ」の積み重ねをするのがいいのではないかと思います また、ユーザーがスタイルを選べるようにするというのも有効だと思います
とある専門学校のfloatプロパティのテスト http://web.archive.org/web/20120324080338/http:/ … ２問目が分かれば、わかるかな？って感じですね。 答えは下の方にあります。フロート（浮くもの）は本来の流れから切り離されてるので、自分がいないところには背景が来るんですよね。そこのところをわかっていないと苦しいかな？ floatの本質的な理解があれば、上記テスト全問正解は基本的なことですので、簡単！
文字コードutf-8で「ショップ」という名前のフォルダを作ってください。%e3%82・・・ とかじゃなくて。
実機持ってないんで試せないですがiphone用に　-webkit-text-size-adjust　っていうプロパティがあるみたいですね。
IE側が間違った解釈をしています。 DOCTYPEを <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> に変更すること。 　また、さすがなtransitionalでは古いので <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 　としてHTML4.01strictで作成する。 　1999年『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　　XHTML1.1、HTML5ではstrictと宣言しなくてもstrictしかなくなので。 ※原因は、IEはウェブ標準ではない古いIE向けに作成されたページを見るための 　　　　　　　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　互換モードがあり、<DOCTYPE>でその判断をしています。他のすべてのブラウザや新しいIEは標準モードですから、齟齬が生じるのです。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> のものをstandard.html <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"> のものを、Quirks.htmlと言う名前で保存して、IEで表示してみてください。 [サンプル] <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> <html lang="ja"> <head> <meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> <title>サンプル</title> <meta name="author" content="ORUKA1951"> <meta http-equiv="Content-Style-Type" content="text/css"> <link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > <link rel="START" href="../index.html"> <style type="text/css"> <!-- div.header,div.section,div.footer{width:80%;margin:0 auto;position:relative;} div.section:before{content:"\A";white-space:pre;display:block;} div.navi{height:38px;} div.navi a{ font-size :12px; height:30px; border:outset #33ffff 4px; background-color: #3399ff; color:white; margin:0px 0px 0px 0px;/*間隔１*/ padding:0.25em; display:block; width:13%; float:left; } div.navi a:hover{ border:inset #33ffff 4px; } --> </style> </head> <body> <div class="header"> <h1>タイトル</h1> <DIV class="navi a" align="center"> <A href="purchase.shtml">商品の購入方法</A><A href="torihiki.shtml">特定商取引事項</A><A href="question.shtml">ご質問</A><A href="company.shtml">会社概要</A><A href="sightmap.shtml">サイトマップ</A><A href="andlink.shtml">その他リンク集</A> </div> </div> <div class="section"> <h2>見出し</h2> <p>・・・</p> </div> <div class="footer"> <h2>文書情報</h2> </div> </body> </html>
filter 機能は IE9 にて廃止されたようです。互換表示機能を有効にすれば、まだ使えるかもしれませんが、イマドキの方法で代替するほうが現実的でしょう。 というわけで jQuery で代替する場合です。 <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9. … <script>$(function(){ var links = [ {src:'00.JPG', href:null}, {src:'aa.jpg', href:'./aaa.html'}, {src:'bb.jpg', href:'./bbb.html'}, {src:'cc.jpg', href:'./ccc.html'} ]; var linkIndex = 0; function hyouji() { linkIndex %= links.length; var o = links[linkIndex++]; var e = $('img.changer'); e.parent('a').attr('href',o.href); e.fadeOut(500); e.queue(function(){e.attr('src',o.src).dequeue()}); e.fadeIn(500); } setInterval(hyouji,5000); });</script> <a href="#"><img src="00.JPG" class="changer"></a>
様々なウィンドウサイズを対象とする場合、基本はリキッドデザインです。 そのうえで、特別狭いディスプレイに対してmediaqueryを使用します。 したがって、そのようなところで悩むことはありません。 mediaqueryを使用する場合、どちらかと言うと640pxあたりで、それより広いディスプレイに対応したりキッドデザイン。内容によるとi-phoneなどを縦置きにして480pxより小さい画面に対処させる。 ＞解像度が1024×768 　これは、パソコン特にノートなどでの解像度ですね。 　基本的には、このサイズでデザインしています。 　　例えば800px以上の幅はひとつとかです。 　⇒少しのコードで実装可能な15のスマートフォンサイト用小技集 | Webクリエイターボックス( http://www.webcreatorbox.com/tech/smartphone-sni … ) 　
　私も HTML と CSS を勉強中で、昔おなじことに相当悩みました(^_^) 　最近は《UTF-8》が一般的なそうなので、まずは 　　<meta http-equiv="Content-Type" content="text/html; charset=Shift_JIS" /> を 　　<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /> に直します。 　そのうえで、《UTF-8N》という文字コードに対応したエディタを使います。つまり、《content="text/html; charset=UTF-8" /》で作成したウェブページを、《UTF-8N》形式で保存するのです。『メモ帳』は、こうした細かい設定ができないために文字化けするそうで、私も失敗しています。 　なお、そのときは下記の過去質問とエディタが役に立ちました。このエディタは、《タグ入力補完機能》があるので便利ですよ。 　　◆shift_jisとutf-8 | その他([技術者向] コンピューター)のQ&A【OKWave】 　　　http://oshiete.goo.ne.jp/qa/3178822.html 　　◆HeTeMuLu Creator - Hosiken Labs 　　　http://hosiken.jp/dev/hetecre/
ごく簡単な例をHTML4.01strictとHTML5で上げておきます。 ウィンドウ幅は、スマホの480px以上だと追随します。幅広ディスプレイでは1200px幅で中央 ★ウィンドウ幅を変化させて確認 白文字なので印刷では適用されません。印刷プレビューで確認 　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# )のDATA 　⇒W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み HTMLには文書構造しか書かない!! ★タブは＿に置換してあるので戻すこと!! [HTML4.01] <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<style type="text/css" media="screen"> <!-- html,body{ margin:0;padding:0; background-color:black;color:white; } div.section,div.footer{ width:100%;min-width:480px;max-width:1200px;margin:0 auto; } h1,h2,h3,p{margin:0;line-height:1.6em;} div.header{position:absolute;z-index:10;width:100%;} div.header h1,div.header p{ width:100%;min-width:480px;max-width:1200px;margin:0 auto; } div.section{ width:100%;min-height:430px; background:url(./images/1200_510.jpg) 50% 50%; background-size:cover; padding-top:80px; } div.footer ul,div.footer ul li{ list-style:none;margin:0;padding:0; text-align:center;line-height:30px; } div.footer ul{margin:15px 10px;} div.footer ul li{ display:inline-block; width:10%;height:30px;position:relative; padding:0 5px; } div.footer ul li+li{border-left:solid 1px white;} div.footer ul li a{ display:block;width:100%;height:100%; text-decoration:none; } div.footer ul li a:hover{background-color:gray;color:red;} div.footer address{text-align:center;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>ページタイトル</h1> ＿＿<p>メッセージ</p> ＿</div> ＿<div class="section"> ＿＿<h2>本文見出し</h2> ＿＿<p>本文記事</p> ＿</div> ＿<div class="footer"> ＿＿<ul> ＿＿＿<li id="top"><a href="index.html">top</a></li> ＿＿＿<li id="profile"><a href="profile.html">profile</a></li> ＿＿＿<li id="audition"><a href="audition2.html">audition</a></li> ＿＿＿<li id="news"><a href="news.html">news</a></li> ＿＿＿<li id="contact"><a href="mail.html">mail</a></li> ＿＿＿<li id="link"><a href="link.html">link</a></li> ＿＿</ul> ＿＿<address>00000000000000</address> ＿</div> </body> </html> [HTML5] <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> <!--[if IE]> <script src="http://html5shiv.googlecode.com/svn/trunk/html5. … <script src="http://css3-mediaqueries-js.googlecode.com/svn/t … <![endif]--> <style media="screen"> <!-- html,body{ margin:0;padding:0; background-color:black;color:white; } section,footer{ width:100%;min-width:480px;max-width:1200px;margin:0 auto; } h1,h2,h3,p{margin:0;line-height:1.6em;} header{position:absolute;z-index:10;width:100%;} header h1,header p{ width:100%;min-width:480px;max-width:1200px;margin:0 auto; } section{ width:100%;min-height:430px; background:url(./images/1200_510.jpg) 50% 50%; background-size:cover; padding-top:80px; } footer ul,footer ul li{ list-style:none;margin:0;padding:0; text-align:center;line-height:30px; } footer ul{margin:15px 10px;} footer ul li{ display:inline-block; width:10%;height:30px;position:relative; padding:0 5px; } footer ul li+li{border-left:solid 1px white;} footer ul li a{ display:block;width:100%;height:100%; text-decoration:none; } footer ul li a:hover{background-color:gray;color:red;} footer address{text-align:center;} --> </style> </head> <body> ＿<header> ＿＿<h1>ページタイトル</h1> ＿＿<p>メッセージ</p> ＿</header> ＿<section> ＿＿<h2>本文見出し</h2> ＿＿<p>本文記事</p> ＿</section> ＿<footer> ＿＿<ul> ＿＿＿<li id="top"><a href="index.html">top</a></li> ＿＿＿<li id="profile"><a href="profile.html">profile</a></li> ＿＿＿<li id="audition"><a href="audition2.html">audition</a></li> ＿＿＿<li id="news"><a href="news.html">news</a></li> ＿＿＿<li id="contact"><a href="mail.html">mail</a></li> ＿＿＿<li id="link"><a href="link.html">link</a></li> ＿＿</ul> ＿＿<address>00000000000000</address> ＿</footer> </body> </html>
＞で以下のイメージを作る場合のCSSを教えて欲しいです、、、 どうぞよろしくお願いします！ 　そのままで良いですが、一部 div.section dl dd+dd{border-top:1px gray solid;line-height:1.6em;text-indent:1em;} とするだけ。 　意味は自身で調べてください。 　そのほうが生きる!! 　⇒セレクタ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )
CSS3を理解しない古いブラウザには意味がない。 　様々な大きさのディスプレイが混在する現在、欠かせない技術ですが、基本はリキッドデザインでデザインし、それでも足りないときに使えばよいかと。 　たった一つのHTMLで、様々なユーザーエージェントが利用できるというHTMLの目的を考えたらよろしいかと 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より
＞この部分を、親コンテナの500pxを無視して、画面いっぱいの表示は可能でしょうか・・・。 　これは仕様上できないのです。 　文書構造上、親コンテナブロック内の要素は、DOM上でその配下にありますから、それを外れるためには、absoluteで外さなければなりません。そうすると、その要素は親コンテナブロック内には存在しないことになりますから、それに続く要素は、そのabsoluteされた要素が存在しないように配置されてしまいます。 　方法は、article(main_container)に幅を指定しないで、その内容に500pxを指定するしかないでしょう。 　結果的に全く同じになります。構造上も不整合ではありません。 ※main_containerではなく、articleが良いでしょう。--class名は文書構造を補完するためのものです。 　HTML5では内部にheader,section,footerを持つ、あるいは持つと想定される完結したブロックを示します。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　これが理解されなかったため、新しい要素が追加されます。 ★HTMLを書くときは、文書構造だけをマークアップする。HTML5では強く指摘されています。それに逆らわなければ樂です。将来どのようにもデザインできます。 ★HTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )の名称と用途はHTMLをマークアップするときのとても良い参考になります。 以下注意事項!!!よく読んでください。 ★タブは＿に置換してあります。 ★HTML5にするときは、そのまま <div class="header"></div>→<header></header> <div class="article"></div>→<article></article> にすること。 　⇒The W3C Markup Validation Service( http://validator.w3.org/#validate_by_input ) 　⇒W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み!! nth-child(2n)擬似クラスはCSS3のものです。CSS2.1の範囲で書くならclassにすると良いでしょう。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;background-color:white;} body{width:100%;position:relative;} div.header, div.section div.section, div.footer, div.section h2, div.section p{ width:480px;padding:10px;/* 480+10+10=500 */ margin:0 auto;background-color:silver; } div.section div.section p{ width:auto;padding:0;background-color:transparent; } h1,h2,h3,p{margin:0;height:1.8em;} div.section div.section:nth-child(2n){width:100%;background-color:red;} --> ＿</style> </head> <body> ＿<div class="article"> ＿＿<div class="header"> ＿＿＿<h1>タイトル</h1> ＿＿＿<p>このページでは・・・・</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h2>本文</h2> ＿＿＿<p>記事段落</p> ＿＿＿<div class="section"> ＿＿＿＿<h3>記事タイトル</h3> ＿＿＿＿<p>記事</p> ＿＿＿</div> ＿＿＿<div class="section"> ＿＿＿＿<h3>記事</h3> ＿＿＿＿<p>記事</p> ＿＿＿</div> ＿＿＿<div class="section"> ＿＿＿＿<h3>記事</h3> ＿＿＿＿<p>記事</p> ＿＿＿</div> ＿＿＿<div class="section"> ＿＿＿＿<h3>記事</h3> ＿＿＿＿<p>記事</p> ＿＿＿</div> ＿＿＿<div class="section"> ＿＿＿＿<h3>記事</h3> ＿＿＿＿<p>記事</p> ＿＿＿</div> ＿＿</div> ＿＿<div class="footer"> ＿＿＿<h2>文書情報</h2> ＿＿＿<dl class="documentHistry"> ＿＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿＿<dd>2012-08-10</dd> ＿＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿＿</dl> ＿＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿＿</div> ＿</div> </body> </html>
どうやらこちらの環境では機能しているようですが・・・ 12.01では動作しています。 試しに12.15にアップデートしてみました。 問題なく動作してます。 @media (min-resolution: .001dpcm) { /* opera12 */ _:-o-prefocus, body { margin-top:500px; }; } 以上の記述で、IE、Chromeでは特に表示に影響はなく、Operaのみドバッとマージンが適用されています。
＞次のページには、ＩＥ７はチャイルドセレクタと隣接セレクタのいずれにも対応している旨の記載がありますが実際どうなんですかね。 　実際に試してみれば分かる。 　ウェブ上にある情報はすべて正しいわけじゃない。
＞画像置き換えの場合text-indent:-9999px;やdisplay:none;とした際、評価が下がるとのことです。 　それはありません。 　それがまずいと判断されるのは、隠しリンクになっていたり、コンテンツ自体を隠してしまったときだけです。 　javascriptを使うと、javascriptでドキュメントの書き換えやjavascript自体を無効にしているユーザーに表示されないこと。そしてなによりも検索エンジンにリンクを知らせることが出来ない欠点があります。googleには、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ Lynx などのテキスト ブラウザを使用して、サイトを確認します（ほとんどの検索エンジンのスパイダーには Lynx で見えるようにサイトが映ります）。JavaScript、Cookie、セッション ID、フレーム、DHTML、Flash などの特殊な機能が使用されているためにサイトの一部がテキスト ブラウザで表示されない場合、検索エンジンのスパイダーがサイトをうまくクロールできない可能性があります。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ( http://support.google.com/webmasters/bin/answer. … )］より 　CSSを使う一番の理由は、まさにSEOなのです。HTML自体は検索エンジンには率直で文書構造がはっきり理解できるものになっています。(ソースを見ると) 　それでいて、CSSを書き換えると、様々にデザインできます。(表示メニューからスタイルを選択してみる。また印刷プレビューも確認) 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　添付はLynxで見たとき
まずidは同一ページ内はユニーク。 <div id="(1)"></div> が二つあっちゃダメ。 あなたの思うように表示というのがどのような表示だかわからない。 実際どういった表示にしたいの？
既に回答が出ている通り、例のサイトはjavascriptを使ってます。jqueryなどのライブラリを使えばさほど実装するのは難しくないと思いますが、javascriptをまったくご存じない場合は、理解するのに少し時間がかかるかもしれません。 javascriptを使わずに、cssだけでスライドショーを作ることも可能です。 その場合は、css transitionを使います。詳しくは、検索して確認してみてください。 と言っても、cssをあまりご存じない場合は、やはり少し難易度は高いと思います。
私は、Wordpressを使うときも、SEOの観点からお仕着せのidやclass名を使いませんが、 ＞id セレクタの並列記載について 　並列記載ではありません！！！！並列記載(グループ化)は、#contents,#sidemenu{}と書きます。間の半角スペースには大事な意味があります。 #contents #sidemenu { と書かれているということは、子孫セレクタを表しています。一意セレクタである#contentsの子孫の#sidemenuについての指定ですね。 　本来一意セレクタは、ひとつの文書内に一回しか出てこないため、屋上屋を重ねるような書き方はしないのですが、この様な書き方がされているということは、 ・その外部スタイルシートが他のページでも使用されている。 ・#sidemenuが、他の子孫であるときがある。 のときですね。 　別のページではDOMツリーが #header 　|-- #sidemenu となっている可能性があり、その場合はデザインが異なるという事です。 ＞contents と sidemenu の両要素を反映させるために 　これは、根本的な意味で間違いです。 　contents と sidemenu　はid名ですから、#contentsは「contentsというidを持つすべての要素」 と #sidemenuは「sidemenuというidをもつすべての要素」に対するセレクタです。 ＞いろいろな Web の CSS を参考にして CSS を書いているのですが、 　これは最悪の習得パターンで、多くの場合、誤った記載を身につけてしまいます。Web上にある大多数のサイトは間違っているのですから。 　参考にするのでしたら仕様書、リファレンスです。 <div id="contents"> あいうえお <div id="header"> かきくけこ </div> <div id="sidemenu"> メニュー </div> さらにコンテンツ </div> んな書き方は典型的な誤りです。 HTML4.01(1999年以来) 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』とされているはずです。これでは、あなたがお書きになったように、正しく理解されなかった反省から、HTML5では、『文書をよりよく構造化するために、次の要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』 section,article,aside,hgroup,header,foote・・・・・ 　<div class="header"> 　　かきくけこ 　</div> 　<div class="section"> 　　本文 　　<div class="nav"> 　　　メニュー 　　</div> 　</div> のように書かれることが期待されていたのです。ナビゲーションをスタイルシートで、サイドに表示しようが、ページのトップに表示しようが、ページの最下段に横並びにしようが、それはプレゼンテーションの話で、文書構造ではありません。 　スタイルシートも、 　div.header div.nav{} と 　div.section div.nav{} で（子孫セレクタで）区別できるのですから、詳細度の高い扱いにくい一意セレクタを使う必要もなくなります。 スタイルシートは、 div.header,div.section{ width:800px; background-color:white; margin:0 auto; } div.header{ background: #FFFFFF url(title.gif) no-repeat center top; height: 60px; text-align: center; } div.section{ position:relative; } div.section>*{ margin-left:160px; } div.section div.nav{ margin: 5px; position:absolute; left:0;top:0; width: 160px; } だけですむ。 Webで、正しい情報を得るのは、藁の中の針を探すより難しいです。 HTMLもCSSもまず、仕様書を読みましょう。
レスポンシブの全体としてリキッドデザインを身につけましょう。 レスポンシブの必要すらない場合が多いです。 pに幅を指定してしまえば、縮まなくなります。 たとえば、 ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) のページ、表示メニューから[スタイルシート]に進み、どのスタイルを選択しても、640px以上でしたら自在に伸縮するはずです。もちろん大きなディスプレイではある程度以上は広がりません。 　そのうえで、レスポンシブが必要なら、縦置きスマホなど小さいディスプレイには、mediaqueryで切り替えて、サイドに表示されるものを下に回すとかになるかと思います。
実現されたいことがわからないので、 なんとも言えない部分はありますが、 以下が参考になるかもしれません。 複数のドメインに対するクロスドメイン トラッキングを設定する https://support.google.com/analytics/answer/1034 … ご参考まで。
<table border="0" cellpadding="2" cellspacing="1" bgcolor="#E0DFE3" width="150"> <tr align="center" bgcolor="#FFFFFF"> <td colspan="7">2013年5月</td> </tr> <tr align="center" bgcolor="#F0F0E0"> <td>日</td> <td>月</td> ～～～～～～～これなら同じかな。 強いて言うと、 見た目の装飾は、CSSでやった方が良いです。色々できます。 <style type="text/css"> table#calendar{ width: 150px; text-align: center; background-color: #FFF;} table#calendar,table#calendar td{ border: 1px solid #E0DFE3; border-collapse: collapse;} table#calendar thead{ background-color: #FFF;} table#calendar th,table#calendar td{ padding: 2px;} table#calendar #week{ background-color: #F0F0E0; font-size:87.5%;} table#calendar .emp{ background-color: #FFF; empty-cells: show;} table#calendar col.sun{ background-color: #ef6e5d;} table#calendar col.sat{ background-color: #87CEFA;} table#calendar .day-off{ background-color: #FFC0CB; color: red;} </style> <table id="calendar" summary="カレンダー"> <col span="1" class="sun" /><col span="5" /><col span="1" class="sat" /> <thead> <tr><th colspan="7">2013年5月</th></tr> <tr id="week"><td>日</td><td>月</td><td>火</td><td>水</td><td>木</td><td>金</td><td>土</td></tr> </thead> <tbody> <tr> <td colspan="3" class="emp"></td> <td>1</td> <td>2</td> <td class="day-off">3</td> <td>4</td> </tr> <tr> <td>5</td> <td class="day-off">6</td> <td>7</td> <td>8</td> <td>9</td> <td>10</td> <td>11</td> </tr> <tr> <td>12</td> <td>13</td> <td>14</td> <td>15</td> <td>16</td> <td>17</td> <td>18</td> </tr> <tr> <td>19</td> <td>20</td> <td>21</td> <td>22</td> <td>23</td> <td>24</td> <td>25</td> </tr> <tr> <td>26</td> <td>27</td> <td>28</td> <td>29</td> <td>30</td> <td>31</td> <td class="emp"></td> </tr> </tbody> </table>
おそらくフォントのパスの問題じゃないですかね。 試しにhttpから始まる絶対パスで指定してみてはどうでしょうか。
http://www.cssplay.co.uk/menus/flyout4.html 等はいかがでしょうか？若干美しくないソースですが、ie6等に対応するためで、そのあたりへの配慮をなくせば美しいソースとなります。 例の1と2.3の違いは親要素のpositionをどこにするかだけですので、サンプルを解読、比較すれば自分で作れるようになると思います。上記サンプルを利用すれば、著作権配慮の制約がありますので、ご自分で組めばそんなもの必要なくなります。 蛇足ですが、ドロップダウン・フライアウトメニューはアクセスビリティ上問題が多くあります。 また、同じサイト内にメガドロップダウンメニューのサンプルもあります。 http://www.cssplay.co.uk/menus/pro-flyout-list.h … http://www.cssplay.co.uk/menus/html-plus-time-fl … 要望とは少し違いますが、こちらの方がアクセスビリティ上好ましいようです。参考になれば幸いです。
いろいろ方法はあると思いますが、質問者さんがご存知の方法でもできますよ。 まず、index.html自体を.htaccessを使って振り分ける方法は分かるのですよね？ それを前提にすると、index.htmlは入場リンクを置いて、そのリンク先はindex2.htmlとする。その上で、index2.htmlへのアクセスを.htaccessを使って振り分ければよいのかと思います。
phpやperlなどのサーバーサイドプログラムとデータベースの知識をお持ちであれば、可能です。しかし、こういう質問をされている以上は、その類の知識を有されていないでしょうから、質問の意図は、「プラグインや簡単ツールを利用して素人でもできるか」ということになりますね。その答えは、「おそらくできません」です。
SEO(Search Engine Optimization)を直訳すると検索エンジン最適化です。それ自体「対策」と言う意味を持っていますから、「SEO対策」では「馬から落ちて落馬して」になっちゃいます。(^^) 　SEOの意味とは・・ 　Wikiの記事にも矛盾があるのですが・・本来は、本当に率直に、「検索エンジンにページの内容を正しく適切に理解されるようにHTMLをマークアップする作業」のことでした。 　ところが、似た様な内容のサイトがこんなに沢山増えてしまうと、【ずばり表現すると】「如何に検索エンジンを騙して上位に持ってくるか」になってしまいました。 　Googleが ・ウェブマスター向けガイドライン( http://support.google.com/webmasters/bin/answer. … ) 　で言っているように、このページでもふたつの意味で書かれています。ひとつは{SEO業者}というフレーズでのSEO、そしてこのページで説明している純粋な意味でのSEO 品質に関するガイドライン - 基本方針 　・検索エンジンではなく、ユーザーの利便性を最優先に考慮してページを作成する。 　・ユーザーをだますようなことをしない。 　・検索エンジンでの掲載位置を上げるための不正行為をしない。ランクを競っているサイトや Google 社員に対して自分が行った対策を説明するときに、やましい点がないかどうかが判断の目安です。その他にも、ユーザーにとって役立つかどうか、検索エンジンがなくても同じことをするかどうか、などのポイントを確認してみてください。 　・どうすれば自分のウェブサイトが独自性、価値、または魅力のあるサイトといえるようになるかを考えてみる。同分野の他のサイトとの差別化を図ります。 　⇒品質に関するガイドライン( http://support.google.com/webmasters/bin/answer. … ) 　より・・ 　
他人から引き継がれたものとのこと・・ 不可能です。 　拝見した限りでは、HTMLはとっても酷いものです。 Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) 　でチェックしてみてください。 　そのようなものをデザインしなおすなんて、私でしたら百万円もらっても請合いません。数ヶ月忙殺される。 　No.1で示したようなHTMLでしたら、喜んで引き受けますよ。実際にコピーして試して御覧なさい。 　ゼロから作り直すほうが、はるかに早くよいものが出来るでしょう。時間も労力も・・
60%とか39%だと、borderが2px×数本入れると100%をオーバーしてしまう可能性がある。 marginを設定すると計算も狂う。 float:left; これらの設計（数値）を計算というか想定しないとNGです・・・ また、DTDの過去/標準のモードによっても計算方法が違います・・・ 旧IEでも過去モードでも標準モードでも両方の条件で同じ表示、またリキッドにするならDIVを二重にする方法が安全です。 ※構造や方向性が一本ならこのように多重DIVを利用する事はないのですが・・・ <div id="box"><div id="box2"> <div class="box1"><div>本文</div></div> <div class="box2"><div>本文</div></div> <div id="box3"><div>本文</div></div> </div></div> #box{width:80%; border:1px solid black;} #box2{ margin:5px;} #box2 div div{ border:2px dotted #6ebef2;} .box1{ float:left;width:60%;} .box2{ float:right;width:39%;} #box3 { clear:both; padding:10px 0;} #box3 div{ height : 20px; background-color:white; text-align: right;}
CSSを期待通り適用させるためにはHTMLが正しくないと。 CSSより先にHTMLをきちんと学んでください。そのほうが断然早道です楽です。 HTMLは文書構造だけをマークアップするものです。そのためHTMLは誰(機械を含めて)にでもわかるし、それに基づいてCSSが書けます。 自分で書かれた質問を読み返されても、さっぱりわからないと思います。 たとえば、下のような説明だとどうでしょう。 　header内に見出しとナビゲーションがあり、5項目からなるナビゲーションは横並びに配置します。 　本文(section)の見出しは画像で表示して、その下に人気記事(.popular)と新着情報(.news)からなる本文記事を左右二コマの段組にしたい。 　記事のフッター(footer)はその下に 　ページ全体は画面中央に表示することにし、スマホや幅広ディスプレイに対応させるため最小400px、最大640pxにまとめたい。 　これだとHTMLを示されなくてもスタイルシートが書けます。 [HTML4.01]だと <body> 　<div class="header"> 　　<h1>ページタイトル</h1> 　　<div class="nav"> 　　　<ol> 　　　　<li><a href="link01.html">リンク01</a></li> 　　　　　・・・【中略】・・・ 　　　</ol> 　　</div> 　</div> 　<div class="section"> 　　<h2><img src="gazou01.jpg" alt="画像01" width="400" height="300"></h2> 　　<div class="section popular"> 　　　<h3>人気記事</h3> 　　　<p>記事</p> 　　</div> 　　<div class="section news"> 　　　<h3>新着情報</h3> 　　　<p>記事</p> 　　</div> 　</div> 　<div class="footer"> 　　<h2>文書情報</h2> 　<//div> </body> [HTML5]だと <body> 　<header> 　　<h1>ページタイトル</h1> 　　<nav> 　　　<ol> 　　　　<li><a href="link01.html">リンク01</a></li> 　　　　　・・・【中略】・・・ 　　　</ol> 　　</nav> 　</header> 　<section> 　　<h2><img src="gazou01.jpg" alt="画像01" width="400" height="300"></h2> 　　<section class="popular"> 　　　<h3>人気記事</h3> 　　　<p>記事</p> 　　</section> 　　<section class="news"> 　　　<h3>新着情報</h3> 　　　<p>記事</p> 　　</section> 　</section> 　<footer> 　　<h2>文書情報</h2> 　</footer> </body> その上で、スタイルシートを書きます。 ★されたいことが読み取れないのであくまでサンプルです。 ★HTMLは4.01strict、CSSは2.1です。2.1が現在のウェブ標準です。 　Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html# ) 　W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み ★タブは＿に置換してあるので戻すこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル0</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1,h2,h3,p,ol,ul,li{margin:0;line-height:1.6em;} div.header,div.section,div.footer{ width:100%;min-width:400px;max-width:640px; margin:0 auto; position:relative; } div.header div.nav ol,div.header div.nav ol li{ list-style:none; margin:0;padding:0; text-align:center; line-height:2em; } div.header div.nav ol{display:block;} div.header div.nav ol li{ display:inline-block;width:17%; position:relative; } div.header div.nav ol li a{ display:block;width:100%;height:100%; } div.section h2{height:300px;} div.section h2 img{display:block;width:100%;height:100%;} div.section div.section{ width:50%;margin:0; min-width:0; min-height:300px; } div.section div.news{ position:absolute;top:300px;right:0; height:auto; overflow:auto; } /* わかりやすいように色分け */ body{background-color:gray;} div.header{background-color:aqua;} div.section{background-color:white;} div.section div.section{background-color:silver;} div.section div.news{background-color:lime;} div.footer{background-color:fuchsia;} div.header div.nav ol li a{background-color:yellow;} div.header div.nav ol li a:hover{background-color:red;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>ページタイトル</h1> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="link01.html">リンク01</a></li> ＿＿＿＿<li><a href="link02.html">リンク02</a></li> ＿＿＿＿<li><a href="link03.html">リンク03</a></li> ＿＿＿＿<li><a href="link04.html">リンク04</a></li> ＿＿＿＿<li><a href="link05.html">リンク05</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2><img src="gazou01.jpg" alt="画像01" width="400" height="300"></h2> ＿＿<div class="section popular"> ＿＿＿<h3>人気記事</h3> ＿＿＿<p>記事</p> ＿＿</div> ＿＿<div class="section news"> ＿＿＿<h3>人気記事</h3> ＿＿＿<p>記事</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿</div> </body> </html>
単純なスペルミスです。 「border」のrが抜けているので、線と解釈できないだけ。
たぷん示されたものと期待通りにならないものが違う。 明らかな記述間違い .table2 TD { border: 1px #1C79C6 collapse; /* セルの枠線（太さ・色・スタイル） */ } を table2 TD { border: 1px #1C79C6 solid; /* セルの枠線（太さ・色・スタイル） */ } にするとちゃんとなるはず。 HTMLとCSSを書き直すと <table summary="WebDesign"><!-- summaryは必須 TBODY+ --> 　<tbody><!-- tbodyはひとつ以上必須 --> 　　<tr> 　　　<td>Webデザイン</td> 　　　<td>Webデザイン</td> 　　</tr> 　　<tr> 　　　<td>Webデザイン</td> 　　　<td>Webデザイン</td> 　　</tr> 　</tbody> </table> [CSS] table[summary="WebDesign"]{ border-collapse: collapse; width: 400px; } table[summary="WebDesign"],table[summary="WebDesign"] td{ boder:solid 1px #1C79C6; } CSS2以降では、基点となるタイプセレクタに続いてセレクタを書いていきます。 .から書き始めても*.と全称セレクタ(詳細度0)があるものとして扱われます。きちんと書いたほうが良いでしょう。 tableはsummary属性が必須(HTML5では必須ではなくなります。)でしたので、それ(要素セレクタ)を利用したほうがスマートでしょうね。 　同じプロパティ(boder:solid ipx #1C79C6;)でしたらセレクタをグループ化したほうがメンテナンスが楽です。（変えるときに分ければよい）一箇所変更すればよい。上記だと table[summary="WebDesign"]{boder-width:3px;} を追記すれば外枠だけ太くなる。
メールを送信するということは、 MUA (メールユーザーエージェント)からMTA(メール送信エージェント)にデータを送り、mail:プロトコルでインターネット上を転送し、最終的にMUAでそれをダウンロードして読むというものです。 　ここを理解されていますか？ 　一方<form>はサーバーに対してデータを送り、サーバーにあるMUAに該当するプログラムを実行させ、そのプログラムが処理--この場合メール形式に整形しMTAに渡す処理をさせる仕組みです。!!! 　<form action="サーバーのプログラム">という形式でなければなりません。!!! 　質問から、ひょっとしてサーバー側のプログラムを利用せず、ユーザーの持っているMUAを起動する方法を言われているのではないですか？ <form action="mailt:*****"> 　この方法は、正しくはありません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから action = uri [CT] 　この属性は、フォーム処理エージェントを指定する。HTTPスキームURI以外の値の場合のユーザエージェントの動作は、定義しない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Forms in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　この方法を使う限り!!!、ユーザーのMUAを使うわけですからメールアドレスは入ってしまいます。もちろん、利用できないユーザへも大半でしょうし、文字化けなどの原因にもなります。送信先のメールアドレスがさらされる危険もあります。 　サーバー側にCGIとしてルール送信プログラムを置いて処理すれば、ユーザーのメールアドレス、送信先のメールアドレスなんて自在です・・・・ ★ただし、SPAMの踏み台にされたり様々な問題があるので、注意深く設定してください。 　メール送信用CGIなんて腐るほど公開されていますから、よく検討してウィルスやSPAMの踏み台にされないよう注意深く設定してください。 CGI RESCUE - CGIフリーソフト( http://www.rescue.ne.jp/ ) 　の中ほど「フォーム・アンケート・エディタ ほか」 　　このサイトには基礎的な説明もあります。 　　下の方「基本的なことなど」をよく読んで。
tableをデザインに使うのは1999年のHTML4.01の勧告以来、とても厳しく否定されています。 ・単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ・ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　また、class名はあくまで文書構造を補完するためでデザインのために書くのではありません。HTMLに用意された要素(タグ)では足りないときに使います。 　示されたHTMLでは文書構造が全くつかめません。これは重大なことなのですよ。 ・構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　で言っていることは，HTMLでは文書構造だけをマークアップせよという事です。それが判らないと手が付けられません。 　HTML5では、「id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」が理解されなかった反省から、わざわざ新しい要素が追加されました。 　⇒HTML5/新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　例えば・・次のようなHTMLだとします。 <body> 　<div class="header"> 　　<h1>タイトル</h1> 　　<div class="nav"> 　　　<ul> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　</ul> 　　</div> 　</div> 　<div class="section"> 　　<h2>本文見出し 　　<div class="section"> 　　　<h3>サブタイトル</h3> 　　　<p>記事</p> 　　</div> 　　<div class="contentTable"> 　　　<h3>このページの目次</h3> 　　</div> 　　<div class="aside"> 　　　<h3>補足記事</h3> 　　</div> 　</div> 　<div class="footer"> 　　<h2>文書情報</h2> 　</div> </body> というHTMLだったとします。検索エンジンにも、第三者のあなたでもどこに何が書かれているか一目瞭然でしょう。デザインは一切ないから、デザインを劇的に変更することも出来ます。 　これを希望されるようにデザインするのは難しくはありません。
問題のある個所を１つずつ検証されてはいかがでしょうか？ 【例】 table th:last-child{ border-radius:0 5px 0 0; border-right:1px solid #aaa; box-shadow:2px 0/*★2pxっておかしくない？*/ 1px rgba(0,0,0,0.1),0 -1px 1px rgba(255,255,255,0.5)inset,-1px 0 1px rgba(255,255,255,1)inset; } 私なら、 table{ margin-bottom:2em; border-spacing:0; font-family:"メイリオ"; border-radius:5px; box-shadow:2px 2px 1px rgba(0,0,0,0.1)} などとしておいて、tdやｔｈの影の負担を減らします。少なくともtdへのシャドウは不要になります。
WordPressは確かに今はブームになっている。 (WordPressの前はMTがブームだった) でもWordPressって他のCMSからみたら機能が貧弱すぎる。 WordPressって素人や駄目なWebデザイナ/ディレクタ向けのCMSって感じですね。 駄目な奴ほどブームにのりたがる。 実際にはWordPressではテンプレートの編集をしないと対応できない様なことが 他のCMSだと簡単にCMSの機能だけで設定できてしまうなんてよくあることですね。
ブラウザの種類 DTD 過去/標準の変更 ul,li{padding:0; margin:0;} clearfixを削除して検証（最少ソースで検証） 縮小したときの検証ツールでのレイアウト数値の調査 a要素の絡み テキストや画像の関係 その他のCSSが干渉？ *:first-child+html li{ letter-spacing: 0;} *:first-child+html li a{ letter-spacing: 0;}
img.logo{vertical-align:middle;} h1{display:inline;} -------------------- １、HTML5ではなく、互換性を考慮した方が良いのでは？　CSSが合って無いよ・・・ ２、各クラスも親要素のIDやclassのセレクタを利用 ３、画像パスに＠は利用しない方が良いよ。
CSS/HTML、どっちの変更でしょうか？ 表面上のデザインはCSSによってどうにでも変更できます。 このCSSでデザインを変更する事自体は、大きな順位の変更は無いでしょう。 これは、HTMLソースの変更が一切無いからです。 ただ、 デザインを変更するという事は、 CSS以外にもHTMLの構造を変更する場合や文章なども変更する場合も多いので、 HTMLをどういう構造にするかによって内部が変わってきますから、 マークアップを変更してしまうと、SEOにも影響します。 このマークアップが変わるという事は、 テキストのみを見るのではなく、ソース/コードを変更する事なので、 （Linuxなどでのテキスト差異確認ではなく、HTTPページ情報やHTMLソースでの差異を確認する事です） つまり、 検索エンジンの順位にも影響します。 （少しずつの場合が多い。アルゴリズムの影響もあるし） 但し、そのマークアップ次第ですし、多少の変更なら影響は薄いです。 主は、内容なので。 当然、その他の影響力も大きく、BigサイトならSEO力が強いので、 デザインを変更しようがビクともしません。 ＞大幅に変更 といわれれば、順位にも影響するともいえます。 つまり、 デザインの話ではなく、マークアップによる影響力のみでのSEOですが。 何故、素人の自作サイトをプロが編集したら順位が上がるのか？　それが答えです。
Photoshopは画像を作成するためのソフトで スタイルシート（css）はhtmlをレイアウトするための言語です。 使い方はそもそも違います。 通常サイトを作る際には、 PhotoshopやFireworksなどの画像処理ソフトでページごとにデザインを作成し、 デザインが決定してから、画像をパーツごとに切り分けて保存し、 htmlとcssで組み立てるという流れになります。 ＞ １．全体が３列で、その中の２列はどうすれば作れるか？ htmlの横配置は、cssのfloatという指定で行えます。 position等で配置する事も出来ますが、こちらはきちんとやるには比較的難易度が高いので、 初心者の方でしたら、無難にfloatを使用する事をお勧めします。 書き方は色々ありますが、私が一番簡単だと思うやり方はこんな感じです。 【html】 <div id="contents" class="clearfix"> 　<div id="left"> 　　<div class="clearfix"> 　　　<div class="special"> 　　　</div> 　　　<div class="news"> 　　　</div> 　　</div> 　</div> 　<div id="right"> 　</div> </div> 【css】 #contents{ width: 900px; margin:0 auto; } #left{ 　float:left; 　width: 690px; } #right{ 　float:right; 　width: 200px; } .special{ 　float:left; 　width: 460px; } .news{ 　float:right; 　width: 220px; } この記述でも難しいと感じるかもしれませんが、 最低これくらいは理解して書かないと、Webサイトの構築は出来ません。 clearfixというクラスを使用していますが、 これはfloatを使用する際に出る不都合を無理やり回避する記述で、 これをfloatするものの親ボックスに入れているととりあえず安心、というものです。 本来は邪道なやり方という声もありますが、プロも普通に使用しているので初心者の方なら気にせず使いましょう。 clearfixの書き方は検索するとweb上に沢山ありますので、検索してみてください。 floatする際には、widthをきちんと入れておかないと崩れますので注意してください。 ＞ ２．「特集」をタイトルをどのように作るのか？ ＞ ・背景の作り方 ＞ ・特集という文字の縁取りが白いこと Webでは「文字」は、プレーンテキストと画像文字の2種類あります。 プレーンテキストとは、そのまま文字情報で、選択してコピペできるものです。 画像文字とは、Photoshopなどで作成した文字の画像を表示しているもので、見た目は文字ですが実際には文字情報ではありません。 で、該当サイトの「特集という文字」のタイトルは画像です。 Photoshop上で文字を書き、「効果」の「境界線」という機能で縁取りを作れます。 特集の所にある背景画像は人物のイラストですが、こういうものはPhotoshopでは難しいので 大体の人がIllustratorで描いています。 絵を描くのが難しいなら、fotolia等の画像販売サイトで購入するか、 無料素材のサイトを探してダウンロードしましょう。 作成した画像は、cssのbackgroundで指定できます。 【例】 .special{ 　background-image:url(images/special_bg.gif); 　background-repeat:no-repeat; 　background-position:right bottom; } ※文中の記述はインデントを全角スペースで書いてますが、このままでは使用できませんので、 全角スペースは削除するか、Tabでのインデントもしくは半角スペースに置き換えてください。
　メイリオが入っていないとのことですが、お使いの OS は何でしょうか。XP 以前なら参考 URL からダウンロードしなければいけないものの、Vista 以降であれば最初から入っています。もし、Vista 以降だけれども入ってないというのなら、TeraPad がメイリオに対応していないだけです。とにかく《MeiryoKe_Console》や《MeiryoKe_Gothic》はダメで、マイクロソフト純正の《メイリオ：Meiryo》を使わないといけません。 　たとえば、下記のように指定してみてください。こうすると、《メイリオ（Windows 用）⇒ヒラギノ（アップル製品用）⇒その他の環境用》になります。《sans-serif》の代わりに、《monospace》でも構いません。 body { font: normal 15px / 1.5 メイリオ, Meiryo, 'ヒラギノ角ゴ ProN W3', 'Hiragino Kaku Gothic ProN', HiraKakuProN-W3, sans-serif; color: #272729; } h4 { font-family: メイリオ, Meiryo, 'ヒラギノ角ゴ ProN W3', 'Hiragino Kaku Gothic ProN', HiraKakuProN-W3, sans-serif; font-size: 120%; color: #272729; } 　なお、書体の指定は《font-style》ではなくて、《font-family》や《font》になります。下記の本などを読みながら、私もコツコツと勉強中です(^_^) 　　◆font-family－スタイルシートリファレンス 　　　http://htmq.com/style/font-family.shtml 　　◆font－スタイルシートリファレンス 　　　http://htmq.com/style/font.shtml 　　◆執筆書籍の紹介－HTMLクイックリファレンス 　　　http://htmq.com/book/ 参考URL：http://www.microsoft.com/ja-jp/download/details. …
div.articleText p { margin: 50px 0; } 　これでダメなら、《!important》をくわえてみてはいかがでしょうか。 div.articleText p { margin: 50px 0 !important; } 　常識的には１番さんの回答で正しいかと思いますが、アメブロの HTML は複雑です。おっしゃるとおり、《div.skinArticleBody》の子どもに《div.skinArticleBody2》がいて、その子どもに《div.articleText》がいるような書き方をしています。このなかで「カスケーディングの仕組み」を考えるのは大変なので、強引に《!important》で解決する人も多いですよ。 参考URL：http://htmq.com/csskihon/007.shtml
Webデザイナーといっても、 デザインセンス/テクニック/スピードの全てが揃っての一流です。 各者で得意分野が違うので、参考書でも方向性が違います。 ＞どのような内容が多い本が良いのでしょうか？ Ａ、 さあ？ デザインセンス/テクニック/スピード どの方向性を伸ばしたいのか？　その方向性で探せばよいです。 また、貴方と著者との相性や貴方のセンスにもよります。 「今でしょ」の林先生に勉強を教えて貰っても、理解できない人もいるわけだし。 初歩が終わったのなら、 あとは自由に（脳内イメージ以上に仕上げる）制作すれば良いでしょう。 マニュアル通りやるのは初歩だけで良いと思う。　実践 ＝ 効率よい学習になるから。 一瞬話題になった「神速」なんて、 スピードオンリー、美術系要素は“皆無”だし、 逆に「三つ星テクニック全集」は、プロ同士の美の競い合いって感じ・・・ 方向性が全然違うよって事です。
単純に float:left;でfloatさせられますが、そのとき自動的にブロック(display:block;)にもなっています。 display:inline;とすることで、ブロックは解除されて行内要素に再指定されます。 　display:inline;はCSS2から導入されたプロパティで、古いブラウザには認識されません。その場合、この設定は無視されますから、古いブラウザはfloatで並びます。サイズによって少し左による。 　なお、参考にされているサイトは、idを使用すべきでないところに、idを使用しています。 id="header",if="footer" 　また、文書構造ではなくデザインのためのid名になっています。 id="submenue",id="menu01",id="submenu_header",id="submenu_body",id="content"のように 　仕様書には、明確に『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』と書かれています。これは、明らかに誤用です。HTML5では、この誤用の反省から、『文書をよりよく構造化するために、(header,section,footer,aside,figure,navなど)の要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』 　headerはsectionなどと組み合わせて一塊の記事集合のheaderを示しますから、文書内に何度も登場する可能性がありますから、くかもり4.01でしたら<div class="header">とclass名でしょう。 id="submenu_body" id="content" 　これらは<div class="section">でしょうね。
　解釈として正しいのは、「２」のほうです。そもそも画像を横一列に並べるには、親要素の <ul> ではなく、子要素の <li> を float: left; しなければなりません。たとえるならば、<ul> という大きな箱があって、そのなかの <li> を横並びにするような感じです。 　そのうえで、 　　◆#list li ………… <ul id="list"> のなかにある <li> に適用されるので、横並び。 　　◆#list …………… <ul id="list"> に適用されるので、横並びはせずに、<ul> 全体の位置がずれる。 　　◆#list { } 　　　#list li { } …… 最初に、<ul id="list"> 全体が右による。そのうえで、<ul id="list"> のなかにある <li> が横並び。 となります。 　なお、「#list, li」というふうに「,」で区切ると、<ul id="list"> と <li> の両方に適用されます。こうした適用関係がわからなくなったときは、<ul id="list" style="background: red;"> のように、適当な背景色をつけるといいです。見た目は悪くなりますが、全体の位置関係を理解できますよ。 参考URL：http://htmq.com/csskihon/005.shtml
１、 画像はどこにあるの？ 前画像が、img/logo.png 裏画像が、img.jpg になってるけど、もしかして、 background-image: url(img/img.jpg); じゃないのかな？ ２、 #title{ background-image: url(img.jpg); height:～～px; } 最低でも背景の高さを前面画像より大きくしないと、裏の画像が見えない・・・ 当然、width:～;や、前画像にも <img src="img/logo.png" width="10" height="10" alt="*"> の幅や高さを指定。数値を小さくしてみたら↑↑ ３、 その他のCSSが間違っていてエラーがでているとか・・・ 最小ソースで書いてみましょう。
float:leftが原因です。
>一行目の「<script src="http://code.jquery.com/jquery-latest.js"></scrip … jquery最新版を読み込む -->」 >がちょっと分かりません。 >このままヘッダー内に書き込めばいいのでしょうか？ はいそうです。そのままヘッダに書き込めばjquery最新版が読み込まれます。
表示→互換表示 で直る場合があるが、それは貴方の表示だけの話。 他人からみたら元々左揃えになっている可能性大。 ※言葉で説明するよりソースを提示した方が、ここらの回答者は理解できる・・・ 他人の表示をも変更したいという事ならば、 ブラウザのバージョンや 文章（インライン）の真ん中寄せなのか？ブロックレベルでの真ん中配置なのか？ これらが不明なので、なんとも言えません（推測しかできません）が、 他人の表示をも変更したいという事ならば、 左右スペースを開けるような真ん中配置の事なら： （今現状からの応急処置ですが） -------- CSSで １、　 body + div{margin: 0 auto !important;} ２、　 body + div + div{margin: 0 auto !important;} -------- のどちらかをCSSに設置すると解決すると思う。 つまり、bodyの次のdivかもしれないし、その次かもしれない。HTMLソースを見ないと不明 本当は、 （応急処置ではなく、書き直しが必要） 今現在、過去モードだと思うから、（もしくはxml宣言付きのXHTMLかな？） 標準モードに変更して、text-align:center;なんて使わない。 コンテンツ全体を囲う最外包のdivを div{margin: 0 auto; width: ～～～px;} 　↑　id=""　で指定。で解決する。（定番設定です） 詳しくは、「CSS センター配置」などで調べましょう。 ＞またはホームページ作成時に注意すべき点はなんなのか？ Ａ、 デザインが気になるようになったのなら、次々気になりだしますよ。 今後予想される不具合や余計な時間などを考えると、 初心者用の玩具ソフトなんて使わずに、最初から作り直した方が良いでしょう。 http://openlab.ring.gr.jp/k16/htmllint/htmllint. … エラーがわかるはず。 つまり、基本から勉強しながら制作するしかないです。
＞制作するのはサービスを紹介する商業サイトです。 　想定利用者が不特定多数でしたら、後方互換の問題からHTML5は時期尚早でしょう。スマホ限定なら利用しても良いでしょう。 ＞特に気になるのがＳＥＯ。 　これはHTML5が良いです。HTML5はセマンティックウェブも大きな目標の一つですから。 　『文書をよりよく構造化するために、次の要素が新しく追加されました。( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』 　SEOとは、検索エンジン最適化( Search Engine Optimization )の略で、検索エンジンがページの構造(構成)や内容を正確に理解できるようにマークアップすることです。【検索エンジンの上位に--というのはその結果に過ぎません】 　HTML4.01の勧告(1999年)以来、「構造とプレゼンテーションの分離( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」『id属性及び class属性と併用することで、文書に構造を付加する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』と言われ続けていたので、本来は <div class="header"></div> <div class="section"></div> <div class="footer"></div> のように、マークアップされることを期待していたのですが、現実には <div class="wrapper"></div> <div class="left"></div> のような、およそ文書構造と無縁な使われ方をしてきました。HTML5の策定に当たって、googleが強く推進してきたのが、セマンティックなウェブです。 　⇒HTML5のセクションで“文書構造”を理解する - ＠IT( http://www.atmarkit.co.jp/fwcr/design/benkyo/htm … ) 　⇒html5doctor - HTML5.JP( http://www.html5.jp/html5doctor/index.html ) など。 　言い換えれば、HTML4.01であっても、strictで作成し、ウェブ標準でブラウザが動作するように「DOCTPEスイッチ( https://www.google.co.jp/search?q=DOCTPE%E3%82%B … )」を正しく記述し、<div>は、適切なclass名をつけて文書構造をあらわすように作成すると良いのです。 　--class名やその用途はHTML5の新しい要素の意味や使い方を参考にすると良いでしょう。-- 　HTML5では、<DIV>は多に適切な用途がないときの最後の最後の手段となります。 　そうして作成されたHTML4.01strictからHTML5に変換することは簡単でしょう。 　⇒質問の回答 #1 - html5doctor - HTML5.JP( http://www.html5.jp/html5doctor/your-questions-a … ) 　ただ、文章の内容を読み取り、内容を理解して適切なタグでマークアップすることは、どのようなツールでも不可能でしょう。これは事前に著者がclass名をつけておかなければなりません。 下記サイトに実例があります。 　⇒Preparing for HTML5 with Semantic Class Names — Jon Tan 陳( http://v1.jontangerine.com/log/2008/03/preparing … ) ＞この程度でHTML5で作るメリットはあるのでしょうか？ 　videoやcanvas、SVG、mathMLなどの機能を使いたいとかならHTML5でしょうが、そうでなければHTML4.01strictで良いでしょう。firefox、Chromeなどではすでに使えます。 　他のアプリケーションとの親和性を求めるならXHTML1.1strict,XHTMLという手法も良いですが、それ以外はXHTMLの必要はないでしょう。 　結論を言うと、HTML4.01strict+ CSS2.1で作成するのがベストでしょうね。
　多くはパレットの違いです。PhotoShopはご存知通り、Web用の画像を作成するツールではなく、インクを使用した印刷用のソフトです。 　減法混色　シアン・マゼンタ・イエロー　CYN 　加法混色　レッド・グリーン・ブルー　RGB 減法混色で作成されたjpgはウェブ標準ではありません。 　なお２色とか３色の画像はJpegで保存することはありません。ファイルサイズが異常に大きくなるし、画質が極端に低下します。GIFないしPNGを使用しましょう。GIFでしたら数キロバイトですんだりします。しかもGIFは、可逆圧縮ですから画像も劣化しません。 　photoshopは、写真などの複雑で多色の画像--ラスター/ビットマップ画像を扱うソフトです。 http://ja.wikipedia.org/wiki/%E3%83%A9%E3%82%B9% … 　色数が少ない単純図形でしたら、GIFやPNGを使用するべきです。詳しくは上記リンク 　なお、ベクター/ドロー形式ですと、画像のサイズには依存せず(複雑さだけに依存する)形式があります。SVG( http://ja.wikipedia.org/wiki/Scalable_Vector_Gra … )が代表的です。 　⇒ベクタ形式( http://ja.wikipedia.org/wiki/%E3%83%99%E3%82%AF% … ) 　なお、画像をimgではなくobjectでマークアップして、複数の画像が利用できるようにすべきです。 　
float:leftは、文字通り左へ寄せているのですが？？ それでいて、中央に寄せたいとは矛盾している。 #Area_Navi li { text-align: center; display: inline;　↑矛盾しているinlineにcenterはないでしょう。 padding: 0; margin-left: auto; margin-right: auto; float: left;↑display:inlineと矛盾しているfloatを指定するとblockになる。 width: 200px; } とか、基本的な部分で・・ #Area_Navi{text-align:center;font-size:20pt;} #Area_Navi ul,#Area_Navi ul li{list-style:none;margin:0;padding:0;} #Area_Navi ul li{display:inline;padding:5px 10px;} #Area_Navi ul li a{ border: 1px solid #000000; background-color: white; padding: 10px; text-decoration: none; color: black; margin: 1px 0px; } これだけでよい。なぜ一方の枠が閉じられてないのか不明
　formをサーバーにデータを送信する用途以外に使用しようとすると、ガラケーに関わらずユーザーエージェント依存になってしまいます。 　まっとうに、CGIで受け取った値からページを作成されるほうが率直で簡単でしょう。
この世界時の流れが速すぎて 　⇒HTML5が持つ本当の意味( http://www.atmarkit.co.jp/news/200801/25/html.html ) この記事が2008/01/25ですからね。 　HTML5は、今からでも使えますが後方互換や古いＩＥがしぶとく使われている現状からHTML4.01strictを復習しておくほうが良いでしょう。XHTML1.0strict/XHTML1.1でも良いでしょう。必ずstrictであること。 1. HTML5+CSS3の基礎 　ということは、HTML4.01strictとCSS2.1 2.具体的な方法は、 レスポンシブwebデザイン　PC背景とスマホ背景変 - Webデザイン・CSS - 教えて！goo( http://oshiete.goo.ne.jp/qa/8042818.html ) 　に書きましたが、 基本1) ページはリキッドで作成する 基本2) floatは使わず絶対配置 基本3) 背景画像(内容と関係ない画像)はサイズが変わっても支障のないもの 基本4) コンテンツとして意味のある画像や、一部が切れてはまずい画像(背景も含む)は、imgでマークアップし、display:blockとして、親コンテナブロックのサイズを参照して伸縮させる。 基本5) スマホなどモダンブラウザにはmediaqueryでスタイルシートを切り替える。 　
>Media QueriesにてCSSを振り分けています。 ↑であれば、モニタの解像度でなら背景を変えることは可能です。 １つのcss内にメディアクエリで書き分けているのなら /* PC用（大きなウインドウ用）*/ body{ background-image: url(../img/bg_pc.jpg); } @media screen and (max-width: 599px) { /* スマホ用（幅が600px未満のウインドウ用）*/ body{ background-image: url(../img/bg_sp.jpg); } } ↑で表示されます。（将来的に解像度の大きなスマホが出てくる可能性も考慮して600pxをブレークポイントにしています。） ただし、この方法はあくまでも【ウインドウの解像度】によって背景を変える方法ですので、PCでもウインドウを小さくしてみている場合はスマホ用の背景画像になります。 もしも、ウインドウのサイズにかかわらず、デバイスの種類で変更したいのであれば、 No1さんのおっしゃるようにユーザーエージェントを取得して、cssを書き換える方法がいいでしょう。 やはり先におっしゃられているとおり、ユーザーエージェントは膨大且つ複雑なので、将来にわたってすべての機種を思い通りに表示変更させるのは困難だということはご了承ください。 それでも現時点では、iPhoneか、iPadか、iPodか、andoroidか、それ以外（PC含む）か、位の判別は可能です。 【記入例その1】 ヘッダ末尾に以下を記入↓ <script type="text/javascript"> if (navigator.userAgent.indexOf('iPhone') > 0 || navigator.userAgent.indexOf('iPad') > 0 || navigator.userAgent.indexOf('iPod') > 0 || navigator.userAgent.indexOf('Android') > 0) { document.write('<link rel="stylesheet" type="text/css" href="mobile.css" />'); } </script> PC用の背景は今まで使っていた指定。 スマホ用のcssとして読み込ませる"mobile.css"にスマホ用の背景を指定。 【記入例その2】 ヘッダ末尾に以下を記入。↓ <script type="text/javascript" src="jquery.jsへのリンク"></script> <script type="text/javascript"> $(document).ready(function(){ if (navigator.userAgent.indexOf('iPhone') > 0) { $('body').addClass('iPhone'); } else if (navigator.userAgent.indexOf('Android') > 0) { $('body').addClass('Android'); } }); </script> ↑上記によって、bodyにクラスがつきます。 cssに以下で指定。 /* PC用（クラスなし）*/ body{ background-image: url(../img/bg_pc.jpg); } /* iPhone用（ユーザーエージェントにiPhoneが含まれる場合）*/ body.iPhone { background-image: url(../img/bg_iphne.jpg); } /*Android用（ユーザーエージェントにAndroidが含まれる場合）*/ body.Android { background-image: url(../img/bg_android.jpg); } という感じでしょうか。 参考URL：http://blog.lqd.jp/webdesign/000173.html
一度仕様書の計算値の部分などを読み返してみましょう。 　⇒4.3 値の種類（Values） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　⇒8. ボックスモデル ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　⇒9. 視覚整形モデル ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　ブロックが抱合親コンテナブロックのサイズを参照するのはstatic以外の直近の親ブロックです。 　あくまでpadding辺の内側がサイズです。サイズを指定するときpaddingは要注意 　故意に背景色と同色のborderを書いておく 　段組にはfloatを使うな!!--解釈の違いで崩れます。 下記サンプルは、後方互換も考慮してあるので、少し煩雑です。スマホだけなら、もっと簡単になるのですが。 ★Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html# )のDATAでチェック済みのHTML4.01strictとCSS2.1です。 ★タブは＿に置換してある。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル0</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- /* Layout Design */ html,body{margin:0;padding:0;} h1,h2,h3,h4,p,ol{margin:0 1em;line-height:1.8em;} div.header,div.section,div.footer{width:80%;min-width:480px;max-width:1000px;margin:0 auto;} div.section{position:relative;} div.section div.section{width:auto;min-width:0;min-height:0;min-height:200px;} div.section h2,div.section p,div.section div.section{margin-left:20%;} div.section div.section p{margin: 0 1em;} div.section div.contentTable{width:20%;position:absolute;top:0;left:0%;height:100%;font-size:0.9em;} div.section div.contentTable ol{margin:0 0.2em;padding-left:2em;} /* Color scheme */ body{background-color:gray;} div.header{background-color:aqua;} div.section{background-color:lime;} div.section div.section{background-color:white;} div.footer{background-color:fuchsia;} div.section div.contentTable{background-color:yellow;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>ここに自由な長さの文章を入れてみる</p> ＿＿<div class="section"> ＿＿＿<h3>見出し</h3> ＿＿＿<p>ここに文章</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h3>見出し</h3> ＿＿＿<p>ここに文章</p> ＿＿</div> ＿＿<div class="contentTable"> ＿＿＿<ol> ＿＿＿＿<li><a href="/">Top</a></li> ＿＿＿＿<li><a href="/Products">Products</a></li> ＿＿＿＿<li><a href="/Contact">Contact</a></li> ＿＿＿＿<li><a href="/Profile">Proflle</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
困っておられることはよくわかるのですが、これは該当Androidの完全なブラウザバグで、「一部のAndroid」という表現で、対策が施せるような単純な問題ではないと思われます。 そもそも、Androidブラウザでは、デバイス解像度と論理解像度が異なっており、しかもAndroid1.x～4.0までの多岐にわたるバージョンで動作を保証せよ、というのが無理な内容だと言わざるを得ません。 自分も、Android 2.1時代には散々泣かされまして、今は2.2以上＋リファレンス機（Galaxyシリーズ）以外の「見え」は細かいレベルまで保証しません。 HTMLにしても、拝見したところサイズ指定は相対、しかもかなり「入れ子」状態の内容ですし、jQueryMobileなどを使っていてもバグの出やすいAndroidですから、マトモに動作させるのは至難の業ではないでしょうか。
この質問文ではnono1220さんが何に悩んでいるのか、まったくわかりません。 nono1220さんが書いたタグはどういうものか、どんなフォルダ構成で何のjsファイルを使っているのか、ブラウザは何（IE8,とかバージョンも含め）で試して、どんな現象が起きているのかを書かないと、誰もお答えのしようがないと思いますよ。
#main .menuArea .contentWrap { なんたらかんたら } は、 #main { なんたらかんたら } .menuArea { なんたらかんたら } .contentWrap { なんたらかんたら } と同じです。 同じ記述をまとめて指定している。 : に特別な意味は無く、:after で意味を持ちます。「after疑似要素」で調べてください。 .tabList:after { content: "XXX"; } とかすると、.tabList の直後に XXX という文字を表示します。
スタイルシート間違えてました。気がつきにくい部分で、Vaidator通せばすぐ分かったのですが、急がれていたのでチェックせずに回答してしまいました． W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … ) #LoginForm{ border-collapse:collapse; width:auto; margin:0 auto; color:white; line-height: 15px; } #LoginForm th,#LoginForm td{/* 同じ指定を複数化かないためグループ化 */ text-align: center; background-color: #AFB4DB; } #LoginForm th{font-size:12px;} #LoginForm td{font-size:11px;} ★font-size:が抜けてました。
サイト内の相互リンクという意味が分かりません。 ユーザーがサイト内のコンテンツを利用するときを考えると、いつでも前のページやトップ、あるいはサイトマップに移動できるためにリンクを設けておくほうが良いです。また、他のサイトへのリンクが有用ならリンクを張っておくと良いでしょう。（あなたのサイトが有用で多くのサイトから参照されているようなサイトでしたら先方にとっても有利でしょう。) 　これはあくまで、ユーザビリティ、アクセシビリティの問題です。 　逆に、関連もないのに他のサイトへのリンクだけ---いわゆるリンクプログラムに参加していると、機械は常識的に次のように考えるでしょう。「大して有用でもないのに、検索エンジンを騙すためのリンクである」と、すなわち価値のないサイトだと。 　私は、ときどき訪問者から相互リンクの依頼が来るのですが、次のようにお答えしています。 ＞もし、あなたのページにとって参考になるなら、リンクされても構いません。許可を得る必要はありません。また、必要ならページ内アンカーを設けます。 　当方からは、あなたのサイトを拝見させていただいて、当方の利用者にとって有益だと判断した場合は、リンクさせていただくかもしれません。 　SEOは、現在は検索エンジンの上位を目指す対策と言う意味で使われていますが、本来のSearch Engine Optimizationは、文字通り「検索エンジン最適化」と言う意味です。HTMLをどこが[本文]で、どこが[見出し]で、どこが[重要]で、どこが[引用]など、きちんと文書構造がマークアップされていて、検索エンジンがそのページの内容を正確に理解できるようにする事です。 　その情報がないと、検索エンジンはそのページが検索されているキーワードに合致するかいなかの判断すら出来ないのです。それに加えて、同じテーマを扱っている他のサイトから頻繁に参照(リンク)されているか？、そのテーマに関して秀逸であるかなどで順位を決めていきます。 　これは、著者であるあなたではなく、ユーザーの立場で考えれば容易に理解できるでしょう。検索エンジンは著者のためではなくユーザーのためにあるのですから!!! 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから どうすれば自分のウェブサイトが独自性、価値、または魅力のあるサイトといえるようになるかを考えてみる。同分野の他のサイトとの差別化を図ります。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ( http://support.google.com/webmasters/bin/answer. … )］より 　
遅くなりました。 　それは文書構造上も変ですから、スタイルシートでも方法がありません。 ・内容の量が変わるコンテンツにoverflowの指定をせずに、それと無関係の要素にoverflowなんて意味的にありえないです。 ・ブラウザは、量やフォントサイズに変わらず画面に極力表示するように求められます。その際にPageDownキーで縦にスクロールは可能なことが前提ですから、親ブロックの縦幅を参照することは%指定以外は出来ません。 　また、ご提示のHTMLは、フロートさせている要素(ナビゲーション)はメインのコンテンツの高さに合わされています。これっておかしいです。もし、そうでしたらナビゲーションはメインコンテンツの内部にないとおかしいです。 　スタイルシートが以下に高機能でも、文書解析に反していたら不可能です。 ★対策　添付図上は不可能 1)伸縮するコンテンツ自体にサイズを指定してoverflow:autoを指定する。 2)サブコンテンツはそのままにして、親コンテンツの高さを伸縮させ、ナビゲーションはその高さを参照させる 　の何れかが良いでしょう。
用語を正確に・・ インラインフレーム(iframe)もフレームの一種です。 　⇒16.5 行内フレーム: IFRAME要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　擬似フレームは、ブロックに幅、高さを指定してoveflow:auto;でデータが多い場合にスクロールさせる方法です。 ＞背景画像をフレームを超えて表示できないので 　は、擬似フレームもフレームもまったく関係ないです。 　そもそも、HTMLはデザインのために書くものではありません。ここを間違えている初心者がとても多いです。そのように説明しているサイトや参考書が多いからでしょうが、HTMLは文書構造をマークアップするもので、デザインするのはスタイルシートの仕事です。 　この構造とプレゼンテーションの分離は、とても重要です。 　文書構造が <body> 　<div class="header"> 　　ヘッダ 　</div> 　<div class="section"> 　　本文 　　<div class="nav"> 　　　ナビゲーション 　　</div> 　</div> 　<div class="footer"> 　　文書情報 　</div> </body> HTML5だと <body> 　<header> 　　ヘッダ 　</header> 　<section> 　　本文 　　<nav> 　　　ナビゲーション 　　</nav> 　</section> 　<footer> 　　文書情報 　</footer> </body> という文書構造であるとき headerをウィンドウトップへ フッターをウィンドウ右上 ナビゲーションは本文の左に 本文は、その余白に 　とスタイルシートでデザインしていきます。 　こうしておけば、将来デザインを一新することも可能ですし、本文内容を修正するのも簡単です。
htmlもcssも、そのページで右クリックすればソースを見られますよ？ もっともhtmlとcssだけ作っても、肝心のメールを送信するスクリプトを用意できなければ、メールは送れません。 pop1001さんはcgiもしくはphpのメール送信スクリプトの設置はできますか？ 失礼ですが、質問の文章からするとあまりこうした知識をお持ちではないのかな、と思いました。 スマホ対応かどうか以前の問題で、まずは http://www.homepage-4u.com/middle/6.html などを参考に、サイトからメールを送信するしくみを知るのが先決だと思います。 それがもうできるということでしたら http://www.synck.com/contents/download/cgi-perl/ … などのスマホ対応のメール送信スクリプトを設置して、フォームのhtmlとcssを作成するといいでしょう。 上記の参考記事を読んでも理解できないのでしたら、残念ですがこの場で教えるのは難しいですね。 あきらめてレンタルのメールフォームにしてはいかがですか？ 「スマホ　メールフォームサービス」で検索すればたくさん出てきます。 ただしスマホ対応のめーるフォームサービスは大半が有料ですが。。。
＞文字コードをUTF-8に変えたのが原因とかあるのでしょうか。 <meta http-equiv="content-type" content="text/html; charset=UTF-8"> としないと、文字化けするでしょうが、段組されない原因は確認されたブラウザが対応していないだけだ 　Firefox,Safari,Operaは対応していると思います。
例１、 {if TOPPAGE}<p><img ～～ ></p>{/if} 例２、 <h1 {if TOPPAGE}style="background:url(～～.gif); height:～～px; width:～～px;"{/if}><a href="{top_url}">{shop_name}</a></h1> 未検証だけど・・・
一応念のためですが CSS レベル4は (引用した部分にもあるように) まだまだ規格として確定したわけじゃなく, 「今のところこんなものを考えてますよ～」くらいの意味しかなかったりします (とはいえいきなりひっくり返すことはないと思いますが). ちょっと見た感じだと CSS レベル3 は「全部を一体として発行する」ということではなく, いくつかの部分ごとに検討・発行しているようです. CSS レベル3 のうち基本的なセレクタに関しては既に勧告が出ていて, そこからさらに進めて「レベル4 でどのようなセレクタを許すか」という議論をしています. 一方, 同じく「レベル3」といっても UI に関するセレクタ (CSS3UI) はまだ勧告として出ていないようです.
DLしたくないので検証していませんが、出来ないと思うなら別のサイトを利用しましょう。 「jQuery　ページ内スクロール」 「JS スムーズスクロール」 などで検索すると見つかります。DLする必要すらないでしょう。
>最初なので低コストで運営できるところはありますか？ >（できれば、Mac、windows、携帯、スマホ全てで対応できる） 動画の場合、転送量が多くなるからコスト高いかも。 対応端末は作り方次第だと思うんだけど、自分で作るの？既存のサービスを利用するの？ >投稿動画はストリーミングで、動画閲覧は無料、投稿は登録制という感じにはできますか？ >（youtube,にこ動等からの引用も出来る） これも作り方次第でどうにでも出来る。 >アフィリエイト等の広告も張りたい。 これも作り方次第でどうにでもできる。 >後々プログラミングを自分でしたいのですが、どういった事を学べばよいのですか？ Webの基本、html、css、JavaScript、サーバ側の言語(PHP、Java、perl等)、セキュリティ関係、データベース(Oracle、mySQL等) これらを学ぶとWebサービスを自分で作れる。
divの次に半角が「有る/無い」で意味が違う・・・ 半角が有る ＝ 「～の中の」って意味 半角が無い ＝ 「～の」って意味 div.cls1 { } この場合のHTMLは、 <div class="cls1"><a href="www.google.co.jp">google</a></div> の場合にcls1のdivをどうするかって話。 div .cls1 { } この場合のHTMLは、 <div><a class="cls1" href="www.google.co.jp">google</a></div> の場合に、cls1のaをどうするかって話。 div.cls1 a{ } この場合のHTMLは、 <div class="cls1"><a href="www.google.co.jp">google</a></div> の場合に、cls1のdivの中のaをどうするかって話。
>そこで質問ですが、https利用等の工夫しない場合、 >盗み見られることはあるのでしょうか？ >盗み見られるメカニズム（？）について簡単に教えてもらえませんでしょうか？ クライアントとサーバまでの間の経路でパケットを盗聴する(あるいはそれに類する方法)と、内容が見られます。 お手軽に試す…というのはちょっと面倒ですが。 自PCにProxyソフト(squidなど)をインストールし、WireSharkなどのパケットキャプチャ系のツールもインストール。 社内の別PCで構築したproxyを設定して、パケットキャプチャを実行している状態でWebアクセスしてもらえば キャプチャしたパケットが確認できるでしょう。 >また、https はどのようにすれば利用できるのでしょう。 >会社が契約しているレンタルサーバーサービスが対応しているかどうか？ >https を利用することで費用負担がある？ >等。 SSLの証明書などの購入が必要になりますから費用負担は発生するでしょう。 実際のところは契約しているレンタルサーバ会社に問い合わせを。 自前で証明書を用意する「オレオレ証明書」という方法もありますが、それだとブラウザから「安全ではない証明書」などの警告画面が出ることになります。 企業としてはそういうコスト掛けずにオレオレ証明書で済ませて警告画面が表示される。というのはマイナスイメージでしょう。
大事なことはツールでは無い。 ビッグサイトの多くはＣＳＳなどを無視しているのが大勢ですよ。 きれいな頁とは背景の色調、フォントスタイル、インデツクス、リンクスタイルなどのサイトデザインの統一をはかることです。 とは言っても膨大なサイトを長年にわたり効率的に運用するにはツールが必須で、マイクロソフトＦｒｏｎｔＰａｇｅを主に使用しています。 他にも優秀なツールが沢山存在しますが、ＰＣに負担をかけるのが難点です。 ひとつのツールですべてがＯＫというのは幻想で、各ツールから長所を拝借することが大事です。
本体から参照されるふたつのHTMLです。 こちらは、HTML4.01strictです。 foo1.html <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- body{color:rgba(0,0,0,0.5);} a:link{color:rgba(0,0,255,0.5);} a:visited{color:rgba(125,125,0,0.5);} a:hover{color:rgba(255,0,0,0.5);} a:active{color:rgba(255,255,0,0.5);} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p><img src="./images/abc1.jpg" width="200" height="200" alt=""></p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html> foo2.html <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- body{opacity:0.5;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p><img src="./images/abc1.jpg" width="200" height="200" alt=""></p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
外部サーバへ読みに行っている。 URLは"http://○○○.com/wp/"。 で、パラメタである、"custom-css=1&csblog=1&cscache=6&csrev=3"にしたがって、動的にCSSが返される。 "Terxt/CSS"というレスポンスヘッダがついていれば、内容がCSSとしてブラウザに解釈されるということ。
ちょっと心配になったのですが、不特定多数の人間が見られる環境で公開してもいいのでしょうか？ >子供たちの施設のホームページを作ろうと思っています。 >・集まりの写真などをアップロードするのが主な目的です。 子供を巻き込む犯罪が多い昨今、顔や場所が特定できる写真を誰に見られるかわからない場所に公開するのは抵抗がないですか？ 「どこそこ公園の桜がきれいでした」なんて何気ないコメントでも場所は特定されてしまいますよ？ この内容のサイトでしたらIDとPASSを知らない人は閲覧できないようにしたほうがよいのではないでしょうか。 もしそんな心配をする必要がないのであれば、1や2の回答者様の提案で問題ないと思います。 やはり閲覧者を限定したいという場合は、3の回答者様の案のようにSNSを利用するか、またはBasic認証などでサーバのアクセス制限をするほうがいいと思います。 SNS（ソーシャルネットワーキングサービスの略）は限定したメンバーだけが閲覧できるサイトを構築できるサービスです。 このOK webもSNSの一種です。 ブログを書くような感覚で、htmlやFTPの知識がなくてもブラウザからカンタンに更新できること、見たメンバーからコメントをつけてもらえることなど、メリットがたくさんあります。 ただ、レンタルのオリジナルSNS作成サービスって、中には怪しげなものばかり集まっているところがあるので抵抗があるかもしれません。 それと、質問の選択肢にあったワードプレスですが、CMS（コンテンツマネジメントシステム）といってブラウザから記事の追加や削除、編集ができるシステムのひとつす。先ほど話したSNSも、CMSを利用しています。 ワードプレスはそれらの中でも世界的に有名なものです。 これもページに閲覧制限をかけることができますが、通常のhtmlの知識だけしかないのなら、難易度が高すぎると思います。 そういう場合は写真共有サービスを選択肢に入れてもいいんじゃないでしょうか。 ■PiCRO http://picro.jp/ 子供の成長記録やブログ、アルバムがつけられる子供写真専用無料フォトストレージ。 ・閲覧：管理者と招待者のみ閲覧可,UP日付順,更新日付順,撮影日付順,名前順,フォルダ一覧 ・機能：成長記録,成長ブログ,イベントカレンダー,写真情報編集,撮影日付で自動整理,招待メール ・その他：Flash形式のWebアルバム作成可 ・備考：プリント注文などの有料サービス有 ↑こんなのもあるみたいです。 No1.さんがおっしゃったいたように、無料サービスはサービス終了という危険性は考慮しなくてはいけませんが、写真プリントやブック作成サービスと連動したサービスがあると、親御さんたちもおじいちゃんおばあちゃんへのプレゼントとしてよろこぶかもしれませんね。 あ、私は別にPiCROの関係者じゃないです（ｗ
シンボリックリンクよりalias(別名)ではないかと httpd.confに Alias /css "/user/css" <Directory "/user/css" > Options Indexes FollowSymLinks Includes ExecCGI Order allow,deny Allow from all </Directory> 　⇒URL からファイルシステム上の位置へのマップ - Apache HTTP サーバ( http://httpd.apache.org/docs/2.2/ja/urlmapping.h … )
初心者だから、まさかメモ帳だけでＨＴＭＬを作成・編集はするはずもないとの前提で、何らかのホームページ作成ソフトは使用しているんでしょう。 ほかに画像編集のソフトは持っていると思いますが。 各画像のサムネイル（縮小版）を作る。（なるべくサイズは統一した方が良い） 各頁は大きい画像を張るとユーザーＰＣの動きが重くなるから、適当な個数に限定して多くの頁を作成すること。 サムネイルを並べた頁から各頁へのリンクを張れば良い。 画像からのリンクについては、ホームページソフトの取説を熟読のこと。 　 現在はＰＣだけでなく７インチタブレット端末からのサイト訪問も多く、そのあたりも配慮してください。
参考サイトの管理人です。 私のブログ閲覧していただきまして、ありがとうございます。 私が記事を書いた時よりバージョンが少しあがっていました。 今、公式サイトの「有料版の価格設定」をみましたら、右下に表示される「SD」のブランドマークが無印になる項目がありました。 開発者が海外の方なので、詳しい事は分かりませんが・・・。 有料版の項目に入っているので、おそらくロゴの非表示は無料版では止めた方が良いのではないかと思います。 公式サイトの内容を確認してから、検討してみてください。 参考URL：http://www.slidedeck.com/pricing/
なるほふど。それでは以下のように書くといいでしょう。 そちらの環境がわからないので、外部jsじゃなくHTMLだけで完結する書き方にしますね。 【bodyの中に】----------------------------------------------- <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1/j … <script type="text/javascript"> <!-- $(window).scroll(setScrollElements); function setScrollElements() { if (scroll > 450) { $("#fixgnav").css({position: 'fixed',top: '0px'}); console.log($(window).scrollTop()); } else if (scroll < 450) { $("#fixgnav").css({position: 'absolute',top: '450px'}); }} // --> </script> <div class="slide_area">高さ450pxのエリア</div> <div id="fixgnav">ナビゲーション部分</div> -------------------------------------------------------- ↑と書いてください。 注意点は、必ず2～21行目のスクリプトよりも1行目のスクリプトが先に書かれていることです。 追伸：さっきの回答の中で綴りミスがありました。 絶対配置(absokute)（誤）→絶対配置(absolute)（正） の間違いです。失礼しました。
他のリンクをクリックしたら戻るのでは？ 単にactiveの擬似要素が解除されていないのでは？
正確な言い方は 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから A declaration block starts with a left curly brace ({) and ends with the matching right curly brace (}). In between there must be a list of zero or more semicolon-separated (;) declarations. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Rule sets, declaration blocks, and selectors( http://www.w3.org/TR/CSS2/syndata.html#rule-sets )］より --- 宣言ブロックは、左中かっこ（{）で始まり、対応する右中括弧で終わり（}）。 　その間では、ゼロ個以上のセミコロン（;)で区切られた宣言のリストが存在しなければならない。 　宣言が複数存在すれば;で区切ってリストにしなさいということです。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ★あくまで例だと承知していますが <span style="color:#ff0000;">重要</span> 　というHTMLは望ましくありません。デザインのためにHTMLを書いたら、せっかく文書構造とプレゼンテーションの分離の意味がなくなります。 <strong style="color:#ff0000;">重要</strong> とか <strong>重要</strong>としておいて、head内か外部スタイルシートでstrong{color:red;font-weight:normal}としたほうが良いでしょう。 　
Webデザインではなく、セキュリティー、ネットワーク管理の範疇だと思います。 hostsファイルを書き換えても、IPアドレスを直入力されれば意味はありません。 『簡単に出来ます』の業者にお願いした方が良いと思います。 「HTMLデータの書き換えが簡単にできる」なのか、「セキュリティーをふまえて総合的にできる」なのか、確認しておいた方が良いと思います。 おそらく店舗内ネットワークの管理情報が必要になりますから、店舗内のネットワークを構築した業者に頼むべきです。 というか、それ以外の会社に頼んでも、おそらく設定は不可能です。 デジタルサイネージに使うなら、物理的（無線接続含む）にネットワークから遮断し、 パソコンにウェブサーバーソフトをインストールして、localhostで完結させる方が、一番簡単ではないかと思います。 （OSの設定を変更できなくする、ブラウザ以外のアプリに切り替える事が出来なくする等々はもちろんです。自分のスマホにテザリングさせてアクセスしようという人は、（攻撃者の中にも）そんなにいないと思いますけどね。）
htmlではなく、HTMLです。(頭文字なので) まず、簡単にするためにHTMLを少し直しておきます。 <div id="globalnavi"></div>は不要です。navというブロック要素以外何もないのですから、 <nav id="gloabanavi">で必要十分です。他に区別できないnavがないのでしたらこのidも要りません。たとえば<header></header>内にひとつしかないのでしたら、 header nav{}で特定できます。 ・ブロック要素のサイズはpadding辺の内側です。 　width:200px; ＋ padding-left:10px;だと、外側のサイズは210pxになります。 ・詳細度が同じでしたら後から書かれたもので上書きされます。 　margin-bottom:10px; 　↓ 　margin-top:5px; 　↓ 　margin:0px;　ここで、すべてのmarginが0に上書きされます。 　　この手の無駄な部分がたくさんあります。 ・<a href="#" class="home">のclass名はなくても良いです。 　　他のa要素とはhref属性の値が異なりますし、最初のliですから ・ナビ同士の横の隙間を無くすように合わせたい 　ユーザビリティの点からリンクの間は開けたほうが良いです。 　書かれているスタイルシートはmarginやpaddingで隙間が開いていますが？？？？ <nav id="global"> 　<ul> 　　<li><a href="#" class="home">Home</a></li> 　　<li><a href="#">Categories</a></li> 　　<li><a href="#"><span>About</span></a></li> 　　<li><a href="#">Portfolio</a></li> 　　<li><a href="#"><span>Contact</a></li> 　</ul> </nav> #global{ height:36px;line-height:20px; width:100%;max-width:1000px;min-width:640px; margin: 1px auto 5px auto; background-color:white; list-style:none; padding:0; text-align:center; } #global li{ float:left; width:19%; height:20px; margin:3px; position:relative; } #global a{ display:block; width:100%;height:100%; background-image:url(images/btn046_05.gif); background-size:cover; color:blue; } #global li+li a{ background-image:url(images/btn046_06.gif); } #global a:hover{ background-image:url(images/btn046_10.gif); } とか・・・・
table.sample{border-collapse:collapse;} がないとか？？
禁止でも悪影響でもありません。 URI：サーバベースでは、単なるファイルの位置情報ですが、 例えば、HELPページなら、 ～～/2013/03/20.html ～～/2013-03-20.html ～～/20130320.html ～～/help.html このどれが最適か考えた場合、ケースバイケースです。 ニュースや行事ななどの日付けが重要とされる記事なら日付けのパラメータでもよいでしょうし、一般的なページではパラメータや日付けを利用せずキーワード的なファイル名が良いでしょう。 奥深い階層は避けたり、 検索エンジンにもユーザビリティ的にも、目視で確認できる程の分かり易い方が良いという事です。 （動的サイトでは自由にできない場合もありますが） つまり、 規制しない限り、サーバレベルでは影響ないですが、 検索エンジンにとっては、不正ではありませんが全く問題無いとも断言できません。。 但し、SEOレベルの話でもありませんので、深く考えすぎないように・・・　その程度の話です。 何より、ディレクトリやファイルは、自分でも管理しやすいように。
floatでも普通にレイアウトできると思いますが、 右のコンテンツ部分を一つのdivで囲んで、widthをちゃんと設定していれば問題ないと思います。 floatで失敗するのはwidthを入力していないから、という理由が結構多いので。 それと、position:relative;をかけたボックスの位置をtopやleftなんかで動かすと、 ボックスの「元あった位置」が常にレイアウトのネックになるので、 位置を変更するボックスはposition:absolute;を使う事をお勧めします。
説明すると a[href="http://yahoo.co.jp"]{ 　　属性セレクタ[詳細度 0 0 1 1] 　　href属性にこの値を持つa要素 display:block; 　　ブロック要素に変更しておく background-image: url("./images/test.png"); 　　背景画像の指定 width:36px;height: 136px; 　　a要素の幅と高さ(blockに指定してあるので ) position:fixed; 　　ウィンドウ表示領域に対してa要素を固定 top:0px;right: 300px; 　　a要素の位置を指定する。!!!A要素の位置 text-indent:-20em; 　　内容を左に-20文字ずらす overflow:hidden; 　　指定サイズからはみ出したものの表示 background-position:top right;× background-position:top left;○ 　イニシャル値(初期値)なので書かなくて良い 　⇒Initial: 0% 0%( http://www.w3.org/TR/1998/REC-CSS2-19980512/colo … ) background-repeat:no-repeat; 　狭いので書かなくて良い background-attachment:fixed; 　ウィンドウに対して固定・・ ＞※ちなみにrightの300pxを0pxにすると表示されますが、どうしても右から300px距離をとりたいです。 　right: 300px;の値を0～30pxくらいに少しずつ変えれば原因はわかったはずです。 　もちろん <p id="#YahooLogo"><a href="http://yahoo.co.jp">テスト</a></p> 　とでもして、 #YahooLogo{ width:36px;height: 136px; position:fixed; top:0px;right: 300px; overflow:hidden; } #YahooLogo a{ display:block; hegiht:100%;width:100%; background-image: url("./images/test.png"); text-indent:-20em; } でもよいが、(構造上)意味ないのに、デザインのためだけにidを振るのには少し抵抗があるし、その分、HTML・スタイルシートが煩雑になる。
どこで拾ってきたのかわかりませんが、spanで括る必要はまったく内容に見受けられます。 spanは、 「(DIV要素と)SPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　言い換えれば、その内容を適切に示す要素(タグと解釈しても良い)が他に無いときに使う最後の手段(HTML5)です。この場合<a></a>と＝なのですから、<span></span>で囲む必要はありません。 　HTMLは <nav> <ul> <li><a href="../">Home</a></li> <li><a href="./Categories">Categories</a></li> <li><a href="./About"><span>About</span></a></li> <li><a href="./Portfolio">Portfolio</a></li> <li><a href="./Contact"><span>Contact</a></li> </ul> </nav> 　HTML4なら <div class="nav"> <ul> <li><a href="../">Home</a></li> <li><a href="./Categories">Categories</a></li> <li><a href="./About"><span>About</span></a></li> <li><a href="./Portfolio">Portfolio</a></li> <li><a href="./Contact"><span>Contact</a></li> </ul> </div> で良いでしょう。 [スタイルシート]は div.navi{ width:230px; background-color:#e6e6e6; float:left;/* floatでないほうがよいかも */ } div.navi ul,div.nav ul li{ list-style-type: none; display:block;/* displayがlist-itemなのでblockに */ /* padding-top: 20px;*/ /* これって必要？？？なお、共通な指定は一回で */ /* color:blue; */ /* リンクのない内容はないので要らない */ text-align:center;/* 継承されるので親で */ } div.nav ul li{ position:relative;/* a要素のサイズの基準にするため */ width:200px;height:40px;/* ここでボタンのサイズとかを決めておく */ /* width:100%にするとpaddingを指定したときはみだします */ margin:10px; } div.nav ul li a{ width:100%;height:100%; display:block; background:url(images/btn046_05.gif) no-repeat; color:gray; } div.nav ul li a[href="../"]{ background-image:url(images/btn046_06.gif); } div.nav ul li a:hover{ background-image:url(images/btn046_10.gif); color: blue; }
　あまりユーザーインターフェースに関わる部分は、ユーザビリティ・アクセシビリティ上弄るのは感心しません。(それぞれのユーザーは自分のブラウザでは、どれがボタンか知っているので混乱を防ぐため) 　input要素のborder-radiusを指定すればよいのでは？属性がtype="button"ならinput[type="button"]{border-radius:0;}とか・・ 　ブラウザのスタイル指定は詳細度0ですから、書き換えられるはず。
ごく簡単な例を挙げておきます。 　仕組み自体は、スタイルシートでの値、カスケーディングを知っていれば実に簡単なものです。スタイルシートを学ぶときは、やはり仕様書順にきちんと順序だてて学ばないと・・。 仕様書でも 5.セレクタ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 6.値の割り当て、カスケード処理、継承( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　プロパティの説明はその後 8.ボックスモデル( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　です。 ★以下に順序だてて説明しておきますが、あなたの文書構造とは異なるので、それに合わせてしっかり理解して作業してください。 ★以下はタブを全角スペースに置換してあります。使うなら戻すこと 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ★理解して作業しないと絶対に出来ません。HTMLは率直に書き、スタイルシートを理解さえすればどのようにでもデザインできます。 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　このサイトで、表示メニューからスタイルシートを選択すると、このあたりがよくわかるでしょう。 ★一見複雑ですが、単純な配置をただ繰り返しているだけです。 目次として次のようにマークアップされていたとします。 　<div class="nav" id="contentTable"> 　　<ol> 　　　<li>最初に</li> 　　　<li>第一節 　　　　<ol> 　　　　　<li>第一節第１章 　　　　　　<ol> 　　　　　　　<li>第一節第１章第1項</li> 　　　　　　　<li>第一節第１章第2項</li> 　　　　　　　<li>第一節第１章第3項</li> 　　　　　　</ol> 　　　　　</li> 　　　　　<li>第一節第２章 　　　　　　<ol> 　　　　　　　<li>第一節第２章第1項</li> 　　　　　　　<li>第一節第２章第2項</li> 　　　　　　</ol> 　　　　　</li> 　　　　</ol> 　　　</li> 　　　<li>第二節 　　　　<ol> 　　　　　<li>第二節第１章 　　　　　　<ol> 　　　　　　　<li>第二節第１章第1項</li> 　　　　　　　<li>第二節第１章第2項</li> 　　　　　　　<li>第二節第１章第3項</li> 　　　　　　</ol> 　　　　　</li> 　　　　　<li>第二節第２章 　　　　　　<ol> 　　　　　　　<li>第二節第２章第1項</li> 　　　　　　　<li>第二節第２章第2項</li> 　　　　　　　<li>第二節第２章第3項</li> 　　　　　　</ol> 　　　　　</li> 　　　　</ol> 　　　</li> 　　　<li>第三節 　　　　<ol> 　　　　　<li>第三節第１章 　　　　　　<ol> 　　　　　　　<li>第三節第１章第1項</li> 　　　　　　　<li>第三節第１章第2項</li> 　　　　　　　<li>第三項第１章第3項</li> 　　　　　　</ol> 　　　　　</li> 　　　　</ol> 　　　</li> 　　　<li>第四節 　　　　<ol> 　　　　　<li>第四節第１章 　　　　　　<ol> 　　　　　　　<li>第四節第１章第1項</li> 　　　　　　　<li>第四節第１章第2項</li> 　　　　　　　<li>第四項第１章第3項</li> 　　　　　　</ol> 　　　　　</li> 　　　　</ol> 　　　</li> 　　</ol> 　</div> /* content Table(目次)の横幅を指定しておきます。ウィンドウの80%で中央 */ div#contentTable{ 　width:80%;min-width:640px;margin:0 auto; 　text-align:center;line-height:2em;/* これらは継承されるのでここで書いておく */ } /* 次いでリストをblockに変更し、その他細かい設定 */ div#contentTable ol,div#contentTable ol li{ 　display:block; 　list-style:none; 　margin:0;padding:0; 　position:relative;/* 子孫達が位置やサイズの基準に出来るよう */ } div#contentTable ol{width:100%;}/* 親のdiv#contentTableいっぱい */ div#contentTable ol li{ 　display:inline-block;/* 横並び */ 　width:18%; 　border:solid gray 1px; } div#contentTable ol li ol{ 　position:absolute; 　top:2em;left:-1px; 　width:100%;margin:0; } div#contentTable ol li ol li{ 　width:100%; 　display:block; /* blockに戻しておく */ } div#contentTable ol li ol li ol{ 　top:0; 　left:100%; } /* ここから下はおまけ */ div#contentTable ol li:last-child ol li ol{ 　left:-100%;/* 最後のものがはみ出したらまずいので */ 　/* CSS2.1ならdiv#contentTable ol li+li+li+li+li ol li ol */ } div#contentTable ol li:last-child ol li ol li{left:-2px;}/* border分微調整 */ /* 色づけ */ div#contentTable ol li:hover{background-color:yellow;} div#contentTable ol li ol li:hover{background-color:rgb(255,255,120);} div#contentTable ol li ol li ol li:hover{background-color:rgb(255,200,160);} /* 以下:hover処理 */ div#contentTable ol li ol{display:none;} div#contentTable ol li:hover ol{display:block;} div#contentTable ol li:hover ol li ol{display:none;} div#contentTable ol li ol li:hover ol{display:block;} /* ちょっとした遊び */ div#contentTable ol li:hover:before{content:"▲";position:absolute;left:-1em;top:0:color:red;}
＞また、マージンのサイズ、パッデイングのサイズを視覚的に確認したいのですが、どうすればいいのでしょうか？ 　firefox + firebugが良いでしょう。 　添付図の黄色がmargin、紫がpadding、水色が内容 　適用されているスタイルは左のウィンドウ firefoxの開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )には、他にもページ製作で欠かせないアドオンが沢山あります。
　とっても複雑怪奇なHTMLとCSSなので、何をしようとしているのかが、さっぱりわかりません。 　まず、HTML(頭文字なので、大文字で書くように)ですが、javascriptは問題ないので後回しにして・・文書構造だけを書きます。 <body> 　　<div class="header"> 　　　　<h1>ページタイトル</h1> 　　</div> 　　<div class="section"> 　　　　<h2>本文記事見出し</h2> 　　</div> 　　<div class="footer"> 　　　　<p><a href="/">サイトトップ</a></p> 　　　　<p><a href="#"></a></p> 　　</div> </body> 以外何も書く必要はありません。 container--多分意味的にはarticle--でしょうが、この程度のHTMLなら不要です。 　(article : 内部にheader,section,footerを持ちうる完結した記事) header,section,footerは、ひとつの文書内に何度も登場する可能性があるのでclassのほうが良いでしょう。 　header,section,footer,articleのclass名は、HTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )の名前とその用途を参考にしています。 　将来、HTML5に即変更できますから・・ [スタイルシート] ・背景画像をランダムに変更する。 ・headerは縦34pxでfixedで常にページ最上部に固定 ・footerは縦42pxでfixedで常にページ最下部に固定 ・サイトトップへのリンクは(194px×332px)のボタンでページの左上 　　　↑えらくでかいけど、このサイズ合ってます？？ 　また、最後の二つは矛盾しています。なぜなら、ボタンの位置を絶対配置しようとすると、その要素が含まれるstaytic以外の直近の親要素があれば、その親要素の位置が基準になるからです。 <body> 　　<div class="header"> 　　　　<h1>ページタイトル</h1> 　　　　<p><a href="/">サイトトップ</a></p> 　　</div> 　　<div class="section"> 　　　　<h2>本文記事見出し</h2> 　　</div> 　　<div class="footer"> 　　　　<p><a href="#"></a></p> 　　</div> </body> なら可能です。 　HTMLをデザインは無視して徹底的に文書構造をマークアップだけしましょう。後でどのようにもデザインできます。 　具体的に絵を載せるとわかりやすいです。
隠れるとは？ １、本当に裏に隠れるのか？　２、下に切れて見えなくなるのか？　３、下の落ちて表示されているのか？ １、positionを削除 ２、#aと#cの高さheightを調整 ３、iphoneで幅が狭くなって、下段に落ちているなら#aと#cと#dの幅width:を調整
結果として、 どのようなHTMLソースになるか検証すれば何処がいけないのか分かるのでは？ 右クリック→ソース表示： <td class="DisplayNumber？"> ？ </td> ０→0 class=“DisplayNumber%val:usr:hoge%" 　　　↓↓　 class="DisplayNumber%val:usr:hoge%" 条件分岐には、if文を使います。
＞上記ＨＰ IE8で作動しませんか？ IEがNGですね・・・ CSS3ではシャドウだけの話です。 つまり、IE8では影が出ないだけであって、その他の表示部分はCSS3の話は無関係です！ ------------------ IEの過去モードではレンダリングが隠れるから、 第一製作者が、二次制作者の環境を指定できないと想定できるので、 あえて、JS側でIEのツールチップを:noneにしていると思われます。 ちょっと見た限りでは、２つの修正方法が見つかりました。 まずは、その前提としては標準モードの話ですが、 （　<!DOCTYPE html>　これは二次制作者環境のDTDですので、二次制作者である貴方が設定する事） １つ目： JSのIE用の行を削除する。 if(navigator.userAgent.indexOf('MSIE') == -1) ２つ目： CSSでelement.styleを強制的にinlineにする。 div.cal_wrapper table.cal tr td div:hover span{display:inline !important; border-color:blue; color:red;} /* 上記をCSSに追加　確認のため色は変更済み */ どちらの方法でもIEでも表示されましたよ。　あ、３つ目：上記２をIEハックしても良いかな。
＞しかしCSS3のinitialという値は、「元に戻す」という考え方を取り入れようとしている証拠ではないでしょうか。 　いえ、CSSにはデフォルト値がinitialです。例えば displayのinitial値は、inlineですから、display:initial;とすれば、inlineに戻る。 nav ol {dispaly:block;} section nav ol{display:initial;} で、display:block;に戻るだけです。marginやpaddinもinputの初期値に戻るのではないです。 input{border:initial; background:initial;} は input{border:none; background:transparent;} と同値 ＞デザイン面から考えますと、リセットを一切しないのは多分無理ですね。 　ありえないです。多分オーサリングツールの仕様をそのまま流用している？ 　通称使用される要素ってせいぜい数十個です。そのうちデフォルトでよいものが大多数だと思います。 　リセットをなくするだけで、スタイルシートは数分の一になっちゃいます。 他の部分で指定してなければ、わざわざimportant!を使わなくても良いです。 単純に input{border:inherit;border-radius:0.5em;background-color:white;******} input:active{*************} と書けば、これらは詳細度[0 0 0 1]です。 　他で設定してあれば form table input{border:inherit;border-radius:0.5em;background-color:white;******} とか詳細度を上げればよい。 　inputなどユーザーインターフェースに関わる部分は、アクセシビリティの観点からデフォルトのスタイルシートを弄るべきではありません。
html,body{margin:0;padding:0;} を入れると消えるのでは？　
No.4の回答の補足です。本題からは外れているので無視して構いません。 ＞その理由はブラウザによっての差異をなくすためのものです。 　ブラウザの表示誤差の最大の要因は、互換モードで表示されるか否かです。これは、HTMLを標準モードで起動するようにDOCTYPEをきちんと記述することで、大多数のブラウザは標準モード--HTML4.01strict(以降)+CSS2.1に従って動作します。 　⇒DOCTYPEスイッチ - Google 検索( https://www.google.co.jp/search?q=DOCTYPE%E3%82% … ) 　その際適用されるブラウザのスタイルシートはおおむね 　⇒HTML 4.0におけるスタイルシートの例( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　になります。 　これで、相当ブラウザ間の誤差をなくすることができます。 　HTML5を目前にした今、さすがにtransitinalや互換モードでページを作成することはないでしょう。 ＞HTML5に対応していないブラウザをカバーしなければいけない状況だと思うので、HTML5はまだ取り入れていなかったのですが？？ 　⇒When should I start using HTML 5?( http://html5doctor.com/your-questions-answered-1/ ) 　今でも使えます。単にDOCTYPE文書宣言は <!DOCTYPE html> 　だけですみます。これで現行のブラウザは標準モードで動作します。 　HTML5の新しい要素をサポートしていないブラウザのために <div class="header">などとするか <!--[if IE]> <script src="http://html5shiv.googlecode.com/svn/trunk/html5. … <script src="http://css3-mediaqueries-js.googlecode.com/svn/t … <![endif] --> 　
No.1です。一応補足です。 画像にする目的は、ブラウザの設定に係わらず文字の大きさを制作者が指定した物にするためです。 文字の大きさが同じであれば確実に吹き出しの中に収まりますから、ブラウザの設定を考慮する必要がありません。 いずれにしてもHTMLでは無理だと思いますから、 見た目を優先するのであれば、文字をパス（アウトラインフォント）の状態で扱い、描画できるSVGやPDFをお勧めします。 全体をSVGやPDFにすれば全体のズームしかできなくなると思いますので、文字が吹き出しの大きさを超えるという事がなくなると思います。
No.2のサンプルには、ベンダーフィックスつけてませんので、それを付けてください。
　画像は置換インライン要素ですから、contentプロパティで内容を追加すると、当然ベースラインを合わせて表示されます。 　そこで、positionプロパティで位置を指定する必要があります。そのとき、absoluteを使用するなら、他の要素と切り離されて直近のstatic以外の親コンテナブロックの位置が基準になります。relativeを使用すると本来の位置からずらして表示させることが出来ますが、この場合本来表示されるべき位置・サイズにそれがあると他の要素が判断しますから注意してください。 　floatはいくらなんでも使わないでしょう。
＞翌月表示や前月表示もできてますよね。これって、どうやるのでしょうか？ 　これは、ページ自体が動的に作成されているのです。実際にどの技術が使われているかは、利用者からはわかりませんが、PHPなりCGI、あるいは、それを利用してつくられたカレンダーをincludeしているだけかもしれません。 　このように当月の行事や数ヶ月先のカレンダーも表示できるものは、動的に作成されていると考えて良いでしょう。 　カレンダーの上の矢印でカレンダーを移動してもページのURLは変わりませんが、カレンダーの上の「2013年4月」とかだと、URLが変わりますが、カレンダー自体はまったく変化しません。ページ自体はQUERY_STRINGSを判断してページを作成していますが実際には内容は変わっていません。?date=201301とかにしてみるとわかります。 　これから推測できるのは、ページ自体はPHPなりCGIを利用してはいますが、それはページの大部分を占める部分をいちいち書かなくて済む程度にしか利用していません。行事内容だけ入力する仕組みになったいるのでしょう。カレンダーも固定コンテンツに含まれているようです。 　そのうえで、それをスタイルシートでひと月分しか見えないようにしています。ブラウザの[表示メニュー]から「スタイルシート無し」にすると3か月分表示されます。 　これなら、同じようなフォーマットで、複数のカレンダーを作成し、毎月３ヶ月分のファイルを作成します。 　それをinclude--ご利用のサーバーがSSIを許可していれば、簡単なコマンドをHTML内に書くだけです。 <!--#include virtual="/calendar.htm" --> とか 　SSIが許可されていれば、拡張子をshtmlにして・・ 　なお、ページの拡張子は関係ありません。htmlをSSIとして動作させることも出来ます。 　なお、javascriptでカレンダーを設置するのか簡単かもしれません。ただし、これはユーザーの環境に依存します。個人のサイトならそれでも良いでしょう。 　
リンク先URLの値・・href="この部分"が同じなら当然そうなります。 visitedとlinkの色はアクセシビリティ上変えておくべきです。 ところで、HTMLは正しいですか? 　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) の右上のDATAをクリックしてソースを貼り付けてチェックしてみる。a要素が閉じられてないとか・・
:beforeや:afterを解釈できる比較的新しいブラウザであれば、一応こんな感じで回避できますね。今、思いついただけの方法なので、ベストプラクティスかどうかは謎ですがw p{ 　background: #f00; 　line-height: 3; 　font-size:15px; } p:before , p:after{ 　display:block; 　content:""; 　line-height:1; 　height:1px; 　width:1px; } p:before{ 　margin-bottom:-15px; } p:after{ 　margin-top:-15px; } :beforeや:afterを解釈できないブラウザに関しては、javascriptで対応させる感じかな。
すでにウェブページを作成してきた経験があれば、当然下記の一文は読まれていると思います。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　HTMLをなぜ使ってウェブページを作成するかの、最も重要な部分を忘れてしまっている。 　最も簡単なのは、率直にHTMLを書き、スタイルシートでデザインしていくだけです。 　⇒2.4 HTML 4による文書の著述( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　ウィンドウの幅に関わらずページが利用できるようスタイルシートでデザインしていきます。スマホはmediaqueryというCSS3の機能が利用できますから、特別スマホ用にデザインが必要ならそれを利用してスタイルシートを切り替えます。
私ならjsで、PCのときは電話番号（テキストだけ）表示、スマホのときはa href=telにします。 ヘッダに <script type='text/javascript'> function smtel(telno){ if((navigator.userAgent.indexOf('iPhone') > 0 ) || navigator.userAgent.indexOf('Android') > 0 ){ document.write('<a href="tel:'+telno+'">'+telno+'</a>'); }else{ document.write(telno); } } </script> 番号を記述したいところに <script type="text/javascript">smtel('***-****-****');</script> '***-****-****＝電話番号
　アコーディオンメニューと言う時点で、そのメニューは二階層のリストだと言う事はわかりますよね。 　HTMLには文書構造しか書きませんから、単純に <nav> 　<ol> 　　<li><a href=""></a> 　　　<ol> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　</ol> 　　</li> 　　<li> 　　　<ol> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　</ol> 　　</li> 　</ol> </nav> 　後方互換を考えると<nav>～</nav>は、<div class="nav">～</div>のほうが良いでしょう。 　あとは普通にスタイルシートでデザインするだけです。 [例] 　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　のどのスタイルシート(プルダウンと書かれているスタイルシート)を選択しても、スマホで(もちろんパソコン)でも利用できました。 　これをゆっくり開くようにするためには、CSS3のtransformを使用すれば良いでしょう。
縦も同様です。 ＞リキッドデザインで横向き画像を配置する場合、CSSでwidth100%で指定すると自動的にheightを計算されますが、 　通常は計算されないはずです!! 　(HTMLがきちんと書かれていれば、width,height属性でサイズが指定されている(詳細度は0000)) 　スタイルシート側で、width:100%;height:100%;とあわせて指定する必要があります。 　なお、画像は置換インライン要素なのでブロックにしたほうが良いでしょう。 <div class="section"> 　・・・ 　<div class="figure"> 　　<p><img src="./images/7.jpg" width="240" height="320" alt="白くて美しいキノコ"></p> 　　<p class="figcaption">キノコの写真</p> </div> div.section{position:relative;} div.section div.figure{width:20%;float:right:margin:5px;position:relative;} div.section div.figure p{margin:0;text-align:center;} div.section div.figure img{display:inline-block;width:90%;} とか・・ ・本文中(section)を内包ブロックの基準にする(relative) ・本文中の挿絵(figure)は、本文の幅の20%で右にfloatさせ、マージンは5px、内包ブロックの基準にする(relative) ・本文中の挿絵の画像はinline-blockにし幅は90% というふうに指定します。高さを基準にする場合も同じです。 HTML5で書かれていれば section{position:relative;} section figure{width:20%;float:right:margin:5px;position:relative;text-align:center;} section figure p{margin:0;text-align:center;} section figure img{display:inline-block;width:90%;} ですかね。 　一方を指定して、他方をauto;
Wordpressは、ブログシステムのひとつで、 ・コンテンツ（記事）の入力編集管理 ・テンプレート（表示外枠部分）の入力管理 を行い、Webページを自動生成するWebシステムです。 「CMS」とも呼ばれていますが、DupalやJoomlaなどの「ちゃんとした」CMSに比べると、機能は大幅に単純化されていて、そのぶん簡単になっています。 Worpressの記事はhtml、テンプレートはphpです。 また、JavascriptやCSSも通常のWebサイトのものを登録して使います。 「簡単に作成できる」というのは、テンプレートやJavascript / CSSなどをまとめた、「テーマ」と呼ばれるパッケージが多数公開されていて、それを簡単に導入できる仕組みがあるからです。 なので、何でもそうですが、自分のブログなどを作っている分には構築もデザイン変更も簡単ですが、特定のデザインやサイト構成などが必要になると、とたんに敷居が高くなります。 また、デザインする場合は、一度、Dreamweaver等で静的なデザインを起こし、それを反映していくスタイルになりますので、静的なサイト制作より何倍も手間がかかります。 ただ、いったんテンプレートが完成すれば、ページの追加や、それにともなうナビゲーションリンクなどが簡略化されるため、運用は楽になります。 DreamweavwerによるWebデザインを勉強中の方でしたら、書籍を買って系統的な勉強をされることを強くお薦めします。Wordpressは世の中で要求される、重要なスキルのひとつになっています。
単純に該当要素にpaddingをとるのが良いでしょう。
　HTMLがデザインのために書かれているので、実際何をされたいかがさっぱりなのですが、原因はブロックを二つに解釈されているのでしょう。ウィンドウ幅を様々に変えて試すと原因がわかるかも。 　その前に、示されたHTMLとキャプチャーでわからないところがあるのですが・・ <img src="images/ttl1.png" width="800" height="500" alt="title1" class="p-top25" /> と <img src="images/ttl2.png" width="800" height="300" alt="title1" class="p-top25" /> の画像、あまりに大きいのですが、キャプチャ画像では小さな[ttl1画像]になっています。？？
ディスプレイの違いもありますが、ソフトウェアごとでも色の扱い方が違うからです。 可能な限り近似の色になるように指定されたウェブセーフカラーがありますので、 デザイン（色彩）に制限が出ますが、ブラウザ間での違いは最小限に抑える事が出来ます。 http://e-words.jp/w/WebE382BBE383BCE38395E382ABE …
現代のPC用ブラウザはfont-size:medium;を指定すればほとんどが16pxで表示されます。 私はhtmlにその指定をして基準を作っておき、それから子要素に対して%を指定して調整してますね。 html { font-size:medium !important; font-size:small; /* この指定は古いIE用です */ } /* フォントサイズ%指定用 10px 62.50% 11px 68.75% 12px 75.00% 13px 81.25% 14px 87.50% 15px 93.75% 16px 100.01% 17px 106.25% 18px 112.50% 19px 118.75% 20px 125.00% 21px 131.25% 22px 137.50% 23px 143.75% 24px 150.00% 25px 156.25% 26px 162.50% 27px 168.75% 28px 175.00% 29px 181.25% 30px 187.50% 31px 193.75% 32px 200.00% */
LightBox v2.05環境の話だけど、 CSS/lightbox.css を編集 #lightbox{position: absolute;left: 0; width: 100%; z-index: 100; text-align: center; line-height: 0;} ↓　↓　↓　↓ #lightbox{position: absolute;left: 0; width: 100%; z-index: 100; text-align: center; line-height: 0; width:200px; height: 200px; overflow: scroll;} サイズを小さくして、overflow: scroll;してやればよいです。
プラグインのソースは、プラグイン本体を編集すれば可能です。 管理画面からプラグインをインストールしている場合は、ローカルにファイルが無いと思いますので、 /wp-content/plugins/ の中にあるものをダウンロードしてphp等を編集し、アップすればOKです。 プラグインはphp1個の簡単なものから複雑なものまで多種多様です。 複雑なものになると、編集箇所も多く難解な作業になるかもしれませんので、バックアップを取りながら作業する事をお勧めします。 プラグインの種類にもよると思いますが、フォルダ名を変更したり、別階層を作成したりする必要があるかもしれません。 そのような場合には、絶対パスと相対パスの違いや使い分けをおわかりでないレベルだと対応が非常に難しいと思います。 「WPだとばれると問題がある」というわけではなく、「ソースがごちゃごちゃしてて気持ち悪い」程度でしたら、 プラグインに関しては大目に見たほうが良いかと思います。 記事中の画像は、一番簡単なのは管理画面のメディアアップロード機能を使わずFTPで任意のフォルダに上げる事だと思います。 私は普段ローカルで記事のhtmlファイルを作成してから貼りつけてますので、 いちいちメディアアップロードを使うよりもFTPの方が速いです。 メディアアップロード機能を使いたいなら、アップロード先を変更する必要があります。 アップロード先の変更方法はWordpressのバージョンによって違います。 3.5以降のバージョンは、wp-config.phpの編集が必要です。 下記URLをご覧ください。 http://msn100.org/dashboard/upload_folder.html 上記は試したことが無いのでわかりませんが、用意したアップロード用のフォルダのパーミッションを 手動で変更する必要があるかもしれません。 それ以前のバージョンは、管理画面の「その他の設定」や「メディア設定」で で「アップロードするファイルの保存場所」を変更すれば可能です。
解説サンプルやフレームワーク（デザインテンプレート）を使うには、 HTMLやCSSの基礎知識が必須です。 http://www.htmq.com/ http://www.tohoho-web.com/www.htm もっと基礎から順を追って勉強しないと、何も出来ないですよ。 四角形の面積を求めるのだって、足し算や掛け算という基礎知識が無いと、 高さ×幅などと言われても掛け算の計算方法がわからない人には解けませんから。それと同じです。
いくつか対処法があります。 　私はfloatはほとんど使いません。特にブロックの配置には決してと言うくらい使用しません。 　ただし、IE7など後方互換を考えるときはfloatを使います。それでもきちんと標準モードで動作するようにしないと難しくなりますね。 　floatの場合は、必然的に左か右に寄せるしかありませんが、スマホのようにウィンドウ幅が小さいときは、2列になったりします。 　その場合は、設定がややこしいですが親コンテナブロックのサイズを参照して%幅で指定します。 　最近は、基本的にdisplay:inline-block;とtext-align:centerを使用することが多いですが、position:absoluteを使うこともあります。
テキストサイズは『pt　ポイント』で決めて居ませんか？ テキストサイズを『px　ピクセル』に変更すれば殆ど問題は無いはずです。 Macの解像度は72dpi、PCは96dpi （Macの12ポイントはPCでは16ポイントに成ります） 尚：検証にはＩＥは使わず、表示確認のみが宜し。 ＊ＩＥは『HTML5規格』に非対応です。 おまけ Macでの画面カンマ数値を『2.0』にすると『色再現』が良い様です。
こちらは解説です。とっても忙しい身の上なので、あまりお付き合いは出来ませんので、すべて書いておきます。足りないところは自分で調べてください。それが早道です。ただし、一番当てになるのは仕様書ですよ。 ★HTMLについては、難しくないと思います。見慣れているものと違うのは仕様書に準拠しているからです。(^^) 　divは、文書構造を補完するためにのみ使っています。それが本来の決まりですから・・ 　⇒DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　class名は、HTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )と意味をそのまま参考にしてあります。 　headerは文書のヘッダ、sectionは見出しを持ちうる本文、footerは文書のフッタ、articleは自身にheader,section,footerを持ちうる完結した記事を表します。 ★スタイルシート 　デザインは一切考えずに作成したHTMLをその文書構造を利用してデザインしていきます。 長いですが html,body{width:100%;margin:0;padding:0;background-color:gray;} ブラウザは、html,bodyに多少の隙間を作るので消しています。そして背景色を灰色にしています。 body{background-image:url(./images/background/sky.jpg);} bodyに背景を指定しています。場所とファイル名は上記の通り div.header,div.section,div.footer{ width:80%;max-width:900px; margin:0 auto; } header,section,footerのすべてをウィンドウ幅の80%にして、上下のマージンを0,左右のマージンを自動にしていますから、ウィンドウ幅に関わらず中央に表示されます。 div.section{position:relative;}/*位置の基準とするため */ 本文の子供要素(具体的にはarticle)のabsoluteでの位置の基準にするため指定しています。幅の基準にもなります。 ブロック要素は直近のstatic以外の親要素のサイズを参照しますから・・ div.section div.article{ /* div.sectionの子孫であるすべてのdiv.article */ width:48%;/* 親のdiv.sectionの半分の幅 */ height:300px; margin:0 1%; border:ridge 3px gray; overflow:auto; background-color:yellow; opacity:0.3;/* opacityなので背景も文字もすべて半透明 */ color:rgb(0,0,255); } width:二つarticleがあり横に並べたいので親ブロック(section)の48%幅にしています。 　　当然右のスペースがあきますね。そこに次のarticleをおく予定 height:300pxに固定 margin:もう少しあけたほうが良いかも、二つしか値がないので上下/左右になります。 border:枠線の指定 overflow:でフレームぽくなります。データ量が多いとスクロールバーが出ます。 background:で背景を黄色に opacity:でこの要素(article)全体を半透明に　当然文字も半透明 color:色は黄色に映える青 div.section div.article + div.article{ /* 隣接セレクタ、兄にdiv.articleがあるdiv.article */ position:absolute; right:1%;bottom:0; opacity:1;/* 不透明に戻す */ background-color:rgba(255,255,0,0.5);/* 背景色を半透明 */ color:rgba(0,0,255,0.3);/* 文字だけ半透明 */ } +は隣接セレクタ/兄弟セレクタと言って、何々に続くと言う意味 div.section 内の div.articleに続くdiv.article position:絶対配置で位置を指定します。 opacity:で先に指定して透明化したものを元に戻します。 　　こちらのほうがセレクタの書き方が詳しいので優先されます。上書きする background-color:背景に半透明を指定/ color:rgba(0,0,255,0.3);/* 文字色も半透明 */ div.section div.article:hover{ /* マウスホーバーのとき */ color:rgb(0,0,255)!important; opacity:1!important; background-color:rgba(255,255,0,1)!important;/* 背景色を不透明 */ color:rgb(0,0,255)!important; } ポインターが乗ったときの指定です。セレクタの詳細度が強くないので!importantで強制的に指定しています。 　背景を半透明にして、文字は不透明でしたらopacityでは駄目なことは、すぐわかると思います。その場合は背景だけを透明にします。色ならrgba()ですし、画像なら半透明な画像にするほうが楽でしょう。 　しっかり読めば、決して難しいものではありません。 　若いのに、根を上げたらダメですよ。私は還暦をとうに過ぎている。
参照ＵＲＬを参考にどうぞ！ 参考URL：http://www-01.ibm.com/support/docview.wss?uid=sh …
フェードアウトとは、時間経過によって変化することですよ。なら transition [transition-property transition-duration transition-timing-function transition-delay ]を使用することになります。 <nav> 　<ul> 　　<li><a href=""></a></li> 　　<li><a href=""></a></li> 　</ul> </nav> のa要素をdisplay:blockにして配置し、linear-gradient()で指定した値を変化させれば良いです。
もう少し詳しく説明を書いてください！ opacity要素を使いたいのだと思いますが？・・・ 仕様がわかりません！ 参考URL：http://www.css-lecture.com/log/css3/css3-opacity …
スマホは機種・バージョンによって、挙動が様々なので、 機種によっては正常に表示されている可能性もありますが、 <a href="sample.html#">リンク</a> のように、ハッシュをつけてみてはいかがでしょうか。 実際に両サイトがどういう作りになっているのかわからないので、 根本的な解決にはなりませんが…
↓のアドレス間違っていました。 http://www.nanden.asia/test/checkbox/checkbox_su …
ＣＳＳにbody要素を指定すればいいのでは？・・・ ほかに何か目的があるのでしょうか？・・・ body{ text-align:center; } div#topCouponSearch { background-image: url("./top_coupon_search_bg.jpg"); display: block; height: 26px; margin-bottom: 1px; width: 100%; } 以下省略
<meta name="description" content=""> <meta name="keywords" content=""> も、記述されるといいのでは？・・・ Ｇｏｏｇｌｅだと、1週間もすれば、ロボットが、拾ってくれるでしょう・・・ もっと上位に、表示してもらいたいのであれば、保障はできませんが、xml、owl、RSSなどで制作した、sitemapファイルを、サイトにアップすれば、たぶん大丈夫でしょう。
各タグ?ではなく各要素ですね。 <p>ここは段落というブロック要素</p> ↑　　　　　　　　　　　　　　　　　　↑ タグ←----要素の内容----→タグ(終了タグ) ←----------要素------------→ 正しく使わないと他人に意味がまったく伝わりません。 『要素はタグではない。 例えば「Pタグ」といった具合に、要素のことをタグという人もいる。しかし、要素は要素であり、タグはタグである』 　⇒3.2 HTMLで用いられるSGML構成素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　また、HTMLにはブロック要素と行内要素(インライン要素)というとっても大事な区別があります。 　⇒7.5.3 ブロックレベル要素と行内要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　span要素、input要素はインライン要素ですから、widthやheightは、内容(↑上記)に従います。非置換インライン要素とよばれます。img要素も行内要素ですが、テキストが他のものに置き換わるので置換インライン要素で属性によってサイズが決められます。 HTMLを正しく書き直すと <form id="form1" action="" method="post" name="form1" style="text-align:center"> <p><input type="text" value="（例）住所・駅名・郵便番号・ランドマークを入力" name="address" width="60"></p> <p><button id="getad">検索</button></p> <p><a href="?act=u05">店舗一覧</a> </form> たったこれだけで良いです。 いちど仕様書に目を通しておきましょう。最初にすべきことですよ。
#2です（補足拝見済み） >IE9 そじゃきっと、HTMLが過去モードになっているね・・・ 標準準拠モードで書いてみましょう！
　繰り返しますがインラインフレームではありません。インラインフレームぽく見せる方法です。 　まず、HTMLとCSS、javascriptは分けて考えてください。でないと先に進めません。 　あせったらダメです。急がば回れ!! HTMLにて、【注】見やすいようにタブは全角スペースに置換してある。 <body> 　<div class="header"> 　　<h1>文書のタイトル</h1> 　　<p>要約など</p> 　</div> 　<div class="section"> 　　<h2>本文タイトル</h2> 　　<p>本文記事の段落</p> 　　<p>本文記事の段落</p> 　　<div class="article"> 　　　<div class="header"> 　　　　<h3>独立した記事(1)のタイトル</h3> 　　　</div> 　　　<div class="section"> 　　　　<p>記事内容</p> 　　　　<p>記事</p> 　　　　<p>長くなるとスクロールバーが出てくる。</p> 　　　</div> 　　</div> 　　<div class="article"> 　　　<div class="header"> 　　　　<h3>独立した記事(2)のタイトル</h3> 　　　</div> 　　　<div class="section"> 　　　　<p>記事内容</p> 　　　　<p>記事</p> 　　　</div> 　　</div> 　</div> 　<div class="footer"> 　　<h2>文書情報</h2> 　</div> </body> 　のようにHTMLには文書構造をそれを構成する要素の内容に合わせてマークアップしていきます。(注)ここでのclass名は、HTML5の新しい要素を参考にしています。 　背景画像を変えたいのですから、javascriptを書きます。それを呼び出すタイミングをbodyが読み込まれたタイミングにするために onload="timerID=window.setInterval('my_clock()',250);" をbody要素に書き加えておきます。 　次に、独立した記事(headerやsection,footerを持つかもちうる、それ自体が独立しうる記事)としてマークアップされている本文内のふたつのDIV -----DIVはこの様に要素をグループ化するために使用します。文書構造を示すためにclass名などをつけます。-----をインラインフレームのように、スタイルシートを使って本文中に配置します。 　そのときに、文書構造がマークアップされているので、それを使用します。 html,body{width:100%;margin:0;padding:0;} div.header,div.section,div.footer{ width:80%;max-width:900px; margin:0 auto; } div.section{position:relative;}/*位置の基準とするため */ div.section div.article{ /* div.sectionの子孫であるすべてのdiv.article */ width:48%;/* 親のdiv.sectionの半分の幅 */ height:300px; margin-left:0 1%; border:ridge 3px gray; overflow:auto; background-color:yellow; opacity:0.3; color:rgb(0,0,255); } div.section div.article + div.article{ /* 隣接セレクタ、兄にdiv.articleがあるdiv.article */ position:absolute; right:1%;bottom:0; opacity:1; color:rgba(0,0,255,0.3); } div.section div.article:hover{ /* マウスホーバーのとき */ color:rgb(0,0,255); opacity:1!important; color:rgb(0,0,255)!important; }
No.1さんの回答に同意するけど、 どうしても画像にしたいなら探すより自分で作った方が早い。 Windows標準の「ペイント」で画像サイズを1×1にして好きな色の点を打って保存するだけ。
参考になれば・・・ 世の中には、さまざまなディスプレイがあります。 それらで、すべて同じようなデザインにすることは、非常に難しいことです。 そのため、一般的に、もっとも仕様の多いディスプレイの最大幅1240px or 960px程度に設定する場合が多いようです。 そこで、最大幅を、1240ｐｘ、あるいは、960pxにした場合、それより狭い表示幅しかないデバイスに対しどのような対策を、しておかなければならないか・・・・・ということになります。 そこで最近では、レスポンシブレイアウトという技法を取り入れたサイトが、多くなっています。 有名なのは、Bootstrapとか、JQueryMobile、Yaml4などです。 検索されると、簡単に見つかると思います。 これらの、Ｆｒａｍｅｗｏｒｋは、グリッドレイアウトと、CSS3のResponsiveLyoutという手法を合わせて制作されています。 このような、Frameworkを利用すると、簡単に制作できると思います。 参考URL：http://twitter.github.com/bootstrap/
基本的な考え方は、min-widthを指定して並べればよいです。幅が指定できるのはブロック要素ですからブロック要素内でinline-blockなブロックを二つ並べます。 ★おまけで、columnを使う段組方法を加えておきます。 　残念ながら、IE9以前は使えません。他のモダンブラウザはOK 　現状では、以前に示したようにふたつのOLにするほうが良いでしょう。 ★<DOCTYPE>をこの様にすると標準モードで起動します。 ★序列リストですから<ol>でマークアップすべきです。 ★(iframe内のURLのQUERY_STRINGSの&は、&amp;と書くべきです。) ★(iframeには必ずtitleを書くようにしましょう) ★Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# )で検証済み 　HTML4.01transitinal+CSS3 です。 ★とにかくHTMLスタイルシートはシンプルにしましょう。 ★ディスプレイ幅は、スマホの480px～1000px程度まで対応しています。それ以上広い場合は1000pxで固定されて中央 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;width:100%;background-color:silver;} h1,h2,h3{margin:0 auto;text-align:center;} div.header,div.section,div.footer{width:95%;max-width:980px;margin:0 auto;background-color:white;min-width:480px;} /* headerブロックの指定 */ div.header{background-color:black;color:red;height:60px;white-space:nowrap;} div.header h1,div.header p{margin:0;line-height:60px;display:inline-block;text-align:center;font-size:20px;vertical-align:top;width:50%;} div.header h1{min-width:18em;height:60px;} div.header p{text-align:right;height:60px;margin:0;} /* 本文ブロックの設定 */ div.section h2{display:none;} div.section div.section h3{margin:0;line-height:25px;font-size:18px;} div.section{position:relative;} div.section div.section{width:100%;} div.section div.section ol{ padding:5px; width:80%;margin:0 auto; list-style-position:inside; border:solid blue 1px; /* columnで段組(IE10以降、およびfiefox,Chrome,Opera,safari */ -moz-column-width: 40%; -webkit-column-width: 40%; -o-column-width: 40%; -ms-column-width: 40%; -moz-column-count: 2; -webkit-column-count: 2; -o-column-count: 2; -ms-column-count: 2; -moz-column-rule: 1px solid gray; -webkit-column-rule: 1px solid gray; -o-column-rule: 1px solid gray; -ms-column-rule: 1px solid gray; } div.section div.section ol li{white-space:pre;} /* はみ出すものを消す */ div.section div.section ol li{ overflow:hidden; } div.section div.section ol li:hover{background-color:yellow;color:red;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>＊＊＊＊＊＊＊＊＊＊＊ブログ</h1> ＿＿<p><iframe src="--略--" width="468" height="60" scrolling="no" marginwidth="0" marginheight="0" border="0" frameborder="0" style="border:none;"></iframe> </p> ＿</div> ＿<div class="section"> ＿＿<h2>本文タイトル</h2> ＿＿<div class="section"> ＿＿＿<h3>他ブログ訪問</h3> ＿＿＿<ol start="10"> ＿＿＿＿<li>あいうえお</li> ＿＿＿＿<li>かきくけこさしすせそたちつてとなにぬねのかきくけこさしすせそたちつてとなにぬねの</li> ＿＿＿＿<li>さいすせそ</li> ＿＿＿＿<li>たちつてと</li> ＿＿＿＿<li>なにぬねの</li> ＿＿＿＿<li>はひふへほ</li> ＿＿＿＿<li>まみむめも</li> ＿＿＿＿<li>やゆよ</li> ＿＿＿＿<li>らりるれろ</li> ＿＿＿＿<li>わゐうゑを</li> ＿＿＿＿<li>あいうえお</li> ＿＿＿＿<li>かきくけこ</li> ＿＿＿＿<li>さいすせそ</li> ＿＿＿＿<li>たちつてと</li> ＿＿＿＿<li>なにぬねの</li> ＿＿＿＿<li>はひふへほ</li> ＿＿＿＿<li>まみむめも</li> ＿＿＿＿<li>やゆよ</li> ＿＿＿＿<li>らりるれろ</li> ＿＿＿＿<li>わゐうゑを</li> ＿＿＿</ol> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h3>他ブログ訪問</h3> ＿＿＿<ol start="5"> ＿＿＿＿<li>あいうえお</li> ＿＿＿＿<li>かきくけこかきくけこさしすせそたちつてとなにぬねのかきくけこさしすせそたちつてとなにぬねの</li> ＿＿＿＿<li>さいすせそ</li> ＿＿＿＿<li>たちつてと</li> ＿＿＿＿<li>なにぬねの</li> ＿＿＿＿<li>はひふへほ</li> ＿＿＿＿<li>まみむめも</li> ＿＿＿＿<li>やゆよ</li> ＿＿＿＿<li>らりるれろ</li> ＿＿＿＿<li>わゐうゑを</li> ＿＿＿＿<li>ん</li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
これでどうでしょうか。 .lino li{ height:1.1em; overflow:hidden; } <ul>ではなく<ol>を使えば、番号は自動で表示されるようになります。
floatを使う場合は それを囲む外側の要素に、内包するfloatさせたい要素全部が横並びするだけのwidthを指定しておかないと、ウインドウの端で折り返されます。 body{width:12000px;}
お使いのスクリプトすべてを見たわけではないので推測ですが、表記の順は大丈夫ですか？ まず最初にjqueryの本体を読み込んで、 次にそのプラグイン、 次にhtmlに直接表記する$(function() {（中略）});、 最後にIE特記の順じゃないかなぁと、思います。自信ないですけど。 あと、ご質問とは関係なく気になったのですが、 <noscript><link rel="stylesheet" href="[fallback css]" /></noscript>はIE6-8だけ必要なんでしょうか？ 他のブラウザでも必要なら、以下の記述では？ <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.8 … <script type="text/javascript" src="jqueryのプラグイン"></script> <script type="text/javascript"> $(function() {（中略）}); </script> <!--[if (gte IE 6)&(lte IE 8)]> <script type="text/javascript" src="../js/selectivizr.js"></script> <![endif]--> <noscript><link rel="stylesheet" href="[fallback css]" /></noscript>
> 常に左ボックスの縦幅を長くするので、外枠は右ボックスの縦幅にしたいのですが、当ブログでは右ボックスの縦幅に成っています。 > mainboxで、左右両方のボックスを囲んでいるので、自動的に左右ボックスの縦幅の長い方が外枠になると期待しました。 > どこが間違っているのでしょうか？ mainboxにclearfixがかかっていない所為ですね。…(A) floatした要素の高さは親要素の高さに反映されません。 そのため左ボックスの高さが、mainbox反映されていないのです。 【参考】　http://blog.d-spica.com/entry/070307clearfix.html こうした問題を解消するために、clearfixという手法を使います。 現在は <div class="cr">に{clear:both;}をして、見た目上だけfloatを解除していらっしゃいますが、これはよいことではありません。 > .mainbox{ display: inline-table; } > の記述は、ＰＣ画面が大きい時に、２つ以上の左右ボックスを続けて配置する為で宜しいですか？ いいえ、上記で説明したclearfixの記述方法の１つです。 clearfixにはいろんな方法があるので、検索してみるといいですよ。 ------------- .mainbox:after { content: "."; display: block; height: 0; clear: both; visibility: hidden; } .mainbox{ display: inline-table; } /* Hides from IE-mac \*/ * html .mainbox { height: 1%; } .mainbox { display: block; } /* End hide from IE-mac */ ------------ ↑上記の部分は「mainboxの内包する要素のフロートを解除する」というclearfix記述の一例です。 それから、おそらくIEでご覧になっているのでしょうが、他のブラウザやモニタサイズが違う場合の表示も確認しましたか？ 最近はIEばなれが加速していますからきちんと確認したほうがよいですよ。 私もすべてのバージョンで確認したわけではありませんが、 添付の画像のように、firefoxの場合はIEとほぼ同じに見えています。 しかしChromeの場合は文字の量によってボックス幅がばらついています。…(B) IE、firefoxともに、幅の狭いモニタだと、改行されて右ボックスが高くなる場合がありますので工夫が必要でしょう。…(C) 対策としては、 (A).親ボックスにきちんとclearfixを指定する。 (B).親ボックスに幅を指定する。（●px、または100％など） (C).1行あたりの文字量を一定にする。もしくは、 中央のボーダーを背景画像で処理する（左右のボックスにはボーダーを指定しない）。 以下に中央のボーダーを背景画像で処理する場合のcssを書いておきます。 背景画像を1px四方のグレーの画像（仮にborder.gifとします）とした場合です。 .mainbox{ width: 100%;/* …(B) */ border: 1px solid #999999; background-image: url(border.gif);/* …(C) */ background-repeat: repeat-y; background-position: center top; } /* ※以下…(A) */ .mainbox:after { content: "."; display: block; height: 0; clear: both; visibility: hidden; } .mainbox{ display: inline-table; } /* Hides from IE-mac \*/ * html .mainbox { height: 1%; } .mainbox { display: block; } /* End hide from IE-mac */ /* ※…(A)ここまで */ .box-a{ float: left; width: 50%; } .box-b{ margin-left:50%; } .mainbox ol { list-style-position: inside; padding: 10px; margin: 0px; } HTMLは前回と同じです。 蛇足ですが、3の回答者の方がおっしゃっているように、ナンバーをいちいち打つのではなく、<ol>リストにして自動でナンバーがつくようにしたほうがよいですよ。 右側のリストを続きの数字で始めたいなら、<ol start="●(半角数字）">とすれば指定した番号から始まります。
先のご回答にもありますが、spanはインライン要素、divはブロックレベル要素です。 インライン要素の中にブロックレベル要素を入れてはいけない、というのが基本的な原則です。 下手なたとえかもしれませんが、インライン要素を液体（流し込めるもの）、ブロックレベル要素を固体（箱のようなもの）とお考えください。 インライン要素にはサイズや余白を指定しても効きませんし、ブロックレベル要素を包み込もうとしても、うまく行きません。 逆にブロックレベル要素にインライン要素を入れるのは問題ありません。 不勉強にして<downcount>というタグは見たことがないのですが、 <div> ああああ <downcount id="countdown0" class="hasCountdown"> <span class="countdown_row countdown_amount">7339日 00:55:13</span> </downcount> いいい </div> という記述ではいけないのでしょうか。
　スマホだから特別なわけではありません。そもそもスマホ用、PC用、携帯用、点字端末用、スクリーンリーダー用、印刷用・・と作っていたら折角HTMLを使ってページを作成する意味がありません。 　【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 ・・・【中略】・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［2.2.1 HTMLの略歴( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 例えば、 <nav> 　<ol> 　　<li><a href="">項目イ</a></li> 　　<li><a href="">項目ロ</a></li> 　　<li><a href="">項目ハ</a></li> 　　<li><a href="">項目ニ</a></li> 　</ol> </nav> というHTMLだとします。40px程度の画像を用意しましょう。 ★極端に表示サイズより大きいとネット負荷もレンダリング負荷もまた仕上がりも・・・ 最大で表示されるサイズの倍程度にすると良いでしょう。 　以下では40px×40pxにしています。 印刷用には適用させたくないので、media="screen"を書いておくと良いでしょう。 html,body{margin:0;padding:0;width:100%;} nav ol,nav ol li{display:block;margin:0;padding:0;list-style:none;} nav ol{width:100%;line-height:30px;} nav ol li{width:100%;background:linear-gradient(white, silver);} nav ol li+li{margin-top:5px;} nav ol li a{display:block;width:100%;height:100%;} nav ol li a{background:url(./images/navi/rarrow.gif) right 50% no-repeat;background-size:contain;;}
これだけ広く使われているWordPressをディスる方が多いのにちょっとびっくり。 WordPressって、そんなに使い辛いですか？ そりゃ、静的なWebデザインから見たら、テンプレートはphpだし、プログラム的に見ればAPIは貧弱で、プラグインで何とか形を成しているようなものだし、CMSに比べれば、日記以外なら使いもしないコメントやトラックバックは不要だし、妙に使いにくい点など、いろいろと不備はあると思います。 ですが、とにかく有名だし、依頼してくるお客自身がWPの管理画面に慣れているケースが多いので、マイナーなCMSや、自前で作り込むWebアプリなんかより客の安心感は高いようです。 テンプレートが「素の」phpなので、最悪コードを直打ちすれば何とかなる安心感。APIだけで全部始末しなければいけない「某ブログ」より、何倍も安心感があります。 テンプレート構造は柔軟だし、親子（階層）関係を作れるので、ネスティングも簡単。このあたりはベストセラーだけあって、良く練れてるんじゃないでしょうか。 ただ、固定ページも含め、ぜんぶをWPで構築するハードルは、たしかにWebデザイナさんにとっては高いかもしれません。 その時（デザイナがどうしてもCMSを嫌う場合）は、外枠部分を普通にDreamweaverなどで「静的html」で作ってもらい、コンテンツ部分だけをWPで吐いて、html側からAjaxで読込で合体させる方法も使います。 （自分は、あとあと大変になるので、「静的html」と「WP生成」の両方で、レイアウト（＝外枠部分）を別々に持つことは行いません。あくまでどちらかに持たせる主義でます） ただ、そんなケースは稀で、基本はWPで全部のページを作り込めむことです。 自分はこのサイトを見て、目から鱗状態になりました。 特に、テンプレート階層の理解と、カスタム投稿タイプ、カスタムタクソノミーの概念が重要なことです。WPは最新バージョンで。旧バージョンで無理して構築するテクニックなど不要です。 WordPressでブログじゃないWebサイトを作るときのいろいろ（サンプル付き） http://webdesignrecipes.com/wordpress-corporate- …
＞おなじIDやクラスに別の命令をした場合、どのような形で優先順位がつくのでしょうか？ 　スタイルシート(カスケーディングスタイルシート)のカスケーディングは、CSSの最も重要な肝となる仕組みです。これを理解しないとスタイルシートは使えません。 1)出所 　ユーザーの最重要宣言＞著者の最重要宣言＞著者のスタイル＞ユーザーのスタイル＞デフォルト(ユーザーエージェントの持つスタイル 2)継承されるかされないか 3)詳細度 4)出現順位 　詳しくは、 　⇒セレクタ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 値の割り当て、カスケード処理、継承( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ★ただし現行のCSS2.1では詳細度について変更になっています。英文しかありませんが 　⇒6.4.3 Calculating a selector's specificity( http://www.w3.org/TR/CSS2/cascade.html#specificity ) 　最重要宣言・出所・継承・詳細度でソートされ、同じ詳細度なら登場順に決まるということです。
CSSにエラーがないとすると、次にチェックすべきはカスケーディングです。カスケーディングスタイルシート(CSS)をお使いですから、CSSの命ともいえるカスケーディングの仕組みはご存知だと思いますから、失礼かもしれませんがお許しください。 1)出所 　ユーザーの最重要宣言＞著者の最重要宣言＞著者のスタイル＞ユーザーのスタイル＞デフォルト(ユーザーエージェントの持つスタイル 2)継承されるかされないか 3)詳細度 4)出現順位 　の順番でしたね。 h3 はタイプセレクタですから詳細度は[0 0 0 1]ですから、 ・ユーザーの最重要宣言や著者の最重要宣言がされていないか ・backgroundは継承されませんから無関係 ・他により詳細度が高い宣言はないか 　　div.section h3{}詳細度[0 0 1 2]があれば、h3[0 0 0 1]では上書きできません。 ・それらが同じなら、その指定より後に宣言して上書きしていないか を確認します。 　分かりにくい場合は、ウェブ開発されているならfirefoxをご利用だと思いますが、開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )にFirebugと言うアドオンがあります。それを使って該当する要素に対するスタイル指定を確認できます。
2です。 他にも発見したのでリンク先書いておきます。 「jQueryとCSSによるリモートロールオーバー（IE6対応）」 http://web.showjin.me/jquery_remoterollover.html 「サムネイルのマウスオーバーでメイン画像を切り替える」 http://mizuame.sakura.ne.jp/jquery.tgImageChange …
6.KINO site – web & graphic design これは『ネームタグ』で飛ばしてます。 <li><a href="#news">News</a></li> リンク先は <a name="news"></a>の所
＞ちなみに本格的なHP作成歴はありません。 ＞直接のタグ打ちよりも、視覚的な使い方であれば、なお良いです。 この僕もすでに使っていますが　これがオススメです 『ワードの操作感覚で誰でも簡単に作れる』　　で検索してみて下さい きっと役に立つソフトだと思いますよ
word system をOFFに設定すれば大丈夫です。
単に掲載するだけなら， ・自分で撮っていること (著作権の問題が発生しないこと) ・風景写真において写真の一部に群衆が映り込んでいて，「群衆の一部」としてたまたま有名人がいた場合 であれば，掲載できるでしょう。 観光地でそれなりに人がいる中で観光対象物の写真撮ったら，映ってしまった人の中によく見たらたまたま有名人がいた，というような場合です。 恐らく，「やりたいこと」とは全く異なるでしょうが。 なお，後者は，色々なサイトを見る限り，以下の判決文に「～とは異なり」と書かれている部分から導きだされているようです。 # 肖像権の方ですが。 東京地裁　平成１６年（ワ）第１８２０２号　損害賠償請求事件 http://www.translan.com/jucc/precedent-2005-09-2 … 第三　当裁判所の判断 - 一 　争点(1) - （２） - イ - （イ） > 本件写真は、原告の全身像に焦点を絞り込み、容貌を含めて大写しに撮影したものであるところ、このような写真の撮影方法は、撮影した写真の一部にたまたま特定の個人が写り込んだ場合や不特定多数の者の姿を全体的に撮影した場合とは異なり、上記(ア)のとおり被写体となった原告に強い心理的負担を覚えさせるものというべきである。 パブリシティ権に関しては， 最高裁　平成２１年（受）第２０５６号 損害賠償請求事件 http://www.courts.go.jp/hanrei/pdf/2012020211114 … ３ - (1) > 肖像等を無断で使用する行為は，(1)肖像等それ自体を独立して鑑賞の対象となる商品等として使用し，(2)商品等の差別化を図る目的で肖像等を商品等に付し，(3)肖像等を商品等の広告として使用するなど，専ら肖像等の有する顧客吸引力の利用を目的とするといえる場合に，パブリシティ権を侵害するものとして，不法行為法上違法となると解するのが相当である。 なので，営業目的などの場合で無ければ，問題になることは少ないかと。 # 私は法律を学んだことはないので，上記判決文他を当たった上で，利用は自身の判断でお願いします。
ASPでしたら、検索でこんなのがありました。 新着情報更新管理システム http://memot.info ・インターネットに繋がっているPCがあればどこからでもホームページ内の新着情報やお知らせを管理 シンプルですが、画像付きの詳細ページも作れるようです。 更新情報は確かに知識の無い方でも気軽に更新できるようなシステムにしておいた方が 良いですよね。 サイトが何も更新されずに止まったままではせっかくのサイトが活きてこないかと。 他の回答者様のようなプログラムインストール型も含めて、良いシステムが出来上がると良いですね。
　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html ) 　⇒The W3C Markup Validation Service( http://validator.w3.org/#validate_by_input ) などで文法チェック 　仕様書は必ず目を通しましょう。 7.5.1 BODY要素 <!ELEMENT BODY O O (%block;|SCRIPT)+ +(INS|DEL) -- document body --> 　　⇒7.5.1 BODY要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　%block;( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )についてはリンク先を・・・ 　link要素は%blockではありませんし、<head></head>内にしかかけません。 　ブラウザは、文法が間違っていても表示するようにすることが仕様でも求められていますが、それに期待するのではなく、著者は文法に従わなければなりません。なぜなら、文法に合致してない場合にブラウザが行う独自解釈はブラウザによって異なるからです。
参考サイトのブログを拝見しましたが、ブログサイトではないのでは？・・・ 使っているサーバーが、cgi_binホルダーを要求するのであれば、ただのscriptを使いテキスト分を変数化して、読み込みしているだけだとおもいますよ。 もしかすると、databeseを利用しているかもしれませんが、ハッシュを使って処理すればできるのでは・・・・ 初心者であれば、Wordpressを使ったほうが、メンテが楽でしょう。 その場合も、ホルダ名は、wordprss、あるいはblogホルダーにして環境を整える必要があります。 まずは、ＷＥＢサーバーの構築をすることが最初では？・・・ 参考URL：http://www.adminweb.jp/apache/install/
問答無用でページランクを上げる方法が一つあります。 国から自分のサイトにリンクを付けてもらうこと。 大学などの研究機関から学術的な内容でリンクされる、 地方公共団体から行政との連携事業でリンクされる、 なんてのも強いですね。
再質問への回答です。 コードだけで作っていく人、実は結構多いですよ。 私もコードだけで作ってます。 自分個人としての小さなサイトなら、殆どはTeraPadで作っちゃいます。 それでもレスポンシブデザインだったりします。 商用のサイト作成なら、仕掛けも多く必要になるので、Net Beans IDE で作ってます。 Dreamweaver の使い方覚えて、その後コードの直し方覚えるより、最初からコードの書き方覚えるほうが手っ取り早いかなって思ったもので。CS6はとっても良さげなんで、金持ちで今から始めるなら、それもありかと思うけど。 勤務先の法人でも以前は基金訓練と公共職業訓練やってました。あまりの理不尽な縛りに対応しかねて、現在は求職者支援訓練の申請を見送っています。 縛りをクリアする形でWEBコースをやろうと思えば、Win7 +VMの有料版+有料ディストリビューションの組み合わせで、秀丸使ってタグ打ち教えるしかないかな。その場合は、テキストを自前で作成しなければならない。絶対に経費倒れが目に見えている。
えー、まず、用語の定義がおかしいです。 Flash技術に対比されるのは、HTML/CSSによるデザイン要素配置です。 で、それを制御するのがJavaScriptであり、簡単に使えるようにしたものがJavascriptのライブラリであるjQueryです。 そちらが「jQuery」とおっしゃっているのは、おそらくjQueryプラグインのことで、スライダーやイメージギャラリのように、初期設定まで全部jQueryでやってもらうものだと思います。 そういう意味では、貴社なりの表現が必要なカスタマイズ分野には、適合するjQueryプラグインはありません。 CSSを用い、透過処理のアルファ情報を含む32bit画像の重ねを、jQueryなどでインタラクティブに実現していきます。 やっていることは、FlashをActionScriptで制御していることに似ています。配置する画像データのメモリ制御や、動きのスムーズさなど、複雑なものになるとFlashを使った方が何倍もいいでしょうけど。。 Flash代替ということでは、いっそ、HTML5/SVGを使う方法はどうでしょうか。 長らくオーサリングツールがなく、また制御するJavascriptライブラリが未開発だったのですが、ようやくAdobeがいい感じの製品群を出してきました。 まだ実績がなく、自分も様子見の状態ですが、Edgeが使えるようになってきているようです。 Adobe Edge Animate http://html.adobe.com/jp/edge/animate/ Edge AnimateのJavascriptライブラリCreateJSです http://www.createjs.com/#!/CreateJS SVGアニメーションはこれで決まりかな？　と思います。 まだ人身御供状態ですが、チャレンジする根性はありますか？
こんにちは > backgroundで表示させる画像を　java　ｓｃｒｙｐｔ　でスライドショー 表示 > どの大きさのピクセル画像サイズでも自動で縮小・拡大（FAX＆VIEWERのように）　表示ウィンドウサイズにピタリおさまる表示を自動でするようなスクリプト とのことですが、自動リサイズをかけるとして、そのスライドショー表示を行っているコードの処理の流れを提示していただかなければ、アドバイスしようがないと思うのですが。
おしい #header #test スペースが必要です。もちろん半角 #header #test a{} だと id header内の id test 内の aタグに対するものとなりんす。
まず、HTMLをIEが標準モードで起動するように変更しましょう。 　⇒DOCTYPEスイッチ( https://www.google.co.jp/search?q=DOCTYPE%E3%82% … ) 　互換モードだと、IEはboxサイズがborder辺の内側になってしまいます。 　input要素は、行内要素です。 　⇒7.5.3 ブロックレベル要素と行内要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　この区別はとても重要です。行内要素にwidthは指定しても意味がありません。 「(widthプロパティ)は、ブロック要素と置換要素の内容領域の幅を指定する。( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )」 <table border="1" summary="form"> 　<thead> 　　<tr> 　　</tr> 　</thead> 　<tbody> 　　<tr> 　　　<th abbr="name">お名前</th> 　　　<td class="name text"> 　　　　　<input type="text" value="" tabindex="2" size="20"> 　　　</td> ・・・ table[summary="form"] td{display:relative;} table[summary="form"] td.name input{display:block;width:auto;margin:0;} ポイント 1)行内要素inputをblockにします。これで、直近のstatic以外の親コンテナブロックのサイズを参照できます。 2)親コンテナブロックのtdをstaticからrelativeに変更します。 　携帯電話やスタイルシートを利用できないブラウザのため（後方互換）に、input要素にサイズを指定しておきましょう。 　table要素のsummaryは必須属性です。それを利用してセレクタを書くと簡単です。
パンくずリストは、トップ(ルート)からの一方的方向を記述します。 <p class="breadcrumb list"><a href="/">TOP</a>&gt;<a href="/books">書籍</a>&gt;<a href="/books/web">ウェブ</a>&gt;<strong>HTML5</strong></p> とか・・・ 　パンくずリストの意味・目的・由来からこの様な道しるべをパンくずリスト(breadcrumb list)と言います。 　複数カテゴリ--サイト内ナビゲーションでしたら、ナビゲーションリストとしてマークアップします。 <nav id="SITEMAP"><!-- HTML5未満は<div class="nav"> --> 　<ol> 　　<li><a href="/">TOP</a></li> 　　<li><a href="/books">書籍</a> 　　　<ol> 　　　　<li><a href="/books/web">ウェブ</a> 　　　　　<ol> 　　　　　　<li><a href="/books/web" class="current">HTML</a></li> ・・・・ 　　　　　</ol> 　　　　</li> 　　　</ol> 　　</li> 　　<li><a href="/product">製品</a> ・・・・ 　　</li> 　</ol> </nav> 現在位置を示すためにcurrentのclass名をつけてます。 出来上がったナビゲーションをどのようにデザインするかは、ご随意に・・ [例]　⇒ナビゲーションリストを様々にデザインしてみよう。( http://www.ichiya.com/WebService/Howto/sample/HT … ) 　で表示メニューからスタイルシートを選択すると・・
何度も失礼します。 変ですね、わたしの作ったデータではちゃんと動いていますけど。。。。 IE7～9,firefox,Chromeで確認したけど問題ないようです。 動かないのはどのブラウザで試してのことなのかも、書くとアドバイスがつきやすいと思いますよ。 念のためｃｓｓ以外も書いておきます。 ------------------------------ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> <html> <head> <meta http-equiv="Content-Type" content="text/html; charset=utf-8"> <title>無題ドキュメント</title><style type="text/css"> <!-- .box1 { position: relative; } .box1 ul{ overflow: scroll; width: 600px; height: 100px; font-size: 80%; margin:0px; padding:0px; text-align:left; border:1px solid #000000; } .thumbnail span{ position: absolute; top: 0; left: -1000px; width:300px; height:200px; } .thumbnail:hover span{ left: 300px; } .thumbnail span img{ border:none; } --> </style> </head> <body> <div class="box1"> <ul> <li><a class="thumbnail" href="">あいうえおあいうえおあいうえおあいうえおあいうえお<span><img src="test_01.jpg" width="300" height="200"></span></a></li> <li><a class="thumbnail" href="">かきくけこかきくけこかきくけこかきくけこかきくけこ<span><img src="test_02.jpg" width="300" height="200"></span></a></li> <li><a class="thumbnail" href="">さしすせそさしすせそさしすせそさしすせそさしすせそ<span><img src="test_03.jpg" width="300" height="200"></span></a></li> </ul> </div> </body> </html> -------------------------------
ウェブ開発なら、当然Firefoxをお使いだと思いますが、 開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )にあるFireMobileSimulator( https://addons.mozilla.jp/firefox/details/8519 )を使用すると、各種端末のテストができます。 　示されたページは存在しませんでしたが・・ 少しのコードで実装可能な15のスマートフォンサイト用小技集 | Webクリエイターボックス( http://www.webcreatorbox.com/tech/smartphone-sni … ) 　などを参考に再挑戦してみてください。
No.1です。 こんなところで議論してもナニなんですが、あまりに見苦しいのでつい。 何か昔の常識話みたいな話が出てきましたが、Illustratorは、グリッドにあわせたラスタライズ＋スライスが可能になったCS4あたりから、Web制作では普通に使われていますよ。 CS5からはビットマップ吸着できるようになったので、Fireworksとほとんど差がなくなったし。今言っている話題はそのことですよ。 Canvas描画のことも。本当に何も知らないんだ（苦笑 Adobe CreativeCloudの内容くらいチェックしておいてください。 あと、SVGについても。Illustrator10には、SVG出力プラグインがついてましたし、CS2ぐらいまで普通に使えてます。当時、対応ブラウザがなかったですが、（プログラム開発で）帳票印刷するJavaアプレットやActiveXにSVGを扱うものがあり、けっこう使われてますよ。Illustrator使えば出来ないものはないんで当然です。 Inkscapeみたいな日本語もマトモに打てないフリーソフトを紹介するなんて、どうかしてません？
cssのlink typeのところです。 <link rel="stylesheet" type="text/style" href="common.css"> ではなく <link rel="stylesheet" type="text/css" href="common.css">
　100点に越したことはありませんが、必要ないものもあります。これはあなたが取捨選択するしかありません。 　ただ、文法チェックはあくまで文法チェックに過ぎないことを忘れたらダメです。実際に例をあげると・・ <body> 　<div id="wraper"> 　　<h1>ページのタイトル</h1> 　　<p>このページでは、<b>HTML5のマークアップについて説明</b>しています。</p> も <body> 　<div class="header"> 　　<h1>ページのタイトル</h1> 　　<p>このページでは、<strong>HTML5のマークアップについて説明</strong>しています。</p> も文法的には合っていますが、明らかに後者のほうが優れていますね。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　(付記)HTML5では、 　　<body> 　　　<header> 　　　　<h1>ページのタイトル</h1> 　　　　<p>このページでは、<strong>HTML5のマークアップについて説明</strong>しています。</p> 　SEOとは検索エンジン最適化と言う意味で、検索エンジンがその文書の内容や構造を正確に理解できるようにすることが本来の意味です。その結果--あるキーワードで検索されたときにそのページが上位に表示されるのですよ。あくまで「上位に表示される」は結果であって目的ではありません。 　CSSは、隠し文字や隠しリンクとして使わない限り検索エンジン対策としては考えなくて良いでしょう。文法的にあっていても「隠し文字や隠しリンク」として使用していたらアウトです。 　⇒隠しテキストと隠しリンク( http://support.google.com/webmasters/bin/answer. … ) 1) HTML4.01strictを使用すること 　　XHTML1.0strict,XHTML1.1 でも良い 　　HTML5がベストだが、ユーザーエージェントの対応を考えると時期尚早です。 2) 文書構造が正しくマークアップされているか？ 　 ＨＴＭＬ4.01などでは、「id属性及び class属性と併用することで、文書に構造を付加する」なのだが、idやclass名が文書構造を示すものになっているか？ 　どのようなclass名がよいかは、HTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )が参考になるでしょう。 　wrapperとかleft,rightとかは望ましくない。
1です。 <div class="article-title-outer"> <h2 class="article-title entry-title"> 　　<a href="<$ArticlePermalink$>" title="個別記事ページへ" rel="bookmark"><$ArticleTitle ESCAPE$></a> 　　<!--↑記事タイトル--> 　　<IfArticleCommentCount><span class="comment-count"><$ArticleCommentCount$></span></IfArticleCommentCount> 　　<!--↑記事にコメントがあればコメント数を表示--> 　　<IfArticleRating><span class="rating"><$ArticleRatingIcon$></span></IfArticleRating> 　　<!--↑記事に評価があれば評価アイコンを表示--> </h2> <IfArticleAllowComment><span class="article-comment-count"><a href="<$ArticlePermalink$>#comments" title="コメント一覧へ">Comment(<$ArticleCommentCount$>)</a></span></IfArticleAllowComment> 　<!--↑コメント可の設定ならコメント一覧へ--> </div> の間違いでした
ウェブ製作ならfirefoxと開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )をお使いだと思いますが、それにfirebugというアドオンがあります。 それを使って、他の要素が上にかぶさっていないか確認してください。 また、 ・その要素にhoverされているか ・hoverされた要素にスタイルが適用されるか 　たぶん、HTMLかスタイルシートの書き方に問題なければ、他の要素がかぶさっていることが原因でしょう。
この部分は、CSSの設定部分です。 本文は、 <html> <head> この部分にmeta情報を書き込む（css,script,meta,link) </head> <body>～</body>の中に書きます。 <body> <head> <hgroup> 　<h1>一番重要な見出し</h1> <h2>2番目に重要な見出し</h2> </hgroup> <nav></nav> <section id="main"> <footer> </section> <section id=address"> <address></address> </section> </footer> </body> </html> なお、このソースは、html5の場合の書き方です。
これは、ResponsiveLayoutを使用することで解決します。 閲覧者の環境に応じ、表示する形を変えるものです。 多くのフレームワークがあるので、そちらを参考にしてください。 Yaml4,skelton,bootstrapなどがお勧めです。
widthが１００％になっています。この部分を修正してサイズを調整してください。
誤解されているようで・・・ メディアクェリーは、スマホやＣＳＳ３対応のモダンブラウザにのみ有効です。 元来HTMLは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　なのです。 　シンプルな、文書構造だけ記述したHTML4で可能な程度のデザインをしておきます。 　対象は、携帯電話だけじゃないですよ！！！！ 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　点字端末、スクリーンリーダーや、今は検索エンジンもユーザーエージェントとして忘れてはなりません。 『Lynx などのテキスト ブラウザを使用して、サイトを確認します（ほとんどの検索エンジンのスパイダーには Lynx で見えるようにサイトが映ります）。( http://support.google.com/webmasters/bin/answer. … )』 　そのうえで、スタイルシートに対応しているブラウザ用にデザインしなさい!! 　と言う意味です。デザインではなく、情報が伝えられれば良いのですよ。もちろん、それがどのユーザーエージェントにとっても利用しやすいものであることが重要なのです。 ★あなたがネットで情報を得る場所としていつも利用しているサイト(ブックマークに入れている)は、デザインで選択しているのではなく、そこにある情報が有益であり、利用しやすいからではないですか？ 　わたしは、Lynxブラウザできちんと情報が得られるHTMLをまず書きます。ついで携帯など古いブラウザ用にHTMLにすこし手を加えます。そして、最後にモダンブラウザやスマホ用にスタイルシートを書きます。印刷が想定されるページには印刷用のスタイルシートを追加すこともあります。公的機関の視覚障害者も対象の場合は、読み上げようやハイコントラストのスタイルシートも作成します。
例えば <div class="header"> 　<h1>見出し</h1> </div> とだけかいたファイルを、shtml側から <!--#include virtual="外部ファイル名.html" --> で読み出すだけです。 　それでデザインが崩れるということは考えられませんので、あなたのスタイルシートの記述が間違っているとしか思いつきません。 　firefox+firebugなどで、それぞれの要素にどのスタイルが適用されているかを確認されたら良いでしょう。
素人でもできる小手先ですが背景色と文字色を同じにして広告（背景画像）を表示しないと読めないようにするなんてのはどうでしょうか。 プロならばページ全体を Flash や ActiveX, Java Applet で制作するのはどうでしょうか。つまり、広告を見ないとコンテンツが表示されないという仕掛けです。 パブリッシャーならば専用ブラウザのようなものを開発しブラウザで広告を配信するのはどうでしょうか。イメージとしては RealPlayer （リアルネットワークス社(http://www.jp.realnetworks.com/)）です。
Idまたは、class専用の、a: link;a:hoverを書けばOK 仮に、<ul><li>menu1</li><li>menu2</li></ul>となっていた場合、 htmlファイルは、<ul id="test"><li.menu1</li><li>menu2</li></ul> ｃｓｓは、ul #test{color:#000080;background-color:#cccccc;} ul#test li a:hover{text-decretion:underline;} と記述します。 具体的に知りたいのであれば、そのcssの部分を、アップしてください！ 下記参考サイト等で学んでください！ 参考URL：http://dotinstall.com/lessons/basic_css
----パターン1 table{ float: left; width: 100px; border: 1px solid #000000; margin: 0px 10px 0px 10px; } div{/*たぶん詳細度が弱いので、適切なセレクタにしてください。*/ margin-left:auto;/*ブロック要素の中央ぞろえは幅を決めて、左右のmarginをautoが定石です。*/ margin-right:auto; width:360px } <div><!--中央寄せしたいテーブルを囲みます。*/--> <table><tr><td>TEST1</td></tr></table> <table><tr><td>TEST2</td></tr></table> <table><tr><td>TEST3</td></tr></table> </div><!--閉じます--> ---パターン2 質問の内容のhtmlそのままでｃｓｓだけで解決すると body{ text-align:center;/*インライン要素にのみ有効の中央揃え*/ } table{ display:inline-block;/*フロートではなくinline-blockで並べます*/ width: 100px; border: 1px solid #000000; margin: 0px 10px 0px 10px; } td{ text-align:left;/*ほっておくとtdまで中央ぞろえになる為*/ }
もしかしたら、ロールオーバーの意味を誤解していませんか？ ロールオーバーとは、要素の上にマウスカーソルを乗せた状態のことを指します。 つまり、質問文からは、ロールオーバーした後に何をしたいのかが分かりません。
CSS3の議論では登場していましたが、最終的に見送られました。 多分、そのページにいるときに、現在地を示す「パンくずリスト」としての利用を想定されているのだと思いますが、そのページの<head></head>内にスタイルを記述して対応するしかありません。 [HTML}をキチンとかくと <ul> 　　<li><a href="">１階層目１</a></li> 　　<li><a href="">１階層目２</a> 　　　　<ul> 　　　　　　<li><a href="">２階層目１</a></li> 　　　　　　<li><a href="">２階層目2</a> 　　　　　　　　　<ul> 　　　　　　　　　　　<li><a href="">3階層目1</a></li> 　　　　　　　　　　　<li><em>3階層目2</em></li> 　　　　　　　　　　　<li><a href="">3階層目3</a></li> 　　　　　　　　　</ul> 　　　　　　</li> 　　　　　　<li><a href="">２階層目3</a></li> 　　　　</ul> 　　</li> 　　<li><a href="">１階層目３</a></li> </ul> nav ul li:nthcgild(2) ul li:nthchild(2){} と・・・ CSS4の ul $li em　　子孫にemを持つli要素 Subject Selector です。
titeがHTMLにないので、img要素のtitle属性の値として :after,:before擬似要素と、content:attr(title)でその要素の内容に、属性値を追加できますが、img要素は内容を持たない要素ですから、そもそも内容がない場合は表示できません。 <span title="テスト">これは</span> なら、span:before{content:attr(title);}で可能です。 これは、どうしようもない・・・javascriptで取得できるかもしれませんが・・ 　画像とは別に書かれているタイトルや説明を表示したいのでしたら、HTMLをきちんと作成すれば良いでしょう。 <div class="album"> 　<ol> 　　<li><a href="#a1"><img src="" width="" height="" alt=""></a></li> 　　<li><a href="#a1"><img src="" width="" height="" alt=""></a></li> 　　<li><a href="#a1"><img src="" width="" height="" alt=""></a></li> 　　<li><a href="#a1"><img src="" width="" height="" alt=""></a></li> 　</ol> 　<ol class="photo"> 　　<li><img src="" width="" height="" alt=""> 　　　<ol> 　　　　<li>タイトル</li> 　　　　<li>説明</li> 　　　　<li></li> 　　　</ol> 　　</li> 　　<li><img src="" width="" height="" alt=""> 　　　<ol> 　　　　<li>タイトル</li> 　　　　<li>説明</li> 　　　　<li></li> 　　　</ol> 　　</li> ・・・【中略】・・・ 　</ol> </div> として、フェードアウトも含めスタイルシートで指定するほうが楽な気がします。
簡易プロパティを使用しないようにすれば良いはずですが・・ また、画像のリンクとテキストリンクをその文書構造から分けてしまえばよいです。 具体的なHTMLがわからないので、具体的なアドバイスはできません。 [例] a{color:green;} a:visited{color:black;} a:hover{color:red;} a:active{color:white;} div.nav ol li a{color:blue;} div.nav ol li a:visited{color:navy;} div.nav ol li a:hover{color:blue;} div.nav ol li a:active{color:blue;} また、a要素の背景をimgのmarginなどで調整しても良いでしょう。
class名はあくまで文書構造を補完するためで、へんなものつけたら後で分からなくなります。 例えば、本文ブロックだとします。 <body> ・・・【中略】・・・ 　<div class="section"> 　　<div class="section"> 　　</div> 　　<div class="article"><!-- header,footerを持つと仮定してよい完結した記事 --> 　　</div> 　　<div class="article"><!-- header,footerを持つと仮定してよい完結した記事 --> 　　</div> 　<div> このとき、div.sectionの最初の子孫であることに着目すると div.section div.article{background-color:red;} div.section div.article+div.article{background-color:transparent;} と、子孫セレクタと隣接セレクタを使う または、 div.section div.article:first-child{background-color:red;} と:first-child(擬似クラス)を使う。 よくある手法ですが、 <div class="section"> 　<h2>見出し</h2> 　<p>段落</p> 　<p>段落</p> 　<p>段落</p> </div> div.section p:first-child{font-weight:bold;} とか・・・ 　class名をむやみやたらに使うことを避け HTML4.01「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 HTML5「class, lang, title 属性を使って、連続した要素のグループに共通のセマンティクスをマークアップすることができます。( http://www.html5.jp/tag/elements/div.html )」 　に徹して、その文書構造を元にスタイルを指定すると、とても簡単になります。 div.section div.article{background-color:red;} /* 本文(section)の子孫である記事(article)の背景は赤 */ div.section div.article+div.article{background-color:transparent;} /* 本文中の記事に続く記事の背景は透明 */ div.section div.article:first-child{background-color:red;} /* 本文に出てくる最初の子孫の記事は背景赤 */ div.section p:first-child{font-weight:bold;} /* 本文の最初の段落だけは太字 */ とHTML見なくても、スタイルシートが読み取れるでしょ!! 　これらのclass名はHTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )とその用途を参考にしています。
li　長さ指定 - Webデザイン・CSS - 教えて！goo( http://oshiete.goo.ne.jp/qa/7923370.html ) のNo.2　で回答しました。 　横に配置すれば、必ず必要になる設定です。 　あわせて、ブロックの高さの中心に合わせる方法 　ウィンドウ横幅に依存しない方法も示してあります。 　　これによって幅広ディスプレイでもスマホでも対応できます。 ★a要素は行内要素ですから、必ずblockに指定しないと、text-alignの意味がありません。もちろんその親がブロックならそれでも良いですが・・ 　No.2の回答を実際に試して理解してください。それが一番判りやすいでしょう。
問題は、basi999さんの言うところの「行」が何を指しているかです。 通常、行とは、同段落内の1行を指します。 結果から言うと、段落内の文字要素に対して、paddingやmargin、borderを設定することは、(基本的には)できません。従って、行間を開けるにはline-heightの1択です。 対して、basi999さんが言う「行」が段落と段落の間を指しているのであれば、margin/padding/border/outlineのいずれでも、結果として余白をとることができます。どれが一般的かというと、難しい質問になりますが、まあ、marginが一般的なんじゃないですかね。 もしかしたらわかりにくい説明かもしれませんが、「インライン要素」「ブロック要素」のキワードを検索して、その違いを理解できれば、分かりやすいと思います。
どの程度HTML/CSSをご存知なのかわかりませんので、最初から説明します。 HTML(Hyper Text Markup Language)とは、ハイパー機能(リンク)可能な、文書をそれを構成する要素に分解して、それぞれの要素を(タグを使って)マークアップする言語です。 ・デザインは関係ありません。点字端末・スクリーンリーダー・検索エンジンなども 　利用しますから。screenメディア(いわゆるPC用ブラウザなど)は、自前のスタイル 　シートでたまたまそのように表示するだけ CSSはスタイルシートの一形式でCascading Style Sheetのことです。カスーディングという機能でとても扱いやすくなっています。 ＞ホームページのサイドバー（サイドメニュー？）の作り方を教えてください。 　ホームページではなく、HTMLで書かれたウェブページのことだと思います。 　⇒ホームページ - Wikipedia( http://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC% … ) 　これは、「HTMLにおけるメニューなりナビゲーションリストを、その親コンテナブロックの左右何れかに配置したい」と言う質問だと理解します。 1) まずHTMLは文書構造しか記述しませんから、 　例えば長い本文とその目次でしたら <body> 　<header> 　　文書のヘッダ 　</header> 　<section> 　　<section> 　　　本文 　　</section> 　　<section> 　　　本文 　　</section> 　　<section> 　　　本文 　　</section> 　　<div id="contentTable"> 　　　目次 　　</div> 　</section> 　<footer> 　　文書のフッタ 　</footer> </body> ゜HTML4.01でしたら、この様な要素がないためclassを併用して文書構造をマークアップします。 　⇒DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) <body> 　<div class="header"> 　　文書のヘッダ 　</div> 　<div class="section"> 　　<div class="section"> 　　　本文 　　</div> 　　<div class="section"> 　　　本文 　　</div> 　　<div class="section"> 　　　本文 　　</div> 　　<div id="contentTable"> 　　　目次 　　</div> 　</div> 　<div class="footer"> 　　文書のフッタ 　</div> </body> とかになるでしょう。 　こうしてできたHTMLをその文書構造にしたがってスタイルシートで、screenmedua用にデザインして行きます。 　この場合、本文の左におくとすると [HTML5]用でしたら section{ min-height:300px;/* 一応最低限の高さを */ position:relative;/* 位置やサイズの基準にするため */ } section section{ margin-left:20%;/* 左を20%ほど空けておく */ min-height:0:/* 子孫のsectionは解除しておく */ } section div.contentTable{ width: 20%; position:absolute;top:0;left:0;/* 絶対配置で本文の左に--右ならright */ height:100%;/* 本文高さにあわせる */ } [HTML4.01]用でしたら div.section{ min-height:300px; position:relative; } div.section div.section{ margin-left:20%; min-height:0: } div.section div.contentTable{ width: 20%; position:absolute;top:0;left:0; height:100%; } とかになります。
liは本来ブロック要素なので、そのままでは横並びできないはずです。文字数で伸縮すると言うことは、displayプロパティでinlineに指定しているのかな？ 　displayの値をblockにしてfloatさせるなら、必ず幅を指定しているはずですし、displayの値をinline-blockにしているなら幅を指定してください。 　最近は、ウィンドウ/ディスプレイの幅がスマホから幅広ディスプレイと様々なので、リキッドデザインにすることが多いと思いますが、その場合は、ユーザー(特に視覚弱者)がフォントサイズを(大きく)変更する可能性があるので、余裕を見てサイズを指定するのが良いでしょう。min-widthで最小幅を指定して、ウィンドウ幅が小さい場合は２行になるようにしても良いでしょう。 [例]HTML4.01 <div class="nav"> 　<ol> 　　<li><a href="/">Top</a></li> 　　<li><a href="/product">製品</a></li> 　　<li><a href="/recruit">募集</a></li> 　　<li><a href="/profile">会社案内</a></li> 　<ol> </div> [例]HTML5 <nav> 　<ol> 　　<li><a href="/">Top</a></li> 　　<li><a href="/product">製品</a></li> 　　<li><a href="/recruit">募集</a></li> 　　<li><a href="/profile">会社案内</a></li> 　<ol> </nav> [CSS] HTML4.01用 ★リキッドでスマホにも対応★ div.nav{width:80%;margin:0 auto;max-width:800px;} div.nav ol{line-height:40px;text-align:center;list-style:none;position:relative;} div.nav ol,div.nav ol li{margin:0;padding:0;} div.nav ol li{display:inline-block;width:20%;min-width:5em;} div.nav ol li a{display:block;width:100%;height:100%;text-decoration:none;border:solid 1px red;} div.nav ol li a:hover{background-color:yellow;} [CSS]HTML5用 nav{width:80%;margin:0 auto;max-width:800px;} nav ol{line-height:40px;text-align:center;list-style:none;position:relative;} nav ol,div.nav ol li{margin:0;padding:0;} nav ol li{display:inline-block;width:20%;min-width:5em;} nav ol li a{display:block;width:100%;height:100%;text-decoration:none;border:solid 1px red;} nav ol li a:hover{background-color:yellow;} ★line-heightは高さの中心を合わせるため指定しています。
一般的なレンタルサーバーであれば、データベースが付属しています。つまり、FTPサーバーと同じサーバーにデータベースがあります。ak_passさんの場合は、FTPサーバーを知人から借りているためデーターベースを借りられないということでしょうか。 その場合は、データベース自体は外部のサーバーからも接続出来るので、外部接続できるデータベースサービスを利用すればよいかと思います。ただし、外部接続に対応していないサービスも多いと思うので、よく確認されたほうがよいかと思います。 外部からの接続を許可しているデータベースサービスとして、たとえばこんなものがあります。 http://www.kagoya.jp/multi-plan/database/
4,500円の間違い？--それでも高いですが--- 　そもそもSEOとは、検索エンジン最適化(Search Engine Optimization)は、検索エンジンがそのページの内容を正しく把握できるように最適化することで、転じて検索エンジンで検索結果の上位に表示されることを言いますが、大事なことは「最適化」の結果として「上位に表示」が来るのですよ。 　これって言い換えれば「上位に表示させること」を目的にした時点で、「最適化」ではなくなってしまうのです。 　これは「検索エンジンは誰のためにあるか」を考えればわかることです。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　あなたが何かの情報を探しているとき、その目的に合致するページを見つけ出すために検索エンジンは日々進化し続けています。そのためには、内容が不十分なページはもちろんですが、検索結果の上位を目的に様々なテクニックを用いた ・リンクプログラム 　　リンクを貼るためのページを作ったり 　　ブロガー250人に記事を書かせたり のようなサイトを見分けて排除しなければなりませんね。 　私は、個人も会社もまた依頼されたページもとっても沢山持っていますが、適切なキーワードで検索すると大抵はトップや、よほど悪くても数ページ内に表示されますが、【検索エンジンで上位に上位に表示させることを目的とした一切の手法を用いていません。】 　それが一番の対策ですからね。 　いちど 　⇒ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ( http://support.google.com/webmasters/bin/answer. … ) 　をしっかり読んでください。ページ内のリンク先(たくさんあります)も含めて徹底的に・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 品質に関するガイドライン - 基本方針 ・検索エンジンではなく、ユーザーの利便性を最優先に考慮してページを作成する。 ・ユーザーをだますようなことをしない。 ・検索エンジンでの掲載位置を上げるための不正行為をしない。ランクを競っているサイトや Google 社員に対して自分が行った対策を説明するときに、やましい点がないかどうかが判断の目安です。その他にも、ユーザーにとって役立つかどうか、検索エンジンがなくても同じことをするかどうか、などのポイントを確認してみてください。 ・どうすれば自分のウェブサイトが独自性、価値、または魅力のあるサイトといえるようになるかを考えてみる。同分野の他のサイトとの差別化を図ります。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ( http://support.google.com/webmasters/bin/answer. … )］より 　また、そのページの下にある ・リンク プログラム( http://support.google.com/webmasters/bin/answer. … ) ・誘導ページ( http://support.google.com/webmasters/bin/answer. … ) などは、SEO業者の常套手段です。 　当然Googleは見つけ次第対策をとります。
・幅を指定しない ・floatは使わない それでも難しい場合はmediaquery(スマホは対応)を使用する。 背景画像は、CSS2.1の範囲内でしたら 0 50% で指定する。CSS3が可能(スマホ)ならbackground-size:cover;を使用する。 　そもそも、はなから640px～に対応させていますので、スマホと言って特別することはありません。
ul{display:inline-block;width:30%;margin:0;padding-left:2%;} 必要なら、他のulと区別するために、全体をdivで囲んで文書構造を補完しておく 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 [例] <div class="nav"><!-- ここはナビゲーションブロックだよ --> <ul id="leftlist1"> <li><a href="#">a1</a></li> <li><a href="#">a2</a></li> <li><a href="#">a3</a></li> </ul> <ul id="leftlist2"> <li><a href="#">b1</a></li> <li><a href="#">b2</a></li> <li><a href="#">b3</a></li> </ul> <ul id="leftlist3"> <li><a href="#">c1</a></li> <li><a href="#">c2</a></li> <li><a href="#">c3</a></li> </ul> </div> div.nav{text-align:center;position:relative;width:80%;margin:0 auto;} div.nav ul{text-align:left;display:inline-block;width:30%;margin:0;padding-left:2%;} また、幅の狭いディスプレイでは、２列、３列にしてスマホなどにも対応させるなら div.nav ul li{min-width:200px;} とかにしておけば、狭いディスプレイでは下に下がります。 display:inline-blockは、IE6,7は対応していませんので、floatで配置する場合もあります。 　いまはあまり必要ないかも・・サイトの対象で判断してください。 ★無用なidやclassをつけないようにしましょう。先でデザインを変えるとき悲劇が訪れます。 あくまで「文書構造を補完するメタです」。またidではなくclassを使用するように!!!。基本的にリンクのターゲットになるときやjavascriptのターゲットになるとき以外は使う必要はないでしょう。一意セレクタ#は詳細度が高く不便です。
例えばHTMLが下記のようなものであるとき <body> 　<header> 　</header> 　<section> 　　<section> 　　　本文記事 　　</section> 　　<aside><!-- 本文と直接関係ない記事 --> 　　</aside> 　</section> 　<footer> 　</footer> </body> の場合 html,body{margin:0;padding:0;position:relative;height:100%;} section{min-height:600px;position:relative;padding-bottom:100px;} body>section>section{margin-left:20%;min-width:0;padding:bottom:0;} section aside{width:20%;position:absolute;top:0;right:0;height:100%;} footer{height:100px;position:absolute;bottom:0;left:0;} [HTML4.01]ですと <body> 　<div class="header"> 　</div> 　<div class="section"> 　　<div class="section"> 　　　本文記事 　　</div> 　　<div class="aside"><!-- 本文と直接関係ない記事 --> 　　</div> 　</div> 　<div class="footer"> 　</div> </body> の場合 html,body{margin:0;padding:0;height:100%;position:relative;} div.section{min-height:100px;position:relative;padding-bottom:100px;} body>div.section>div.section{margin-left:20%;min-width:0;padding:bottom:0;} div.section div.aside{width:20%;position:absolute;top:0;right:0;height:100%;} div.footer{height:100px;position:absolute;bottom:0;left:0;width:100%;height:100px;overflow:hidden;} あるいは、子供セレクタ(>)を理解しないブラウザへの後方互換のため html,body{margin:0;padding:0;position:relative;height:100%;} div.section{min-height:600px;position:relative;padding-bottom:100px;} body div.section div.section{margin-left:20%;min-width:0;padding:bottom:0;} body div.section div.section div.section{margin-left:0;} div.section div.aside{width:20%;position:absolute;top:0;right:0;height:100%;} div.footer{height:100px;position:absolute;bottom:0;left:0;} むやみやたらにidやclassを付ける必要はありません。 「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　むやみやたらに使わない。他の文書構造を示す適したタグがあればそれを使う。無いときにはじめてidやclassを使う(基本classです) 　HTML5では、この混乱を招いた反省から新しい要素となりました。 header 文書のヘッダやarticle内のヘッダ section 本文 本で言うと節、章、項・・、内部に見出し<h1>から<h6>をひとつだけ持つ footer 文書のフッタ aside 本文と関係ない記事 article header,section,footerを持ちうる完結した記事 figure 挿絵の様に他から参照される記事 など、HTML4.01で作成するときのdivにつけるclass名として参考になります。 　HTML5ではDIVを使用する機会は格段に減少するでしょう。
DIVは、HTMLに用意されている要素だけでは文書構造を示しきれないときに使用するものです。 「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 例えば、アップル　マイクロソフト・・・がその文書の中で、何であるかを示す適当なタグがない場合でちょっと特別扱いをしたいのでしたら・・、 <abbr class="makerName" title="Apple">アップル</abbr>、<abbr class="makerName" title="microsoft">マイクロソフト</abbr>、<abbr class="makerName" title="Intel">インテル</abbr>、<abbr class="makerName" title="google">グーグル</abbr>、<abbr class="makerName" title="sony">ソニー</abbr>、<abbr class="makerName" title="Nokia">ノキア</abbr> とか・・・abbrは、略称や頭文字をマークアップするタグです。 あるいは、 <span class="mark">アップル</span>、<span class="mark">マイクロソフト、<span class="mark">インテル</span>、<span class="mark">グーグル</span>、<span class="mark">ソニー</span>、<span class="mark">ノキア</span> あるいは、HTML5だと、他から参照される可能性のある語句(要素)を示す<mark>がありますから <mark>アップル</mark>、<mark>マイクロソフト、<mark>インテル</mark>、<mark>グーグル</mark>、<mark>ソニー</mark>、<mark>ノキア</mark> かも知れません。 　それをスタイルシートで abbr.makerName{white-space:prewrap;} span.mark{white-space:prewrap;} mark{white-space:prewrap;} と指定すれば良いでしょう。 CSS2.1のwhite-spaceプロパティの値は、 normal | pre | nowrap | pre-wrap | pre-line | inherit です。 もちろん、DIVが「文書構造を示すために使われているのでしたら」 <div class="note"> 　<p>パソコンメーカーには<span>アップル</span>、<span>マイクロソフト、<span>インテル</span>、<span>グーグル</span>、<span>ソニー</span>、<span>ノキア</span>などがある。</p> 　<dl> 　　<dt>アップル</dt> 　　<dd> ・・・【中略】・・・ でしたら、 div.note span{white-space:nowrap;} ですむわけです。 　要は「折り返して表示したくない」と言うことは、それらの単語がその文書にとって何らかの特別な要素であるわけですから、HTMLのルールとして文書構造をマークアップしておかなければなりません。・・・決してデザインのためではありません!!! 　そして、「折り返して表示したくない」場合は、その文書構造に基づいて、これらのもテキストは折り返さないようにデザインするわけです。 ★この基本をしっかり理解しておきましょう。 　
フォントがもしかしたら壊れているのかもしれません。 一度フォントをバックアップした上でアンインストールしてチェックされてみては？
実際にスマートフォンのブラウザでサイトを開かないと判断できないでしょう。 パソコンのブラウザでは判断できません。 　FireMobileSimulator( https://addons.mozilla.jp/firefox/details/8519 )でチェックすればわかりますが・・ 　そもそも、スマートフォン用のサイトなんて最近は作りません。基本的にどのユーザーエージェントにも対応するように作成して、ユーザーエージェントによってスタイルシートを切り替えてしまうのが一般的でしょうから・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より
　tableにwidth属性で指定している240pxは、詳細度が0として計算されますから、スタイルシートで.list-box table{ width:100%;}の指定が詳細度(0011)で上書きされます。 　tableが含まれるブロックであるbody要素にstyle属性で指定してあるwidth:240pxは詳細度(1000)ですね。 カスケーディングの仕組みは ・出所によるソート 　　ユーザーの最重要宣言＞著者の最重要宣言＞著者＞ユーザー＞ブラウザのスタイルシート ・詳細度によるソート ・出現順番によるソート 　ですから、指定されていないものを探すと、ブラウザの持つデフォルトのスタイルシートのmargin,paddingが怪しい。 html,body{margin:0;padding:0;} table{margin:1em 0;} 程度を加えることで解決すると思います。 (補足) ★必ず基点となるセレクタを書くようにしましょう。紛らわしくなくなります。 .list-box→div.list-box 　　CSS2以降、基点となるセレクタを書くことになりました。いきなり.からはじめると 　　*.list-boxとみなされます。 ★余計なものは書かないようにしましょう。 class="list-box"は必要ですか？ 　tableにはsummaryが必須ですから、 　<table summary="list"> 　で 　table[summary="test"]{・・・} 　でよいかと ★tableがデザインのためでしたら使用するのは控えましょう。
サイト名検索だけなら、私は１０日程で、1位になりましたよ。 サイトマップも送信してませんし、特にこれといったことはしてません。 競合の少ないキーワードですので、可能だったのかもしれませんが。
内容がテキストの場合は、font-size、height、line-heightをセットにして考えないと、 height:2emが2行分になったり、height:3emが2行分になったりと不定です。 line-height: 1.2em; height: 2.4em; /* 通常はline-heightの2倍 */ white-space: nowrap; -webkit-text-overflow: elipsis; -o-text-overflow: elipsis; -ms-text-overflow: elipsis; text-overflow: elipsis; overflow: hidden;
http://www.forest.impress.co.jp/article/2003/02/ … 上記ソフトに対象ファイルとFTPのID/PASSやRootを設定しておけば、上書き保存するたびに自動的にアップロードしてくれます。
CSSでは今はまだ無理です。 Flashでやるのは1さんも言われてらっしゃいますがお勧めしません。 現状だとjavascriptで実装することになるかと思います。 http://www.sony.co.jp/ 例えばこのsonyのHPなんかは一つ前のデザインまではflashだったのですが、javascriptで実装する方向に切り替えてきましたね。 javascriptもいろいろあって、今ではjavascriptライブラリを利用すると楽に作れることが多いです。 Javascript ライブラリというのはjavascriptを使いやすくするためにjavascriptで作られたショートカット集のようなもので、プラグインという名目で簡単に使えるプログラムも配布されています。有名なのはlightboxですね。 そういうものを使って遊んでみるところから始めるとどうでしょうか。 ＞やり方なども教えていただけると大変ありがたいです。 ちょっと書ける量を超えていますし、ちゃんと形にできるようになるまで3ヶ月くらいかかるかと思いますよ。 ホームページの作成を覚えたいのであれば時間がかかりますし、とりあえず目先サイトに実装したいだけなら上記のようなプログラムを使わせてもらう方が時間のロスが無いかと思います。
1.利用できません。 2.各フォントの著作者から、購入、ダウンロード、またはwebフォントサービスを利用します。 webフォントサービスは#2さんがすでに答えられているので、各フォントの著作者からダウンロードで無料で使えるフォントをまとめたブログページを紹介します。 http://www.yomotsu.net/wp/?cat=8&paged=2 ライセンスの理解も必要です。 http://yomotsu.net/blog/2012/10/09/webfont-licen …
＞「menu2の背景色が赤に戻らない」理由と対策なのです。 　元に戻りますよ。 　No.2で回答したように、プルダウンと色の変化を別の要素に指定しておかないとなりません。 　li:hoverで開いておかないと、その子供のliに移動したときに閉じられてしまいます。 　a:hoverで指定しておかないと、その子供に移動したときに色が戻りません。
そもそもデザインのためにHTMLを作成しようとするから深みにはまる。 HTMLは文書構造を、プレゼンテーションはスタイルシートで・・・これが基本です。 　CSS3にはbackground-sizeというプロパティがあり、それを使うのが本来の方法でしょうが、IE8以前は対応していませんので後方互換を考える場合は使いません。その代替手段として<img>を背景として使用すのは致し方ないでしょう。 　この場合、footerをfixedで配置するのがセオリーです。また、oveflow:hiddenは内容がある要素には使わないほうが良いでしょう。 　なお、wrapper,container,contentsような(意味的な)文書構造を示さないものより、article,header,section,footer,asideのような意味のあるものを、classで使用したほうが良いでしょう。 　⇒DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　⇒3.1. 新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　将来、そのまま書き換えればHTML5としても利用できる。意味は上記リンクを参照。
table-layout:fixed;と一緒にwidthを指定されましたか？ 両方設定しないと固定されません。
それは現状ではできません。 この場合、親要素にclass名をつけるしかありません。 なお、HTMLが間違っています。 ★articleは、内容にheader,section,footer要素をとる、あるいはとると期待された完結した記事を示します。 ★<img>は行内要素ですから<p><img></p>と囲みます。 　⇒HTML5 における HTML4 からの変更点( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　リンク先に仕様書本体があります。サンプルもそこに・・ <section> 　<h2>見出し</h2><!-- sectionには必ずひとつだけ見出しが存在すると期待される --> 　<p>段落</p> 　<p>段落</p> 　<figure class="fig withIMG" id="fig1"><!-- 本文から参照される記事(画像に限らない) --> 　　<figcaption>見出し</p> 　　<p class="figImage">画像</p> 　　<p>説明</p> 　</figure> 　<p>段落</p> 　<figure class="fig" id="fig2"><!-- 本文から参照される記事(画像に限らない) --> 　　<figcaption>見出し</p> 　　<p>説明</p> 　</figure> ・・・とかですかね。 　HTML5では、セマンティックな書き方が強く強く求められます。そのために新しい要素が追加されたのです。正しく使いましょう。
ビルダーでは難しいと思いますが、 印刷用スタイルシートを用意してそれで指定します。 　ビルダーでそれが難しいのは、デザインでHTMLとスタイルシートを作ってしまうために、HTMLとスタイルシートが密接に結びついていて、別のスタイルシートでデザインを一挙に変更することができなくなるからです。 　本来は、HTMLには文書構造だけを記述して、スタイルシートはその文書構造を元にデザインしていくものです。例えば画面には目次を表示しないが印刷用には目次とページNo.を書く。章ごとに必ず改ページする。印刷はA4用紙に10mm,15mmで余白を取る。文字は10.5ptでなど・・ 　印刷が想定されるページは必ずそうしないと・・・ 例　⇒超安価な手作りモーター( http://iruka.la.coocan.jp/craft/motor/index.html ) 　オーサリングツールを使うときは、テキストエディタで作成する人以上にHTMLとCSSを知ってなきゃならないのです。--決して逆じゃありません---。それぞれのツールの癖や限界も知らなくてはならないのですから。 　なお、任意のページを画面表示のまま印刷する場合は、FirefoxにPearl Crescent Page Saver Basic( https://addons.mozilla.jp/firefox/details/10367 )というアドオンがありますので、それで高解像度(200%)以上でページ全体を画像として保存して印刷すると、スクリーンでの表示のままに印刷できます。 ＞1ページ目上部、最終ページ下部に背景を表示させるにはどのようにすればいいのでしょうか？ <link rel="stylesheet" type="text/css" media="screen" href="./styleSheet/standard.css"> <!-- scree端末用のスタイルシートであることをmedia属性で指定する --> <link rel="styleSheet" type="text/css" media="print" href="./styleSheet/print.css"> <!-- 印刷用のスタイルシートを作る --> です。 　
画像のタイプは？ 画像のURLを直接入力してもダメですか？ 他のソフトで画像を作成したら？
CSS Level 3 のメディアクエリを利用しています。 http://www.w3.org/TR/css3-mediaqueries/ https://developer.mozilla.org/ja/docs/CSS/Media_ … /* Tablet (portrait) */ の辺りを参考にどうぞ。 http://ieiri.net/wordpress/wp-content/themes/ori …
IE8はCSS3のmediaqueryに対応していません。 mediaqueryを使用しなくても、ウィンドウ幅に追随するリキッドデザインで作成した上で、CSS3に対応しているスマートホンやモダンブラウザ向けにCSSを作成するのが基本です。 IE8用のjavascriptはありますが・・・ css3-mediaqueries-js ( http://code.google.com/p/css3-mediaqueries-js/ ) Respond.js( https://github.com/scottjehl/Respond ) 　あまりお勧めはしません。
各osによって違うのでは？ 例 windowsだと C:\Windows\Fonts に格納されているフォントをダブルクリックすれば、フォン名は表示されます。 macだと システム/ライブラリ/Fonts ライブラリ/Fonts ユーザ/ライブラリ/Fonts 申し訳ないが、肝心のandroidは不勉強で存じ上げない。 アンドロイドのモトヤならググったら MotoyaLMaru モトヤLマルベリ3等幅 の記述がありますが……確かではありません。 ここはｃｓｓのカテなので……。androidのカテなら http://okwave.jp/c298.html ですよ。
div#top li{ list-style-type:disc; margin-left:20px;} paddingをmarginに変更してみてください。
スタイルシートを選択できるなら代替スタイルシートですが・・そのメッセージが必要 わかりやすく簡単なのはCGIを使う方法です。 スタイルシートを選択して、その選択をcookieで保存する。path_infoなどでの方法も考えられますがSEO的にはcookieでしょうね。 [例] 　⇒コンテンツ( http://hpcgi1.nifty.com/Iruka/contents.html ) の右側のボタン
　モリサワから発売されている「フォーク」だと思います。有名な売り物のフォントです。 　　http://www.morisawa.co.jp/font/fontlist/details/ … 　「Select Pack」（http://www.morisawa.co.jp/font/products/selectpa …）を購入して，インストール時にこのフォントを選択すれば，利用できます。これは，上記サイトから直販で購入できるほか，家電量販店等でも購入できます。 　以上，ご検討ください。
ミスがないか？ ＞項目……項目に関する説明文です。この説明文の 　の時点で、HTMLのマークアップは<dl>定義リストを使うべきです。 　これは、HTMLは文書構造を記述するものという決まりがあるからです。 　そうすることでスタイルシートを理解しないユーザーエージェントや検索エンジンであっても用語とその説明だと判断できるからです。 　もちろんリスト的なないようでしたら<li>でマークアップしても良いです。(あなたの文面からはDLだと思うのですが、具体的な前後関係がわからないので、どちらが適切かは判断できません。) [DLの場合] 　これが意外と曲者で、dt{float:left;}をすぐ思いつくので、それを使用しますがひとつ問題点があります。それは、説明<dd>が長くなった場合に[用語]の下に回りこんでしまうことです。 　私は、floatを使わない方法を使用しています。この方が調整しやすいし、説明文が複数でも問題ないし、例のように・・・が必要ならそれを必要数だけ表示できます。 [li]の場合 　これは、text-indentを使うと良いでしょう。 ★下記サンプルは、HTML4.01strict + CSS2.1です。 　⇒Another HTML-lint 5( http://www.htmllint.net/html-lint/htmllint.html# ) にてチェック済み。 IE5は中央に寄らない IE6,IE7は・・・が見えない IE8以降、およびFirefox,Opera,safari,Chromeでは同じ表示になるはずです。ウィンド幅には依存せず、折り返されます。 ★かっこ悪いので、ddはtext-indentで最初の行だけ字下げしてあります。 ★タブは＿に置換してあるので戻すこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- dl.CSS{width:80%;margin:0.5em auto;position:relative;}/* とでもしておきます */ dl.CSS dd{margin-left:8em;margin-bottom:1em;text-indent:1em;background-color:white;z-index:10;} dl.CSS dt{font-weight:bold;position:absolute;left:0;z-index:-1;} dl.CSS dt:after{content:" ・・・・・・・・・・・・・・・・・";font-weight:normal;} ul.CSS{width:80%;margin:0.5em auto;list-style:none;} ul.CSS li{text-indent:-8em;padding-left:8em;margin:0 0 1em 0;} ul.CSS li span,ul.CSS li del{font-weight:bold;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>display</h2> ＿＿<dl class="CSS"> ＿＿＿<dt>block</dt> ＿＿＿<dd>要素に主要ブロックボックスを生成させる。</dd> ＿＿＿<dt>inline</dt> ＿＿＿<dd>要素に1つ以上のインラインボックスを生成させる。</dd> ＿＿＿<dt>list-item</dt> ＿＿＿<dd>要素（HTMLのLI要素など）に主要ブロックボックスとリスト項目のインラインボックスを生成させる。 リストとその整形についての例は[12.6.2 リスト]を参照せよ。</dd> ＿＿＿<dt><del>marker,compact</del></dt> ＿＿＿<dd>この値はCSS2.1で削除された</dd> ＿＿＿<dt>inline-block</dt> ＿＿＿<dd>行内要素として扱われるブロックを生成する。</dd> ＿＿＿<dt>none</dt> ＿＿＿<dd>要素には、整形構造にまったくボックスを生成させない（すなわちレイアウトに影響しない）。 子孫要素にも同様にボックスを生成させない。 この効果は、子孫要素の'display'に別の値を設定しても無効化できない。</dd> ＿＿</dl> ＿＿<ul class="CSS"> ＿＿＿<li><span>block</span>・・・・・・・要素に主要ブロックボックスを生成させる。</li> ＿＿＿<li><span>inline</span>・・・・・・・要素に1つ以上のインラインボックスを生成させる。</li> ＿＿＿<li><span>list-item</span>・・・・・・要素（HTMLのLI要素など）に主要ブロックボックスとリスト項目のインラインボックスを生成させる。 リストとその整形についての例は[12.6.2 リスト]を参照せよ。</li> ＿＿＿<li><del>marker,compact</del>この値はCSS2.1で削除された</li> ＿＿＿<li><span>inline-block</span>・・・・行内要素として扱われるブロックを生成する。</li> ＿＿＿<li><span>none</span>・・・・・・・・要素には、整形構造にまったくボックスを生成させない（すなわちレイアウトに影響しない）。 子孫要素にも同様にボックスを生成させない。 この効果は、子孫要素の'display'に別の値を設定しても無効化できない。</li> ＿＿</ul> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
jQuery fadeInを使ってAppleサイトのようなふわっと表示 | solo.design http://solodesign.jp/708 こんなかんじですか？ 参考URL：http://solodesign.jp/708
スタイルシートに手をつける前にHTMLをきちんと学びなおしたほうが得策です。 DOCTYPEを<!DOCTYPE html>と書かれているところからHTML5を想定されているのだと思いますが、HTML5の目的は大きく二つあります。 ・セマンティクウェブ ・canvasやvideo、formの拡張などインタラクティブな部分 　セマンティクウェブでは、文書構造をマークアップすることが強く求められます。これはHTML4.01の時代もそうだった 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 のですが、HTML5では、これでは抽象的過ぎて理解されなかったために、HTML5では、わざわざ新しい要素が追加されました。すなわち、header(文書のヘッダ),section(本文),footer(フッタ),nav(ナビゲーション),aside(本文と関係ないコラなど),figure(挿絵的要素),article(ヘッダー、本文、フッターを持ちうる独立した記事)。これは、HTML4.01の時代、それぞれ<div class="header"><div class="section"><div class="footer">・・・のように書くように推奨されていたものです。 　これはHTML5だと <!DOCTYPE html> <html lang="ja"> <head> <meta charset="UTF-8"> <title></title> <link rel="stylesheet" type="text/css" href="index3.css"> </head> <body> 　<header> 　　<h1>header</h1> 　　<nav> 　　　<ul> 　　　　<li><a href="">めにゅー１</a></li> 　　　　<li><a href="">めにゅー２</a></li> 　　　　<li><a href="">めにゅー３</a></li> 　　　</ul> 　　</nav> 　</header> 　<section> 　　<h2>本文見出し<h2> 　　<p>記事</p> 　　<nav> 　　　<h3>目次<h3> 　　　<ul> 　　　　<li><a href="">めにゅー１</a></li> 　　　　<li><a href="">めにゅー２</a></li> 　　　　<li><a href="">めにゅー３</a></li> 　　　</ul> 　　</nav> 　</section> 　<footer> 　　<h2>文書情報</h2> 　</footer> </body> </html> HTML4.01だと下記のようになります。 この様にHTMLも極めてシンプルになります。そして誰が見ても--検索エンジンのロボットが見ても、どこに何が書かれているか一目で判る。 　その上でスタイルシートでデザインして行きますが、スタイルシートもこの文書構造に従いますから、とっても簡単になります。あとから誰が見ても理解できる。 HTML4.01とスタイルシートの実例(幅は640～900pxに制限してあります。) タブは＿に置換してあるので戻すこと 　こんなにシンプルでわかりやすくなるのですよ。(HTMLさえきちんと書けていたら) headerbg,sidebar,main,contentsmenueなど意味不明なclass名を付けたら後で見直してもわからないし、そもそも検索エンジンが理解してくれませんよ。HTML5の新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )を参考にすると良いです。そのまま<div class="section">を<section>に変えればHTML5になります。 ★後は自分で工夫してみてください。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=utf-8"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} body{background: url('hana3.jpg') fixed;font-size: 20px; font-family: Verdana, Arial serif;/* 必ず総称ファミリ名をつける */ } div.header,div.section,div.footer{ background-color: rgba(255,100,0,0.5); max-width:900px;/*幅広ディスプレイ用 */ min-width:640px;/* スマホなど狭いディスプレイ用 */ margin:0 auto; } h1,h2{margin:0 40px;} div.header div.nav{width:100%;} div.header div.nav ul,div.header div ul li{list-style:none;margin:0;padding:0;text-align:center;} div.header div.nav ul li{display:inline-block;width:20%} div.section{position:relative;min-height:600px; /*判りやすくするため高さを指定しておく */ } div.section>*{margin-left:200px;} div.section div.nav{margin:0;position:absolute;width:200px;top:0;left:0; height:100%;background-color:white; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>header</h1> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li><a href="">めにゅー１</a></li> ＿＿＿＿<li><a href="">めにゅー２</a></li> ＿＿＿＿<li><a href="">めにゅー３</a></li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>本文見出し</h2> ＿＿<p>記事</p> ＿＿<div class="nav"> ＿＿＿<h3>目次</h3> ＿＿＿<ul> ＿＿＿＿<li><a href="">めにゅー１</a></li> ＿＿＿＿<li><a href="">めにゅー２</a></li> ＿＿＿＿<li><a href="">めにゅー３</a></li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿</div> </body> </html>
こんにちは。 3つの場合は (上) (左右) (下) になります。 margin-top:10pt; と同義です。
※ テーブルの外枠カラーは、ファイルによって色を変更したいので、 CSSでのコントロール以外で方法があれば、ぜひ教えて下さい。 　意味が不明なのですが・・ファイルによって異なるCSSを適用させればよいはずです。 tableにはsummary属性が必須ですから <table summary="priceList" border="1">のようになっているはずですから スタイルシートで ※table[summary="priceList"]{boder:rgb(255,200,200) solid 1px;border-collapse:separate;} 　あるいはclassをつけてclassセレクタで指定する。 ※head内にスタイルシートを書けば良いです。 ※tableのスタイル属性に <table summary="priceList" border="1" style="boder:rgb(255,200,200) solid 1px;border-collapse:separate;"> 　この場合は詳細度1000になりますから、外部スタイルシートや<head></head>内のスタイルシートでは上書きできません。 　なお、tableは、「単に文書内容を整形する目的だけで表を用いるべきでない。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」「ページレイアウトの目的で表を用いる。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」と、レイアウトのためではありません。
回答ではありませんが ＞AdobeのCS2が無償提供されることになりました。 無償提供ではありません。 http://www.adobe.com/jp/aboutadobe/pressroom/pre … のどこをどう読んだら無償提供と思えるのでしょうか？ ＞Illustrator CS2って現在のWebデザインでも十分実用に堪えるものなのでしょうか？ 実用になるのかならないのかは使う人の腕次第。 CS2だろうがCS5だろうが関係ない。
現在はjqueryに依存しなくてもよいはずです。なぜならスマートホンはCSS3に対応しているためメディアクエーリーが使えるからです。特に企業サイトの場合、jquery(javascript)を使う場合には内容に影響がない範囲にとどめるべきだから 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Lynx などのテキスト ブラウザを使用して、サイトを確認します（ほとんどの検索エンジンのスパイダーには Lynx で見えるようにサイトが映ります）。JavaScript、Cookie、セッション ID、フレーム、DHTML、Flash などの特殊な機能が使用されているためにサイトの一部がテキスト ブラウザで表示されない場合、検索エンジンのスパイダーがサイトをうまくクロールできない可能性があります。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ( http://support.google.com/webmasters/bin/answer. … )］より 　しかもどうしても動作が重くなります。(jqueryのほうが重いです) 　それ以前に、HTML自体をきちんと作成しましょう。すなわち、文書を読み解き内容を理解して、文書構造だけをきちんとマークアップすること。--極論すればデザインは一切考えない--。デザインはHTMLさえきちんとできていれば、はるかに自由度が高く高度なデザインがHTMLに手を加えることなく可能ですし、SEO的にも最善です。
#1です。 修正されたスタイルで確認しましたがIE、Firefoxともに崩れていないようです。 なにか他のスタイルが影響しているかも知れません。 IEならF12開発者ツールで、FirefoxでしたらFirebugなどで、 どのスタイルが影響しているか確認してみてください。
#1です。 アップはしてませんが落としてみました。 テンプレートを見るとHTML内でスタイルシートは読み込んでいませんね。 どうやら「template_style.css」は管理画面のスタイルっぽいです。 スタイルをいじるなら各ページ （template_toplist.html、template_list.html、template_detailed.html）の <style>内にてスタイルを指定するか<head>内に <link href="hoge.css" rel="stylesheet" type="text/css" />を入れて CSSファイルを作成すればいいみたいです。 後、タグ内にもスタイルを書き込んでいるようなので、 それも編集するか削除する必要があるようです。
よくよく考えてみて。こちらの板のように「Webデザイン・CSS」の範疇で、Webアプリを作るんであれば、一般的にはフリーのLAMP環境でサーバ立てるか、VPSで動かすか、予算なければレンタルの共用サーバというのが関の山でしょう。 すごく大規模になっても、負荷分散ルータで多重化するか、分散データベースはレプリケーションで済ます。 そんな環境で、まともなセキュリティ設定や、多重トランザクションなんか望めるわけもないし、第一セキュアなアプリケーションは配置しない。 だから、Webアプリ程度の内容なら、上級エンジニアでなくても開発や配置は十分に可能である、と言っているのです。 ミッションクリティカルな業務アプリと比べると、Webアプリなんて一桁以上予算が低いものがほとんどだし。 最近はWebアプリケーション・フレームワークが自動的にエンコーディングをかけ、明示的に指示しなければリファラやインジェクションコードも自動でチェックする。セッションやクッキーも勝手に暗号化される環境です。 これでは、セキュリティの甘いWebを構築するほうが難しいです。 ド素人がphpをベタ打ちして作ったサイトならいざ知らず、いまどきそんな大昔のWeb開発やる会社はありません。
はじめまして。 main.jsによると $(window).load(function() { $('#wrapper').css({'height':$(window).width()}) $('#footer').css({'top':$(window).width()}) }) $(window).resize(function() { $('#wrapper').css({'height':$(window).width()}) $('#footer').css({'top':$(window).width()}) }) javascript（jquery）を使ってロード時とリサイズ時に ウィンドウの幅を取得してフッターの位置を指定しているようですね。 なぜかトップからの縦の位置を「ウインドウの横幅」で指定しているため 縦長の画面にすると崩れまくっていますが・・。 試してませんがwarrper外に要素を追加し、その要素に 絶対値を入れて画像とフッターを内包すれば CSSのみでもおそらく実装可能かと思いますよ。
＃１です。 ＞（HTMLのソース自体、bootswatchから丸々コピペして貼り付けてます） ええっと、HTMLは貼り付けないでください。 あくまでも利用するのはCSSです。 私がやった方法は以下のとおりです。 http://bootswatch.com/#gallery で、SimplexのところのDownloadをクリックしました。私はブラウザにはGoogle Chromeを使っているのですが、クリックすると新しいタブでSimplexのCSSが現れます。（Downloadの右の▽をクリックして、現れるbootstrap.min.cssやbootstrap.cssのどちらかをクリックしてもいいです。）これを全部コピーしてテキストエディタで新しいファイルにペーストして、適当な名前で（私はbootswatch.cssとして）保存して、bootstrapのcssフォルダ（私はindex.htmでbootstrapを利用していますが、そのファイルからみると ./bootstrap/css（これがcssの場所を指す相対パスになります） の中にアップロードしました。 bootstrapからダウンロードしたcss, js, imgフォルダをindex.phpと同じフォルダ内に入れているのならば、相対パスは ./cssになります。 index.htmのhead内で、 <link href="./bootstrap/css/bootswatch.css" rel="stylesheet"> と書きました。(もしbootstrap-responsive.cssなどを使うとしたらこのbootswatch.cssの行はそれより前になければなりません。) もしcssの相対パスが./cssならば <link href="./css/bootswatch.css" rel="stylesheet"> でいいでしょう。 あとはちょっとわかりませんが、文字コードなど影響があるのでしょうか？ できたらUTF-8を使った方がいいでしょう。 私は最近bootstrapを学習し始めたのですが、この質問ではじめてbootswatchがあるのを知りました。bootswatchでいくつかのテンプレートがあるので自分の管理しているサイトで利用させてもらいました。質問者さんに感謝です。
★画像の上に文字を配置する場合の高さ調整はline-heightとheightの組み合わせで行うのが良いでしょう。 ★背景画像に文字が入っている場合は、 ・下のボーダーが画像でない場合はbackground-position ・ボーダーを含めて画像の場合はheight ★リンクが画像--<a href=""><img></a>の場合は画像自体を変更する。 質問内容から、リンクは画像ではないようですから上の二つが対策になります。 [例]HTML4.01 <div class="nav"> 　<ul> 　　<li><a href="/search">お店を探す</a></li> 　　<li><a href="/net">ネットで売る・買う</a></li> 　　<li><a href="/sell">売りたい</a></li> 　　<li><a href="/buy">買いたい</a></li> 　　<li><a href="/service">サービス・サポート</a></li> 　　<li><a href="/profile">会社情報</a></li> 　</ul> </div> だと div.nav{ width:90%;min-width:640px;max-width:1000px; margin:0 auto; text-align:center; font-size:12px; } div.nav ul,div.nav ul li{ list-style:none;margin:0;padding:0; line-height:24px;height:30px; } div.nav ul{display:block;} div.nav ul li{display:inline-block;width:16%;} div.nav ul li:last-child{margin-left:6px;} div.nav ul li a{ display:block;width:100%;height:100%; background-color:blue;color:white;text-decoration:none; border-radius:5px 5px 0px 0px; } div.nav ul li a:hover{background-color:rgb(200,200,255);} [HTML5] <nav> 　<ul> 　　<li><a href="/search">お店を探す</a></li> 　　<li><a href="/net">ネットで売る・買う</a></li> 　　<li><a href="/sell">売りたい</a></li> 　　<li><a href="/buy">買いたい</a></li> 　　<li><a href="/service">サービス・サポート</a></li> 　　<li><a href="/profile">会社情報</a></li> 　</ul> </nav> nav{ width:90%;min-width:640px;max-width:1000px; margin:0 auto; text-align:center; font-size:12px; } nav ul,nav ul li{ list-style:none;margin:0;padding:0; line-height:24px;height:30px; } nav ul{display:block;} nav ul li{display:inline-block;width:16%;} nav ul li:last-child{margin-left:6px;} nav ul li a{ display:block;width:100%;height:100%; background-color:blue;color:white;text-decoration:none; border-radius:5px 5px 0px 0px; } nav ul li a:hover{background-color:rgb(200,200,255);}
max-widthやmin-widthを使用すれば解決できると思われます。 http://www.css-lecture.com/log/css/038.html しかしその前に、根本的な部分から改善していきましょう。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML　4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html> <head> <meta http-equiv="Content-Type" content="text/html; charset=Shift_JIS"> <meta http-equiv="Content-Style-Type" content="text/css"> <title></title> </head> <body style="background: url(cg/interface/hoge.gif) repeat-x;margin: 0 12px"> <div style="max-width:1200px; min-width: 640px; border: 1px solid;">左右にマージンが空いて欲しい</div> </body> </html> 本当はこうじゃないほうが良いのですが・・・ とりあえずはということで。
はじめまして。 CSSの場合CSS3を使用すると思うのでブラウザによって動作しません。 簡単に実装するならjqueryを使い クリックのイベントで 指定した要素までの距離やウィンドウのサイズなどを取得して スクロールさせるといった具合でしょうか。 最も手っ取り早い方法はプラグインですが 仕組を理解しないと難しいと思います。 ちなみにこの手のプラグインは沢山ありますので 「jquery scroll プラグイン」などの検索ワードで 探してみてはいかがでしょうか。
これ、liタグとaタグの扱いが逆じゃないすか？ 普通よくあるパターンだと、aタグを"display:block"にして、widthとheightを持たせ、background-imageで画像を指定する。 そのうえで、正しくテキストノードをセットし、text-indentで-1000emとかの値をセットするなりして、ブロック外にテキストを吹っ飛ばしたり、とにかく不可視状態にします。 要は、テキストだけでもメニューが作成できるようにしておいて、背面に画像を出し、テキストを消すと。 <ul id="menu"> <li><a id="menu1" href="http://www.test.com/">トップページ</a> <li>...</li> </ul> a#menu1 { 　display:block; 　width:120px; 　height:32px; 　text-indent:-1000px; 　background-image:url('../images/menu1.png') } <a>内部へメニュー画像を直貼りするは昔の話。今はSEO的に不利な手法は常識的にとりません。 まあ、メニューに画像を使う時点で、マークアップ厨から見たらSEOもクソもないですが。
N.3です。 　wordpressだろうがなんだろうが、サイトの一部だけをそれにすればよいだけです。それは他のSNSもそのひとつの応用であるブログだろうが、あるいはCGIだろうが同じです。複数のシステムを同居させることも可能です。 　ただ、お話を聞く限りでは、簡単なCGIで一ページずつ追加していく掲示板のようなものを作成して、更新したらトップページを書き換えるなり、SSIかPHPでトップページが目次部分だけをインクルードするほうが良いように思います。 ・管理者だけが記入修正ができるフォームとそれを処理するCGIを作成する。 ・CGIはCSVなどの簡単なデータベースと 　　それをHTMLにして表示する機能 　　データベースを変更する機能 　　目次ファイルを作成する機能 ・トップページはSSIないしPHPで目次をインクルードする。 　　もしくはiframeでページ内に更新歴を表示する。 　　---SEOとしては前者が良い 　WordPressは大げさすぎるような気がします。 　⇒cgi 日記 - Google 検索( https://www.google.co.jp/#hl=ja&gs_rn=1&gs_ri=hp … )
自分はシステム開発会社でデザインは外注してるので作り方の詳細はわかりませんが iPhone用とAndroid用で別ファイルで納品してもらってます。
画像のスライドショーでもテキストのスライドショーでも同じです。記事をブロック要素(p,li,dd,div・・なんでも)で囲んでスタイルシートなどでサイズを決めておけば良いです。画像は置換インライン要素ですが、非置換要素ですからサイズを決めなければならないだけです。
はじめまして。 おそらくbodyのデフォルトのマージンとパディングではないかと思います。 覗かれる側HTML(index.html)のスタイルシートに html,body{ padding:0; margin:0; } と追加してみてください。 ちなみに <img src="top2.jpg" width="900px"></img> の部分ですが・・ imgは単独タグなので終了タグは必要ないかと思います。 子要素であるimgが親要素の.fallback-messageの幅より大きいのも気になりますが・・
DL <!ELEMENT DL - - (DT|DD)+　　　　　　　-- definition list --> 　　↑(DT|DD)+ は正規表現的な書き方ですがDT,DDのいずれか(|)をひとつ以上(+と言う意味 DT,DD <!ELEMENT DT - O (%inline;)*　　　　　 -- definition term --> <!ELEMENT DD - O (%flow;)*　　　　　　 -- definition description --> 　　↑(%inline)* は%inlineをゼロ個以上と言う意味 です。 　⇒10.3 定義リスト: DL、 DT、及びDD要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) したがって、そのようなマークアップは文法上も間違っていますが、それ以上にDIVやDT,DDの使い方が間違っています。 ※divはidやclass名を使って文書構造を補完します。 　⇒id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ※h1～h6は見出しをマークアップします。 　There are six levels of headings from H1 (the most important) to H6 (the least important). 　⇒7.5.5 見出し: H1、H2、H3、H4、H5、H6要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ※dl,dt,dd自体ブロック要素で、意味を持ちます。 [例]たとえば商品やアルバム、図鑑のようなものでしたらマークアップは <dl class="productList"> 　　<dt>タイトル01</dt> 　　<dd><img src="" width="" height="" alt=""></dd> 　　<dd>説明</dd> 　　<dt>タイトル02</dt> 　　<dd><img src="" width="" height="" alt=""></dd> 　　<dd>説明</dd> 　　<dt>タイトル03</dt> 　　<dd><img src="" width="" height="" alt=""></dd> 　　<dd>説明</dd> 　　<dt>タイトル04</dt> 　　<dd><img src="" width="" height="" alt=""></dd> 　　<dd>説明</dd> </dl> だけでよいです。 　またdtは意味的におかしければ <ul class="productList"> 　　<li>タイトル01 　　　　<ol> 　　　　　　<li><img src="" width="" height="" alt=""></li> 　　　　　　<li>説明</li> 　　　　</ol> 　　</li> 　　<li>タイトル02 　　　　<ol> 　　　　　　<li><img src="" width="" height="" alt=""></li> 　　　　　　<li>説明</li> 　　　　</ol> 　　</li> 　　<li>タイトル03 　　　　<ol> 　　　　　　<li><img src="" width="" height="" alt=""></li> 　　　　　　<li>説明</li> 　　　　</ol> 　　</li> </ul> などになるはずです。 箇条書きですから、その項目自体が見出しとしての意味を持ちます。 また、<div class="aaa">を複数使うのではなく、子孫セレクタで済むはずです。
本題から外れますが ＞やはり、これからHTMLを勉強するなら、HTML5を覚えていったほうがいいですよね？ 　そのまえに、HTML4.01strict(transitinalやframesetじゃない)とCSS2.1を完璧にマスターしましょう。 　HTML5については、 　⇒HTML5 における HTML4 からの変更点( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　を先読みしておいたら、HTML4.01のどこが未完だったかが分かります。それを頭に入れてHTML4.01をマスターするほうが早いです。
#top内部で、div#header_titleと、div#header_otherが、floatで左右に振られていますが、そのあとにブロックの高さを固定する"clear:both"が入っていません。 そのためdiv#header_titleと、div#header_otherの高さが変になって（ここがブラウザ依存）、div.crossFaderの「見え位置」に干渉している可能性があります。 div#header_title、div#header_otherも全部position:absoluteにするか、div#header_title、div#header_otherの外側にdivを設置して、clearFixをかけ、この両者の配置を固定しましょう。 そうすれば、div.crossFaderの位置に苦しむ必要はなくなります。 「clearFixをし忘れたfloatの後に、absoluteなボックスを重ねた」ということで。 IE9では特に表示が崩れているように見えないので、IE8の開発者ツール<Ctrl＋F12>でHTML要素をチェックしてみればいいと思います。 ちなみに、transitinalでも全然問題ないよwwwwww
画面サイズを参照して巾いっぱいで表示するのはwidth:100%で間違いありません。 その表示幅を基準に、%で指定していくことです。 ブロックのサイズは、直近のstatic以外のコンテナブロックの巾を参照すること。 ブロックのサイズはpadding辺の内辺であること。 を理解していれば良いでしょう。 　その要素が何であるか--ブロックなのかインラインなのか、置換要素なのか非置換要素なのか、分離ボーダーモデルなのか否かなどによってサイズの決定方法は変わります。 　まあ、paddingを使用しないこと、border巾は固定なので小さな画面ではその巾を見越して配置することに注意すれば良いでしょう。 　その上でmin-widthとmax-widthを活用します。 [例] CSSのレイアウトについて - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7847891.html#a3 ) 　また、スマホに関してはCSS3のメディアクエリが使用できますので、それでスタイルを切り替える技が使用できます。
なぜそのような複雑なHTMLになるのでしょう。 単純に <nav> 　<ol> 　　<li><a href=""></a></li> 　　<li><a href=""></a> 　　　<ol> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　</ol> 　　</li> 略 　で良いです。
その部分のHTMLが何かで変わります。 単にスタイルシートで行っても良いです。 javascriptだと一部のユーザーには利用できないし、検索エンジンも理解してくれませんからSEO的には良くないです。 　javascripを使う場合は--イワユルスライドショーとしてJQueryに様々な方法があります。 たとえば、アルバムのような目的でしたら、メニューから画像を選択して表示させても良いでしょう。 またナビゲーションでしたら、 ナビゲーションリストを様々にデザインしてみよう。
　パンダとか色々な名前のコードネームで呼ばれますが、googleはしばしば、悪質なサイトを排除するために成長していきます。 　パンダアップデートは、白黒をはっきりさせるためのアップデートで数ヶ月間隔で行われているようです。 　いずれにしろ、あなた自身が後ろめたく思っているなら、それはダメなのです。 　『ランクを競っているサイトや Google 社員に対して自分が行った対策を説明するときに、やましい点がないかどうかが判断の目安です。 ( http://support.google.com/webmasters/bin/answer. … )』 　プライバシーポリシーはそのサイトの主要なデータではないので、それは影響ないです。 　しかし、Q&Aを含めて、他の主たるコンテンツはコピーはダメです。そもそも著作権に引っかかります。 特に一部を書き直しただけのものはダメです。 ただし引用は許されています。引用と転載の違いは ・オリジナルが一切変更されていないこと ・自説を補強するためのデータであり、内容的にふくであること ・引用元が明記されていること 　　HTMLでいうと<blockquote></blockquote>や<q></q>でマークアップされcite属性でも明記 などが引用の条件です。 　著作権法第32条 ( http://www.cric.or.jp/db/article/a1.html#032 ) 　きちんと引用先を示して、かつそれが主たるコンテントでない範囲内で堂々と利用します。 　内容が良く似ている場合は、googleははじく場合があります。「同じページのコピーを複数作成して別の URL で公開しないでください。 ( http://support.google.com/webmasters/bin/answer. … )」 　もし、あなたの運営しているサイト間で同一内容を提供する場合は、正規化 ( http://support.google.com/webmasters/bin/answer. … )の手続きをしてください。 　また、相手が侵害に気がついた場合は「デジタル ミレニアム著作権法 ( http://www.google.co.jp/dmca.html )」を通じて削除依頼を受ける可能性があります。 「画像もコピーし、そのまま使用しているものもあります。」 　これは相手がGFLで利用を許可している場合を除いて、絶対にしてはなりません。私は自分のサイトでいくつか画像を作成して利用していますが、他サイトでも利用価値のあるものは、GFL/GPL( http://ja.wikipedia.org/wiki/GNU_General_Public_ … )準拠であることを示して許可しています。当然ですが ・画像を変更しないこと 　　編集変更する場合はそれがわかるように注釈を ・どのサイトのものであるかを明記すること ・再配布が自由であることを守ること 　　再利用の制限をしているページには利用できません。 ・無保証であること 　が条件です。 　大事なことは、ページ数の多少じゃありません。 『自分のウェブサイトが独自性、価値、または魅力のあるサイトといえるようになるかを考えてみる。同分野の他のサイトとの差別化を図ります。 ( http://support.google.com/webmasters/bin/answer. … )』 　まあ、ちょっとでも後ろめたいことはしないほうが良いです。googleが遠まわしに言っていることは、確実にパンダアップデート--検索エンジンの改良に使われているのですから。せっかく努力するのなら『自分のウェブサイトが独自性、価値、または魅力のあるサイト』になるほうに使いましょう。
そもそもHTMLは 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　なのですよ。一切スタイルシートを除けば、どのブラウザにも無関係に画面いっぱいに表示されるはずです。携帯電話のような240px幅でも、1900pxを超える幅広ディスプレイでも。もちろん点字端末でも、スクリーンリーダー(読み上げソフト)でも。 　そもそも「画像解像度やディスプレイサイズが変わっても、サイトのデザインを崩したくない」のでしたら、その目的の画像やPDFがあります。 　HTMLの目的は、ディスプレイのみならず、様々なユーザー--もちろん検索エンジンも含む---に対して、情報を伝えるためのもので、デザインを伝えるものではありません。 　幅の狭いディスプレイには、横並びして表示されていたものを縦に並ばせて表示させたり、あるいは一部のデータを表示させなくするなどします。 　また幅広ディスプレイには中央に1000px程度の幅で表示させるとか、視覚弱者がフォントサイズを大きくしたり、色をハイコントラスト--白黒ニ値--で表示させることもできます。 　私は、基本的に「CSSのレイアウトについて - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7847891.html#a2 )」で示したサンプルのように、640-900pxで中央表示としてscreen端末全般に対応させ、それ以下のscreen端末(スマホ縦)などはまったく余談(aside)は表示させないなど別のデザインにして、携帯電話などには素の状態で、印刷時にはA4に印刷できるように指定します。 「画像解像度やディスプレイサイズが変わっても、サイトのデザインを崩したくないです。」 　ではなくて、 「画像解像度やディスプレイサイズが変わったら、デザインを変えて情報が利用しやすい」ように考えるほうが良いです。そのためのHTML+CSSなのですから。 　もし前者のデザインを優先されるのでしたらHTMLはよい方法ではありません。 　#wrapper,#header,#content,#footerのようなHTMLのマークアップ、CSSの使い方は良くないです。 ・idはclass名は文書構造を補完するためのものです。 　「id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 ・#(一意セレクタ)は詳細度が高く一箇所しか指定できませんから、CSSが冗長化します。 　HTML5を読めばわかるように、.header、.section、.footer、.articleなどです。 ※「CSSのレイアウトについて - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7847891.html#a2 )」で示したサンプルのスタイルシートに html,body{margin:0;padding:0;} div.header,div.nav,div.section,div.footer{ width:100%;max-width:1330px;min-width:640px; } を最後に追加すれば、とりあえずは期待通りになるはずです。 最大1330px最小640px それ以上だと、中央に1330px それ以下だと、横スクロール
min-widthを指定すればよいだけです。 なお、スマホの普及など諸般の事情を考えると、640px程度までは伸縮するほうが良いでしょうね。 width:90%; min-width:640px; max-width:900px; margin:0 auto; position:relative; その上で、横並び要素も%で幅を指定する。(ブロック要素は、直近のstatic以外のコンテナブロックを参照できます。)
カテゴリ違いですので回答がつきにくいかと思われます。 デジタルライフ >ソフトウェア >ホームページ作成ソフト まで書き直されてはいかがでしょうか？
No.2です。 absoluteのつづり間違えてましたね。 単純に、asideを広くしてそれに見合うようにsection sectionの右を空けるだけです。 下記はHTML4.01strictです。 ★Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html# ) 　にてチェック済み--ご確認ください。 　文書構造しか書いてないので、内容を内容を追加するのは楽だと思います。なによりもスタイルシートで好きなようにデザインできますし、デザインの自由度も高くなります。またSEOとしても万全です。 　1) HTMLを作成する段階でデザインを考えたらダメです。 　2) HTMLさえきちんと書けていたら下記サイトや例のようにデザインは自由になります。 　3) HTML/CSSがシンプルでわかり易くなり、いずれか一方を見るだけでメンテナンスできます。 　表示させてウィンドウ幅を大きくしても小さくしても中央に表示されるはずですし、スマホの640px幅でもよいはず。 　ナビゲーションなどはHTMLもデザインもしてありません。ナビゲーションリストを様々にデザインしてみよう。 　 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- body{color: #333;} div.header,div.nav,div.section,div.footer{ width:90%;max-width:900px;min-width:640px; margin:0 auto; padding:10px; } div.header{background-color: #E7DBD5;} div.nav,div.footer{background-color: #BD9C8C;} div.section{position:relative;} div.section div.section{margin:0 200px;width:auto;min-width:0;background-color: #F2F2E6;} div.section div.contentTable, div.section div.aside{position:absolute;top:0;width:200px;height:100%;background-color: #E7DBD5;} div.section div.contentTable{left:0;} div.section div.aside{right:0;} /* わかりやすいように色と高さを指定してみる。 */ div.header{min-height:300px;} div.nav{height:30px;} div.section div.section{min-height:600px;} /* 希望によりサイズを変更 */ div.section div.section{margin:0 40% 0 20%;width:auto;min-width:0;background-color: #F2F2E6;} div.section div.contentTable, div.section div.aside{position:absolute;top:0;height:100%;background-color: #E7DBD5;} div.section div.contentTable{width:19%;} div.section div.aside{width:38%;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>ページタイトル</h1> ＿</div> ＿<div class="nav"> ＿＿ナビ ＿</div> ＿<div class="section"> ＿＿<div class="section"> ＿＿＿[本文] ＿＿</div> ＿＿<div class="contentTable"> ＿＿＿[目次] ＿＿</div> ＿＿<div class="aside"> ＿＿＿[付録] ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿[文書情報] ＿</div> </body> </html>
ここは「Webデザイン・CSS」のカテゴリ・・・　Googleとか検索はカテ違い。 因みに、 Googleが貴方のサイトにアクセスできないとか、弾いているとか、 Botがきたときにサーバが落ちてたとか、いろいろ原因があるでしょうし。 何の為のWMTなんでしょうか？ なんでエラーなのかのヒントは教えてくれてるはずですよ。 ＞上記のことから、グーグルとyahooの検索システムを使ってみても、どこにもwebサイトが表示されません・・・ Ａ、 ドメイン・URLで検索しても見つからなければ、 新規サイトだからとか、弾いているからとか（変な事やってない？） 検索って地域性もあるから、そんなSEOツール使っても良いマーケティングが出来ない場合もあるよ。 もしかして、ビッグキーワードでは上位が厳しいね　って愚痴話でしょうか？
マルチポストのようなのでその URL を張っておきます。 http://bbs.wankuma.com/index.cgi?mode=al2&namber … http://social.msdn.microsoft.com/Forums/ja-JP/as … 質問者さんへ＞ マルチポストはダメとは言いませんが、他の投稿先の URL 等を書いておいていただければと思います。同じ問題を持つ人が検索でこのページにたどり着いた時、URL をたどって解決できるかもしれませんから。
>ちなみに、FTPユーザー名もFTPパスワードも変わっております！ >その場合は、こちらも変えれば良いのでしょうか？ そうですね。 全て新しい情報を指定する必要があります。
ホームページだったら　これで　解決できますよ 『ワードの操作感覚で誰でも簡単に作れる』 とでも検索すると　でてくるとおおいます　
　googleなどの検索エンジンは著者のためではなく、検索しているユーザーのためにあるのですよ。あなたが立場を検索する立場になってみてください。HTMLと言う言葉を検索したらWikiのトップページではなく、HTMLについて説明されているページが検索結果として表示されるほうが良いですよね。ある商品を探しているとき、楽天の該当ページではなく、楽天のトップページに誘導されるのは困るでしょう。 　私は、この世界十数年になりますが、トップページではなくそのテーマが詳しく説明してあるページに直接訪問してもらえるようにしています。もっというとトップページに可能な限りヒットしてしまわないようにしています。なぜなら、そこにそのテーマについて書かれていなかったら、ユーザーは即、他のサイトへ逃げてしまうからです。 　ですので、「トップページ以外がヒットする」のが理想的なのですよ。トップページがヒットしてしまうのは、とても、とても、まずいのです。 　一方、それぞれのページに適切な「パンくずリスト( http://ja.wikipedia.org/wiki/%E3%83%91%E3%83%B3% … )」があり、到着したページから、そのカテゴリーのインデックスページなどへ遡れるような工夫があると良いでしょう。 　トップページは、ユーザーには見せなくて良いのです。トップページは名刺とかパンフレットとかのためだけにあると割り切りましょう。 　最近では、それぞれのページがLP(ランディングページ)となるようにコーディングするほうが多いでしょう。言い換えれば各ページがトップページであるという考え方です。
系統立てて勉強できる本をお薦めします。 サイトの解説は善し悪しの差が激しすぎると思います。 発行年をみて最近の本であれば、よほど運が悪くないと、変な物には当たらないと思います。 サイト解説で良いものは確かにありますが、たいてい中級以上を想定していると思いますし、 初心者には到底理解できるとは思えません。 ただ、CやJavaなどを経験してプログラムを作れるのであれば、HTMLの解説サイトの内容で十分理解できると思います。 ネットの情報だけで勉強したという人は、何か関連性のある物を経験していると思います。 >本がいいという場合は、お奨めの本なども教えていただけると助かります。 すみませんが、自称中級以上ですので、そういう本は全くと言っていいほど読みません。 初心者を脱出して次の段階へ行こうという人から、この本はわかりやすかった、というのを聞くのが良いと思います。
No.1です。 　私はサイトマップを登録していませんがサイトリンクが表示されます。総ページ数で百ページ未満以上のサイトです。 　サイトマップが表示される場合の順序などの変更申請はNo.1で紹介したページにリンクがあります。
No.1です。 　極めて簡単なサンプルを上げておきます。 ・ウィンドウ幅は480px以上あれば、スクロールなしで利用できますのでスマホのような小さな画面でも利用できます。幅広ディスプレイの場合は800px幅まで広がります。 ・価格はabsoluteで配置してあります。 　親になる直近のstaticでないコンテナブロックの高さを参照しています。 ・floatと異なり高さの低いデータがあるとに回りこむことはありません。 ★Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html# )でチェック済みのウェブ標準(HTML4.01strict+CSS2.1)です。 ★Firefox,GoogleChrome,Opera,safari,IE8以降で同じになるはずです。 　IE7以前に対応させる場合はスタイルシートを違うものを読み込むように指定してください。 ★商品リストはシンプルな <ol class="productList"> 　　<li>商品名 　　　　<p>\1,200-</p> 　　　　<p>ここには、説明が入ります。</p> 　　</li> 　　<li>商品名 　　　　<p>\12,600-</p> 　　　　<p>ここには、長い説明が入ります。</p> 　　　　<p>説明</p> 　　</li> </ol> でマークアップしてあります。価格は最初の<p></p>に入ると想定してあります。 なお、タブは＿に置換してあるので必ずタブに戻してください。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} body{background-color:silver;} ol.productList,ol.productList li{list-style:none;} ol.productList{ ＿display:block;width:80%; ＿margin:0 auto; ＿min-width:480px;max-width:800px; } ol.productList li{ ＿display:inline-block; ＿text-align:center;width:21%; ＿border:solid 1px gray; ＿position:relative; ＿margin:0.5%; ＿font-weight:bold; ＿background-color:white; ＿padding:0.5%; ＿min-height:4em; } ol.productList li p{ ＿text-align:right; ＿position:absolute; ＿top:25%; ＿right:0;width:4em; ＿font-size:0.8em;font-weight:normal; } ol.productList li p + p{ ＿text-align:left;text-indent:1em; ＿line-height:1.4em;margin:0 4em 0 0; ＿position:static; ＿width:auto; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<ol class="productList"> ＿＿＿<li>商品名 ＿＿＿＿<p>\1,200-</p> ＿＿＿＿<p>ここには、説明が入ります。</p> ＿＿＿</li> ＿＿＿<li>商品名 ＿＿＿＿<p>\12,600-</p> ＿＿＿＿<p>ここには、長い説明が入ります。</p> ＿＿＿＿<p>説明</p> ＿＿＿</li> ＿＿＿<li>商品名 ＿＿＿＿<p>\1,800-</p> ＿＿＿＿<p>ここには、とても長い説明が入ります。説明・説明・説明・説明・説明・説明・説明・説明・説明</p> ＿＿＿＿<p>説明</p> ＿＿＿</li> ＿＿＿<li>商品名 ＿＿＿＿<p>\500-</p> ＿＿＿＿<p>ここには、とても長い説明が入ります。説明・説明・説明・説明・説明・説明・説明・説明・説明</p> ＿＿＿＿<p>説明</p> ＿＿＿</li> ＿＿＿<li>商品名 ＿＿＿＿<p>\500-</p> ＿＿＿＿<p>ここには、長い説明が入ります。説明・説明・説明・説明・説明</p> ＿＿＿＿<p>説明</p> ＿＿＿</li> ＿＿＿<li>商品名 ＿＿＿＿<p>\500-</p> ＿＿＿＿<p>ここには、長い説明が入ります。説明・説明・説明・説明・説明・説明・説明・説明・説明</p> ＿＿＿＿<p>説明</p> ＿＿＿</li> ＿＿＿<li>商品名 ＿＿＿＿<p>\1,800-</p> ＿＿＿＿<p>ここには、長い説明が入ります。説明・説明・説明・説明・説明</p> ＿＿＿＿<p>説明</p> ＿＿＿</li> ＿＿＿<li>商品名 ＿＿＿＿<p>\12,600-</p> ＿＿＿＿<p>ここには、長い説明が入ります。</p> ＿＿＿＿<p>説明</p> ＿＿＿</li> ＿＿＿<li>商品名 ＿＿＿＿<p>\1,800-</p> ＿＿＿＿<p>ここには、とても長い説明が入ります。説明・説明・説明・説明・説明・説明・説明・説明・説明</p> ＿＿＿＿<p>説明</p> ＿＿＿</li> ＿＿＿<li>商品名 ＿＿＿＿<p>\500-</p> ＿＿＿＿<p>ここには、とても長い説明が入ります。説明・説明・説明・説明・説明・説明・説明・説明・説明</p> ＿＿＿＿<p>説明</p> ＿＿＿</li> ＿＿</ol> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
IE9もウェブ標準ですから、他のブラウザと同じスタイルになるはずです。 基本は、HTML自体をウェブ標準で作成し、それに対応していない古いIEのみ別途設定するのでよいはずです。 　HTML4.01stictで製作されていると思いますが・・・ 『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　まず、HTMLがウェブ標準で作成されているかを確認し、IEが標準モードで起動することを確認しましょう。 　DOCTYPEスイッチ - Google 検索 ( https://www.google.co.jp/search?q=DOCTYPE%E3%82% … ) 　そのうえで、スタイルを記述すると楽でしょう。 #ie_color {background-color: #777777;} 　どの部分の指定ですか？ 　ページの背景でしたら body{background-color: #777777;} 　でよいのでは？
これが日本語の情けないところです。 「DW8以降」にDW8は含まれない。 CS3以降を使えということです。 ExtensionManagerはAdobeプロダクツになってから仕様が変わった。 Flashなども同じです。
http://nikukyu-punch.com/temp_biz.html http://note.chiebukuro.yahoo.co.jp/detail/n66896 テンプレートの利用をすすめます 必要な部分を書き換えるだけで本格的なサイトが作れます 具体的な仕組みなどを理解するなら　 ソースコードをみることで勉強になると思います　 ちゃんとやるならHTML，CSSの勉強をすすめます ボランティアなら　まずは テンプレートサイトで　希望に近いデザインのものを 依頼主に選んでもらって　修正を加えていくのがよいのでは
要は、「index.html」というhtmlファイルの生成を、MovableType側でやるのか、スクラッチ作成側でやるかの問題だと思います。 もひとつ、静的表示か動的表示かという選択もあります。 ■MovableType側をメインにする場合 ・MovableTypeのテンプレートに、スクラッチ側の修正部分を加えて、MovableTypeで生成する。 または、 ・MovableType生成のhtmlに、スクラッチ側のhtmlを部分的に読込むjavascriptを追加して動的表示する。 ■スクラッチ側をメインにする場合 ・MovableTypeのテンプレートを、更新部分だけの生成に変更 ・スクラッチ生成のhtmlに、MovableType側のhtmlを部分的に読込むjavascriptを追加して動的表示する。 部分読み込みは、jQueryのload命令などで可能です。 $(読込み先のDOMエレメント).load(読込むhtmlファイル, 読込むDOMエレメント); 自分はWYSIWYGで修正したいので、後者の方法をとっています。
ブログのRSS表示をしているように思えます。 件のサイトでいうと「お知らせ一覧」がブログになっており、「お知らせ一覧」ブログのRSSがトップページに表示されているだけだと思います。 更新はそのブログを更新するだけです。 RSS表示パーツを無料でレンタルされているところがあります。 http://easyfeed.info/ 上記のところは有料になりますけど、カスタマイズもやってくれるようですよ。
前も何度も紹介していると思いますが ・ウェブマスター向けガイドライン（品質に関するガイドライン） - ウェブマスター ツール ヘルプ ( http://support.google.com/webmasters/bin/answer. … ) をはじめとする ・ウェブマスター ツール - ホーム ( https://www.google.com/webmasters/tools/home?hl=ja ) など・・・ 　SEOとは、検索エンジン最適化 ( http://ja.wikipedia.org/wiki/%E6%A4%9C%E7%B4%A2% … )のことで、本来は検索エンジンがページの内容などを正確に把握できるようにすることを意味しています。それによって検索エンジンの検索結果の上位に表示されることに繫がるのですが、それは結果です。 　Web標準とは直接の関係はありません。ただHTML5の仕様策定にgoogleのメンバーも深く関わっていることからHTML5の仕様書--特にセマンティックウェブの考え方は重要になるでしょうね。
「レスポンシブ」を検索すれば、幸せになれるかも？ スマホ用ＰＣ用で分けてもいいし、スマホ用を縦用横用とわけＰＣ用も低解像度、高解像度と分けるのもいいんじゃないですか？.htaccessには１行も書き足さずに分岐させる方法もあります。区別するなら、それようのコードは必要です。htmlファイルには１行追加するだけでも対応できる方法もあります。 先の用語に加えて、使用したいワードを加えて検索すれば、でてきますよ。「レスポンシブ　htaccess」とか「レスポンシブ　css」、「レスポンシブ　メディアクエリ」なんて感じです。 デザインに凝らなければ、単純なリキッドレイアウトで済ませることも可能です。fujino00 さんのしたいようにすればいいので、２つを用意するのも一つで済ませるのも有りですよ。
意味があるとすれば、そのCSSを複数のHTML文書で共有して使用したり、HTMLが動的に変化するWebアプリケーション等の場合において、エレメントの階層構造が指定の組み合わせになった場合のみ有効となるスタイル指定をしたい場合、でしょうかね。 例を示します(実例として良いか否かは、大目に見てください)。 【HTML例１(写真アルバムのページ)】 <div id="photoAlbum"> <div id="pageTitle">写真アルバムA</div> </div> 【HTML例２(文章のページ)】 <div id="articleArea"> <div id="pageTitle">文章B</div> </div> photoAlbum、articleArea、pageTitleは、それぞれページ内に必ず一つしか置かない文書構造とするならば、それをクラスではなくidにすることには、それなりに意味があると思われます。 これらのページ群で、同じCSSを共有するようにした場合に、例えば写真アルバムのタイトルのみに指定したいスタイルがある場合は、次のような書き方になるかと思います。 #photoAlbum #pageTitle { /* ここに、写真アルバム用のタイトルのスタイル指定を書く */ } こういう書き方を積極的にすべきなのかどうかは、サイト全体の設計やメンテナンス等の要件によるでしょうし、いちがいには言えないと思いますが、書き方的には、まあ、ありと言えば、ありなのではないかと。 ちなみに、処理速度への影響は、この場合は殆ど(実質的には全く)ないと考えて良いと思います。 (通信や、他のレンダリング処理等の方が、問題にならないくらいに、遥かに大きいため)
#main { width: 592px;/*箱の大きさを指定*/ line-height : 185% ; font-size: 13px; text-align: left;/*箱の中の文字を左にの意味★*/ margin-left:auto;/*左右のマージンautoで箱を中央にの意味☆*/ margin-right:auto; /*float: left;これ消します。有れば、箱を本来の流れから切り離して左に寄せる指定となります。*/ font-family: "ＭＳ Ｐゴシック",sans-serif; } ｃｓｓではインライン要素（<a><strong>など行内要素）とブロックレベル要素（<h1><h2><p><table><ul><div>……上下に改行がつく塊の要素）があります。 ★インライン要素にのみtext-alignは有効で ☆ブロックレベル要素にのみmargin:X auto;は有効です。 既に付いていますが、widthで幅を指定しないと初期値が100％なので、100％のエリアに100％の入れ物を入れて中央に持ってきても、遊びがないので、中央には見えません。ので、ブロックレベル要素を中央に置きたい場合は、widthと左右のmargin:autoのセットとなります。
そうそう・・・言わずもがなですが、印刷用スタイルシートには script,noscript{display:none;} を忘れないように・・
実際のページを見せていただく術(すべ)がないので原因はわかりませんが、根本的な対策としては、CSS3など最新の技術を使用しないことです。 「画像などの角丸やボックス内の背景のみを透過するなど」 は、あくまでおまけとして、CSS3ではないと表示できないスタイルより前にCSS2.1の範囲内でのスタイルを記述しておくことです。 　いまだに、IE8も無視できないシェアを持ってます。 　ウェブページの考え方 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　からすると、折角HTMLでページを作成しながら、端末の制限をすることは本末転倒です。 具体的には、 <meta http-equiv="X-UA-Compatible" content="IE=9" /> を使うのではなく、 IE8など用に、CSS2.1の範囲内で設定した後、CSS3の指定を書いておくと良いです。 [例] border:solid gray 2px; border-radius:10px; で、CSS3対応のブラウザは、border-radiusが適用され、CSS3対応のブラウザでは角が丸くなる。 というふうに・・ 　所詮、ユーザーが利用してくれるのはデザインではなく、コンテンツですから、折角苦労して作成したコンテンツがデザインのために利用されない---ではあまりに悲しいですから。
　各ページで共通な部分は固定スタイルシートに記述し、それぞれのページに優先スタイルシートを使用するという方法。もちろんそのような使い方も出来ます。 　ただ、印刷用はcsreenと分けたほうが良いです。なぜなら、様々な面でscreenとprintは異なるからです。 media=printでは、 ・fixedされたものは各ページに印刷される。 ・サイズはpxをmmなりのサイズに換算される。 など・・ 　 　もし固定スタイルシートを置き、それをすべてのmediaに対して利用するのでしたら、それにはフォントなどごく限定されたものになるでしょう。それでも、フォントはmedia=auralやmedia=ttyには無効ですが(^^) 　 　そこであくまで、media=screeについてのみ、永続的(固定)スタイルシートを設定します。mediaのみ指定してtitleをつけないスタイルシートになります。 1) すべてのmediaに対して固定スタイルシートで基本的なものを指定する。 　font-family 　h1,h2,h3,h4,h5,h6,p,dd,li{margin:0;line-height:1.6em;text-indent:1em;} 　dt{font-weight:bold;} 　blockquote{margin:0.5em;2emborder;dotted gray 1px;} とか・・。borderは視覚系メディアに対する指定なのでauralなどには無効ですが・・ 2) media=screenに対して基本的な指定--サイト全体で統一したいもの-titleはつけない 　preの扱い 　div.header内のh1とか 　色調とかフォントサイズも決めても良いでしょう。 　　・・・必要なら標準スタイルシートや代替スタイルシートで上書きする。 3) 標準スタイルシートでデフォルトのスタイルシートを決める。titleを書くこと 　　ここで書かれた内容は代替スタイルシートを選択すると無効になります。 　　複数の標準スタイルシートを用意して、ページごとに別のものを利用しても良いでしょう。たとえばカテゴリートップではtopPage.cssを、細目ページではcontent.cssとか。 4) 代替スタイルシートを適用したときに適用されるものは、titleのないスタイルシートです。 　このとき、外部スタイルシートに同じtitleで指定されるスタイルシートがあっても構いません。 ・配置などを指定するスタイルシート ・色のみ指定するスタイルシート ・headerやfooterを指定するスタイルシート 　に分けるのも良いでしょう。 ★代替スタイルシートを使わないなら、titleを記述しない固定スタイルシートだけで良いです。 ★もっとも大事なことはHTMLの文書構造が同じであること。 詳しい使い分けは、 14 スタイルシート ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) のページをしっかり読んで見ましょう。 　CSS3ではさらにmediaQueryが追加されますから、その基本としても理解しておく必要があるでしょう。 　
htmlかCSSのコードに問題があるのではないでしょうか？ ネットスケープのバージョンとあわせて記述されると、回答が付きやすいかも知れません。 答になっていなくてすみません。
固定(persistent)スタイルシートは、mediaもtitleもなく、relの値がstylesheetであるものです。 優先(preferred)スタイルシートは、relの値がstylesheetで、title属性の値を持つもの です。 　それぞれにmediaの値を指定してもよいのですが、印刷用に関しては代替スタイルシートの手段は用意されていません。 よって外部スタイルシートでは、 <link rel="styleSheet" type="text/css" media="print" href="./styleSheet/print.css"> になります。 そのときに、固定スタイルシートが指定されていれば、その指定も引き継ぎます。 ブラウザのデフォルトのスタイルシートは、概ね A. HTML 4.0におけるスタイルシートの例 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) のようなものですから、カスケーディングの仕組みから、これに追記する形で記述すると良いでしょう。 　印刷用スタイルシートの場合は、screenと異なるプロパティがいくつかありますので、それを活用しましょう。 13. ページ媒体 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )
　それが背景画像でしたら、背景で指定しましょう。位置が時間によって変わるのでなければ背景をcoverで置けばよいです。 　tableを配置のために使用するのは禁止です。tableは表のマークアップ以外に使用すべきではありません。 　位置指定は、親になるコンテナブロックに対して相対的/絶対配置で指定すると良いでしょう。 　HTML要素のstyle属性で指定すると、詳細度が[1,0,0,0]となってしまって外部スタイルシートなどで調整できなくなります。CSS3のメディアクエリ（Media Queries）を使用して端末の幅に合わせてスタイルを切り替えることができなくなります。 <div class="TimeMessage"> 　<p>この文章は、</p> 　<p>サンプルです</p> </div> div.TimeMessage{width:250px;height:46px;margin:0 auto;background:url(hoge.gif);} div.TimeMessage p{font-size:14px;margin:0;line-height:20px;padding-left:20px;} ※折角、文書構造とプレゼンテーションの分離のためにスタイルシートを使うのですから、HTMLにはプレゼンテーションに関わることは一切記述したらダメです。tableが配置目的なら無論です。 　こうしておけば、スタイルシートを書き換えるだけで、背景をやめることも、すべてのページの<div class="TimeMessage">のデザインを変更できます。
いくら何でもCSSじゃ無理かと。。 そもそもFacebookサーバ取得だし。 CSSで不可能なら全部NGとかは暴論だけど（笑 画像にしてしまえば問題ないと思います。 http://indigonote.com/2011/09/14/original-like-b …
SVGになりました。 VML自体は、 vml vector markup language - Google 検索 ( https://www.google.co.jp/search?q=VML&ie=utf-8&o … ) で検索したら、たくさん情報があります。 SVGが広く使えるようになった現在、非対応のIE8以前のIEに対応するために使う程度でしょう。
ソースを書くだけで許容文字数をオーバーしてしまったので説明を 　右寄せに配置したい＝text-align:rightですから、左寄せにしたい要素をdisplay:inline-blockにします。line-heightをそのinline-blockの高さに合わせておくと高さ中心に配置されます。また、text-align:centerでその内部で左右中央になります。 次にそれを収める外枠--親コンテナブロックを指定します。これはboxですからdisplay:blockですね。そして、高さを先のinline-blockが収まって十分な余白が取れるように高さを指定します。そして、text-align:rightをここで指定します。 　基本的には、これだけの指定です。あとは、それぞれの細かいデザインをお好きにしてください。 　なお、aは基本的にインライン要素でかつ内部にブロック要素は含むことができません。★ただし、あくまでHTML上の問題です。★ 　これをスタイルシートでinline-blockにしようが、list-itemにしようがそれとは別問題です。 　したがって、もしその直近の親要素がすでにblockなり、inline-blockなどblock系に指定されていれば、その親をposition:relativeでサイズを参照できるようにしてしまえば、a{display:block;width:100%;height:100%;}として、ボタン的な動作をさせることができます。 　よって、最も簡単なHTMLは、 <p class="breadcrumbList"> 　<a href="/">TOP</a> 　<a href="/abc">カテゴリー</a> 　<a href="/abc/sss/index.html">サブ</a> </p> 　なのです。divやspanで囲む必要すらなく、 p.breadcrumbList{ ＿width:640px;height:100px;margin:20px auto; ＿border:solid gray 3px;background-color:aqua;text-align:right; ＿position:relative; } p.breadcrumbList a{ ＿display:inline-block;width:80px;height:80px; ＿background-color:white;border:1px black solid; ＿text-align:center;margin:10px;line-height:80px; } p.breadcrumbList a:hover{background-color:yellow;} で、あなたが期待されたとおりの表示になりますね。本当にボタン風にしたければ p.breadcrumbList a{border:3px lime outset;border-radius:10px;} p.breadcrumbList a:active{border-style:inset;} 　このようにHTMLは、あなたが数年後に、あるいは他人が見てもわかるように文書構造だけを記述したのでよいのです。とても楽になると思います。 　そのうえで、スタイルシートでお好きなようにデザインすれば良いのです。HTMLもCSSのもとてもシンプルでわかりやすくなるでしょう。 　今までは、デザインのためにHTMLをマークアップするなど、異なった手法--本来の方法でない手法--で学ばれたのだと思います。慣れるまで大変だと思いますが、HTML5の時代には、この文書構造とプレゼンテーションの分離は最重要になります。頑張ってください。 　必ずしも有名サイトが正しいわけじゃありません。特にMicrosoftのサイトは古い--Microsoft自身が撲滅しようとしている古いIEにも対応させるため、いびつなマークアップやスタイルシートが使われています。あまり参考にはならないと思います。 　ただ、デザインはこなれていますから、外観だけはとても良い参考になりますね。--ソースは糞ですが(苦笑)---
いくつか問題があります。 ＞1ページあたりの情報量が多く、長いページになる 自体が問題です。 　できるだけページは分けましょう。 　印刷が想定されるないようでしたら、印刷用にすべてをまとめたものを、印刷用スタイルシートと共に用意すれば良いです。 javascriptを利用していますが、javsacriptが無効な人には使えません。ブラウザのjavascriptを外してもリンクが利くようにしましょう。 　マウスがなくても操作できる--タブでリンクを移動できるようにしましょう。 　javascriptを使わず、スタイルシートで実装すると良いでしょう。 1) 長大なページを作成し、最後に索引(index--目次)を書いておく 2) media=screen用に索引をページのどこか--常に見えているところ--に配置する。 3) 最後に、ページを適当に分割して目次をすこし書き換える。 4) 長大なページは印刷用スタイルシートを追加しておく と言う手順を踏むことが多いです。
　CSSとは、カスケーディングスタイルシートの略です。カスケーディングと言う仕組みはわかり易く、またとても効率的なためにCSSが数あるスタイルシートの中でもっとも良く使われています。HTML5では指定しなくてもCSSが使えます。 　カスケーディングとは、滝の流れのように次々に影響を及ぼしていく仕組みです。カスケーディングは、その出所、出現順番、最重要宣言の有無、詳細度などをひっくるめて理解すると良いでしょう。 ※プロパティよりも先に身につけるべきですよ。仕様書にもプロパティより先に書いてある。 1) 出所)誰が指定したスタイルか 　・ユーザー 　・著者 　・ブラウザ 　　優先順位　著者＞ユーザー＞ブラウザ 　※ブラウザのスタイルシートの一例は、「A. HTML 4.0におけるスタイルシートの例 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )」にあります。 2) 出現順位 　出所が同じで、詳細度も同じなら後から出てきたもので上書きされる。 3) 最重要宣言 　ユーザー指定の最重要宣言は、著者指定の最重要宣言に勝る。 　ユーザー指定の最重要宣言＞著者指定の最重要宣言＞著者のスタイルシート＞ユーザーのスタイルシート＞ブラウザのスタイルシート 4) 詳細度、より詳しく記述してあるほうが優先される。 　一意セレクタ 0,1,0,0 　要素セレクタ 0,0,1,0　クラスセレクタ　擬似クラスも同じ 　タイプセレクタ　0,0,0,1　擬似要素も同じ 　style属性での指定　1,0,0,0 　全称セレクタ/HTMLの属性での指定は詳細度0,0,0,0 ※セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ※値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 本題の、外部スタイルシートの指定ですが、 ★mediaもtitleも指定してない、styleSheetは、固定スタイルシートと言われ media= all としてすべてのユーザーエージェントに有効です。サイト全体を統一するためにfont-familyやline-heightなどを指定します。 ★mediatypeが指定されているとそのmediaに対してのみ有効です． ★CSS3では、ディスプレイの幅による指定も可能になります。 ★title属性がないスタイルシートでmediaのみ指定してあれば、そのmediaに対して固定して使用されます。 ★title属性があるスタイルシートで、relの値がstylesheetのものは、指定されたmediaに対して標準スタイルシートとしてあつかわれます。 ★title属性があり、relの値がAlternate StyleSheetのものは、代替スタイルシートとして扱われます。 ※14.3 外部スタイルシート ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ※14.4 カスケードするスタイルシート ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　したがって、HTMLがきちんとマークアップされていれば、ブラウザの持つスタイルシートが適用されます。そのスタイルシートは、上記「HTML 4.0におけるスタイルシートの例」のような値が適用されます。--それぞれのmedia(prent,speach,screen)用のものです。--- 　印刷が想定されるページについては、印刷用のスタイルシートを用意すべきです。シンプルなデザインでよければ、ブラウザがデフォルトで持つものを利用しても良いでしょう。ただ、リンクなどの値が表示されないので、 a:after{content:"\A< "attr(href)" >";whitespace:pre;} などで、URLが表示するようにするのが良いでしょう。 私は <link rel="stylesheet" type="text/css" href="./styleSheet/default.css"> で、 body{font-family:;} p,h1,h2,h3,h4,h5,h6{margin:0;padding:0;} p{text-indent:1em;} blockquote{border:dotted 1px gray;margin:0.5em 1em;} などだけ指定して <link rel="stylesheet" type="text/css" media="screen" href="./styleSheet/screen.css" title="標準"> で、スクリーン用のスタイルシート <link rel="Alternate stylesheet" type="text/css" media="screen" href="./styleSheet/screen.css" title="大きな文字"> で視覚弱者向けなど <link rel="stylesheet" type="text/css" media="print" href="./styleSheet/print.css"> で印刷用スタイルシートを指定することにしています。 以前、「CSSファイルの上手な使い方を教えて下さい。 - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7817905.html )」でも同様な回答をしています。
> <?php include '/ssi/News.txt'; ?> > のほうが良いでしょう。 SSIのほうが適切な理由や、 ・・・PHPはローカルのテスト環境を作るのが大変なので(^^) ISPが、SSIを許可しているなら。 > 位しか書いてなくて、HTMLの体をなしていませんから。 がだめな理由がよく分からないので、詳しい説明をお願いできますか？ 確かにHTMLの体をなしていませんが、それがなぜまずいのでしょうか。 　これもローカルでの話ですが、ダブルクリックするとブラウザが起動してしまいます。テキストエディタが起動してくれるほうが楽です。
何も指定しなければセルというより行高さや列幅は伸縮するはずです。
それは、サイトマップで行うべきです。 ＞実際はA.html～EZ.htmlのように100個以上のファイルを格納している。 大きなサイトの場合は、そんなことしません。 さらに分類して、何階層にも分けるのが通常です。そうしないと大変です。 /　　ルート |-- index.html |-- sitemap.html |-- sitemap.txt 検索エンジン用のサイトマップ--XMLです。 |-- SSI/ |　　|-- breadcrumb.txt |　　|-- grobalNavigation.txt |-- images/ |-- cgi-bin/ | |-- category1/ |　　　|-- index.html |　　　|-- images/ |　　　|-- SSI/ |　　　|　　　|-- navigation.txt　※後で説明 |　　　|-- sub1/ |　　　|　　　|-- index.html |　　　|　　　|-- images/ |　　　|　　　|-- SSI/ |　　　|　　　|　　　|-- navigation.txt |　　　|　　　|-- sub1/ |　　　|　　　|-- sub2/ |　　　|-- sub2/ |　　　 　　　|-- index.html★ |　　　 　　　|-- images/ |　　　 　　　|-- SSI/ |　　　 　　　|　　　|-- navigation.txt |　　　 　　　|-- sub1/ |　　　 　　　 　　　|-- index.html |　　　 　　　 　　　|-- images |　　　 　　　 　　　|-- SSI/ |　　　 　　　 　　　　　　|-- navigation.txt | |-- category2/ |　　　|-- index.html |　　　|-- images/ |　　　|-- SSI/ |　　　|　　　|-- navigation.txt |　　　|-- sub1/ |　　　|　　　|-- index.html |　　　|　　　|-- images/ |　　　|　　　|-- SSI/ |　　　|　　　|　　　|-- navigation.txt |　　　 　　　|-- sub2sub1 |　　　 　　　 　　　|-- index.html |　　　 　　　 　　　|-- images |　　　 　　　 　　　|-- SSI/ |　　　 　　　　　　　 　　|-- navigation.txt のように・・・、あなたのMy Documentの中と同じです。ひとつのフォルダーに何十個もファイルがあったら見つけ出すのが大変です。 　その上で、各ページには上の階層へのリンクと、下の階層は多くても２階層程度のリンクしか書きません。 ★のファイルには <p class="breadcrumb"><!-- パンくずリスト(breadcrumb list) --> 　<a href="/">TOP</a></li> | <a href="/category1/">カテゴリートップ</a> | <a href="/category1/sub2/">カテゴリートップ</a> | sub2 </p> そのページに関連ぶかいリンク <div class="nav" id="navigation"> 　<ol> 　　<li><a href="/">TOP</a></li> 　　<li><a href="/category1/">カテゴリートップ</a></li> 　　<li><a href="/category1/sub2/">カテゴリートップ</a> 　　　<ol> 　　　　<li><a href="/category1/sub1/"></a> 　　　　　<ol> 　　　　　　<li><a href="/category1/sub1/sub1/">sub1</a></li> 　　　　　　<li><a href="/category1/sub1/sub1/">sub2</a></li> 　　　　　</ol> 　　　　</li> 　　　　<li><a href="/category1/sub1/"></a> 　　　　　<ol> 　　　　　　<li><a href="/category1/sub1/sub1/">sub1</a></li> 　　　　　　<li><a href="/category1/sub1/sub1/">sub2</a></li> 　　　　　</ol> 　　　　</li> ・・・【中略】・・・ 　　　</ol> 　　</li> 　</ol> </div> そして、全体の <div class="nav" id="grobalNavigation"> 　<ol> 　　<li><a href="/">TOP</a></li> 　　<li><a href="/category1/">カテゴリートップ</a> 　　　<ol> 　　　　<li><a href="/category1/sub1/"></a></li> 　　　　<li><a href="/category1/sub1/"></a></li> 　　</li> 　　<li><a href="/category2/">カテゴリートップ</a> 　　　<ol> 　　　　<li><a href="/category2/sub1/"></a></li> 　　　　<li><a href="/category2/sub1/"></a></li> 　　　</ol> 　　</li> 　　<li><a href="/category3/">カテゴリートップ</a> 　　　<ol> 　　　　<li><a href="/category3/sub1/"></a></li> 　　　　<li><a href="/category3/sub1/"></a></li> 　　　</ol> 　　</li> 　</ol> </div> とか・・・が一般的--使いやすいでしょう。 <body> 　<div class="header"> 　　<p class="breadcrumb"></p> 　</div> 　<div class="section"> 　　本文 　</div> 　<div class="footer"> 　　<div class="nav" id="navigation"></div> 　　<div class="nav" id="grobalNavigation"></div> 　</div> </body> とすることが多いです。HTML5の場合は、下記のような構造にしています。 <body> 　<header> 　　<p class="breadcrumb"></p> 　</header> 　<section> 　　本文 　</section> 　<footer> 　　<nav id="navigation"></nav> 　　<nav id="grobalNavigation"></nav> 　</footer> </body> ＞このような動かし方は可能でしょうか？ 　HTMLには、きちんと文書構造だけを記述すれば、あとは好きなように、そのページに最適な方法でデザインすればよいでしょう。 　リンク自体を動的に作成するのはどのプログラムでも可能ですが、必ずサーバーサイドで動作させるか、ローカルでPerlなどを使って事前に作成しておくことになりますが、その場合にそれぞれのHTMLに正しくページタイトル<title></title>が記述されていないとならないことは理解できます。 　誤動作や製作中のページの処理、隠したいページの処理を考えると、自動作成ではなく、それぞれのカテゴリーごとに事前に作っておくき、includeで埋め込むことをお勧めします。
　遅くなりました。 　すべてが書かれていませんがおよその原因はわかりました。 ・IE6のもっとも有名なバグですが、ブロックのサイズをpadding辺の内側でなく、border辺の内側で解釈することによるものです。 　いずれ勧告されるHTML5では、DOCTYPEからすべてのブラウザが標準モードで動作しますから--HTML5ではすべてのブラウザが標準モードで起動するためだけの目的でDOCTYEが使われます。 [確認] 1) DOCTYPEを下記のように書き換えてください。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> 　これでIEでも、他のブラウザと同じような表示になるはずです。 2) はみ出す要素のpaddingの値を0にしてください。 　これで誤差の原因となるpaddingはなくなるので、IEも他のブラウザと同じ表示になるはずです。 [対策] HTMLをウェブ標準に直す。 DOCTYPEとHTMLのマークアップを変更します。 　HTML4.01transitinalですが、さすがに12年も前から「HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」と言われ続けていることですから、折角ならstrictにしておくべきでしょう。HTMLにプレゼンテーションに関わるタグや要素が含まれませんから、とってもスリムでわかりやすいものになります。 (strictを身につければ、将来のHTML5への対応も「HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」だけを学べばすみます) <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> 　また、たくさんのエラーがあります。これも直しておきましょう。なぜなら 『CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべき ( http://jigsaw.w3.org/css-validator/#validate_by_ … )』だからです。HTMLにエラーがあると、HTML5未満の場合、ブラウザによって文書構造の解釈が異なり、それが原因で表示のずれが出てくるからです。 ・Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html ) ・Another HTML-lint gateway ( http://cetus.sakura.ne.jp/htmllint/htmllint.html ) 　HTML５未満のHTMLでしたら、後者で十分です。 [主な間違い]--重要なものから ・<a></a>内に<div>は入れられません。行内要素以外は入りません。 ・空要素は/>ではなく、>で閉じます。 ・<input type="image" や<img>にはaltで代替テキストが必須です。 ・改行は<br>を使うべきではありません。 ・内容のない<div></div>があります。--これは省かれているだけとは思いますが ・画像にはデフォルトのwidth,heightを書いておきましょう。 ・いくつか綴りが間違ってます。</storong>,<input type="passwold"・・ 　これらを直さないと、ブラウザ間の誤差を完全に消すことは不可能です。 [ついでに] 　class名は、文書構造がわかるものにしましょう。これは将来のメンテナンスで絶対に重宝します。もちろん強力な検索エンジン対策にもなります。後から見直すのもとっても楽です。 　また、あんなにclassは不要です。あくまでDIVは複数の要素をグループ化するためのものです。そのDIVの子孫セレクタをうまく使えばDIVスープにしなくてすみます。画像しかないのでしたら<p><img src="" width="" height="" alt=""></p>です。 ★HTML4.01strict(Shift_JIS) + CSS2.1 です。 ★タブは＿に置換してあります。 ★Another HTML Lintでチェックしてありますが、accesskeyやtabindexはなくても良いでしょう。 ★どのブラウザでも、ほとんど差なく表示されるでしょう。 ★<!doctype html>にして、 　<div class="header"></div>→<header></header> 　<div class="article"></div>→<article></article> 　<div class="section"></div>→<section></section> 　<div class="footer"></div>→<footer></footer> にしたら、(しなくても)HTML5になります。 ※文書構造がわからないので一部しか手をつけていませんが、概略はわかると思います。 なお、リキッドデザインですから、そのままスマホや幅広ディスプレイで利用できます。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} body{background-color:gray;} h1,h2,h3,p{margin:0;line-height:1.6em;} div.header,div.article{width:80%;margin:0 auto;background-color:white;min-width:640px;} div.article{position:relative;min-height:600px;} div.article div.section{margin-left:200px;} h1{font-size:1.2em;text-align:center;} div.loginForm,div.footer{width:194px;position:absolute;} div.loginForm{top:56px;} div.footer{bottom:0;} div.loginForm h2{text-indent:-100em;background:url("image/top_log.png");margin-left:12px;height:65px;width:170px;overflow:hidden;} div.loginForm form{font-size:14px;width:170px;background-image:url("image/line.png");padding:12px;} div.footer address{position:relative;} div.footer address:after{ content:url("image/bottom.png"); poition:absolute;bottom:-40px;left:12px;} } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>ページタイトル</h1> ＿</div> ＿<div class="article"> ＿＿<div class="section"> ＿＿＿<h2>本文記事</h2> ＿＿＿<p>ここには本文の記事を書く</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h2>本文記事</h2> ＿＿＿<p>ここには本文の記事を書く</p> ＿＿</div> ＿＿<div class="loginForm"> ＿＿＿<h2>ログイン</h2> ＿＿＿<form action="./"> ＿＿＿＿<p><input type="t
私もあなたのようにしています。 / |--index.html |-- favicon.ico |-- images/このディレクトリ以下で使用する画像 |-- siteMap.html |-- ROBOTS.TXT |-- product/ |　　|-- index.html |　　|-- images/ このディレクトリ以下で使用する画像 |　　|-- product1/ |　　|-- product2/ とか・・・ 　目的は、それぞれのディレクトリを分担作業するときに、ルートにあるファイルと担当フォルダーを渡せばすむからです。 　ただ、どのように整理するかは、そのサイトを構築する人それぞれのスタンスやポリシーがありますので、あまり気にかけません。
NO2です ボックスとグリッド上を調べました 両方使い分けることは可能ですよ あれの事ですね グリッドの場合作りたい内容によっては自分が思ったように表示されないため困った事も記憶にありますのでボックスのほうが無難ではありますね もしタブメニューを使いたいのであればJAVASCRIPTを使って高速切り替え機能を、もたせる事も可能です それの見やすい参考サイトがあったのですが探してるうちに今日はもう落ちなければならなくなったので3日～1週間ほどいただければ次にネットをつなげたときに調べますね
長くなるので 14 スタイルシート ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　特に 　14.3 外部スタイルシート ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) は目を通してください。はじめはややこしくて何を言っているかわからないと思いますが、この資料をブックマークして都度読むことで、必ず理解できるようになります。 外部スタイルシートには ・固定スタイルシート ・優先スタイルシート ・代替スタイルシート と ・メディア別スタイルシート および ・出所 　の区別があります。 ・固定スタイルシート 　とは、すべてに有効なスタイルシートです。titleをもちません。 　<link rel="stylesheet" **** > ・優先スタイルシート 　とは、titleを持ち、relの値がstylesheet 　<link rel="stylesheet" **** title="標準"> ・代替スタイルシート 　とは、relの値がalternate stylesheetで、title属性を持つもの 　<link rel="alternate stylesheet" **** title="大きな文字"> ・メディア別スタイルシート 　media属性を持つもの、 　<link rel="stylesheet" **** title="標準" media="screen"> 　<link rel="stylesheet" **** media="print"> および ・出所 　著者が記述したものか、ユーザーが指定したものか ・最重要宣言の有無 　!importantがついているかいないか ・詳細度 　どの程度、適用させる要素が詳しく記述されているか などを理解しておくと良いです。 というか、スタイルシートのプロパティの記述--color:red;とかより先にしっかりと理解すべき部分です。 　もっと言うと、それらより先に学ぶべき部分です。CSS2仕様書( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )においても、 5. セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 6. 値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　はさきに書いてあります。 　実は、CSSの最も重要な--命ともいえる部分なのです。 私は、基本的に次のように書いています。 <link rel="stylesheet" type="text/css" media="screen" href="./styleSheet/default.css"> <link rel="stylesheet" type="text/css" media="screen" href="./styleSheet/dstanderd.css" title="標準"> <link rel="Alternate StyleSheet" type="text/css" media="screen" href="/styleSheet/big.css" title="大きな文字"> <link rel="styleSheet" type="text/css" media="print" href="./styleSheet/print.css"> ・・さらに必要に応じて、配置だけ指定したものと色の指定を分けたりしています。 　ここで大事なことは、 「全てのページでヘッダーとフッター、サイドバーのデザインが同じなら、ヘッダー、フッター、サイドバーだけのCSSファイルを1つ作成し」 ではなくて、 「すべてのスタイルで共通なものや基本的なことは、固定スタイルシートに記述し、それ以外は標準スタイルシートに記述する」 です。---当面代替スタイルシートは作らなくて良いですが、印刷しての利用が想定されるページならprint用のスタイルシートは用意すべきでしょう。 　そのためには、すべてのHTMLが共通な文書構造を持っていなければなりません。 　こちらのほうが大事でしょう。
> CSSからCSSを読みこんでいるのでしょうか？ その通りです。 > 何かメリットがあるのでしょうか？ @importを使うメリットとして １．CSSファイルが別サーバにある場合に速度が速くなる…ことがあるらしい 　　（<link rel="stylesheet" href="http://image.hoge.net/css/import.css" type="text/css" media="all" />みたいな場合？） ２．importハックという技術が使える 　　（と言っても今時それに該当するブラウザ自体が少ないですが） ３．大量にCSSファイルがある場合、メンテナンスが少し楽。 　　（新しいhtmlファイルを作った際などに効果があると思われる） ４．「そう簡単にCSSファイル見せるかぃ！」と思って扱える 　　（ソースの表示から気持ち追いづらい） などがあるのかな？と思います。 実際はCSSファイルから都度@importの分、通信が発生するため 普通は遅くなります。 当然、その分レンダリングは遅くなります。 明確な理由がない限り、デメリットの方が多いと思います。 > なぜ、htmlファイルに複数行をかけてCSSファイルを一つずつ読みこませないのでしょうか？ 一つずつ読みこませる方法でよいと思いますよ。
オーサリングソフトに関係なく、一昔前は*{margin～}が使われましたが、一律ですべてをリセットすると問題があることが知られるようになり、色々と変化しています。今も進化中です。 で、ちょうど昨日人気のｃｓｓリセットのまとめ記事が公開されていましたので、紹介します。 ●[CSS]2012年最も人気のあったCSSリセットとどれを使えばいいかの指針、と上手に使うポイント http://coliss.com/articles/build-websites/operat … 自分の都合にあわせて、選ぶ、選んだ中から削るなどカスタマイズしてください。
No.4です。後方互換を考えると <dl id="orderedList"> <dt>日時</dt> <dd>時間<span class="ordered w46">予約済み</span><span class="noorder w46">空時間</span></dd> <dt>11月26日</dt> <dd>0時:<span class="ordered w55">55</span><span class="noorder w37">37</span></dd> <dd>1時:<span class="ordered w60">60</span><span class="noorder w32">32</span></dd> <dd>2時:<span class="ordered w55">55</span><span class="noorder w37">37</span></dd> <dd>3時:<span class="ordered w70">70</span><span class="noorder w22">22</span></dd> <dt>11月27日</dt> <dd>0時:<span class="ordered w60">60</span><span class="noorder w32">32</span></dd> <dd>1時:<span class="ordered w40">40</span><span class="noorder w52">52</span></dd> <dd>2時:<span class="ordered w20">20</span><span class="noorder w72">72</span></dd> <dd>3時:<span class="ordered w0">0</span><span class="noorder w92">92</span></dd> </dl> [CSS] #orderedList{border:solid 1px gray;width:60%;margin:0 auto;font-family:"ＭＳゴシック",monospace;} #orderedList dt{width:6em;float:left;border-top:gray 1px solid} #orderedList dd{margin-left:6em;border:solid 1px silver;padding:0 1em 0 0.5em;} #orderedList dd span{display:inline-block;position:relative;text-align:center;} #orderedList dd span.ordered{background:lime linear-gradient(lime,white,lime);} #orderedList dd span.noorder{background:silver linear-gradient(silver,white,silver);} #orderedList dd span.w0{width:0%;} #orderedList dd span.w1{width:1%;} #orderedList dd span.w2{width:2%;} ・・・【中略】・・・ #orderedList dd span.w89{width:89%;} #orderedList dd span.w90{width:90%;} #orderedList dd span.w91{width:91%;} #orderedList dd span.w92{width:92%;}
ダブルクォーテーションが入れ子になってます。 echo "<a href=\"C.php\"> 後略 "; CSSが反映されないのは パス指定、ファイルのアップロード忘れ、ファイル名・セレクタのclass属性などの間違い、、、 PHP、HTML、CSSのすべてでケアレスミス（他にもあるかどうかわかりませんが）を直していけば、ちゃんと期待通り動くようになるんじゃないでしょうか。
HTML5と言ってもいろいろありますよ そもそもdoctype宣言をhtml5に変えればhtml5なのかという問題もありますし html5のvideoやaudioタグをhtml4宣言して使うこともできます html5として扱われる１要素のcanvasなんかも実際はhtml4からあったものです ではhtml5とはなんなのかというと、いろんな場所で取り入れられていた技術を今の時代に合わせて導入し標準化しようという流れの名前です 標準化してHTMLを整理すると同時に、HTMLやいろいろな技術で「プラグイン無しに」WEBアプリのためのベースを作ろうというものです プラグインの様々な環境での長点欠点はあえて書きませんが、そもそもプラグインがあるじゃないかと言う時点でかなり食い違っているのです HTML＝単なるWEBサイトのためのものという認識のままだと不要なものに感じて当然だと思います 「サイトとアプリが近づいている」という認識が必要です 「サイトは様々なプラットフォームで動くアプリ」なのです 見方を変えたらHTML5実行環境はOSのプラグインなようなものです Window8ではHTML5のアプリが動くのは有名ですが、HTMLはアプリケーションの基盤なのです また、HTML5は一応仕様としで勧告されますが、あまりそれに意味はなく、 もうすでに多くの機能が個別に仕様が策定されている状況で、どんどん新しく増えてもいます ですからHTML5がHTMLのバージョン5という認識なら誤りです HTML5とは仕様ではなく様々な技術と勢いを含んだweb2.0のような概念的なものなのです doctypeを変えるだけでいいのなら全てのブラウザが対応していると言えますし、実質的にはW3Cのこれから勧告される取り敢えずの仕様を完璧に実装してあってもHTML5にきちんと対応しているとは言えないのです つまり、「HTML4からHTML5に移行する」のようにHTML5を１つのものとして見ることはできません html5Cacheを使う、インラインSVGを使う、MathMLを使う canvasを使う、それは2dなのかwebglなのか 音声を扱う、audioタグを使うのか各種Audio系APIを使うのか など、これからは機能毎に見て行かなければなりません HTML5全体がどうか、と考えなくても徐々にこれらの技術の１つ１つが徐々に取り入れられゆっくり広まっていきます 広まらなかった方向性はHTML5の流れの中で淘汰されていくので大丈夫です 逆に必要とされる技術が日々検討され実装されていく、それがHTML5なのです プラグインのように最近のブラウザは自動でバージョンアップして それと同時に世界中のHTML5という概念もバージョンアップします それに取り残されるような環境とHTML5を考えるのは確かに難しいですが ５年後も１０年後もIE6のままではありませんし徐々に動いていきます その間JavaScriptのFWでそれなりにカバーはできます そのなかでvideo/audioタグはカバーが難しく、まだ発展途中で今までのプラグインの主要な使い方である部分ともろに被っているので確かに有意性に疑問を持つのは確かだと思います 単体での使用の優位点をあげるとすれば軽量なことでしょう Flashプレイヤーのように「プレイヤーアプリ」としてまとめなくてもurl１つ渡すだけで簡単で標準的なプレイヤーを表示できます また例えばSocket系APIと連携してリアルタイムストリーミングや、WebRTC系APIと連携してビデオチャットなど、 videoタグは単なるビデオプレイヤーではなく「映像再生機能」として実装されています 「ビデオプレイヤー」のようなアプリではなく「映像再生領域」のような１機能です videoタグに限らずHTML5の各要素は、それが必要なパーツとなるときに使われるものであって 特定のプラグインの完成された「アプリ」があるから必要性がないと考えるのは筋違いなのです まとめると、今あるサイトをHTML4からHTML5に変えるという考え方ではなく、必要なHTML5の技術をいるだけ使っていくという考え方です 何かを「サイトの中の１つのコンテンツ」として表示したいのならプラグインでもいいでしょう しかしJavaScriptを使ってページが１つのアプリケーション化していったとき親和性の低いプラグインは役に立たなくなってきます これからそういうWebアプリが必要とされてきますし、間違いなくHTML5は普及します また性能が実際JAVAアプレットやFlashに劣るかは、例えば動画再生ではGPU支援との相性などいろいろあって将来的に考えても実際は一概には言えないものです
＞色々考えてみたんですが、コンテンツ数が多いサイトには、ランディング型のデザインには向いてないような気がしてきました。 　いえ、これは逆なのですよ。flashや企業イメージをアピールするトップページを、ユーザーの最初に着地する--到着して欲しいページとしたために、せっかく訪問してきたユーザーが逃げてしまう反省から、トップページ以外をランディングページと考えたり、すべてのページをランディングページと考えるデザインが行われるようになったのです。実際に検索エンジンで何かの情報を探して、直接その情報ないしその情報にもっともたどり着きやすいページにきてもらうのが最善です。これはあなたがユーザーの立場になれば容易に想像できると思います。 　そのために、もっとも重要なことは、プレゼンテーションよりも、適切にマークアップされていることです。検索エンジンが、「そのページこそ、その情報の宝庫」だと理解してくれなければ始まりませんからね。 ★ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ ( http://support.google.com/webmasters/bin/answer. … ) 　そのうえで、ユーザーの求めているものがそのページになくても、検索エンジンに戻ることなく、そのサイト内で一クリックないし、数クリックで目的のページに誘導することがランディングページの使命です。 　ですから、大規模なサイトこそ、すべてのページがランディングページと言う考え方が重要になるのです。
#1 naokitaです（お礼拝見済み） うーん、意味が通じなかったかな？ 間違ってたり、余計な事しているけど・・・ ここに回答してもURLが消えるので、 参照されたサイト http://blog-imgs-32-origin.fc2.com/m/y/s/myspace … これを表示して、右クリックから「ソースを表示」 それが回答であるから、自分流に確認しながら編集すればよいです。
広義のWebデザイン、とくにHTMLコーディングの話です。 質問文の狭義のデザイン（カラーリングやレイアウト）ではありません。 >No.7お礼 たとえば、対応ブラウザをIE8以上で料金は何円、と見積もりを出したとして。 依頼主がIE6以上を要求している場合、私では依頼に応えられない、という事になります。 http://okwave.jp/qa/q7816539.html こんな風に、特定のブラウザでだけ、表示が他のブラウザと大きく異なる事があります。 そういうのも含めて検証する、さしずめ手数料をいただいています。 たとえばこんなやりとりがありました。 私「Firefox等の最新版などに対応します。」 依頼主「それで全部ですか？」 私「有名な物は全部ですが、無名も含めれば違います」 依頼主「全部にお願いします」 私「全部とはどのくらいですか？」 依頼主「私にはよくわかりません。あなたが知っているブラウザ全部でお願いします」 仲介業者（制作会社）からこういう内容で依頼されたときは、あんた私に依頼する気ないだろ、とは思いましたけどね。 --------------- HTMLの品質の話の例。 それぞれのHTMLがあるとします。 CSSにより、表示は同じです。 どちらのHTMLの品質が高いでしょうか。 (1) <ul> <li><a><img src="diary.png" alt="日記"></a></li> <li><a><img src="aboutus.png" alt="自己紹介"></a></li> </ul> <ul> <li><a>日記</a></li> <li><a>自己紹介</a></li> </ul> (2) <header><h1>タイトル</h1></header> <nav>ナビゲーション</nav> <section>コンテンツ</section> <footer>著作権表記等</footer> <header><h1>タイトル</h1></header> <section>コンテンツ</section> <nav>ナビゲーション</nav> <footer>著作権表記等</footer> (3) <header> <h1>社名</h1> </header> <heaer> <figure><img src="logo.png"></figure> <h1>社名</h1> </header> <heaer> <h1>社名</h1> <figure><img src="logo.png"></figure> </header> (3)はロゴマークの表示方法が、<img>かCSSのbackground-imageかの違いです。 印刷すると<img>は印刷されますが、CSSのほうは印刷されません。（プリンタ設定で背景を消すようにしている場合。） まあ、ロゴマーク（商標）の扱いをどう考えているか（消えても良いのかどうか、消すべきかどうか）はその人次第だとは思いますが。 ------------- (2)の具体例です。 デザインに合わせてHTMLを作った方が簡単にできる事もあります。 対応ブラウザを増やすならなおさらです。 たとえば、 <nav>ナビ</nav> <section>コンテンツ</section> この２つの要素を横並び（ウインドウの左端）にする場合、 「ナビ　コンテンツ」 の順番で並べたいならnav{float:left}で完成します。 「コンテンツ　ナビ」 という並びにするなら 単にnav{float:right}としただけでは「ナビ」がウインドウの右端に行ってしまうためNGです。 ならば、 <section>コンテンツ</section> <nav>ナビ</nav> と書き直して、section{float:left}とした方が簡単に完成します。 こういう「デザインのためのHTMLを作らなない」というものも、それなりの技術が必要だと、私は思っています。 もっとも、CSSのコピーペーストでできるんですけどね。 ちなみにデザインのためのHTMLという考え方、手法は、つまりはテーブルレイアウトです。 <table> <tr><td>ナビ</td><td>コンテンツ</td></tr> </table> <table> <tr><td>コンテンツ</td><td>ナビ</td></tr> </table> ナビゲーションを右にするか、左にするかというのは、よくあるパターンですが、 ページの上にするか下にするか、というのもままあります。
1.塗りつぶし 2.パターン 3.好きなの（今回はストライプと水玉） を選んで 希望の箇所を塗りつぶすだけです。 組み合わせるのも可。 最初から入っている模様で好みのものがなければ、追加できます。 自分で作るもよし、公開されているものを見つけるもよし、購入もよしです。 photoshop パターンで検索すれば、汎用性の高いものはすぐ見つかります。 上手くあわせるのはフィルタではなく、描画モードを使うことが多いです。 あとは、グラデーションの組み合わせとか…… 詳しくは、検索してください。
>イメージとしては全面のグレーの幅を両サイド共に２センチほどにしたいのです。 両サイドを2センチくらいにしたいのであれば、 margin-left: 2センチくらい; margin-right: 2センチくらい; を指定すれば良いです。 ただし、参考サイトのページは「両サイドを何センチ（何ピクセル）で指定」しているのではなく、 「コンテンツの幅を何ピクセルで指定して、残り（両サイド）は全部グレーで表示」 という指定の仕方です。 ウインドウ幅を広げたり狭めたりしてみてください。 コンテンツの幅が固定のままで、両幅（グレーの部分）が広がったり狭まったりしますので、指定の仕方が違う事（グレーの部分が何ピクセル/何センチで固定されていない）を確認できると思います。 >また、全面のグレーの幅を調整することで、それぞれの幅の微調整が必要な場合についても、よろしくお願いします。 すみません、意味が分かりません。 数値を変えれば調整できます。
#header h2 ,#header .title { filter: progid:DXImageTransform.Microsoft.Shadow(color=#0000FF,direction=45); } IEだけの話なら簡単に各種filterで良いかな。 残念ながら、 text-shadowは、CSS3だから、IE8以前は全く対応していなくて、 IE9から対応なんだけど、まだまだ不完全であって、 text-shadowは未対応なのです・・・ １、IEの独自フィルターってのが各種あって「IE filter」で検索 ２、「IE CSS3ライブラリ」で検索 ３、画像化する。 独自仕様＆次期早々なので、あまり使わないですね。 あと、数年経てば皆が利用するようになるかな。
回答がつきませんね。たぶん質問が理解できないのだと思います。 （アメブロはHTMLファイルの改変は出来ない）と書かれていながら、「追加のボックスを入れたい」が矛盾しているからでしょう。 　それがボックスであるか、行内要素であるかはスタイルシートで(非推奨ですが)変更はできますが、そもそも要素をHTMLに追加・変更ができない限り、スタイルシートでは手が出せないのです。 　そこが矛盾しているので・・・・
＞<div id="header"></div>のみなんですよね。 　それだけでは無理です。 　クリッカブルマップにしようが、CSSでデザインしようが、リンクは必須です。 画像の上に【リンクを】配置する方法は、前提としてリンクが必要です。 　　　　　　　^^^^^^^^^^ それがたとえ、 <div id="header"> 　<ol> 　　<li><a href=""></a></li> であろうが、 <div id="header"> 　<p><img src="" width="" height="" alt=""></p> 　<ol> 　　<li><a href=""></a></li> であろうが、絶対に必要なのはリンクです。 先刻の回答では、クリックしたときにボタンの背景をずらすことを想定して記述しましたが、それがなければ div.header div.nav h2{dispaly:none;} div.header div.nav ol,div.header div.nav ol li{dispaly:block;list-style-type:none;margin:0;padding:0;} div.header div.nav ol{ width:980px;height:250px; margin: 0 auto ; background:gray url("./images/00.png"); position:relative; } div.header div.nav ol li a{ display:block; position:absolute; width:160px;height:60px; border:dotted 1px red; } div.header div.nav ol li a[href="/"]{ top:10px;left:40px; } div.header div.nav ol li a[href="/books"]{ top:30px;left:200px; } div.header div.nav ol li a[href="/profile"]{ top:80px;left:340px; } div.header div.nav ol li a[href="/contact"]{ top:120px;left:500px; width:200px;height:80px; } というシンプルなものになります。 　折角ソースを示ししたのですから、単にコピペではなく、その意味をしっかり理解してください。 　<div id="header">に画像が指定されていても、まったく同様な方法でできるはずです。リンクさえあれば・・。 　頑張ってください。
こんにちは 「デザイナ」というのはビジュアルを作る人で、それを持って顧客に「こんなサイトになります」というイメージを提示し、仕事を決定する人です。 「コーダー」というのは、デザイナが作ったデザインを、HTMLやCSSで再現する人のことです。 コーディング中に、デザイナが作ったデザインを使って、画像部品を作ることもあります。 「バナー」とは、写真や画像にロゴを組み合わせた、サイトのイメージを決定するヘッダ画像をいいます（トップバナーとか言う）。 「オーナメント」とは「あしらい」とも呼ばれ、コラムや本文の見出し、アイコン、ボタンなど色々な表示要素のことです。これが上手いか下手かで、サイトの雰囲気ががらっと変わります。 今現在は、「デザイナ」としてのビジュアル構築能力のお話をしています。 「コーディングやマークアップ」は関係ありません。 ただ、駆け出しのデザイナがコーディングを担当することはよくある話なので、そちらの技量も最低限はほしいところです。
＞このサイトを例えに質問します。 このサイトろいわれても、複数サイトでこの質問が公開されているので・・・ OKwaveのトップだと判断しますが、 #ok_shoulder { background: url(http://gazo.okwave.jp/okwave/images/common/sprit …) no-repeat 0 -115px; height: 40px; margin: 0 0 5px; padding: 0 5px 0 0; position: relative; width: 925px; } 全体幅は、この925pxに合わせているだけ。 CSSの設定と背景画像をピッタリ合わせる。 ただし、背景画像は位置的に見えるように縦（Y軸）-115pxズラします。 調整ではなく、そのように設計しているだけであって、 環境によって柔軟に変化するわけではないですから、その都度調整はしないです。 子リストは、幅の設定は無いです。 つまり、 文字数の幅がそのまま反映される。 自分で作って色々な文字数の単語で試すとわかると思いますが。
Web Pages Designのカテゴリーで質問されているということは、Web関連ですか？ だとしたら、Perlなどのテキスト処理が特異なプログラムをインストールされて、それで処理されることをお勧めします。 　Perlが扱えれば、Webでも役に立つでしょう。 　また、CygwinなどのUNIXのツールが使えるものを入れて、様々なツールを使う手もあります。 　あなたが、バッチ処理に経験があれば、まよわずSED(ストリームエディタ)をお勧めするところですが、ちょっと敷居が高いでしょう。 Perlでしたら open IN,./origianl.txt; open LIST,./list.txt; @lines = (<LIST>); close LIST; while(<lines>{ ($A,$B)~=/^(.+)\s(.+)$/; open OUT,$A\-$B.txt; while(<IN>){ s/(codea\=)(\w+)(\/\$\$)/$1$A$2/s; s/(codeb\=)(\d+)(\*)(\d+)/$B$2$B/s; print OUT; close OUT; } close IN; とか・・・・。
水平方向の隙間が消えるということは垂直方向に隙間があるという意味でしょうか？ よくあるパターンで、画像を文章のどの部分にあわせるかで失敗しているのでは？と推察します。 アメリカ生まれなhtmlなので、和文のように文字の下が決まっていません。ＡＢＣの下にあわせるbacelineパターンとygjのようにそれよりも下のピョコンとした下に合わせるbottomパターンがあります。 li img{ vertical-align:bottom; } を追加してみてください。 解決できないようでしたら、問題が再現できる最小限のソースの提示をいただけますか？
そもそもHTMLの段階で適正ではありません。 JS,CSSを非表示にしてHTMLレベルで確認しましょう。 それで、 文章や言葉が読めるようにしてから、CSSで装飾します。 残念ですが、 小学生が足し算を覚える前に掛け算を使っているような感じです・・・ 例えば、ガラケー携帯で読んだり、 全般部分をHTMLで読むと、 ----------------- 　駿州庵原郡樽の上村、武田甚右エ門の子に、兄に左次右エ門、弟に権兵衛といふ者あり、かの権兵衛２５の年、(今より)３ 辛 未 狩り けんぞくかえ しし ０年以前、 ------------------ このようになり、全く文章になっていません・・・ つまり、 見え方や改行が云々よりも、まずはHTMLで多くの環境で読めるよう まずは、基本のHTMLを勉強して下さい。 文章は、 <div>ではなく段落の意味で、<p>で文章単位の段落を形成します（囲います）。 その<p>段落内では、 あくまで“基本的”にはですが、文章の途中で改行しません。
<img> <span style="background: url(); height: 38px; width: 175px; display: block; position: relative; bottom: 42px; left: 0; margin-bottom: -42px; overflow: hidden; color: white;">文字<br>文字文字</span> CSSにて、 背景画像「background: url();」に透過.pngを利用して、 元画像「<img>」の上に、スモークと白文字の位置を上げているだけ
再度すみません。。。 1ではヤプログは改造できないと書きましたが、どうやらできるようですね。 ブログ本体をサイト本体と同じデザインにして、日記リンクを普通にブログにすれば簡単です。 ただ、ブログの改造が大変かもですが。。。
　簡単なサンプルを書いてみました。周囲(本棚の上と左右)の画像は手抜きしてありますが、示されたサンプルのようにも枠用の画像を作れば可能です。またフォームもHTMLから省いています。これも普通にフォームを記述して重ねればよいでしょう。 　本来は、それぞれの画像にポインターを合わせれば、大きな画像や説明が現れればよいのですが、それは簡単なので省いています。 [HTML5+CSS3]で書いています。 ★タブは＿に置換してあります。 ﻿<!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> ＿<!--[if IE]> ＿＿<script src="http://html5shiv.googlecode.com/svn/trunk/html5. … ＿＿<script src="http://css3-mediaqueries-js.googlecode.com/svn/t … ＿<![endif]-->＿<link rel="stylesheet" href="css/style.css"> <style media="screen"> <!-- nav ul,nav ul li{list-style:none;margin:0;padding:0;} nav ul{ display:block;width:90%; background:rgb(180,180,40) url(./images/backShelf.jpg);padding:20px;line-height:140px; border-image: url(./images/backShelfframe.jpg) 10; border-width:10px 10px 0 10px;border-style:solid; } nav ul li{display:inline-block;width:100px;position:relative;margin:0 50px; 15 round;} nav ul li img{display:block;width:100%;height:auto;box-shadow: 10px 10px 10px rgba(0,0,0,0.4);} --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿</header> ＿<section> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#"><img src="./images/hikari.jpg" width="180" height="254" alt=""></a></li> ＿＿＿＿<li><a href="#"><img src="./images/kurashis.jpg" width="160" height="217" alt=""></a></li> ＿＿＿＿<li><a href="#"><img src="./images/maters.jpg" width="180" height="245" alt=""></a></li> ＿＿＿＿<li><a href="#"><img src="./images/omosiro.jpg" width="210" height="291" alt=""></a></li> ＿＿＿＿<li><a href="#"><img src="./images/rika.jpg" width="182" height="245" alt=""></a></li> ＿＿＿＿<li><a href="#"><img src="./images/seibun.jpg" width="180" height="251" alt=""></a></li> ＿＿＿＿<li><a href="#"><img src="./images/sekken.jpg" width="180" height="249" alt=""></a></li> ＿＿＿＿<li><a href="#"><img src="./images/tubo.gif" width="178" height="245" alt=""></a></li> ＿＿＿＿<li><a href="#"><img src="./images/rika.jpg" width="150" height="214" alt=""></a></li> ＿＿＿</ul> ＿＿</nav> ＿＿<aside> ＿＿＿<h3>Something aside</h3> ＿＿</aside> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿</p> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
＞以前、pxで調整できると聞いたことがあるのですが 　これは何かの誤解でしょう。 　HTMLは、Hyper Text Markup Languageの略ですが、このHyperという言葉は、他の文書または、他の文書の特定の【要素】にリンクできる機能を意味しています。 　そして、Markupの意味ですが、それは文書をその文書を構成する要素(Element)に分解して、それぞれがその文書にとってどのような意味を持つ要素であるかをタグによってマークアップされているのです。 　このふたつをきちんと理解してください。 　その文書にリンクするときは、<a href="[URL]">その文書</a>でリンクできますし、その文書の特定の要素にリンクするときは、ページ内のアンカー(Anchor--これが<a>の語源)を目標にします。そのアンカーを示すのがnameです。 <h2><a name="section1">セクション１</a></h2> 　hとはHeading(見出し)の意味で、階層2の見出しが<h2></h2> 　これは、 <p><a href="[URL]#section1">セクション1</a>へ</p> 　とリンクを書くことでリンクできます。<p>はParagraph--段落 　同じページ内の場合は、<a href="#section1">セクション1</a>へ・・・と書きます。 　位置ですが、それは<h2><a name="section1">セクション１</a></h2>がどの位置に表示されているかですから、ウィンドウ幅や文字サイズなどで変化します。変化してもその要素にリンクできるということです。 ★12.1.1 リンク先リソースの訪問 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★HTML4.01までは、正確にはリンク先は<a name=""></a>でマークアップします。上記の例の場合<h2 id="section1">セクション１</h2>とも書くことが出来、リンクもできます。idはどの要素にも書くことが出来ますから便利ですし、HTML1.1やHTML5は、idを使うことになりますから、idで統一しても良いでしょう。・・とっても古いブラウザはIDに対応できないものもありますが、すでに考慮しなくて良いでしょう。 　厳密な文法的には<a name=""></a>が正しいのですが、idで指定するほうが良いでしょう。
こんにちは～～ １．Web ブラウザのキャッシュを消去したら、どうですか？ ２．直接にこのような　http://www.xxx.com/favicon.ico　　webで一回実行してください。 ３．この以下のコードをしてみよう～ ---><head> <link href="icoイメージのアドレス" type="image/x-icon" rel=icon> <link href="icoイメージのアドレス" type="image/x-icon" rel="shortcut icon"> </head> ｐｓ：　私も先日このような問題が発生しました。　 faviconの画像を入れ替えて、　すぐ更新じゃなくて、一日か二日の後、更新しました。 だから、安心してくださいね。
＞なかなか、ネットで検索してもメールフォームの作り方を記載しているサイトがないです・・・ 　確かにないでしょう。 　私は、最初はCGIサイトで配布されているものを利用していて、少しずつ手を加えていましたが、最終的にはCGIのマニュアル本やPerlの書籍で身につけました。 　プログラム未経験だと、最初は何をしているかさえ、わからないものです。こればっかりは王道はありません。 　最初にしっかりした、フローチャートを書いて作成していくのが良いのですが・・ 　とりあえず歴史のあるサイトですが CGI RESCUE - CGIフリーソフト ( http://www.rescue.ne.jp/ ) の CGI RESCUE - CGIフリーソフト ( http://www.rescue.ne.jp/#PlagClose7 ) を色々と試してください。 　このサイトには初心者用の<dd></dd>もあります。私が十数年前にこの世界に入ったときにお世話になりました。
　数十ページと言うと、いわゆる小規模サイトですが、サイトの規模には関係なく、サイトの目的は何でしょう。ユーザビリティやSEOはその手段であって目的ではありません。 ■企業系通販系サイトなどの何らかの成約を狙うサイト 　が最終目的だとして、その取扱商品は特殊性のあるもの ■素人ではなかなかわからない専門性があるコンテンツ 　ここでポイントは、企業名が一般的に良く知られた--その商品ならこのメーカー---といわれるぐらい著名な場合は、企業名で検索されるでしょうが、そうでない場合ユーザーは個別の商品名や型式などで検索して、直接コンテンツを訪問することが多いでしょう。 　言い換えれば入り口はふたつあるわけです。 1) 個別の商品ページ 2) サイトのトップページ 　基本的には前者が多いでしょう。また、私の経験から言うと特定の商品のマニュアルとかがポイントになる場合があります。「コンクリート 穴あけ」とかで検索される場合などがあるということ。 　それには、SEOが重要になります。SEO ( http://ja.wikipedia.org/wiki/%E6%A4%9C%E7%B4%A2% … )をよく誤解されるのですが--wikiも誤解している???---、SEOとは検索エンジンがそのページの内容を正確に把握してインデックス化できるようにすることです。その結果、特定のキーワードで検索したときにそのページが検索結果の上位に出てきますが、それは結果です。階層構造なんてほとんど意味がありませんね。これはあなたが検索エンジンで何かの商品を探した経験があれば理解できると思います。 　その上で、あなたが上げられたプランを考えてみると ●オーソドックスで王道まっしぐらの多種多様で多機能なメニュー・コンテンツ配置 ■可能な限り選択できる数を少なくした誘導型メニュー・コンテンツ配置 　現在は、プルダウンメニューが一般的ですので各ページにシンプルな区分別メニューとそれぞれにマウスオーバーして細目が出てくるようにすれば、これらは解決するでしょう。どのページに流れ着いても、そのページから目的のコンテンツが最短で見つかるようにすれば良いです。 ●業種特徴があるため同業の競合とある程度類似するデザイン ■業種特徴よりも競合との差別化を第一義にした印象的デザイン 　ユーザビリティを考えると、全体の配置などは一般的なものであるべきです。 　差別化のために凝るのは、一部です。 ●ユーザー自身が目的のコンテンツを探して最短クリックでたどり着けるサイト構成 ■クリック数が増えても迷わないで確実に目的のコンテンツにたどり着けるサイト構成。 　最初の説明とかぶりますね。 【構成イメージ】 は、製作・管理・メンテナンスの面からきちんと階層立てて構築するほうが楽です。 　ナビゲーションがもっとも頭を悩ます部分ですが、私はすべてのページにSSIなりPHPを利用して <div class="nav"><!-- 検索エンジンがナビゲーションだとわかるclass名をつける --> 　　<h2>サイトマップ</h2> 　　<ol> 　　　<li><a href="/">Top</a></li> 　　　<li><a href="/Product">Product</a> 　　　　<ol> 　　　　　<li><a href="/Product/hardware">金物</a> 　　　　　　<ol> 　　　　　　　<li><a href="/Product/hardware/Exterior">Exterior</a></li> 　　　　　　　<li><a href="/Product/hardware/Interior">Interior</a> 　　　　　　　　<ol> 　　　　　　　　　<li><a href="/Product/hardware/Interior/Kitchen">Kitchen</a></li> 　　　　　　　　　<li><a href="/Product/hardware/Interior/Bathroom">Bathroom</a></li> 　　　　　　　　</ol> 　　　　　　　</li> 　　　　　　</ol> 　　　　　</li> 　　　　　<li><a href="/Product/Software">ソフト</a></li> 　　　　　<li><a href="/Service">サービス</a></li> 　　　　　<li><a href="/Profile">Profile</a></li> 　　　　</ol> 　　　</li> 　　</ol> </div> のようなものを前頁に記述させて、それを各ページのデザインに合わせてプルダウンで表示させるなどしています。
No.4です。 　誤解をひとつだけ解いておきます。 　レスポンシブデザインにすると労力が増える--なんてことはありません。基本はリキッドですから、端末ごとにスタイルシートを記述する手間がそもそもなくなります。それにディスプレイの状況に合わせてスタイルシートを切り替える記述を加えるだけです。 ・HTMLが極めてシンプルになります。 ・それによってスタイルシートもシンプルにわかりやすくなります。 　下記も以前書いたサンプルですが 円形の配置にするコーディングについて - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7649067.html ) 　では、リキッドですからスマホ用にスタイルシートを用意する必要すらないでしょう。それでいて印刷プレビューで見ると、まったく異なるデザインになるはずです。--このユーザーエージェントによる切り替えの拡張がレスポンスデザインなのです。 　このサンプルをテンプレートに、内容を書き換えるのは誰でもできるでしょう。
＞styleにある#medicineSpecialtyはどのような意味ですか。 　medicine Specialtyは診療科のような意味で、勝手につけました。 <div class="section" id="medicineSpecialty"> 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　ひとつのセクションであり--他にもある可能性があるのでclass---、診療科なのでそれらしき、後で自分に解るようにIDをつけておいた。 　言い換えれば<div class="section" id="medicineSpecialty">～</div>に固有名を付けた。 #medicineSpecialty h2はセレクタで、半角スペースでつなげてあるので子孫セレクタ、以下同様 :hover擬似クラス、そのうちの動的な擬似クラス :afterは擬似要素 　詳しくは、5. セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )
可能です。 「photoshop ico プラグイン」で検索すると設置方法がすぐに見つかるでしょう。 .icoにて保存も出来るようになりますが、 他のICO制作ソフトを利用する方も多いです。
Dreamweaverでいうと、「スニペット」かな？ http://m-school.biz/dev/css-coding/008-css-snipp … htmlやcssに関しては普通に使えますが、JavaScriptやサーバサイドコードに関しては全然ダメです。 単なるコピペソースとしてなら使えるかな？ まあ何せWYSIWYGエディタだし、JavaScriptやphpを使う人が使い込むソフトでもないので、EclipseやAptana、Visual Studuioのスニペットに比べたらお粗末きわまりないです。
どの程度の画像容量が最適かは、そのページの目的や内容によって大きく異なりますので、一般的な基準はありません。 　アルバムのようなページで画像の量を減らすことはありませんし、テキストデータが主体の記事で、余計な画像をちりばめるのは感心しません。 　ページの描画に要する時間は ・画像の数 ・画像のサイズ ・画像サイズやtableなどでレイアウトに完成に要する時間 　などでおおよその目安は立ちます。ブラウザは逐次表示が原則ですから、画像やtableのサイズがHTMLを読み込んだ時点で決定されるなら、全体のレイアウトに要する時間は少なくなるでしょう。 　画像は、逐次読み込んでいきますから、そのたびにサーバーとの接続時間ロスが発生します。スプライトのように大きな画像を一枚だけ読ませて、その一部をそれぞれの場所で使用する方法は接続時間のロスを低減できるでしょう。 　画像一つ一つのサイズは、画像のフォーマット、描画サイズなどによって異なるので回答はありません。
自動にはさすがにならないが、元の画像のサイズが一定であるなら そのBOXに入るファイル名だけ書き換えれば収まりはつくんじゃないかな。 例えば <div id="fhoto"> <img src="入れたい写真.jpg" width="200" height="150"（ココの比率は固定） /></a> </div> 例えば640X480の写真を　Web上の表示で200X150にしたければ あとはこのhtmlをコピーして使うだけ。
原因は分かりませんが、下記サイトが参考になるかも？ http://codezine.jp/article/detail/6574?p=4 参考URL：http://codezine.jp/article/detail/6574?p=4
その「２バイト系ツール」に国際化の工夫があると善いですね。 eComstation(OS/2)のことを知ってると、出来上がってる２バイト対応GUIだけでなく、 「コマンドからファイルアクセス」すらバージョンアップで全く製品レベルに 進まないので、いつも購入してるユーザーが英語版落として人柱。 MINDのほうはCの書式というブログが有りますね。 http://wise9.jp/archives/1724 他にも、COBOL（事務系元祖のメジャー言語で元々英文ぽく書くコンパイラ） http://www.cobol.gr.jp/ を漢字書き日本語命令文にしたCORALがありましたけど、 日立製作所からキヤノンに移管？した上で、2010年に保守終了となりました。 http://www.canon-soft.co.jp/product/cano-aid/ コーディングというかエディタが使える16ビットPCが出た頃の言語ですが、 （うろ覚えだと、同時展示でカラーPPCのPIXELが売り出した辺りかな） そのパソコン自体＝オープンソース向けには全く縁が有りません。 １バイト文字（タイプタイラーの活字を替えれば打てる）の場合は、 コードページ宣言をして、後は「文字列検出一括変換」、デバッグに行けますから、 ロシア語とか、需要の厚い言語バージョンが一気に供給されるんです。 ２バイト活字の命令と１バイトのラベル、数値、外部コマンドが混ざらざるを得なく、 結局「いちいち文字変換して書く」がきつくなってしまいます。 Cとかスクリプト「内部で変換」というのは、ちょっときついと思います。 テーブル（対応一覧表のマトリクス）が置いてあって貼り換えれば済むわけで無く、 かなり内部まで２バイト表記が入るのは、そのツールを作る人には大変なので （逐一２バイトが来るたびエスケープして、また解釈した上で文字列組んで） RFCに書くのはいいけど、制定してもらえるほど実績が積めないのは心配。
　白舟書体の、【忍者】ではないでしょうか。 　参考 URL の【Web Type Viewer】で、表示見本が見られますよ。 　◆白舟書体　伝統的書体から遊び心溢れるデザイン筆文字のフォントまで 　　http://hakusyu.com/ 　　http://hakusyu.com/sample/ 参考URL：http://www.amanjako.jp/~pandora/imgform/imgform. …
webプログラミングならjavascriptとかphpあたりですかね。 まあ、流行り廃りがあるのでなんとも言えませんが。 どうせならアルゴリズムの勉強もゴールに近いものを使ったほうがいいでしょう。 んで、その言語で適当な問題をやってみればいいんです。 ソートとかはよいかもしれませんね。 もちろん、関数で一発なのですが、車輪の再発明でもアルゴリズムの勉強にはよいでしょう。 ただ、プログラマー、WEB系ならどこでも…ってのはどうかなと。 今、そのレベルから初めて物になるかで言うと、少なくとも日本では難しそう。 国外の状況は分かりませんが、タイプだけじゃなくてコミュニケーションも必要になります。 とりあえず、やってみたらいいんじゃないですか。 この程度の情報があって、独学出来ないのであれば、時代の流れに追いつけない可能性も高いと思います。
潰れているというより、切れているだけ どこかで別途指定されて、このh2の高さが確保されていないからでしょう・・・ h2{ line-height:～～; height:～～; } などのように、font-size:154%;以上になるように～～のCSSを追加しましょう。 line-height:～～;だけでいけると思いますが。
CSSで背景色のwidthが指定できません。 - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7791851.html ) のほうに回答しました。
＞じゃあまずは、HTML4.01strictをしっかりと身に付けておいて、それを基本にして他の対応（必要に応じて）をするという姿勢でよいですね。 　それで良いとおもいます。 　HTMLの利点は、多少の文法ミスはブラウザが処理してくれることです。(HTML5では、そのようなときの処理の方法も統一されます。)もちろんそれに甘えてはいけません。 　XHTML--というよりXMLの知識は、HTMLを作成する上でも必要になるでしょう。 　すくなくともWebクリェーターと言う世界では、XHTML(XML)でなければならない理由はないでしょう。イントラネットやアプリケーション開発となるとXHTMLは便利です。 　Extensible (HT)MLですから <body> 　<div> 　　< mydoc:価格表> 　　　<mydoc:製品名>掃除機</mydoc:製品名> とかが可能と言うことです。 　HTMLの一番の利点は、習得が早いということです。所詮--HTMLもCSSも手段であって目的じゃないのですから-- 　繰り返しになりますが、必ずstrictに絞って学ぶことです。そのときに、HTML4の反省の元に作られているHTML5---（再掲)HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )を利用しないてはありません。 ★試験の世界は、とても古い世界です。--数年から１０年は古いと思ってください。 　HTML4.01の勧告が1999年12月、XHTML1.0の勧告が2000年1月--もう10年以上前の規格です。
　adbeは、jpegで保存するときに特殊なICCプロファイルを使用するため、他のブラウザでは色があせてしまいます。 　イラストレーターで画像を保存するときには、ウェブ標準のsRGB ( http://www.w3.org/Graphics/Color/sRGB )--で保存してカラープロファイルを埋め込まないようにしてください。
>No.2お礼 見出しの部分に<p>を使っては行けない、箇条書きであれば<ul>を使わなければならない、 というような文法については理解されてますでしょうか。 また、太字で表示したいのであれば、<strong>や<b>を使っても太字になりますが、<span style="font-weight:bold">言葉</span>でも太字になります。 同様に、画像を表示する方法は<img>でも表示できますし、<span style="background-image:url();">でも表示できます。 ですが文書は <p><img>この部分は段落で、１つの画像が含まれます。</p> <p style="background-image:url()">この部分は段落で、画像は含まれませんが、画像が表示されています。</p> このような違いが生じいます。 HTMLの文法というのは、太字になれば何でも良い、画像が表示されれば何でも良い、というわけではなく、 何のために太字にするのか、何のために画像を表示するのかということを考えて、「何のために」という目的を指示するためのタグを記述しなければなりません。 「見出しにするために」<h1>タグを使用する。（スタイルシートでフォントサイズを大きくする） 「強調するために」<strong>タグを使用する。（スタイルシートで太字にする） 「強調ではないが、文書に関するキーワードがあることを示すために」<b>タグを使用する。（スタイルシートで太字にする） 「文書に関連する画像がある事を示すために」<img>タグを使用する。 「文書に関連しない画像を表示するために」スタイルシートのbackground-imageやcontentを使用する。 文法チェッカーが判断できるのは、<p>と<span>の順番が逆になっていないか、<ul>の直下は<li>しか含まれていないか、などだけであり、 「この言葉は箇条書きか、段落か、見出しか」などの判断は出来ません。 そのため、箇条書きの場所に<p>を使っていてもエラーとして表示されませんし、<img>を使って表示しなければならない画像を<p>のスタイルシートで表示していてもエラーにはなりません。 改めて質問文に答えると、 <img>で表示すべき画像は<img>で表示し、JavaScriptでファイル名を変更する。 CSS・background-imageで表示すべき画像はCSSで表示し、media queriesなどを使用してファイル名を変更する。 というのが、文法的に正しい方法だと思います。（作りやすいかどうかとか、制作者の技術的にどうとかは考慮していません。） 文法よりも作りやすさを優先するのであれば、自分が作りやすいと思う方法で作れば良いと思います。 どの方法が作りやすいと感じるかは個人差がありますので、どれが良いというのは何とも言えません。
背景画像は、bodyにたった一つの画像を設置して、h1,mnue,画像、本文もすべてその上に乗っています。 　それぞれの画像を切り裂いて、menueはmenueの背景に、本文は本文の背景にそれぞれ指定すれば良いでしょう。 たとえば、background-image: url("images/bgtop.gif");は消してしまって、<div id="header">にheader用の背景を指定するということです。 ★ただ、高さが6000pxとは、あまりにも大きすぎます。できればスクロールせずに読めるように分割すべきです。また、スマホなどの小さなディスプレイでは横スクロールも必要になりりますから、現在のネット状況からはリキッドデザインに変更したほうがよいように思います。 　テンプレート配布サイトですから、本来は配布元に相談すべきですよ。もしくは、テンプレートに収まるように分割して、クリックだけでサイト全体が見渡せるようにする。
・device_1環境 import.css 　↑base.css 　↑device_1.css（数百行） ・device_2環境 import.css 　↑base.css 　↑device_2.css（数百行） ・device_3環境 import.css 　↑base.css 　↑device_3.css（数百行） ・device_4環境 import.css 　↑base.css 　↑device_4.css（数百行） とすれば、 管理もしやすそうですし、各々の環境での総読み込みサイズを減らせるんじゃないでしょうか。
　簡単なサンプルを書いておきます。方法はいくつかありますが、思いつく３通りだけ入れておきます。 　そのように配置するなら、floatは不要です。 　簡略化プロパティを使用紙、一部しか書かないと他のプロパティは消えます。 　(例) background-color:redとしておいて、その後でbackground:url();などとするとbackground-colorの指定はないものとして扱われます。 ★リキッドデザインにしておきます。横幅は固定すべきではないでしょう。 　幅広のディスプレイからスマホのような狭いものまで、ひとつのスタイルシートですみます。ウィンドウ幅を狭くして確認してください。 　そのほうが書くのも、ずっと楽です。 　HTMLもスタイルシートもシンプルです。 ★Another HTML-lint gateway ( http://cetus.sakura.ne.jp/htmllint/htmllint.html ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) でチェック済みの、HTML4.01strict+CSS2.1 (Shift_JIS)です。 タブは＿に置換してあります。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;line-height:1.6em;} p{text-indent:1em;} div.header,div.section,div.footer{width:80%;margin:0 auto;} div.section{position:relative;min-height:400px;} #QandA{margin-right:30%;} #QandA dt{font-weight:bold;} #QandA dd{background-color:#f5eabc;} #QandA dt,#QandA dd{margin:0 0 0 50px;clear:left;padding:5px;min-height:40px;} /* display:list-itemとlist-style-imageを使う方法 */ /* #QandA dt,#QandA dd{display:list-item;} #QandA dd{list-style-image:url(./images/a.gif);} #QandA dt{list-style-image:url(./images/q.gif);} */ /* :before擬似要素とcontent */ /* #QandA dd:before,#QandA dt:before{float:left;margin:0px 5px 0 0;} #QandA dd:before{content:url(./images/a.gif);} #QandA dt:before{content:url(./images/q.gif);} */ /* background-image */ #QandA dt,#QandA dd{padding-left:60px;background-position:5px 5px;background-repeat:no-repeat;} #QandA dd{background-image:url(./images/a.gif);} #QandA dt{background-image:url(./images/q.gif);} /* ここまでがbackground */ div.section div.aside{position:absolute;right:0;top:0;width:29%;font-size:0.9em;padding:0.5%;} div.section div.aside h3{display:none;} div.section div.aside p{margin:0 1em;} div.section div.aside ul,div.section div.aside ul li{display:block;list-style-type:none;margin:0;padding:0;} div.section div.aside ul li{background-color:aqua;} div.section div.aside ul li+li{margin-top:10px;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは定義リストのデザインの仕方を説明しています。</p> ＿</div> ＿<div class="section"> ＿＿<dl id="QandA"> ＿＿＿<dt>HTMLとは何ですか</dt> ＿＿＿<dd>Hyper Text Markup Languageの略です。ウェブ上で試用されるマークアップ言語のひとつです。</dd> ＿＿＿<dd>ほかのドキュメントへのハイパーリンクを設定できる(これをハイパーと表現する)。画像・リスト・表などもマークアップできる。</dd> ＿＿＿<dt>CSSとは？</dt> ＿＿＿<dd>Cascading Style Sheetsの略</dd> ＿＿</dl> ＿＿<div class="aside"><!-- 本文とは直接関係ないのでasideとしておく --> ＿＿＿<h3>関連リンク</h3> ＿＿＿<ul> ＿＿＿＿<li><a href="http://www.w3.org/">World Wide Web Consortium (W3C)</a> ＿＿＿＿＿<p>ウェブの総本山</p> ＿＿＿＿</li> ＿＿＿＿<li><a href="http://www.w3.org/standards/webdesign/htmlcss">H … &amp; CSS - W3C</a> ＿＿＿＿＿<p>ウェブページを構築する<abbr title="Hypertext Markup Language>HTML</abbr>と<abbr title="Cascading Style Sheets">CSS</abbr>の資料</p> ＿＿＿＿</li> ＿＿＿＿<li><a href="http://www.whatwg.org/">WHATWG</a> ＿＿＿＿＿<p>Apple、Mozilla、Operaによって設立された、HTMLの開発やその関連技術に興味を持つ人々のコミュニティー。</p> ＿＿＿＿</li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
No.2です。 「それと、次の内容が途中で切れていて、わかりませんでした・・」 ですが、firefox + firebugで見るとすぐわかるのであえて書きませんでしたが、該当する部分を見つけ出す--これは画面左下の要素(タグ)の＋を開いていって上の要素で青く変わる部分を見つけ出します。そして見つけたら、その右下のCSSの宣言からbackgroundを見つけたら、そこで右クリックすれば、コンテキストメニュー(その状況で可能なメニュー)が表示されます。 　No.2の回答ではそのURLを貼り付けただけです。 　その場でHTMLやスタイルシートをチェックするだけじゃなく、書きえて表示を確認したり色々使えるので、そのページがどのように作成されているかを調べるのにとても便利です。
>imgファイルの幅を小さくした時、高さも同じ比率で小さくしたいのですができません。 Shiftキーを押しながら、四隅の角をドラッグしてください。 >また、サイズの大きいimgファイルを使う際、画像はそのままでhtmlのコード上でサイズを小さく指定するのと、予めサイズを小さくした画像を使うのとどちらがいいのでしょうか？ あらかじめ小さくしておく方が良いです。 ファイルサイズが変わりますので、ダウンロード時間に影響します。
>なにか方法はありますでしょうか？ 手作業か、プログラムを作って自動か、その２種類しか有りません。 CMS、ブログ、BBSなども自動の一種です。 プログラムを作れないなら今まで通り手作業でやることになりますし、 もしくは、作ってもらえる知り合いがいるならその人に作ってもらうか、 ホームページ制作会社に依頼すれば（お金が要りますが）作ってもらえます。 デザインを自分で作れなくても良い、または改造する技術が有るなら、フリーのCGIプログラムを使う方法も有ります。 http://www.yumemaboroshi.net/cate95/
初心者の方だと思います。 　最初の最初にしっかり身につけて置いていただきたいのは、HTMLは文書構造を記述するもので、スタイルシートはそれをどのように表現(プレゼンテーション)するかを指定するものです。HTML5の勧告を目前にした今、とても重要な考え方です。 　いわゆるtableを文書の整形の為だけに用いてはならない。はそのひとつにしか過ぎません。 ＞2カラムのレイアウトのページを作成しています。 ＞左にメニューを持ってきたいため、アイコン画像を縦に4つ並べたいです。 ＞現在は ＞<p><img src="画像ファイル.jpg" /></p> ＞↑これを4つ書いています。 　とは考えないのです。ここをクリアできると、HTMLもスタイルシートも簡単になり、また本当にすばらしいデザインへの道も開けます。原則に忠実になるとデザイン性が失われると、曲解される人がいますが実際は逆です。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから スタイルシートはこれらの問題を解決すると同時に、HTMLにおける制限されたプレゼンテーション機構に取ってかわる。スタイルシートでは、行間の設定やインデントの設定、テキスト色や背景色、フォントのサイズとスタイル、その他様々なプロパティの設定が簡単にできる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Style Sheets in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　前置きが長くなりましたが、次のように考えられるようになった最初のステップは卒業です。 ★４項目程度の目次と本文からなるページがあります。 ★これを、右側に画像として項目を立てに配置して、その左に本文を並べたい 　結果は同じですが、過程がまったく異なりますね。 具体的には、 「HTMLでリストとして目次をマークアップしてあるのだが、それを本文の左にたてに画像ボタンのように表示したい」と考えます。 　すなわち <div class="section"><!-- 本文を示すclass名 --> 　<div class="section" id="section1"> 　　<h1>見だし</h1> 　　<p>記事</p> 　</div> 　<div class="section" id="section2"> 　　<h1>見だし</h1> 　　<p>記事</p> 　</div> 　<div class="section" id="section3"> 　　<h1>見だし</h1> 　　<p>記事</p> 　</div> 　<div class="section" id="section4"> 　　<h1>見だし</h1> 　　<p>記事</p> 　</div> 　<div id="contentTable"> 　　<ol> 　　　<li><a href="section1">セクション1</a></li> 　　　<li><a href="section2">セクション2</a></li> 　　　<li><a href="section3">セクション3</a></li> 　　　<li><a href="section4">セクション4</a></li> 　　</ol> 　</div> </div><!-- 本文終わり --> とマークアップされているとすると・・・これなら簡単でしょう。 スタイルシートで div.section{position:relative;} #contentTable{position:absolute;top0;left:0;width:20%;text-align:center;} div.section div.section{margin-left:21%;} #contentTable ol,#contentTable ol li{list-style:none;display:block;margin:0;padding:0;} #contentTable ol li{background-color:yellow;position:relative;} #contentTable ol li+li{margin-top:10px;} とします。 画像は指定していませんが、「セクション1」などの文字の代わりに<img src="***" width="180" height="20" alt="セクション1">とかにして、 #contentTable ol li img{display:block;width:100%;height:auto;} とすると、ウィンドウ幅に関係なく、常に本文の20%幅の画像が表示されるでしょう。 　1999年当時の古いHTMLの書き方とは、すこし違うと思いますが、逆にとても楽になるはずです。HTMLはそのままで、ボタンを横に並べたり、プルダウンで細かい項目を出したり、リンク先の写真を登場させたりなどが、HTMLを書き換えなくてもできるようになります。
全称セレクタの詳細度が０であることはご存知ですよね。 CSS2.1は、セレクタの記述方法が 「基点となるセレクタ」に様々なセレクタを追加することになりました。CSS1で .header{} と書いていたものが p.header{} と指定することになりました。それとの整合性のため*全称セレクタが導入されて .header{} は *.header{} と解釈されることになりました。 タイプセレクタを用いて h2{padding-left;} と記述すると、ブラウザはh2要素にあてはまるセレクタをすべて検索して *{margin:0;padding:0;} と h2{padding-left;} を見つけ出します。 いずれにも最重要宣言はされていませんから、詳細度でどちらを適用するかを決めます。 この場合、h2のタイプセレクタは、詳細度が001ですから、詳細度0000の*よりも高いため、h2に対する宣言が適用されます。 なお、*全称セレクタになるmargin:0;padding:0は指定すべきではありません。なぜなら、カスケーディング--CSSの最も重要な仕組み---によって、本来ブラウザが持つmargin,paddingに対するすべての設定が上書きされます。 　ユーザーの最重要宣言＞著者の最重要宣言＞著者の宣言＞ユーザーの宣言＞ブラウザの宣言 　ブラウザの持つスタイル宣言は ★http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … 　これがすべて削除されますから、文書内で新しい要素が登場するたびに、著者がすべて指定する必要が発生します。たとえばulやolが登場すると、li{margin-left:1em;}とか・・ 　*{margin:0;padding:0;}は某オーサリングツールなどがテンプレートで好んで使用する指定方法で、自分でスタイルシートを書くときにこんなもの書いたら、スタイルシートが肥大化してしまいます。 5. セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 6. 値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　このカスケーディングや詳細度・継承の仕組みをつかってスタイルが、簡単に記述できるのですよ。 　
「画像テキストを使う」なんて書くと、SEOやらアクセシビリティやら、いろいろ問題になりますねえ（笑 ただ、現実的には、誰もそんな面倒なことはしたくなくて、でも見た目の問題や収まりの問題があって仕方なく使うことも多いし、理念と現実は全く別次元の話というわけで。 > CSSでsans-serifを使用しています ここが問題かなあ？ sans-serifというフォントは「ダミー」なフォントで、ブラウザでどうレンダリングされるかは環境次第です。 シェアの大多数に当たるWindowsを対象にするなら、font-familyで"ＭＳ Ｐゴシック"を指定し、画像フォントでも同じフォントを使用すれば違和感なく表示できると思います。 ただ、CSSではemやpt指定だとフォントサイズが変化するため、同じにするにはCSSも完全にピクセル指定をする必要があります。 さらには、新しいWindowsマシンのデフォルトフォントは「メイリオ」なので、こちらを使うべきなのですが、メイリオはCoolType対応のフォントなので、Photoshopでアンチアイリアスをかけてレンダリングしたものと比べると、文字のシャープさがかなり違う。 たかがテキストレンダリングの話題ですが、けっこう奥が深いです。 リアルフォントでダウンロード表示できる、「Webフォント」が一般的になるまでは、まだまだ長い時間がかかると思うので、商用サイトなら、画像文字は使いまくりでしょうね。 自分は小ポイントの画像文字なら「メイリオ」を使うことを支持します。
先に回答しました。 CSSのセンタリングが、「div」で何故か出来ない - ホームページ作成ソフト - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7786505.html#a2 ) のサンプルHTMLを試してください。 　これでうまく表示されるなら、他のところに原因があります。 floatは、その時点での位置から出発します。 ＞IEの古いバージョン（7。８もたぶん）ではfloatさせたdiv要素が表示されません。 おかしいです。 　古いIEを互換モードで動作させると、position:absoluteが利かないために、やむなくfloatで並べていたのですから・・ CSS3では、内容を流し込まないFlexible Box Layoutプロパティや、Multi-column Layoutプロパティが追加されます。
一つ一つをすこし小さくしたら？
widthは、この場合ディスプレイ幅を参照します。 ウィンドウ幅を基準に100%にしろ!!と指定してあるので、当然の結果です。 <body> 　<div class="header"> 　　<h1>見だし</h1> 　</div> 　<div class="section"> 　　<h2>見だし</h2> 　</div> 　<div class="footer"> 　　<h2>フッタ</h2> 　</div> <body> に対して html,body{margin:0;padding:0;} body{background-color:silver;} body>div{width:90%;margin:0 auto;background-color:gray;} body>div h1,body>div h2,body>div p{margin:0;line-height:1.6em;} 位でよいはずです。 wrapperというclass名は感心しません。あるツールが用いているid名ですが、 「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 およびHTML5の新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) をみても、つければarticleでしょう。 [HTML5] <body> 　<article> 　　<header> [HTML4.01] <body> 　<div class="article"> 　　<div class="header"> これらセクショニングコンテンツと呼ばれるブロックは文書内に何度も登場するので、HTML4.01でしたらidではなくclassでなければなりません。 ・・・そろそろHTML5を念頭においてHTMLを書くようにすると、将来とても楽ですよ。
http://creators-manual.com/category/design_manual/ ここのサイトのロゴは、自作か、どこからかコピーしたものでは無いでしょうか？ ページのソースを見ると、自分のサイト上にicon_twitter.giｆとして存在しているようですが。
リストの整形はぶらうざによって差があります。ul要素やli要素に、またmarginで左を空けていたり、パディングで空けていたりします。 そのため、 #menue ul,#menue ul li{ display:block;list-style:none; margin:0;padding:0; text-align:center;line-height:20px; } のようにセレクタをグループ化してまとめておけば、ブラウザ間の差を吸収できます。 そのうえで、 #menue ul li{display:inline;} または #menue ul li{float:left;} です。floatの場合はblockのまま、inline-blockの場合は、text-align:centerで横に並べます。 　この場合 「ユーザエージェントは、語間スペースの出力処理に際しては、連続する空白類の入力があった場合は1つにまとめてしまう必要がある。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 という仕様--ルールのためli間にスペースができます。white-spaceに normal,pre,nowrap,pre-wrap,pre-lineのいずれを指定しても・・ 　そのためHTMLを <ul><li><img src="img/btn_A.gif" width="194" height="51"></li><li> <img src="img/btn_B.gif" width="140" height="51"></li><li> <img src="img/btn_C.gif" width="149" height="51"></li><li><img src="img/btn_D.gif" width="137" height="51"></li></ul> とかくことになります。 　なお、 #menue ul li{width:23%;position:relative;} #menue ul li a{display:block;width:100%;height:100%;text-decoration:none;} #menue ul li img{display:block;width:100%;height:100%;} とすると、ウィンドウ幅に合わせて伸縮しますから、そもそもの悩みはなくなります。 この場合でも、
更新情報とは、Document Varsionではなく、新着情報ですよね。 --更新情報はSSIが使用できるサーバーなら、 <dt id="last-modified">Last Modified</dt> <dd><!--#config timefmt="%Y-%m-%d"--><!--#echo var="LAST_MODIFIED" -->(JST)</dd> とかで、自動的に 新着情報なら <div class="header"> 　<ol class="news"> 　　<li>新着情報</li> 　　<li>新着情報</li> 　　<li>新着情報</li> 　</ol> </div> div.header ol.news li:before{content:"2012/10/31 なんたらのページ更新しました。"} div.header ol.news li+li:before{content:"2012/10/29 なんたらのページ更新しました。"} div.header ol.news li+li+li:before{content:"2012/10/26 なんたらのページ更新しました。"} 程度なら・・
　手順ですから、<ol>--Ordered list( http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … )を使うほうが良いでしょう。 注) 見やすくするため、タブは全角スペース２個に置換してあります。 <h2>ファイル操作</h2> <ol class="procedure" id="File"> 　　<li>「メニューを選択」→「ファイルを保存」 　　　　<p><img src="./images/1.jpg" width="180" height="120" alt=""></p> 　　</li> 　　<li>「保存場所の選択」 　　　　<p><img src="./images/2.jpg" width="180" height="120" alt=""></p> 　　</li> </ol> <h2>操作手順</h2> <ol class="procedure" id="Make"> 　　<li>「編集」→「すべて選択」を指定 　　　　<p><img src="./images/5.jpg" width="180" height="120" alt=""></p> 　　</li> 　　<li>「置換」を選択 　　　　<p><img src="./images/6.jpg" width="180" height="120" alt=""></p> 　　</li> </ol> のマークアップが最適でしょう。これで、機械(検索エンジンにも)にも序列リストだとわかりますし、いちいち「手順1」とか書かなくて良いです。 　スタイルシートで ol.procedure{counter-reset: section;margin-left:2em;} ol.procedure li{list-style:none;text-indent:-3em;} ol.procedure li p{text-indent:0; /* text-align:center; */} ol.procedure li:before { content: "手順" counter(section) "："; counter-increment: section 1; } とデザインしておくと、項目を増やしたり減らしたり、順番を変えてもHTMLは弄らなくてすみます。新たにol.procedureが始まると新たに番号を振ってくれます。
なるほど、テーマが影響していましたか。 HTML ソースで言うと、<title></title> の中身がないということですから、php ファイルからその部分がどうなっているのか見て、標準のテーマと比べてみるとかでしょうか。 <title> が入っている php ファイルは、header.php になっている場合が多いです、そこから関数になっていると思うので、Grep 機能のついたエディタでフォルダごと検索するということになるかと思います。 私、そのテーマをダウンロードして調べてみるという気はありませんので悪しからず。
　DOCTYPEスイッチ - Google 検索 ( https://www.google.co.jp/search?q=DOCTYPE%E3%82% … )でＩＥが標準モードで動作すように、HTMLを見直してください。 　標準モードでは、ブロックのサイズはpadding辺の内側ですが、互換モードではborder辺になります。などなど・・・ 　あわせて文法チェックで、DOCTYPEとHTMLの文法があっているかもチェックしておくと良いでしょう。 html,body{margin:0;padding:0;} body{ font-family:Verdana, "Tahoma,Arial,sans-serif,ＭＳ Ｐゴシック",MS UI Gothic, Osaka;/*継承されるプロパティなのでここ*/ background: url(04.jpg) repeat-x;/*デフォルトで指定されているものは書かない*/ } a:link{color:blue;} a:visited{color:maroon;} a:hover,a:focus{color:red;} /* ユーザーインターフェースに関わる部分は手をつけないほうが良い*/ 以下省略
確認しました。そのノードをfirefoxのfirebugで確認すると <li><a href="#1"><img src="#1画像.png" align="left" border="0" height="40 " width="200"></a></li><li><a href="#2"><img src="#2画像" align="left" border="0" height="40 " width="200"></a><ul style="display: block;" class="sub"><li><a href="#2-1"><img src="#2-1画像.png" align="left" border="0" height="40 " width="200"></a></li><li><a href="#2-2"><img src="#2-2画像.png" align="left" border="0" height="40 " width="200"></a></li><li><a href="#2-3"><img src="#2-3画像.png" align="left" border="0" height="40 " width="200"></a></li></ul></li><li><a href="#3"><img src="#3画像.png" align="left" border="0" height="40 " width="200"></a></li><li><a href="#4"><img src="#4画像.png" align="left" border="0" height="40 " width="200"></a><ul class="sub"><li><a href="#4-1"><img src="#4-1画像.png" align="left" border="0" height="40 " width="200"></a><ul class="sub"><li><a href="＃4-1-1"><img src="#4-1-1画像.png" align="left" border="0" height="40 " width="200"></a></li><li><a href="＃4-1-2"><img src="＃4-1-2画像.png" align="left" border="0" height="40 " width="200"></a></li><li><a href="＃4-1-3"><img src="＃4-1-3画像.png" align="left" border="0" height="40 " width="200"></a></li><li><a href="＃4-1-4"><img src="＃4-1-4画像.png" align="left" border="0" height="40 " width="200"></a></li></ul></li><li><a href="#4-2"><img src="＃4-2画像.png" align="left" border="0" height="40 " width="200"></a><ul class="sub"><li><a href="＃4-2-1"><img src="＃4-2-1画像.png" align="left" border="0" height="40 " width="200"></a></li></ul></li><li><a href="#4-3"><img src="＃4-3画像.png" align="left" border="0" height="40 " width="200"></a><ul class="sub"><li><a href="#4-3-1"><img src="＃4-3-1画像.png" align="left" border="0" height="40 " width="200"></a></li></ul></li></ul></li> ・・画像が指定されていませんし、テキストもありません。 ・・スタイルシートでプルダウンの指定もされていません。 firefoxのDominspectorで見ると、16階層も下がらないとなりません。 html/body/div/div/div/div/div[2]/div[2]/div/div/div/aside/div/div/div/div/ul/li[2]/ul/li <body> ＿<a name="pageTop"></a> ＿<div class="skinBody"> ＿＿<div class="skinBody2"> ＿＿＿<div class="skinBody3"> ＿＿＿＿<ul id="keyJumpNav"> ＿＿＿＿＿<ul id="amebaBar"> ＿＿＿＿＿＿<div class="skinFrame"> ＿＿＿＿＿＿＿<div class="headerBnrArea"> ＿＿＿＿＿＿＿＿<div class="skinFrame2"> ＿＿＿＿＿＿＿＿＿<div class="skinHeaderFrame"> ＿＿＿＿＿＿＿＿＿＿<div class="skinContentsFrame"> ＿＿＿＿＿＿＿＿＿＿＿<div class="skinContentsArea"> ＿＿＿＿＿＿＿＿＿＿＿＿<div class="skinContentsArea2"> ＿＿＿＿＿＿＿＿＿＿＿＿＿<div class="layoutContentsA"> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿<div class="skinMainArea"> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿<aside> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿<div class="skinSubA skinSubArea"> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿<div class="skinSubA2"> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿<div class="freespaceArea subModule"> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿<div id="container"> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿<ul class="menu"> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿<li> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿<li>・・ここがプルダウン・・・ ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿<a href="#2"> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿<ul class="sub" style="display: block;"> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿<li> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿<li> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿<li> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿</ul> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿</li> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿<li> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿<li> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿</ul> ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿</div> ・・・泣けてきます。・・・・ 　ひとつひとつ画像を <a href="#1"><img src="#1画像.png" align="left" border="0" height="40 " width="200"> ↓ <a href="リンク先"><img src="画像" align="left" border="0" height="40 " width="200"> 　指定しなければなりません。 　そのうえで、このメニューに対して先の回答を参考にスタイルシートを書いてください。 　これしきの内容でしたら、テキストエディタで作成すると数十分の一ですむ(百分の一になるかも)ものを・・・。 　ちょっと、私を含めて他人に頼むのは無理があります。--あなたから画像やリンク先のデータをいただいても一週間机につめなければ無理です。 　テンプレートを利用してゼロからデータを入れなおすほうが早いです。 　半日もあれば・・ 添付画像はfirebugのもの 　
説明の追加です。 この方法だと、ウィンドウサイズいっぱい近くで表示されるため、ウィンドウ幅に依存しないはずです。＝スマホのような小さい画面でも。 なお気づきですが *{font-size****;list-style***}のように、全称セレクタですべてのデフォルトのスタイルを消してしまうのはとてもまずいです。★これはオーサリングツール★が、しばしば利用している方法で、テンプレートをそのまま使用する場合は兎も角、すべての新しい要素が登場するたびに、スタイルを追加する必要があるため、スタイルシートがとてつもなく肥大化してしまいます。メンテナンス不能のサイトになってしまいます。 body#bodyのよな書き方もしません。一意セレクタは詳細度が高くて、後で修正できなくなります。単純に body{} でよいです。 　不必要にIDをつけないようにすると、HTMLもスタイルシートも簡潔になります。
ユーザーインターフェースの変更 ・これはあくまでＩＥ独自の実装です。約半数を占める他のブラウザには無効です。 ・標準モードと互換モードでは対応させる要素が異なります。 　bodyは、標準モードです。 　DOCTYPEを標準モードで起動するよう指定してください。 　→DOCTYPEスイッチ - Google 検索 ( https://www.google.co.jp/search?q=DOCTYPE%E3%82% … ) 　その際に、HTML自体も、そのDOCTYPEで記述して、Vaidatorでチェックすること 　→The W3C Markup Validation Service ( http://validator.w3.org/#validate_by_input ) 　→Another HTML-lint gateway ( http://cetus.sakura.ne.jp/htmllint/htmllint.html ) 　もしくは、firefoxのHtml Validator ( https://addons.mozilla.jp/firefox/details/249 ) ★なお、ポインターの形状、スクロールバーの色や形状などは、変更するべきではありません。ウェブ製作でもっとも重視すべきであるユーザービリティが悪くなります。訪問者を混乱させないために奇をてらうことがないように・・・ 　そんなもので利用者が減ることはあっても増えることはありません。利用は最小限にとどめましょう。たとえばtextareaやoverfolw:autであるdivだけとか・・
</script>が途中で改行されているのは、ペースト時の問題でしょうか。実際はなおっていることと思います。 それ以外だと、単純に、initialize関数の閉じかっこ｝が抜けているだけだと思います。
Anther HTML Lintが厳しいですが、詳しい説明や対処法が示されるのでお勧めです。 別にオンラインでなくても、firefox--ウェブ開発には、開発者向けツール ( https://addons.mozilla.jp/firefox/extensions/dev … )が豊富で、必須のブラウザ---使われていると思いますが、そのなかの文法チェッカー ・Html Validator ( https://addons.mozilla.jp/firefox/details/249 ) ・JSView ( https://addons.mozilla.jp/firefox/details/2076 ) 　このふたつでソース表示でチェックできる。 ・Firebug ( https://addons.mozilla.jp/firefox/details/1843 ) 　もその機能があります。
まず言語選択について。 一般的にウェブアプリケーションはJavaScriptで作られていますから、 CSS、JavaScriptを勉強するつもりが有るならCSS、JavaScriptで作れば最適だと思います。 勉強するつもりが無いなら、C#でSilverlight、JavaでJavaAppletで作れば良いと思います。 一般的なJavaScriptが最適と思うが勉強するつもりが無い、というのであれば、 依頼を断るもの選択肢の一つじゃないですかね。 画像の合成の仕方は、それぞれの実装方法に依ります。 ------------------------ スポーツマンは野球もテニスもムエタイも、全部出来るわけではないですし、 通訳だからといって英語もドイツ語もヒンズー語も全部出来るわけじゃないです。 プログラマーだからといって、C#もJavaScriptも、全部出来るわけじゃないです。
　あなたがHTMLをどのようにマークアップされたかが、わからないのでアドバイス不能なのですが、基本的な考え方は 　送信はボタンは、そのフォームの中ないし外の、その送信ボタンの含まれるコンテナブロックをposition:relativeなど、static以外に指定してから、送信ボタンを絶対配置すれば良いです。 たとえば <div class="section"> ＿<h2>見出し</h2> ＿<form action=""> ＿＿<table summary="formTable" ＿＿＿<tbody> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="title">項目</th><th abbr="content">内容</th><th class="note">注意</th> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="article">記事</th> ＿＿＿＿＿<td><textarea cols="30" rows="20" name="text"></textarea></td> ＿＿＿＿＿<td>この欄には、お気づきの点を何なりと自由にお書きください。</td> ＿＿＿＿</tr> ＿＿＿＿<tr> ＿＿＿＿＿<th abbr="送信">送信</th><td><input type="submit" value="送信"></td><td></td> ＿＿＿＿</tr> ＿＿＿</tbody> ＿＿<table> ＿</form> </div> と、ごく一般的なフォーム用のtableで、マークアップされていたとします。 ・・・スタイルシートを適用させる前に確認する・・・ これを、提示された形にデザインしようとすると、スタイルシートは table[summary="formTable"]{border-collapse:collapse;position:relative;} table[summary="formTable"] tr{display:none;} table[summary="formTable"] tr + tr{display:table-row;} table[summary="formTable"] th,table[summary="formTable"] td{vertical-align:top;} table[summary="formTable"] td + td{text-indent:1em;padding:0.2em 0.5em;font-size:0.9em;} table[summary="formTable"] th[abbr="送信"]{display:none;} table[summary="formTable"] tr{height:0;} table[summary="formTable"] td input[type="submit"]{visibility:visible;position:absolute;right:5px;bottom:5px;width:13em;} /* わかりやすいように幅を指定しておく */ table[summary="formTable"] th{width:6em;} table[summary="formTable"] th + td + td{width:12em;} のように書きます。HTMLのマークアップを見て、どこをどのようにデザインするかをセレクタとプロパティで、例のように指定します。スタイルの書き方は、あなたのHTMLに合わせてください。HTMLをデザインにあわせるのではありません。 　HTMLとスタイルシートは独立しているものなので、将来、他のデザインにするときはスタイルシートだけ書き換えたらすみます。
　通常は、%で全体を割り付けますが、マージンで調整と言うことはほとんどしません。なぜなら広い画面のとき間延びしてしまうからです。 <ol class="nav"> <li><a href="/index.html">TOP</a></li> <li><a href="/product">PRODUCT</a></li> <li><a href="/future">FUTURE</a></li> <li><a href="/cast">CAST</a></li> </ol> ol.nav,ol.nav li{list-style-type:none;margin:0;padding:0;line-height:20px;} ol.nav{display:block;position:relative;height:20px;min-width:25em;} ol.nav li{position:relative;top:0;display:block;width:10%;min-width:5em;background-color:yellow;padding:0.2em 0.5em;border:solid red 1px;position:absolute;top:0%;left:5%;} ol.nav li+li{left:30%;} ol.nav li+li+li{left:55%;} ol.nav li+li+li+li{left:80%;}
正規表現は"(\(|（).*?(\)|）)"です 意味は↓ 半角左カッコまたは全角の左カッコ、 の後に文字が幾つか続き、直近の 半角右カッコまたは全角の右カッコ、 で終わる。 後はReplaceメソッドで、一致した所を 空文字列で置き換えます。
CSSはHTMLからデザイン・装飾などの見栄えの部分を分離させたものです。 なのでメタタグのKeywordsはHTMLに記述します。 （ちなみにKeywordsがSEOに有効かどうかは現時点では不確かです。記述しない人も増えています。） ホームページビルダーは使った事はありませんが、私も昔テーブルレイアウトから（X）HTML+CSSに移行した経験があります。 一番早いのはテーブルレイアウトの事は忘れて、一から（X）HTML+CSSでサイトを1つ作ってみるといいと思います。 テーブルレイアウトと比較するサイトは少なくても、divでのレイアウト、リストでのナビゲーション、画像のロールオーバー等々、それぞれ検索すれば説明してるサイトはたくさん出てきます。（ただ、やり方は1つではないですし、あまり古いサイトだとすでに推奨されていないタグなどを使っている場合もあるので、信用できるサイトを探してください。）こつこつ1つずつ覚えていくのがいいのではないでしょうか。 あと私がやっていたのは、Firebugなどのツールを使って、他のサイトの構造を学ぶことです。 私はこれでだいぶ勉強になりました。
li要素のstyle属性中で <li class="slide current_slide"**** height: auto;/*変更*/ background-size: cover; /* 追加 */ "> で画像は収まるはずです。 　リンク（＞と＜）の位置は、それぞれright:leftプロパティで設定する
IE以外は、旧バージョンでの表示確認はしていません。 　なお、 firefox 16.02 Opera 12.02 safari 5.17 google Chrome 22.0 　ですが、これらは基本的に自動的にアップデートされますから最新版でのチェックで良いでしょう.safariのWin版は5.17で終了しているようです。 　もちろんOSによっても異なります。 　問題はIEだけで、これはIETester ( http://www.my-debugbar.com/wiki/IETester/HomePage )でチェックする程度で良いでしょう。 　ただ、HTTMLは元来 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　なのですから、きちんと作成すれば、ブラウザによる表示差は気にならない程度に収められるはずです。サイトに訪問してくるのは、パソコンのブラウザだけじゃなくて、上記のように色々あるのです。今気にしなければならないのは、googleなどの検索エンジンです。 　googleも言っているように『Lynx などのテキスト ブラウザを使用して、サイトを確認 ( http://support.google.com/webmasters/bin/answer. … )』するほうが重要かもしれません。この質問をLynxで見ると添付図のようになります。
ソース見てませんが、この程度のものであれば、CSSだけでできますよ。 基本的には、初期表示の要素以外は隠しておいて、ボタンによってdisplayの値を切り替えるだけです。 切り替えの方法は、javascript使ってもいいですし、cssだけでもできます。 たとえばjqueryを使うならこんな感じ。 --------------HTML <nav> <ul> <li data-target="content1">menu 1</li> <li data-target="conetnt2">menu 2</li> <li data-target="content3">menu 3</li> </ul> </nav> <article > <div id="content1" class="content show"> <h1>content1</h1> <p>conetnt comment</p> </div> <div id="content2" class="content hide"> <h1>content2</h1> <p>conetnt comment</p> </div> <div id="content3" class="content hide"> <h1>content3</h1> <p>conetnt comment</p> </div> </article> -----------------CSS article .content.hide{ display:none; } article .content.show{ display:block; } ------------------JS $(function(){ $("li","nav").on("click",function(){ $(".content.show").addClass("hide").removeClass("show"); $("#"+$(this).data("target")).addClass("show").removeClass("hide"); }); }); 勢いで書いたにも関わらず、まったくテストしてませんが、たぶん動きます。
そのページの「transition-property …… transition効果を適用するCSSプロパティ名を指定する」のすぐ下に、対応ブラウザが書いてありますが、Firefox GoogleChrome Safari だけでIEは書いてありませんよ。 そういう意味では間違ってないと思います。
そのような長いtableでしたら、 <table summary="何たらの表"> 　<caption>なんたら</caption> 　<thead> 　　<tr> 　　</tr> 　</thead> 　<tfoot> 　　<tr> 　　</te> 　<tfoot> 　<tbody> 　　<tr> 　　</tr> 　　<tr> 　　</tr> 　</tbody> </table> のようにマークアップされているはずです。 　<thead>をfixedで固定してしまえば、期待通りになるはずです。ただIEという糞ブラウザはとても難しいです。 以前、 テーブルをスクロールさせるときのスクロールの位置 - HTML - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7105490.html ) で散々悩まされました。 　今はjQueryでそれを行うこともできるかと思います。 　しかし、マークアップには<thead><tfoot>をきちんとマークアップしてください。印刷するとその効果がわかります。※なおscreen用のスタイルシートはmedia=screenに指定しておいたほうが良いです。もいしにちほせすにみかには適用しないようにしておかないと、折角のマークアップが役立ちません。
＞言語の画像にaltを指定するとSEOに良いとはどういうことでしょうか？ 　一番よくわかるのは、googleのガイドラインの 『Lynx などのテキスト ブラウザを使用して、サイトを確認します（ほとんどの検索エンジンのスパイダーには Lynx で見えるようにサイトが映ります）。 ( http://support.google.com/webmasters/bin/answer. … )』でしょう。 　Lynxで見ると、画像ではなくaltの内容で 英語のページへ 　と読めます。 　h1なども同様です。<h1><img alt="旅日記--2012/08/30--富士五湖へ"></h1>と書いてあれば、どのように理解されるかわかるでしょう。 　後方互換とは、古いブラウザへの互換性です。古いブラウザにはスタイルシートへの対処が未完成のものもありますから、またガラケーにも。 　画像は、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから alt属性は、画像についての短い説明を提供する。 その内容は、ユーザにとって、 longdesc属性が指定する長文説明――この例では「sitemap.html」――へのリンクを辿るかどうかを判断するのに十分な内容である必要がある。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Objects, Images, and Applets in HTML documents( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　こともあり必須なのです。ただ、borderなどの画像に関しては、スクリーンリーダーなどが読んでしまわないように、alt="" と空白でよいです。--空白にすべきです。 　今は慣れてしまったので使用することはほとんどありませんが、Lynxは邪魔にならないので入れておくと良いです。私は、firefoxがメインの開発環境ですが、Open Withで、色々なブラウザを指定していて、右クリックからIE Tester,IE,Opera,・・,Lynxが選択できます。
カテゴリ違いなので回答が少ないと思われます。 デジタルライフ >ソフトウェア >ホームページ作成ソフト に書き直されてみてはいかがでしょうか？
この指定では ・すべてのデバイスは、基本的にはstyle.cssを適用 ・media="only screen and を解釈するデバイスについては 　410px以下のデバイスは　smart.css 　481px以上のデバイスは、style.css となりますから、スマホはすべてstyle.cssが適用されます。 maxとは、最大 minとは、最初と言う意味です。 　なお、スマホのディスプレイ自体の解像度(dpi)が高いので、PC用と同じ画像ではぼやけてしまいます。使用する画像はページ内で320px幅で表示するなら、640px程度で作成してwidth属性で320pxに指定するなどの工夫も必要です。 <link href="/styel.css" rel="stylesheet" type="text/css" /> 　永続的スタイルシート(media属性もtitle属性もないスタイルシート)ではなく、media属性はつけておいたほうが良いです。そうすると印刷(media=print)には、ブラウザのもつスタイルシートで印刷されます。 　viewportの値ですが、基本的には表示するウェブページの幅を縮めて行って、スクロールバーが出てしまうサイズにしておけば良いでしょう。当然、デバイス幅よりも広いのが通常です。なぜ501にして、デバイス幅を780pxと考えられるのかがよくわかりません。 　 　
mapでの座標指定は利用することができません。 もっとも良いのは、mapではなくスタイルシートで矩形領域を指定して、色がわかる部分だけ色を変えた背景に置き換えることです。 [例]日本地図で東京都に合わせると東京都の色が変わる方法 1) 通常のナビゲーションリストを作成します。 2) リンク(A要素)をスタイルシートで(sttic以外の)地図上にabsoluteで配置します。 3) 矩形領域にも地図と同じ背景を位置を指定して配置します。 　（外見上は同じに見えます。） 4) その矩形領域にマウスオンすると、東京都部分だけ色の変わった地図に変更されます。 　テキストブラウザやスクリーンリーダー、パソコンは無論、検索エンジンにも利用できる方法としたらこの方法が良いでしょう。ただしあまり複雑な図形には向きません。 　スマホ限定でしたら、canvasを利用する方法が良いでしょう。これは人にアドバイスできるほど詳しくないのでご勘弁を
＞このロールオーバーは画像を切り替える方法ではないという理解で合っておりま すでしょうか？ 　いいえ背景を変えることもできますし、要素を加えることでフェードアウトフェードインもできます。 　工夫してみなさい。
>IE8とIE9で表示→文字のサイズ→最大にしても文字サイズが変更されません。 ブラウザの設定で、CSSよりもブラウザ設定を優先するようになっていますか？
1. html/cssにおける余白はmarginとpaddingの2種類があります。 marginは外側の余白、paddingは内側の余白です。 2. html/cssにおける%とはウィンドウに対しての値ではなく、その要素の親の範囲の値です。 したがって、ウィンドウサイズが仮に1000pxあっても、親要素に500pxが設定されていたら、100%を指定しても500px以上にはなりません。また、親要素の幅が100%であっても、親要素自体にmarginやpaddingなどの余白が設定されていると、子要素はその制限を受けます。 上記を前提として、#headerをウィンドウいっぱいの横幅にする場合、#headerの先祖要素であるhtml,bodyの幅が100%であり、かつpaddingとmarginが0である必要があります。その上で、#headerのwidth:100%;margin:0;padding:0が本当の意味で有効になります。 その部分だけを抜き出すと html,body,#header{ margin:0; padding:0; width:100%; } #header{ height:100px; background-color:#00; } このようにすれば、幅がウィンドウいっぱいの高さ100px、赤背景の#headerが表示されます。
角マルの四角パスを書く 鋭角の四角のパスを書く 2つのパスを重ねて上が角マル　したが鋭角になるようにする。 パスを範囲指定に変換する 塗りつぶし
>Wordpressをベースに作ることは可能なのでしょうか? wordpressはphpで実装されているので、phpができる範囲であれば、wordpressを通して何でもできます。ただし、phpができないとなると、wordpressの機能やプラグインの機能に頼ざるを得ません。そういった意味で要望される機能は、wordpressにはありませんし、おそらくプラグインにもありません。仮にプラグインで近い機能のものがあったとしても、そっくりそのまま使えるものがある可能性は考えにくく、結果的にphpができないとカスタマイズも行えません。また、phpの知識以外にも、データベースやサーバーの機能、セキュリティの知識も必要になってくるでしょう。 貶す気など毛頭ないですので、是非誤解しないで解釈していただきたいところですが、現実はこうです。 ・クライアント案件で、受注してからphpやデータベースやサーバーを学ぶという発想はあまりにも乱暴です。私が客なら激怒します。住宅の発注をしたけど、実際の施工業者は住宅の建築方法を知らなかった。これから勉強します。みたいな話です。一言でいうと、Kenta57さんにとっては、完全なるキャパオーバー、スペックオーバーな内容です。外注するなどして他者の力が必要なのは間違いないです。 ・いろんな考え方があるので一概には言えませんが、要望される内容を15万で請ける人はおそらく希薄でしょう。学生でもやらないレベルだと思います。あくまで個人的な感覚ですが、一般的には100万を簡単に超えてもおかしくない内容です。言われたことを何とか実現することも大事ですが、出来ないことは出来ないと判断し、伝えることも大切ですよね^^;
わすれもの #globalnavi li{}に、position:relative;を追加しておくほうが良いです。
>No.1補足 では親要素の幅を可変にしてみてください。
＞style.cssの方を修正する方法で 　できなくはないけど、大変煩雑で文字数が変わったりすると崩れてしまいます。 『メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。 ( http://jigsaw.w3.org/css-validator/#validate_by_ … )』と書かれているように、HTMLを正したほうが良いです。ずっと楽ですし、先々も苦労しません。 ＿<div class="section"> ＿＿<dl class="notice"> ＿＿＿<dt>タイトル</dt> ＿＿＿<dd><p>→一覧</p></dd> ＿＿＿<dd> ＿＿＿＿<ul> ＿＿＿＿＿<li>リスト１</li> ＿＿＿＿＿<li>リスト２</li> ＿＿＿＿</ul> ＿＿＿</dd> ＿＿</dl> ＿</div> [CSS] dl.notice{ width:240px;line-height:2em; border:solid 3px black;background-color:aqua; position:relative; } dl.notice,dl.notice dt,dl.notice dd,dl.notice dd p, dl.notice dd ul,dl.notice ul li{ margin-top:0;margin-bottom:0;padding:0; } dl.notice dt{border-bottom:solid 2px black;padding-left:1em;} dl.notice dd{position:absolute;right:0;top:0;padding-right:1em;} dl.notice dd+dd{position:static;line-height:1.4em;}
javascriptでもCSSでもできますが、一つ難点があります。 上部にあるのはナビゲーションだと思いますが、訪問者が目的のページにたどり着くためには二動作必要になります。 　すなわち、一度上部のメニューをクリックした後、下の画像に移動して再度クリックをしなければなりません。それは不便なのではないですか？ 　一般的にはナビゲーションにフォーカス/マウスオーバーすると、下に画像が現れ、そのままクリックするとリンク先に飛ぶという動作にしています。そうするとスタイルシートやjavascriptが動作しないブラウザのみならず、検索エンジンにも適している(SEO)のではないでしょうか?
その部分を右クリックするとflashで作られていることがわかりますね。 スタイルシートで行うなら、木構造を持ったブロック間をリンクで移動するようにして、全体をoveflow:hiddenのブロックで囲むと良いでしょう。
理由は単純で、footerがデフォルトのoverflow:visibleのため、折角配置されても下に突き抜けてしまうためです。 heightとmin-heightの違いは、heightはサイズを決めてしまいますが、min-heightは最初サイズしか決めませんから自動調整されます。 　下のサンプルで本文が少ない場合はいずれでもまったく同じになるはずです。 　横幅の場合は書きサンプルのように組み合わせて使用することが多いでしょう。たての場合は、ウィンドウ幅やフォントサイズが変わると長くならなければならないので通常はheightで高さを決めないほうが良いです。 　常に高さを固定する場合はoveflowの値をautoなりhiddenにします。 ちょっとHTMLを書き直します。 ※class名やid名は文書構造を示すものにします。idはリンクやjavascriptののターゲットにする以外は使わないほうが色々な意味で楽です。classだと複数個所を一度に指定できる。 　←「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　　HTML5の「新しい要素 」がその意味・用途と共に参考になるでしょう。 　←新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　なお、header,footer,articleなどはひとつの文書中に何度も登場する可能性があるのでclass名のほうが良いです。将来HTML5でページを作成する場合、そのまま<div class="section">→<section>に書き換えるだけです。 ★HTMLには文書構造しか書かないので後々のメンテナンスが楽です。HTMLもCSSもわかりやすくなりますしね。 <html> 　<body> 　　<div class="article"> 　　　<div class="header><!-- 文書のヘッダー --> 　　　</div> 　　　<div class="section><!-- 本文 --> 　　　　内容 　　　</div> 　　　<div class="footer"><!-- フッタ --> 　　　　フッター 　　　</div> 　　</div> 　</body> </html> の場合 html,body {margin:0;padding:0;height:100%;line-height:1.6em;} body>div.article>div>*{margin:0 20px;} body>div.article{ width:80%;min-width:480px;max-width:800px; margin:0 auto; min-height:100%; position:relative; } body>div.article>div.section{padding-bottom:40px;} body>div.article>div.footer{position:absolute;bottom:0;width:100%;height:40px;} で叶えられると思います。--IE6など子供セレクタを理解できないブラウザには、子孫セレクタを使って書き直す必要があります。 [その他気付き] div#container(詳細度0,1,0,1)・・・一意セレクタは詳細度が高いためタイプセレクタがなくても良いです。 body > #container(詳細度0,1,0,1)・・詳細度同じですから追記されます。 詳しくは「REC-CSS2 邦訳 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )」を見ていただくことにして・・。 ・4.3.3 パーセント値（Percentages） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ・8.1 ボックスの寸法（Box dimensions） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ・10.5 内容領域の高さ（Content height: the 'height' property） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )★重要 ・10.7 高さの最大値と最小値（Minimum and maximum heights: 'min-height' and 'max-height'） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) [サンプル]タブは＿に置換してあります。HTML4.01strict+CSS2.1です。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル0</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body {margin:0;padding:0;height:100%;line-height:1.6em;} body>div.article>div>*{margin:0 20px;} body>div.article{ width:80%;min-width:480px;max-width:800px; margin:0 auto; min-height:100%; position:relative; } body>div.article>div.section{padding-bottom:40px;} body>div.article>div.footer{position:absolute;bottom:0;width:100%;height:40px;} /* おまけ・・色分け */ body{background-color:gray;} div.article{background-color:white;} div.header{background-color:aqua;} div.footer{background-color:yellow;} --> ＿</style> </head> <body> ＿<div class="article"> ＿＿<div class="header"> ＿＿＿<h1>タイトル</h1> ＿＿＿<p>このページでは・・・・</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h2>見出し</h2> ＿＿＿<p>ここに自由な長さの文章を入れてみる</p> ＿＿</div> ＿＿<div class="footer"> ＿＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿＿</div> ＿</div> </body> </html>
これですね。 a.futoji:visited{font-weight: bold;} ちなみに、id(ここではhoge)と同時に指定することもできるし、 a#hoge.futoji:visited{font-weight:bold;} classやidを使わずに、リンク先によってスタイルを変更することもできます。(古いIEできないけど) a[href="http://oshiete.goo.ne.jp/"]:visited{fotn-weight:bold;}
[Fireworks CS5/4/3 (速習デザイン)]がベストの選択だと思います。 何よりもFireworksへの愛着が感じられ、読んでいて好感が持てます。 ただ、若干の懸念があります。 Fireworksは、グラフィックスを制作するソフトですが、その中身は「Web画面制作」＋「画像編集」ソフトです。 「Web画面制作」機能（レイヤー、ステート、ページ、スライス等）は素晴らしいものがありますが、「画像編集」機能はPhotoshopに大きく劣ります。 Fireworksの書籍がすくないのは、この「Web画面制作」機能についての書籍が少ないからです。PhotoshopやIllustratorについても、この部分の記事はほとんどありません。 [Fireworks CS5/4/3 (速習デザイン)]の内容も同じで、ほとんどは一般的なグラフィック作成テクニックに関するものです（一部Web制作は入ってます）。で、それをやるのなら、Photoshopのほうがはるかに早いし、仕上がりも美しい、と。 自分的には、Fierworksは、Photoshopの完成イメージを読み込んで、ステートやページを作成し、一気にスライスするためのソフトだと思っており、これで画像編集（特に写真など）を行おうとは思っていません。 PSDやAIをお持ちなら、[Fireworks CS5/4/3 (速習デザイン)]など購入する必要はないのではないでしょうか？
メニュータブというのが具体的に何を指しているか分かりませんが、「カーソルを乗せると変化するボタン」のことを指しているのでれば、CSSスプライトという技術を使う場合も多いと思います。 概要だけ書きますね。 ・幅100px高さ20pxのボタンとする。 ・幅100px高さ40pxの画像をつくる。その際、上半分は通常表示のボタン画像、下半分はカーソルを乗せた時の画像でつくる。 ・html/cssで幅100px高さ20pxのリンクを作り、上記の画像を指定すると、画像の上半分だけ表示されたボタンができる。 ・cssの:hoverでカーソルを乗せた時に、画像のy座標を20px下げる処理を書く。 ま、こんな感じです。 「CSSスプライト」で検索すれば沢山出てくるので、技術的なことは検索した方がわかりやすいと思います。
改行に関しては、要素(h1)に幅が指定されていないからでしょう。 html <h1>サイトタイトル</h1> css h1{ width:960px; } センタリング(中央寄せ)に関しては以下のように書くだけです。 css h1{ margin:0 auto; } 総合するとこうなりますね。 css h1{ width:960px; margin:0 auto; } 高さが決まっているのであれば、同時にheightも指定したほうがいいですね。
マークアップ（それも原理主義で！）がデザインだと勘違いしている回答は参考になりませんよね（大笑 ■素材管理に関して ご質問の機能要件に応えることのできるソフトは、DAM（デジタル・アセットマネジメント）と呼ばれるソフトウェアです。 フリーのものもありますが、使い勝手を考えると、やはりこのクラスは必要でしょう。 http://www.swtoo.com/product/extensis/portfolio/ DTPチーム制作などのヘビーな用途でなければ、スタンドアロン版でいいと思います。 ■フォント管理 多数のフォントを一元管理し、リアルタイムで一時追加や削除が可能なソフトは、Mac版で名高い、Extensis Suitcaseしかないと思います。 http://www.swtoo.com/product/extensis/suitcase/ 自分の知り合いのデザイン会社（Web/DTPバイメディア）が使ってました。 教えてもらって機能にビックリしました。
「発注業者が納得しない場合」 それが現在起きていることなのか？ 「どのような対応が必要なのでしょうか？」 今後起きうる可能性なのか？によって回答は変わります。 基本的には、滅密な打合せと実際に受注する前のサンプルサイトの提示ですみます。 現在進行形なら、それが不足したことによるものでしょうから、ますその原因を絞りましょう。 ・具体的にどのようなデザインを求めているかを提示してもらう。 　それがなくては手が打てません。 ・受注側の能力をきちんと示すこと。 　能力、時間がない場合は限界をきちんと示すこと。 ・発注者側の知識・能力に見合った説明をすること。 　最悪、発注者側のほうが知識も能力もある場合は断るのも選択肢に入れること。 　他社の紹介やアフターケアを忘れないように。
【外観－メニュー】で必要なページのメニューを作る。
新しい要素や書き方を使えば当然その部分は非対応ブラウザには表示されませんが 別にHTML5宣言をしているからと言ってページが見られなくなるわけでは無いですよ 数字にこだわらないほうがいいです CSSも最近は機能別に分かれていて2とか3とか4とかいうのは実際何の意味もありません 一応スマホじゃない携帯もフルブラウザ機能とかはHTML5対応を謳ってますが PCも含めて100%対応しているブラウザはないので、実際きちんと表示されるかはわかりません もしかしたら勧告の基準が引き下げられそうなので勧告した後もないままかもしれません そもそも上で書いたようにバージョンとは関係なく実際の機能ごとに管理していこうという流れが強いので いくらW3CのHTML5の仕様に100%準拠していても、それだけではHTML5に完全対応しているとはぶっちゃけ言えません 逆もしかりです、HTML5で何もかも新しくなったわけではなくてCanvasなんかみたいに以前からいくつかのブラウザで独自に使われていた技術が採用された例も多いです つまりHTML5対応を謳ってようが非対応のブラウザだろうが、一概にそのHTML5のページのコンテンツがきちんと動作するかしないかいうことは言えないので、 数字対応ではなくて機能対応で見ないと仕方が無いということです
ちょっとしたミスの修正 　<section> 　　<h1>このサイトについて</h1> 　　<p>・・・【中略】・・・</p> 　　<section> 　　　<h1>HTML5とCSS3による豊かな表現</h1> 　　　<p>・・・【中略】・・・</p> 　　</section> 　　<section> 　　　<h1>さらに別の記事</h1> 　　　<p>・・・【中略】・・・</p> 　　</section> 　</section> もしくは 　<section> 　　<h1>このサイトについて</h1> 　　<p>・・・【中略】・・・</p> 　　<section> 　　　<h2>HTML5とCSS3による豊かな表現</h2> 　　　<p>・・・【中略】・・・</p> 　　</section> 　　<section> 　　　<h2>さらに別の記事</h2> 　　　<p>・・・【中略】・・・</p> 　　</section> 　</section> です。sectioning要素で、そのセクションの階層を判断するのがHTML5の仕様です。そのため以下のいずれかの方法をとることが強く推奨されています。 ★sectionで階層を明示して、すべてh1で見出しをつける。 ★sectionで階層を示すと同時に階層に対応した見だしレベルとする。 　前者は、将来、階層が追加されるなどしたときに楽です。 　後者は、古いブラウザなどにおいても互換性があります。階層が変更されるとすべて書き直さなければならない。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Sections may contain headings of any rank, but authors are strongly encouraged to either use only h1 elements, or to use elements of the appropriate rank for the section's nesting level. Authors are also encouraged to explicitly wrap sections in elements of sectioning content, instead of relying on the implicit sections generated by having multiple headings in one element of sectioning content. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.4 Sections — HTML5( http://www.w3.org/TR/2011/WD-html5-20110525/sect … )］より 要約すると ・sectionには、すべての階層の見出しを含むことができます。しかし、著者は、h1 要素のみ使用するか、sectionのネストされた階層に見合ったランクの見出しを使うことが、強く推奨される。 ・著者においては、セクショニング・コンテンツの中に、そのセクションを明示的に置くことが推奨される。一つのセクショニング・コンテンツの中に複数の見出しを入れ、それによって、暗黙に生成されたセクションに依存しないほうがよい。 　後段は、hgroupやレベルの異なる見出しをおいて、ブラウザの解釈に依存するのではないことを言っています。 <section> 　<h1></h1> 　<h2></h2> や <section> 　<hgroup> 　　<h1></h1> 　　<h2></h2> 　</hgroup> じゃなくて・・・ <section> 　<h1></h1> 　<section> 　　<h2></h2> と言う意味。
No.1です。 　最初にウェブページを公開して早いもので17年経ってしまいました。ちょうどHTML2.0の時代で、その後のブラウザ戦争やHTML3.2の酷い時代も経験してきています。そのため、なぜHTML4.01が作られることになったかや、その目的も理解しているつもりです。 『HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきである ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 ★2.2.1 HTMLの略歴 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　は、ぜひ読んでおいてください。 　要は、単にIE5.5/6やスマホに対応させるレベルではなく、それ以上に 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … )］より 　さらに検索エンジンへの対策を目指せば、どうしてもHTML4.01strictに行き着いてしまうのです。(transitinalやframesetじゃない) 　しつもんにありました 『これから作ろうとしているWebサイトのトップページには、写真のスライドショー（3枚くらい）を掲載したいと思っております。』 　について、「どんな環境からもWebの情報を利用できるように」を達成するためには、いくつかのアプローチがあります。あなたのサイトの主たるコンテンツ、想定される訪問者も重要な判断基準になりますから、あくまで一般的なアドバイスしか出来ません。 　今後も増え続けるであろうi-phoneを考えるとfashは避けます。なんといってもユーザーがアプリケーションをインストールしなければならないという根本的な問題もあります。 　まず、率直なHTMLを作成します。私は現在はHTML4.01strictです。数年前まではXHTML1.1、そのまえはHTML1.0でしたが、HTML5の形が見えてきた数年前からはHTML4.01strictに戻しました。その際に、「HTML5の新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」名をdivのclass名にし、その意味や使い方も参考にしています。・・将来HTML5が一般的になったとき楽ですから・・ 　トップページに表示する画像--たぶんサイトのコンテンツカテゴリーを表現するためのものだと思いますが、いわゆるトップページにおけるナビゲーションと考えています。各ページにおけるサイトマップ的なナビゲーションとは異なり、それ自体がそのページの主題、すなわちHTML5で言うところのsectionに当たるものです。 HTML5の基本構造 <body> 　<header></header> 　<section></section><--- ここに入る 　<ffoter></footer> </body> 　ここに、ナビゲーションとしてマークアップします。 <div class="nav"><!-- HTML5の<nav> --> 　<h2>メニュー</h2> 　<ol> 　　<li><a href=""><img src="サムネイル" width="" height="" alt="リンクタイトル"></a></li> 　　<li><a href=""><img src="サムネイル" width="" height="" alt="リンクタイトル"></a></li> 　　<li><a href=""><img src="サムネイル" width="" height="" alt="リンクタイトル"></a></li> 　</ol> </div> 　これをCSS2.1をつかって、マウスオーバーで画像を入れ替えるものをまず作ります。携帯電話やスタイルシートを利用できない端末には、単純なサムネイルを利用したナビゲーションです。画像も見ない検索エンジンにはリンクタイトルとリンクが理解されればよい。 　画像の置き換え方法は、contentプロパティで追加するなり、背景画像として表示するなりします。HTML5に対応したブラウザ用にCSS3のTransitions モジュールを使用してスライドショーとしても良いでしょう。わざわざvideoやcanvasは要らないでしょう。 　幸いトップページは印刷は想定しなくて良いのである意味楽です。(印刷用スタイルシートを用意しなくて良い) 　その上で、javascript/jQueryを利用してフェードアウトやスライド効果を持たせても良いでしょう。javascriptを利用できないユーザー、さらにはスタイルシートを利用できないユーザーにもまったく問題なく利用できるでしょう。 ★画像を使ったいろいろなjQueryプラグイン224個まとめ( 200+ collection of jQuery for images ) - かちびと.net ( http://kachibito.net/web-design/224-image-jquery … ) 　ここで、flashやvideo,canvasなどだけに依存して、それらが利用できない訪問者を追い返すことだけは避けなければなりません。 　タダ、忘れないでほしいのは!!!これは自戒でもあるのですが!!!! そのような画像や効果を見るために、たずねてきてくれるわけではない ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ということです。本当に充実しなければならないのはコンテンツです。世界中探してもここにしか、これだけ充実した情報はないよ---といわれるくらいに。この世界、ちょっと古い言い回しですが「ロングテール ( http://ja.wikipedia.org/wiki/%E3%83%AD%E3%83%B3% … )」の世界です。 　
firebugでHTMLの要素をたどれば、どのスタイルを調整すればよいかはわかります。 idやclassが、スタイルの指定に必要なわけではありません。 　idやclassが付いていると、その特定の要素にスタイルを指定するだけで、そんなものまったくついてなくてもスタイルの指定はできます。 body>div>p{margin:20px 0 0 0;} とすればbody直下のdivの直下のpのみトップマージンを付けられますし body>div>p+p{margin:0;} とすれば、続くpはすべてマージンはなくなります。 body>div>p:last-child{margin-bottom:20px;} で、最後の段落の下マージンが広くなります。 ※5. セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )
それぞれの説明は同じページにあるリンク D. CSS2の文法 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) にあります。 　一般的な正規表現 ( http://ja.wikipedia.org/wiki/%E6%AD%A3%E8%A6%8F% … )の知識は必要です。 　この部分は、以後の説明で都度登場しますから先に進んでも良いと思います。 　この部分は機械に対してどのように解釈すべきかを書いてあると考えても良いです。最後に説明します。 　マクロとは、この場合は定義されたものに置き換えることを意味します。 解りやすいところで説明すると num [0-9]+|[0-9]*\.[0-9]+ numとは、0から9の文字をひとつ(+)、もしくは(|)、0-9の文字を0個以上に続いて小数点(\.)に続く0-9の文字ひとつ以上(+)と展開。 　なお、.の前の\は、正規表現では任意の文字を意味する.をエスケープして、文字通り.(小数点)として解釈しろと言う意味です。 　--windowsは任意の文字を*で示しますから混乱しますが、Windowsだけ特赦なOSなので-- 　人は、それが書かれている状況--文脈--も含めて総合的に意味を理解できますが、お馬鹿な機械はわずかなタイプミスも混乱してしまいます。そのため、人に機械は、この様書くと正しく判断すると説明してある部分です。人にまどろっこしいですが、お馬鹿な機械にはこんなもの苦じゃないのです。 　先の数字numのマクロを見ても解るように、数字は2.54とは書けるけど、２.54じゃダメだと言っているのです。それを厳密に書くと、 ・半角の0から9の文字ひとつ以上 　　　　1　とか　7　とか　　56 あるいは ・半角の0から9の文字ゼロ個以上と小数点とそれに続く一個以上の0から9の文字 　　　.5　　とか　2.8　　とか　　0.008 　　52. というのはダメと言うことです。
もちろん、外をdivなどで括らずにも可能です。もしナビゲーションリストでdivで括ってなければ、こっちのほうがわかりやすいかも。 HTMLが文書構造をきちんと示すようにマークアップされていたら、HTMLを触る必要ありませんし、スタイルシートも簡単です。なによりも、将来デザインをまったく変えようとしたときが楽です。 　文書構造とスタイルの分離、それこそスタイルシートを導入する大きな利点の一つですから。 　デザインのためにHTMLは書きません。←これが一番のポイントかも。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;background-color:gray;} div.header,div.section,div.footer{width:80%;margin:0 auto;max-width:800px;min-width:480px;background-color:white;} div.section div.section{width:auto;margin:0;min-width:0;} h1,h2,p{margin:0;line-height:1.6em;} div.header,div.footer{padding-top:50px;} div.footer{position:relative;} ul.nav{border:solid green 4px;border-width:4px 0;} ul.nav ,ul.nav li{display:block;list-style:none;margin:0;padding:0;line-height:30px;text-align:center;} ul.nav{position:absolute;top:0;left:0;width:100%;background-color:aqua;} ul.nav{width:100%;} ul.nav li{display:inline-block;width:15%;} ul.nav li+li{margin-left:5px;} ul.nav li a{display:block;width:100%;height:30px;border:outset 4px blue;text-decoration:none;} ul.nav li a:hover{background-color:rgb(180,255,255);} ul.nav li a:active{border-style:inset;} div.section{padding-top:50px;position:relative;} div.section ul.nav{position:absolue;top:0;} /* 本文中は縦に並べちゃえなら次の行のコメントを外す */ /* この行を消す div.section{min-height:300px;padding-top:0;} div.section ul.nav{width:20%;border:none;margin:0;} div.section ul.nav li{display:block;width:96%;} div.section ul.nav li+li{margin-left:0;} div.section>*{margin-left:21%;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページでは・・・・</p> ＿＿<ul class="nav"> ＿＿＿<li><a href="/">トップ</a></li> ＿＿＿<li><a href="/product">製品</a></li> ＿＿＿<li><a href="/information">情報</a></li> ＿＿＿<li><a href="/profile">会社案内</a></li> ＿＿</ul> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿＿<ul class="nav"> ＿＿＿<li><a href="/">トップ</a></li> ＿＿＿<li><a href="/product">製品</a></li> ＿＿＿<li><a href="/information">情報</a></li> ＿＿＿<li><a href="/profile">会社案内</a></li> ＿＿</ul> ＿</div> ＿<div class="footer"> ＿＿<ul class="nav"> ＿＿＿<li><a href="/">トップ</a></li> ＿＿＿<li><a href="/product">製品</a></li> ＿＿＿<li><a href="/information">情報</a></li> ＿＿＿<li><a href="/profile">会社案内</a></li> ＿＿</ul> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
私も 英語化されたFirefoxのWeb Developerを簡単に日本語版に戻す方法 | iwb.jp ( http://iwb.jp/firefox/webdeveloper-return-version/ ) と同意見です。 わたしは、firebugがメインで、Web Developerはほとんど使用していません。 英語でも不便を感じないです。このくらいの単語は難しくもないので、覚えておいても損はしないし。
有志による寄付を募る程度でしょうか・・・ WebMoney等のインターネット上の通貨も一応は存在しますし、 そう言うもの経由でやりくりするほかないかと思われます。 SNSのレンタル料や、ファンサイトの登録に係る登録・維持手数料など、 まずは、どの部分にお金が発生しているかだけでも 記載されたほうが良いかと思われます。
子供セレクタです。 セレクタは基点となるセレクタから書き始めます。 div.section p と言う場合、divが基点になります。CSS2以降は基点となるセレクタ(タイプセレクタ)を書きます。 よく見かける .section は古い書き方で、CSS2ではこれは *.section の省略形とみなされます。*は全称セレクタですべてのタイプセレクタ(HTMLでいう要素-Element)を表します。*の詳細度は0です。 　タイプセレクタは詳細度d=1です。 　これに、様々なセレクタをつなげていきます。 div.section p{} と言う場合の、半角スペースは子孫セレクタと呼ばれるものでdiv要素の子々孫々を示しますから、<div class="section">に含まれるpに当てはまります。 >は、子供セレクタと言って、その直接の子孫--子供--だけに当てはまります。 <div class="section"> 　<p>あいうえお</p> 　<ol> 　　<li><p>かきくけこ</p></li> で、 div.section p{color:red;} dic.section>p{font^weight:bold;} とすると、「あいうえお」も「かきくけこ」も赤字になりますが、太字になるのは「あいうえお」だけです。CSS2から導入されたセレクタです。 他にも、 +　　兄弟セレクタ などがあります。これらは「つなげるセレクタ」と呼ばれ、詳細度に加算されませんから、いずれも詳細度は [0,0,0,2] になります。タイプセレクタはd=1です。 (半角スペース)子孫セレクタ >　　　　　　　子セレクタ +　　　　　　　隣接セレクタ []　　　　　　属性セレクタ--たくさんあります。 .　　　　　　クラスセレクタ #　　　　　　一意セレクタ .abc　classセレクタ　属性セレクタの[class~=abc]と同じ あと、リンクの擬似クラス、動的な擬似クラス、擬似要素を覚えておけば良いでしょう。 なお、 body > #container はおかしいです。そもそも#(一意セレクタ)はその文書中に一度しか登場しない、詳細度b=1と高いため、わざわざ>を使う必要はありません。知らないで書いているか、HTMLが間違っている(IDが複数回使われている)可能性があります。あとは、他のページではbodyの子供ではない使い方がされている場合、それには適用させたくないとかが考えられます。 　これらセレクタや詳細度を含むカスケーディングの仕組みはCSSで最も重要な部分ですから、通常は最初に叩き込まれます。 詳しくは 5. セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 6. 値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 直、詳細度の計算は現行のCSS2.1では訂正されています。 6.4.3 Calculating a selector's specificity ( http://www.w3.org/TR/CSS2/cascade.html#specificity ) ★最初にここらあたりを学んでおかないと、とてつもなく巨大なCSSを書く羽目になりますよ。 　　
こんにちは。 何らかの条件により、サイズなどが原因で要素を描画させたくない場合、最も的確なのはサーバからその部分を送信しないことです。 そのためにはphpなど、サーバサイドスクリプトを使うのが最も簡単で確実です。 次善の策は、送信内容に含めず、javascriptで必要な場合にのみロードする方法です。 jQuery等のDOM操作で、 $(function(){ 　if (何らかの条件) { 　　$(ターゲットセレクタ).html("<img src='hoge.jpg'/>"); 　} }); また、htmlコンテンツそのものを分割し、Ajaxで読み込むことにより、コンテンツ表示内容を可変する方法もあります。 $(function(){ 　if (何らかの条件) { 　　$(ターゲットセレクタ).load("hoge.html"); 　} }); CSSでマークアップの内容を最適化したり、無理のない表示を行うことはできません。
標準のテーマに付いているので、それを参考にテーマファイルを編集すればいいと思いますけど。 どのファイルを編集するのかは、テーマによって異なります。
TwitterBootstrapといっても、単にHTMLとCSSで表示を行っているだけであり、navbarであると否かを問わず、特別なことは何もしていません。 フォント指定は通常通り、オーバーライト記述すれば問題ありません。 Webフォントでも問題なく使えてますよ。 ＞別途スタイルシートを作って読み込んでも反映されません おそらくその内容が間違っていると思われます。
　申し訳ありません。先ほど99lime見てきました。なるほど良いアイデアですね。単にclass名を付加するだけでスタイルシートが適用される。 　しかし、その仕組み自体がわからないと言われたら打つ手がありません。とてもじゃないですが、あまりにも基礎的なことでそれをここで説明しようとしたら、字数も足りないし、満足な説明なんてできやしない。 　まずデザインのセンスとHTMLやCSSの書き方はまったく別物です。絵の具とそれを調合して希望の色を作ることと、実際にそれで絵が書けるかは別の問題です。そのサイトは「絵の具の調整はできる」けど「面倒くさい」、そして「絵を描く能力もない」かたむけのサイトです。 　そのため最低限「絵の具の調整はできる」はできる必要があります。 1) まずHTMLの基本--HTMLはその文書をそれを構成す要素に分解して、それぞれの要素がその文書にとって何であるかをマークアップする言語であること--デザインのためではありません。そのマークアップができること。 2) スタイルシートはその文書構造をどのように表現するかを指定するもので、それぞれ、どの要素にどのスタイルを指定するかは、カスケーディング機能やセレクタなどを使うこと。特にセレクタの知識はとても重要です。 　それらに的を絞って、まず基礎を身につけてください。そうしたら、「スタイルを適用したい要素にclass名をつけるだけです。」と言う意味が理解できるようになります。
htmlのfontタグやcolorタグでも見た目を変更することができます。 しかし、語弊を恐れずに言えば、fontタグやcolorタグを使う手法は昔のものです。 そして今はstylesheetを使うのが主流です。 ここでfujino00さんが考えるべきことは、「なぜ昔の手法は使われなくなったのか」ということです。 stylesheetを使用することには多くのメリットがあります。 代表的なメリットを言うならば、効率がよく制作が楽ということです。 そのメリットの詳細は、是非、ご自身で検索していただきたいところですが、簡単に表現すると、デザイン(レイアウト・色・透明度・大きさ)を一元管理できるということです。 100ページあるホームページを想像してみてください。 仮に、その全てのページ内に<p>ようこそホームページへ</p>という文字列があったとします。 全てのページのその文字列の色を変更しなければならなくなったとき、全てのページを開いて編集しなければならないのが昔の手法(font/color)です。stylesheetなら1行の修正で終わります。 もちろん、他の方が回答されてるように、HTMLの文章構造的な意味合いもありますが、まあ、そこれは追々理解すればよいでしょう。
すこし時間が経ってますが。 >No.6お礼 http://www.htmq.com/htmlkihon/005.shtml HTML5については種類が多く複雑ですが、 基本はフレージングコンテンツの中にほかのコンテンツを入れる事は出来ない、と覚えておけば問題にはならないと思います。 （例外はありますが、あくまで例外として、使わなければ問題になりません。） http://www.htmq.com/html5/007.shtml 他の方も書いてらっしゃいますが、spanの中にpやolを入れる事が無理なので、質問文にある希望動作をさせる事はできません。 divで書き直すなどしてください。
＞まずはｈｔｍｌで全体を書いて、その後にデザインをしたほうが、Webサイト作りは覚えやすいのでしょうか？ 　もちろんです。スタイルシートはブラウザ自体がある程度は持っています。 →HTML 4.0におけるスタイルシートの例 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 「CSSのfloatとdivについて質問です。 - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7728329.html#a2 )」にごく簡単なHTMLのソースが上げてあります。 (注意)ソース中<script src="http：//html5shiv.googlecode.com/svn/trunk/html5. …となっている部分はこのシステムの仕組みで省かれていますので、右クリックでリンクをコピーして<script src="http：//html5shiv.googlecode.com/svn/trunk/html5. …">と書き直してください。 (注意)このソースはHTML5で書かれていますので、HTML4.01にする場合は、次のように変更してください。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> <meta http-equiv="content-type" content="text/html; charset=UTF-8"> <title>サンプル</title> <meta http-equiv="Content-Script-Type" content="text/javascript"> <meta http-equiv="Content-Style-Type" content="text/css"> <link rel="stylesheet" type="text/css" href="./sample.css" > <style type="text/css"> <!-- --> </style> </head> 　また、HTML5の新しい要素については、それぞれ対応する閉じタグと共に下記のように書き直してください。 ＿<header> ・・・【中略】・・・ ＿</header> ↓ ＿<div class="header"> ・・・【中略】・・・ ＿</div> ＿＿<nav> ・・・【中略】・・・ ＿＿</nav> ↓ ＿＿<div class="nav"> ・・・【中略】・・・ ＿＿</div> ＿<section> ・・・【中略】・・・ ＿</section> ↓ ＿<div class="section"> ・・・【中略】・・・ ＿</div> ＿＿<figure class="main"> ・・・【中略】・・・ ＿＿</figure> ↓ ＿＿<div class="figure main"> ・・・【中略】・・・ ＿＿</div> ＿＿<aside> ・・・【中略】・・・ ＿＿<aside> ↓ ＿＿<div class="aside"> ・・・【中略】・・・ ＿＿<div> ＿<footer> ・・・【中略】・・・ ＿</footer> ↓ ＿<div class="footer"> ・・・【中略】・・・ ＿</div> 　ちなみにこれらのHTML5の要素は、HTML4.01で使われているはずだったclass名が新しい要素になっただけです。『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　したがって、書き直したHTMLはHTML4.01としても理想的なものになるはずです。 　その上で、回答No.2 ( http://oshiete.goo.ne.jp/qa/7728329.html#a2 )に書かれている課題をクリアするようにスタイルシートでデザインする。この積み重ねが最も早く上達する方法でしょう。HTMLには本当に率直に文書構造しか書かない、文書構造がわかりにくいときは、class名で補完する。 　その回答例が、 Webサイトにスライディングサイドバーを設置したい - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7728373.html ) 　にあります。 　上にラインを引きたければ、 body{border-top:blue 10px solid;} と書けばすむだけです。 　あなたの書かれたHTMLの<head></head>内に <meta http-equiv="Content-Style-Type" content="text/css"> <style type="text/css"> <!-- body{border-top:blue 10px solid;} --> </style> を書き加えるだけで、あなたの希望はかなえられるはずです。HTML本体には一切手を加えずにね。 　私が、新入社員に指導している方法を簡単にまとめたものが Webデザインの勉強の仕方 - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7722342.html )への解答に書きました。 ・HTMLは文書構造をマークアップすること ・その文書構造を元にデザインすること 　うまくデザインできないときは、文書構造がマークアップされていないことが原因 　HTMLを見直そう 　この繰り返しです。特にいずれHTML5が勧告されて多くのブラウザで使えるようになるでしょう。最低でも５年かかると思っています。それまでにはHTML4.01strictを身につけておきましょう。そしたら HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　を補習すれば良いでしょう。 なお、HTMLを書いたらこまめに ★Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html ) でチェックすることも忘れないように 　
＞テンプレートを修正する時、ローカル側の作業は一つのファイルの修正だけで済むのですが、それを全てのフォルダに適用させるには、フォルダ一つ一つに同じファイルをアップロードする作業を繰り返すことになります。 あの、だから 差し分アップロードのボタン（オプションで変更のあったファイルだけアップロード（上書き）する）をクリックさえすれば日付などをチェックして更新のあったファイルだけアップロードしてくれますから、手間は最初にアップロードのアイコンをクリックする事だけですよ それが手間なら、アップロードを他人に任せるしかないですよ＾＾
　説明が解り難かったかな・・これは日本語と言う単語境界のない言語の特性です。私たちが普段見る新聞記事や教科書でも強調フレーズであっても、行末で折り返されることがありますね。英文では単語の途中で折り返すことは禁じられていますから、その単語フレーズ要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )に対しの処理が変わってしまうのです。 　前後に半角スペースをとって英文を記述して半角スペースを(折り返し禁止の空白単語境界)を書けば折り返されません!!!しかし日本語では他の場所で折り返されてしまいます。 　そこで折り返したくない要素についてはスタイルシートでwhite-spaceを指定します。下記にHTML4.01のサンプルを挙げておきますので、説明とソースを良く見比べて理解してください。なお、white-space処理は、外部スタイルシートやhead内ではなく、特定の要素一つ一つにstyle属性で指定してください。長いフレーズ要素の場合に日本語では、不都合が生じます。 ★タブは＿に置換してあります。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- em{color:red;white-space:nowrap;} strong{color:green;} p{line-height:1.6em;margin:0;text-indent:1em;} p[lang|="en"]{line-height:1.2em;margin:1.33em 0;line-height: 1.12em;color:blue;text-indent:0;} p[lang|="en"]:first-letter{float:left;font-size:2em;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>このページではフレーズ要素の折り返しについて説明しています。</p> ＿</div> ＿<div class="section"> ＿＿<h2>原文</h2> ＿＿<p lang="en-us">The presentation of phrase elements depends on the user agent. Generally, <em>visual</em> user agents present <strong>EMtext in italics and STRONG text in bold font</strong>. <em>Speech synthesizer</em> user agents may change the synthesis parameters, such as volume, pitch and rate accordingly.</p> ＿＿<h2>邦訳</h2> ＿＿<p>フレーズ要素のプレゼンテーションは、ユーザエージェントに依存する。 概して、<em>視覚系</em>ユーザエージェントは<strong>EMテキストをイタリックで、またSTRONGテキストをボールドなフォント</strong>でプレゼンテーションする。 <em>音声合成</em>のユーザエージェントは、音量、ピッチ、速度等の合成パラメータを、適宜変えるであろう。 </p> ＿＿<p> ＿＿＿この段落の強調文字は、「<strong style="white-space:nowrap">ここでは改行しません</strong>が、<strong>ここでは改行します。</strong>」のように、日本語のフレーズに関してはスタイルシートでwhite-spaceの処理を指定する必要があります。 ＿＿</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-10-06</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
ウィンドウの高さは、html,bodyにheight:100%;position:relative;で参照できるようになりますが・・その方法でも期待通りにはなりません。なぜなら内容のない部分までスクロールさせないように・・ユーザーに全部でどこまであるかスクロールバーで判断できるようになっているからです。 　堅苦しい説明は置いておいて、似た状態にするには文書全体を<div>、HTML5では<article>で括ってしまえば良いです。 ★Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html ) で検証済みのHTML4.01strictです。タブは＿に置換してあります。 *{ margin:0; padding:0; } は指定しないほうが良いです。他の要素が登場するたびにすべて再設定が必要になりスタイルシートが煩雑になります。 header,section,footerなどセクションを示す名称は複数回登場するものなのでIDではなくclassで指定しましょう。 　HTML5では、そのまま書き換えればよくなります。classだと詳細度が低く、かつ複数個所が一度に設定できますから・・ IDはリンクやjavascriptのターゲット、文書内に必ず一度しか登場し得ない要素にのみ使用するほうが楽です。 [HTML5] <body> 　<header></header> 　<section> 　　<section></section> 　　<article> 　　　<header></header> 　　　<section></section> 　　　<footer></footer> 　　</article> 　　<aside> 　　　<h2></h2> 　　</aside> 　</section> 　<footer></footer> </body> <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;width:100%;height:100%;position:relative;} body{line-height:1.6em;} h1,h2,h3,h4,h5,h6,p,dl,div{margin:0;line-height:1.6em;} div.article{width:80%;margin:0 auto;padding:0;border:solid 1px red;min-height:100%;} div.article>div>*{margin:0 20px;} div.article>div>pre{width:80%;margin:10px auto;padding:0.5em 1em;} /* 色分け */ body{background-color:gray;} div.article{background-color:green;}/* ここに背景を指定する */ div.header{background-color:aqua;} div.section{background-color:yellow;} div.footer{} pre{background-color:white;} --> ＿</style> </head> <body> ＿<div class="article"> ＿＿<div class="header"> ＿＿＿<h1>タイトル</h1> ＿＿＿<p>このページでは・・・・</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h2>見出し</h2> ＿＿＿<p>footer部分の高さをmain部分の文章量に応じて、</p> <!-- 文章が長いときは・・ ＿＿＿<p>footer部分の高さを変えたいと思います。</p> ＿＿＿<p>■main部分の文章量が多く画面がスクロールできる状態は</p> ＿＿＿<p>footer部分の高さを200pxにします</p> ＿＿＿<p>■main部分の文章量が少なく画面下に余白ができてしまう場合は</p> ＿＿＿<p>footer部分で埋めます</p> ＿＿＿<p></p> ＿＿＿<p>header,main,footerの外枠としてcontainerがあります</p> ＿＿＿<p></p> ＿＿＿<p>下記のソースコードがヒントになるかと思い少し変えてやっていますが</p> ＿＿＿<p>うまくいきません。</p> ＿＿＿<pre>*{ margin:0; padding:0; } html,body{ height:100%; } div#footer{ background-image:url(back.jpg); height:100%; min-height: 100%; } body > #container > #footer { height: auto; }</pre> ＿＿＿<p>ご指導いただけないでしょうか。</p> ＿＿＿<p>よろしくお願いいたします。</p> --> ＿＿</div> ＿＿<div class="footer"> ＿＿＿<h2>文書情報</h2> ＿＿＿<dl class="documentHistry"> ＿＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿＿<dd>2012-08-10</dd> ＿＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿＿</dl> ＿＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿＿</div> ＿</div> </body> </html>
KAKASIなど漢字→かな変換のアプリを噛ませるとよいでしょう。
表示対象のサイズと画面のサイズから表示する位置を決め、それに画面のスクロール量を足してください。 jQueryではありませんが、このあたりが参考になるかも。 http://archiva.jp/web/javascript/get_page-size.h … （いろいろやらなくても、jQueryがやってくれますが…）
牡丹雪。 寒色でも「暖かい絵柄」というのはありますので、そういうのを探すといいんじゃないでしょうか。
>No.3お礼 >画面全体が一瞬で切り替わるときと切り替わらないときがありますね。 ネットワークやサーバー、パソコンの状況は一定ではありませんから、全体に読み込みが遅くなったり、一部分だけ遅くなったりする事はよくあります。 たまたま遅くなった時に一瞬で切り替わらなくなります。
＞headerには直接内容は入らないんですか。 　書いては、チェックを頼んでたら埒があきません。私もたまったものじゃない。 　とにかく仕様書を読んで理解することは自身で行ってください。私もあなたの質問に回答するたびに、念のため必ずチェックしているのですよ。 <!-- <div id="main">こんなもの要りません。--> <article> 　<header> 　　<p><time datetime="2012-9-30">2012年9月30日</time></p> 　　<!-- tinme要素はフレージング・コンテンツ--HTML4で言うところの行内要素 フレーズという単語はわかりますよね、--> 　<!-- header内には見だしがあるはずでは？ --> 　</header> 　<section> 　　<hgroup> 　　　<h1>タイトル１</h1> <!--　　　<p>本文１</p> hrgoupにはh1要素しか入れられません --> 　　</hgroup> 　</section> 　　<p>本文１</p><!-- ここに来るはずです。 --> 　<section> 　　<hgroup> 　　<h1>タイトル２</h1> <!--　　<p>本文２</p> hrgoupにはh1要素しか入れられません --> 　　</hgroup> 　　<p>本文１</p><!-- ここに来るはずです。 --> 　</section> 　<footer> 　　<p class="relative"><a href="">前</a> | <a href="">次</a></p> 　　<!-- この様なところにdivを使うのはおかしい またnavを使うべきではない --> 　</footer> </article> 　divは、あくまで要素(タグ)が足りないときにidやclass名と組み合わせて文書構造を示すために使うのです。単にリンクの段落(paragraph)でしたら<p>とマークアップしてclass名をrelative(関係者)とかをつけておけば、どこに登場しても統一できる。sectionの最後に <p class="relative"><a href="">前</a> | <a href="">目次</a> | <a href="">次</a></p> とかね。今は使わなくても将来の可能性も考えます。そのためにも一度しか書けないidよりはclass名を使うほうが良い。 最後に仕様書のURLをあげて置きます。 ※HTML5 ( http://www.w3.org/TR/2011/WD-html5-20110525/ ) 　→要素(Elements)の索引 ( http://www.w3.org/TR/2011/WD-html5-20110525/inde … ) 　ここでhgroupを見ればchildlen(子供)には「One or more h1, h2, h3, h4, h5, and/or h6」「ひとつ以上のh1, h2, h3, h4, h5, および h6」と書かれていますよ。 また、先にも紹介しましたが ※Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html ) 　のDATA入力(タグで選択)してもよいでしょう。
SEOを誤解している？ 　h1はそのページの見出しですから、ページの内容を適切に示したものであることが望ましいです。言い換えればtitleと同じものです。 　それをどのように表示するかはスタイルシートの問題です。 　また、hgroupはHTML5の要素ですが、HTML5ではhgroupは必要最小限--他に方法がないときに使用します。文書構造を考えると <header> 　<h1>このサイトのタイトル</h1><!-- 他のページと同じ --> </header> <section> 　<h1>本文の見出し</h1><!-- titleと同じ --> 　<section> 　　<h2>この章の見だし</h2> 　　<p>記事</p> 　　<section> 　　　<h3>この項の見だし</h3> 　　　<p><time class="date" datetime="2012-10-05">October 5</time></p> 　　　<p>記事</p> 　　</section> 　　<section> 　　　<h3>この項の見だし</h3> 　　　<p><time class="date" datetime="2012-10-05">October 5</time></p> 　　　<p>記事</p> 　　</section> 　</section> でしょう。h要素があるということは新しいsectionがあるはず、逆にひとつのセクションには二つ以上のhがあるはずがない・・と言う前提です。やむをえない場合にhgroupをつかう。 　なお、HTML5では、h1～h6の添数字は意味を持ちません。その代わりにsectionの階層が意味を持ちます。そのためすべてh1を使うこともできます。それぞれ長短があります。 【すべてh1で統一した場合】 　ページの改訂で階層を変更しても既存の部分を変更する必要がない。メンテナンスが容易になります。 　仕様書では ・sectionで階層をつけてそれぞれにh1を使用する。 ・sectionの階層に見合ったh要素をつける。 　のいずれかを使用することが強く推奨されています。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Sections may contain headings of any rank, but authors are strongly encouraged to either use only h1 elements, or to use elements of the appropriate rank for the section's nesting level. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4.4 Sections — HTML5( http://www.w3.org/TR/2011/WD-html5-20110525/sect … )］より 　詳しくは上記を参照してください。
まず、HTMLをチェックしましょう。 ★Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html ) 　確かに、HTML5ではA要素で<li></li>を括ることはできますが、この場合は 　<li><a></a></li> 　とすべきです。以下、タブは全角スペース２個に置換してあります。 <nav id=#grovalNavi"> 　　<ul> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　</ul> </nav> とすべきです。 nav {display: block;width: 300px;margin: 0 auto 18px;} nav ul,nav ul li{display:block;list-style-type:none;margin:0;padding:0;position:relative;} nav ul{ 　　border-radius: 8px; 　　border: 1px solid #CCCCCC; 　　background-color: #EEEEEE; 　　background: -moz-linear-gradient(white, #E7E7E7); 　　background: -webkit-gradient(linear, left top, left bottom, from(white), to(#E7E7E7)); 　　line-height: 26px; 　　text-align:center; } nav ul li{height:33px;} nav ul li a{ 　　text-decoration: none; 　　color: #646464; font-size: 18px; 　　display:block;height:95%;width:80%;margin:auto; } nav ul li {border-bottom: 1px solid #CCCCCC;} nav ul li:last-child {border-bottom-style: none;} しかし、最後の二行は、次のほうが良いです。borderの引かれる順番があるので・ nav ul li+ li{border-top:1px solid #CCCCCC;} ★上記スタイルシートは、aをblockにしてありますが、上下のリンクエリアとの間にリンク不能のスペースを取りましょう。
jQueryプラグイン「tabSlideOut」使用法 http://www.building58.com/examples/tabSlideOut.h … ちょうどタブスライダを探していたところだったので、質問主さんの記事にあるjQueryプラグイン「tabSlideOut」の使用法を日本語訳してみました。 すげえ簡単。基本は、 $(function(){ $('セレクタ要素').tabSlideOut({オプション}); }); だけです。 スライドさせるボックスを最後に記述しておいて、「タブ」になる画像はJavaScript側で定義すると、位置設定やアニメーション定義を全自動でやってくれます。 左だけでなく、右側タブや上下タブもＯＫ。 複数タブも問題なくできました。 // jQueryプラグイン TabSlideOut使用マニュアル // 注意：jQueryを別途読込のこと // js本体読込 <script src="http://tab-slide-out.googlecode.com/files/jquery … // タブスライダ動作定義 <script type="text/javascript"> $(function(){ $('.slide-out-div').tabSlideOut({ tabHandle: '.handle', // 「タブ」につけるクラス名 pathToTabImage: 'images/tab.gif', // 「タブ」画像のパス imageHeight: '122px', // 「タブ」画像の高さ imageWidth: '40px', // 「タブ」画像の幅 tabLocation: 'left', // 「タブ」スライダの位置 top / right / bottom / left speed: 300, // アニメーションタイム action: 'click', // アクション開始イベント click / hover topPos: '200px', // 上辺からの距離（スライダ位置がleft/rightの場合） leftPos: '20px', // 左辺からの距離（スライダ位置がbottom/topの場合） fixedPosition: false // 固定フラグ（オプション）trueでスクロールしても位置固定 }); }); </script> /* タブスライダのCSS */ <style type="text/css"> .slide-out-div { padding: 20px; width: 250px; background: #ccc; border: 1px solid #29216d; } </style> <!-- タブスライダのHTML </body>直前に入れる --> <div class="slide-out-div"> <h3>タブスライダのテストです</h3> <p>こんないいスライダ教えてもらってサンクス。</p> <p>上下スライダを探していたところだったので捗るわ。</p> </div>
他の質問と合わせて、ごく簡単な例を挙げておきます。HTML5でもっとも大事なことは、文書の構造化です。デザインのためのHTMLは記述しない・・これがHTMLを学ぶ上でもっとも大事なことです。 　下記に極めて標準的なHTMの雛形を作成します。HTML5で作成しておきます。実際は実用的なHTML4.01strictで作成してください。他のDTDは使わない!! 　このHTMLに対して、次の４つのデザインをスタイルシート【CSS2.1の範囲内】で設定してください。 (注意)HTMLには一切手を加えないこと。 [CSS1]永続的スタイルシート 　使用するフォント、日本語向けにpやhについては縦方向マージン0、line-height:1.6emを指定 　わかりやすいように、それぞれに背景色を指定しておく 　　body:gray,header:yellow,section,white,section>section:silver, 　　aside:aqua,aside:first-child:lime,footer:fuchsia,nav:teal とする。 [CSS2]スクリーン用標準スタイルシート ・ウィンドウ幅の90%でかつ、最小640px～最大900pxでウィンドウ中央に表示、ウィンドウが900pxを超える場合は900px ・header幅いっぱい ・section内の最初のaside(本文と直接関係ない記事)はsection内の右側 ・section内の二つ目のasideはsection内の左側 ・section内のnavはsection最下段 ・footerは全幅 [CSS3]スクリーン用代替スタイルシート/視覚弱者向け ・ウィンドウ幅の100%でかつ、最小640px～最大1000pxでウィンドウ中央に表示、ウィンドウが1000pxを超える場合は1000px ・header幅いっぱい ・section内の最初のaside(本文と直接関係ない記事)は表示しない ・section内の二つ目のasideはsection内の下側に枠つきで表示 ・section内のnavはsection最下段 ・footerは全幅 [CSS4]印刷用スタイルシート ・navは印刷しない ・section内の最初のaside(本文と直接関係ない記事)は印刷しない ・section内の二つ目のasideはsection内の下側に枠つきで印刷 <!doctype html> <html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="ORUKA1951"> <!--[if IE]> ＿<script src="http://html5shiv.googlecode.com/svn/trunk/html5. … ＿<script src="http://css3-mediaqueries-js.googlecode.com/svn/t … <![endif]--> <style media="screen"> <!-- --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#">Some</a></li> ＿＿＿＿<li><a href="#">navigation</a></li> ＿＿＿＿<li><a href="#">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿＿CSSのfloatとdivについて質問です。 ＿＿</p> ＿＿<p> ＿＿＿下記のようにmainの中にlocal-navigationを配置したいのですがやり方が分からないのでご教授お願いします。 ＿＿</p> ＿＿<p> ＿＿＿現在はlocal-navigationがfooterの上に表示されて自分の意図することが出来ていません。 ＿＿</p> ＿＿<figure class="main"> ＿＿＿<pre>┌──────────────┐ │header　　　　　　　　　　　│ │　　←------ nav -----→　　｜ ├───┬──────┬───┤ ｜aside │main　　　　│aside │ │　　　│　　　　　　│　　　│ │　　　│　　　　　　│　　　│ │　　　│　　　　　　│　　　│ │　　　│　　　　　　│　　　│ │　　　│　　　　　　│　　　│ │　　　├──────│　　　│ │　　　│←- nav --→│　　　│ ├───┴──────┴───┤ │footer　　　　　　　　　　　│ └──────────────┘</pre> ＿＿</figure> ＿＿<p> ＿＿＿sidebar-leftとsideba-rightはfooter部分まで伸びていて欲しいのです。 ＿＿</p> ＿＿<section> ＿＿＿<h3>A smaller heading</h3> ＿＿＿<p> ＿＿＿</p> ＿＿</section> ＿＿<nav> ＿＿＿<p>前のページへ | ページトップ | 次のページ</p> ＿＿</nav> ＿＿<aside> ＿＿＿<h3>Something aside</h3> ＿＿＿<p> ＿＿＿＿新着情報とか ＿＿＿</p> ＿＿</aside> ＿＿<aside> ＿＿＿<h3>Something aside</h3> ＿＿＿<p> ＿＿＿＿補足記事など ＿＿＿</p> ＿＿</aside> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
body要素に背景を指定して、中央に配置される要素に背景を指定するだけでよいです。
＞HTML5で書いているのでfloatを解除するのにclear:を使いましたがこれではダメなのでしょうか？ 　もちろん、floatを解除するのはclearですが、それは決して間違いではありません。 　大事なことは、floatの使い道です。本来は挿絵の周囲にテキストを回りこませるものですが、かってブラウザがきちんとサイズを判定できない時代には、絶対配置がブラウザ間の表示差の大下記な原因であり、致命的な問題であった時代があります。IE6やIEの互換モードとウェブ標準ブラウザの差です。 　絶対配置だとサイズの算出を間違えると内容がかぶさったりしました。floatでは避けてくれる。しかし、それは別の問題、HTML的には致命的な問題をはらんでいます。floatする要素を、floatされる要素の前に書かなければならないという問題です。 　たとえばB(目次)A(本文)C(脚注)と並べたい場合は、その順番ないしBCAという順番で書かなければならない。 HTML B→A→Cに対して B,A{float:left} または、 HTML BCAに対して B{float:left;} C{float:right;} ところが、そのページの主題はHTMLでは、Aに書かれているはずです。 絶対配置だと、 HTML A(本文)→B(目次)→C(脚注)に対して、 B{position:absolute;top:0;left:0;} C{position:absolute;top:0;right:0;} で良いですし、左右を書き換えるのもこの指定を変更するだけでよい。スマホ用に目次や脚注を末尾におきたければ、absoluteを止めればよい・・ 　そういう意味で、ブロックをfloatさせるのは好ましくないという意味です。さらに、本文内で挿絵を右や左にfloatさせて、かつ本文内の次の段落や見出しでclearすると全体がclearされて、肝心要のところでfloatが使えなくなります。 <header> </header> <section> 　<section> 　</section> 　<section> 　</section> 　<aside> 　<aside> 　<div class="contentTable"> 　</div> </section> <footer> 　<nav> 　</nav> </footer> 　は典型的なHTML5ですが、これを ページの最上部にnavをプルダウンでfixさせて、contentTableを本文の左に、脚注を本文の右に、footerは本文終了後に並べてください。スマホなど狭いディスプレイにはそれらを下に。とデザインできますよね。
目的がよくわかりませんが、 メモリに読み込んで画像処理を行うような場合のメモリ容量なら1画素当たりのバイト数をCとして「縦×横×C」で計算できるでしょうけど、ファイル容量にはならない場合があります。それはJPEG形式のように圧縮されている場合があるからです。 どのような場合の容量を計算したいのでしょうか？
メールフォーム云々という話題は、ちゃんとphpプログラムを経由した内容になっており、何ら問題はないと思われます。 文字化けの原因は、恐らくdudamobileが正しく問い合わせフォームの文字コードを変換できておらず、送信内容が違った文字コードで送信用phpに届いているためだと思われます。 フォームメール送信のphpに融通性がなく、Shift_JISが来るものと決め打ちしているのに、送信フォーム側がUTF-8などになっていることはありませんか？ 送信フォームに相当するhtml（あるいはphpかもしれない）をブラウザで開いた状態で、ブラウザが判定している文字コード、および<meta>タグで宣言されているエンコーディングの両方が正しくShift_JISになっていることを確認してください。 文字化けの原因はそれしかありません。 ただ、スマートフォンの一部機種（Android2.1以前）は、Shift_JISコードだと画面表示ができないので、本来は送信フォーム、送信phpプログラムも含めて、すべてUTF-8に統一するのが問題ないコンセプトだと思います。
最初のソースを利用すると .a1{ float:right;} .a{ width:200px; } .b{ width:50px; float:left;margin-left:100px; }/*★200-50-50＝100★*/ .c{ width:50px; float:left; } <div class="a1"> <div class="a">A</div> <div class="b">B</div> <div class="c">C</div> </div> でいかがでしょうか？ 文章構造を見た目になるように変更するのは文章構造と視覚デザインの分離の原則に反します。clearの為にdivやクラス名を追加するのは好ましくありません。ので、お気づきのように第2案はよくないです。 最初のソースに1つだけ加えました。但し、class名「1」は文法違反です。クラス名・ID名ともにアルファベットで始めなければなりません。[1]だと解釈しないブラウザもありますので、便宜上a1としました。 ★蛇足 また、第2案ですが、 <div class="1"> <div class="a">A</div> </div> <!--これ消す <div class="2"> --> <div class="1 2"><!-- スペースを空けて、クラス名をいくつでも追加できます　--> <div class="b">B</div> <div class="c">C</div> </div> <!--これ消す </div> --> というように、1つの要素にクラス名はいくつでも入れられますので、今後覚えておいても損はないと思います。
　デザイン---これはもう本人のセンスと才能による部分が大きくて何ともアドバイスしにくいですね。どんなに説明してもできない人もいるし、ラフ図を示しただけで・・ 　Illastratorから入られた方の一番の難点は、カタログやパンフレットのデザインから抜け出せないことです。Webのデザインは、それらとはまったく異なる物だと指摘します。--そんなに異なるわけではないけど、そのくらい言わないと理解してもらえないくらいです。 　ウェブは、その誕生や普及の最大の理由は、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　優れたデザインとは、このウェブやHTMLの理念に沿っているか否かをまず第一位に考えて、その上で表現力が問われること。特にWAI(ウェブコンテンツ・アクセシビリティ・ガイドライン ( http://www.zspc.com/documents/wcag10/ ))は忘れてはならないでしょう。 ＞理論を学んでもデザインに活かすのが難しく、断念した 　これは、「あなたが考えているデザイン」と「ウェブでのデザイン」が違ったためにぶつかった壁だと思います。 　また、現在忘れてはならないのが文書構造が正しくマークアップされているかも重要な要素になります。Googleのウェブマスターガイドラインを読まれていると思いますが。 ★ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ ( http://support.google.com/webmasters/bin/answer. … ) 　→デザインとコンテンツに関するガイドライン ( http://support.google.com/webmasters/bin/answer. … ) 　とページ内のリンクをすべて理解しておくこと 　HTMLのデザインで最も重要なことは、まず文書構造です。スタイルシートも画像もjavascriptもflashも利用できないブラウザで、そのページに何が書かれているか正確に理解できること。・・・・これが第一歩です。 　その上で、スタイルシートで、パソコン用、携帯端末用、プリンター用、スマートホン用などにデザインしていきます。これら(media別のスタイルシート)を、たとえ用意していなくても、これらで利用できるようにするためには、HTMLの文書構造が必要なのです。 『思いついたデザインを紙に描いて試行錯誤した後、Illustratorで作成するといった工程』は方法としては、逆です。私が指導しているのは 1)まず、一切デザインなしでHTMLをマークアップして来い。 2)それができたら、数種類のデザインを渡してHTMLに一切手を加えることなく、それらのデザインをして来い。 　お分かりのように、(1)ができていないと(2)は不可能です。これを逆に行う「まずデザインを考えてHTMLを作成する」と、じゃ、今度は、このデザインにしろというとできない新人が多いです。 [例] 　たとえば次のようなスタイルシートを見れば、HTMLを見なくてもどのようにデザインされていて、それを2カラムにしたいとき、スタイルシートをどう書き換えれば良いかも想像が付きますよね。 html,body{margin:0;padding:0;} div.header,div.section,div.footer{width:70%;margin:0 auto;position:relative;} div.header{min-height:120px;} div.section div.section{width:auto;margin-left:15%;margi-right:15%;} div.header div.nav{position:absolute;top:100%;height:30px;line-height:30x;} div.header div.nav ol,div.header div.nav ol li{display:block;list-style:none;margin:0;padding:0;} div.header div.nav ol li{width:15%;float:left;} div.section{margin-top:30px;} div.section div.contentTable, div.section div.appendix{psition:absolute;height:100%;top:10px;width:15%;} div.section div.contentTable{left:0;} div.section div.appendix{right:0} なお、HTML5の場合は html,body{margin:0;padding:0;} header,section,footer{width:70%;margin:0 auto;position:relative;} header{min-height:120px;} section section{width:auto;margin-left:15%;margi-right:15%;} header nav{position:absolute;top:100%;height:30px;line-height:30x;} header nav ol,header nav ol li{display:block;list-style:none;margin:0;padding:0;} header nav ol li{width:15%;float:left;} section{margin-top:30px;} section div.contentTable, section div.appendix{psition:absolute;height:100%;top:10px;width:15%;} section div.contentTable{left:0;} section div.appendix{right:0} ですかね。 　デザインを決めずにHTMLをまずきちんと作成する必要(Illastratorから始めたらダメ)が理解できますかね。
文字化けだったらShift_JISになってるのが原因なのですが、 タグがそのままなのですね。 <body>より以前の部分をどのように記述されていますか教えていただけますか？
補足です。先に来るほうがレベル自体は高いはずですので、表示サイズを変えるには div.section h1{font-size:1.3em;} div.section h2,div.section div.section h1{font-size:2em;} を追加してくださいね。
質問がわかりません。自分でもきちんと整理しないとなにをすればよいかがわからないと思います。 HTML5では文書は原則として <body> 　<header></header> 　<section></section> 　<footer></footer> </body> が最小単位とみなす形になります。 　これを基に考えると (1)headerの高さは可変で、 　　block要素のheightプロパティのInitial: auto ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )ですから、なにもしなくてよい。 　　 (2)mainのheightも固定で常にheight上で中央 　height上のheightとは何のことでしょう。 (3)footerの位置は固定 　なにに対して固定するのですか？ 　・ウィンドウ 　・ページ 　・親コンテナブロック (4)footer下の色は背景色 　下と言うのは、z-index方向ではなく、画面の上下ですか 　footerより下には内容がありませんので、footerより下は画面には表示されません。 　ユーザーに意味のないスクロールをさせる、思わせぶりなそのようなデザインはしてはなりません。 　縦に長いページや短いページを想定してデザインを決めると良いでしょう。そのときに、サイズや位置が、自身なのか、親なのか、ウィンドウなのかを整理して理解すると、おのずと答えは出るはずです。 8. ボックスモデル ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 10. 視覚整形モデル詳細 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )
そのHTMLはとっても酷いものです。酷すぎて反吐が出そう・・ <br>の連続なんて考えられないし <table>にsummaryがないし いきなり<tr>だし、<body>は必須 bgcolor=とか、<center>なんか使いまくりですし・・・ 　phpの呼び出し因数は、ソースを見ればわかると思います。それをそのまま、No.6で示したHTMLのdt内、dd内に並べ替えて入れると良いです。 　tableのデーターは行で一塊ですが、tableを折り曲げるためには、列でまとめなければなりません。それは、こつこつと手作業になりますが難しくはないでしょう。めんどくさいだけです。
念のためですが・・ div.section,div.footer{margin-left:165px;} h1{text-align:center;} などで、よけとかないと・・・ HTMLに変なことしてなけりゃ、スタイルシートでどうにでもなります。 HTMLがちゃんとしてれば、googleなんかも、きちんと理解してくれます。 IE8以前は、ゆっくりは開かないですが利用に差し支えはないでしょう。
peco33さん プレビュー状態で、トップページを開いてください。 body タグを見て、page-xxxxxxxxxxxxxというＩｄをコピーしておきます。 【サイドメニューを全て消す場合】 #page-xxxxxxxxxxxx.cc-pagemode-default #navigation{ ⇒　つづりあってるかな？ display:none;と入れます。 } .cc-pagemode-default ⇒　これは管理画面でない場合のみなので、管理画面でも不要ならいらない。 【ナビゲーションのメニューのみ消す場合】 #page-xxxxxxxxxxxx.cc-pagemode-default #sidemenu{ ⇒　つづりあってるかな？ display:none;と入れます。 } 【サイドバーのメニュー以外を消す場合】 #page-xxxxxxxxxxxx.cc-pagemode-default #sidebar{ ⇒　つづりあってるかな？ display:none;と入れます。 } 【HTML表示でアップロードした画像を表示させたい場合】 独自レイアウトのファイルアップロードのところで（IEの場合は、一度指定の画像をクリックして） 画像のプロパティーを調べてください。まず画像までのフルパスを取得した上で、 <a href="[画像までのフルパス]" /> で表示させることが出来ます。 上手く行くことを祈っております。 グッドラック！！
１．自由です ２．自由です ３．デカい顔 ４．小さい顔 答えの無い物を質問されても回答は出ませんよ。 参考にもならないし(^_^;
とても忙しいのですが、少し時間が取れたのでサイト拝見しました。 本当にまだ初心者なのですね。 ちょっとショックかもしれませんが、ページを作成したら ★Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html ) 　などでチェックするのがもっとも良いです。減点０の項目は宗教的なものもありますからこだわらなくて良いですが、減点数の書かれているものは治すと良いでしょう。 　Another HTML-lintは、厳しいですがなにが悪いかと、その解説や対策まで教えてくれるからとても勉強になります。 <DOCTYPE>の宣言がされていますが、今からはじめられるなら必ずstrictにするべきです。これは1999年のHTML4.01の勧告時に 『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』とされて来たものです。多分参考にされている書籍かサイトは相当古いものだと思います。 　というか、まったく仕様書を知らない人が作られたテンプレートではないかな。Another HTML Lintを確認するまでもなく酷いものです。 　その後、そのままXML化されたXHTML1.0の後、XHTML1.1が勧告されましたが、XHTML1.1ではstrict以外はありません。【現在、勧告直前になっているHTML5は、HTML4.01strictの改訂で、transitinal的なものは一切ありません。】 　そして、HTML4.01で方向性は示されていたのですが、それがまったく徹底していなかった反省からHTML5は、完全に文書構造とプレゼンテーション(表現)は分離されます。たとえば、 「構造とプレゼンテーションの分離 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 「単に文書内容を整形する目的だけで表を用いるべきでない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 ★<DOCTYPE>はおまじないなんかじゃありません。仕様書にきちんと書かれているルールです。これはブラウザ(IE)を標準モードで起動させるスイッチにもなっています。 →DOCTYPEスイッチ - Google 検索 ( https://www.google.co.jp/#hl=ja&safe=off&sclient … ) 　実は、DOCTYPEの宣言以上にあなたのサイトは、この点で誤りだといえます。厳しいですが、これは今後は絶対に守らなければならない条件の一つです。詳しくは ・スタイルシートの概説 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　など。 たぶん携帯やスマートホンを想定されたページだと思います。 本来は下記サンプルのようにシンプルなものであるはずです。 iframeはstrictでは使えませんので、objectを使っています。 そのため、targetは同様に使えませんので、それぞれのページにこのソースを書く方が良いです。 　→FRAME 問題 HTML - Google 検索 ( https://www.google.co.jp/#hl=ja&safe=off&output= … ) ★Anothe HTML Lint ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) でテスト済み (注意)　タブは＿に置換してあるので戻すこと！！！ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<meta http-equiv="Content-Script-Type" content="text/javascript"> ＿<title>pochette</title> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rel="stylesheet" type="text/css" media="screen" href="./test.css"> ＿<style type="text/css"> <!-- --> ＿</style> </head> <body> <!-- ここから --> ＿<div class="header"> ＿＿<h1>*pochette*</h1> ＿</div> <!-- ここまではすべてのページで共通 --> ＿<div class="section"> ＿＿<h2>本文</h2> ＿＿<p><object data="./main.html">新着情報は<a href="./main.html">新着情報</a>へ</object></p> ＿＿<div class="Navigation"> ＿＿＿<ul> ＿＿＿＿<li><a href="main.html">Top</a></li> ＿＿＿＿<li><a href="about.html">About</a></li> ＿＿＿＿<li><a href="material.html">Material</a></li> ＿＿＿＿<li><a href="bbs.html">BBS</a></li> ＿＿＿＿<li><a href="link.html">Link</a></li> ＿＿＿</ul> ＿＿</div> ＿＿<p><img src="./g8.png" height="273" width="250" alt=""></p> ＿</div> <!-- ここから --> ＿<div class="footer"> ＿＿<address>Copyright (c) 2012 *pochette* All Rights Reserved.</address> <!-- ここまではすべてのページで共通 --> <script type="text/javascript"><!-- この部分はFC2自動挿入なので省略 --> </script> ＿</div> </body> </html> [CSS] @charset "Shift_Jis"; html,body{margin:0;padding:0;} body{ ＿color: #808080; ＿font-family: 'Osaka,verdana'; ＿font-size: 10px; ＿letter-spacing: 1px; ＿line-height: 12pt; ＿text-align:center; } div.header,div.section,div.footer{ width:30%;min-width:320px; margin:0 auto; } div.section object{width:300px;height:200px;} a:link{color: #808080;} a:hover {color: #FF8040;} h1,div.Navigation{ background-image: url("./cccc12.png"); } div.section div{margin:20px
こんばんは、webデザイナーです。 jqueryのプラグインで出来ると思います。 下記ＵＲＬは参考サイトです。 http://webdesignfactory.schoolbus.jp/jquery_slide/
　現状では、HTML4.01strict【transitinalやframesetじゃない】とCSS2.1をしっかり身につけてください。 　それ以前の仕様やtransitinalやframesetは、まったく学ぶ必要がありません。 →『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。・・・・・推奨しない要素は、HTMLの将来のバージョンでは廃止になる可能性がある。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 ・HTML4.01は過去のHTMLの進んできた道への反省から根本的に見直された仕様で後のすべての仕様(XHTML1.0,XHTML1.1,HTML5)の基礎となる仕様で、現在のウェブ標準と考えて良いでしょう。HTML5はHTML4.01strictの改訂版です。 ・HTML5は、DOM,JavaScript,API,CSS3,WAIなど様様な仕様の総称でもあります。とても膨大でその基礎を身につけていないと太刀打ちできません。 ★Webの3つの問題を解決する「HTML5」とは何なのか - ＠IT ( http://www.atmarkit.co.jp/fwcr/design/benkyo/htm … ) 1) メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。. ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　まず、HTMLが正しくなければ、ブラウザが不正なHTMLを何とか表示しようとする過程で文書解析木が破綻してスタイルシートが適用されなくなります。 ・作成したHTMLを都度（ Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html# ) ）などでチェックして、指摘されたエラーとその解決方法に目を通していく。これは下手な参考書よりよっぽど役に立ちます。 ・HTML4.01の仕様書( http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … )を利用する。 『著者である読者に対しては、本仕様書が、HTMLの実装詳細に必要以上に触れずに使える、効率的・魅力的でアクセス性のよい文書を著述する際に必要な道具となることを望む。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　とてもよくできた、過去のW3Cの仕様書の中では秀逸なものです。HTMLの知識で必要なことは基本的にここにすべてある。 　当時と特に変わった点は、「文書構造」への注力です。これは先に紹介した「Webの3つの問題を解決する「HTML5」とは何なのか」の記事にある『次に挙げられる問題としては、「以前のHTMLは、文書構造の「意味」を表すための機能が不足していた」ということが挙げられます。 ( http://www.atmarkit.co.jp/fwcr/design/benkyo/htm … )』 　と密接に関わる部分ですが、HTML4.01の『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』と「HTML5の3.1. 新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」を読み比べれば、よく理解できるでしょう。 （スタイルシート） 　その上で、スタイルシートをきちんと学んでください。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　大事なことは「こんなことができる」というプロパティではなく--そんなものあとからいくらでも---セレクタやカスケーディングの仕組みです。 ★REC-CSS2 邦訳 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　※残念ながら、現在標準になっているCSS2.1の良い邦訳を知りません。いくつか重要な部分で改定がされています。特にセレクタの詳細度 　※変更点(CSS2.1 Appendix C 邦訳) ( http://www.d-toybox.com/spec/CSS2.1/appendixC/ ) 　参考書を挙げなかったのは、参考書は仕様書を知らない、理解していない時でないと書けないのです。----だって仕様書を見ればより端的に的確に正しい情報があるのに、わざわざ参考書を書くと言うことは「仕様書を知らない、理解していない」からではないかと、仕様書のこのページを読みなさいですむことをわざわざ本にはしない。 　以上挙げた資料だけでも、下手な参考書やネットと言う藁の山から針を探すより効率的ではないかと・・ 　リンク先と、その内容のリンク先・・などを読むだけで時間はつぶせる(^^)でしょう。その上で参考書を探すと、本当の意味であなたに最適な本が見つかるでしょう。
残念ながら誰もお助けできないのです。 エラーのあるHTMLやCSSをメンバーでない人は見ることが出来ませんし、実際のそのページのURLを公開することは禁じられている。 　あなたが対処するしかありません。そのためにはとても優れたソフトはあります。 firefox+firebug( https://addons.mozilla.jp/firefox/details/1843 ) 　それで、HTMLやCSSの確認や修正が簡単に出来ますが、そのためにはHTMLやCSSに対する正確で詳細な知識が必要です。それはあなた自身が身につけるしかないのです。
CSS3に対応したブラウザを使用していますか？ 使用しているブラウザは？ なお、CSS3は必要最小限にとどめて、CSS2.1で指定した宣言をCSS3の宣言で上書きするように書かないとなりません。 　なぜなら、CSS3に対応したブラウザはまだ少ないですし、勧告までしばらくかかりますから、その間に仕様変更がままあります。 　詳細度やカスケーディングと言う、CSS(カスケーディングスタイルシート)の命ともいえる部分に、マニュアルの半分以上割かれていないようでしたら、あまり参考にはならないかも・・
　SEO(Search Engine Optimization)は、元来は検索エンジン最適化と言う意味です。 すなわち、検索エンジンがそのページの内容を正しく理解できるようにマークアップされているかと言うことです。 　隠し文字がSPAMとみなされるのは、検索エンジン--テキストブラウザ---で読んだとき、あたかもそのページが特定のキーワードについて書かれているように見せかけて、本当は異なる記事が書かれているとみなされたときです。 　たとえば、最近では「尖閣諸島」をキーワードで検索する人が多いので、そのページは尖閣諸島にはまったく関係ないのに、記事にあたかも尖閣諸島について書かれているような記事を最初のほうに書いておいて、実際にはそのページはアダルトサイトへの誘導だったとか・・・ 　あなたが検索するユーザーの立場に立てば、そのようなサイトは除外してほしいはずですね。 　googleのアルゴリズムはわかりませんが、目的は理解できると思います。 　通常は、そのようなスタイル指定はありえませんね。 　しかし、次のようなHTMLははじかれません。 <div class="nav" id="siteMap"> 　<h2>サイト内目次</h2> 　　<ol> 　　　<li><a href="/">TOP</a></li> に対して、 div.nav h2{display:none;} あるいは div.nav h2{height:0;overflow:hidden;} 　理由はなぜかわかりますよね。ここで隠しているのは、それがデザインのためのものであり、そのブロックはナビゲーションであり、見出しは重要ではないことがgoogleのロボットには理解できるからです。navというclass名は、もちろんHTMLの仕様書のclass名の使用基準に従ったものですし、HTML5では要素名になったものですからね。 ★大事なことは、何のために隠さなければならないか。隠す必然があるものなら隠して構いません。たとえそれが見出しであっても・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 品質に関するガイドライン - 基本方針 ・検索エンジンではなく、ユーザーの利便性を最優先に考慮してページを作成する。 ・ユーザーをだますようなことをしない。 ・検索エンジンでのランキングを上げるための不正行為をしない。ランクを競っているサイトや Google 社員に対して自分が行った対策を説明するときに、やましい点がないかどうかが判断の目安です。その他にも、ユーザーにとって役立つかどうか、検索エンジンがなくても同じことをするかどうか、などのポイントを確認してみてください。 ・どうすれば自分のウェブサイトが独自性、価値、または魅力のあるサイトといえるようになるかを考えてみる。同分野の他のサイトとの差別化を図ります。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ( http://support.google.com/webmasters/bin/answer. … )］より 　検索エンジンであなたのサイトが引っかかって訪問したら、期待したものと異なる内容だった場合、その人はgoogleに投稿します。するとチェックされスパムとみなされたら、数ヶ月は・・・ 　ここに書かれているとおり、【検索エンジンではなく、あなたのサイトを訪問してくれる人々のためにページを作ればよい】だけです。 ★ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ ( http://support.google.com/webmasters/bin/answer. … ) 　と、このページのリンク先は隅々まで読んでおきましょう。 　私は世に言われるSEOはまったくしていません。ひたすら、文章の内容が検索エンジン【 にも】正しく理解できるよう文書構造だけをマークアップするようにしています。それでも、おかげさまで検索結果の一ページ目にいつも出てきます。
PHPから出力された結果のHTMLに対してスタイルを指定しなければなりません。 DOMを提示していただけると良いでしょう。 　firefoxの場合、通常のインストールでツールメニューにDOM inspectorがあります。 　スタイルシートで、header部分とその次のcontainerにスタイルがすでに指定してあると思いますが、その指定のセレクタの詳細度が高い--たとえば一意セレクタで指定してあると、classセレクタで指定しても当然利きません。また、同じ詳細度でもあとから登場していれば上書きされます。 　→5. セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　→6. 値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　セレクタを追加して詳細度を上げるとかの対策が必要かもしれません。 　firefoxにfirebugというアドオンがありますが、それでどの紆余にスタイルシートが適用されているか、あるいは上書きされているかを確認し修正ができます。 ＞何か原因があるのでしょうか？ 　もちろん原因はあります。 　ただ、それはあなたにしか調べる方法がないのです。それを調べて、その対策をするしかないです。そのためにはセレクタやカスケーディングと言うスタイルシートの最も重要な知識--marginやpaddingというプロパティ以前に知っておかなければならない、より重要な知識ですから。 　なお、示したスタイルシートの邦訳はCSS2のもので、現行のCSS2.1では詳細度に関して修正があります。 　→6.4.3 Calculating a selector's specificity ( http://www.w3.org/TR/CSS2/cascade.html#specificity )
推測で申し訳ないですが、スマホのブラウザの設定で、ページの自動調整という設定があります。(私のはAndroid2.3の標準ブラウザ) これをOFFにしたら原寸で表示されませんか？
スタイル指定を、セレクタで当該ナビゲーション内だけにとどめるしかありません。 根本的には、 *{padding:0;margin:0;} がすべての原因です。 　これをすると、すべてのタイプ(エレメント)が登場するたびに再設定せざるを得ず、スタイルシートは煩雑になり、本来のスタイルをすべて上書きすることになります。　これは仕様書の随所で強く非推奨とされているものです。 　私は、html,bpdy{margin:0;padding:0;}以外のリセットはしていません。 　将来のことを考えれば、全称セレクタによるmargin:0;padding:0;を消すべきです。その上で必要な要素のみ、padding:,margin:を指定すれば良いです。それだけでスタイルシートは随分とすっきりと小さくなるはずです。 　 　なお、示されたナビゲーションメニューは、Firefox,Opera,Safariでは、リンクに文字がかぶさって機能しません。IEとChromeは機能します。ただしjavascriptが有効なときのみ。 　javascriptを使用しないものに書き換えてみましたが、なぜかIEでは機能しない???使用には差し支えないが・・ 　また、HTMLは文書構造だけを記載した率直なものなので、スタイルシートを書き換えるだけで、どのようなナビゲーションスタイルにも変更できるでしょう。孫リストがあっても、ちょっと手を加えれば・・ 　しかし、プルダウンメニューにも対応していますし、ディスプレイ幅にも依存しません。スマホでも幅広ディスプイでも・・ ★Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html# ) で検証済み タブは＿に置換してあります。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} div.header{height:100px;margin-bottom:30px;} #siteNav{position:absolute;top:100px;color:white;text-align:center;width:90%;line-height:30px;left:5%;background-color:gray;height:30px;} #siteNav a{color:white;} #siteNav ol,#siteNav ol li{display:block;list-style:none;margin:0;padding:0;background-color:black;} #siteNav ol li ol li{font-size:0.8em;} #siteNav ol{width:90%;max-width:900px;margin:0 auto;position:relative;} #siteNav ol li ol{width:99.5%;left:-0.5px;margin:0;} #siteNav ol li{float:left;position:relative;width:19%;} #siteNav ol li a{display:block;width:90%;height:90%;text-decoration:none;} #siteNav ol li a:link{color:yellow;} #siteNav ol li ol li p{margin:0em 0.5em;} #siteNav ol li{border:silver solid 0;} #siteNav ol li+li{border-left-width:1px;} #siteNav ol li ol li{border-width: 0 1px;} #siteNav ol li ol li{display:block;width:100%;line-height:0px;overflow:hidden; transition-property: line-height; -moz-transition-property: line-height; -webkit-transition-property: line-height; -o-transition-property: line-height; -ms-transition-property: line-height; duration:1s; -moz-transition-duration:1s; -webkit-transition-duration:1s; -o-transition-duration:1s; -ms-transition-duration:1s; transition-timing-function:ease-in-out; -moz-transition-timing-function:ease-in-out; -webkit-transition-timing-function:ease-in-out; -o-transition-timing-function:ease-in-out; -ms-transition-timing-function:ease-in-out; } #siteNav ol li ol{visibility:hidden;} #siteNav ol li:hover ol li{line-height:30px;} #siteNav ol li:hover ol{visibility:visible;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿</div> ＿<div class="footer"> ＿＿<div class="nav" id="siteNav"> ＿＿＿<ol> ＿＿＿＿<li><a href="/">Home</a></li> ＿＿＿＿<li><a href="/product">Product</a> ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li><p>ナビゲーションメニュー素材を既存環境に導入したところ、paddingリセットが原因でスタイルが崩れてしまっています。</p></li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿＿<li><a href="/service">Service</a> ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li><a href="">Service</a></li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿＿<li><a href="/solution">Solution</a> ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li><a href="/solution">SolutionA</a></li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿＿<li><a href="/Contact">Contact</a> ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li><a href="/Contact/mail">Mail</a></li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿</ol> ＿＿</div> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2012-08-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2012-08-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2012 - 2016 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
>>1です。 仕事が忙しくてお時間がありませんでした。 CSSのBODYに、width: 1000px;を追加してください。 marginを設定する場合は、widthかheightなどの幅を指定するものが必須です。 まずはこれでセンタリングできます。 あと2か所、各コンテンツへのリンクの幅がおかしいのと、業務実績の横にpadding っぽい隙間が入っているのはまだ見つけておりません。 見つけたらご連絡いたします。
マーカーと吹き出しについては以前調べたのでお応えできます。 そのとき調べたMAP APIに関する英語のページはもうなくなってますので、追加情報を得られませんでした。 マップURLのパラメータを書き換えることでマーカーと吹き出しを消すことができます。 例えば、「q=35.004212,135.869105」というパラメータはその座標にマーカーを表示します。 この「q」の部分を「ll」に変更するとマーカーも吹き出しも表示されません。 吹き出しは、検索したときに付くので「q=検索文字列」となっています。その場合、一旦地図を動かしてからリンクを取得するとllパラメータが得られます。 点線で地域を囲む方法は見たことがないので、一度調べてみます。 参考URL：http://www.shurey.com/html/googlemaps.html
＞参考書や解説サイト等では、フォント名にスペースがある場合は、「"」か「'」を前後につけて指定をすると書いてあります。 　なぜ？まず仕様書を確認しないのですか？ 現在、ウェブ標準はCSS2.1ですが、CSS2.1では、 <generic-family> 　・・・【中略】・・・ Style sheet designers are encouraged to offer a generic font family as a last alternative. Generic font family names are keywords and must NOT be quoted. 　最後の選択肢として総称ファミリーを書かなければならない。これはキーワードなので引用符で囲んではならない。 ・・・【中略】・・・ To avoid mistakes in escaping, it is recommended to quote font family names that contain white space, digits, or punctuation characters other than hyphens: 　ホワイトスペース、数字、またはハイフン以外の句読点文字を含むフォントファミリの名前を引用することを推奨する。 　詳しい内容は仕様書を読んでください。--英文です--。 　CSS2当時は、単に『フォント名にスペースがある場合は、「"」か「'」を前後につけて指定』でしたが、現行のCSS2.1では、キーワード以外は""で括るべきです。 15.3 Font family: the 'font-family' property ( http://www.w3.org/TR/CSS2/fonts.html#propdef-fon … )
Element["data-id"]はまずいですが Element.getAttribute("data-id")は大丈夫です jQueryはおそらく後者なので大丈夫です あと属性名はx-で始めたほうがいいです
画像が大きい場合には必ずそうなります。 　ブラウザは逐次表示が必須とされています。転送や処理が間に合わないときも可能なものから順次表示すべきであることは、理解できると思います。 　画像を単色でシンプルなGIFなどにすると、その症状は実感できないと思います。逆に極めて大きな画像を背景にすると描画に時間がかかります。 　プログレッシブJPEGにするとかも良いでしょう。(画像によると逆効果の場合も) 　いずれにしても背景画像はユーザーにとっては邪魔以外の何者でもないので可能な限りデータ量は小さくしましょう。背景画像を見に来る人はいない。
＞classとidを両方記述するのはどういった意味があるのでしょうか？ 　目的が異なるからです。 7.5.2 要素識別子: id属性とclass属性 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　たとえば class名にnavと付いていれば、ナビゲーションと決めておく。たとえそれが本文(section)中にあろうとフッター(footer)内にあってもよいです。 　スタイルシートでサイト内のナビゲーションが統一されていたほうがよいので、 a:link{color:blue;}/* 詳細度[0,0,1,1]*/ div.nav li{background-color:blue;}/* 詳細度[0,0,1,2]*/ div.nav a:link{bolor:yellow;}/* 詳細度[0,0,2,2]*/ で普通は青だけど、ナビゲーションリストでは黄色（背景は青）と指定できて、 #siteMap a:link{font-weight:bold;}/* 詳細度[0,1,1,1]*/ としたり・・。 　スタイルシートに関わることだけについてみると、idでは詳細度が高く一箇所しか指定できませんが、classだと複数個所指定できます。classだと詳細度が低いため、詳細度を増やすことで簡単に上書きできますしね。 ＞なかなか膨大な情報量ですね＾＾； 　情報の量に比較したら、多くはありませんよ。ネット上の藁の山を探すより効率的です。 　印刷したら薄っぺらの本にしかなりません。HTML5は膨大ですが・・ 　
IE7の有名なバグです。 そのa要素が書かれている親要素またはa要素で、font-familyを指定してみてください。 font-family:"ヒラギノ角ゴ Pro W3", "Hiragino Kaku Gothic Pro", "メイリオ", Meiryo, Osaka, "ＭＳ Ｐゴシック", "MS PGothic",'arial',sans-serif; とか・・ ★Old Blog - Watercolor City | IE7限定のUnderlineに関するバグ ( http://www.watercolor-city.net/oldblog/blog/log/ … ) ★ADP: IE6/IE7のunderlineバグ ( http://adp.daa.jp/archives/000783.html )
HTMLのソースがわからないし、スタイルシートも無茶苦茶なので原因はわかりませんが・・ とりあえず、標準モードで起動するようにHTMLを直しましょう。 DOCTYPEスイッチ - Google 検索 ( https://www.google.co.jp/search?q=DOCTYPE%E3%82% … ) 　いまどき、互換モードやstrict以外で作成したら他のウェブ標準ブラウザとの差を吸収するのが大変になります。 『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』12年前から言われ続けてきたのに・・ 　それで、大抵のこの手の問題は治るはずです。 　なお、こんな複雑怪奇な文書構造がわからないHTMLと、それに起因するスタイルシートを学んでも意味がないような・・
javascript(fixed.js)を使うのに、その説明をしていませんでした。 doxdesk.com: software: fixed.js ( http://www.doxdesk.com/software/js/fixed.html ) の下にあるmoduleを右クリックして、fixed.jsと名前をつけて適当なところにおいてください。 <!--[if lt IE 7]> <script type="text/javascript" src="./js/fixed.js"></script> <![endif]--> のように、リンクも保存場所に合わせて訂正してください。 googleのライブラリを使ってもよいかも <!--[if lt IE 7]> <script src="http://ie7-js.googlecode.com/svn/version/2.1(beta4)/IE7.js"></script> <![endif]--> なお、fixedは、画面の下側に表示するpositionの値ですから、必然的にその下に表示される内容にかぶさりますから、その要素のmargin-bottomかpadding-bootomでfooterの最大高さの値を設定するのが良いです。 　absoluteを使う方法もありますが、その場合表示部分がウィンドウ高さより高いとfooterが表示されません。 　色々な小細工はありますが、HTMLの本来の目的が「様々な環境で利用できる」と言うものがある限り、小細工は薦めません。 　position:fixedでウィンドウ下部に表示して、かぶさってしまう要素にmin-heightとmargin/paddingを設定するのが良いでしょう。
PHP編集用に最適化はされていなかったと思います(CS5までは少なくともされてません)。 CMSなどをローカルサーバー上で解析して、PHPが出力したhtmlを逐一編集画面に表示させることが出来るだけです。
width,heightに%指定をするときは、親コンテナブロックのサイズを決めておかないと・・ bodyの背景で指定する場合は body{ background: fixed black url("images/1000.png") center no-repeat; background-clip: border-box; background-origin: padding-box; background-size: cover; }
　同じFC2とテンプレートを使っている人で、かつスタイルシートやHTMLに詳しい人でないと、とてもじゃないけど無理です。 　そのスタイルシートでは、HTMLの樹構造がどのようなものであるかわかりませんから、スタイルを変更したい要素<IMG>をどのようにセレクトすればよいかわからないからです。HTMLが酷い物だということは想像できます。 　文書中の特定の要素をセレクタで選択して、その要素に対してプレゼンテーションを指定するのです。 　たとえば、<div class="header"></div>要素内の二番目以降のすべての段落<p></p>に含まれる最初の<img>要素でしたら 　div.header p+p img:first-child{} とします。この様なスタイルシートでしたら、文書構造もHTMLを見なくても推測できますし、セレクタもそのまま記述するので修正も楽です。すべて.(クラスセレクタ)で指定してあるようなスタイルシートやHTMLじゃ無理です。 　この様な場合、firefoxをお使いでしたら標準インストールでDOM inspectorという文書構造を解析するツールがインストールされています(なければアドオンから)。 　それとfireBug( https://addons.mozilla.jp/firefox/details/1843 )を使って修正したい<IMG>要素を特定するために、セレクタ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )を組み合わせて、特定し画像のサイズをwidth,heighプロパティで指定することになります。 　知っていれば決して難しい作業ではなく、ものの数分もあればできるでしょう。知らない場合、その手法を教えるのはこの様な掲示板では無理です。最低限HTMLとCSSの仕様書を読んで概略を理解すること ★HTML 4.01仕様書 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★REC-CSS2 邦訳 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　いずれにしてもこの二つは必須な知識です。 　HTMLのソースのすべてと、スタイルシートを提示して誰かに修正してもらうか、自分で行うかのいずれかになるでしょう。
form select option{text-align:center;} <select name="slect"> <option value="" selected>選択してください。 <option value="abc">あああ</option> <option value="efg">あ</option> <option value="hij">ああ</option> </select> 　idはnameと同じでなければなりません、value="" id="item-1"はありえません。 　デフォルトの選択selectedを書いておきましょう。選択項目より長く 　text-alignに対応していないブラウザを考慮するなら <select name="slect"> <option value="" selected>選択してください。 <option value="abc">　　あああ　　</option> <option value="efg">　　　あ　　　</option> <option value="hij">　　ああ　　</option> </select> しかないでしょう。
No.2,No3です。 　面白そうなので、逆三角形の画像(2色、背景は透明)は用意してください。 　画像はサブ項目の数により勝手に伸縮します。 　画像を隠そうが消そうが濃くしようが・・お好きに・・・簡単ですが、色々と面白い仕組みになっています。これにCSS3のTransitionsなどを組み合わせると喜ばれるでしょう。 ※ただし、実用面では大いに？？？？？です。お遊び程度に考えてください。 　いちおうHTML4.01strict+CSS3です。 ★Another HTML-lint 5 ( http://www.htmllint.net/en/html-lint/htmllint.ht … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) ※タブは＿に置換してあるので戻すこと <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.nav{text-align:center;width:100%;height:2em;line-height:2em;} div.nav ol,div.nav ol li{display:block;list-style-type:none;margin:0;padding:0;} div.nav ol{width:100%;} div.nav ol li{display:inline-block;width:20%;position:relative;} /* ここから */ div.nav ol li ol{position:absolute;left:0;top:100%;height:auto;background:url(images/background/triangle.gif) no-repeat;background-size:100% 100%;opacity:0.2} div.nav ol li ol li{width:100%;margin-top:5px;} div.nav ol li ol li a{display:block;width:100%;height:100%;display:none;} div.nav ol li:hover ol li a{display:block;} div.nav ol li:hover ol{display:block;opacity:1;z-index:10; /* 画像を消す場合 */ /*background-image:none;*/ } div.section{position:relative;z-index:5;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="A">AAA</a> ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li><a href="A/1">AAA-1</a></li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿＿<li><a href="B">CATEGORY1</a> ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li><a href="B/1">BBB-1</a></li> ＿＿＿＿＿＿<li><a href="B/2">BBB-2</a></li> ＿＿＿＿＿＿<li><a href="B/3">BBB-3</a></li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿＿<li><a href="C">CATEGORY2</a> ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li><a href="C/1">CCC-1</a> ＿＿＿＿＿＿<li><a href="C/2">CCC-2</a> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿＿<li><a href="D">DDD</a> ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li><a href="D/1">DDD-1</a> ＿＿＿＿＿＿<li><a href="D/2">DDD-2</a> ＿＿＿＿＿＿<li><a href="D/1">DDD-1</a> ＿＿＿＿＿＿<li><a href="D/2">DDD-2</a> ＿＿＿＿＿＿<li><a href="D/1">DDD-1</a> ＿＿＿＿＿＿<li><a href="D/2">DDD-2</a> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・・</p> ＿＿<div class="footer"> ＿＿＿<h2>文書情報</h2> ＿＿</div> ＿</div> </body> </html>
＞19.9mmとは違います。 　実際にどのサイズまで縮小されうるかはわかりません。980pxよりも狭い範囲内に収まれば、そのサイズを768pxに縮小するのでは?
カスタム検索のフォームはスタイルシートで普通にデザインできますし、検索条件もカスタマイズできますが、検索結果はgoogleの提供するHTMLですので、それをデザインはできません。たとえそれが、frame,iframe,objectで指定してあっても無理です。 　サーバーのプログラムでsocet通信が使えるなら、サーバーから直接アクセスさせて得られたデータを解析して改めてHTMLを作成するなら可能かもしれませんが、多くのサーバーではソケット通信を開放していないので難しいでしょう。
No.2です。画像について補足 　画像ソフトは結構使います。 　ロゴなどは、ドロー系のソフト、3Dソフトがメインです。 　写真は、別ですが・・ 　HTMLとデザインセンスは切り離して考えましょう。
まず、HTMLは ホームページ作成 - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7689775.html ) 　の下の方と同じものとして、(サブメニューはあってもなくても構いません。) div.nav ol,div.nav ol li{list-style-type:none;margin:0;padding:0;} div.nav ol{display:block;width:100%;position:absolute;}/* ここだけ追加 */ div.nav ol li{width:22%;float:left;position:relative;} div.nav ol li ol{display:none;} div.nav ol li:hover ol{display:block;} /* ここから、サブ項目がなければ不要 */ div.nav ol li:hover ol li ol{display:none;} div.nav ol li:hover ol li:hover ol{display:block;position:absolute;left:100%;top:0;width:50%;} div.nav ol li ol li{display:block;width:100%;} /* ここまでは */ div.section{clear:left;} 　残しておいても問題ないです。将来サブ項目を増やすことがあったとき役に立つかもね。 　透過ですが、要素自体に透過をかけるのは要素が画像のときくらいで、この場合は背景色だけ透過させるほうが良いでしょう。とても見にくくなります。 div.nav ol li{background-color:rgba(255,255,255,0.5)} を書き加えてください。 　0.5は透過度で、0が透明1が不透明です。 rgbaはほとんどのブラウザが対応していますのでベンダーフィックスは不要です。 その前の三組の数値は、0～255で前から文字通りリRGBです。 セレクタの指定は、むつかしくありません。 CSS2では、基点となるセレクタにセレクタ(選択手段)を書き加えていくルールです。 基点セレクタを省略すると、それは*という全称セレクタを省略されたものとみなします。 しばしば、古い説明では .nav なんてのもありますが、適切ではありません。 *.nav と書くべきです。 　この場合*はすべての要素(HTMLで言うところのタグ)に当てはまりますから <p class="nav">にも、<ul class="nav">にも当てはまります。 div.nav ol,div.nav ol li{list-style-type:none;margin:0;padding:0;} と言うセレクタは div.nav ol div.nav ol li の二つを一度で指定しています。(セレクタのグループ化) div.nav ol li の.はクラスセレクタと呼ばれるもので、HTMLのclassは、半角スペースで区切られたリストで指定します。 [例] class="important memo" というふうに、クラス(学級とかと意味は同じです) 　そのリストの中にその言葉が含まれていればという意味ですから class="nav menue sitemap"とかにも当てはまります。 　その次のolとの間に半角スペースがありますが、これは子孫セレクタと言うもので、その子孫の---子供も孫も曾孫も曾々孫・・もと言う意味 　すなわち div.nav ol li navという値をclassの中に持つdiv要素の子孫のol要素の子孫のli要素と言う意味です。 　子供だけに適用させる場合は子供セレクタ>をつかって div.nav>ol>li と書きます。この場合は孫には適用されません。 ★このようにセレクタは、スタイルシートのすべての基本になります。セレクタを知っておくと、デザインのためにHTMLを書かなくて良いので、HTMLはシンプルになります。そしてスタイルシートも、それに合わせてわかり易く簡単になります。 div.nav ol li ol li{border:none;} div.nav ol li ol li+li{border-top:2px red solid;} と書けば、プルダウンメニューの上に線が入ります。 　+は兄弟セレクタと言って、liの弟(階層的に並列で次に来るもの)に適用されます。 ★セレクタとカスケーディングは、プロパティを学ぶより先に学んでください。プロパティなりはるかに重要です。仕様書でもプロパティより前に書いてあります。 5. セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 6. 値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　一応リキッドデザインなのでウィンドウ幅を変えてもよいはずです。
stylishなどでbody{ background-color: 色;}と設定するしかないと思いますよ。デザインがどういう風に崩れたのかわかりませんが、ごく薄い色にしてあげればいいんじゃないでしょうか？
1) プルダウンですかね？ 2) HTMLとCSSを動的に変更する(ページ全体の更新なしに変更する)jqueryという全く別の言語を利用していて、さらに言えばjqueryのライブラリであるjquery UIを利用しているようです(詳しい説明→ http://www.webcreatornote.com/2011/05/jquery-ui% … )。
IEしたら駄目です。 　そのページは互換モードで起動しますから、IE専用--IEの互換モードです。IE以外のすべてのブラウザでずれます。 DOCTYPEスイッチを書き換えて、標準モードで動かせば、IEでもずれます。 DOCTYPEスイッチ - Google 検索 ( https://www.google.co.jp/search?q=DOCTYPE%E3%82% … ) 受け取るときは最低限 ★Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html ) 　でチェック位はしましょう。 　原因は、IEの互換モードでは、その要素のサイズをpadding辺の外側、borderの内側にとることにあります。本来はpadding辺の内側でなければならない。 　tableのmarginを調整(0にして)して、外側のdivのpaddingの値を大きくしてみましょう。 firefox+firebug( https://addons.mozilla.jp/firefox/details/1843 )で修正してみたら、それでまともにはなります。 　しかし、Another HTML-lint の指示に従って、大きな減点項目だけは修正しないとまずいです。 　重大なエラーは Html Validator ( https://addons.mozilla.jp/firefox/details/249 ) でもチェックできます。
＞HTML4.01 transitionalは使うべきでないとされているとのことですが、一番使うべきHTML形式は、現在何でしょうか？ 　目的によって色々でしょう。 ★HTML&CSSの勉強方法について - HTML - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7673765.html ) ★HTMLとCSSのお勧めの本を教えてください - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7670050.html ) ★今から本格的にHTML勉強するなら - HTML - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7656262.html ) 　他のプログラムと連携するなら、親和性の高いXML/XHTMLでしょう。私は、世の大勢どおり(^^)、HTML2.0→HTML3.2→HTML4.01→XHTML1.0→XHTML1.1と進んできましたが、HTMLの登場予定で→HTML4.01strictに戻した手合いです。 　strictを身につけておけば、 『HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』 で、なんとか 　 　動的なページ作成は、ページ数が増えるまで待っても良いと思います。
ソーシャルゲーム会社でのデザイナ職となると、ホームページという意味合いだけでなく、ゲームの素材を作る事になります。PC向けとケータイやスマホ向けがあります。 分業の度合いによるとおもいますが、グラフィック作業がメインであれば、画質と色数、適切なファイルサイズを見極められるようになると良いです。どういうケースにはPhotoshopで作成すべきか、Illustratorで絵を起こすかを判断出来ると良いです。ソーシャルに限らず、ゲームはモーションが必ず入ります。動きの演出を考慮した素材作りが出来、かつ短時間で表現を絵にできる力があればよりいいですね。
少々ですが参考までに・・・ HTML <!DOCTYPE html> <html lang="ja"> <head> <meta charset="utf-8"> <title></title> <link rel="stylesheet" type="text/css" href="css/top.css" /> </head> <body> <table id="sample1"> <tr> <td class="tdsam1"> No. </td> <td> <form action="cgi-bin/sample.cgi" method="post"> <input type="radio" name="nam" size="40"> </form> </td> <td> <form action="cgi-bin/sample.cgi" method="post"> <input type="checkbox" name="chkmrk" value="サンプルその1"> </form> </td> </tr> <tr> <td class="tdsam1"> 当社部署 </td> <td colspan="2"> <form action="cgi-bin/sample.cgi" method="post"> <select name="busyo"> <option value="A">A部署</option> <option value="B">B部署</option> <option value="C">C部署</option> </select> </form> </td> </tr> </table> </form> </body> </html> CSS body { margin-top: 0px; } table { border: none; } table#sample1 { width: 1024px; padding: 0px; margin-left: auto; margin-right: auto; border-collapse: collapse; } .tdsam1 { text-align:left; } img { border: none; vertical-align: top; } 使うサーバーにより異なりますが、Apacheの場合、 .htaccessを作成し、AddType text/html .htmlと記述する。 ただし、完全なテキスト(文字列)のみとして扱う場合、 代わりにAddType text/plain .txtと記述する。
三度の連投申し訳ありません。 サンプルを用意いたしましたのでご覧ください。 内容は先の記事の項目すべての見本となります。 http://www27.atpages.jp/stepmaniasongs/sample.zip
h2.hoge2{ background-image: url('画像場所/FILE2.gif'); } h2.hoge3{ background-image: url('画像場所/FILE3.gif'); } ←新しく追加したもの を h2.hoge2{ background-image: url('画像場所/FILE3.gif'); } h2.hoge3{ background-image: url('画像場所/FILE2.gif'); } としてみたら・・ なお、<font・・は非推奨です。
ごく普通に、 form p{display:inline-block;} <label for="[コントロールID"></label><input**>になっているので、display:table-cellとかでも自由に配置できますね。 </p> </form></p> 　は明らかに変です。</p>の開始タグがありません。<p></p>にはブロック要素は入れることはできませんから、 </form><p></p> 　と無理やり解釈されます。
それはつまり、 軽トラと乗用車って同じ車なのになんで税金が違うんでしょうか？ って言っているようなものなのです。 モノが違えば仕組みが異なるのは当然なのです。 上から調整できなければ、上から調整するのではなく、 まずは一番下に配置してそこからpadding等で位置調整を すると良いのです。 完全に同じにはならなくても、近い線までは行けるはずです。
必要な余白を開けるのに使うのならば全然OKだと思います！ むしろ使わないでギュウギュウのページになってしまって ユーザアビリティが低下する方が問題ですしね～！
http://benri-tools.net/contents.php?code=kyotu_m … こちらのサイトならとても簡単にPHPでメニューの共通化を説明してくれていますので、 参考になれば～
対応していない機能についてはドキュメントタイプを変えてもどうにもなりません。 <!DOCTYPE html>はHTML5のやつでCSSとは関係ないです。 無名divの山なんでしょうか。 私も昔そういうカートのカスタムをしてうんざりした覚えが…どこだったか思い出せないんですが セレクタの対応状況が見れるサイトを参考URLにリンクするので、それを見ながらなんとかがんばってみてください。 参考URL：http://www.quirksmode.org/css/contents.html
そもそも、IE8以前は、 media="only screen and (min-width: 481px)" という書き方に対応していません。 率直に <!doctype html> <head> 　<meta charset="utf-8"> 　<title>・・・・</title> 　<meta name="description" content=""> 　<meta name="author" content="IRUKA"> <!--[if IE]> 　<script src="http://html5shiv.googlecode.com/svn/trunk/html5. … 　<script src="http://css3-mediaqueries-js.googlecode.com/svn/t … <![endif]--> 　<link rel="stylesheet" href="/CSS/persistent.css"> 　<link rel="stylesheet" media="screen" href="/CSS/shape.css"> と記述したのちに、必要なら 　<link rel="stylesheet" media="only screen and 　で上書きします。 　本来は、それ(Media Queries)がなくても表示できるようにデザインするほうが圧倒的に楽です。 　元来、HTMLは『HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』なのですから、スマートホンやPCのブラウザだけという狭い世界のものじゃありません。 　私は、さすがにXHTMLは必要もないし、古いので使っていませんが・・HTML4.01strictか、HTML5です。HPじゃなくウェブページのことだとして・・( http://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC% … )
http://www.kyrielles.net/sliderkit/sliderkit_en. … 実際に使われているのはこちらのようですね。 スライダー系はjQueryを使ったものが大半なのでその中からいくつか探してみるといいと思います。
＞それともHTML５がもうでているようですので、XHTMLは切り捨てた方が良いのでしょうか… 　いえ、HTML5は未勧告です。HTML5は、確かにHTML4.01strictの改定と言う位置付けですが、HTML5には二通りの書き方があって、XML/XHTMLとしての書き方もあります。HTML5でありながら<img *** />という書き方もエラーではありません。XHTML5となります。 　私は、現在はHTML4.01strictに戻していますが、空要素の扱い(最後を/>とする)以外は常にXMLの書き方を踏襲しています。すなわち<p>はHTMLでは閉じタグは必須ではありませんが、必ず</p>で閉じるようにしている・・とか。 　HTML4.01では<img *** /><br />はエラーですから仕方ない。 　XML/XHTMLの一番の長所は、 ・他のアプリケーションで利用しやすい。 ・Extensible Markup Language--拡張可能マークアップ言語--独自要素を加えられる。 　ですので、その目的があるときはXHTMLで書きます。 　逆に言うと、そうでないときはXML/XHTMLにこだわりません。HTMLは何と言っても楽ですから・・ 　ちなみに、XMLとして通用するHTML5の書き方も文書化されています。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Polyglot マークアップを利用する文書は、HTML5 文書であると同時に XML 文書でもあり、さらに HTML 文書でもある。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Polyglot マークアップ: HTML 互換の XHTML 文書( http://standards.mitsue.co.jp/resources/w3c/TR/h … )］より ＞HTML 4.01 Specificationを読むと、基礎はつかめて、後々XHTMLも理解できるようになりますか？ 　そういえると思います。一番の理由は、優れた邦訳の存在です。XHTML1.0はHTML4.01をまったくそのままXMLに適合するよう書き直したものです。XHTML1.1はXHTML1.0のstrictそのもの(モジュール化された)ですし、XHTML2は中断されました。 　たしかにW3CはHTMLは4.01が最後の仕様で、今後はXHTMLに移行すると大々的に宣言していて、私もそうなることと信じていましたが、2004年から2006あたりに状況は一変してしまいました。 ★HTML5が持つ本当の意味 － ＠IT ( http://www.atmarkit.co.jp/news/200801/25/html.html ) ★Webの3つの問題を解決する「HTML5」とは何なのか（2/2）- ＠IT ( http://www.atmarkit.co.jp/fwcr/design/benkyo/htm … ) 　HTML5は、単に文法だけではなくjavascriptやCSS,API,DOMなどを含んだ大きな仕様です。今後、その方向に進むことは確定ですので(たぶん)・・・、あえてXHTMLにこだわる必要はない。未来のあるHTMLをとにかく身につけようかと・・ ＞XHTMLは切り捨てた方が良いのでしょうか… 　必要なときは使わなければならない技術なので身につけておくことは無駄にはならないです。HTMLと大きな差があるわけではありません。 　HTMLを書くときもXHTMLの文法を可能な限り使えば良いです。 たとえば、 　<div class="section"> 　　　<div class="figure"> 　　　　　<h3>挿絵</h3> 　　　　　<p> 　　　　　　<img src="" width="" height="" alt=""> 　　　　　</p> 　　　</div> 　　　<h3>このセクションの見出し</h3> 　　　<p> 　　　　　ここからひとつの段落 　　　</p> 　　　<div class="aside"> 　　　　　<h3>脚注</h3? 　　　　　<p> 　　　　　　　・・・ 　　　　　</p> 　　　</div> 　</div> と私は書きますが、これはHTML5にするときは 　<section> 　　　<figure> 　　　　　<h3>挿絵</h3> 　　　　　<p> 　　　　　　<img src="" width="" height="" alt=""> 　　　　　</p> 　　　</figure> 　　　<h3>このセクションの見出し</h3> 　　　<p> 　　　　　ここからひとつの段落 　　　</p> 　　　<aside> 　　　　　<h3>脚注</h3? 　　　　　<p> 　　　　　　　・・・ 　　　　　</p> 　　　</aside> 　</section> ですし、XHTML1.1でしたら 　<div class="section"> 　　　<div class="figure"> 　　　　　<h3>挿絵</h3> 　　　　　<p> 　　　　　　<img src="" width="" height="" alt=""/> 　　　　　</p> 　　　</div> 　　　<h3>このセクションの見出し</h3> 　　　<p> 　　　　　ここからひとつの段落 　　　</p> 　　　<div class="aside"> 　　　　　<h3>脚注</h3? 　　　　　<p> 　　　　　　　・・・ 　　　　　</p> 　　　</div> 　</div> ですね。 　XHTMLの文法でHTMLを記述しておけばとにかくソースを見て一目でわかる・・
グラデーション - サテン を引き延ばしたものではないでしょうか。
まず、HTMLと、それと平行してCSSを直してみましょう。Validatorでチェックしたらわかるように重大な間違いがたくさんあります。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … )］より th#testphoto{} td#testphoto{} なんてありえません。#は一意セレクタで文書中に一箇所しか存在しないはずです。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから id = name [CS] 　この属性は、要素に名前を割り当てる。この名前は文書中で一意でなければならない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 5.9 一意セレクタ（ID selectors） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 継承するプロパティは親になるセレクタの宣言ブロックに書きましょう。font-size,line-height;text-align 同じ宣言をあちこち書かない。セレクタをグループ化しましょう。 word-break:プロパティはIE独自のもので、多くのブラウザは無視します。使うべきではありません。 HTMLは <table summary="test" id="form"> 　<tbody> 　　<tr> 　　　<th abbr=""> 　　　・・・【中略】・・・ 　　</tr> 　　<tr> 　　　<td> 　　　・・・【中略】・・・ 　　</tr> 　</tbody> </table> 　以上何も書く必要はないはずです。 table.form{ 　　width:700px;margin: 0 auto; 　　border: 1px solid #e7e7e7; 　　font-size: 12px; 　　text-align: left; 　　background-color: #FFFFFF; 　　border-collapse:collapse; } #form{ 　　line-height: 30px; 　　font-size: 12px; } #form tbody tr th,#form tbody tr td{width:110px;vertical-align:top;} #form tbody tr th{height:30px;} #form tbody tr td{height:90px;} なお、必ずDOCTYPE宣言を記述して、標準モードで描画するように指定しましょう。 →DOCTYPE スイッチ - Google 検索 ( https://www.google.co.jp/search?q=word-break%3A& … ) 当然ですが文章チェックもしておくこと →The W3C Markup Validation Service ( http://validator.w3.org/#validate_by_input ) →Another HTML-lint 5 ( http://www.htmllint.net/html-lint/htmllint.html ) →W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　　
Vogueは一旦忘れて、まずは要素のセンタリングの方法からですね。 たとえば、単純にpをセンタリングする方法はご存知なのでしょうか？ https://www.google.co.jp/search?num=100&hl=ja&ne …
>>2です。 ファイルエディターでやるよりかも、 http://flashdevelop.jp/%E3%83%A1%E3%82%A4%E3%83% … こういうオープンソース(永久無料)のソースコードエディタを 使ってみられてはいかがでしょうか？
Flicker以外の写真サービスは利用されてましたか？ 自作する上でもデザインや見せ方の参考になると思いますので いくつかピックアップしておきます。 ◆フォト蔵 http://photozou.jp/ ◆Photomemo http://photomemo.jp/ ◆Zorg http://www.zorg.com/ ◆Zooomr http://jp.zooomr.com/ これらのサイトは、モバイルから閲覧されることも考慮されている 場合が多いので、そのあたりも参考になるかと思います。 JavaScriptはプログラム言語の中では比較的習得しやすいですが、 それでもHTMLやCSSに比べると難度は高いです。 また、大量の写真をストレスなく見せるためには、画像を先読みする ような技術が必要になってきます。 本格的に学習されるなら、JavaScriptの基礎を押さえたあと、 jQuery というライブラリを利用するのが近道かもしれません。 （モバイル向けの jQuery Mobile もあります）
いろんな会社で業務システムの制作に携わったことがありますが、 DreamWeaverというソフトを使ってちまちまテーブルで組んでました。 簡単に見えるけど時間かけるものだと思います。
＞特定ボックスをCSSで登録しておけば、それを配置したすべてのHTMLで ＞一括して扱える如く、同じ原理で商品名をCSSで登録しておけば、一括 ＞で全HTMLに適応できるみたいなものはないかなと思っているんです。 　それは、繰り返しますが、ＳＳＩを使用するのが楽です。ご利用のサーバーでSSIは有効になっていると思いますので、次のようなファイルを用意して、test.shtmlというファイル名で保存します。簡単なのでHTML5で記述します。HTML4.01の場合は、それぞれを<div class="section">のように書き換えて、スタイルシートもdiv.sectionのように書き換える。 　また、タグを含まないものでしたら、テキスト、画像、クォーテーションなどの簡単なものはスタイルシートのcontent:プロパティで加えることができます。 ★タブは＿に置換してあるので戻すこと。 <!doctype html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> <style media="screen"> <!-- body{counter-reset: section;} section h2:before{content: counter(section) "章: "; ＿counter-increment: section 1; } section h2:after{content:"--------\Aここから始まるよ";white-space:pre;font-size:0.8em;} --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> <!--#include file="nav.htm" --> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿</p> ＿</section> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿</p> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html> 別途、nav.htmを用意します。 ＿＿＿<ul> ＿＿＿＿<li><a href="#">Some</a></li> ＿＿＿＿<li><a href="#">navigation</a></li> ＿＿＿＿<li><a href="#">links</a></li> ＿＿＿</ul> そして、サーバー上(ファイルじゃない)でtest.shtmlを開くと、nav.htmlの内容が追加されて表示されます。 ★htmlの拡張子でSSIを動作させるためには.htaccessの編集が必要です。
sectionの用途が少し違うような・・ →4.4.2 The section element ( http://www.w3.org/TR/2011/WD-html5-20110525/sect … ) 　--The section element is not a generic container element. -- デザインのためだけに必要ならdivを使うべきです。基本的に{見出しヘッダー}をもつひとつの文節を示します。 　この場合は、ナビゲーションならnav、そうでなければdivではないかと・・ 　また、CSS3とのことですが、そこまで行かなくてもCSS2.1でよいはずです。floatはCSS2以前でdisplayにinline-blockがないときにやむなく使われていた方法です。 　HTML5でもっとも重視されるのは文書構造のマークアップです。それにしたがってマークアップすると <header> 　<h1 id="title">Your title</h1> 　<nav> 　　<ul> 　　　<li><a href="./some">Some</a></li> 　　　<li><a href="./nav">navigation</a></li> 　　　<li><a href="./link">links</a></li> 　　</ul> 　</nav> </header> nav{line-height:1.6em;width:100%;text-align:center;} nav ul,nav ul li{list-style:none;margin:0;padding:0;} nav ul{display:block;} nav ul li{display:inline-block;width:20%;border:outset 2px gray;} nav ul li a{display:block;width:100%;height:100%;text-decoration:none;} nav{line-height:1.6em;width:100%;text-align:center;} nav ul,nav ul li{list-style:none;margin:0;padding:0;} nav ul{display:block;} nav ul li{display:inline-table;} ★なお、floatは、あくまで文中の挿絵などの周囲にテキストを回りこませるためのもので、ブロックの配置に使用するのは目的外使用です。
「自分で作れるようになりたい」というのが目標であれば、 ソフトウェアの使い方を覚える方が近道です。 職業にしたくて勉強するのであれば、文法を先にして どんなソフトを使っても同じように作れるのを目指すほうがいいです。 私からのおすすめ ・既存のサイトを見よう見まねで作ってみる（美術でいうところの模写）
CSSって知ってますよね？ CSSは別ファイルになっているので、HTML構文見ただけではその命令は見ることが出来ません 全体の描写は、サイドに空白が出来ないようにleft:0; をHTML内に仕掛けて 親になるボックスを中央になるように　左右autoで配置し そこに画像やPHPを入れる孫を配置していけばいいわけです。 ものすごい単純なことですよ。
同じURLで、複数の端末に利用させる方法は.htaccessで行う場合、Rewriteを使用します。 欠点は、 ・端末ごとにファイルを用意する必要がある。 ・UserAgentの設定漏れがあると期待通りのRewriteが行われない ・複雑なRewriteRuleを書く必要がある。 です。 　そこで、スタイルシートで表示自体を変える方法が楽です。すなわち <link rel="stylesheet" type="text/css" href="default.css"> <link rel="stylesheet" type="text/css" media="screen" href="./styleSheet/screen.css"> <link rel="styleSheet" type="text/css" media="print,handheld" href="./styleSheet/print.css"> とか・・スマートホン用にディスプレイの幅で振り分けることもできます。 <link rel="stylesheet" type="text/css" media="only screen and (max-device-width:480px)" href="./stylesheet/smart.css"> <link rel="stylesheet" type="text/css" media="screen and (min-device-width:481px)" href="./styleSheetpc.css"> 　HTML本体は、率直にデザインは無視して文書構造だけをマークアップして記述しておきます。 <object>要素を利用してflashが表示できない場合の代替HTMLを書いておく <object ****flash> 　<object *****MPEG> 　　<ol> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　</ol> 　</object> </object> 　これでflashを利用できないブラウザは、順次利用可能なコンテンツを表示します。 →13.3 一般的包含: OBJECT要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　また、スタイルシートで内容を置き換えても良いでしょう。 div.nav ol:after{content:url([flash]);display:block;} とか・・ 　また、SSIを使用して、ユーザーエージェントによって表示するデータ自体を変化させる方法も良く使われます。--大規模サイトはサイト全体がこの方法ないし、PHPやCGIで同等機能を持たせています。
Wordpressは調べていませんが、詳細度が他に負けているのでは？ 現状だとclass1？かなり弱いです。詳細度を高めてください。 cssの基礎ありますか？ ここで詳細度を高めたソースを教えるのはたやすいですが、おそらく意味がわかっていなければ、実践に当てはめることはできないと思います。 importantの使い方も間違えていますし、コピペソースでは対応できないのでは？と思います。基本的な大前提となるルールを理解していれば、現在の文章構造を利用して、詳細度を高めてください。理解していなければ、勉強してください。 理解度をテストしてみます？ ●CSSトラブルシューティング：追加したルールが適用されない http://lab.klab.org/young/2011/05/css_trouble_ru …
悲しいことにCSS3 TransitionsのIEでのサポートは10からです。 IE9は未対応なのでどう頑張ってもCSSでの実装は不可能となっております。 「だんだん」というのを諦めるか、JavaScriptを使用するしかありません。 参考URL：http://caniuse.com/#feat=css-transitions
未検証ですが・・・ #content { text-align: left; padding: 0px; width: 340px; height: 500px; float: left; margin: 0px; overflow: auto; } で、うまく表示されないでしょうか？ overflow-x、overflow-yは、IE独自仕様だったような。 今はもう全ブラウザ対応してるのかもしれないですが。 上記のCSSで試して、IEで見たときに横スクロールまで表示されてしまうのであれば、 overflow-x: hidden; を追加すればいいかも？
リンクに背景画像を指定する場合は、 a[href="/service"]{background:url(./images/background/service.gif);} と要素セレクタで指定するので良いです。 　そうすることで、HTMLまたはスタイルシートで順番や位置を変更しても書き直す必要がありません。
<body>の直下に以下の物を入れてください。 <center><table border=0><tr><td with=750> そして、</body>の直前に以下の物を入れてください。 </td></tr></table></center>
:hover擬似クラスで変化しないセレクタの宣言に書きます。たとえば<dfn><abbr title="Hyper Text Markup Language">HTML</abbr><span>ハイパー・テキスト・マークアップ言語</span><dfn>は、リンク機能を持つテキストを・・・ 　でしたら dfn{position:relative;} dfn abbr[title]+span{visibility:hidden;width:5em;transition******} dfn abbr[title]:hover+span{width:10em;visibility:bisible;} というふうに・・ ※display:hiden→dispaly:block;は原理的に不可能です。 サンプル--abbrのtitleについて指定してみました。示されたHTMLは、HTML的におかしいので・・ :hover擬似クラス(動的な擬似クラス)はa要素以外にも適用されます。(古いIEは理解しませんが、どうせそやつはtrnsitionも理解しないので)、#以降が書かれていない不適切なHTMLを書く必要はありません。 ★HTML4.01strict ★CSS3 ※タブは＿に置換してあるので戻すこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- p{line-height:1.4em;} abbr{position:relative;} abbr:after{ ＿content:attr(title); ＿white-space:pre; ＿position:absolute; ＿bottom:1.4em;left:0; ＿border:solid navy 1px; ＿width:6em; ＿font-size:0.4em; ＿padding:0.2em 0.5em; ＿background-color:blue; ＿visibility:hidden; ＿transition-property: visibility,font-size,background-color; ＿transition-duration:10s; ＿transition-timing-function:ease-in-out; ＿-moz-transition-property: visibility,font-size,background-color; ＿-webkit-transition-property: visibility,font-size,background-color; ＿-o-transition-property: visibility,font-size,background-color; ＿-ms-transition-property: visibility,font-size,background-color; ＿-moz-transition-duration:1s; ＿-webkit-transition-duration:1s; ＿-o-transition-duration:1s; ＿-ms-transition-duration:1s; ＿-moz-transition-timing-function:ease-in-out; ＿-webkit-transition-timing-function:ease-in-out; ＿-o-transition-timing-function:ease-in-out; ＿-ms-transition-timing-function:ease-in-out; } abbr:hover:after{ ＿visibility:visible; ＿font-size:1em; ＿background-color:aqua; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿＿<p>水分子は、<abbr title="元素記号:H 原子量:1.002">水素</abbr>原子２個と<abbr title="元素記号:O 原子量:16.000">酸素</abbr>原子１個でできている３原子分子です。</p> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>・・・</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<dl class="documentHistry"> ＿＿＿<dt id="FIRST-PUBLISHED">First Published</dt> ＿＿＿<dd>2005-06-10</dd> ＿＿＿<dt id="LAST-MODIFIED">Last Modified</dt> ＿＿＿<dd>2005-06-10 12:00:00 (JST)</dd> ＿＿</dl> ＿＿<address>&copy; ORUKA1951 2001 - 2004 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
ざっと見渡すと、XHTMLのようです。したがって、DOCTYE宣言を書いて、標準モードで動作するように指定すると良いでしょう。 下記のいずれでも、標準モードで動作するはずです。 XHTML1.0 strictなら <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dt … XHTML1.0 transitinalなら <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitio … DOCTYEはつけなければなりません。trnsitionalは後方互換です。 ・製作するときはstrictで製作するべきです。 なお、HTML4.01で作るなら、それようのDOCTYE宣言をすること、その場合 <input type="button" value="ボタン１" style="float: left;"> とする。 なお、HTML自体が誤っています。 ・input,labelはform内に書かなければなりません。 ・labelは、テキストを特定の他のコントロールに対し明示的に結び付けるためのものです。→17.9 ラベル ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　必ず、idと組み合わせて使用されます。 　HTMLの貧弱なプレゼンテーションを伴うために、本来の用途と異なる使用方法は強く否定されています。
<div id="main"> <div id="left"> </div> <div id="right"> </div> <hr> <div id="hoge"></div> </div> hr { clear: both; visibility:hidden margin:0; padding:0; border:0; } floatする要素の親にoverflow:hiddenでもいいのですが、 HTML構造を変えられず、floatしている要素と次の要素の間に適当な要素がないのであれば hr（brでもいい）を追加してそこでclearするのが手っ取り早いかなと思いました。 ​
まず、HTMLが間違っています。 idは、ひとつの文書内に一つしかかけません。 「この属性は、要素に名前を割り当てる。この名前は文書中で一意でなければならない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 ・また、HTMLはデザインために書くものではありません ＞<div id="map" style="width:606px; height:420px;"> 　HTMLのstyle属性での指定は、詳細度が a=1 ですので、外部スタイルシートやHTML内のスタイルシートでは上書きできません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから count 1 if the declaration is from is a 'style' attribute rather than a rule with a selector, 0 otherwise (= a) (In HTML, values of an element's "style" attribute are style sheet rules. These rules have no selectors, so a=1, b=0, c=0, and d=0.) ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Assigning property values, Cascading, and Inheritance( http://www.w3.org/TR/CSS2/cascade.html#specificity )］より 　もう一点、DOMは理解されていますか 　　　　　　　id div　　　pcmap 　+ div 　map 　+ div 　smmap 　　+ div map 　firefoxをお使いなら、ツールにDOM inspector がありますので確認してください。たぶん想定されているものと異なるのではないですか? 　また、display:noneを指定すると、その子孫要素で他のnone以外を指定しても無効です。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから none 　要素には、整形構造にまったくボックスを生成させない（すなわちレイアウトに影響しない）。 子孫要素にも同様にボックスを生成させない。 この効果は、子孫要素の'display'に別の値を設定しても無効化できない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［視覚整形モデル( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )］より 　なぜ、スタイルシートを切り替えているのに、複雑怪奇なHTMLを書くのですか？ <div id="map"></div> 　でよいのでは？ 　さらにいえば、スマホもパソコンもスクリーン端末(madia)です。普通にリキッドデザインで作成すればよいのでは？・・・・それとも今後さまざまな端末が登場するたびに、スタイルシートを作成する???
Conditional Commentsというものがあります。 IEに対するハックであれば、その箇所をこのコメントに置くことで 同等の効果が得られます。 <!--[if IE 7]> <style> /*スタイルシートへのリンクでもOK */ input, textarea, select { font-size:100%; } </style> <![endif]--> これはIE55からサポートされているのでIE全般に効果がありますが CSSが分断されるのでメンテナンス性が落ちますし reset cssのバージョンが上がった時に都度直さなければなりません。 いっそIE7以下のハックは全部消す方が楽です。 YUIのCSSを作っている人もエラーが出るのは百も承知だと思いますが、 運用の諸々を考えるとエラーには目をつぶってハックを使う方が現実的ということです。 参考URL：http://www.quirksmode.org/css/condcom.html
それはどのブラウザでもできます。 ＞Eのバージョン9で、画面の一番上のアドレスバーに、日本語の入力は、可能です。 　目的は、日本語ドメインが利用になったからです。 Punycodeに変換されます。 　ただ、あなたに便利でも多くの方には不便でしょう。それをサイト側から強制する手段はありませんが、あなたのブラウザに指定するのは方法があるかもしれません。 ＞検索するとき、「A」から「あ」へIME2010の入力モードを変換するのが、煩わしく思います。 　わずらわしいですか？？？。Ctrl+Fで検索窓、Ctrl+Lでロケーションバーをフォーカスして、IMEモード切替を行うだけですけど・・ 　私は、imeモードの切り替えを「カタカナ/ひらがな/ローマ字キーに割り当ててますから、Ctrl+Ｌでロケーションバーに移動して、「カタカナキー」押すだけですから不便しません。多分、皆さんもime入力モード切替に何らかのショートカットキーを割り当てていらっしゃると思います（デフォルトは半角/全角キー）ので・・。
　意味知っていてなら、自由に・・ 　classは複数書くことは出来ません。classは「半角スペースで区切られた値のリスト」でしよね。 →class = cdata-list [CS] ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　class="comment2dl clearFix" となります。スタイルシートでclassセレクタは、 『半角スペースで区切られたリストからなるclass属性の値のひとつが一致するもの』 を意味します。 　属性セレクタの、[class=~abc]の簡略した書き方です。 　→5.8.3 クラスセレクタ（Class selectors） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 注。 CSSではclass属性が非常に大きな力を持っている。 したがって文書作成者は、体裁に殆ど何の関係も無い要素（HTMLだとDIV要素やSPAN要素など）をベースにして、それらにclass属性でスタイル情報を与えれば、独自の構造化言語を設計できると考えられる。 しかし、文書の構造要素は広く受け入れられている一般的意味を持つ場合が多いので、こういった使用法は避けるべきである。 文書作成者が定めたクラス名では、意味を理解してもらえない場合もある。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［セレクタ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )］より 　でわかるように、本来はclearFixはもちろん、comment2dlというclass名はまずいです。 　floatを解除したいのでしたら、本来の考え方は違いますよね。たとえばHTMLに見出しと記事が続いているものでしたら、新しい見出しが登場するたびに、挿絵の周囲への文章の回り込みを解除したいなら h1,h2,h3,h4{clear:all;} で良いですよね。HTMLには手を加える必要はありません。ましたや文書構造を示しているとは思われないclass名をつけるべきではありません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　class名が文書構造を保管している具体的な例を書くとわかると思います。 <div class="section"> 　<h2>このセクションの見出し</h2> 　<div class="figure">挿絵</div> 　<p>段落</p> 　<p>段落</p> </div> <div class="section"> 　<h2>このセクションの見出し</h2> 　<div class="figure">挿絵</div> 　<p>段落</p> 　<div class="section"> 　　<h3>見出し</h3> 　　<p>段落</p> 　　<p>段落</p> 　</div> 　<p>段落</p> </div> というHTMLがあれば、誰が見ても文書構造がわかります。十年後のあなたでもね。 そしてスタイルシートは、その文書構造にしたがって div.section{clear:right;} div.section div.section{clear:none;} div.section div.figure{float:right;} 　これも、別にHTML見なくても本文(section)内の挿絵(figure)は、右に回り込ませる。新しいセクションが始まると、floatを解除している。しかし、二階層目のセクションではfloat解除しない。 　と読み取れますよね。 　どのようなclass名が良いかは、HTML5の「新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」が参考になります。 　clearFixなんて、御馬鹿なclass名は止めましょう。先でデザイン変更でfloat解除をしないことにしたとき、HTMLまで書き直すのですか？ ★デザインのためにclass名,idを付けることはしない・・・と覚えておけば良いです。 　
そのサイトをクリアすれば、もうすることはないような・・ ただ、すこし古い情報を基にされていますので注意は必要です。 本来 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』ものなので、class名は、HTML5の新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )名が良いでしょう。 　idは、リンクやjavascriptのターゲットやページに絶対に一箇所しか現れないところとかに指定します。具体的には目次からのターゲットとかですね。それ以外はclass名だけにするほうが良いでしょう。 <body> 　<div class="header"> 　</div> 　<div class="section"> 　　<h2>+++</h2> 　　<div class="section" id="What_is_HTML"> 　　　<h3>*******</h3> 　　　<p>******</p> 　　</div> 　　<div class="section" id="Tray_HTML"> 　　　<h3>*******</h3> 　　　<p>******</p> 　　</div> HTML5に直すときは <body> 　<header> 　</header> 　<section> 　　<h2>+++</h2> 　　<section id="What_is_HTML"> 　　　<h3>*******</h3> 　　　<p>******</p> 　　</section> 　　<section id="Tray_HTML"> 　　　<h3>*******</h3> 　　　<p>******</p> 　　</section> と直せます。 また、classを利用して、スタイルシートを書くと楽なのは想像できると思います。 　HTMLは、HTML4.01strict(transitinalじゃない)を徹底的に学びましょう。次期HTML5にそのまま活用できます。そのときに、 Polyglot マークアップ: HTML 互換の XHTML 文書 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　のように、XMLとしても通用するHTMLを書くようにすれば良いでしょう。 　これからは、実際に自分のデータを元にページを作りましょう。 そのときに参照するのは、解説サイトではなく仕様書ですよ。 ★HTML 4.01 Specification (ja) ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) ★Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification ( http://www.w3.org/TR/CSS2/ ) ★Polyglot マークアップ: HTML 互換の XHTML 文書 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )
基本的なこと 『DIV要素(とSPAN要素)は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』ためにあるのです。 　よって 「divによって新着情報であるとマークアップされている要素をウィンドウの左下に常に表示したい」 　と考えましょう。 　新着情報は通常footer内に存在することが多いでしょう。とすればマークアップはHTML5的に記述すると <body> 　<header> 　</header> 　<section> 　</section> 　<footer> 　　<aside> 　　　<h3>新着情報</h3> 　　　<ol> 　　　　<li></li> 　　　　<li></li> 　　　</ol> 　　</aside> 　</footer> </body> 　とかになっていると思います。HTM4.01,XHTML1.0,XHTMLでしたら、それぞれ<div class="header">のようになるでしょう。 [HTML4.01]でしたら、 <body> 　<div class="header"> 　</div> 　<div class="section"> 　</div> 　<div class="footer"> 　　<div class="aside" id="latestInformation"> 　　　<h3>新着情報</h3> 　　　<ol> 　　　　<li></li> 　　　　<li></li> 　　　</ol> 　　</div> 　</div> </body> として、スタイルシートは #lastInformation{ 　　width:360px; 　　osition:fixed; 　　bottom:0; } #lastInformation h3{ 　　font-size:1.1em; 　　margin:0;line-height:1.4em; } とかになります。 　★ただし、この場合div.footerのpositionがstaticであることが必要です。
ASP.NETだろうが、Visual Studioだろうが、最終的には単なるHTMLです。 コンポボックスはありませんので、たぶん、フォーム提出コントロールのひとつ、SELECT要素のことだと思います。 　フォームのコントロールは、テキストとともに、行内要素ですから、サイズが収まる限り改行されることはありません。 　<p>テキスト<img src="" width="" height="" alt=""></p> と同じです。 　 　もちろん、異なるブロック要素に存在する場合は改行されます。 →7.5.3 ブロックレベル要素と行内要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　また、スタイルシートで行内要素をブロック要素に変換すると改行されます。 　もうひとつの可能性は、スタイルシートでfloatを指定しているときに、一行に収まらないサイズのときです。 　実際には、そのページのソースとCSSを確認しないと判断できません。 　firefox+fireBugで、どの部分がどのようなスタイル指定が作成されているか、どう修正したら直せるかを確認できます。
根本的な部分で、違います。 　スタイルシートが指定するのは、あくまでその要素です。 　HTMLとは、それを構成する要素に分解して、その要素が文書を構成するどのような要素であるかをタグでマークアップする言語でしたよね。 <div class="t1"> <div class="t2"> aaa </div> </div> は、HTMLの文書構造は DIV　　　　　　　　　　　　　t1 　|--DIV　　　　　　　　　　t2 　　　|-- #text aaa ですね。firefox付属のDOMinspectroで見ると表示されます。 　CSS--カスケーディングスタイルシートのカスケーディングを正しく理解してください。 そのサイトの説明は、不正確です。というか酷すぎる。 　そんな難しいややこしいものではありません。 　とてもわかり易くできています。 (ルール1) ・プロパティには継承されるものとされないものがある。 　--常識的範囲ですが、木構造の親の指定が継承されるものとされないものがある。 　colorプロパティは継承されますが、border関連プロパティは継承されません。 　継承されないプロパティでも、値にinheritと記述すれば継承されます。 (ルール２) ・@imprtantは優先されます。 　ユーザー指定の最重要宣言はもっとも優先されます。 　著者指定の宣言はユーザー指定の宣言よりも優先されます。 　ブラウザが持つ宣言は最下位です。(インターネットオプションでの指定とかも) 　ユーザー指定の最重要宣言＞著者の最重要宣言＞著者の宣言＞ユーザーの宣言＞ブラウザの宣言 (ルール３) ・詳細度を計算します。 　a=1・・・・スタイル属性での指定 　b=1・・・・一意セレクタでの指定 　c=1・・・・属性セレクタ/クラスセレクタ/擬似クラスの指定 　d=1・・・・要素セレクタ/擬似要素セレクタの指定 　0・・・・・HTMLの属性での指定、全称セレクタでの指定 この４桁の数値(桁上がりはしない=基数が大きい)で比較します。 (ルール４) ・同じ詳細度だと、後から出現するものが優先されます。 　以上です。とても単純で、常識的です。 <div class="nav"> 　<ul> 　　<li><a href="./index.html">Top</a></li> 　　<li><a href="bbb">bbb</a></li> 　　<li><a href="ccc">ccc</a></li> 　</ul> </div> に対して ・・・class名は文書構造を補完するものをつけることになっています。 　　→『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』と明記してある。 　　→具体的にはHTML5の「新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」名が参考になるでしょう。 スタイルシートを実際に記述すると a:link{} a:visited{} a:focus,a:hover{} a:active{} の順番で書かなければなりません。いずれも擬似クラス(リンクの擬似クラスと動的な擬似クラス)ですから詳細度は同じ(0,0,1,1=11)ですから、後出のもので上書きされますから。(ルール4) 次に、ナビゲーション内だけのリンクの色を変えたければ、 div.nav ul li a:link{} div.nav ul li a:visited{} div.nav ul li a:focus,a:hover{} div.nav ul li a:active{} 　これらはしいずれも詳細度が(0,0,2,4=24)ですから、出現順番に関わらず、上の指定を上書きします。 　ここで２番目以降だけ、指定を変えたければ div.nav ul li+li a:link{} div.nav ul li+li a:visited{} div.nav ul li+li a:focus,a:hover{} div.nav ul li+li a:active{} 　詳細度は(0,0,2,5=25)になりました。 div.nav ul li a[href="bbb"]:link{} とすれば、要素セレクタが一つ増えるので詳細度は(0,0,3,4=34)ですから・・ ★それぞれのプロパティが継承されるか否かは、仕様書のプロパティ索引からリンクしていけばわかります。 ★セレクタの詳細度の値は、 　6.4.3 Calculating a selector's specificity ( http://www.w3.org/TR/CSS2/cascade.html#specificity ) 　を見てください。一度見れば覚えられるでしょう。 　(注意)この詳細度の部分は現行のCSS2.1では変更されています。上記リンクはCSS2.1のものですが、邦訳を知りませんので原文へのリンクを上げておきました。 　なお、CSS2以降は、 .t2 a{color:orange;} .t1 a{color:green;} のような書き方は、 *.t2 a{color:orange;} *.t1 a{color:green;} とみなすことになっています。全称セレクタは詳細度が0です。(CSS1との整合性のため) 　基本は div.t2 a{color:orange;} div.t1 a{color:green;} 　と書くようにしましょう。 あやふやなサイトを見るよりは 5. セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 6. 値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　など仕様書にまず目を通しましょう。（これはCSS2のものですが、詳細度について変更以外は大きな変更はないので参考になるでしょう。) 　ついでにHTML4.01の仕様書も一通り目を通しておくと良いでしょう。
ＧＯＯＧＬＥカスタム検索結果を新しい日付順にしたい - HTML - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7565865.html ) のことかな。様々にオプションがありますが・・ 単純に <INPUT type="hidden" name="num" value="5"> とかですが？？？？ 不要な隠しnameがあるのはなぜ？name="ie"とかname="oe"とか・・
＞ですが、やはり難しそうなので、Androidの仕様上難しいという風に説得したいと思います。 　依頼元の希望なのでしたら、きちんとウェブの理念と、なぜHTMLなのかを説明して納得してもらうのがベストですね。カタログとは根本的に違うということ。 　あらゆる端末、視覚障害者、解像度やフォントの差・・に関わらず利用できることを最優先に----これも結構難しいけど---するから、ウェブだということを理解してもらうと、今後も楽です。 　もし、それをせずに無理やり合わせたとしても、どこかの誰かが、それはウェブとして間違いだよと教えたら、あなたの信用にも関わる。 　プロなのだから、「こうしたほうが理想なのですよ」と顧客に理解してもらうのも仕事のうちだと、私は考えてます。
gifアニメではありませんね。 　アニメーションGIFは、画像自体が動きますがそれをmousoverやmouseoutで制御はできません。 　もし画像を置き換えるなら、GIFでない画像をmouseoverやmouseoutのイベントによってjavascriptを使って切り替えます。ですが、示されたHTMLには、別画像が書かれていません。 ★現在は、このようなjavascriptを使った方法はほとんど行われていません。セキュリティ対策でjavascriptを停止しているブラウザが存在することなどが原因です。もっと簡単なスタイルシートで画像を置き換える方法が一般的です。
.maincolor { background-color: #123456 } body { background-color : .maincolorの色を設定 } h3 { background-color : .maincolorの色を設定 } ul.nav a:link { color : .maincolorの色を設定 } よりは body,h3,ul.nav a:link{background-color:#123456;} のほうが簡単ですし・・・
＞リンク色を変えるセレクタについて質問です。 　ではなくて、要素を特定するセレクタと、色を変えるプロパティのことを聞かれているのだと思います。色を変えるプロパティはcolorですからよいとして。 　セレクタは、 リンクの擬似クラス :link,:visited 動的な擬似クラス :hover,active,:focus, :linkと:visitedは互いに排他的ですから、よいとして詳細度が同じですから 1) :link　:visited 2) :focus :hover 3) :active の順番で指定する必要があります。 　セレクタをどのように書けばよいかは、その文書構造に従いますから ＞HTML構造は都度変わるため隣接セレクタではなく汎用性のある下位セレクタで指定したいです。 ＞#id a:link { color:pink } 　の意味がわからないのです ・文書構造を元にセレクタで指定するのですよ。 ・#idは一意セレクタ--正式には　*#id ですが、詳細度が B=1(0 1 0 0)ですから、 　汎用性はありません。idは一箇所にしか存在しない。 ・下位セレクタとは、カスケーディングの下位ということですか？ 　ユーザーの最重要宣言＞著者の最重要宣言＞著者の宣言＞ユーザーの宣言＞デフォルトの宣言 　と言う順番で右側ほど下位です。 ・汎用性があるという意味は、詳細度が低い状態でといことですか？ 　なら 　*{color:red;}が一番低い　詳細度0 　body{color:blue;} で詳細度は 0 0 0 1 　body a{color:maroon;} で詳細度は 0 0 0 2 　a:link{color:yellow;} で詳細度は 0 0 1 0 　 具体的には、ブラウザの持つデフォルトのスタイルシートがカスケーディングの最下位に存在しますから、何も指定しないのが最も汎用性は高いといえます。 　ついで a:link a:visited a:focus,a:hover a:active の順番で、一般的な指定をします。(あまりデフォルトのものと変えないほうがユーザビリティ上は良い) 　詳細度はいずれも0 0 1 1 　ついで、それが本文中のものなら div.section a:link div.section a:visited div.section a:focus,a:hover div.section a:active とします。いずれも詳細度は 0 0 2 2 　　class名は文書構造を示すものにしましょう。 　　『DIV要素とSPAN要素は、id属性及び class属性と併用することで、 　　　文書に構造を付加するための一般機構を提供する。 　　　( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　　 さらに、本文中のナビゲーション内のものでしたら div.section div.nav a:link div.section div.nav a:visited div.section div.nav a:focus,a:hover div.section div.nav a:active とかです。詳細度は 0 0 3 3 　質問が理解できないので一般的な回答しかできません。 　もう少し具体的だと良いでしょう。 特定のリンク先だけ色を変えたければ a[href="index.html"]{color:black!important;} とか・・。
もっとも大事なこと!! 「メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。. ( http://jigsaw.w3.org/css-validator/#validate_by_ … )」 　そもそもHTMLが間違っています。期待通りに機能するはずもありません。 →HTMLの要素には「ブロックレベル要素と行内要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」の区別があります。 　これはスタイルシートで変更した結果についても当てはまります。すなわち 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから デフォルトでは、ブロックレベル要素は行内要素とは異なるように整形される。 一般に、ブロックレベル要素は新しい行を開始し、行内要素は新しい行を開始しない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　理解し難い場合は form,input{border:solid 1px gray;padding:5px;} input{border-color:red;} を書き加えてみると良いでしょう。 ★行内要素の内部にブロック要素は入りません。 ★行内要素の幅は内容によって変わります。 　　→行ボックスの幅は包含ブロックによって、高さは[10.8 行の高さを計算する]で述べる規則に従って決まる。 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　以上二つの結果、内容のない行内要素とブロック要素が４つになりますから、すべて改行されて一行開けて縦に並ぶはずです。そのように指定したのですから、そのとおりの結果になると言うことです。 　通常、二つのブロックを横に並べる場合は、ブロックの幅(ブロック要素は幅を指定できます。)を狭くして、positionないしfloatで位置を指定します。inline-blockの場合は幅指定だけでよいです。 　→'display' ( http://www.w3.org/TR/CSS2/visuren.html#propdef-d … ) 　　CSS2.1で変更になっていますから、CSS2.1のdisplayの値です。 1) HTMLを修正します。inputは行内要素ですからブロック要素内に入ります。 <div class="form"> 　<form action="./"> 　　<p> 　　　<input type="text" name="abc" size="20" value="abc"> 　　</p> 　　<p> 　　　<input type="text" name="efg" size="20" value="efg"> 　　</p> 　</form> 　<form action="./"> 　　<p> 　　　<input type="text" name="hij" size="20" value="hij"> 　　</p> 　　<p> 　　　<input type="text" name="klm" size="20" value="klm"> 　　</p> 　</form> </div> 2)CSSは可能な限り、ブロック→行内、その逆はしないほうが良い。 form{display:inline-block;width:40%;} あるいは div.form{position:relative;} form{width:48%;} form+form{position:absolute;top:0;right:0;} または、(非推奨) form{float:left;width:48%;} ★なぜフォームが二つあるのですか、提出先が同じなら、提出ボタン(input type="submit",<button ****>で制御したほうがよいかと。
"javascript 右クリック禁止"で検索してください。 　ただ、私もですが右クリックで表示される--コンテキストメニュー(その場で可能な操作メニュー)--を禁止すると、他のメニューも表示されなくなりますから、ユーザーにとっては迷惑です。 　たとえば「戻る」「進む」「更新」「このページをブックマーク」「新しいウィンドウに開く」「このページを翻訳」・・・・ 　元々、ウェブページのデータは画像を含めてすべてダウンロードされて表示されるわけですから、本気で知りたければキャッシャを確認すればよいだけですし、javascriptすべて、または特定の操作を無効にすれば、その効果はありません。 　まあ、隠したい理由がわからないでもないですが、私はページの内容も画像もソースもすべてオープンです。さすがに大昔--十数年前--に作成したページは恥ずかしくって見られたくないですが、恥ずかしいけど、それでもオープンです。 　今のウェブの発明者のバーナーズリーの著書に 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 　私が構想していたのは、自分の知識や考えを共有させることが、他人の知識を 学ぶのと同じくらいに容易であるようなシステムであった。... すべての文書を ある意味で「等価」にすることもまた不可欠である。システムはユーザーを制約しては ならない。どの文書についても、それがたまたまどこに保存されていようと、 同じようにたやすくリンクできるようになっていなければならない。(pp.49-50) ・・・【中略】・・・ 　Webは技術的な創造物というよりは社会的な創造物である。私はWebを技術的な おもちゃではなく、人々の共同作業の手助けとなるような社会的効果を生むものとして 設計した。Webの最終目標は、世界中に散らばっている私たちが織りなしている 網の目のような存在を支援し、改善することである。(p.156) ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［よいウェブページを書こうとする人のためのヒント( http://www.sal.tohoku.ac.jp/~gothit/webauthoring … )］より 　私は、HTMLの書き方やスタイルシートの書き方をよくアドバイスします--もちろん自由に使って構いません---が、その中には、自分で工夫したものもたくさんあります。 　それが私が学んだように、また多くの人の参考になれば、さらに優れたものが創造されるからです。 　上記で検索したらたくさんのページがでてきますが、それらも参考にしてください。願わくば、そのような恥ずかしいことはされないほうが良かろうかと思います。 　
数秒程度、2MB程度なら自サーバーでなんとかなると思いますが、10MBを越えてくると、ネットワーク負荷がかかりすぎて、ファイルダウンロード中に他のHTMLファイルなどのアクセスまで制限されてしまいます。 そのため、動画ファイルだけを別サーバーに置いておく事はよくあります。 ですがあまり使用しない動画ファイルの公開のために、わざわざサーバーを用意するのは無理がありますから、 youtubeなどのサーバーを利用するのは、そのメリットが十分あると思います。 別にyoutubeでなくても動画専用サーバーの代わりになるサービス（SNS）はありますが、 API整備などが良い所の方がいいですから、また、無料で利用できるという事が大きいので、 youtubeに人が集まってくると思います。 自サイト/ブログに来ていなくても、SNS（youtube）に訪れた人から動画を見てもらいやすくなるというメリットもありますから、 それを利用して、動画自体にCMをいれておき、そのCMを見る人を増やすためにSNS系のサイトにアップロードするという事が多いと思います。 一般ブログサービスでは動画をアップロードできない所もありますし、 そういう場所では第三者のサービスを利用して動画を公開せざるを得ないと思います。
Web製作には古いほうを使いましょう。それで十分です。 　なぜなら、ウェブは様々な端末で利用されることを目的に作られていますので・・ 　私は一番古い機種がウェブ開発用です。 　私は、そのPCのHDDにウェブ用のパーテーションを作成して、ウェブサーバーに準じたディレクトリを作成しています。 [例] E: 　dev/ 　etc/ 　user/ 　　html/ 　lib/ 　usr/ 　　local/ 　var/ 　bin/ 　proc/ とか・・・このドライブにapache(HTTPサーバー),Perl,sh,PHP,mySQLなども、UNIXのルートに合わせて入っています。 　Cygwin ( http://ja.wikipedia.org/wiki/Cygwin )を入れていますので、ほとんどUNXのようなコマンド処理もできます。 　たくさん出回っていた、過去の機種をオークションで購入しています。なんといっても情報が豊富なので・・ 　ローカルで、 HTTPサーバー---/usr/locla/apache CGI -- /usr/local/bin PHP -- /usr/bin、 SSI などのテストができるようにしています。 　パソコンのスペックは、不要です。それよりも豊富な情報がある古い機種を探したほうが良いでしょう。 　また、別のパーテーションなりにFreeBSDなどのウェブサーバー用OSとして一般的なものを入れて、それを経由してのテストとか・・ 　LANで接続して、イントラネット上のウェブサーバーにしてしまって、どのパソコンからもHTTPやFTPで接続できるようにしても良いでしょう。
>どうやら外枠のボックスを絶対位置指定して中央に表示させているからではないか... 後出しでは絶対解決しません！ 回答者をばかにするような質問ですな。
エラーではなく、当然の結果です。正常な動作です。 　単純にそれを隠すスクリプトなりスタイルシートが後から読み込まれ実行されるからです。 本来、HTMLは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　ですし、javascriptやスタイルシートを理解しないユーザーエージェントもあります。もちろん検索エンジンもそのひとつです。 　もうひとつの理由は、HTMLは原則として逐次表示だからです。可能なものから表示していくことになっている。 　対策としては、基本に忠実--すなわち文書構造にしたがってきちんとHTMLをマークアップすることです。 　なれないうちは、HTMLを書くときに、それをLynxのようなテキストブラウザで確認することも必要です。添付画像は実際にそのページをLynxで確認したものです。ごらんのようにそのページの主題がどこにあるか分かりませんよね。 　HTML5では、そのあたりが徹底されHTMLは基本的に <body> 　<header> 　　ここのページタイトルや要約 　</header> 　<section> 　　本文 　　<aside> 　　　本文と直接関係ない記事 　　</aside> 　</section> 　<section> 　　本文 　　<article><!-- 完結した記事 --> 　　　<header></header> 　　　<section></section> 　　　<footer></footer> 　　</artice> 　</section> 　<footer> 　　フッタ 　</footer> </body> 　先のサイトの隠す予定の内容は、footerないしasideに書くべき内容です。 　HTL4.01でしたら<div class="footer"></div>など・・ 　もし、そのように書かれていたら、スタイルシートやjavascriptが動作していない段階やそもそもそれらを利用しないユーザーエージェント(や検索エンジン)にページの主題を正確に伝えられます。 　いずれにしても、HTMLの最初のほうに「検索エンジン目立つように記事を書きねそれをスタイルシートで隠す」という手法は、検索エンジンから悪質と判断される危険があります。
IE7以上できちんと適用されるならIEは無視して構わないとは思います。 　マイクロソフト自身が「腐った牛乳」と使用して撲滅キャンペーンを張っているくらいです。 マイクロソフト、IE6 撲滅に向けた一大キャンペーン始める | スラッシュドット・ジャパン IT ( http://it.slashdot.jp/story/11/03/07/2037203/%E3 … ) 　まず、スタイルシートの順番を変えると適用されたりされなかったりするのでしたら、それでどの部分以降が読まれていないかチェックできます。 　また、子孫セレクタを解釈しない部分がありますから、間に全称セレクタを入れてみるとかします。 　一意セレクタで記述したスタイルに対して、複数クラス指定しても二つ目以降は利きません。 p.small { } 、td.com { } は、 p small { } 、td span.com { } と指定できるようにHTMLを書き換えます。 　これはＩＥ６のバグですが、HTMLをきちんと記述することで回避できるはずです。 ＞これは、800pxワイドのwrapper　をセンター配置させるCSSです。 　まともなブラウザでしたら 　width:800px;margin:0;auto; 　なのですが、IE6でしたら 　body{text-align:center;} 　#wraper{width:800px;} 　#wraper *{text-align:left;} ですかね。 　私は、この点についてはIE6は無視しています。左に偏って表示されても問題ないですから、それよりも、スマホや幅広ディスプレイに対応させるため div.article{width:80%;min-width:640px;max-width:800px;margin:0 auto;} です。 　IE６への対応に使う労力がもったいない。 最近では、数字にも上がってこない 日本のバージョン別ブラウザシェアグラフ （StatCounter Global Statsより） ( http://lhsp.s206.xrea.com/misc/browser-share-ver … )
　スマートフォンは、mediatypeはscreenですね。通常のscreenと異なるところは、ディスプレイ幅が小さいこと、解像度が高いこと、タッチパネル操作であることです。 　元来 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［2.2.1 HTMLの略歴 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　ですから、ユーザーが特定できるときを除き、デバイスごとにページを作るなんて事は通常はしません。 　そもそも、そのためにわざわざHTMLでページを作成するのですよ。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　ただ、スマートフォンはHTML5とCSS3の一部に対応していますから、HTML自体はHTML5で作成してて、古いIE(8以前)用に、スクリプトを読ませる形にします。 　ページデザイン自体は、リキッドデザインで作成し、横幅480以上なら崩れないようにデザインすれば良いです。(640pxを最小にしても良い) 　まず、jqueryを使わなくても利用できるように作成し、より懲りたいときのみ活用するというスタンスで良いと思います。そうしないと、今後新たなデバイスが出るたびに、ページを起こしたり、修正したり・・・泣くことになる。 　先の引用の前段に 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　と書かれています。 　私は、スマホ対応のページも作成していますが、そのページは「様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ」であるということです。スマホだけが利用するページもありますが、それはそれらのページからスマホだけに表示されるリンクをたどると進めるようになっています。 1) HTML5で作成し、後方互換のため <!--[if IE]> <script src="http://html5shiv.googlecode.com/svn/trunk/html5. … <script src="http://css3-mediaqueries-js.googlecode.com/svn/t … <![endif]--> とかをいれておく 2) 文書構造をきちんと記述する。 3) スタイルシートはリキッドでサインで作成する。
ナビゲーションメニューを統一する意味は、 メニューを次々とクリックしてサイト全体を閲覧したい際に、 場所が統一されていたほうが、ユーザーが迷わない、 ということだと思います。 トップページで一度覚えた配置を、配下のページでまた学習し直さなくて済むからです。 従って今回のサイトが、トップページも含めサイト内の様々なページを閲覧させることを想定しているのであれば、 ナビゲーションメニューは統一したほうがよいです。 逆に、トップページから一直線に目的のページまで誘導して、それで完了、という性質のサイトであれば、 あえてナビゲーションメニューを統一する必要はないと思います。
検索エンジンアプリでサイトを表示する場合、標準ブラウザ（Safari）とユーザーエージェントが異なるため判定に失敗しているのだと思います。 アクセスログ等から、該当するアクセスの際のユーザーエージェントを調べて、判定に追加するといいでしょう。
IEのバージョンが書かれていないのでわかりませんが、擬似要素とcontentに対応しているか確認してみてください。 　なお、 clear: both; content: ” “; display: block; font-size: 0; height: 0; visibility: hidden; の指定の意味はナンでしょう。表示させないなら無駄なものは書くべきじゃありません。 記事要素に対応していない場合、その子孫要素に継承されるプロパティが継承されてしまいます。font-size,visibiltyは継承されるプロパティです。 <ul> 　<li>あいうえお</li> 　<li>あいうえお</li> 　<li>あいうえお</li> </ul> ul li:hover:after{ content:"▼"; }
あなた自身が簡体字のフォントを持っていれば、どの描画ソフトでも問題ないはずですが・・ ペイントだと、文字入力にして座標を決めて枠を作成しフォントサイズを指定してペーストすれば良いです。 　あくまで、あなたがお持ちの簡体字フォントに制約されます。これはどの描画ソフトでも同じです。 　なお、「文字を画像に置き換えて表現することは強く否定されている」方法なので、できれば文字のまま画像の上に配置するべきです。フォントを持っていない人用の対策として画像を使われるのでしたら、画像を読み込まないユーザーエージェント向けにalt属性でテキストをいれておくことが必須です。 →テキストを画像に置き換えて表現する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) →alt属性は、IMG要素とAREA要素では必ず指定しなければならない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
#1です。 pubdt.toLocaleDateString()　の代わりに、文字列で 　「年」 + "/" + 「月」 + "/" + 「日」 となるようにしてあげればよいので、 それぞれは、 　年---pubdt.getFullYear() 　月---pubdt.getMonth() + 1 // 月だけ1を加えると実際の月になります。 　日---pubdt.getDate() で取得できますから、結局のところ 　pubdt.getFullYear() + "/" + (pubdt.getMonth() + 1) + "/" + pubdt.getDate() としてあげればよろしいかと思います。
文字は980px分の幅で中央に、画像は幅980以上は縮小する方向、幅980以下はそのままで・・・を条件に見栄えも考慮すると、CSSはこんな感じでしょうか。 <style type="text/css"> <!-- *{ max-width: 980px; min-width: 0px; margin: 50 auto; } --> </style> 参考ページを作ってみました。 ■table 1200幅の未調整 http://members3.jcom.home.ne.jp/kazzazy/test/w12 … ■table 1200幅で上記style摘要 http://members3.jcom.home.ne.jp/kazzazy/test/w12 … html記述はいい加減なのでつっこまないでください(笑
IMG要素は、行内要素です。 →ブロックレベル要素と行内要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　さらに置換要素と言って置き換えられる画像のサイズによって伸縮します。 →置換インライン要素の場合（Inline, replaced elements） →Intrinsic dimensions - 内在寸法 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　よってスタイルシートでサイズを指定すると、画像のサイズになってしまいます。 　そこで、画像要素(デフォルトはdisplay:inline)を、displayにてblock要素などに変更すればよいと言うことですね。 <ul> <li><a href="#"><img src="../images/gazo1.png"></a></li> <li><a href="#"><img src="../images/gazo1.png"></a></li> <li><a href="#"><img src="../images/gazo1.png"></a></li> ～省略 </ul> の場合、 ul,ul li{display:block;position:relative;} ul{width:80%;margin:0 auto;} ul li{width:30%;height:auto;background-color:yellow;} ul li+li{width:40%;margin-left:1%;} ul li+li+li{width:28%;} とかで、親コンテナブロックのそれぞれ30%,40%,28%になります。余白は二つ目のli以降は１％あきます。 　それじゃまずいのですか？
あまりにも漠然とした質問で、アドバイスは出来ませんが、widthの指定が何であろうと、それに含まれるブロックは親コンテナブロックのサイズを基準にサイズが決定されるようにすると、崩れることはありません。ただ、その中に絶対サイズでサイズを決めてしまうと、はみ出すことがあります。 　以前『HTML　いじったらデザインが崩れました。 - HTML - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7576158.html#a5 )』で回答したソースですが、ウィンドウサイズが変わっても崩れることはないはずです。 　
＞display:box;を設定した場合に、widthを使わない事は知りませんでした。 　いえ、使いますが、この様な場合は使いません。それはboxの目的を考えればわかると思います。段組に使うときは-- 　なお、ベンダーフィックスは -moz-box-sizing: border-box; -webkit-box-sizing: border-box; -o-box-sizing: border-box; -ms-box-sizing: border-box; と記述するはずです。 ＞折角セレクタの詳細度のURLを頂きましたが、チンプンカンプンです。 　CSS3を学ぶ前にCSS2.1を完璧に身につける必要があります。なんでもいきなり飛び越したらダメです。 　CSS2.1の『6. 値の割り当て、カスケード処理、継承 ( http://www.w3.org/TR/CSS2/cascade.html )』は、【カスケーディング】スタイルシートと言うくらい、CSSの根幹に関わる部分です。プロパティはその後に身につけるべき。CSS3もこのカスケーディングの仕組みは大きく変わっていません。--セレクタは増えました。 (注)No.1で示した「値の割り当て、カスケード処理、継承」のリンクはCSS2のもので、現在ウェブ標準とみなされているものはCSS2.1です。CSS2.1は詳細度の計算が変更になっています。 　しかし、概略は邦訳のあるCSS2で理解して変更点だけ補足すれば良いでしょう。 　詳細度が4桁になりました。 　style属性の詳細度がa=1になりました。 　詳細度とはa,b,c,dの4桁の数値で表されますが、桁上がりはしません。 　　「0,12,5,1 ということもありうるということ」 ★とにかくカスケーディングと詳細度の計算だけは--とは言っても常識で判断できますが--- 　先の例で言うと div.section div.section{ /* 詳細度 0 0 2 2 */ display:box;/* 継承されるプロパティ */ } div.section div.section div{/* 詳細度 0 0 2 3 */ background-color:green;/* 継承されるプロパティ */ } div.section div.section div+div{/* 詳細度 0 0 2 4 */ background-color:lime;/* 継承されるプロパティ */ } div.section div.section div+div+div{/* 詳細度 0 0 2 5 */ background-color:aqua;/* 継承される */ } div.section div.section div{/* 詳細度 0 0 2 3 */ background-color:green; box-flex:4.0/* 継承されない */ } div.section div.section div+div{/* 詳細度 0 0 2 4 */ background-color:lime;box-flex:1 } div.section div.section div+div+div{/* 詳細度 0 0 2 5 */ background-color:aqua;box-flex:2 } となります。登場順に関わらず詳細度が高いものが適用されます。 ★HTML5とCSS3の参考書は脇にのけて、今はHTML4.01strictとCSS2.1を徹底的に身につけましょう。断じてその方が早いです。 　strictですよ!!!!! 　その後で、「HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」 　なお、HTML5の新しい要素名は、HTML4.01で作成するときの良い参考になります。すなわち <body> 　<div class="header"> 　　<div class="nav"></div>　 　</div> 　<div class="section"> 　　<div class="section"> 　　　<div class="aside"> 　　　</div> 　　</div> 　</div> 　<div class="footer"> 　</div> </body> 　と書くようにすれば、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML4.01仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より に適合しているし、そのままHTML5に書き直すことも出来る---書き直さなくても<doctype>を書き直すだけでHTML5にはなるけど・・ 最後に、この段組でしたら、position:absoluteで行うべきですね。
googleなどの広告サイズを参考にしてみてはどうでしょう
HTML5でしたら、divを使う機会は劇的に減るでしょう。 画像の加工の必要はありません。 display:hiddenの必要もありません。 ★置換インライン要素であるimgをblockに変更するだけです。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <section class="photo"> 　<h2> 　　<p> 　　　画像を角丸で置いてみる。 　　</p> 　　<figure><img src="" width="" height="" alt=""></figure> 　　<p> 　　　スタイルシートは下記のようになります。 　　</p> 　　<pre></pre> </section> のHTMLとすると・・・・ ★タブは＿に置換してあります。 <!doctype html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> ＿<link rel="stylesheet" href="css/style.css"> <style media="screen"> <!-- html,body{margin:0;padding:0;background-color:silver;} header,section,footer{width:80%;margin:0 auto;} section figure img{ ＿display:block; ＿border-radius:20px; ＿box-shadow: 10px 10px 10px 10px rgba(0,0,0,0.4); ＿margin:0 auto; /* ブラウザベンダーフィックス */ ＿-moz-border-radius: 0.5em; ＿-webkit-border-radius: 20px; ＿-o-border-radius: 20px; ＿-ms-border-radius: 20px; ＿-moz-box-shadow: 10px 10px 10px rgba(0,0,0,0.4); ＿-webkit-box-shadow: 10px 10px 10px rgba(0,0,0,0.4); ＿-o-box-shadow: 10px 10px 10px rgba(0,0,0,0.4); ＿-ms-box-shadow: 10px 10px 10px rgba(0,0,0,0.4); } pre{ ＿background-color:white; ＿padding: 0.5em 1em; } --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#">Some</a></li> ＿＿＿＿<li><a href="#">navigation</a></li> ＿＿＿＿<li><a href="#">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section class="photo"> ＿＿<h2>画像に影をつける</h2> ＿＿＿<p> ＿＿＿＿画像を角丸で置いてみる。 ＿＿＿</p> ＿＿＿<figure><img src="./images/5.jpg" width="480" height="360" alt=""></figure> ＿＿＿<p> ＿＿＿＿スタイルシートは下記のようになります。 ＿＿＿</p> ＿＿＿<pre>section figure img{ display:block; border-radius:20px; box-shadow: 10px 10px 10px 10px rgba(0,0,0,0.4); margin:0 auto; }</pre> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
ごく簡単なサンプル書いてみました。 　ただし、本来は画像になっている説明文などは、きちんと記述しておくべきです。次善の策として画像のaltに書いておいても良いでしょう。 [誤] <li> 　　<a href="./Summary"><img src="summary.png" width="180" height="32" alt="Summary"></a> 　　<p> 　　　　<img src="summary_un.png" width="332" height="70" alt="ここにテキストでリンク先の詳しい説明をかいておく。"> 　　</p> </li> [正] <li> 　　<a href="./Summary">Summary</a><span>For an overview of the event Noted some Rough content It's about "king Fish" Please confirm participants.</span> </li> とか・・・ 　いずれにしても、 ・スタイルシートを読まないPC以外のブラウザ 　　スマホでない携帯電話とか、読み上げソフト、点字端末・・ ・検索エンジン ・プリンター で利用できなきゃHTMLで作成する意味がない。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より →テキストを画像に置き換えて表現する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )は、強く非推奨なのです。 ★サンプルは、スマホには対応はしていますから小さなウィンドウでも問題なく利用できるでしょうが、その他のユーザーエージェント(プリンター、携帯電話、読み上げソフト、点字端末、検索エンジンには未対応です。 ★ボタン画像は無駄な余白を切り捨てて、下記のサイズに切り抜いています。必ず下記サイズに切り抜いてテストしてください。 ★HTMLも極めて簡単できちんと文書構造だけを示していることを確認すること。 ★スタイルシートが、文書構造を基に書かれていて簡単でわかりやすいこと。 　先でどのようにもデザインを変えられること ★オリジナルと異なりスタイルシートなしで表示しても利用できること ・・・などを確認してください。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;} body{ ＿background:url(min.jpg) black top left no-repeat; ＿background-size:100%;/* CSS3 */ } div.header h1{margin:100px auto 50px 40px;;width:390px;text-align:right;} div.header h1 img{display:block;width:100%;height:auto;} div.section{height:100%;} div.section h2{display:none;} div.section ul.nav, div.section ul.nav li{ ＿display:block;list-style-type:none; ＿text-align:right; } div.section ul{width:390px;position:relative;} div.section ul.nav li p{display:none;} div.section ul.nav li:hover p{display:block;position:absolute;top:100%;right:0;} div.footer{ ＿height:60px; ＿position:absolute; ＿bottom:0; ＿color:white; } div.footer h2{display:none;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1><img src="tile.png" width="391" height="51" alt="OPERATION KINGFISH"></h1> ＿</div> ＿<div class="section"> ＿＿<h2>サイトマップ</h2> ＿＿<ul class="nav"> ＿＿＿<li> ＿＿＿＿<a href="./Misson"><img src="summary.png" width="180" height="32" alt="Summary"></a> ＿＿＿＿<p> ＿＿＿＿＿<img src="summary_un.png" width="332" height="70" alt="ここにテキストでリンク先の詳しい説明をかいておく。"> ＿＿＿＿</p> ＿＿＿</li> ＿＿＿<li> ＿＿＿＿<a href="./info.html"><img src="info2.png" width="248" height="32" alt="Infomation"></a> ＿＿＿＿<p> ＿＿＿＿＿<img src="info_un.png" width="370" height="104" alt="ここにテキストでリンク先の詳しい説明をかいておく。"> ＿＿＿＿</p> ＿＿＿</li> ＿＿＿<li> ＿＿＿＿<a href="./Misson"><img src="mission.png" width="320" height="32" alt="Misson"></a> ＿＿＿＿<p> ＿＿＿＿＿<img src="mission_un.png" width="370" height="104" alt="ここにテキストでリンク先の詳しい説明をかいておく。"> ＿＿＿＿</p> ＿＿＿</li> ＿＿＿<li> ＿＿＿＿<a href="./blog"><img src="blog.png" width="100" height="32" alt="Blog"></a> ＿＿＿＿<p> ＿＿＿＿＿<img src="blog_un.png" width="370" height="102" alt="ここにテキストでリンク先の詳しい説明をかいておく。"> ＿＿＿＿</p> ＿＿＿</li> ＿＿＿<li> ＿＿＿＿<a href="./contactUs.html"><img src="contact.png" width="240" height="32" alt="Contact Us"></a> ＿＿＿＿<p> ＿＿＿＿＿<img src="contact_un.png" width="370" height="104" alt="ここにテキストでリンク先の詳しい説明をかいておく。"> ＿＿＿＿</p> ＿＿＿</li> ＿＿</ul> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<address>&copy; ORUKA1951 2001 - 2004 All Rights Reserved mailto:*****</address> ＿</div> </body> </html>
単純に機械的に処理している。--オーサリングツール-- それより前にdiv{display: [block以外];が指定してある。---それ以前のものにより詳細度が高い設定をすべき。 知らない・・
> Wordprerssに関わらず、IEでのみレイアウトが崩れる > といった事例に対して他に可能性のあることはないでしょうか。 単にデザインが崩れるだけだと思います。（曖昧） ともかく、IEは最悪のブラウザ。 いくつかのWEBサイトのHTML/CSSソースを見てみると、 <!--IE対策-->などという記述がされているものをみかけることでしょう。 IEではTridentというレンダリングエンジンを使用していて、 FireFoxではGecko、Safariではwebkitという すべて違うわけなのですが...（略 # 詳しくは調べてみて下さい。 特にIE6はヒドイですね。 WEBプログラマは 「IEが無ければ…」、「IEなんて消えてしまえ！」 と、いつも思っていますよ。
headingです。headlineではありません。意味が微妙に違う。 仕様書を見れば・・7.5.5 見出し: H1、H2、H3、H4、H5、H6要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) <!ENTITY % heading "H1|H2|H3|H4|H5|H6"> 　Web製作をされているならご存知だと思いますが なお、タグには背景は付けられません。背景が付くのはh3要素です。タグは、あくまでその部分が文書を構成するどんな要素(element)かをマークアップする目印(tag)にしか過ぎません。 h3{background-image:url();line-height;20px;height:20px;} と、見出し(レベル3)である要素に背景画像を指定します。 このような横長の背景画像を探すときのキーワードは banner image - Google 検索 ( https://www.google.co.jp/search?hl=ja&safe=off&q … ) 　ですよ。
当然、そうなるはずですが？ 　すくなくとも、IE以外の(言い換えればウェブ標準の)ブラウザでは同様になるはずです。 borderを簡略化プロパティを使わずに記述すると hr{ border-top-color: #000; border-right-color: transparent; border-bottom-color: transparent; border-left-color: transparent; border-top-style:dashed; border-right-style:none; border-bottom-style:none; border-left-style:none; border-top-width:1px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; } ですね。 ここで、 hr.B { border-top: 1px dashed #000; height: 1px; width: 100%; } では、他のborderの値は指定されていませんから、初期値であるmidiamの幅になります。 よって hr.C{ border-top-color: #000; border-right-color: transparent; border-bottom-color: transparent; border-left-color: transparent; border-top-style:dashed; border-right-style:none; border-bottom-style:none; border-left-style:none; border-top-width:1px; border-right-width:1px; border-bottom-width:1px; border-left-width:1px; } /* 簡略化プロパティを使うと */ hr.D{ border: transparent none 0px; border-top: #000 dashed 1px ; } で、なければならないことになります。IEは多くのバグがありますから惑わされないように・・私はぺーじ製作ではfirefoxをデフォルトとしています。 なお、width/heightは不要です。 また、いちいちclass名を書くことはしません。 div.section>hr{ border: transparent none 0px; border-top: #000 dashed 1px ; } で本文中のhrは指定できます。 また div.section hr:last-child{} とか・・・ 　いちいちclass名を書くことはありません。必ず文書構造から特定できるはずです。(HTMLがちゃんと書けていたら)
firefoxをお使いでしたら、User Agent SwicerとFire Mobile simulator とfire Bug でアクセスも解析もできるはずです。 ★さすがflashはないでしよう。appleはflashへの対応を拒否してますので・・ →iPhone OSがFlashをサポートしない6つの理由 - ジョブズ氏が説明 ( http://news.mynavi.jp/news/2010/04/30/003/index. … ) そんな難しい手法ではなく、率直なHTMLとモバイル端末用にスタイルシートが用意されているだけのようですが・・・ 　そもそも、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　なのですから・・ 　上記引用文の前に「HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。」と書かれている。 　さて、モバイル端末に(も!)対応したウェブページですが、モバイルと言っても携帯電話からi-phone,i-padまで様々です。それら一つ一つに対応するページを作成するのは現実的ではありませんから、ウェブのセオリーにしたがってページを作成すると良いです。 1) HTMLをきちんと文書構造にしたがってマークアップする。 　携帯電話用に要素の属性を使ってデザインする。 2) <head></head>内のスタイルシートを読める携帯電話用に<head></head>内にスタイルシートを記述する。 3) その後に外部スタイルシートを読み込む記述をする。 　a)最新のスマートフォンは基本的にパソコン用のブラウザと同じmedia=screenとして動作します。 　b) スタイルシートをディスプレイ幅によってレイアウトが変わるように記述する。 　c) 最新のブラウザ用にCSS3のmedia のand条件を利用してスタイルシートを用意する。 と言う対策で良いと思います。スマホだけを対称にするならHTML5 + CSS3でスタイルを記述すればよいのですが、薦められる方法ではありません。 具体的には <body bgcolor="gray"> 　<div class="header" id="TOP"> 　　<h1>見出し</h1> 　　<div class="nav" id="SITE_MAP"> 　　　<ul> 　　　　<li><a href=""></a></li> 　　　　・・・・・・・ 　　　</ul> 　　</div> 　</div> 　<div class="section"> 　　<h2>記事見出し</h2> とか・・・HTML5だと参考までに <body> 　<header id="TOP"> 　　<h1>見出し</h1> 　　<nav id="SITE_MAP"> 　　　<ul> 　　　　<li><a href=""></a></li> 　　　　・・・・・・・ 　　　</ul> 　　</nav> 　</header> 　<section> 　　<h2>記事見出し</h2> 次に<head>内のスタイルシートで <style type="text/css" media="screen"> ・・・ div.header div.nav{width:20%;min-width:480px;float:left;} div.header div.nav ul,div.header div.nav ul li{display:block;list-style-type:none;margin:0;padding:0;} div.header div.nav ul li{display:block;border:solid blue 1px;} div.section{min-width:480px;} とか・・・まったくテストしてません。イメージとして・・ 添付は、firefox + fire Mobile sumilator + User Agent Swicer + fire BugでYahoo!モバイルからオークションに進んだところ。
質問文を整理願います。 htmlタグ 「<a href="http://www.XXXX.co.jp/">通常のリンクテキスト </a>」 これでは 「通常のテキストリンク 」にしかなりません 「background-imageにリンク」であれば <a href="http://www.XXXX.co.jp/"></a>になり CSSに　display:block;を使うことで可能になります。
以前回答したものですが ★スーマートフォンの用のHP作成に関して - ホームページ作成ソフト - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7132984.html ) 　これはレイアウトは変えていませんが、ウィンドウサイズや文字サイズを変更しても利用できるサンプルです。スマホでも極端に幅広のディスプレイでも大丈夫と言うことです。 　印刷や携帯電話の場合は素なHTML(ブラウザのスタイルシートを使って)として表示されます。印刷プレビューで確認できます。
＞”文字のサイズ”を変更するとレイアウトが崩れてしまいます。 　ウェブでサインとしては最悪ですね。そもそもウェブの目的が 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　なのですから、ウェブデザインで最も重要な--優先順位一位--がこれですから。 ★Adobe PageMakerのようなDTP( http://ja.wikipedia.org/wiki/DTP )、ワープロによる文書作成ともっとも異なる部分です。もしデザインを固定したいなら、それらで作成してPDFにすればよいです。 　その意味では(2)の解決策は超最悪ですね。 　目の悪い人がページを読むために文字サイズを大きくすると崩れたのでは、せっかくHTMLでページを作成した意味がありません。たとえ(2)の方法をとったにしても、インターネットオプションで「Web ページで指定された色を使用しない(C)」「Web ページで指定されたフォント スタイルを使用しない(S)」「Web ページで指定されたフォント サイズを使用しない(Z)」や「自分のスタイル シートでドキュメントの書式を設定する(D)」を指定したり、javascriptを停止したり、さらには、ブラウザの「表示」→「スタイルシートを利用しない」を選択したら・・・。 　視覚弱者だけでなく、特に近年のようにモバイル端末、スマートフォン、携帯電話、i-pad、様々な幅のディスプレイが混在する状況では、それらに対応させることが最優先となります。 　基本的には下記の対策がすべてになります。(1)ではない、もちろん(2)ではない。 @media screen 　に対して(パソコンディスプレイやi-pad,i-phone対象、携帯電話やPDA、プリンター、TVなどを除く)、期待サイズ＋最大幅、最小幅でサイズを決めて、配置は%で指定する。floatは本来の文書中の挿絵の周囲にテキストを回りこませるなど限定的な使用にとどめる。 　です。
＞使用しているレンタルサーバーのアクセスカウンターを表示するため、shtmlに変更する必要があるようなのです。 　ちょっと珍しいですね。 　単にHTML内にincludeないしexecコマンドを書き込んで、拡張子をshtmlにすればよいです。 ＞それ以外にも方法はあるのでしょうか？ 　該当ファイルをSSIとして動作させればよいです。.htaccessに Options +Includes AddHandler server-parsed html 　すべての拡張子htmlのファイルが処理されるので各ディレクトリのindex.htmlだけなら <Files ~ "index\.html$"> Options +Includes AddHandler server-parsed html </Files> とします。
＞としても結局何も変化がありません。 　結局あなたは、私の回答をまったく読んでない。 　スクリプトタグのボックスをCSSでかえるの回答No.2 ( http://oshiete.goo.ne.jp/qa/7580337.html#a2 ),回答No.3 ( http://oshiete.goo.ne.jp/qa/7580337.html#a3 )で ＞scriptが書き出すHTMLに対してスタイルシートを書きます。 と回答しています。 　javascriptが動作した後のHTMLは <script*****> <script> <ins style="display:table-cell****>★★javascriptが書き出すHTML★★</ins> <ins style="display:table-cell****>★★javascriptが書き出すHTML★★</ins> 　となっているとのことでしたよね。( http://oshiete.goo.ne.jp/qa/7582722.html#a3 への補足)ということはHTMLの樹構造は |-- scritt |-- ins |-- ins となっているとということですね。scriptになにを指定しようが、その外にあるins要素には一切無効です。 　insの内容上の例で言うところの「★★javascriptが書き出すHTML★★」についてスタイルを書くためには、セレクタでこのins要素を特定しなければなりません。 　(セレクタ-selectorとは選択(select)する方法--選択子) 　ここで、scriptに隣接している要素を指定するには script + ins{ 　と隣接セレクタ/兄弟セレクタ + を使わなければなりません。 　さらにその兄弟でしたら script + ins + ins{ 　ですね。 →5.7 隣接セレクタ（Adjacent sibling selectors） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　ここで、ins自体はそのstyle属性でdisplay:table-cell と書かれていますから、これはもう動かせないので、 script + ins{ script + ins + ins{ にたいしてスタイル指定をすれば良いのです。 　その仕組みを理解するために、 スクリプトタグのボックスをCSSでいじる方法 の回答No.3で ( http://oshiete.goo.ne.jp/qa/7582722.html#a3 )でサンプルまで作って理解できるようにしたはずです。 スクリプトタグのボックスをCSSでかえる - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7580337.html ) スクリプトタグのボックスをCSSでいじる方法 - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7582722.html ) 　の質問と回答をとにかく読んでください。折角回答してもらっても読まなきゃわかるはずがありません。 　
ブロック要素で囲まなくても、 a.hogeclass{ display:block; } とすれば、aタグもブロック要素になってwidthが効きますよ！
IEのバージョンがわかりませんが、たぶんウェブ標準のすべてのブラウザでそうなります。 基本的な対策は、ウェブ標準に直し、IEが互換モードではなく標準モードで起動するようHTMLを修正する必要があります。 　DOCTYPEスイッチで、標準モードで起動するように直すこと ・doctypeスイッチ - Google 検索 ( https://www.google.co.jp/search?q=DOCTYPE%E3%82% … ) 　もちろん、HTMLもDOCTYPEに合わせて修正する必要があるでしょう。 　さすがにないでしょうが、可能ならHTML4.01strict,XHTML1.0strict,XHTML1.1(XHTML1.1にはtransitinalやframesetはない)・・1999年の勧告以来 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Conformance: requirements and recommendations (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　とされてきましたから、strictだとは思いますが・・ 　なお、互換モードで一番問題となるのは、IEのスタイルシートのサイズ計算のバグです。 すなわち、コンテナブロックのサイズをpaddin辺の内側ではなくborder辺の内側として計算してしまうことにあります。 　IEを標準にWebページを作成すると良く犯す失敗です。できれば他のウェブ標準ブラウザを使用して作成するほうが無難です。特にFirefoxは開発用ツール( https://addons.mozilla.jp/firefox/extensions/dev … )が豊富ですから、この様なときにとても助かります。
もうすこし詳しいソースを見せてください！！
＞難しくて残念ながらすべてわかりません。 　難しくなんかありません。ある意味とってもわかりやすいです。 　最初にプロパティから入ってしまったから難しいだけです。 [例]必ず樹構造から考えます。 　body 　　|-- div　(1) 　　|　　|-- div (2) 　　|-- div (3) 　　|　　|-- div　(4) 　　|--div (5) 　　　　 |-- div (6) 　　　　　　　|-- div (7) としたら、 *{}ですべての要素 *全称セレクタで　　　　　 詳細度 0 0 0 0 →すべての要素 div{}ですべて(1) ～ (7) タイプセレクタ×１で詳細度 0 0 0 1 →(1)～(7)のdiv div div{}は半角スペース(子孫セレクタ)　　 　詳細度 0 0 0 2 →(2)(4)(6)(7) div div div{}　　　　　　　　　　　　　　　　詳細度 0 0 0 3 →(7) div>div 子セレクタ 　　　　　　　　　　　　　詳細度 0 0 0 2 →(2)(4)(6)(7) div+div 隣接セレクタ　　　　　　　　　　　　 詳細度 0 0 0 2 →(3)(5) body>div 子セレクタ　　　　　　　　　　　　　詳細度 0 0 0 2 →(1)(3)(5) body div:first-child　擬似クラス　　　　　　 詳細度 0 0 1 2 →(2) body div:nth-child(2) 擬似クラス　　　　　　 詳細度 0 0 1 2 →(3)　CSS3 　 とか、別にclass名やidなくても特定できるはずです。 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ★5.1 Pattern matching ( http://www.w3.org/TR/CSS2/selector.html#pattern- … ) 　↑原文　CSS2.1 ★5.1 パターンマッチ（Pattern matching） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　↑邦訳ただしCSS2 ★6.4.3 Calculating a selector's specificity ( http://www.w3.org/TR/CSS2/cascade.html#specificity ) 　↑原文 CSS2.1 CSS2.1がウェブ標準でCSS2より変更されている。 　一見難しそうですが、慣れたらとても簡単です。
google driveではイカンのですか。 http://drive.google.com
逆でしょ? @importを利用することで負荷は減ります。 その説明だと 　Ａページで利用しているのは、外部スタイルシートの一部なので、スタイルシートのその部分だけを外部スタイルシートにしたら、Ａページで読み込むデータ量は減った。 　・・・でもページ数が増えたら、逆転しますね。 　推奨されている方法は 1) @import または <link 2) <style type="" 3) style="" 　私が比較的大きなサイトで利用している方法は <!-- 永続的スタイルシートすべてのmediaに対して --> <link href="persistent.css" rel="stylesheet" type="text/css"> <!-- 優先スタイルシート --> <link href="preferred.css" title="標準" rel="stylesheet" type="text/css"> 　代替スタイルシートや印刷用スタイルシート、読み上げソフト用やTV、携帯電話用も必要があれば・・ ここで、標準スタイルシートだけについてみると サイトのトップページでは トップページ用のスタイルシートを読み込みますがそれは @importで　 　　topShape.css 　　standardColor.css を読み込ませます。 　これが、各分野のトップページでは 　　topShape.css 　　toolsColor.css または、booksColor.cssあるいはhardware.css 　そのコンテンツページでは 　　contentShape.css 　　toolsColor.css または、booksColor.cssあるいはhardware.css というふうに、デザインと配色を別々にimportします。さらに代替スタイルシートで大きなフォントを選択した場合は、配色用のスタイルシートはそのままで外形のみ異なるものをimportします。ハイコントラストを選択した場合はデザインはそのままでとか・・ 　サイトのサイズが大きくなると、すべてのページに適用させるスタイルシートが肥大化するか、数種類の巨大なスタイルシートを作ることになりますが、このようにデザインと配色を分けるだけで小さく出来ます。 　また、メンテナンスもスクロールなしで該当部分の編集が可能になります。 ★importを使うのは、外部スタイルシートにすると通信負荷を低減させる理由とまったく一緒です。そしてなによりも、作者側からするとメンテナンスが楽になります。 ＞↑linkでも同じでしかも早いんなら、importはいらないんじゃないんでしょうかね？ 　これは誤解です。現実にはlinkでページデザインや配色が変わるたびにすべて読み込ませるより早くなります。これはサイトが小さいときには感じませんが大きくなるとものすごく差が出てきます。
IEの古いバージョンに対応させる方法 ・javascriptを使う方法は感心しません。セキュリティソフトやユーザーの設定で内容を書き換えるスクリプトを禁止している場合がある。 ・CSSハック--IE6のバグを利用して、IE6しか読まないスタイルで追記する。 ・いずれにも対応するスタイルシートを記述する。 　コンテナブロックのサイズの計算が異なる場合、その誤差が出ないようコンテナブロックにpaddingを0として内容のmarginで指定するなど ・HTTP要求ヘッダを識別して異なるスタイルシートを提供する。 　まあ、下から順番に使うべきでしょう。 ・標準モードで作成する。が基本です。さすがに、これはすでに対策済みでしょう。 　「HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」--1999年のHTML4.01の勧告以来言われ続けていることですから 　「DOCTYPEスイッチ」も調べておくこと ・paddingは内部にブロックを含む場合は使用しない ・どうしても必要な場合はCSSハックを使う 　このあたりが現実的な対策かな・・・javascriptは可能な限り使わない。使ってもjavascriptを停止していても利用に問題ないレベルに押さえる。--これはSEOとしても重要です。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Lynx などのテキスト ブラウザを使用して、サイトを確認します（ほとんどの検索エンジンのスパイダーには Lynx で見えるようにサイトが映ります）。JavaScript、Cookie、セッション ID、フレーム、DHTML、Flash などの特殊な機能が使用されているためにサイトの一部がテキスト ブラウザで表示されない場合、検索エンジンのスパイダーがサイトをうまくクロールできない可能性があります。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ( http://support.google.com/webmasters/bin/answer. … )］より
先にも回答しましたが・・ position:absolute; height:100%; で問題ないはずです。 　先の回答・・試されていませんね。floatなんてまったく使ってないのに「項目の領域を削除したらフロートが落ちたのと、」とは如何に？？ 　先の回答の項目を等分割している部分を消すなり固定値に変更すればよいだけです。 　単にコピペするのではなく、理解するようにしましょう。 ＞5-2の下にボーダー引くならulの下にborder引くか、:last-child擬似要素 ★リストの書き方が間違っています。 <div id="menu"> <ul style="list-style-type: none"> <li><a href="index.html">1</a></li> <ul style="list-style-type: none"> <li><a href="index.html">2</a></li> <li class="sub"><a href="index.html">2-1</a></li> <li class="sub"><a href="index.html">2-2</a></li> <ul style="list-style-type: none"> <li><a href="index.html">3</a></li> <li class="sub"><a href="index.html">3-1</a></li> <li class="sub"><a href="index.html">3-2</a></li> <ul style="list-style-type: none"> <li><a href="index.html">4</a></li> じゃなくて <div id="menu"> 　　<ul> 　　　　<li><a href="index.html">1</a></li> 　　　　<li><a href="index.html">2</a> 　　　　　　<ul> 　　　　　　　　<li><a href="index.html">2-1</a></li> 　　　　　　　　<li><a href="index.html">2-2</a></li> 　　　　　　</ul> 　　　　</li> 　　　　<li><a href="index.html">3</a> 　　　　　　<ul> 　　　　　　　　<li><a href="index.html">3-1</a></li> 　　　　　　　　<li><a href="index.html">3-2</a></li> 　　　　　　</ul> 　　　　</li> 　　　　<li><a href="index.html">4</a></li> ・・・・・ でなきゃならない。 　また、 style="list-style-type: none" も class="sub" なんて要りません。 　#menue ul,#menue ul li{list-style-type:none;} とか 　#menue ul li ul l1{} とかで済むはずです。 　先の回答は、そのようなHTMLの書き方やセレクタの書き方もわかるように書いたはずです。 ★HTMLは文書構造しか書かない。 ★スタイルシートは文書構造を元にデザインを指定したい要素をセレクタで指定して書きます。 「メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。. ( http://jigsaw.w3.org/css-validator/#validate_by_ … )」は伊達じゃない。 #(一意セレクタは極力使わない--javascriptやリンクのターゲット以外には書かない。詳細度が高すぎてスタイルシートが煩雑になります。もちろんHTMLも header,footerとうclass名、HTML5では新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )でわかるようにひとつの文書に何度も登場するものです。 <div class="section"> 　<h2>見出し</h2> 　<div class="section"> 　　<h3>見出し</h3> 　　<div class="article"> 　　　<div class="header"> 　　　　<h2>・・・</h2> 　　　</div> 　　　<div class="section"> 　　　　<h3>。。</h3> 　　　</div> 　　　<div class="footer"> 　　　・・・・ 　　　</div> 　　</div> 　　<div class="footer"> 　　・・・ 　　</div> 　</div> 　<div class="footer"> 　</div> </div> とか、・・・HTML5では、 <section> 　<h2>見出し</h2> 　<section 　　<h3>見出し</h3> 　　<article> 　　　<header> 　　　　<h2>・・・</h2> 　　　</header> 　　　<section> 　　　　<h3>。。</h3> 　　　</section> 　　　<footer> 　　　・・・・ 　　　</footer> 　　</article> 　　<footer> 　　・・・ 　　</footer> 　<section> 　<footer> 　</footer> </section> と書くことになります。 この場合、idやclass名がなくても、それぞれのfooterは、セレクタで特定できるのです。 とにかく、先の回答をHTMLを含めて理解してください。そしたら簡単に解決します。
そんな枠線は現れないはずです。 firefox+firebugで枠線の付く要素を探してください。左のHTMLと右のCSSを比較すると原因がわかるはず。
今日もいい天気ですわ
なにを公開するのか？ ページ数・サイトの規模は？ 　　　どのようなデザインにするのか？ 　　　　これは後回しでも良いでしょう。 　私は、小規模サイトでしたら、HTMLもCSSも手打ちです。理由は ・ウェブ標準でメンテナンス容易なものが作りやすい。 ・デザインが良くて、かつ変更が簡単 ・SEOがきちんとできる ・・・Webオーサリングツール→HTMLエディタ ( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … ) 　に書かれているそのままの理由です。 　オーサリングツールを使う場合は、テキストエディタで作成する以上に正確な知識が必要です。---オーサリングツールを使うとHTMLやCSSを知らなくても、ちゃんとしたページができると誤解されている人が多いですが、まったく逆です。 ＞できればスマホでもうまく見れるようにしたいです。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。・・・【中略】・・・なぜならただ1種類の文書しか作る必要がなくなるからだ。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML4.01仕様書「2.2.1 HTMLの略歴」( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より となると、テキストエディタしかないのは現実です。 ★HTMLは、文書構造をマークアップするものでデザインのための道具ではない ★スタイルシートは、HTMLでマークアップされた文書構造にしたがって、そのプレゼンテーションを指定するもの 　この住み分けをきちんとすること。--こればっかりはオーサリングツールではできません。原理的に不可能です。 　すなわち、この部分は本文とは直接関係ないブロックだから、<div class="aside">(HTML4.01)、<aside>(HTML5)とマークアップすべき・・・なんて、文書読解能力のないツールには不可能。スタイルシートで記事本文中の補足記事はフォントを小さくしようとdiv.section div.aside{font-size:0.9em;margin:0.5em 1em;border:dotted 1px gray;}と書くことすらできない。 　タグの閉じ忘れ、綴りの間違い、タグの使い方の誤り・・それはツールが補完してくれます。しかし、それ以上でもそれ以下でもない。
私もかなり汚くなったのでびっくりしたのですが、 私の場合はJPGにする前の段階で、 出来上がった画像を縮小した時に汚くなっていました。 MAC版を使っているのですが、 環境設定／一般／画像補間方式＿を ＜バイキュービック法(滑らかグラデーションに最適)＞ にすると直ります。 デフォルトでは＜バイキュービック自動＞になっていました。 大きめに作った画像を縮小してJPGにしているとしたら これが原因だと思います。
＞*{margin:0; padding:0;} ＞body, h1, h2, h3, h4, h5, h6, pre, li, dt, dd, th, td, p {font-family:"ＭＳ Ｐ明朝","平成明朝",serif; } ＞みたいな煩雑な表記を選択するのだろう、という疑問です。 　もちろん無知という側面が最大の要因ですが、それ以外にmarginとpaddingは継承しないプロパティであること。そのためにすべての要素に対して指定しなければならないこと。継承されるプロパティについては、一つ一つのタイプセレクタを書く必要があるということ。 　さすがにこの様な書き方はしませんが html,body{margin:0;padding:0;} body{font-family:"ＭＳ Ｐ明朝","ヒラギノ明朝 ProN W3","Hiragino Mincho ProN","平成明朝","ＤＨＰ平成明朝W3",serif;} h1,h2,h3,h4,h5,h6,dt{font-family:"ＭＳ Ｐゴシック","ヒラギノ角ゴ Pro W3",Osaka,sans-serif;} のような書き方はします。 　要は、わかりやすければよいわけで 最初にウィンドウと内容のスキマを消しておく。 ついで、少しずつ詳細度の高いもの、指定したいブロック・・・とどんどんと書き進めていきます。 　ナビゲーション中のdtなどは異なる書体にしたければ /* ここからナビゲーションの指定 */ div.nav{****} div.nav dl,div.nav dl dt,div.nav dl dd{ 　　display:block;list-style:none; 　　margn:0;padding:0; 　　font-family:"ＭＳ Ｐ明朝","ヒラギノ明朝 ProN W3","Hiragino Mincho ProN","平成明朝","ＤＨＰ平成明朝W3",serif; } とかすればよい。詳細度はそれぞれ[0,0,1,2][0,0,1,3][0,0,1,3]ですから、順番に関わらず上書きされる。 　まあ、なんで「トンネル内でライトをつけないのでしょう」と言われても、本人に聞かなきゃわからない。道交法では「トンネル内の照明が暗く50m先まで明瞭に見えない場合」となっているが、突然のトンネル照明の消灯や出口付近での対向車からの視認性を考えればそれでも・・結構つけない人が多い。理由はわかりません--本人に聞かなきゃ。
その部分のプレゼンテーションを指定しているスタイルシートがない!! firefox＋fireBugで調べると一目瞭然だと思います。
もちろん「ＭＳ　Ｐ明朝かＭＳ　Ｐゴシック」を持っている人(Windows使い)だけですが、 font-familyは継承されるプロパティです 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 'font-family' 　Value: [[ <family-name> | <generic-family> ],]* [<family-name> | <generic-family>] | inherit 　Initial: depends on user agent 　Applies to: all elements 　Inherited: yes　<-- ここ 　Percentages: N/A 　Media: visual ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［フォント( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )］より 　ですから、bodyなりに一度指定すれば継承されます。 　また、外部スタイルシートを使うようにしておくと、スタイルシートをひとつ書き換えるだけで済みます。 →14.3 外部スタイルシート ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　なお、Windows以外の多くのユーザーのために、MAC用、その他似たフォントを羅列した後、総称ファミリ名を最後につけておきましょう。
以下のようなスタイルとHTMLで似たようなことが再現できます。 例ではタブのような部分の色を変えているだけですが、実際の画面では背景画像をセットしておき、background-position で位置を動かすことで背景画像が切り替わったように見せているのだと思います。 <!DOCTYPE html> <html lang='ja'> <head> <title>タイトル</title> <style> * { margin: 0px; padding: 0px; } #main_container { margin: 0px 50px; background:#ffcc66; } #side_link { position: fixed; top: 20px; right: 0px; width: 50px; height: 100px; color: #ccc; background: blue; } #side_link:hover { background: red; } </style> </head> <body> <div id="side_link"></div> <div id="main_container"> 本文<br> 本文<br> </div> </body> </html>
<!--[ANo.1 のお礼より引用] しかしながら、 それだけの理由にしてはなんだかずいぶん念入りに無駄に長いこと（ユニークな文字列が必要なのであれば、 年月日時分秒でも足りるはず）と [引用終わり]--> セキュリティー上の理由。 想定可能だと面倒なことになるから。。。 <!--[ANo.1 のお礼より引用] 「?809c6b8b1eb6b9b83aa8a8b696d1848dbdabbcf8%22」をググるといくつかヒットすることから、 [引用終わり]--> 『809c6b8b1eb6b9b83aa8a8b696d1848dbdabbcf8 -okwave』で検索すればわかるけど 同じコンテンツのコピーのようなきがするよ？
ロールオーバーには PHP 使ったり Javascript を使ったり、いろんな方法がありますが、 僕が知ってるいちばん簡単な方法はこういうの。IE で機能するのかどうか確認したことはありませんが、 僕の Mac 環境では機能します。 <html> <head> <title>test</title> <style type="text/css"> <!-- a img {border:none;} a img {opacity: 1; /* IE以外透過設定 */ filter: Alpha(opacity=100); /* IE用透過設定 */ } /*a:hover {background: #FFF; }*/ a:hover img {opacity: 0.4; /* IE以外透過設定 */ filter: Alpha(opacity=60); /* IE用透過設定 */ } --> </style> </head> <body> <a href="http://www.yahoo.co.jp/"><img src="http://i.imgur.com/xxrNS.jpg" width="640" height="472" border="0" alt=""></a> </body> </html>
下書きのほうをアップしちゃった メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。. ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　まず、HTMLをしっかり。 　 <body> 　　<div class="header"> 　　　　<h1>タイトル</h1> 　　</div> 　　<div class="section"> 　　　　<h2>見出し</h2> 　　　　<div class="section"> 　　　　　　<h3>章見出し</h3> 　　　　　　<p>全角スペースでインデントさせているのでHTMLソースの全角スペースはタブに戻すこと</p> 　　　　</div> 　　</div> 　　<div class="footer"> 　　　　<h2>文書情報</h2> 　　</div> </body> のようなHTMLがあって、それぞれのブロック(header,section,footer)をウィンドウの80%幅にして中央配置したい場合は、 div.header,div.section,div.footer /* とグループ化して */ { width:80%; margin-top:0; margin-right:auto; margin-bottom:0; margin-left:auto; /* わかりやすいように枠と色をつけておく */ border-style:solid; border-width:1px; border-color:gray; background-color:silver; } とします。 　これらは簡略化できるので div.header,div.section,div.footer{ width:80%; margin:0 auto; border:solid 1px gray; background-color:silver; } と書けます。 通常は、(スマホ対象に)最小幅と、(幅広ディスプレイ用の)最大幅も指定して div.header,div.section,div.footer{ width:80%;min-width:640px; max-width:800px; margin:0 auto; border:solid 1px gray; background-color:silver; } /* これでは、二階層目のdiv.sectionにも適用されますので */ div.section div.section{ margin:0 0 0 2em; min-width:0; border:none; } とかしておきます。 [スタイルシートの書き方] 　お分かりのように、どの要素に適用させるかはセレクタで記述します。このとき.[class名]という書き方はCSS1の名残で、CSS2.1では、[基点となるセレクタ].class名と言う風に書きます。.[class名]は*.[class名]と解釈されます。*は全称セレクタで詳細度は0。 　div.headerとは、classのリストにheaderをもつdiv要素と言う意味で、タイプセレクタ(HTMLの要素のこと).(クラスセレクタ)クラス名ですし、 div.section div.section は、classリストのひとつにsetionを持つdiv要素の子孫のclassリストのひとつにsetionを持つdiv要素と言う意味です。 セレクタの書き方とカスケーディングの仕組みはプロパティより重要です。しっかり身につけること。プロパティはその後 ★セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ★値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) [HTMLの書き方] 　上記で例に挙げたHTMLソースは、『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するため ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』にしたがって、class名を記述しています。じつはHTML4.01のこの説明、実例もなくわかりにくく認知されなくて、HTML5ではその反省から「文書をよりよく構造化するために、次の要素が新しく追加されました。 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」・・ 　ここを読まれると、どのようなclass名が良いかわかるでしょう。 [再びスタイルシートの書き方] 　スタイルシートは、それを元に「本文中の小項目については、字を一回り小さくする」なら div.section div.section{font-size:0.95em;} とか指定していきます。デザインのためにclass名をつけません。 .ngg-galleryoverview とか .ngg-galleryoverview .desc は論外です。
表示するスペースの横幅足りてないんじゃないですか？ div.category-archivesは未指定なのでその親div.containerのwidthで強制されて改行されてます 画像を小さくするか、widthをもう少し広げてあげては？
　通常の印刷は、print用かallで指定されているスタイルシートで印刷されます。それがない場合はブラウザのデフォルトのスタイルが適用されます。 [例] 　HPビルダー16　リストの増やし方 - ホームページ作成ソフト - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7554458.html#a3 )のHTMLを印刷するとよくわかります。 　その場合でも背景は基本的に印刷されません。背景に黒い画像が指定されていたら・・。 　この掲示板のテーマは、「Webデザイン」ですので、その範疇で答えるなら、印刷が想定されるページには、印刷用スタイルシートを必ず設定しておきましょう。 　[例]ペットボトル握力計 ( http://iruka.la.coocan.jp/craft/HandDynamometer/ … ) ★言い換えると、screenとprintのようにメディアが異なる場合、printにscreenのスタイルは適用されませんから、screenをキャプチャするしかないのです。 　この掲示板の趣旨と異なりますが、クライアントにウェブページのキャプチャを提示する必要があるときなどは、firefoxに、Pearl Crescent Page Saver Basic ( https://addons.mozilla.jp/firefox/details/10367 )というアドオンがあります。それを使ってページ全体を一旦画像にして画像ソフトから印刷したり、PDFに直接印刷すると良いでしょう。解像度もブラウザの印刷機能を使うより高く設定できますのできれいに印刷できます。
ことだと思うのですが・・・ではありますが、いずれも、文法的には誤った記述です。 top:100pxと書かなければなりません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 長さの値（<length>で示す）は、任意の正負符号（デフォルトはプラス）の後に、<number>（小数点以下は任意）と単位識別子（例:'px'、'deg'）が続く形式である。 長さが'0'なら単位識別子は省略できる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［CSS2の構文と基本データ型( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )］より 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから The format of a length value (denoted by <length> in this specification) is a <number> (with or without a decimal point) immediately followed by a unit identifier (e.g., px, em, etc.). After a zero length, the unit identifier is optional. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Syntax and basic data types( http://www.w3.org/TR/CSS2/syndata.html#length-un … )］より 　後ろの英文は、CSS2.1のものです。微妙にCSS2から変更されています。 　簡単に言うと、0のときのみ単位が省略できる。 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　また、_top:は本来は無効であるべきなのですが、IE6は、これをtop:として解釈するバグがあります。それを利用して、IE6用にスタイルを記述しなおすことがかって行われていましたが、IE自体、マイクロソフトが抹殺キャンペーンをしているブラウザで、現在は対処する必要はないでしょう。 　よって、勉強中でしたら、一切覚える必要のないプロパティとその値の書き方です。 　そんなプロパティの細かいことより、重要なカスケーディングを勉強しましょう。カスケーディングスタイルシートとことわるくらい、もっともっと大事なことです。 5. セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 6. 値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )
table -cell は、ブロック要素とは違い、table-cellの仕組み---tableのレンダリング規則に従います。 　tableは、データーを二次元に並べる要素ですから、ユーザーの表示区画に合わせて可能な限り表全体を表示しなければなりません。詳しくは HTML4.01仕様書11.3 視覚系ユーザエージェントによる表の整形 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　HTMLにたくさんの間違いがあります。<font></font>が正しく入れ子になっていません。 　非推奨の要素/属性が使われています。 　　<font>　←FONT要素とBASEFONT要素は推奨しない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　　bgcolor=　←推奨しない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　　color=　←推奨しない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　また、表でないものをtableでマークアップすることも、強く非推奨とされています。 　「単に文書内容を整形する目的だけで表を用いるべきでない。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　「ページレイアウトの目的で表を用いる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　もし、それがtableデータでなく、単に整形のためにtableを使われているのでしたら、それをまず直しましょう。その上でスタイルシートでデザインしましょう。 　tableデータの場合は、スタイルシートでサイズなどは変えるべきではありません。(変えられませんけど)
具体的に、どのようなタイミングでどのようなスタイルを適用したいかを示されたほうが適切なアドバイスが得られます。 『”クラス”というのは、あくまでセレクタであり、スタイルシートで設定する p.class-abc{line-height : 120%;} のような記述は、何らかのオブジェクトとして・・・』 　p.class-abcは、「class_abcに所属するタイプセレクタpに対して」と言う意味で、詳細度は、{0,0,1,1}です。それに対して、p.#zyx.class_abc{};と言う記述は、一意セレクタzyxを持ち、かつクラスclass_abcに所属するタイプセレクタpですから、詳細度は{0,1,1,1}です。 　単なると言っても、「タイプセレクタ+クラスセレクタ」です。 　通常は一意セレクタは、それ自体大きな詳細度を持ちますから、単に一意セレクタで指定するだけで十分です。javascriptのDocumentWrightで <p class="class_name">を<p class="class_name" id="IDname">とするだけで済むはずです。 　子孫セレクタや子供セレクタ、隣接セレクタ、擬似クラスセレクタ、擬似要素セレクタなどをうまく使いましょう。 　元々一意セレクタは詳細度が高いので、単に#yzxだけで良いです。 　また、スタイルのためにHTMLにIDを追加するのは感心しません。詳細度が高いため、カスケーディングがうまく利用できなくてHTMLやCSSが煩雑で複雑になるだけです。 　基本的にスタイルシートは一度しか読みませんから、スタイルシートを書き換えるのは非効率です。 　イベントの種類にもよりますが、スタイルシートには「動的な擬似クラス---詳細度C=1」や、「擬似要素---詳細度d=1」が用意されています。これらを使って、ある程度のことはできるはずです。 　どういうタイミングで、どんなイベントを起こしたいのか・・・・。 　
なら、javascriptで、ページを開くたび<body onLoad="test()">とでもして、background要素を書き換えるくらいでしょう。 <script language="JavaScript"> <!-- Lines = 4; // ←画像の数（要変更） Mess = new Array( "<body background='画像URL'>", "<body background='画像URL'>", "<body background='画像URL'>", "<body background='画像URL'>" ); Rndm = Math.floor(Math.random()*Lines); document.write(Mess[Rndm]); // --> </script> あるいは、 <script language="JavaScript"> <!-- Lines = 4; Mess = new Array( "<body class=\"A\">", "<body class=\"B\">", "<body class=\"C\">", "<body class=\"D\">",>" ); Rndm = Math.floor(Math.random()*Lines); document.write(Mess[Rndm]); // --> </script> とか・・・ 　ただし、javascriptで記事の書き換えは停止しているユーザーやjavascriptを理解しないユーザーエージェントもあるのでお勧めとはいえない。
こんにちは。 Firefoxのtype="file"については昔のバージョンからwidthやheightが効かないようです。 横幅だけならsize=""で変更できます、 高さは諦めるしかなさそうです。
これは、と言うデザインがあったらそのデザインをしっかり頭に入れます。 次にHTMLソースを確認します。 　firefoxでしたら、Html Validator ( https://addons.mozilla.jp/firefox/details/249 )というアドオンが楽です。 　ネット上にたくさんあるAnother HTML-lint gatewayでも良いでしょう。ただし、このサイトはHTML5ですから、それに対応したものが良い。 　WCにも簡単なものがあります。( The W3C Markup Validation Service ( http://validator.w3.org/ ) ) 　これをパスしないと、参考にはなりません。 　次に、firefoxでしたら、Firebug ( https://addons.mozilla.jp/firefox/details/1843 )が便利です。これをつかって、+をクリックして、該当する要素がどこかを画面と、HTMLソースで見つけます。そしたら、その部分に適用されているスタイルシートも同時にわかります。 　本題です。示されたサイトはHTML5ですから、IE8以前のIEは対応していませんから、javscriptが必要です。他のブラウザは、よほど古いものでない限り対応しています。 [HTML5] <footer> 　<nav> 　　<ul> 　　　<li><a href="./index.html">なんたらかんたら</a></li> 　　　<li><a href="./index.html">なんたらかんたら</a></li> 　　　<li><a href="./index.html">なんたらかんたら</a></li> 　　</ul> 　</nav> だとすると、スタイルシートで footer nav ol,footer nav ol li{display:block;list-style:none;margin:0;padding:0;} /* と一旦、ブロックにしてブラウザ間の差を取り除くためにmarginやpaddingを0にしておきます。*/ /*　ついで */ footer nav ol li{float:left;} /* floatで並べる */ footer nav ol li+li{margin-left:2em;}/* 二つ目以降は左にマージンをとる */ footer nav ol li+li:before{content:"| ";}/* 二つ目以降に内容を追加する */ /* 以上 */ が基本です。 なお、HTM4.01strictの場合--こちらがお勧め ---でしたら [HTML4.01strict] <div class="footer"> 　<div class="nav"> 　　<ul> 　　　<li><a href="./index.html">なんたらかんたら</a></li> 　　　<li><a href="./index.html">なんたらかんたら</a></li> 　　　<li><a href="./index.html">なんたらかんたら</a></li> 　　</ul> 　</div> div.footer div.nav ol,div.footer div.nav ol li{display:block;list-style:none;margin:0;padding:0;} div.footer div.nav ol li{float:left;} div.footer div.nav ol li+li{margin-left:2em;} div.footer div.nav ol li+li:before{content:"| ";}
今は、そんなに難しく考えなくて・・・率直にHTMLをマークアップして、i-phoneとブラウザ用にスタイルシートを切り替えるか、代替スタイルシートで見てもらうかで良いと思いますが？？ 　そもそも、HTMLは 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　ですし、携帯電話用、スマホ用、PC用なんてページを作るのは、避けるべきです。そのためにHTMLを使うのですから・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。 なぜならただ1種類の文書しか作る必要がなくなるからだ。 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より
min-heightは、とてもよく使うプロパティです。 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 　たとえば、section内のnav(目次)を本文の左に表示したり、脚注に当たるものを右に置くときとか・・ [HTML5] ・・・・・・ <section> 　<h2>本文</h2> 　<section> 　　<h3>見出し</h3> 　　<p>記事</p> 　</section> 　<section> 　　<h3>見出し</h3> 　　<figure> 　　<p><img></p> 　　</figure> 　　<p>記事</p> 　</section> 　<section> 　　<h3>見出し</h3> 　　<p>記事</p> 　</section> 　<nav> 　　<ol> 　　　<li></li> 　　　<li></li> 　　　<li></li> 　　</ol> 　</nav> 　<aside> 　　付属記事 　</aside> </section> [HTML4}上記のそれぞれを<div class="section">のように書き換える ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ・・・・この場合、本文記事の長さが大きく変動するけれど、左右に目次や補足記事をおきたいとき div.section{width:100%;position:relative;min-height:300px;}/*★*/ div.section h2,div.section div.section{margin:0 20%} div.section nav,div.section aside{position:absolute;top:0;width:18%;height:100%;clear:right;} div.section nav{left:0;} div.section aside{rirght:0;} figure img{display:block;width:320px;height:auto;float:right;margin:5px;} ですよね。 ★floatは、見出しで解除するとか、次のsectionで解除するので事足ります。段組に使うことはありませんので 　・floatを段組に使用すると文書の構成自体を変えなきゃない 　・記事中で本来のfloatが使えない ★画像の大きさをそろえるときは、display:blockにして、widthないしheightをautoにすればよい。 　デザインのために画像を伸縮しない 　必要ならimg[width="480"]{margin:0 40px;}とかで調整できる [参考] ＣＳＳについて教えてください - ホームページ作成ソフト - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7539718.html ) 　特に多くの人と作業するときなど、最初にHTMLをきちんと書いておかなきゃダメです。上記サンプルだとスタイルシートを記述する人はHTMLを一切開かなくても、デザインできるはずです。なぜなら、文書構造がきちんとマークアップされているからです。HTMLに変なclass名もidもない。 　プロパティの一つ一つの使い方や意味はボチボチ身につけていくことができますが、それ以前にHTMLが出来てなきゃ何にもなりません。
肝心なこと忘れてました。 「メニューを１０分割」と言う時点で、最低限の高さは絶対に必要になりますから、本文にdiv.section{min-height:100px;} div.section{min-height:0;} を入れておかないと・・・ 　それで 「本文が短くてもメニューの高さに合わせて」 「本文が長いときはメニューがそれに合わせて」 を両立できます。
色々使えそうなので、ちょっと遊んでみた <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;} div.header,div.section,div.footer{width:80%;min-width:480px;max-width:980px;margin:0 auto;} div.header{background-color: #C96;height:30px;position:relative;height:60px;} div.header h1,div.header p,div.header div.nav{ ＿text-align:center;line-height:30px;margin:0; ＿position:absolute; ＿font-size:14px; } div.header h1 a,div.header p a,div.header div.nav ol li a{text-decoration:none;} div.header h1 a,div.header p a{display:block;width:100%;height:100%;background-color:rgb(128,64,0);color:yellow;} div.header h1 a:hover,div.header p a:hover{color:orange;} div.header h1,div.header p{min-width:20em;top:0;} div.header h1{left:0;} div.header p{right:0;} div.header div.nav{top:30px;width:100%;background-color:aqua;} div.header div.nav ol,div.header div.nav ol li{display:block;list-style-type:none;margin:0;padding:0;} div.header div.nav ol li{width:9%;display:inline-block;position:relative;} div.header div.nav ol li a{display:block;border:solid 1px gray;background-color:rgb(220,220,255);margin:2px;} div.header div.nav ol li a:hover{border-color:red;background-color:rgb(60,60,255);color:yellow;} div.header div.nav ol li ol{position:absolute;top:32px;width:100%;display:none;} div.header div.nav ol li ol li{width:95%;} div.header div.nav ol li ol li a{margin:0;} div.header div.nav ol li:hover ol{display:block;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1><a href="/">会社名</a></h1> ＿＿<p><a href="./contactUs">なんたらかんたら</a></p> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="./1">1</a> ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li><a href="./1/1">1-1</a></li> ＿＿＿＿＿＿<li><a href="./1/2">1-2</a></li> ＿＿＿＿＿＿<li><a href="./1/3">1-3</a></li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿＿<li><a href="./2">2</a> ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li><a href="./2/1">2-1</a></li> ＿＿＿＿＿＿<li><a href="./2/2">2-2</a></li> ＿＿＿＿＿＿<li><a href="./2/3">2-3</a></li> ＿＿＿＿＿＿<li><a href="./2/4">2-4</a></li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿＿<li><a href="./3">3</a></li> ＿＿＿＿<li><a href="./4">4</a></li> ＿＿＿＿<li><a href="./5">5</a></li> ＿＿＿＿<li><a href="./6">6</a></li> ＿＿＿＿<li><a href="./7">7</a></li> ＿＿＿＿<li><a href="./8">8</a></li> ＿＿＿＿<li><a href="./9">9</a></li> ＿＿＿＿<li><a href="./10">10</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿</div> </body> </html>
通りがかりのモノです。 ズバリ回答・・・という感じの回答じゃなくて申し訳ないですのですが・・・ 横並びになっているのを変えたいという事でフッターデザインのサイトを 紹介してくれているという事から、横並びではない状態にしたいモノと推測 したのですが、紹介していただいたフッターデザインのサイトには多くの フッターが並んでいて、どれを見本にしたいのか分かりませんでした。 コピーライトなどの表記がある部分の上に、いくつかのリンク先が 箇条書きになっているリストがあり、そのリストが横にいくつか並んでいる、 そういうレイアウトにしたいという事でしょうか？ フッターデザインのサイトで紹介されているフッターのうち、どのフッターを 見本にしたいのか、いくつか例を挙げていだけるとより詳しくお答えできる かも知れません。 がんばってください。
＞共通の部分だけ外部にし、中央カラム（コンテンツ部分）のデザインのみ内部にするということは可能でしょうか？ 可能です。外部スタイルシートで共通の部分を設定して、 内部のhead内やbody内でそのページだけのものを設定することはできます。
「芸がない」が見た目のことなら CSS で！ それでも足りなければ JavaScript。 見た目のことじゃないなら。。。 http://example.com/ がコンテンツのトップだとしたときの例。 <footer>   <nav>     <ul>       <li><a rel="prev" href="./01.html">前へ:ページのタイトル</a></li>       <li><a rel="next" href="./03.html">次へ:ページのタイトル</a></li>       <li><a href="../">上へ:ページのタイトル</a></li>       <li><a rel="contents" href="/toc.html">目次</a></li>       <li><a rel="index" href="/index.html">索引</a></li>     </ul>   </nav> </footer> http://www.w3.org/TR/REC-html40/types.html#type- … あと、どうしても見せたいコンテンツがないなら「トップ」へは、いらないかも。
>【状況整理】 たぶんその通りで、 画像が読み込まれないままfade inしてるんじゃないでしょうか。 opacity:0から0.9くらいの状態で画像が読み込まれていないと、全く表示されません。 そのままopacity:1になり、その後で画像が読み込まれると、opacity:1の状態で表示されますから、 fade inが効いていないように見えます。 リサイズや移動などでも同じですが、画像の読み込みを待つようにしてみてはいかがでしょうか。 低レベル（ライブラリ未使用）の書き方は、以下のような感じで行けると思います。 var img=document.createElement('img'); img.onload=function(){ /*表示処理*/ $("#carousel .main_img").attr("src", this.src); }; img.setAttribute('src', 'img/photo1.jpg'); なお、IEはsrcの書き換えではonloadイベントを再発行しません。 img要素を作るのはその対策です。 jQueryを使った書き方はわかりませんので、質問者さんか、他の人にお任せします。 もしくは、thickboxなどには画像の読み込みを待つ処理が書いてあると思いますし、それが参考になると思います。
どこまで制作をするのかによりますが、 Web制作ツールは補助的なソフトと位置づけた方が良いと思います。 PhotoshopやIllustrator、Fireworks、FLASHは素材を作るための道具です。 DreamWaverも頭の中のイメージを目で見えるようにするためのキャンパス的に思っています。 コード自動生成ツールに頼らず、CSSやHTML5、JavaScriptなどコードの理解を深めた方が良いと思います。 こんな風にしたいんだけど、思ったように表現できないとかいろいろあります。 必要コード、不要なコードの切り分けが少なからず必要になります。 Web、印刷にかかわらずデザインを仕事として希望されるのなら Adobe系ソフトは使えて損とかお金の無駄ということはないですよ＾＾ 「ソフトを使える=デザインができる」ということではありません。 まだ学生さんならば、優待されるうちに購入してガッツリ勉強された方が得だと思います。
googleに認められるサイトでないと階層は表示されません。 googleに認められる為には、googleウエブマスターツールに登録をして サイトマップをアップして、天に祈ってください。 サイトの価値が認められれば表示されるようになります。 参考URL：https://www.google.com/webmasters/tools/home?hl=ja
切り取りたい図形をパスで書いて、 メニューから、『合成ー＞切り取り』を選択 または、最初からそういう図形をパスで描く。
　DWにしろ、他のオーサリングツールを使うにしろ、HTMLやCSSの正確な知識は必須です。それらがなくてもオーサリングツールがあると何でもできると思ったら間違いです。 　本当に基本的なことですが、HTML(Hyper Text Markup Language)とは、文書を読み解き、それを構成する要素に分解し、それぞれの要素を示すタグでマークアップするものです。デザインとは無関係です。すなわち、見出しなら<h1～h6>で括りますし、段落なら<p>で括ります。 <p>～～～～～～～</p> <p>～～～～～～<br /></p> 　のようなマークアップはありえませんししてはなりません。<br>はひとつの段落内で強制的に改行するためのもで <p>東京都新宿区<br> 何とか町何丁目</p> 　など特殊な場合以外使うことはありえません。 　用意されているタグで足りないときには、<div>(汎用ブロック)や<span>(行内)とidやclass名を組み合わせてマークアップします。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　デザインのためとは書いてありません。そうして示された文書構造を用いてスタイルシートでデザインするのです。 　お分かりのように、文書を読み解き、最適なタグやdiv,spanを使ってマークアップするのは知能のある人でないと出来ないのです。でないと、あまり意味のないmainとかのお仕着せのidやclass名を選択してしまいます。どのようなclass名がよいかは、HTML5でどうに有される新しい要素( http://standards.mitsue.co.jp/resources/w3c/TR/h … )が参考になるでしょう。いわく「HTML5 では、文書をよりよく構造化するために、次の要素が新しく追加されました。 」 　なお、idは文書中で一意の要素を示すものですから、リンクやjavascriptのターゲットに使用します。基本はclassを使うほうが良いです。 次に、スタイルシートです。 　数ある(ほどないけど)スタイルシートの中で、現在もっともよく使われるスタイルシートは、CSSですが、これは【Cacading】style Sheetの略で、最も重要なのはカスケーディング機能です。このカスケーディング機能があるからこそ、CSSが使われるのです。・・・cascadeの意味は調べてください。 　★margin,font-size,text-align,height,widthのようなプロパティより、真っ先に覚えないとならないものです。仕様書でもプロパティなんかより先に書かれています。 　カスケーディングとは、簡単に言うと、出所(誰が指定したか?)、重要宣言、継承、そして詳細度によって適用されるスタイルを決める機能です。 　ここで、質問の継承だけについて説明すると、それぞれのプロパティには、「対象」「初期値」「継承されるかされないか」「とりうる値」などが決められています。継承されるかされないかは、常識の範囲だと思いますが、とても重要です。 　たとえば、border(border-left-color,border-right-color,border-top-color,border-color,border-style・・など)は計使用されるとまずいですね。 body{border:1px gray solid;}と書いたら、その内部の<h1><p><div><ol><li>・・にすべて枠がついたらおかしいです。marginについても同様ですね。 ★ここではすべて説明しきれないので REC-CSS2 邦訳 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　→6.値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　→5. セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) をよく読んでください。 たとえば、HTMLが <body> 　<div class="header" id="TOP"> 　　<h1>ヘッダ</h1> 　</div> 　<div class="class="section"> 　　<h2>1章</h2> 　　<p>本文中の記事でここは<strong>重要</strong></p> 　　<div class="section"> 　　　<h3>項見出し</h3> 　　　<p>本文中の記事でここは<strong>重要</strong></p> 　　</div> 　</div> ・・・のようなHTMLだとすると div.section{ 　color:blue;/* 継承される */ 　margin:0 auto;/* 継承されない */ 　border:solid 1px gray /* 継承されない */ } div.section p{ 　font-size:0.9em; /* 継承される */ } div.section p strong{/* 詳細度 0,0,1,3 */ 　color:red; /* 継承される */ } div.section div.section p strong{/* 詳細度 0,0,2,4 */ 　color:red; /* 継承される */ } div.section strong{/* 詳細度 0,0,1,2 */ 　color:aqua; } だとどのようになるでしょう。 ★お気づきのように、項(sectionの次のsection)内の段落<p>なんてセレクタの書き方は、オーサリングツールでは書くことが出来ません。これもツールではなく、あなた自身が書かなければならないです。 (注)詳細度の計算は、現行のCSS2.1とCSS2では異なります。 ★
<input name="mail" value="" size="20"-----のようにサイズは入れておきましょう。!! 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから size = cdata [CN] 　この属性は、ユーザエージェントに当該コントロールの初期幅指定を示す。この幅はピクセル値だが、 type属性が"text"または"password"の場合は、文字数を示す整数を値とする。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Forms in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より なお、ごらんのように文字数ですから、文字幅が違うとサイズは異なりますが、それは問題ではないでしょう。最大見込まれる数字を入れておきましょう。 #mailform{width:100px;} の指定は、id="mailform"の付いている要素に対して指定でしかありません。このセレクタは *#mailform　詳細度 0,1,0,0 と言う意味です。id属性がmailformである全称セレクタと言う意味です。本来なら div#mailform 詳細度0,1,0,1 　と書くべきでしょうが、詳細度がB=0と大きいことと、他にありえないので#だけでも構いません。 　しかし、widthプロパティは継承されませんから、その子孫要素であるpやinputには継承されません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 'width' 　Value: 　　　 <length> | <percentage> | auto | inherit 　Initial: 　　 auto 　Applies to:　 all elements but non-replaced inline elements, table rows, and row groups 　Inherited:　　no　<-- 継承しない 　Percentages:　refer to width of containing block 　Media: visual 　Computed value: the percentage or 'auto' as specified or the absolute length ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Visual formatting model details( http://www.w3.org/TR/CSS2/visudet.html#propdef-w … )］より 　したがって記述するなら、 #mailform p input[name="mail"]{width:20em;} 　とかでしょうね。 #mailform　idがmailformである要素の子孫のpの子孫の属性名がnameであり、その値がmailであるinput要素{の幅width:の値は20(大文字のM２０個の幅)
POST先のCGIが送信後に、このFORMにredirectすれば良いと思います。
HTMLとスタイルシートの全体像がつかめないので、わからないのですがIEの互換モードでの動作では、ブロックの幅をボーダー辺の内側にとってしまうことがあります。本来はpaddin辺。 　ただ、そうするとIEの作るボックスのほうが実寸は小さくなりますから、並ばない理由がわかりません。 HTMLが 下記の場合ですが <div class="nav"> 　<ul> 　　<li>・・・・</li> 　　<li>・・・・</li> 　　<li>・・・・</li> 　</ul> </div> <div class="menue"> 　<p>・・・・・</p> 　<p>・・・・・</p> 　<p>・・・・・</p> </div> スタイルシートで div.nav,div.menue{width:100%;position:relative;line-height:40px;text-align:center;} div.nav ul,div.nav ul li,div.menue p{display:block;list-style:none;margin:0;padding:0;} div.nav ul li,div.menue p{width:30%;border:ridge 2px gray;float:left;margin-top:20px;} で並ぶはずです。幅が指定されていないから、本来の親コンテナブロックの幅を参照してしまっている。でもそれって他のブラウザも同じはずだけど
＞Pタグですが、私のWEBページの場合どのようにすべきでしょうか？ 　正規表現の扱えるテキストエディタで、 <br>[\n\t]*<br>[\n\t]*<br>[\n\t]*</p><p> → </p><p calss="pose3"> (<br>[\n\t]*<br>[\n\t]*)</p><p> → </p><p calss="pose2"> とかするのが現実的です。 　たとえば、EmEditorとか・・・pro版だとファイルから置換でファイルを開かなくてもできる。Free版だとファイルを開いてからになる。 　別に急ぐことはないです。順次直していけばよいだけです。時間はたくさんある。私は君のお父さんより、ずっと年上で残された時間はあまりない。 　理系に進めば、必ず卒業論文を書かされるでしょう。数学科でない限りTex(LaTex)はないでしょうがXMLは必要になります。そのためにも、正しいマークアップは身につけておくほうが良いでしょう。 　二ヶ月でここまでたどり着いているというのは、私が指導した多くの人たちに比べて遜色はありません。速いほうだと思います。 　頑張りましょう。・・・みんなも通ってきた道です。
それで大丈夫ならそれで良いと思います。 ブラウザの設定で、キャッシュ・履歴を保存するかしないかの選択ができると思いますので保存しないようにするという手もあります。
Dreamweaberの描画エンジンは、WebKit ( http://ja.wikipedia.org/wiki/Webkit )です。IEはTrident ( http://ja.wikipedia.org/wiki/Trident )ですし、firefoxはGecko ( http://ja.wikipedia.org/wiki/Gecko )です。 　確認のため、おなじwebkitを使用しているSafariやGoogle Chrome、Geckoを使用しているfirefoxでチェックしてみてください。 　IEは独自仕様が多すぎるので、他の標準ブラウザで作成して、IEに後から対応させるほうが楽です。
調べ方を教えているのになぜ求人を見ようとしないのか不思議です。独学できない人、自分で裏を取らない人は使える人材にはなれないですよ。 例えば http://www.moreworks.jp/search_recruit.php?jb0=2 コーダーの場合でも、Dreamweaverは必ずしも必要ではない。がもし、出来ますといえるならより、応募できる枠がひろがります。エクリプスの求人は見たことがありません。
整理すると <div class="nav"> 　<ul> 　　<li> において、 div.nav{list-style-type:none;} 　では、リストマークは消えない。 　しかし、 <div class="nav"> 　<ul> 　　<li> 　　　<div> 　　　　<ul> 　　　　　<li> では、 div.nav ul{list-style-type:none;} で、途中にdivがあっても、リストマークは消えます。 　仕様書には、liではな【くulやolにlist-styleを指定することを推奨する。】と書かれている 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Inheritance will transfer the 'list-style' values from OL and UL elements to LI elements. This is the recommended way to specify list style information. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Generated content, automatic numbering, and lists( http://www.w3.org/TR/CSS2/generate.html#propdef- … )］より 　OLとUL要素からLI要素に "のlist-style 'の値を転送し継承します。これは、リストのスタイル情報を指定するための推奨方法です 　このことから、ulないし、olに指定すると、その子孫のliに引き継がれるようですし、それが推奨されていて、どのブラウザもそれに従うようです。実際、最初にも書きましたようにブラウザのデフォルトの捨て要るシートもulに対して指定しているようです。 　listのスタイルシートは他にも問題があって、liを字下げして表示するブラウザが多いのですが、その字下げをmarginを使うか、paddingを使うか、それをul,olに対してか、liに対してかもブラウザによって差があります。 　そこで、私は、 div.nav ul,div.nav ul,div.nav li{display:block;list-style:none;margin:0;padding:0;} といったんリセットしてから、様々な指定を付け加えていくことにしています。 　文法的にも正しいし、かつブラウザ間の実装の差も吸収できますから・・
語句簡単な例です。 表示されるデータのデザインは、[表示するページ]のスタイルで指定されます。 読み込まれる外部スタイルシートで、文字だけ置換しています。 　スタイルシートを解釈しないブラウザ(検索エンジンを含む)には、リンクが表示されます。もちろんjavascriptによる記事の書き換えを禁止していても利用できます。 [外部CSS] new.css HTMLと同じ場所に ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み @charset "Shift_JIS"; #news p a{display:none;} #news p:after{content:"不具合がありましたらBBSで報告してください";} [HTML] HTML4.01strict+CSS3 Shift_JIS ★タブは＿に置換してあるので戻す。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<link rel="stylesheet" type="text/css" media="screen" href="./news.css"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} p{text-indent:1em;margin:0;line-height:1.5em;} body{background-color:silver;} div.header,div.section,div.footer{width:80%;min-width:620px;max-width:780px;padding:5px 10px;margin:10px auto;border:solid gray 1px;border-radius:5px;box-shadow: 10px 10px 10px rgba(0,0,0,0.4);background-color:white;} div.header{min-height:200px;} div.header{position:relative;} div.header h1,div.header p{margin-left:21%;} div.header div.nav{width:20%;position:absolute;top:5px;left:5px;} #news,div.header div.nav li{border:solid 1px gray;border-radius:5px;box-shadow: 4px 4px 4px rgba(0,0,0,0.4);background-color:white;} #news h2{font-size:1.2em;margin:0;text-align:center;} #news p{margin:0 0.5em;text-indent:1em;line-height:1.5em;font-size:0.9em;} #siteNavigation ul,#siteNavigation ul li{display:block;list-style:none;margin:0;padding:0;text-align:center;} #siteNavigation ul li{margin-top:5px;} #siteNavigation ul li a{display:block;width:90%;border-left:green 2px solid;margin:0 auto;text-decoration:none;} #siteNavigation ul li a:visited{border-color:fuchsia;} #siteNavigation ul li a:hover{border-color:red;border-left-width:6px;} #siteNavigation ul li a:active{border-color:yellow;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>サンプル</h1> ＿＿<p>スタイルシートで記事の一部を追加するには、content:プロパティを使う。</p> ＿＿<div class="nav"> ＿＿＿<div id="news"> ＿＿＿＿<h2>お知らせ</h2> ＿＿＿＿<p><a href="./news.html">新着情報</a></p> ＿＿＿</div> ＿＿＿<div id="siteNavigation"> ＿＿＿＿<ul> ＿＿＿＿＿<li><a href="./profile">PROFILE</a></li> ＿＿＿＿＿<li><a href="./blog">BLOG</a></li> ＿＿＿＿＿<li><a href="./link">LINK</a></li> ＿＿＿＿＿<li><a href="./bbs">BBS</a></li> ＿＿＿＿＿<li><a href="./game">ゲーム日記</a></li> ＿＿＿＿</ul> ＿＿＿</div> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>本文記事</h2> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿</div> </body> </html>
　記事がないので、HTMLは示せませんが、基本からやり直しましょう。 HTMLは、文書構造をマークアップするものです。divを使うのは、classやidと併用することで文書構造を補完します。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　スタイルシートは、HTMLの文書構造に従ってプレゼンテーションを指定していきます。言い換えればデザインのためにHTMLを書いたらダメなのです。 『メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。 ( http://jigsaw.w3.org/css-validator/#menu )』 　またCSS(カスケーディングスタイルシート)を使用するときは、その最大の特徴のカスケード処理を理解していないと、うまく行きません。HTML内のstyle属性で指定されたプロパティは詳細度がa=0となり、他のスタイル指定はb=0,C=0,D=0とされます。 ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿ count 1 if the selector is a 'style' attribute rather than a selector, 0 otherwise (= a) (In HTML, values of an element's "style" attribute are style sheet rules. These rules have no selectors, so a=1, b=0, c=0, and d=0.) ( http://www.w3.org/TR/2004/CR-CSS21-20040225/casc … ) ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ この部分はCSS2より変更になっています。 5.セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 6.値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　は面倒でも、最初に覚えておかなければなりません。(上記リンクはCSS2です。)なにしろ、CSSの一番重要な部分ですから。 たとえば、HTML4.01strictで作成するなら <body> ＿<h1>サンプル</h1> ＿<div class="section"><!-- 本文 --> ＿＿<div class="nav" id="Link1"> ＿＿＿<ul> ＿＿＿＿<li><a href=""></a></li> ＿＿＿＿<li><a href=""></a></li> ＿＿＿＿<li><a href=""></a></li> ＿＿＿＿<li><a href=""></a></li> ＿＿＿</ul> ＿＿</div> ＿＿<div class="section"> ＿＿＿<p>本文記事</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<p>文書情報</p> ＿</div> </body> HTML5でスマホ限定でもよければ <body> ＿<h1>サンプル</h1> ＿<section><!-- 本文 --> ＿＿<nav id="Link1"> ＿＿＿<ul> ＿＿＿＿<li><a href=""></a></li> ＿＿＿＿<li><a href=""></a></li> ＿＿＿＿<li><a href=""></a></li> ＿＿＿＿<li><a href=""></a></li> ＿＿＿</ul> ＿＿</nav> ＿＿<section> ＿＿＿<p>本文記事</p> ＿＿</section> ＿</section> ＿<footer> ＿＿<p>文書情報</p> ＿</footer> </body> とかになるはずです。 そのうえで、スタイルシートでsectionは横幅いっぱい、navは左に縦いっぱいと言う風に記述していきます。 div.section{width:100%;position:relative;} #Link1{position:absolute;top:0;left:0;width:40%;}
いえ、とても、簡単にできます。 画像は「置換インライン要素」なので、サイズは置換された画像のサイズに依存しますが、スタイルシートで抱合親ブロックのサイズを参照できるブロック要素に変えればよいだけです。 たとえばアルバム写真のリストがある場合・・ウィンドウサイズをどのように変えても伸縮します。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} h1{text-align:center;} ul.photoAlbum,ul.photoAlbum li{display:block;list-style:none;margin:0;padding:0;width:100%;} ul.photoAlbum li img{display:block;width:60%;height:auto;margin:0 auto;} ul.photoAlbum li+li img{width:40%;} ul.photoAlbum li+li+li img{width:30%;} ul.photoAlbum li+li+li+li img{width:20%;} ul.photoAlbum li+li+li+li+li img{width:10%;} --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<ul class="photoAlbum"> ＿＿<li><img src="./images/photo/01.jpg" width="480" height="360" alt="家族みんなで"></li> ＿＿<li><img src="./images/photo/02.jpg" width="480" height="360" alt="娘"></li> ＿＿<li><img src="./images/photo/03.jpg" width="480" height="360" alt="息子"></li> ＿＿<li><img src="./images/photo/04.jpg" width="480" height="360" alt="父"></li> ＿＿<li><img src="./images/photo/05.jpg" width="480" height="360" alt="母"></li> ＿<ul> </body> </html>
この様な場所で聞くより仕様書をまず見る癖をつけましょう。正確な知識が得られます。その上でわからないことを聞くと効率的です。 ★8. ボックスモデル ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ごらんのように、この様な場所で答えるにはあまりにも複雑です。
＞<a href="/index.html">という風に書けばいいのでしょうか？ ＞しかし、このように書くと、bbbディレクトリの中のindex.htmlファイルにリンクしてしまうと思うのですが… いいえ。同じ階層のファイルにリンクするときは、 href="index.html" と先頭にスラッシュを書きません。(これは相対パス) 先頭がスラッシュだと、ホストのトップレベルを意味します。先頭がスラッシュなら絶対パスです。
ちょっとした文字列置換には Devas を使っていますが、特に不満は無いですね。 http://www.vector.co.jp/magazine/softnews/030308 … シンプルで分かりやすく、一般的な用途で使う機能はおおむね網羅されていると思いますよ。
現在のサイトはCSSでデータの位置を決めています。 データのみをコピーしても実際の形には成りません。 サファリの場合は『ウインドウ』メニューから『構成ファイル』を 選択すればどのファイルを使っているかは理解出来ると考えます。 CSSについては ・新標準HTML5 & CSS3辞典 < http://www.amazon.co.jp/dp/4844331752/ > http://www.openspc2.org/ 　ー＞作成者のサイト
IEだけであれば、条件付きコメントが使えます。 <!--[if gte IE9]> <link rel="stylesheet" href="ie9.css"> <![endif]--> <!--[if (gt IE 7)&(lte IE 8]> <link rel="stylesheet" href="ie8.css"> <![endif]--> <!--[if (gt IE 6)&(lte IE 7]> <link rel="stylesheet" href="ie7.css"> <![endif]--> <!--[if (gt IE 5)&(lte IE 6]> <link rel="stylesheet" href="ie6.css"> <![endif]--> これで、それぞれのバージョンにそったcssを読み込めます。 この例ではIE9だけ、「IE9以上の時」を指定してあります（特に意味はないです）。 参考URLを読んで、いろいろといじってみれば分かると思います。 参考URL：http://ja.wikipedia.org/wiki/%E6%9D%A1%E4%BB%B6% …
スタイルシートを期待通り適用させるためには、HTMLが正当でないと。 a要素は行内要素ですから、body直下には置けません。(エラーにはなりませんが、divなどの直下にも置くべきではない--匿名ボックスが生成されます) <p class="pst">ここに<span>テスト</span>文章段落1</p> <p class="ast"><a href="#">ここに<span>テスト</span>リンク1</a></p> でよいかと。 p.pst,p.ast{line-height:40px;margin:0 10px;background-image:url(back.jpg);} p.pst span,p.ast span{position:relative;top:-10px;}
申し訳ありません。 擬似的にではなく、置換えですね。 太さは、変えられないかもしれません。 こちらでも、テストしてみます。
＞対象の画像に指定すればいいのかなと思ってたんですが、 　発想の転換が必要です。 　HTMLは、文書構造をマークアップする方式です。Hyper Markup Language 　一方スタイルシートは、その文書をどのように表現するか--プレゼンテーション--を指定するものです。 　この二つは、独立している(文書構造とプレゼンテーション)し、かつ関連(文書構造を基にプレゼンテーションを指定する)しています。 　特定の画像と言う場合、通常は[一意]という意味であるときと、[あるグループに属する]や[特定の要素]という二つの場合があります。 　スタイルシートでは、プレゼンテーションを適用させたい要素(この場合、画像)をセレクタ(選択子)を使って指定します。 　その文書内の一意の画像--一意セレクタ その要素にidをつけて、#(id名) 　特定のグループ--半角スペースで区切られたリストの中にそれを含むもの。.(class名) 　属性セレクタ--属性名,属性値など 　　　[title="テスト"]、[class~=rest](classセレクタと同じ)、。。。 　子孫セレクタ、子セレクタ、隣接セレクタ、擬似クラス、擬似要素・・ 　文書構造さえ、しっかりとマークアップされていれば＝＝言い換えるとHTMLがきちんと文書構造がマークアップされていると、 　body>div.section>p img.figure.main{display:block;width:480px;height:auto;} 　という風に、指定できるということです。意味は 　本文の子供の汎用ブロック内の子供段落内に含まれるfigureクラスとmainクラスに属する画像 　<body>　<div class="section">　　<p>　　　　　<img class="figure main"> ですね。当然ですが、 コラム(<div class="aside">やフッター<div cass="footer">内には適用されませんし、<img>が<strong>で囲まれていても適用されます。 　このセレクタや継承--カスケーディング--はカスケーディングスタイルシートの最も重要な部分です。 →セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) →値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　それを活用して ＞webサイト印刷時に特定の画像のみを 　　　　　　　　　　^^^^^^^^^^^^^^にスタイルを適用させます。 　またスタイルシートは、メディアごとに指定できます。 →媒体型 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ＞webサイト印刷時に特定の画像のみを 　　　　　^^^^^^^ 　も指定できます。 　いずれにしても、大事なことはHTMLを開かなくてもわかるくらい、HTMLがきちんとマークアップされているかです。
docomoの新しいブラウザならOK 古い端末は無理です。繰り返し画像を背景にしましょう。あるいは端末ごとにスタイルシートを切り替えるとか・・
＞margin:1%とwidth:48%とposition:relativeで余白を作っているかと 思うのですが、 　CSSはXSLTと異なり、計算ができません。そのため(width)×0.02÷2なんて不可能 　paddingを使わないのは、ボックスの幅がpadding辺の内側だからです。 　たとえば、800px内に、width=100%幅を入れようとするとpadding:10px;とすると、実際には右側に20px+border幅×4ほどはみ出てしまいます。 →Box model ( http://www.w3.org/TR/CSS2/box.html ) 　そのため、ブロック単位で配置をするときはpadding:0にしておいて、内包されるブロックのマージンで余白を指定するほうが良いです。
基本的なことは CSS3 Media Queries を使って、Webサイトをスマートフォンに対応させるときの注意書き ( http://webdesignrecipes.com/web-design-for-mobil … ) に詳しい。 画面の回転は、CSS3の transform:rotate() プロパティを使います。 CSS Transforms ( http://www.w3.org/TR/css3-transforms/ ) 　スマートホンの場合、本体を横にすると自動的に画面を回転させるモードが有効(デフォルト)になっていると、CSSで回転させないほうがよいです。 　画像自体をウィンドウいっぱいに表示するのは、html,bodyのmargin:0,padding:0と、width:100%;position:relative;を設定しておいて、inline要素である画像でしたらdisplay:block;として、width:100%;height:auto;で横幅に合わせて画像を縦横比を変えずに、ウィンドウ横幅をウィンドウいっぱい、縦はそれに追随して本来の縦横比で表示されます。--CSS2.1
あくまで、HTML5とCSS3です。 HTML4.01で作成する場合は、それぞれの要素をclassに変更しスタイルシートも書き換えること <section>→<div class="section"> CSS2.1の範囲内で行うなら、countent：url()で画像を指定して、position：absolute;z-index：0;とかで順番を決める。 さらに旧ブラウザに対応させるなら、<img>要素で画像を配置して、display：block;にして、position：absoluteでテキストをその上に置く。 　対応ブラウザの範囲を決めて書くこと。たとえブラウザのはージョンが想定したものより低くても、閲覧に支障がないデザインにすること。必要なら代替スタイルシートを用意する。 タブは、＿に、:は：(全角)に置換してあります。 <!doctype html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> ＿<!--[if IE]> ＿＿<script src="http：//html5shiv.googlecode.com/svn/trunk/html5.js"></script> ＿＿<script src="http：//css3-mediaqueries-js.googlecode.com/svn/trunk/css3-mediaqueries.js"></script> ＿<![endif]-->＿<link rel="stylesheet" href="css/style.css"> <style media="screen"> <!-- html,body{margin：0;padding：0;} body{width：100%;height：100%;position：relative;} header{min-height：160px;width：100%;position：fixed;top：0;left：0;background：url(./images/sample.jpg) no-repeat 50% 50% aqua;;background-size：100% 100%;} footer{min-height：160px;width：100%;position：fixed;bottom：0;left：0;background：url(./images/profile.gif) no-repeat 50% 50% lime;background-size：100% 100%;} section{background-color：silver;padding-top：160px;color：green;margin：0;} section *：first-child{margin-top：0;} section *：last-child{margin-bottom：0;} section：nth-child(3){padding：0 0 160px 0;color：red;} --> </style> </head> <body> ＿<header> ＿＿<h1 id="title">Your title</h1> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="#">Some</a></li> ＿＿＿＿<li><a href="#">navigation</a></li> ＿＿＿＿<li><a href="#">links</a></li> ＿＿＿</ul> ＿＿</nav> ＿</header> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿＿1テストテストテスト・・・・・・・・・・・・・・・・ ＿＿</p> ＿＿<p> ＿＿＿2テストテストテスト・・・・・・・・・・・・・・・・ ＿＿</p> ＿＿<p> ＿＿＿3テストテストテスト・・・・・・・・・・・・・・・・ ＿＿</p> ＿＿<p> ＿＿＿4テストテストテスト・・・・・・・・・・・・・・・・ ＿＿</p> ＿＿<p> ＿＿＿5テストテストテスト・・・・・・・・・・・・・・・・ ＿＿</p> ＿</section> ＿<section> ＿＿<h2>A smaller heading</h2> ＿＿<p> ＿＿＿2-1テストテストテスト・・・・・・・・・・・・・・・・ ＿＿</p> ＿＿<p> ＿＿＿2-2テストテストテスト・・・・・・・・・・・・・・・・ ＿＿</p> ＿＿<p> ＿＿＿2-3テストテストテスト・・・・・・・・・・・・・・・・ ＿＿</p> ＿</section> ＿<footer> ＿＿<h3>A nice footer</h3> ＿</footer> </body> </html>
　レスポンシブデザインとは、画面のサイズに合わせて表示サイズを変更する--いわゆるリキッドデザインと似た考え方です。 　スマートホンなどの様々なビクセル幅のディスプレイに対応したデザインですが、「基本的には、横幅を320pxにして」と言う時点で、それを放棄しています。 　そもそもHTMLは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 最低限、きほんですから ★HTML 4の概説 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　位はじっくり読んでおきましょう。 　ウィンドウ幅を固定せず、ユーザーの環境に合わせて一行が折り返されても良いように作成すべきものです。文字は、スケーラブル--ベクトル図形ですから、SVG( http://ja.wikipedia.org/wiki/Scalable_Vector_Gra … )のように解像度に関わらずフォントの縁は滑らかになるので、視覚弱者のユーザーがフォントサイズを大きくしてもふちが荒れることはないはずです。 　iphoneのRetinaディスプレイは、ディスプレイ上の解像度が高いため、画像が荒れて見えることがありますが、その仕組みを理解していないと「画質が下がる」という結果になります。通常のパソコンのディスプレイは描画処理の関係上、96dpi(一インチあたり96ドット)で計算して、実際のディスプレイの解像度が120dpiだったとすると、そのスキマを適当に埋めて表示しています。Retinaディスプレイは、それを326ppi--約４倍で計算していますから、96dpiで表示することを想定した画像は荒くなってしまいます。 　この場合、大きな画像を表示上は小さくなるようにしておけば良いはずです。 　実はこの現象--ウェブページを印刷したことがあれば経験済みのはずです。プリンターは低画質でも200dpi,高画質でしたら600dpiとか1200dpiですから、当然足りない部分は適当に穴埋めされるため汚い印刷結果になるはずです。その対策として横幅1200pxくらいで画像を作成して<img src="[URL]" width="400"***>のように縮めて表示させておくと、きれいに印刷できますね。 　ウェブデザインの、根本的な部分で誤解をされているようです。基本は div.article{width:80%;min-width:480px;max-width:900px;margin:0 auto;} 　のように、最大幅、最小幅を指定した上でデザインしていくのが基本です。 　フォントサイズは、指定しません。私は、ユーザーのデフォルトのサイズを基本に、 h1{font-size:1.6em;} h2{font-size:1.4em;} h3{font-size:1.3em;} h4{font-size:1.2em;} h5,h6{font-size:1.1em;} h1,h2,h3,h4,h5,h6,p,li,dd{margin:0;line-height:1.5em;} とかの指定が基本です。 　ウィンドウ幅、フォントサイズは現代のように様々な端末を考慮しなければならない時代は、こちらからは決めるべきではありません。それがウェブの基本です。
ブラウザは、HTTP応答ヘッダではなく、DOCTYPEスイッチを用いて表示をセットしています。 また、<head></head>内の <meta http-equiv="X-UA-Compatible" content="IE=9" /><!-- XHTML --> <meta http-equiv="X-UA-Compatible" content="IE=9"><!-- HTML --> も書いておくほうが良い。 HTMLは、HTML4.01strict,XHTML1.0strict,XHTML1.1もしくはHTML5で作成する。 　HTML4.01strictないしXHTML1.0strict推奨 　<DOCTYPE>をきちんと記述すること →doctypeスイッチ - Google 検索 ( https://www.google.co.jp/search?q=DOCTYPE%E3%82% … ) IE7以前は、理解不能なので・・ 私は、ブラウザハックは一切使用しないので・・・
「クリックミスを防ぐような作り方をする」というユーザビリティーがあります。 これは、「この情報が欲しいけれど、どこ（どの文字）をクリックするとそのページにたどり着けるだろうか」 という判断をしやすくする作り方です。 例えば。 <a href="map.html">地図を表示</a> 地図を表示するには<a href="map.html">ここ</a>をクリック ブラウザで見てみると、概ねこのようになると思います。 ---------------- 地図を表示 地図を表示するにはここをクリック ---------------- 下の表示になっている時に、「地図」の部分をクリックしても地図は表示されません。 これがクリックミス（またはカーソルの形が指の形に変わらないことを確認する手間）として、ユーザビリティーの低下と判断されます。 ロゴマークをクリックするとサイトトップに移動するという固定概念（通念）もありますし、 また、そういう作りになっているサイトも非常に多いです。 SEOとして意味は無くても、 ユーザビリティーとして「サイトトップに戻りたい」という人が、一発でサイトトップに戻れる仕組みを作っておく仕組みがあると便利です。 それがロゴマークやページタイトル、サイトタイトルなどからのリンクを作っておく方法で、 結果的に、<h1><a href="/">タイトル</a></h1>このような作り方になります。 該当の書籍がどのような作り方をされているのかわかりませんが、 テンプレートやSSI/CGIのインクルードを使用してサイト内ページの全てに同じように表示している場合は、 サイトトップからサイトトップへのリンクが貼られることも、しばしば起こりえます。 が、これはメンテナンスしやすくしているだけなので、それ自体に重要な意味はありません。 他のページでユーザビリティーの向上を狙っているのが本来の目的（意味）です。
ご提示のサイトではjQuery＋tabbedContent.jsで実現しているっぽいですね。 まったく同じが良ければここ。 http://www.htmldrive.net/items/show/442/Tabbed-c … jQueryUIでも同様のことはできるので、そちらも確認してみてください。 http://jqueryui.com/demos/tabs/#mouseover
> で上一列に画像を表示したんですが、 > これとおんなじように下一列に画像を表示したら、 > 上のやつが消えてしまいました。 どういう風に記述したの出ていないので、推測になるが、 下記で記述したのなら、カスケード処理によって、後から記述した方が有効になる。 body { background-image : url("画像URL"); background-repeat: repeat-x; background-attachment: fixed; /* 上記の同じプロパティが、下記の内容で上書きされる */ background-image : url("画像URL"); background-repeat: repeat-x; background-attachment: fixed; background-position: bottom; } CSS3では、1つの要素に対して、背景の指定が複数おこなうことができるようになっている。 なので下記の記述でおこなえる。 body { background-image: url(""), url(""); background-repeat: repeat-x, repeat-x; background-position: top, bottom; background-attachment: fixed, fixed; } Opera, Firefox, Chrome, Safariの最新バージョンで確認済み。 IE8は無理。IEのそれ以降バージョンはわかりません。 複数のボックスを使用しておこなうなら、わざわざ新しい要素を追加する必要はないと思われます。 html要素に対しても、背景の指定がおこなえます。 html { background-image : url("画像URL"); background-repeat: repeat-x; background-attachment: fixed; } body { background-image : url("画像URL"); background-repeat: repeat-x; background-attachment: fixed; background-position: bottom; }
CSSというよりJavaScriptでの処理ですね。 ざっと見ですが、基本は div#banner1の p.btnLivebanMenuと div.l3banner_menu_containerの display を block <-> none の切り替えにフェードIn/Outを掛けてる感じでしょうかね。
firefoxを使った調べ方 firebugというアドオンで、HTMLツリーを広げていって、どの要素がその画像にあたる部分かを調べます。 　Firefox アドオン( https://addons.mozilla.jp/firefox/ ) 　　→開発者向けツール ( https://addons.mozilla.jp/firefox/extensions/dev … ) 　　　→Firebug ( https://addons.mozilla.jp/firefox/details/1843 ) 　次に、表示メニューから、スタイルシート→「スタイルシートを使用しない」で、スタイルシートのない状態を確認します。 　ついで、スタイルシートを使った状態で、ツール→オプションで、javascriptを使用しないにして再読み込み。 　これでjavascriptを使って３つのリストになっている画像を切り替えていることが判断できます。ソースを見ると、 <script type="text/javascript" src="http：//www.kakuida.com/js/jquery-1.6.4.min.js"></script> ・・・・ <script type="text/javascript" src="http：//www.kakuida.com/slides/js/slides.min.jquery.js"></script> とあります。jqueryとslidesでしょうね。（:は：に置換してある) 　だとしたら ・画像ポップアウト・イメージギャラリー・スライドショー｜jQuery plugin｜Ajax｜PHP & JavaScript Room ( http://phpjavascriptroom.com/?t=ajax&p=jquery_pl … ) ・画像を使ったいろいろなjQueryプラグイン224個まとめ( 200+ collection of jQuery for images ) - かちびと.net ( http://kachibito.net/web-design/224-image-jquery … ) 　などを探してみます。
そこにリンクがあると明確な場合は下線をつけないことが多いです。 　ただ、記事中で「<a href="http：//www.swlab.it.okayama-u.ac.jp/man/rec-css2/text.html#lining-striking-props">線を引く</a>ときは・・・」の場合は、明らかに下線を引くべきです。 　HTMLは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　なのですから、アクセスビリティを考えれば、むやみに消すべきではないでしょう。 　WAI ( http://www.doraneko.org/wai/contents10/19980918/ … )を考慮しているサイトでしたら、マウスのようなポインティングデバイスを利用できない利用者も考慮すべきです。確かに「最近はリンクの下線を消」したサイトも多く見受けられますが、それと、自身が採用するか否かは別だと思います。
＞css内部をしっかり把握出来ないので、 　これは、CSSをきちんと理解していただくしかないです。 →6. 値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　CSSはカスケーディングスタイルシートの略で、この「どの要素にどのスタイルを適用させるか」のカスケード処理が、文字通りCSSの「肝」です。プロパティをいくら勉強しても肝心要のカスケーディングや継承の仕組みを知らないと対処できません。 　具体的には、カスケードとセレクタの詳細度(HTML要素のスタイル属性)を見直すことになります。 　firefoxにFirebug ( https://addons.mozilla.jp/firefox/details/1843 )というアドオンがあります。あるいはfirefoxにデフォルトでインストールすれば付属しているDOM Inspectorを使って文書構造を確認して、スタイルシートのセレクタを書き換えることになります。 　なお、jsで書き出されるHTMLソースが文書構造をくずしてしまっている可能性もあります。それはそれで修復してください。
　まず、ウィジェットのソースを確認する。ページが描画された後のソースでないとわからないでしょう。firefox+fireBugを使うと良い。 　たとえば、javascriptが書き出す部分を含むdiv(汎用ブロック)に、margin:0 auto;とborder:solid 1px red;を指定すると、そのdivが中心に配置されていることがわかると思います。 　それはあくまで、コンテナブロックの配置ですから、そのjavascriptの出力するHTML要素がブロックだとしても、それは中央には配置しません。ここは理解されていますか？ 　marginは継承しないので、その子孫には適用されません。 →Inherited: no ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　ウィジェットの大きさが決められていれば--たとえばそれがobject要素でwidthが決められていれば、それが収まる大きさにdivのサイズを決めるか、行内要素であれば、display:block;でブロック要素にして、marginを設定するとかです。 →ブロックレベル要素と行内要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) →ボックスの生成を制御する ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )
現在ウェブ標準のCSSでは、基点となるセレクタに続いてセレクタを記述していきます。 ＞#secondaryという<div>の中にある<p>にpaddingをかけようとしており、 　ということは、*(全称セレクタ)が省略された書き方ですから *#section *.sidebar_font a{} が本来の形です。*全称セレクタの詳細度は0ですから計算すると 1,1,1になりますね。 　もし、このセレクタが無効になるとしたら、他の箇所でより詳細度が高い、もしくは詳細度が同じでも後出の宣言で上書きされている可能性があります。 　現在のDOMツリーがわかりませんから、具体的なアドバイスは不可能ですが、より詳細度を高くした書き方で指定すると良いでしょう。 　firefoxの場合、ツールにDOM Inspectorが標準インストールすると入っていますので、それでDOMツリーを確認してください。 　　　　　　　ID　　　　　　class BODY 　DIV　　　section 　　P　　　　　　　　　　　sidebar_font のように表示されるはずです。航であれば、それにしたがって body div#section p.sidebar_font a{} 詳細度 0,1,1,4 とか 　また、firefoxのアドオンにfireBugというすばらしいアドオンがあります。該当する要素をに対するスタイルシートの継承や上書きがわかります。 　なお、paddingは、継承されないプロパティですから親要素で指定しても子孫には継承されません。colorは継承されますが、marginやpaddingは継承されないなど、どのプロパティが継承されされないかは常識の範囲内ですが、知りたいときはそれぞれの指定を確認してください。 Inherited: no ( http://www.w3.org/TR/CSS2/box.html#propdef-paddi … )と書かれていれば継承しません。
既に回答がありますが、Webサイト制作は必ずしも「すべてのブラウザで同じように表示されるべき」という思想はありません。これは制作会社によって対応が異なりますが、特に近年では、古いIEのサポートをしない傾向が増えつつあると思います。もちろん、制作を発注する側が「すべてのブラウザで同じように表示したい」という意向があれば、そのように制作することもできますが、多くの場合、別料金(オプション扱い)になります。また、更新の都度、別料金(古いブラウザ対応作業)が発生する可能性も十分考えられます。
とりあえず、 ・jQuery Mobile ・Sencha Touch ・Dojo Mobile ・Wink toolkit などのフレームワークを見てみるのが良いのではないでしょうか。 ＞をHTMLとCSSだけで実現する方法はあるでしょうか？ JavaScriptは絶対使わない！ という意味なのでしたら、諦めるしか無いでしょう。
根本的なセンタリングの方法はご存知ですか？ 基本的には、横幅を指定して、margin:0 auto;にするだけです。(IEは別の書き方が必要)　難しく全体を捉えずに、一部分だけで考えてみてください。 たとえば、 body{ 　width:100%; 　background:#f00; } #menu{ 　width:960px; 　background:#00; 　margin:0 auto; } <body> <div id="menu"> メニューです。 </div> </body> 上記のソースだった場合、どこまで横幅を伸ばしても、bodyの背景色赤は続きますが、#menuの背景色黒は、960pxの幅でセンタリングにとどまったままですよね。Vogueのサイトは、その理屈が複数あるだけですよ。
そもそもsidebarって何でしょう。文書構造がわかりません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　と仕様書に書かれているように、class名やid名は文書構造を補完するためのものです。決してデザインのためではありません。スタイルシートは、その文書構造を元にデザインしていきますが、デザインのためにHTMLを書くのではありません。そんなことしていたらHTML5にまったく付いていけなくなりますよ。 ＞sidebar内容(img)が右側にいき 　imgは何でしょう。「テキストを画像に置き換えて表現 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」したものでしたら、代替文字の内容が知りたい。 　HTMLが、たとえば下記のようなものだったとしましょう。 <body> 　<div class="header"> 　　<h1>タイトル</h1> 　</div> 　<div class="section"> 　　<h2>本文見出し</h2> 　　<p>本文記事</p> 　　<div class="tableContent"><!-- table of content(目次) --> 　　　<ol> 　　　　<li><a href="#section1">一章</a> 　　　　<li><a href="#section1">一章</a> 　　　</ol> 　　</div> 　</div> 　<div class="footer"> 　　<h2>文書情報</h2> 　</div> </body> 　このようにHTMLはデザインは一切無視して、ひたすら文書構造をマークアップします。(2.4.1 構造とプレゼンテーションの分離 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ))とはそういうこと。 　これをスタイルシートで、左だろうが右だろうが、上だろうが下だろうが、自在にデザインしていくことができます。 div.section{position:relative;min-height:200px;} div.section>*{margin-left:200px;} div.section div.tableContent{posotion:absolute;left:0;top:0;width:190px;height:100%;} /* わかり易く色と枠をつけておく */ body>div{border:solid 1px gray;background-color:aqua;} div.section{background-color:lime;} div.section div.tableContent{background-color:green;} div.footer{background-color:silver;} floatは使いません。、floatを使うと、必ず回り込ませるブロックより前に書かなければならなくなったり(文書構造をくずす)、本文中で本来のfloat(記事中の挿絵の周囲にテキストを回りこませる)が使えなくなったり・・・ 　→Webデザインにおける段組 ( http://ja.wikipedia.org/wiki/%E6%AE%B5%E7%B5%84# … ) 　ちなみに、上記の<div class="tableContent"></div>は、<div class="section"></div>内のどこにあっても指定した位置に表示されます。 以前に回答した ・floatによる段組について - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7079628.html ) など ※idはリンクやjavascriptのターゲットにするとき以外は、原則つけないほうが良いです。 　詳細度が高くなるため、スタイルシートが肥大化します。headerやsection,footerは、ひとつの文書の中で何度でも登場するのでclass名をつけておきます。スタイルシートではセレクタの記述でそれらを区別することができます。 　div.section|margin-left:1em;font-size:0.95em}としておけば、章→項→小項と進むたびに左側が字下げされ、文字は小さくなります。また、div.section div.section h2{color:red;}とすれば、項以下は赤くなる。 ※sidebarの画像がわかりませんが、もしそれが「テキストを画像に置き換えたもの」なら、テキストを記述し背景画像にしましょう。すべてのユーザーエージェントが画像を読むわけではありません。特に検索エンジンは画像なんて読めません。 　
なにかのプログラム(javascrptｓｔ)内の書き方ですか？ ここは、「Webデザイン・CSS」ですので、ちょっとカテゴリーが違うので、HTML+CSSとして回答しておきます。 「拡大領域があって、その下に小さな画像が１０個ある形です。」との事ですので、多分HTMLを率直に記述すると <ol id="album"> 　<li><img src="images/thumbnail/01.jpg" width="80" height="60" alt="なんとかの縮小写真"> 　　　<p><img src="images/photo01.jpg" width="640" height="480" alt="なんとか"></p> 　</li> 　<li><img src="images/01.jpg" width="80" height="60" alt="なんとかの縮小写真"> 　　　<p><img src="images/photo/02.jpg" width="640" height="480" alt="なんとか"></p> 　</li> ・・・ </ol> 　とかのはずですね。・・・そんな難しいものではないので、率直に文書構造どおりマークアップしておきます。 スタイルシートで #album,#album li{display:block;list0style:none;margin:0;padding:0;} #album{width:800px;height:600px;margin:0 auto;border:1 gray solid;text-align:center;position:relative;} #album li{width:100px;float:left;} とか・・・ HTMLはデザインは一切考えすに書くこと!!! [全体]とっても簡単な例ですが・・こんなに簡単なものかと思うけど・・ ・画像の縦横比やサイズが異なっていても中央に表示される。 ・縦長ではみ出る場合はスクロールが現れる。 ・スタイルシートを解釈しないブラウザや印刷のため、thumbnail画像、拡大画像とも任意のサイズで記載しておく。 　　印刷を想定するなら実幅1028pxをwidth="540"とかにすると良い(きれいに印刷できる) ・javascriptを使わず、HTML+CSSのみで作成してある。 　javascript無効のブラウザでも利用できる。 　印刷時は一覧として表示される。印刷プレビューで確認 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　ウェブ標準(HTML4.01strict+CSS2.1)です。 ※タブは、＿に置換してあるので戻すこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- #album,#album li{display:block;list-style:none;margin:0;padding:0;} #album{width:800px;height:680px;margin:0 auto;border:1px gray solid;text-align:center;position:relative;} #album li{width:80px;float:left;margin-top:515px;} #album li img{display:block;width:72px;height:auto;} #album li p{position:absolute;top:0;left:0;width:100%;height:500px;overflow:auto;display:none;border:solid 1px red;} #album li p img{display:block;width:600px;height:auto;margin:10px auto;} #album li:hover p{display:block;} --> ＿</style> </head> <body> ＿<h1>サンプル</h1> <ol id="album"> ＿<li><img src="images/thumbnail/01.jpg" width="72" height="54" alt="なんとかの縮小写真"> ＿＿<p><img src="images/photo/01.jpg" width="640" height="480" alt="なんとか"></p> ＿</li> ＿<li><img src="images/thumbnail/01.jpg" width="54" height="72" alt="なんとかの縮小写真"> ＿＿<p><img src="images/photo/02.jpg" width="540" height="720" alt="なんとか"></p> ＿</li> ＿<li><img src="images/thumbnail/03.jpg" width="80" height="80" alt="なんとかの縮小写真"> ＿＿<p><img src="images/photo/03.jpg" width="800" height="800" alt="なんとか"></p> ＿</li> ＿<li><img src="images/thumbnail/04.jpg" width="72" height="54" alt="なんとかの縮小写真"> ＿＿<p><img src="images/photo/04.jpg" width="640" height="480" alt="なんとか"></p> ＿</li> ＿<li><img src="images/thumbnail/05.jpg" width="72" height="54" alt="なんとかの縮小写真"> ＿＿<p><img src="images/photo/05.jpg" width="640" height="480" alt="なんとか"></p> ＿</li> ＿<li><img src="images/thumbnail/06.jpg" width="72" height="54" alt="なんとかの縮小写真"> ＿＿<p><img src="images/photo/06.jpg" width="640" height="480" alt="なんとか"></p> ＿</li> ＿<li><img src="images/thumbnail/07.jpg" width="72" height="54" alt="なんとかの縮小写真"> ＿＿<p><img src="images/photo/07.jpg" width="640" height="480" alt="なんとか"></p> ＿</li> ＿<li><img src="images/thumbnail/08.jpg" width="72" height="54" alt="なんとかの縮小写真"> ＿＿<p><img src="images/photo/08.jpg" width="640" height="480" alt="なんとか"></p> ＿</li> ＿<li><img src="images/thumbnail/09.jpg" width="80" height="" alt="なんとかの縮小写真"> ＿＿<p><img src="images/photo/09.jpg" width="800" height="800" alt="なんとか"></p> ＿</li> ＿<li><img src="images/thumbnail/10.jpg" width="54" height="72" alt="なんとかの縮小写真"> ＿＿<p><img src="images/photo/10.jpg" width="540" height="720" alt="なんとか"></p> ＿</li> </ol> </body> </html>
タダのテキストのブロックにしおりつけて管理しているだけですから ＜body＞の前だろうが後だろうが大丈夫ですよ。
スタイルシートを使わないと実現できませんので、かなり新しいガラケー以外ではそのような形で表示できません。 テーブルでお作りになってください。
そのソフトとは関係なく、一般的にVistaで動作しない場合、右クリック「プロパティ」「システムの詳細設定」「詳細設定」「パフォーマンス」「設定」「データ実行防止」　「重要なWindowsプログラムおよびサービスについてのみ有効にする」オンOK再起動 Vistaでは、一般的に、右クリック「管理者として実行」で・解凍・展開・インストール・起動・コピー・削除など実行 VistaではOSを起動するだけでメモリー1GB近く消費します。作業用メモリーは十分ですか？（メモリー搭載は？） ＞テンプレートを貼り付け ＞0による浮動数点数除算 C++ビルダーやDelphi環境下で作成した（ホームページ作成など）アプリケーションで、何かをすると「0による浮動小数点数除算エラー」が発生することから、＜テンプレートを貼り付け＞は画像の貼り付け（マニュアル上の作業）ですか？（「テンプレート」はソフト対応のものですか？） 参考URL 参考URL：http://www.j-ns.com/ab/
失敗１)デザインのためにHTMLを書かない!! 何のためにスタイルシートを使うのか？ 　文書構造とプレゼンテーションを分離するためです。 ごく簡単な例を例を挙げておきます。たったこれだけです。 ・DOCTYPEスイッチ( https://www.google.co.jp/#hl=ja&safe=off&output= … )で、標準モードで起動させること。 　　でないと、苦労します。そもそもウエブ標準で作成すること。 　　HTMLはHTML4.01strictで記述しましょう。 ・HTMLに文書構造と関係ないものは書かない。下記ソース参照 ・スタイルシートはHTMLの文書構造を元に記述する。 　この順番を間違えたらダメです。HTMLを書くときデザインは考えない。そうしないと先でデザインを変えるとき泣きますよ。 ★多分原因はIE6のブロックサイズの計算方法の差です。 ★下記ソース中の最後のdiv.section h2に対するmargin:0を消すと隙間が広がります。 (注意) *{ margin: 0px; padding: 0px; font-weight: normal; list-style-type:none; } の指定は絶対にすべきではあません。これをするとブラウザが本来もつスタイル( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )をすべて消してしまいます。そのため、すべてのスタイルを追記しなければならなくなり、煩雑になります。 　元々オーサリングツールの仕業ですが、HTMLとスタイルシートの基本を知らない人がそのまま流用しているものです。 　 (注意) 今回は、IE6を対象とするので<li>のIDは放置しています。(IEを無視するなら、つけなくて良いです。)つけるのならサンプルのように具体的にわかるものにしておきましょう。スタイルシートを先で書き直すときに楽です。なお、本来は要素セレクタで記述すべきです。 div.header div.nav ul li a[href="./b"]{background-image:url(images/link.gif)} というふうに。 (注意) スタイルシートに、同じプロパティの設定は２回書かないようにすると小さくなります。 　・継承するプロパティは上位に書いて継承させる。 　　　その後で詳細度の高いセレクタで上書きする。 　・同じプロパティを記述するセレクタはグループ化する。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み--HTML4.01strict+CSS2.1 　タブは＿に置換してありますから、戻してテストすること。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ちなみに、IE5でもきちんと表示されます。また、リキッドデザインにしてありますからスマホでもスクロールなしでＯＫなはずです。ウィンドウ幅も変えて試してください。 　なお、スマホなど新しいブラウザのみをターゲットにするならCSS3のbackground-sizeで背景を伸縮できます。 　もう一点、IE6はマイクロソフト自身が撲滅キャンペーン( http://www.ie6countdown.com/ )をしているブラウザです。シェアもとても低い( http://lhsp.s206.xrea.com/misc/browser-share-ver … )ものです。対処する必要はありません。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;}/* 全称セレクタで消すことは避ける。 */ p{margin:0;line-height:1.5em;text-indent:1em;} div.header,div.section,div.footer{ ＿width:100%;margin:0 auto;min-width:640px;max-width:960px; } div.header div.nav{height:33px;line-height:33px;} div.header div.nav ul,div.header div.nav ul li{ ＿display:block;list-style:none;margin:0;padding:0; } div.header div.nav ul li{float:left;width:20%;position:relative;} div.header div.nav ul li a{ ＿display:block;width:100%;height:100%; ＿background:url(images/topbotan.gif) no-repeat blue; } div.section{background:url(images/pro_back.gif) no-repeat 50% 50%;min-height:623px} div.section h2{margin:0;line-height:1.6em;} div.header div.nav ul li a span{visibility:hidden;} #goLink a{background-image:url(images/link.gif)} #goMail a{background-image:url(images/mail.gif)} #goIllustration a{background-image:url(images/illustration.gif)} #goDesignwork a{background-image:url(images/designwork.gif)} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>サンプル</h1> ＿＿<div class="nav"><!-- navigationは他にも登場しうるのでidにはしない --> ＿＿＿<ul> ＿＿＿＿<li><a href="./a"><span>トップへ</span></a></li> ＿＿＿＿<li id="goLink"><a href="./b"><span>リンク集</span></a></li> ＿＿＿＿<li id="goMail"><a href="./d"><span>メール</span></a></li> ＿＿＿＿<li id="goIllustration"><a href="./e"><span>イラスト</span></a></li> ＿＿＿＿<li id="goDesignwork"><a href="./f"><span>デザイン</span></a></li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>本文見出し</h2> ＿＿<p>○○○○○</p> ＿</div> ＿<div class="footer"> ＿＿<p>文書情報</p> ＿</div> </body> </html>
＞imgタグとaタグの組み合わせで、リンクを作っていないのでしょうか？ 　一言で言うと「その画像は文書構造には無関係な背景だから」です。 　説明すれば長くなりますが、そもそもHTMLの最大の目的は、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML4.01仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　ですね。ウェブページにアクセスするユーザーエージェントは、上記の例に加えて検索エンジンも含まれますが、画像が負担になる携帯電話などの帯域の狭いものもいます。画像の絵柄の意味を理解できるのは人だけです。人意外も訪問する・・ 　それ以外にも随所に 「文書構造とプレゼンテーションとのより明解な区別。従って、プレゼンテーション目的の場合HTMLの要素や属性ではなくスタイルシートの使用を奨励する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 「テキストを画像に置き換えて表現する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )のはまずい」 「HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 相互運用性の達成は、コンテンツプロバイダのコストを低下させる。なぜならただ1種類の文書しか作る必要がなくなるからだ。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　たとえば、 <a href="htt://hge.com"><span>ほげ</span></a> 　と書かれていれば、スタイルシートで a[href="htt://hge.com"]{background:url()****} a[href="htt://hge.com"] span{display:none;} 　とすれば、携帯電話や検索エンジン、点字端末や読み上げソフトは率直にテキストとして理解します。また、さきでデザインを変えようとしたときにHTMLを書き換える必要もありませんね。 　リンクボタンやリンク画像は、多くの場合は単なる背景以上の意味は持ちませんので、画像を使わないほうが良いでしょう。逆に画像(たとえば製品群が一目でわかるような画像)にリンクを張りたいときは、画像にリンクを張ると考えると良いでしょう。その場合でも、altにはきちんと代替文字を帰すべきですし、マークアップがナビゲーションリストのひとつでしたら、<div class="nav></div>(HTML4.01)、<nav></nav>(HTML5)で括るべきです。 　後者の場合も、 <div class="nav"> 　<ul> 　　<li><a href=""></a></li> 　　<li><a href=""></a></li> 　　<li><a href=""></a></li> 　　<li><a href=""></a></li> 　</ul> </div> としかマークアップしないことが圧倒的に多いです。私は・・ 　だって先でデザインを変えたくなったとき、すべてのホページの該当部分を変えると考えるとぞっとしますモン。
大原則として，崩れません。 HTML 4およびXHTML 1は文字集合としてISO/IEC 10646-1が指定されています。 また，HTML5では文字集合としてUnicodeが指定されています。 # XHTML5は内部(DOM)がUnicodeで外部がISO/IEC 10646-1かな。基本的に違いはないのだけど……。 故に，Shift_JISであっても内部的にはISO/IEC 10646-1またはUnicodeで取り扱うことになります。 最終的なレンダリングエンジンにとって，元のエンコーディングがなんであれ文字集合が同じである以上， 同じ文字は同じようにレンダリングされます。 ただし，Shift_JIS (またはそれに似たエンコーディング) とISO/IEC 10646-1のマッピングは複数存在するため， 同一に見える文字が異なる文字にマッピングされる可能性はあります。 その結果，意図した文字と異なる文字が表示されたり，異なる幅で表示される可能性はあります。 ただし，これは変換後にHTMLをちゃんと確認することで防げます。 UTF-8とISO/IEC 10646-1のマッピングは非正規化表現を除くと1通りしかないため， UTF-8の文書は意図しない変換が入ることがないためです。
フレームは、私自身ここ１０年は使っていません。もちろん、問題がありすぎるからです。 ★あなたがもう一度読みたいページでブックマーク(お気に入り)に登録して、後で開いて御覧なさい。 ★小さなディスプレイの端末--ウィンドウ幅を小さくして閲覧すると ★読み上げブラウザとか ★Lynxのようなテキストブラウザで見たら 　検索エンジンはLynxで見ているように見ています。 　　←技術に関するガイドライン ( http://support.google.com/webmasters/bin/answer. … ) 　あなたがご覧になるサイトでも、ほとんどフレームは使われていないと思います。大規模なサイトほど顕著です。 　あなたは何のために--ユーザーに優しくない---フレームを使われるのですか？ 実はiframeも同じ問題を抱えています。HTML4.01strictにはiframeもありません。HTML5では復活していますが、使い方には注意が必要です。 　たとえばナビゲーションでしたら、すべてのページに <div class="nav"> 　<ol> 　　<li><a href=""></a></li> *********** </div> をコピーペーストするだけで、済むことです。 　また、それが(ページ内)目次でしたら、position:fixedで済みますし、記事をフレームのように見せる方法もたくさんあります。 　HTMLがここまで普及し、利用されている最大の利点が 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より であり、それだからこそ、私たちはHTMLを使うのですから、それと逆行するフレームが非難されるのは当然ではないでしょうか？ 　
　最初にデザインを決めてHTMLを書くのは根本的に誤っていますし、失敗の元です。先でバナーを他のものに変えたり、デザインを変えるときに最初から書き直さなきゃならなくなります。 　『構造とプレゼンテーションの分離 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』はHTMLの大原則です。 　現在はバナーとして画像を別途置く事はあまりされていません。バナーはあくまで見出しなどの画像であったり、背景としてスタイルシートで追加することが多いでしょう。 　たとえば、HTMLが下記のようなものだったとします。 <body> 　<div class="header"> 　　<h1><img src="./images/Logo2.png" width="480" height="480" alt="タイトル"></h1> 　　<div class="nav"> 　　　<ol> 　　　　<li><a href="./b">なんたら</a></li> 　　　　<li><a href="./c">かんたら</a></li> 　　　</ol> 　　</div> 　</div> 　<div class="section"> 　　<h2>記事見出し</h2> 　　<p>なんたらかんたら、</p> 　　<p>なんたらかんたら</p> 　　<p>なんたらかんたら、</p> 　　<p>なんたらかんたら</p> 　　<p class="banner"><img src="./images/sectionLogo.png" width="480" height="480" alt="本文タイトル"></p> 　</div> 　<div class="footer"> 　　<h2>文書情報</h2> 　</div> </body> [HTML5}だと <body> 　<div class="header"> 　　<h1><img src="./images/Logo2.png" width="480" height="480" alt="タイトル"></h1> 　　<div class="nav"> 　　　<ol> 　　　　<li><a href="./b">なんたら</a></li> 　　　　<li><a href="./c">かんたら</a></li> 　　　</ol> 　　</div> 　</div> 　<div class="section"> 　　<h2>記事見出し</h2> 　　<p>なんたらかんたら、</p> 　　<p>なんたらかんたら</p> 　　<p>なんたらかんたら、</p> 　　<p>なんたらかんたら</p> 　　<p class="banner"><img src="./images/sectionLogo.png" width="480" height="480" alt="本文タイトル"></p> 　</div> 　<div class="footer"> 　　<h2>文書情報</h2> 　</div> </body> とか・・プレゼンテーションは考えません。・・・これだとHTMLの目的 「HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　その上でスタイルシートでデザインしていきます。逆にあなたが気が変わってまったく異なるデザインにしようとしたときでもHTMLを書き直す必要はありません。 要は、HTMLさえきちんと書かれていればスタイルシートで何とでも。 【サンプル】HTML4.01strict + CSS2.1 ウェブ標準 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 注意)タブは、＿に置換してあるので戻す。 ★ウィンドウ幅を変えても追随してくれる。 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} body{background-color:black;color:white;line-height:1.6em;} div.header,div.section{width:50%;border:silver 0px solid;} div.header{border-width:0 5px 0 0;position:absolute;} div.section{margin-left:50%;} div.section h2,div.section p{margin-left:10px;} div h1,div.section p.banner{margin:0;} div.section p{border-top:silver 3px solid;} h1 img,p.banner img{display:block;width:100%;height:auto;} div.nav{margin-top:10px;text-align:center;} div.nav ol,div.nav ol li{display:block;list-style:none;margin:0;padding:0;} div.nav ol li{border-top:silver 3px solid;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1><img src="./images/Logo.png" width="480" height="480" alt="タイトル"></h1> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li><a href="./b">なんたら</a></li> ＿＿＿＿<li><a href="./c">かんたら</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>記事見出し</h2> ＿＿<p>なんたらかんたら、</p> ＿＿<p>なんたらかんたら</p> ＿＿<p>なんたらかんたら、</p> ＿＿<p>なんたらかんたら</p> ＿＿<p class="banner"><img src="./images/sectionLogo.png" width="480" height="480" alt="本文タイトル"></p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿</div> </body> </html>
固定と言うのはどういう意味でしょうか？ スクロールしても常に最上部にあるということ？ それとも単に一番上にあるということ？ HTMLソースは関係ありません。 たとえ下のほうにあっても・・ <body> <div class="header"> <h1>タイトル</h1> </div> <div class="section"> <h2>記事見出し</h2> <p>本文</p> <p>本文</p> </div> <div class="footer"> <h3>文書情報</h3> <p>・・・</p> <p class="siteLogo">FCブログ</p> </div> </body> だとして、スタイルシートで absoluteでトップ,fixedで固定(印刷時には各ページに印刷) html,body{margin:0;padding:0;} div.header,div.section,div.footer{margin:0;border:solid 1px gray;} div.header{background-color:yellow;} div.section{background-color:rgb(255,255,200);height:80%;} div.footer{background-color:pink;} div.footer p.siteLogo{ position:absolute; /* position:fixed; */ top:0;left:0;width:100%; height:80px;line-height:80px; font-size:60px;font-weight:bold; background-color:silver; }
その質問の仕方ですと有償の信頼おけるサーバーを借りる以外 回答が付きにくいと思いますが・・・
目的に合わせて使い分ける・・・それだけです。 テキストエディタ--HTMLエディタ ( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … )を使うのは、そのほうが良いときです。 　そもそもHTMLは、文書をそれを構成する要素に分解して、それがどんな要素であるかを判断してマークアップするものですね。それには、文書を読み解き理解する必要がありますが、それだけは人で無いとできません。そして、最適なタグを選択して--これも人でないとできない--となると、この部分は機械任せでは無く人が行うしかない。すべてのタグ--使うのはせいぜい４～５０種類でしょう---を覚えてしまえばよいだけです。 　だから、ここまではHTMLエディタを使う。 　それをテンプレートにして、データを流し込んだりするのはWebオーサリングツール ( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … )を使えば良い。 　ツールは、サイト内のデータの一部を一挙に変更したりするときやサイト管理につかったり・・・ 　また、HTML5で導入されるcanvasやSVGなどは、さすがに手ではかけないので専用のツールをつかったり・・ 　なお、メモ帳では無理なので、高機能なテキストエディタを使います。 まあ、 Webオーサリングツール - Wikipedia ( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … ) 　にまとめられているので読んでみると良いかも 　さすがに、ビルダーは使いませんけどね。
　きれいなソースって何でしょう。無駄なものが無い、きちんと整理されている・・・言い換えれば、何が書かれているかよくわかるということでしょう。 　HTMLやCSSの勉強には、まず(勧告済みの)仕様書を読むこと。全部を通して読み、その後必要なときに必要な箇所を参照する。 　HTMLは１～５・・・そんなモンじゃありません。こんなに ( http://openlab.ring.gr.jp/k16/htmllint/explain.h … )あります。その中から選択しますが、一般的にはHTML4.01strictで良いでしょう。HTML5はまだ勧告になっていないので、参考にはしてもそれで作成するのは時期尚早でしょう。 　HTML4.01が登場するまでのHTMLは、タグをデザインのために使用したり、デザインのためだけのタグが存在したりで、HTML本来の 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　とかけ離れていっていました。・・・ここは上記の記事の前後をお読みください。・・ 　HTML4.01が勧告---１９９９年!!!されても、実際には、その勧告に従わず、transitinalやframesetが使われ続けきました。 『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　HTML5(XHTML1.1も)では、HTML4.01strictに該当するものしか作れません。 ＞タグも数年前はOKでも今はNGというものがあったりしますよね。 　はありません。上記DTDに適合するものなら良いです。HTML4.01strictで作成しているのに、<FONT>を使ったりしたらダメと言うことです。 　なお、けっしてオーサリングツールを使ったらダメと言うわけではありません。ただ、HTMLやCSSの深い知識なしで利用すると、とてつもなく酷い--汚いものを作ってしまうということです。逆に知っていれば、すくなくとも、HTMLのマークアップやCSSのセレクタは、ツールに頼らないほうが断然早くて効率的ですね。
googleがMap関連のAPIを公開していますので、それを利用すれば可能かと思います。 https://developers.google.com/maps/documentation … 内容がわからない場合は、わかるようになることから始める必要があるかも。
とりあえず必要部分だけを書く事！　その後に調整として後付けすればよい。 変だと思ったら、width と height を全て指定してみる事！ ul#nav2,ul#nav2 li{margin:0; padding:0;} ul#nav2{ width:950px; height:40px; list-style:none;} ul#nav2 li{ float:left; width:150px; height:40px; line-height:40px; background: url(image/menu_bcg.png);} ul#nav2 li a{ display:block; width:100%; height:100%; text-align:center;} <ul id="nav2"> <li><a href="">xxxxxxx</a></li> <li><a href="">xxxxxxx</a></li> <li><a href="">xxxxxxx</a></li> <li><a href="">xxxxxxx</a></li> <li><a href="">xxxxxxx</a></li> <li><a href="">xxxxxxx</a></li> </ul>
私の知る限り、そのような本はありません。あるはずもないのです。 私も以前そのような本に関わったことがあるので・・ 　そもそも、HTMLはコーディングとは言わずにマークアップといいます。Hyper Text Markup Languageは文字通り、リンク機能を持つマークアップされた文書を作成するメタ言語です。ここで言うマークアップとは、文書をそれを構成する要素に分解して、それぞれの要素をタグを用いてマークアップするものです。言い換えれば文書の構造をマークアップするもので、コーディング---これにはデザインするという意味が含まれている---ものではありません。 　十数年前の1999年12月にHTML4.01が勧告されたときに『構造とプレゼンテーションの分離 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』が最大の目的でした。そのため、 「HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。」 「一般的に言って、スタイルやフォーマットを整えるためには、HTMLのプレゼンテーション属性ではなくスタイルシートを使用すべきである。スタイルシートによる代替が可能なHTMLのプレゼンテーション属性は、推奨しないこととなった。」 　いずれも、4.1 定義 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )より引用 　そして、現在HTML5が勧告に向けて準備されていますが、HTML5では、よりこれが明確になってHTMLには文書構造しか表せません。そのためにHTML4.01では、 「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。」と遠まわしに書かれて、実際にはclassやid、divが文書構造ではなくデザインのために使われていた反省から、本来期待されていたclass名やid名が「新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」として独立しました。 　この「HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」は、HTML4.01strictを身につけていると、これだけで基本的なHTML5の書き方は理解できると思います。 　ずばり!!言うと、とっても簡単になります。なぜなら、HTMLは文書構造だけをマークアップすればよいのですから・・そのかわりオーサリングツールには、手も足もでなくなりますね。すなわち文章を読み取って内容を理解して、文書をそれを構成する要素に分解して、最適なタグを選択するのは、ヒトで無いとできないのですから。 　以前、「（ＣＳＳ）画像が完全に右端に寄りません・・・ - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7440223.html#a6 )にて、サンプルのHTMLを掲載しましたが・・HTML部分は、 <body> 　<div class="header"> 　　<h1>サンプル</h1> 　</div> 　<div class="section"> 　　<h2>本文見出し</h2> 　　<p>テキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキスト</p> 　　<p>テキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキスト</p> 　</div> 　<div class="footer"> 　　<h2>文書情報</h2> 　</div> </body> たったこれだけです。・・・ 　元に戻りますが、私は特別な書籍を読んだわけではありません。シンプルに各仕様書を目を通しただけです。仕様書なら書籍の数分の一で、しかも適切で正確な内容が書かれている。私の経験から--仕様書の存在を知らないときにしか本は書けない。その存在を知っていたら、あるいは仕様書を理解していたら、わざわざ書籍なんて読まなくても済むのですが・・ 　いずれにしてもHTML5は、HTML4.01strict--trnsitinalやframesetじゃない---の改訂版ですから、まずHTML4.01の仕様書を隅々まで読んで理解しましょう。それが一番の勉強になるでしょう。 ★HTML 4.01 Specification (ja) ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★HTML5 ( http://www.w3.org/TR/html5/ )--英文 ★REC-CSS2 邦訳 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　ただし、現在ウェブ標準のCSSはCSS2.1ですが、よい邦訳が無いので 　Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification ( http://www.w3.org/TR/CSS2/ )--英文 　　と「変更点(CSS2.1 Appendix C 邦訳) ( http://www.d-toybox.com/spec/CSS2.1/appendixC/ )」 　仕様書を隅々まで読むことから始めましょう。必要なときに、すぐめくれるように。 　プレゼンテーションは、スタイルシートの仕様書を読んでください。
画像に代わる文章は何もないのですか？ 　なら単に画像だけでよいのでは？背景+メイン画像+フッタ画像を合成した一枚の画像を作るべきです。 　HTMLは、名前(Hyper Text Markup Language)というように、ハイパー(リンク機能)を付与した《テキストをその文書構造を示すようにマークアップする》メタ言語です。 　したがって、最低限本文があるはずですし、画像があっても代替文字があるはずです。HTMLにはbodyのみが絶対必要なのはそういう意味です。 たとえば、HTMLが HTML4.01 <body> 　<div class="header"> 　　ヘッダ 　</div> 　<div class="section"> 　　本文 　</div> 　<div class="footer"> 　　フッタ 　</div> </body> HTML5 <body> 　<header> 　　ヘッダ 　<header> 　<section> 　　本文 　<section> 　<footer> 　　フッタ 　</footer> </body> という形をしているのは、文書の構造がそうだからです。HTML4.01のclass名は、仕様書の「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」と、HTML5の「新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」の名前と意味に従っています。 　このようにHTMLは、あくまである文書(テキスト)を、それを構成する要素に分解してマークアップするもので、プレゼンテーションとは分離して考えなければなりません。 　→2.4.1 構造とプレゼンテーションの分離 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　以上を踏まえて画像がメインのHTMLがあるとすると、そのHTMLはHTML4.01に従うと <body> 　<div class="header"> 　　<h1>タイトル</h1> 　　<p>ヘッダ</p> 　</div> 　<div class="section"> 　　<h2>写真のタイトル</h2> 　　<p><img src="./images/main.jpg" width="640" height="480" alt="河口湖湖畔から見た富士山"></p> 　</div> 　<div class="footer"> 　　<h2>文書情報</h2> 　　<p>フッタ</p> 　</div> </body> 　とかになるはずです。プレゼンテーションに関わる記述はありません。こうしておけば、先でどのようにデザインを変えるのも自由ですから・・ 　その上で、メインの画像をページの左右の中央にウィンドウサイズに合わせて表示したいなら、内容によってサイズが変わる置換インライン要素である画像をブロック要素に変換して配置させることになります。 　スタイルシートは html,body{margin:0;padding:0;} div.header,div.section,div.footer{ width:100%;min-width:720px;max-width:1440px;margin:0 auto; border:solid 1px gray; } body>div>*{margin-top:0;} div.header{height:200px;} div.section{position:relative;} div.section p img{display:block;width:100%;height:auto;} ※ <div id="wall" ><div id="box">のようにむやみにidはつけるべきではありません。リンクのターゲットとか、javascriptで要素を特定する必要があるなどに限ったほうが良いです。スタイルシートの説明サイトで西がよく使われるのは、プロパティの説明に便利がよいためです。またwallとかboxのような、文書構造で意味のない名前をつけるべきではありません。 　また、<div id="footer"><img src="css/images/foot.jpg"></div>のような書き方も文法上はエラーになりませんが、本来は誤りです。divやidは、HTMLに文書構造を示す要素(タグ)が足りないときに使うものです。この場合<p class="footer"><img src="css/images/foot.jpg"></p>で十分です。また複数の画像を持つ段落があるなら、 <div class="footer"> 　<p><img・・・・・</p> 　<p><img・・・・・</p> </div> 　とかです。この場合、二つの画像による段落があるが、その二つを示す適切なタグがないために、汎用ブロックである<div>を用いて、そのdivがどのような構成要素であるかを補完するためにfooterというclass名をつけているのです。このように、原則汎用ブロック内に直接行内要素は書くことはないはずです。 [補足] 　なお、background-sizeはCSS3のプロパティで、対応ブラウザの関係で使用するのは時期尚早でしょう。背景ではなく、画像としてHTML内に記述して上記と同様に合わせることは可能ですが、意味的におかしいので・・ 　同じプロパティは、セレクタをグループ化して一度しか書かないようにしましょう。煩雑になってわかりにくくなるし、将来修正する手間が大変になります。また継承されるプロパティは最上位の要素に一度だけ書けば良いです。 　HTML/CSSの仕様上、ウィンドウの高さからは決めることが出来ません。これはHTMLの根本的な目的「HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」を考えると当然です。 　
MIDIではなくfrash(object)です。 <object id="flashMusic" height="24" width="295" type="application/x-shockwave-flash" data="http：//cache.avex.jp/com1/rhythmzone/kodadata/top/swf/music.swf?1336989204319" style="visibility: visible;"> ・・・【中略param】・・・ <param name="base" value="."> </object> の部分を探してください。なお、:は：に置換してあります。 firefoxをお使いなら、firebug( https://addons.mozilla.org/ja/firefox/addon/fire … )で探すと、どの部分かが簡単にわかります。firefoxに標準で付属しているDOM Inspectorでもよいです。 　MIDIの場合、基本的にはユーザーが利用できるプレイヤーのデザインそのものですから、作者側では変更できません。方法は無くもないですが・・
No.4さんの回答が完璧ですね！ 内容は他の方と同じですが、ちょっと補足的に書いてみます。 配布を検討されているのでしたら、一番の解決策は、被らないようなidやclassをつけることですね。100%被らないものはありませんが、ほぼ被らないようにするのは、そんなに難しくないと思いますよ。他の回答にもありましたね。おそらく、この方法が一般的です。 最も簡単な回避策としては、iframeが挙げられますが、これは設置側からすると嫌われる場合もありますね。 No.4さんの回答に、scopeの使用がありましたが、現在scopeが正常に動作するブラウザってありましたっけ？
postion:relativeについて - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7465796.html ) や （ＣＳＳ）画像が完全に右端に寄りません・・・ - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7440223.html#a6 ) にあげたサンプルをご覧ください。 　そこのCSSに、 body{background-image:url();} を追加するだけです。 　デザインのためにHTMLは決して書きません。HTMLは文書構造を記述して、それさえできていればスタイルシートでご自由に・・
id属性の値は、先頭をアルファベット（A～Z , a～z）で開始すること。
私なら、コンテンツの抜本的見直しをします。 サイトの内容にもよるので一概に言えませんが、一般的にWebサイトの過去の更新履歴が重要な意味を持つことはありません。つまり、コンテンツの量が減れば、結果的に質問は解決されます。たとえば、アクセス解析で、数年前の更新履歴ページにどれくらいのアクセスがありますか？仮にそれが全体のアクセスの1%だとしたら、1%のために、使いにくいページを提供する必要があるのか、あるいは、それを修正するコストを見る必要があるのか。とか、そんな考え方をします。
＞ＩＥだと、問題なく正しい位置で表示されるのですが、Ｆｉｒｅｆｏｘや ＞Ｃhromeだと、カーソルオーバー用の画像が下に少しずれて表示されてしまいます。 間違っているのはIEだね・・・（IEのバージョンにもよる） ＞多分、無駄なコードがいっぱいありそう・・・） ですね・・・　半分以下に簡素化できますよ。 まずは、#1さんの通りDTD標準準拠に変更 作り直した方が後々の問題を回避できるけど、 とりあえずの応急処置なら、 #g_navi li a{ padding-top : 20px; #g_navi ul li a:hover{ height : 80px; 実際の画像サイズが不明なので、良くわからないが、 この部分の高さが矛盾なのでは？ 計算上では、21px程度のズレかな・・・ 何故、a:hoverの時だけ　height : 80px;　なのかな？？？
私も最近感心した例を参考URLで紹介します。 この例では横並びリストが中央に来るようにする方法として、position:relative;を使用することでリストのサイズに基づく始点の位置を自動的に設定しています。ここで、ulとliでそれぞれの基準となる始点が異なっているところが、まさしくposition:relative;を使うメリットではないでしょうか。 個人的には子要素のabsoluteのために親要素に設定したりしますが、やはり絶対位置を決められない状況（可変）において相対移動をしたい場合に使うのが本来的ではないかと思います。 参考URL：http://hail2u.net/blog/webdesign/centering-float …
インデントが消えてわかりづらいので、書き直しておききます。 ＿をタブに戻してください。 ・HTMLには文書構造しか書かない 　すると、HTMLもCSSもとってもわかりやすくなる。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- /* 外形 */ div.section div.nav ol, div.section div.nav ol li{ ＿display:block;list-style:none; ＿margin:0;padding:0; ＿text-align:center; } div.section{width:370px;position:relative;} div.section div.nav ol li{width:185px;font-family:"AdLib BT","Arial Black","Berlin Sans FB Demi","FrankGoth BT","Futura XBlk BT",monospace;} div.section div.nav ol li+li{position:absolute;top:0;right:0;} div.section div.nav ol li ol{background-color:silver;} div.section div.nav ol li ol li{position:static;line-height:27px;font-family:"ＭＳ ゴシック",monospace;} div.section div.nav ol li ol li ol li{line-height:22px;margin-left:20px;width:165px;} div.section div.nav ol li ol li a{display:block;width:100%;height:100%;text-decoration:none;} /* 前景・背景 */ div.section div.nav ol li{background-color:pink;} div.section div.nav ol li ol li a{background:url(./images/background/navi.gif) gray 0 0 no-repeat;} div.section div.nav ol li ol li a:link{background-position:0 0;} div.section div.nav ol li ol li a:visited{background-position:-555px 0;} div.section div.nav ol li ol li a:hover, div.section div.nav ol li ol li a:focus{background-position:-185px 0;} div.section div.nav ol li ol li a:active{background-position:-370px 0;} div.section div.nav ol li ol li ol li a{background-position:0 -27px;} div.section div.nav ol li ol li ol li a:visited{background-position:-555px -27px;} div.section div.nav ol li ol li ol li a:hover, div.section div.nav ol li ol li ol li a:focus{background-position:-185px -27px;} div.section div.nav ol li ol li ol li a:active{background-position:-370px -27px;} --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<div class="section"> ＿＿<div class="nav"> ＿＿＿<ol> ＿＿＿＿<li>INNERWEAR ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li><a href="">abc-1230</a> ＿＿＿＿＿＿＿<ol> ＿＿＿＿＿＿＿＿<li><a href="2">abc-1230-1</a></li> ＿＿＿＿＿＿＿＿<li><a href="3">abc-1230-2</a></li> ＿＿＿＿＿＿＿＿<li><a href="4">abc-1230-3</a></li> ＿＿＿＿＿＿＿＿<li><a href="5">abc-1230-4</a></li> ＿＿＿＿＿＿＿</ol> ＿＿＿＿＿＿</li> ＿＿＿＿＿＿<li><a href="6">abc-4560</a></li> ＿＿＿＿＿＿<li><a href="7">abc-7890</a></li> ＿＿＿＿＿＿<li><a href="8">abc-0120</a></li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿＿<li>INNERWEAR ＿＿＿＿＿<ol> ＿＿＿＿＿＿<li><a href="10">efg-12</a> ＿＿＿＿＿＿＿<ol> ＿＿＿＿＿＿＿＿<li><a href="11">efg-12-1</a></li> ＿＿＿＿＿＿＿＿<li><a href="12">efg-12-2</a></li> ＿＿＿＿＿＿＿＿<li><a href="13">efg-12-3</a></li> ＿＿＿＿＿＿＿＿<li><a href="">efg-12-4</a></li> ＿＿＿＿＿＿＿</ol> ＿＿＿＿＿＿</li> ＿＿＿＿＿＿<li><a href="14">efg-34</a></li> ＿＿＿＿＿＿<li><a href="15">efg-56</a></li> ＿＿＿＿＿＿<li><a href="16">efg-78</a></li> ＿＿＿＿＿＿<li><a href="17">efg-90</a></li> ＿＿＿＿＿</ol> ＿＿＿＿</li> ＿＿＿</ol> ＿＿</div> ＿</div> </body> </html>
box-sizing(CSS3)を使えばCSSだけで出来ないことも無いです。 ＃私が思いつく限りはbox-sizingしかないのですが、他にも方法があるんでしょうかね なのでIE8であればOKですが、IE7ではJavaScriptを使う以外方法はないかと思います ＃IE6なら逆にバグを利用すればできるかもしれません。 ＃IE7でもbox-sizing-polyfillがありますが、htcの内部はJavaScriptですし。。。 一応サンプルを載せておきます（IE8はOK、IE7はNG）。 ※スペースは全角 <!DOCTYPE html> <html lang="ja"> 　<head> 　　<meta charset="utf-8" /> 　　<title>Test</title> 　　<style> * { margin: 0; padding: 0; } html, body { height: 100%; } body { 　padding: 100px 0 100px; 　box-sizing: border-box; } #header { 　position: absolute; 　top: 0; 　height: 100px; 　width: 100%; 　background-color: #EEE; } #footer { 　position: absolute; 　bottom: 0; 　height: 100px; 　width: 100%; 　background-color: #EEE; } #content { 　height: 100%; 　background-color: #AAA; 　overflow: auto; } #content div { 　height: 1000px; } 　　</style> 　</head> 　<body> 　　<div id="header">へっだ</div> 　　<div id="content"><div>なかみ</div></div> 　　<div id="footer">ふった</div> 　</body> </html>
＞オーサリングツールは、プレビュー機能やタグの入力支援があるので便利に使っています。 　たしかに・・・ 　しかし、プレビュー機能はHTMLを作成するときには使いません。意味ないし・・ 　HTMLを記述するときは、ひたすら文書の構造--文章を読み解き、それが文書の中でどのような構成要素であるかを読み取ってマークアップしていくことだけに注力します。 　たとえば、文章内に<ol><li>・・・が存在した場合、それがサイトのナビゲーションリストなのか、そのページのページの目次なのか、はたまた、単なる序列リストなのかは、機械にはわかりませんから、それを <div class="nav"> 　　<ol> 　　　　<li> ・・・ <div class="table_Content"> 　　<ol> 　　　　<li> ・・・・ <div class="product_List"> 　　<ol> 　　　　<li> 　のように、無名ブロックdivに、文書構造を示すclass名をつけてマークアップしていく作業です。 　もちろん、この部分は重要だから<strong></strong>・・新しい段落だから<p>とか ですから、・・プレビュー機能なんてここでは要りませんね。 　入力支援も必要なのかな？せいぜい使用する要素--タグは数十種類ですし---(比較)中学校で学ぶ英単語は２,０００語 ＞携帯サイトの基礎が分かっていないので、具体的にどういったソースを使って調整すればいいのかよく分かってないのですが・・・。 　上記のようなものですから、携帯サイトだからどうのこうのと言う特別なことは何もありません。作業は楽なものだと思います。まあ、トップページ,カテゴリーのトップ,内容,会社情報などの数種類の文章を取り出して、数種類の雛形を作ってしまえばよい。慣れれば数日でできるでしょう。後はデータを流し込んでいくだけです。 　デザインの要素をまったくもっていないHTMLができたら、スタイルシートを文書構造を基に作成していきます。 div.header,div.section,div.footer{margin:0 auto;width:80%;min-width:640px;max-width:900px;} /* header,section(本文),footerのサイズを指定する。media="screen"としておけば、スマホやPCにしか適用されない。スタイルシートを理解する携帯電話にはmedia="tty"で別のものを用意すればよい。*/ 　これだと、 div.section div.section{margin-left:1em;font-size:0.95em;} /* これだけで、章→項→小項と進むごとに右側にマージンが増え、文字が少しずつ小さくなる */ div.section strong{color:red;font-weight:bold;} /* 本文中の重要単語は太字の赤で */ div.section{position:relative;} div.section div.section{position:static;} div.section div.table_Content{width:20%;position:absolute;} div.section div.table_Content ol,div.section div.table_Content li{display:block;list-style:none;margin:0;padding:0;} 　この様に文書構造を解釈してデザインしていくのですから簡単ですし、後々の修正も楽・・。こんなセレクタの書き方はオーサリングツールには出来ません。なぜなら文章の構造を理解できないので、これも著者が行うしかありませんね。 　これが文書構造とプレゼンテーションを分離することで、「あらゆるプラットホームに対応するHTML」が完成しますし、「スタイルシートを変更するだけでまったく異なるデザインにすることができる」「HTMLもCSSも極めてシンプルでわかりやすくなる」のでスタイルシートを使用する本来の目的も達成できる。印刷が想定されるページにはmedia="screen"でスタイルシートを書けば良い。 　そんな難しい作業じゃありません。今まで作ってきた手法と比べると驚くほど簡単になりますよ。(^^)頑張ってください。仕様書のほうがツールの説明書の数十分の一しか量もないし(^^) 　要は慣れです。
No.1です。 　この様なプログラムは、レストランや医療機関、法律相談などでいくつか作成した経験から回答しましたが、あなたが希望されるシステムは、実は大変複雑で高度なものなのですよ。 　この様なシステムを設計する場合、もっとも考慮しなければ、多忙やシステムトラブルで書き換えができなかったときの対策です。そのときには、待ち時間の説明が、「あくまで日時による経験に基づくものであって目安に過ぎないこと」を伝えておくことを忘れてはいけません。 　言い換えれば、登録できなくてもページには目安が表示されているか、その場合は目安時間は表示されないかのいずれかであること。・・・これはとても大事です。登録を忘れていて、短い時間が表示されたままになっていて、実際に来店したら・・・なんて事だけにはならないように。 　それを防止するためには、クローンCGIでページを書き換えて待っているか、呼び出されるたびにチェックして書き換えるシステムが必須です。 　依頼される場合でも、もし更新されずに放っておかれたときの表示など、本来の動作以外の対策がシステム全体の大部分を占めることを理解して置いてください。
回答が遅くなり、申し訳御座いません。無事Webフォントが導入できたようで何よりです。 さて、Firefoxでの表示に関してですが、セキュリティ意識の高いFirefoxでは現在ドメインによって ファイルを読み込むか読み込まないかを決定する機能が搭載されています。 不正なスクリプトを実行させない為の機能で、おそらく今後他のブラウザにも同じような機能が搭載されると思われます。 こういった場合、どうすれば別ドメインからファイルを呼び出すかというと、ファイルにアクセスしても大丈夫だよ、という記述を ファイルが置いてあるサーバーに施してあげる必要があるのです。 幸い、FC2サーバーは.htaccessに対応していますので以下に対処方法を記載します。 ======================= (1)次のテキストをコピーして新規テキストドキュメントに貼り付ける header add Access-Control-Allow-Origin "サイトのURL" (2)サイトのURL部分を、Webフォントを適用したいフォントのドメインに置き換える。 例） http://webfonts.jpにてWebフォントを使用したい場合 header add Access-Control-Allow-Origin "http://webfonts.jp" (3)置き換えたら、ファイル名をhtaccess.txtとして保存する (4)FC2のホームページ管理画面に行き、画面左の「ファイルのアップロード」をクリックし、アップロード画面へ。 (5)先程保存したhtaccess.txtをアップロードする (6)アップロードが完了したら、htaccess.txtの名前の変更を行い、「htaccess.txt」から「.htaccess」へファイル名を変更する ======================= これにて.htaccessの設定は完了です。Firefoxで表示が正常に行われるか確認してみて下さい。 まだ正常に表示することが出来ないようなら、御一報下さい。 ※本日、http://webfonts.jp/をオープン致しました。まだコンテンツの全てを公開できておりませんが、 興味がありましたら是非御覧下さい。御待ちしております。
Javascriptとの組み合わせになりますが、「Highslide JS」なんか、けっこういいかと。 http://www.highslide.com/#examples
・どちらがよりどうなのでしょうか？？ メリットやデメリットなどはあるのでしょうか？？ 静的ページはほとんど更新しないという前提であれば断然２だと思います。 ⇒既存のHPが既にあるのであれば、更新箇所だけwordpressを組み込めばいいだけです。 wordpressのタグをその情報が出る箇所に埋め込み、wordpressの管理画面からブログを投稿すればできます。 タグを埋め込むだけですので、phpの知識はいりませんが、最低限のwordpressのタグの知識、htmlの知識とwordpressのフォルダの構造の理解はいります。 私も全く同じ経験をしましたが、htmlがまずまずあった状態で、あまりもの覚えがよくない私で、３日ほど本を読んで分かりました。 「本格ビジネスサイトを作りながら学ぶ WordPressの教科書」あたりのwordpressの本を一冊読めばできると思います。
　画像自体のサイズ、ディスプレイで表示されるサイズ、それぞれの解像度・・・・をきちんと理解しておかないと混乱しますね。 　インターネットで標準的な画像フォーマットはjpeg,GIF,PNGのラスターイメージと、SVGというベクトル画像があります。 　解像度が問題になるのは、ラスター/ビットマップ画像で、これらは画像の座標で示された点の位置ごとに彩度や明度を持っています。当然、座標の数が増えると画像のサイズ自体も大きくなります。 　一方、ディスプレイはWindowsなどでは、96dpiと表現されるように、一インチ当たり96個の点で表示しますが、実際のディスプレイの解像度はそれよりも高いです。言い換えれば、いったん96dpiで計算して各座標の色を決めたのち、ディスプレイの解像度に合わせて拡大します。たとえば一インチ当たり120個あれば、そのスキマを埋めますし、足りなければ間引きます。 　画像の解像度とディスプレイの解像度は別物と考えてください。 　一方の表示サイズですが、これは、ピクセルについては px: pixel units — 1px is equal to 0.75pt.( http://www.w3.org/TR/CSS2/syndata.html#length-un … ) とされていて、CSS2.1では、 「（あまりにも多くの既存のコンテンツは、96dpiの仮定に依存しており、その前提を壊すことは、コンテンツを破るため、この変更が行われました。） 参照画素は、96dpiの画素密度と腕の長さのリーダーからの距離を持つデバイス上の1画素の視覚角度です。 28インチの公称腕の長さについては、視野角は従って約0.0213度である。腕の長さで読み取るために、1pxのは、このように約0.26ミリメートル（1/96インチ）に対応しています。 下の画像は、参照画素のサイズに距離を表示するための効果を示しています：71センチ（28インチ）0.26ミリメートルの参照画素の結果の読み取り距離を、で3.5メートル（12フィート）の結果の読み取り距離ながら、 1.3ミリメートルの参照画素。 」 　詳しい説明が、 4.3.2 Lengths ( http://www.w3.org/TR/CSS2/syndata.html#length-un … ) 　の下の方に図入りで説明されています。 　これが最もよくわかるのは、出力デバイスをプリンターにしたときです。たとえばHTMLで <img src="[1080px×720pxの画像]" width=""360" height="240"> <img src="360px×240pxの画像" width=""360" height="240"> として、表示させると、画面には0.26mm×360=93.6mm程度に表示されるはずです。印刷したときにも、ほぼこのサイズで印刷されますが、画像に360px×240pxを指定したほうは、随分と荒く印刷されるはずです。なぜなら、プリンターの解像度は通常200dpi以上あるからです。 　解像度が高いほうが、同じサイズに表示される画像であっても、元画像の画素数が多いときれいに表示されるはずですが、これにはブラウザの計算処理も関わってくるので一概には言えません。 　なお、SVGで描かれた画像はいくら解像度を上げても凸凹にはなりません。
　本来は、二つの画像を合成して一枚の画像として背景にするのが、背景という言葉の意味としては適切でしょう。二つの画像、すなわち二つの背景となると、その前景も二つであるならば、それぞれに背景を指定して内容の伸縮に合わせていくのが良いと思います。 　ただ、全体を覆う背景の一部分に別の画像を載せたい場合には、:befor/:after擬似要素とcontentプロパティ、z\indexを組み合わせれば可能です。 　CSS3では、background-image:<bg-image> [ , <bg-image> ]* となっていますから可能です。 →Image Sources: the ‘background-image’ property ( http://www.w3.org/TR/css3-background/#the-backgr … )以降
widthでは、巾が固定されてしまいます。 　最近は様々な端末が存在するため、幅の狭いディスプレイでは横スクロールを求められるし、幅広ディスプレイでは画面の一部しか使用されません。 　そこで、 body>div.header,body>div.section,body>div.footer{ width:90%; min-width:640px; max-width:900px; margin:0 auto; } のように指定しておくと、ディスプレイ巾に合わせて表示部分は伸縮して表示されます。ここで、min-widthは、スマートフォンを意識しています。スマートフォン(縦)だと、640pxを320pxに縮小--約1/2に縮小して表示されます。(スマートフォンの利用が多いと想定される場合は、別のスタイルシートを読ませるなどになります) 　レイアウトは、幅が狭い場合は回り込ませるとかもあるのでそれほどは考えません。 たとえば ・アルバムのような写真と説明とかでしたら、640pxのときは横に２列ですが、900pxのときは３個並ばせるとか ・メニューとコンテンツが狭い画面では縦並びだが、広いときは横並びとか 　min-widthやmax-widthは、ディスプレイの巾を横スクロールなしで精一杯活用するが、上限と加減を設けるときに使用します。
カスケーディングスタイルシートでは、出所・優先順位・詳細度が同じ場合、後から登場したものが前の指定を上書きします。 　何らかの都合で変更したのだが、元の指定を残しておきたいときなどに重複して記述することは多いです。
それは単にスタイルシートの記述がまずいだけです。 本来、コンテナブロックは内容の量によって可変するのがデフォルトです。 'height' ・・・【中略】・・・ 　Initial:　auto と書かれています。→http://www.w3.org/TR/CSS2/visudet.html#propdef-h … 　これを無視してはみ出すということは、そのブロックが抱合している要素にfloatやabsoluteなどの、内容から切り取られて独立するプロパティが与えられているのでしょう。それ以外にrelativeでもはみ出すことがあります。 →position ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) →float ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　floatを使用している場合は、コンテナブロック内でclearさせる。absoluteは、必ずもっとも長大なブロック以外をabsoluteさせる。relativeさせるときは、下方向にずらさないなどをしてください。
<head> <style type="text/css"> td a{width:500px;/*画像と文字をあわせた幅*/ height:100px;/*画像の高さ*/ padding-left:120px;/*画像の幅+画像と文字とのあき*/ display:table-cell; vertical-align:middle;} p a{width:500px;/*以下tdと同じ*/ height:100px; padding-left:120px; display:table-cell; vertical-align:middle;} #abc{background:url(abc.jpg) no-repeat;}/*画像を背景として個別に入れます。*/ #def{background:url(def.jpg) no-repeat;}/*場合によってはclassの方がいいかも*/ #ghi{background:url(ghi.jpg) no-repeat;} </style> </head> <body> <table> <tr> <td> <a href="abc.html" id="abc">AAA<br>BBB</a></td> <td> <a href="abc.html" id="def">DDD<br>EEE</a></td> </tr> <tr> <td> <a href="abc.html" id="ghi">GGG<br>HHH<br>III</a></td> </tr> </table> <p><a href="abc.html" id="abc">AAA<br> BBB</a><a href="abc.html" id="abc">DDD<br> EEE</a></p> <p><a href="abc.html" id="abc">GGG<br> HHH<br> III</a></p> 文字数の制限なら、文章構造無視も仕方ないですね。伝えることが大事なので、理想を言ってられません。 上記のソースはtableバージョンとpバージョンです。横に並べるため、表でもないのに表にしなくてもいいのです。 ｃｓｓの理想から言えば今回の画像と文字の関係は、画像は絶対に必要なものではなく、デザイン表現に必要なものへの適用です。もし、論文中のグラフや概略図などデザインではなく、画像が絶対に必要なコンテンツの場合には使いません。 ｈｔｍｌとｃｓｓは表示されたらいいというものではなく、表示されたら……という感覚で勉強されると、無駄な勉強時間を10倍・100倍取られます。今回のとりあえずができれば、わかっているつもりでも、基本から（いわゆる「正しいhtml」系）学び直されることをお勧めします。
＞インラインのテキストの上側のみスペースを空けるにはどのようにしたら良いのでしょうか・・？ 　そんな時使うのが、position:relativeです。 ★デザインのためにHTMLを書き直す必要はありません。きちんとHTMLが書かれていれば・・ ★まったく異なるHTMLでも、外見は同じにできます。・・・構造とプレゼンテーションを分離するとはそういうこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- /* 共通 */ div.header,div.section,div.footer{width:708px;margin:0 auto;clear:right;margin-top:20px;} div.header p.bar,div.section p.bar{margin:0;text-indent:1em;line-height:0px;} div.header p,div.section p,div.footer p{margin:0 0 0 10px;text-indent:1em;line-height:20px;} div.header p img,div.section p img{float:right;} /* hr */ div.section hr{border:none;background:url(h2_bar01.gif) no-repeat 0 0;height:20px;margin:0;} /* footer */ div.footer{background:url(h2_bar01.gif) no-repeat 0 0;padding-top:20px;} div.footer p:first-child{position:relative;margin-right:145px;} div.footer p:first-child:after{content:url(h2_bar01_ill.gif);position:absolute;top:0;right:-145px;} /* 文章の最初に余白をあける場合、下のコメントアウトを取り除く */ /* div.header p.bar{text-indent:0;margin-bottom:20px;} div.header p.bar img{float:none;} div.header p.bar+p.bar img{float:right;position:relative;top:-20px;} div.section hr{margin-bottom:10px;} div.section p.bar img{position:relative;top:-10px;} div.footer{padding-top:30px;} div.footer p:first-child:after{top:-10px;} --> ＿</style> </head> <body> <div class="header"> ＿<p class="bar"><img src="h2_bar01.gif" alt="" width="708" height="20"></p> ＿<p class="bar"><img width="145" height="62" src="h2_bar01_ill.gif" alt=""></p> ＿<p>テキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキスト</p> ＿<p>テキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキスト</p> </div> <div class="section"> ＿<hr> ＿<p class="bar"><img width="145" height="62" src="h2_bar01_ill.gif" alt=""></p> ＿<p>テキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキスト</p> ＿<p>テキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキスト</p> </div> <div class="footer"> ＿<p>文書情報</p> </div> </body> </html> 最後に、私が自分の作成しているページでそのようにデザインしたいときにどうするかの例を挙げておきます。HTMLがまったくプレゼンテーションと独立していること、HTMLもスタイルシートもわかりやすくなること。将来どのようにプレゼンテーションを変更することもできることがわかると思います。なんてったって単純です。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} p{text-indent:1em;line-height:1.6em;margin:0 auto;} div.header,div.section,div.footer{width:708px;margin:0 auto;border:solid gray 1px;} div.section{margin-top:10px;position:relative;} div.section:before{content:url(h2_bar01.gif);} div.section h2:after{content:url(h2_bar01_ill.gif);position:absolute;top:0;right:0;top:20px} --> ＿</style> </head> <body> <div class="header"> ＿<h1>サンプル</h1> </div> <div class="section"> ＿<h2>本文見出し</h2> ＿<p>テキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキスト</p> ＿<p>テキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキストテキスト</p> </div> <div class="footer"> ＿<h2>文書情報</h2> </div> </body> </html>
まずは「CSS BOX」で検索してみてください。 期待する内容に近いものが得られなかったら、検索語句を見直す必要があることがわかります。 ここでの質問も同様です。 おそらく多くの人が「CSSのBOX」の意味を理解できないと思います。 WEBの基本は「まず検索」です。
質問の文章だと伝わらないかも。。。 body 要素の背景の画像があって、 前面のコンテンツのための div 要素とか section(HTML5) 要素とかに、background-color: を指定してあるんだけど、背景の画像も薄く表示させたいから、コンテンツのための要素に filter:alpha(opacity=30); -moz-opacity:0.3; opacity:0.3; とかを設定したら、 文字まで、透過しちゃったんだけど、 どうすればいいの？ って書くと伝わりそうなきがするよ？ がんばって勉強して、有能な社会人になろう！
データ入力（HTML入力）は分担できますが、デザイニングは1人でやらないと、ページごとに全く違うデザインになったりして、共通性というか、一貫性が保てないのでは？ なので、1人で作ったCSSファイルを全員が<link>するのがいいと思います。 --------- >パターンA：1人4ページ担当なので、1人が1つのCSSを作成する。(よって、全20ページで、5人=5つのCSSがいる) >　パターンB：1ページごとに1つのCSSを用意し、20個のページに対し20個のCSSを用意する。 >共通部分のCSS項目(Hタグ、Pタグ)等を別に用意し、5人が取り込んでからの制作はできないのでしょうか？ >　・固定スタイルシートで共通部分(CSSのリセット等)を制作し各個人は優先スタイルシートで制作していくのが一般的なのでしょうか？ 全部、可能です。 すみません、上から目線的な表現になってしまいますが、知識、技術を持っているならどの方法を選んでもかまいません。
この掲示板のシステムの関係で、HTMLソースが正しく表示されていないので、書き直しておきます。 下記は、footerにabsoluteを指定する場合です。fixedの場合はHTMLのbodyは同じですが、スタイルシートはNo.8のものに差し替えてください。(body内はまったく同じです。CSSはごく一部異なります。) ★＿はタブに、：(全角)は:(半角)に戻してください。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- p{margin:0 1em;text-indent:1em;} blockquote{border:gray 1px dotted;} html,body{margin:0;padding:0;height:100%;} body{line-height:1.4em;} div.article{min-height:100%;position:relative;width:80%;min-width:640px;max-width:900px;margin:0 auto;} div.article div.section{height:auto;padding-bottom:120px;} div.article>div{border:solid 1px gray;} div.article div.footer{position:absolute;height:100px;bottom:0;width:100%;} /* 色分け */ body{background-color:gray;} div.header{background-color:aqua;} div.section{background-color:yellow;} div.footer{background-color:lime;} --> ＿</style> </head> <body> ＿<div class="article"> ＿＿<div class="header"> ＿＿＿<h1>サンプル</h1> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h2>本文見出し</h2> ＿＿＿<p>きちんと理解していきましょう。</p> ＿＿＿<p>スタイルシートの関連項目は、<a href="http：//www.swlab.it.okayama-u.ac.jp/man/rec-css2/visuren.html#containing-block%22%3E9.1.2">包含ブロック（Containing blocks）</a>が当てはまるでしょう。</p> ＿＿＿<p>示されたサイトは、マークアップは古いものですね。class名は文書構造を示すもの、idはリンクターゲットなど文書内のひとつの要素を特定する必要があるときと決めておくと、将来デザインを見直すときに絶対的に便利です。</p> ＿＿＿<blockquote cite="http：//www.asahi-net.or.jp/~sd5a-ucd/rec-html401j/struct/global.html#h-7.5.4%22%3E"> ＿＿＿＿<p> ＿＿＿＿＿DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ＿＿＿＿</p> ＿＿＿＿<address><a href="http：//www.asahi-net.or.jp/~sd5a-ucd/rec-html401j/struct/global.html#h-7.5.4%22%3EThe">global structure of an HTML document (ja)</a></address> ＿＿＿</blockquote> ＿＿＿<p>基本的な考え方は、html,body要素のheightを閲覧領域を基準にして指定します。たったそれだけで良いはずです。シンプルでわかりやすいはずです。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> <!-- ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。</p> ＿＿＿<p>ここに長短様々な段落を入れて表示を確認してください。(最後)</p> --> ＿＿</div> ＿＿<div class="footer"> ＿＿＿<h2>文書情報</h2> ＿＿</div> ＿</div> </body> </html>
それ以外に、googleの検索結果も(表には出てきませんが)そうですね。検索結果のリンクを右クリックしてリンク先のURLをコピーしてみると http://www.google.co.jp/url?sa=t&rct=j&q=&esrc=s … 　とかになっているはずです。上記はcgiを検索した結果のwikiへのリンクです。 cgi - Google 検索 ( https://www.google.co.jp/#hl=ja&gs_nf=1&gs_is=1& … ) 　?以下はQUERY_STRINGというデータで、http://www.google.co.jp/url というファイルに対して?以下のデータを渡しています。 　掲示板や検索結果のように動的にページを作成している場合、表示するデータに外部サイトへのリンクがあるとそれを書き換えてページを作成しています。 たとえば、 <a href="http://ja.wikipedia.org/wiki/Common_Gateway_Inte … Gateway Interface - Wikipedia</a> という記述があった場合、 <a href="/myCGI?http%3A%2F%2Fja.wikipedia.org%2Fwiki%2FCommon_Gateway_Interface">Common Gateway Interface - Wikipedia</a> と書き換えて、いったん/myCGIにリンクさせます。 /myCGIは、そのデータを読み取って 「外部へリンクしようとしています。よろしければリンクをクリックしてください。 <a href="http://ja.wikipedia.org/wiki/Common_Gateway_Inte … Gateway Interface - Wikipedia</a>」 と元に戻します。 　これは、単に書き換えているだけでなく、どのような利用者がどのサイトからどのようなブラウザで利用したかのデータを収集するために用いられることが多いでしょう。googleなどは、明らかにそれらの情報を収集して検索結果に反映させていますね。リンクして、すぐ帰ってくればそのサイトは重要ではない・・・とか。 　仕組み的にはごく簡単で十数行のプログラムで済む内容です。あなたのサイトのすべてのページをCGI経由で提供するようにしてしまうと面白いかも。 　
親要素のliにもhoverが効いてますね。 a要素をdisplayblockにして、 スタイルを統合したほうがいいのかもしれません。
そもそも固定ページの複製というのは具体的にどうやってるのですか？
＞携帯サイトではスタイルシートが使えないと聞きましたがいかがでしょう？ 　古い携帯電話は別にして、必ずしもそうではありません。mediatype="tty"が携帯電話など固定ピッチ端末です。しかし外部スタイルシートを読まない、あるいはスタイルシートそのものを解釈しないとても古い携帯電話があるのも事実です。 　しかし、HTMLの属性での指定は解釈しますから、属性でデザインを指定してスタイルシートで上書きすればよいことです。属性値での指定は詳細度が[0]と解釈されます。 (スタイルシート属性での詳細度は[1000]、それ以外はセレクタで詳細度を考慮すれば良い) 　「共通の、よさげなものを作りたい」ためのHTMLでありスタイルシートですよ。--これこそ、HTMLの最大の目的です。--- 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より
　通常、スタイルシートを複数で担当することはありえません。スタイルシートの分量なんて高が知れたものです。 　圧倒的に多いのはHTMLです。HTMLは小さなサイトでも数十ページ、大規模なサイトでは数百、数千になります。(もちろん、それは表面上の数量で実際は本文部分だけですが・・) 　それらすべてのページに適用されるスタイルシートは、ひとつ(実際にひとつと言う意味ではありません--後述)ですから、原則複数で作成することはありませんし、複数で担当すること自体が不可能です。 　スタイルシートがひとつと言う意味は、実質ひとつと言う意味ではありません。またimportを使う必要がいつであるわけではありません。ご存知のようにスタイルシートには ・固定スタイルシート(persistent) ・優先スタイルシート(preferred) ・代替スタイルシート(alternate) ・メディア別スタイルシート 　PC用ブラウザ、スマホ、携帯電話、印刷用 ・配置などアウトライン ・色の指定 　などのスタイルシートを用意することになるでしょう。複数で分担するとなると、それは、importを使う使わないに限らず、もし分担するなら、アウトラインと色指定を分担する。メディア別のスタイルシートを分担するなどです。 　外部にスタイルシートを置く目的は 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから ・著者及びWebサイト管理者が、複数文書間(及び複数サイト間)でスタイルシートを共有できる。 ・著者が、文書に変更を加えることなくスタイルシートを変えられる。 ・ユーザエージェントが、メディア記述子に基づき、スタイルシートを選択的に読み込める。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Style Sheets in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　ですから、分担する必要は余りありません。というか極めて分担しにくいでしょう。 　それよりも、はるかに重要なことは、HTMLのマークアップの統一基準を作成することです。HTMLが、文書構造をきちんと示すものになっていれば、スタイルシートは次のようにきわめて簡単なものになります。 /* bodyの子供のヘッダ、本分、フッタの巾の指定 */ body>div.header,body>div.section,body>div.footer{width:80%;min-width:640px;max-width:900px;margin:0 auto;position:relative;} /* 本文内のセクションは階層ごとに */ div.section div.section{margin-left:2em;} /* 本文中のコラムは */ div.section div.aside{font-size:0.9em;} /* ヘッダ中のナビゲーションは */ div.header div.nav{position:absolute;top:0;left:0;} div.header div.nav ul,div.header div.nav ul li{display:block;list-style:none;margin:0;padding:0;} div.nav ul{width:100%;text-align:center;} div.nav ul li{float:left;width:19%} div.nav ul li+li{margin-left:1%;} とか・・・。HTMLを読まなくてもスタイルシートが書けるところまで、HTMLのDOMを決めておくこと。これが何よりも重要ですね。 　多分、上記のスタイルシートの設定がどの要素についての設定かは、あなたでも理解できるでしょう。ちなみにclass名は、HTML5の3.1. 新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )を参考にしています。すなわちHTMLが、ほとんどそのままHTML5にも改変できることを示しています。 　もし三人で行うなら ・アウトライン分担 ・色指定分担 ・メディア別の担当 パソコン用は誰々、スマホ用は誰々、印刷用は誰、携帯電話用は・・ 　などですかね。
クローム、オペラ、モジラではｃｓｓ通りの解釈ですが、IEは正しくない解釈をします。迷惑ですね。でも、無視できない場合にはstyle="text-align:centerを使います。ただし、考えておられる場所が違うようです。なぜ、使いたくないかを教えていただければ他の手法や逃げ道があるかもしれません。 IEの一部はボックスレベル要素とインライン要素の区別がつかない解釈なので、インライン要素のtext-alignをボックスに効かせ、ボックスへは効くはずのmargin:autoを効かせないバグがあります。mainboxの親要素、アップされているソースだとbodyにtext-align:center;をいれ、mainboxではtext-align:left;に戻します。 <style type="text/css"> <!-- body { background-color: #EEEEEE; text-align:center;/*こっちに使います*/ } .mainbox{ width:900px; height:1000px; padding:6px 6px 2px 2px; border:8px; margin-left: auto; margin-right: auto; text-align:left;/*こっちはこのままでＯＫ*/ background-color:#bde9ba;} body { overflow: hidden; } --> </style> <div class="mainbox"> 内容 </div>
JavaScriptが悪さをしていますね。 原因を特定する方法はいろいろありますが、読み込んでいるJavaScriptをひとつづつ削除してみれば、手っ取り早くどれが犯人かわかると思います。 調べたわけではありませんが、ファイル名からして、swfmacmousewheel.jsがもっとも怪しいですね。
多分、誰にもわからないと思います。 HTMLが、とても酷い--文書構造をまったく示していないためスタイルシートを見ただけじゃ、どれがどの部分の指定なのかさっぱりわかりません。本人でもわからないのですから、他人にはわかる手立てがありません。 　たとえば、 div.header div.nav{ 　position:absolute;left:10px;top:100px;width:200px; 　background-color:#000; } なんて書かれていたら、「ああ、ヘッダに書かれているナビゲーションを左に200px幅で、おいて、背景色が黒に指定してあるな」と誰にでもわかる。 　スタイルシートのみならず、HTMLもわかり易く、メンテナンスも簡単でしょう。もちろん検索エンジンもこれらのクラス名を理解しますからSEO的にも良い。 　HTMLは文書構造を示すもの--タグだけで足りなければdivにclass名をつけて文書構造を誰にもわかるように記述する。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　.skinSubB .skinMenuBody .skinMenuHeaderなんてするから、自分でもわからなくなります。他人には、まったく理解不能になってしまいます。CSS2.1でしょうから、ちゃんと要素名まで書くほうが良いです。 　div.skinSubB ul li{}というふうに・・・.skinSubBと書けば、*.skinSubBとみなされます。(*は全称セレクタ) 　HTMLもさることながら、CSSも酷すぎます。CSSはその数分の一の文字数で事足ります。しかも、もうすこし、わかり易く書いておかないと・・ 　ここからは対策です。 ★それぞれのclass名が、HTMLのどの要素に対する指定かを確認してください。 ★firefox+firebug( https://addons.mozilla.jp/firefox/details/1843 ) 　を使用すると簡単です。継承などもきちんと示してくれるので便利です。 　該当するスタイル指定が見つかったら、firebugでその部分を書き換えてテストする。
:hover用です。 　HTMLはシンプルに、スタイルシートも極めて簡単になります。理屈的にはプルダウンメニューとまったく同じです。画像の一部を表示するのは、relativeとtop,leftプロパティで行います。 　もちろん、背景画像を使う一般的な方法もありますが、それは調べてください。そのほうが、見ない画像はブラウザが事前に読み込まないのでページ自体は軽くなります。ただし、:hoverや:active時の画像の読み込みにタイムラグが生じることがあります。どちらを選択するかは、画像のサイズと量で判断します。 　前と同様、ウェブ標準のHTML4.01strict+CSS2.1です。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=UTF-8"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.album{position:relative;height:250px;} div.album ul{position:absolute;top:200px;left:0;} div.album ul,div.album ul li{ display:block;list-style:none;float:left;margin:0;padding:0; } div.album li a span{ ＿display:none; ＿overflow: hidden; ＿width: 200px;height:150px; ＿border: 1px solid #ddd; ＿position:absolute; ＿top:-160px;left:0; } div.album li a:hover span{display:block;} div.album ul li+li{margin-left:5px;} div.album ul li a span img{ ＿position:relative; ＿top:0;left:0; } div.album2{position:relative;height:250px;} div.album2 ul{position:absolute;top:200px;left:0;} div.album2 ul,div.album2 ul li{ display:block;list-style:none;float:left;margin:0;padding:0; } div.album2 ul li+li{margin-left:5px;} div.album2 li p{ ＿margin:0; ＿display:none; ＿overflow: hidden; ＿width: 200px;height:150px; ＿border: 1px solid #ddd; ＿position:absolute; ＿top:-160px;left:0; } div.album2 li:hover p{display:block;} div.album2 ul li p img{ ＿position:relative; ＿top:0;left:0; } --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<div class="album"> ＿＿<h2>a:hover</h2> ＿＿<ul> ＿＿＿<li><a href=""><img src="./images/thumbnail/3.jpg" width="64" height="48" alt="サムネイル" ><span><img src="./images/3.jpg" width="640" height="480" alt="" style="top:-200px;left:-200px;"></span></a></li> ＿＿＿<li><a href=""><img src="./images/thumbnail/4.jpg" width="64" height="48" alt="サムネイル" ><span><img src="./images/4.jpg" width="640" height="480" alt="" style="top:-100px;left:-200px;"></span></a></li> ＿＿＿<li><a href=""><img src="./images/thumbnail/5.jpg" width="64" height="48" alt="サムネイル" ><span><img src="./images/5.jpg" width="640" height="480" alt="" style="top:-100px;left:-200px;"></span></a></li> ＿＿</ul> ＿</div> ＿<div class="album2"> ＿＿<h2>li:hover</h2> ＿＿<ul> ＿＿＿<li><img src="./images/thumbnail/3.jpg" width="64" height="48" alt="サムネイル" > ＿＿＿＿<p><img src="./images/3.jpg" width="640" height="480" alt="" style="top:-200px;left:-200px;"></p> ＿＿＿</li> ＿＿＿<li><img src="./images/thumbnail/4.jpg" width="64" height="48" alt="サムネイル" > ＿＿＿＿<p><img src="./images/4.jpg" width="640" height="480" alt="" style="top:-100px;left:-200px;"></p> ＿＿＿</li> ＿＿＿<li><img src="./images/thumbnail/5.jpg" width="64" height="48" alt="サムネイル" > ＿＿＿＿<p><img src="./images/5.jpg" width="640" height="480" alt="" style="top:-100px;left:-200px;"></p> ＿＿＿</li> ＿＿</ul> ＿</div> </body> </html>
No.2です。重要なポイントを忘れてました。 　印刷を想定する場合、ブラウザとHTMLの組み合わせで印刷するときちんと設定しないと、画質が荒くなってしまいます。 　もっとも良いのは、印刷に関してはユーザーに任せることです。すなわち、「画像を右クリックして保存した後で、任意の画像ソフトで印刷してください。」とメッセージを書いておくことです。あなたの通常、ネット上の画像を印刷される場合は、そうされているはずです。 　なぜなら、Windowsでは画像をいったん96dpiで描画したのち、実際の解像度が高い場合はそれを適当に？埋めて描画ないし、印刷するためプリンターの解像度(最低でも200dpi,高画質で1200dpi)とは程遠いからです。 　別途「印刷用HTML」を別ウィンドウで開かせるなら、そのHTMLにおいて実際の解像度の数分の一程度のサイズで描画させるようスタイルシートを記述できますから、その対策が多少とも取れます。(もちろん完璧ではありません) 　すなわち、実際の画像が横巾1,200pxなら、HTMLないしスタイルシートでwidth="300"、img{display:block;width:300px;height:auto;}とする必要があるということです。
どのような方法で、ヘッダ・フッタ固定をしているのか分からないので、なんとも回答ができないのですが。文面を読む限りは、おそらく要素の重なり順が影響していると思われます。 コンテンツが正常表示されていても、重なりとして、ヘッダやフッタの下にコンテンツがある状況だと、クリックしているのは、コンテンツではなく、ヘッダ・フッタのどちらかということになります。具体的には、ヘッダ・フッタの透明部分をクリックしていることになるでしょう。 要素の重なり順は、CSSのz-indexで設定できます。ただ、z-indexを有効にするには、同要素にstatic以外の値をpositionに指定する必要があります。 #contents{ position:relative; z-index:2; }
WordPressの前に、PHPはご存知ですか？ WordPressのテーマファイルはPHPで作られているわけですから、PHPをご存知でないと、WordPressのカスタマイズは難しいと思います。PHPの基本を習得した上で、WordPressがどのような構成・ルールで作られるのかを学ぶ必要があります。 > "一枚絵"でないために、どうひとつにまとめるの？、と、、、。 たとえば、100ページのサイトがあったとして、すべてのページに同じメニューがあると仮定します。 すべてが一枚絵のHTMLの場合、メニューに変更があった場合、100ページ全てを変更する必要があります。そこで、同じ記述の部分(メニュー）は外部ファイル化して、各ページから一元化して読み込んでしまえば、メニュー変更時に修正するファイルは、外部ファイル化したファイルだけということになります。実際は、もうすこし複雑ですが、WordPressのindex.phpが一枚絵でない基本的な理由は「同じ記述を繰り返ししないため」です。 このように、Woredpressでは、いろんなところからいろんなファイルを読み込んでつなぎあわせた結果がHTMLとして育成されます。どのように読み込まれているのかを知りたいのであれば、PHP・WordPressの文法を学んでみてください。
★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) でのチェック結果は？ p.クラス名 { 　 border-bottom:solid 1px #色; font-weight:bold; font-size:22px; } 　もし、これが本当なら全角空白文字があるから・・ 　半角と全角の空白の区別ができるテキストエディタを使うと良いかと・・ テキストエディタ EmEditor - EmEditor Free ( http://jp.emeditor.com/modules/download2/rewrite … ) 　とか・・
　こんなところで聞くより、まず仕様書を読む癖をつけましょう。そうしないと、本当に必要な情報を得るのは難しいです。 ★REC-CSS2 邦訳 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　→8.3 マージンのプロパティ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　→8.4 パディングのプロパティ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　→10. 視覚整形モデル詳細 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　マージンは負の値を取れますが制限がある。パディングは負の値は取れない 　仕様書を読んで、どうしてもわからないところがあったり、納得できないときに、それについて聞かれるとピンポイントで求めている答えが得られます。そうしないと、誤った情報を聞いてそのままになることもあります。 　なお、上記仕様書はCSS2ですが、現在ウェブ標準と認知されているものはCSS2.1で、マージンプロパティについては、一部誤解を招く表現や、不正確なものがありましたが改訂されています。ただ、邦訳の良いものを知りません。
スマートフォンだろうがPC用ブラウザだろうが基本的に同じ。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書が、ブラウザやプラットフォームの違いを超えてうまく働くべきであるということは、多くが認めるところである。 ・・・【中略】・・・なぜならただ1種類の文書しか作る必要がなくなるからだ。 ・・・【中略】・・・ 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　わざわざ、スマホ用のページを作ることはありませんが・・・ （１）バー部分は常に横１００％で表示される。ベタ一色ではなく、添付のようにグラデーションをかける。 　html,body{margin:0;padding:0} 　div.nav ul,div.nav ul li{display:block;list-style:none;margin:0;padding:0;} 　div.nav ul li{background-image:url();line-height:20px;position:relative;} （２）バーのタイトルの頭にアイコン画像を表示させる 　div.nav ul li:before{content:url();} 　div.nav ul li:after{content:url:position:absolute;right:0;} （３）開閉によって、右端の矢印アイコンも切り替わる 　div.nav ul li ul{display:none;} 　div.nav ul li:hover:after,div.nav ul li:focus:after{content:url();} 　div.nav ul li:hover ul,div.nav ul li:focus ul{display:block;} 　 （４）隠れている要素は、テキストだったり画像だったり、コンテンツによって色々 　で良いかと・・それぞれのセレクタ・プロパティの意味は ★5. セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ★9. 視覚整形モデル ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ★10. 視覚整形モデル詳細 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ★12. 生成内容、自動番号振り、リスト ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　に詳しいので省きます。 PC用と通常のブラウザのスタイルシートは ★[CSS]Media Queries（メディア クエリ）を使用したデバイスごとの指定方法のまとめ | コリス ( http://coliss.com/articles/build-websites/operat … ) 　などを参考にする。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから もし【相互運用性確保の】努力が成されなければ、Webは互換性のないフォーマット毎に分け隔てられた世界に分割され、すべての関係者にとっての商業的可能性が減少することとなるであろう、大きなリスクを負うこととなる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　その先のリンク先はともかく・・すくなくとも、トップページ(サイトのホームページ)に関しては、複数作成するのは無駄です。
＞上記CSSの内容ですが、CSSの方もバージョンの宣言等をしないといけないのでしょうか？ 　必要ありません。スタイルシートはブラウザは可能なものから適時導入して良いことになっています。これは、HTMLとは少し違います。HTML5の文書宣言と同じと考えて良いでしょう。
ケースバイケースなのでどちらがよいというものではないと思います。ただ、汎用性が高いのはリキッドですし、今のWeb制作の流れからいっても、リキッドレイアウトが主流になっていると思います。 ケースバイケースと言ったのは、そのサイトのユーザーがどういう種類なのかによるということです。一般向けサイトなのか、若者を対象にしているとか、ある程度PC操作に慣れている人が読むような内容なのか、とか。 たとえば、若者を対象にした一般向けコンテンツの場合、スマフォやタブレットPCからの閲覧割合も増えると思うので、その場合は、リキッドレイアウトの方が、ユーザーは利用しやすいと思います。逆に、PCのみで閲覧できればよいというのであれば、一般的な最小モニタサイズ(1024程度かな)を最大幅として、ソリッドレイアウトすれば十分かもしれません。
ひょっとしてローカルではWindowsでは？？？ お馬鹿なWindowsは大文字と小文字の区別ができませんから・・ image01.JPGとimage01.jpgの区別ができない。image01.jpgというファイル名でもimage01.JPGで利用できたりする。 　ところが他のＯＳは、きちんと区別しますからimage01.JPGとimage01.jpgは無論、IMG01.Jpgimage01.JPgもすべて異なるファイルとして認識します。 　異なるファイルを指し示しているだけではないかと・・
　背景画像の基準点はあくまで繰り返しの基準です。これはCSS3のbackground-originについても同様です。background-originでは、出発の基準をborderの内側にするか、paddingの内側にするか、内容(抱合ブロック)の位置にするかを指定するだけで、当然上下・左右に繰り返されます。 　CSSスプライトの中央寄せ　（CSS） - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7397345.html ) 　にも書きましたが、背景画像はあくまで特定の要素の背景ですから、背景が途中から出現することは考えられません。言い換えれば、背景を指定したい要素のマージンをとればよいはずです。 　たとえば、HTMLが文書構造をきちんと示すもの(HTMLは本来文書構造を記述するもの--デザインを指定するものじゃない)なので、たとえばHTMLが下記のようなものだとすると <body> 　<header> 　　文書のヘッダ(タイトルや要約)など 　</header> 　<section> 　　文書の本文 　</section> 　<footer> 　　文書のフッタ(文書情報など) 　</footer> </body> [HTML4だと] <body> 　<div class="header"> 　　文書のヘッダ(タイトルや要約)など 　</div> 　<div class="section"> 　　文書の本文 　</div> 　<div class="footer"> 　　文書のフッタ(文書情報など) 　</div> </body> headr部分に195pxとりたいとしたら、section以降に背景画像を指定する(フッタにも連続させるならsection部分にpadding-bottomを取り、footerをrelativeで持ち上げる)とか、body全体に背景を指定してheaderにそれを覆い隠す背景を指定するなどになると思います。
質問の意味が不明なのですが、キャッシュと言うのは画像自体を保存して画像検索で検索結果に反映されるという意味ですか？ 　その意味なら、画像として使用しましょう。それが一番確実です。画像だけだと「テキストを画像に置き換えて表現する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」としてSEO的に問題です。必ず『画像、フォーム、アプレットを表示できないユーザエージェントのために、代替テキストを指定する。代替テキストの言語は、lang属性で指定する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』必要があります。すなわち <h1><img src="[URL]" width="[数字]" height="[数字]" alt="ページのタイトル" title="画像の詳しい説明"></h1> とマークアップすれば、画像として画像検索の対象になり、その結果に説明文も入りますし、検索エンジンにはaltの内容がページタイトルとして認識されます。(<head>内のtitleと一致しているほうが良い。) 　なお、SEOとは、「検索エンジン最適化」の意味で、ページが文書構造に従って正しくマークアップされていて、検索エンジンがページの内容を正確に把握できるようにすることです。結果的に検索エンジンは求められている内容がそのページに含まれていると判断して上位に表示してくれますが、それは結果であって、あくまで『ページが文書構造に従って正しくマークアップされてい』るかが、SEOです。 ★14.1 スタイルシートの概説 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　 　
今 working draft の level4 が使えれば簡単なんだけどね.... 参考URL：http://www.w3.org/TR/selectors4/#overview
「リンクに飛ばなくなって」これって第三者が見てわかります？ 実際のところ、どうなるの？ 404エラーとか、クリックできないとか、無反応とか色々あるでしょうに。 「階層リンク」と書かれているのだから <li><a href="../">トップページ</a></li> <li><a href="../houjin.html">●●</a></li> <li><a href="../tenpo.html">●●</a></li> こんな感じじゃないかな、階層が違うのでしょう。
他の方たちはCSSハックのことを説明していますが、対応しない場合があります。 そこでjavascriptを使用します <script> myBsr = navigator.appName; // getting browser name myAgent = navigator.userAgent; // infomation myTop = myAgent.indexOf("Opera",0); // OP if (myTop == -1){ // OP myTop = myAgent.indexOf("MSIE",0); // IE if (myTop == -1){ // IE myTop = myAgent.indexOf("Mozilla/",0); // NN if (myTop == -1){ // NN myVersion = ""; }else{ // NN myLast = myAgent.indexOf(" ",myTop); myVer = myAgent.substring(myTop+8,myLast); // NN myVersion = " Version " + myVer; } }else{ // IE myLast = myAgent.indexOf(";",myTop); myVer = myAgent.substring(myTop+5,myLast); // IE myVersion = " Version " + myVer; } }else{ // OP myBsr = "Opera"; myLast = myAgent.indexOf(" ",myTop+6); myVer = myAgent.substring(myTop+6,myLast); // OP myVersion = " Version " + myVer; } </script> をhead内に書きます、 後の処理は簡単です。 <script> if (myBsr == "Opera") { document.write("<link rel='stylesheet' type='text/css' href='オペラで使うスタイルのURL'>"); } if (myBsr == "Netscape") { document.write("<link rel='stylesheet' type='text/css' href='ファイアフォックスやサファリで使うスタイルのURL'>"); } if (myBsr == "Microsoft Internet Explorer") { document.write("<link rel='stylesheet' type='text/css' href='IEで使うスタイルのURL'>"); } </script> をheadかbodyに入れます。 これで使い分けることが出来ると思います
そもそも、classやidの目的は、まず 7.5.2 要素識別子: id属性とclass属性 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 7.5.4要素のグループ化: DIV要素とSPAN要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) を読んでください。 特に 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より の意味をしっかり理解してください。 　ここで、文書に構造を負荷するという意味は、HTML5の 『HTML5 では、文書をよりよく構造化するために、次の要素が新しく追加されました。 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』 　に書かれている内容を読むと、class名やidには、HTMLの要素だけでは足りない文書構造を示すために利用することが順当でしょう。すなわち <body> 　<div class="header"> 　　・・・文書のヘッダ・・・ 　</div> 　<div class="section"> 　　<div class="section"> 　　</div> 　　<div class="article"> 　　　<div class="header"> 　　　</div> 　　　<div class="section"> 　　　</div> 　　</div> 　</div> 　</div class="footer"> 　</div> </body> 　のように使うことが想定されていることが想像できると思います。 　一方スタイルシートは、文書構造を元に書いていきますから、 div.section{margin-left:0.95em;}とすれば、文書が節→章→項のような構成でしたら、文字が5%ずつ小さくなっていきますね。・・・わかりにくいですが、文書構造を示すためには、class名のほうが便利が良い--HTML5においてもheader,section,footer,figure,article,aside,memo・・などはひとつの文書に何度でも登場する可能性がある=HTML4にも存在した他の要素--p,hn,strongなどと同じです。それは、idが一度しか存在し得ない事と根本的に異なります。 　また、idはa要素のname属性と同様に文書にとって一意ですから、主にページ内アンカーやjavascriptのターゲットとして利用しますから、一箇所しか指定できませんが、それ以上に詳細度がb=1と高いため、class名での指定(詳細度C=1)で上書きしにくくなります。 　他にも様々に理由がありますが、端的に言うと「HTMLは文書構造をマークアップするもの、スタイルシートは文書のプレゼンテーションを指定するもの」ですから、HTMLには文書構造を示すためにclass名で補完されていて、idはターゲットとして書かれているはずです。それを利用してスタイルシートを記述していく。言い換えればスタイルシートのためにidやclass名を書くことはない。 　それが、セレクタにclass名を使う一番の理由かもしれません。 　具体的には、 div.section div.note{font-size:0.9em;color:red;} と書かれていれば、本文中のノート(注意書き)は赤字だと、HTML見なくても簡単に理解できますから後での修正も楽です。 div.header div.nav{position:absolute;top:100px;left:10px;width:200px;} div.footer div.nav ul{position:absolute;top:0;left:0;width:100%;} div.footer div.nav ul li{float:left;} div.nav ul{display:block;list-style:none;margin:0;padding:0;text-align:center;} の区別も容易につきますよね。 　私もスタイルシートでidを利用することは、まったくと言ってよいほどありません。
　レイヤーは、NetscapeNavigator4用HTML以外、HTML4.01を含め文法上は存在しません。したがって、すべてのブラウザは対応していないと考えて良いでしょう。 　そもそも、HTMLにプレゼンテーション用の要素や属性を含めること自体、HTML4.01以降否定され続けてきました。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 推奨しない要素・属性とは、新しい枠組みができたことによって、陳腐化したものを指す。推奨しない要素は、リファレンスマニュアルの各所で定義し、推奨しないことを明記する。推奨しない要素は、HTMLの将来のバージョンでは廃止になる可能性がある。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Conformance: requirements and recommendations (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　レイヤーのようなプレゼンテーションに関わる部分は、すべてスタイルシートで行います。すなわち、positionプロパティとz-indexプロパティで自在に一屋順番を重ね合わせることになります。 ウェブ標準のHTML4.01strict+CSS2.1です。 タブは＿に置換してあります。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.section{z-index:0;background-color:silver;width:80%;margin:0 auto;position:relative;height:500px;} div.section div{z-index:3;background-color:red;width:60%;height:150px;margin:0 auto;position:absolute;top:100px;left:50px;} div.section div+div{background-color:green;top:150px;left:100px;z-index:2;} div.section div+div+div{background-color:yellow;top:200px;left:150px;z-index:4;} div.section div+div+div+div{background-color:aqua;top:250px;left:200px;z-index:6;} div.section div+div+div+div+div{background-color:lime;top:300px;left:250px;z-index:3} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>サンプル</h1> ＿</div> ＿<div class="section"> ＿＿<h2>見出し</h2> ＿＿<p>これが一番下</p> ＿＿<div> ＿＿＿<h2>図１(赤)</h2> ＿＿</div> ＿＿<div> ＿＿＿<h2>図２(緑)</h2> ＿＿</div> ＿＿<div> ＿＿＿<h2>図３(黄色)</h2> ＿＿</div> ＿＿<div> ＿＿＿<h2>図４(水色)</h2> ＿＿</div> ＿＿<div> ＿＿＿<h2>図５(ライム)</h2> ＿＿</div> ＿</div> </body> </html>
＞検索してみても使い方ぐらいしかヒットしてくれません ほんまでっか？？？？ そんなことはないだろう。経験不足です。 http://search.yahoo.co.jp/search?b=1&n=10&ei=UTF … などのリストから http://www.minc.ne.jp/~konda/web_resoce/js/behav … http://msdn.microsoft.com/ja-jp/library/ms532146(v=vs.85).aspx なんてものにぶち当たる。そこからの抜粋 「Microsoft® Internet Explorer 5 では、スクリプトの開発者が HTML Components (HTC) または Windows Scripting Components (WSC) を使って DHTML Behaviors を実装することができます。」 て、ことはマイクロソフトの方言で　「HTML Components」の略である事がわかる。で、述語が DHTML Behaviors て、ことで、さらにぐぐってみる。 http://search.yahoo.co.jp/search?p=%22DHTML+Beha … なんてやってはだめ http://search.yahoo.co.jp/search?p=%22DHTML%E3%8 … でまずＤＨＴＭｌとは何者なのか把握しよう。さらに http://search.yahoo.co.jp/search?p=HTML%20%22Beh … なんてことにするのがポイント。これでマイクロソフトが造語した DHTML Behaviorsとは何か、おおよそわかるはずだ。 http://itpro.nikkeibp.co.jp/word/page/10002130/ が的を得て端的に説明しているかな？ そうビヘイビアとは、現在のＨＴＭＬ５で達成している、ＤＯＭとしてＨＴＭＬオブジェクト及び、その拡張オブジェクトを、クライアントで動的に動作せせる事が可能になる仕組みの事をさしている。 これらは、多分にＸＭＬ的要素を使用している。Windowsクライアントソフトで、ダイナミックにＡＰＩを組み込んでゆけるのが、ＤＬＬファイル。それと同じようなものがＨＴＣファイルと言う事。 ＪａｖａＳｃｒｉｐｔを動的にでも静的にでも<ＳＣＲＩＰＴ>タグのＳＲＣで呼び出しますね。通常、拡張子がＪＳ　となっている。それのビエイビア用が　拡張子、ＨＴＣファイルの意味です。 当然ＩＥでしか通用しないし、、ＡＳＰ、ＷＳＨ、ＪＳ，ＶＢＳ、ＷＳＦなどから（Ｃ＃、ＶＢ系、も使えたかな？）呼び出し可能です。 つまり、マイクロソフトにおんぶに抱っこのシステム上でしか意味がないものです。 ただ、マイクロソフトのサイトでは多用しています。特にＡＳＰ.NETなどには有効に働いていますね。 JavaScript だと、JQuery.js がフレームワーク（？？？　広い意味で）として有名ですが、JScript, VBScript, ASP, JScriptCなどからは JQuery.htc なんてことになります。わかっていただけたでしょうか？
　HTMLのDOCTYPEをきちんと書き、ブラウザが標準モードで動作するようにすれば良いはずです。 　古いIEは、巾の解釈が独特でボーダー辺までをサイズとしてしまうからです。 　ブラウザが標準モードで動作させる方法は、DOCTYPEスイッチ－HTMLの基本 ( http://www.htmq.com/htmlkihon/302.shtml ) 　などを参考にしてください。 　いまどき、transitinalを使うことは勧めません。(HTML4.01の勧告--1999年以降非推奨なので)---strictだと、ほとんど変更することなくHTML5に移行できますしね。 　paddinの内側までがコンテナブロックの巾だとすると、縦に並べるブロックのパディングが異なると、ボーダーの外側までのサイズが変わってしまいますから、それを考慮してデザインしなければなりません。すなわち内部に段落<p>を含め、ブロック要素を内包するブロックにはpaddingを設定せず、内部のブロックのmarginで調整すると決めて置けば楽です。 サンプル--HTML4.01strictです。header,section,footerは、そのままHTML5の要素になります。 タブは＿に置換してあるので戻すこと。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- p{margin:0;line-height:1.4em;text-indent:1em;} div.header,div.section,div.footer{width: 954px;margin:0 auto;} div.header{background-color: yellow;} div.section{background-color: aqua;position:relative;} div.section h2,div.section div.section{margin-left:210px;width:auto;} div.section div.section p{margin:0 1em;} div.section div.section{position:static;background-color:silver;} div.footer{background-color: #BFCFFF;} h1,h2,h3{margin:0 3px;line-height:1.6em;} div.section div.tableContent{position:absolute;top:0;width:200px;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿</div> ＿<div class="section"> ＿＿<h2>記事見出し</h2> ＿＿<div class="section" id="SECTION1"> ＿＿＿<h3>見出し</h3> ＿＿＿<p>CSSでは、コンテナブロックのサイズは、マージン、ボーダー巾、パディングを引いたものがサイズです。古いIEでは、ボーダー辺の内側までをサイズとするためパディングを設定するとサイズが変わってしまいます。</p> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿</div> ＿＿<div class="section" id="SECTION2"> ＿＿＿<h3>見出し</h3> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿＿<p>記事</p> ＿＿</div> ＿＿<div class="tableContent"> ＿＿＿<h3>目次</h3> ＿＿＿<ul> ＿＿＿＿<li><a href="#SECTION1">一章</a></li> ＿＿＿＿<li><a href="#SECTION2">ニ章</a></li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿</div> </body> </html>
　HTMLさえ、ちゃんとしていたら迷うことないと思いますが？？？ 　スプライトを使うということは、背景画像ですから、たとえば、本文(section)内のナビゲーション(nav)の背景に使用するのでしたら、HTMLは <div class="section"> 　<div class="nav"> 　　<ul> 　　　<li><a href=""></a></li> ・・・以下省略 でしたら、スタイルシートは div.section{width:640px;margin:0 auto;} div.section div nav ul,div.section div nav ul li{display:block;list-stylr:none;margin:0;padding:0;text-align:center;line-height:1.8em;} div.section div nav ul{width:600px;} div.section div nav ul li{width:100%;height:1.8em;position:relative;} div.section div nav ul li+li{margin-top:5px;} div.section div.nav ul li a{display:block;width:100%;height:100%;background:url() no-repeat 0 -100px;} div.section div.nav ul li a:hover{background-position:0 -150px; div.section div nav ul li+li a{background-position:0 -200px;} とか・・・・
#aaa #test1 li a と言う書き方は通常はしません。HTML自体、そんなidを乱発する必要はありません。 　質問の意味がわかりません。 ＞1行だとpaddingで制御した結果、センタリングされるのですが、2行以上になる1行を基準にした位置から下に配置されてしまいます。 　センタリングとは左右の中央と言う意味です。しかし、質問文の中にはvertical-aglinと言うプロパティがでてきますが、vertical-aglinは縦方向の配置を指定します。 　なお、table-cell以外に、縦方向を制御する方法はCSS3にもありません。
HTMLがどうであれ、同じようにプレゼンテーションできますので、サンプルを示しておきます。 　言い換えれば、文書構造とプレゼンテーションを切り離すことで、好きなようにデザインできるし、逆にプレゼンテーションが同じでもHTMLはまったく異なっていてもよいということ。要はHTMLを作成するときプレゼンテーションは考える必要がないということです。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.section div.nav{width:480px;margin:0 auto;} div.section div.nav ul,div.section div.nav ul li{dispaly:block;list-style:none;margin:0;padding:0;} div.section div.nav ul li{width:100%;height:60px;position:relative;font-weight:bold;font-size:1.1em;background-color:aqua;z-index:0;margin-top:5px;} div.section div.nav ul li a{display:block;text-indent:70px;width:auto;height:100%;z-index:10;line-height:20px;} div.section div.nav ul li ul{z-index:-5;position:absolute;top:2px;left:2px;} div.section div.nav ul li ul li{font-size:0.7em;font-weight:normal;width:420px;height:auto;margin-top:0;} div.section div.nav ul li ul li img{float:left;margin-right:5px;} div.section div.nav ul li ul li+li{margin-top:24px;z-index:-1;background-color:silver} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>サンプル</h1> ＿</div> ＿<div class="section"> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li><a href="./cooking">男の料理</a> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li><img src="./image/a-1.gif" width="60" height="50" alt="肉じゃが"></li> ＿＿＿＿＿＿<li>男子厨房に入らず・・とは言っても、アウトドアでは腕を振るうことも・・</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li><a href="./camp">キャンプ</a> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li><img src="./image/a-2.gif" width="60" height="50" alt="愛車"></li> ＿＿＿＿＿＿<li>トータルすると、すでに１００泊を超えてしまったキャンプの記録</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li><a href="./dog">犬</a> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li><img src="./image/a-3.gif" width="60" height="50" alt="シェリー"></li> ＿＿＿＿＿＿<li>大事な家族の一員である我が家のペットのこと</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="footer"> ＿</div> </body> </html>
ごめん。1行目間違えた。 誤：cssソース側の.clearbothを「.top_navi」にすべて変える。でOK 正：cssソース側の.clearfixを「.top_navi」にすべて変える。でOK
私の場合は、きちんと反映していますが・・・ Firex11.0 + Firebug1.9.1
>落ち着いて確認する、などの精神論？以外の方法を伝授していただけると助かります。 一言で言えば、そんな方法はありません。 たとえば。 電話にて「A.htmlからB.htmlに「地図」というラベルでリンクしてください」 HTML作成 「 <a href="C.html">地図</a>」 コンピューターの文法チェッカーは、電話で聞いた内容を知ることはできませんから、このミスを機械的に見つけることは無理です。 紙上でサイト構成図を作っていても、コンピューターが判断できないのは同様です。 --------- 人力チェックをサポートするツールや方法はいくつかあります。 ユーザビリティーに「内容がわかるURL（パス名、ファイル名）にする」というのがあります。 最近はステータス欄がなかったり、URL欄を隠すブラウザとかもあったりしてURLとコンテンツの関連性はほとんどなくなってきていますし、 ショートURLを使えばリンク先に何が書かれているか、全くわかりませんけどね。 ですが、製作中はURLから内容を判断できるように、わかりやすいファイル名を付けておいた方が楽だと思います。 上記なら、B.htmlではなくmap.htmlとしておけば、「地図」から『地図』にリンクしていないことが一目で分かります。 そうすれば、B.htmlの内容が何か、C.htmlの内容が何かというのを覚える必要もありません。 -------- Operaのサイドパネルの「リンク」を使えば、ページのどこに<a>が表示されているかを探す手間を省けます。 No.1さんが紹介されているツールも、これと同じタイプではないでしょうか。 ホームページビルダーにもサイト構成図を表示する機能が有ったと思います。 http://itpro.nikkeibp.co.jp/article/COLUMN/20070 … 所詮はHTMLを解析して表示しているにすぎません。 設計書に「グーグルマップ」と書いてあるのに「マップ」と読み間違えた、というような「設計書と同じかどうかの確認」はすべて人力、『落ち着いて確認する』が唯一の方法です。 デバッグ手法の本などを読まれてみるのもいいと思います。（C系、Java、VB系言語が多いですが、手法そのものは言語間の違いはほとんど有りません。） 文法エラーを機械的に（ソフトウェアツールでチェックして）なくした後、最終的には人力です。
＞上記のソースに何か追加や修正をしてできるものがあれば、 　不可能です。<menu>は、典型的な非推奨要素で、使うべきではありませんし、また決して<ul>と同居はしません。<menu>内には<ul>は入れられません!!!入るのは<li>のみです。本来<menu>は、内容の<li>をひとつの段落--改行なし---でレンダリングされるように計画されましたが、実際にはどのブラウザも<ul>と同じようにレンダリングします。 ＞current時のボタン表示になってしまいます。 　currentを示すclass名がついていないので、いずれにしてもそのままのHTMLでは無理です。 　#は一意セレクタと呼ばれるセレクタでひとつの文書内に一箇所しか存在し得ないし、詳細度も高いので、子孫セレクタとして記述する必要は基本的にありません。 　以前も回答しましたが、HTMLは <div class="nav"><!-- ナビゲーションブロック --> 　<ul><!-- 順不同リストA --> 　　<li><a href=""></a><!-- 項目a --> 　　　<ul><!-- 順不同リストB --> 　　　　<li><!-- 項目b --><a href=""></a></li> 　　　　<li class="current"><!-- 項目c --><a href=""></a></li> 　　　　<li><a href=""></a><!-- 項目d --></li> 　　　</ul> 　　</li> 　　<li><a href=""></a><!-- 項目e --> 　　　<ul><!-- 順不同リストC --> 　　　　<li><a href=""></a><!-- 項目f --></li> 　　　　<li><a href=""></a><!-- 項目g --></li> 　　　　<li><a href=""></a><!-- 項目h --></li> 　　　</ul> 　　</li> 　</ul> </div> 　などになります。子供セレクタ>を使うと簡単なのですが、子供セレクタに対応していないIE6など古いブラウザを考えると、子孫セレクタで区別することになります。 　ここで、 div.nav ul,div.nav ul li{display:block;list-style:none;margin:0;padding:0;line-height:30px;text-align:center;} /* すべての ul,liタイプをpadding,marginのないblockにしておきます。あわせてline-height,text-alignを指定しておく */ /* line-height,text-alignは継承されるプロパティ */ div.nav ul{width:100%;position:relative;} /* div.nav の子孫であるul--すなわち 順不同リストA,B,Cすべてに適用されます。詳細度[0,0,1,,]*/ /* div.nav>ul--子供セレクタを使うと順不同リストAのみ適用される --> /* relativeは、その子孫要素の巾の基準とするため */ div.nav ul li{width:20%;float:left;position:relative;} /* リストを横並びさせる 詳細度[0,0,1,2] */ /* この時点では、項目a-hすべてに適用される */ div.nav ul li a{display:block;width:100%;height:100%;background-image:url();} /* a要素をblockに変更してrelativeされている親要素のサイズを基準にheightとwidthを指定 */ div.nav ul li ul li{width:100%;float:none;} /* 二階層目のliについての設定 詳細度が[0,0,1,5]なので上書きされる */ /* この設定は項目b-d,f-gにのみ適用される */ div.nav ul li ul li a{background-position:0 -40px;} div.nav ul li ul{display:none;} /* 二階層目を消す 詳細度[0,0,1,4] */ div.nav ul li:hover ul{display:block;} /* 二階層目を見せる。擬似クラスを使っているので詳細度[0,0,2,4]で上書きされる */ div.nav ul li ul li.current a{} /* 詳細度[0,0,2,6] */ 　このように、より詳しく記述された要素--より高い詳細度での指定が優先されていきます。 */ 　HTMLもCSSも、ここで説明するにはあまりにも多すぎますが、いずれにしろ、仕様書には正確で的確な記述があります。必ず一度は目を通しておきましょう。前回の回答でも、きちんと説明してあったはずです。 ★HTML 4.01 Specification (ja) ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★REC-CSS2 邦訳 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　→5. セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　→6. 値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　なお、詳細度については現行のCSS2.1では変更になっています。 　　→6.4.3 Calculating a selector's specificity ( http://www.w3.org/TR/CSS2/cascade.html#specificity )
そもそも、ウェブページを訪問するのは最新のブラウザやスマホだけじゃない・・・HTMLを作成する上での基本中の基本は・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［2.2.1 HTMLの略歴 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　ここにあげているものだけじゃなく、検索エンジンと言うユーザーも忘れてはならない。 　そのためには、HTMLをきちんと文書構造に従って記述し、スタイルシートでユーザーエージェントごとにプレゼンテーションを変えることです。javascriptだと、javascriptを使えない--あるいは、Javascriptを停止しているユーザーには無効です。基本は、HTMLのheader内に記述されたmediatypeでのスタイルシート適用の振り分けです。もし他のスタイルシートでの表示もさせたければ、それは代替スタイルシートで用意しておけば良いです。 　基本は ★14.3 外部スタイルシート ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　で、 <link rel="stylesheet" type="text/css" media="screen" href="./styleSheet/standard.css"> <link rel="Alternate StyleSheet" type="text/css" media="screen,projection,tv" href="/styleSheet/default.css" title="汎用"> <link rel="styleSheet" type="text/css" media="print,handheld" href="./styleSheet/print.css"> とかですが、スマホなら <link media="only screen and (max-device-width:480px)" href="m.css" type="text/css" rel="stylesheet" /> <link media="screen and (min-device-width:481px)" href="pc.css" type="text/css" rel="stylesheet" /> <!--[if IE]> <link href="pc.css" rel="stylesheet" type="text/css" /> <![endif]--> とかがよく使われる方法ですね。 　高度な方法として、cookieとCGIを使う下記のような方法もあります。下記サイトは、スマートフォン登場前のものですが、手法的には同じです。 ★コンテンツ ( http://hpcgi1.nifty.com/Iruka/contents.html ) 　ブラウザの表示メニューのスタイルシートで代替スタイルシートを選択することも、ページ内のボタンで変更することも出来ます。javascriptは使用されていません。 　フォームを使って同じページを読んでいますが、そのときにどのスタイルを選択したかのデータが送られ、HTML自体のスタイルシートへのリンクを書き換えています。
「.sf-menu li:hover ul」の意味は、 .sf-menuの中のli要素に触れた時の中のul要素 です。 つまり <div class="sf-menu"> <ul> <li> ← これに触れた時の <ul></ul> ←これのスタイル　を指定します。 </li> </ul> </div>
スマートフォンサイト側に RewriteEngine on RewriteCond %{HTTP_USER_AGENT} !(iPod|iPhone|iPad|Android|Windows\ Phone) RewriteRule ^(.*)$ http://example.com/ [R] PCサイト側に RewriteEngine on RewriteCond %{HTTP_USER_AGENT} (iPod|iPhone|iPad|Android|Windows\ Phone) RewriteRule ^(.*)$ http://sp.example.com/ [R] で良いのではないでしょうか。 ※参考 http://html-five.jp/206/ http://html-five.jp/195/
動画を隠す方法というのがどういうことか分かりませんが、 埋め込みコードの一部を編集することにより自動再生やループが指定可能です。 自動再生（autoplay=1を指定） <iframe width="560" height="315" src="http://www.youtube.com/embed/動画ID?autoplay=1" frameborder="0" allowfullscreen></iframe> ループ（loop=1を指定） <iframe width="560" height="315" src="http://www.youtube.com/embed/動画ID?loop=1" frameborder="0" allowfullscreen></iframe> 操作バーを自動で隠す（autohide=1を指定） <iframe width="560" height="315" src="http://www.youtube.com/embed/動画ID?autohide=1" frameborder="0" allowfullscreen></iframe> 複数指定の例 （自動再生・ループ） <iframe width="560" height="315" src="http://www.youtube.com/embed/動画ID?autoplay=1&loop=1" frameborder="0" allowfullscreen></iframe> サンプル <iframe width="420" height="315" src="http://www.youtube.com/embed/QH2-TGUlwu4?autopla … frameborder="0" allowfullscreen></iframe>
clear:leftだと左だけ clear:rightだと右だけ clear:bothだと両方とも です。 したがって、3つ目のボックスでfloatを解除したいなら、clear:bothとします。
スタイルシート自体の記述は間違っていないようですね。 テンプレートを編集する際、スタイルシートの一番下に追加してみてください。 また、次のようにすれば無理やり適用させることもできます。 .all_entries_main a { color: green !important; font-size: 12px !important; } .all_entries_main a:hover { background-color: #dddddd !important; } このように、各プロパティの値の後ろに「 !important」を付け加えます。
　CSS(カスケーディングスタイルシート)のもっとも特長は、カスケーディングですが多くのサイトの説明は、カスケーディングではなく、プロパティの説明ばかりですね。CSSの仕様書には、セレクタに続いて「値の割り当て、カスケード処理、継承」が記述されていて、媒体系やプロパティの説明はその後・・・。 スタイルシートの文法は、 セレクタ{宣言ブロック}となっていますが、本当に大事なのはセレクタ部分です。たとえば div.section p{}とセレクタが書かれていれば、 div　　 -----タイプセレクタ(HTMLで言うところの要素) 詳細度[0,0,0,1] .　　　 -----クラスセレクタ(HTMLのclassの値が半角スペースで区切られたリストになっている場合そのうちのひとつ) 詳細度[ 0,0,1,0 ] section -----そのクラス名 　　　　------半角スペース 子孫セレクタ　出発点であるdiv.sectionの子々孫々のと言う意味 p　　　 -----タイプセレクタ 詳細度[0,0,0,1] 　合計で、詳細度は　[0,0,1,2]ですね。 　ここの子孫セレクタを示す半角スペースのように、いくつかの接続詞がありますが、 + 隣接セレクタ　あるセレクタの次に登場するセレクタ > 子供セレクタ　あるセレクタの直接の子供(子孫と異なり直接の子供) [] 属性セレクタ #　一意セレクタ :　擬似要素と擬似クラス 　　:first-child'擬似クラス　　　　　　　　　　　　 詳細度[0,0,1,0] 　　リンクに関する擬似クラス: ':link'、':visited'　 詳細度[0,0,1,0] 　　動的な擬似クラス: ':hover'、':active'、':focus　詳細度[0,0,1,0] 　　言語に関する擬似クラス: ':lang'　　　　　　　　 詳細度[0,0,1,0] 　　擬似要素　　　　　　　　　　　　　　　　　　　　詳細度[0,0,0,1] body>h2+p{ 　bodyの子供であるh2の次のp ul li+li+li{ 　ulの子孫であるliのうち、その前にふたつ以上liが隣接してある場合 　プロパティを覚えるより先に、このセレクタとカスケーディング・継承をしっかり理解しておきましょう。無駄なHTMLを書く必要がなくなります。 ★REC-CSS2 邦訳 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　なお、現在ウェブ標準とされているものは、CSS2.1ですが、いくつか変更があります。特に詳細度やカスケーディングについては重要な変更があります。しかし、良い邦訳を知りません。 ★Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification ( http://www.w3.org/TR/CSS2/ ) 　詳細度の計算で、HTML本体に書かれているスタイル属性の詳細度が[1,0,0,0]になりました。 　→変更点(CSS2.1 Appendix C 邦訳) ( http://www.d-toybox.com/spec/CSS2.1/appendixC/ ) 　とりあえず面倒くさくても、仕様書を一通り目を通しておきましょう。色々検索して探し出すより正確で正しい知識が得られます。
その部分は「CSS3 の」ってわけでもないらしいよ. 参考URL：http://www.w3.org/TR/CSS2/syndata.html#vendor-ke …
画像ではないですよ。 変更するには、HTML、CSS、PHPを、あとちょっとだけ頑張って勉強してみてください。
<a href="javascript:void(0);"><span class="hoge"><img src="hoge.jpg"></span></a> はHTML4.01的には間違っていません。a要素にはインライン要素しか入りませんから・・ 「<!ELEMENT A - - (%inline;)* -(A) -- anchor -->」--12.2 A要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　一方、インライン要素は、ブロックではありませんからblockに指定可能なプロパティは設定できませんから、スタイルシートでブロックに変更する必要があります。 <p class="hoge"><a href="javascript:void(0);"><img src="hoge.jpg"></a></p> ・・・a要素は必ずブロック要素内に書きます・・・そのブロックにclass名をつけておけば良い。 スタイルシートは p.hoge{ text-align:center; line-height:80px; width:100%; /* static以外の直近の親コンテナブロックの巾を参照 */ } p.hoge a img{ background-color: #000; }
＞私はHTML+CSSはデザインを表現するものだと思っていました。 極めて多くの人が誤解しているでしょう。 本題からは外れますが・・・ 先刻回答した ★CSSでレイアウト - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7376273.html ) ★離れた場所にマウスオーバーで画像を変えたい。 - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7364249.html ) のHTMLとCSSのサンプルを、ぜひ試してみてください。 　HTML自体は、極めてシンプルで、ユーザーエージェントを問いません。HTMLがこう書かれていたら、どのようにもデザインできます。 　本題に戻りますが、現状では、「HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」を念頭において、とにかくHTML4.01strictを徹底的に「我が薬籠中のもの」にしておくこと。strictですよ。 『HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ・・・【中略】・・・推奨しない要素は、HTMLの将来のバージョンでは廃止になる可能性がある。』HTML4.01 4 適合条件: 必須事項と推奨事項 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )より 　そして、XHTML1.1,HTML5では廃止されました。
こんな感じでどうでしょう。 しかし、jQueryなどを使用したほうが楽にできそうですね。 画像のURLやCSS部分の高さ・幅などは後で調節してください。 <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"> <html> <head> <meta http-equiv="Content-Type" content="text/html; charset=shift_jis"> <title>mySite</title> <style> #triggers { float: left; } #triggers img { float: left; margin-right: 5px; } #disp { float: left; width: 300px; height: 180px; margin-left: 100px; border: solid 2px #555555; } </style> </head> <body> <div id="triggers"> <img src="img_sample01.png" onMouseOver="change('img_sample2_01.png')" onMouseOut="back()"> <img src="img_sample02.png" onMouseOver="change('img_sample2_02.png')" onMouseOut="back()"> <img src="img_sample03.png" onMouseOver="change('img_sample2_03.png')" onMouseOut="back()"> <img src="img_sample04.png" onMouseOver="change('img_sample2_04.png')" onMouseOut="back()"> <br clear="left"> </div> <div id="disp">ここに画像を表示</div> <br clear="left"> <script type="text/javascript"> var disp = document.getElementById('disp'); var text = disp.innerHTML; function change(tar){ disp.innerHTML = '<img src="'+tar+'">'; } function back(){ disp.innerHTML = text; } </script> </body> </html>
「べき」かどうかであれば、どちらでもいいです。 置いた方が使いやすくなるのであれば、置いた方がいいと思います。
その「プルダウンメニュー」とはスクリプトで実装されたものですか？それとも単にselectタグを使用したものでしょうか。 IE9での問題は分かりませんが、selectタグの場合size属性を2以上に設定するとリストになるようです。 <select name="example3" size="1"> <option value="サンプル1">選択肢のサンプル1</option> <option value="サンプル2">選択肢のサンプル2</option> </select> スクリプトで実装するのでしたら下記サイトを参考にすると良いのではないでしょうか。 http://allabout.co.jp/gm/gc/23911/
現在のスタイルシートへのリンク <link rel="stylesheet" type="text/css" href="main-left.css" *****陰省略 　 に、media="screen"を入れてscreenブラウザのみ適用させるようにして、別途 <link rel="stylesheet" type="text/css" media="print" href="print.css" title="印刷用"> 　を追加して、プリンター用のスタイルシートを作成しましょう。 　先刻、紹介した CSSでレイアウト - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7376273.html ) 　のHTML+CSSは印刷用のスタイルシートは用意されていませんが、印刷時はscreen用のスタイルシートが適用されないので、その影響を受けません。 ★14.2.4 出力メディア型 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★14.4.1 メディア依存のカスケード ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) など・・ 　印刷が想定されるページは印刷用のスタイルシートを用意すべきです。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　なお、ユーザーの立場でしたら、アドオンを使ってページをPDFなりにして印刷できます。 例) firefox + Pearl Crescent Page Saver Basic( https://addons.mozilla.jp/firefox/details/10367 )
#1です。 #1のfloatに関しては、親要素以上の幅では横に並ばないことを利用して配置したものです。従って、おっしゃるように、親要素の幅が子要素の横幅合計よりも大きい場合は、全てが横に並びます。 さて、レイアウトにおけるfloatとabsoluteは、マークアップ初心者の方にとって最初の障壁かと思います。ちょっと私的な思惑を書いてみます。 まず、floatとabsoluteで、どちらが優れているという話ではないので、その辺りは誤解のないようにされたほうがよいと思います。極端な話、テーブルレイアウトが絶対にダメ！というわけでもないです。テーブルレイアウトが必要なケースがごく限られているというだけです。実際の制作では、WEBの仕様書は制作の根幹とも言えますが、仕様書を厳守することが正義ではありません。制作がしやすくて、検索エンジンにフレンドリーで、ユーザーに使いやすいものをケースバイケースで選択していくことがゴールになるかと思います。 その上で、floatとabsoluteを考えてみると、「HTMLにまったく手を入れずにCSSだけでレイアウトを完全に操作する」という意味では、absoluteの1択かと思います。その意味ではfloatと比較してabsoluteの汎用性は高いです。しかし、「HTMLにまったく手を入れずにCSSだけでレイアウトを完全に操作する」は必ずしも理想ではありません。HTMLがシンプルになればなるほどCSSにはトリッキーな記述が必要になり、CSS自体のメンテナンスコストは上がります。つまり、ほんとにCSSのみで完全にレイアウト操作するよりも、ある程度HTMLの修正を見越したものの方が、トータルでは制作コストが安くなる場合も少なくありません。 つまり、floatが優れているとか、absoluteが最強という理解ではなく、それぞれの特徴を理解した上で、サイト全体の構成を見越し、その時々で最善のCSSの記述をするのが重要かと思います。 ちょっと質問の意図とはずれてしまいましたが。参考までに。
JavaScriptを使えば「クリックした場所」を取得できますから、 その場所に応じてページジャンプを行えば、クリッカブルマップを作ることはできます。 （<canvas>でも<img>でも、<div>や他の要素でも、タグの種類は問いません。） GoogleMapsのようなものを想像すればいいと思います。 クリックした場所の取得は「JavaScript 座標」で検索してみてください。 (x,y)がクリックした場所として、 たとえば、( x1<x && x<x2 && y1<y && y<y2 ) であれば、四角形(x1,y1) (x2,y2)の中をクリックしたと判断できます。 （この辺は中学か高校数学の問題です。） つまり、ブラウザがやっている作業を全部自分で作るということですから、 クリッカブルマップがダメな理由はわかりませんが、 手間を考えれば、全部の処理をブラウザに任せられるクリッカブルマップが一番早いです。
　それが意外と難しい。そんな「まどろっこしい事」をしたくないから本に飛びつく。とりあえず見栄えだけは手に入る。それは、「テンプレートをお借りして、タグサイトから気になるものをチョイスして、javascriptなどのプラグインは海外サイトから...」と同じですし、本もそう書かないと売れない。 　一方、やはり、こつこつ基礎から学ぶのもネットしかない・・・。本には無いでしょう。 　ご存知のとおりネットにある情報の大部分は、「テンプレートをお借りして、タグサイトから気になるものをチョイスして、...」であるのも事実ですが、それでも、探せば、ネット上にしっかりしたサイトはたくさんあります。 　現在、HTML5が勧告の一歩手前に来ていて、そう待たずに勧告となるでしょうが、それが現実に使えるようになるのは、またまだ時間がかかります。【いつもながら、大きなシェアもっているIE・・IE8以前のものが足を引っ張っている。】 　しかし、HTML5でHTML4.01で説明が足りなかった部分が加えられていることは、極めて重要です。それは、HTML4.01ですでに推奨されていた-----文書構造とプレゼンテーションの完全な分離です。HTML5では、HTML4.01で「非推奨」という「軟弱な言葉」で示されていた、プレゼンテーションを目的としたすべての要素、属性が廃止になっています。残ったものも文書構造を示すものに説明が変わります。 ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿ここから 著者 　・・・【中略】・・・ 　HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 　・・・【中略】・・・ 　推奨しない要素は、HTMLの将来のバージョンでは廃止になる可能性がある。 ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで、 4.1 定義( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )より 　「HTML4.01で説明が足りなかった部分」ですが、実はHTML4.01においても、 ＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで、 7.5.4要素のグループ化: DIV要素とSPAN要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )より と書かれていたとき、想定していたのは、 <div class="header"> 　ここはヘッダ </div> <div class="section"> 　ここは本文 　<div class="aside"> 　　ここは本文と関係ない記事 　</div> </div> <div class="footer"> 　ここはフッタ 　<div class="nav"> 　　ここはナビゲーション 　</div> </div> のような使い方を想定していたのですが、現実には文書構造とはまったく関係ないleft,wrapper・・ 　HTML5では、そのようなことを防ぐために <header> 　ここはヘッダ </header> <section> 　ここは本文 　<aside> 　　ここは本文と関係ない記事 　</aside> </section> <footer> 　ここはフッタ 　<nav> 　　ここはナビゲーション 　</nav> </footer> と書くことになります。 ★HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　以上を踏まえて ★HTML 4.01仕様書 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) を、最初から最後まで読んでおくこと。これがあなたが探している一番の教科書でしょう。 　プレゼンテーションから解き放たれたHTMLは、そのままではシンプルで、あなたの目にはシンプルすぎるでしょう。しかし、それは誤解で、 ＿＿＿＿＿＿＿＿＿＿＿＿＿＿ここから スタイルシートはこれらの問題を解決すると同時に、HTMLにおける制限されたプレゼンテーション機構に取ってかわる。スタイルシートでは、行間の設定やインデントの設定、テキスト色や背景色、フォントのサイズとスタイル、その他様々なプロパティの設定が簡単にできる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで 14.1 スタイルシートの概説 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )より 　HTMLでは不可能であったプレゼンテーションが可能になります。先日回答した <div class="nav"> 　<ul> 　　<li><a href=""></a></li> 　　<li><a href=""></a></li> 　　<li><a href=""></a></li> 　</ul> </div> という、文書構造だけを記述したもの（あなたでもこの程度なら書けるはず・・）でも、スタイルシートで劇的に表現力があがります。 ★離れた場所にマウスオーバーで画像を変えたい。 - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7364249.html ) 　このようにスタイルシートは、すばらしいですが、残念ながら書籍を読んでこのようなスタイルシートが書けるようにはならないでしょう。じゃ、私(還暦過ぎました)はどうやって身につけたか・・・。それもHTMLと同じように、仕様書です。 ★REC-CSS2 邦訳 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　(注)残念ながら、現在ウェブ標準と各ブラウザベンダーがみなしているのは、この改訂版のCSS2.1です。しかし、私もCSS2.1の良い邦訳は知りません。--変更点(CSS2.1 Appendix C 邦訳) ( http://www.d-toybox.com/spec/CSS2.1/appendixC/ )もしくは、原文(英語)の ★Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification ( http://www.w3.org/TR/CSS2/ ) を見ることになるでしょう。 　以上・・・です。javascriptに関しては、ブラウザごとの違いもありjQuery: The Write Less, Do More, JavaScript Library ( http://jquery.com/ )のような優れたライブラリを使うほうが現実的です。もちろん、簡単なものなら学んで置いてソンはありません。 1) イヌでもわかるJavaScript講座 ( http://www.red.oit-net.jp/tatsuya/java/index.htm ) 2) ５・６年生にもわかるやさしいJavaScript ( http://www.sky.sannet.ne.jp/masapine/java_top.html ) とか 　とにかく、紹介した仕様書を最初から通して読んでおくこと。そして必要なとき必要な項目を参照できるようになること。多分それが行き止まりの脇道に迷い込まずに、山を登れる一番の一番の早道でしょう。 　紹介したリンク先は必ず目を通してください。その前後にも大事なことがたくさんか枯れています。
>No.1 よくわかりませんが、CSSで処理したいなら CSSハックやコンディショナルコメントでIE9だけ調整すればいいと思います。
>No.1お礼 >PC用のjQueryの場合、作成用のソフトはないのでしょうか？ それがDreamweaverです。 jQueryはあくまでライブラリにすぎません。 http://www.amazon.co.jp/dp/B004OGTYLM/工作-キット/ http://www.amazon.co.jp/dp/B001VZHRYK/ユニバーサルプレート/ 電動のこぎりを買ったら家が造れるようになるわけではありません。
＞XHTML Transitional 　は、XHTML1.0ですね。XHTML1.0はHTML4.01を、そのままXMLの仕様に合わせて書き直したもので、基本的にHTML4.01とXHTML1.0は同じものです。 　１９９９年のHTML4.01の勧告以来・・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 著者 　・・・【中略】・・・ 　HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 HTML 4仕様が定める各DTDの詳細については バージョン情報の項を参照のこと。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Conformance: requirements and recommendations (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より と書かれていました。 　これに続く文章で、「ユーザーエージェントは古い仕様に対応しなければならないが・・」とも書かれています。 　それから、十数年・・・いまだにtransitinalは無いでしょう。 　そして、XHTML1.1--これにはtransitionalは無い---が発表された当時は、HTML4.01は最後のHTMLで、今後はすべて XHTMLになると言われていました。しかし、現実は、XHTML2.0の開発は中止され、HTML5になろうとしています。 　そのあたりの変遷は ★HTML5が持つ本当の意味 ( http://www.atmarkit.co.jp/news/200801/25/html.html ) 　を読んでください。 　HTML5の草案が2008年ですから、すでに５年経とうとしている。 以前、「ＨＴＭＬ5？ＨＴＭＬ4？ＸＴＨＭＬ？？ - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/6663486.html )」にも書きましたが、やはり、HTML4.01strictをきちんと身につけること。そのときに ★HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　の「新しい要素」などは、HTML4.01strictでも極めて有益な情報源となるでしょう。たとえば、 <body> 　<div class="header"> 　</div> 　<div class="section"> 　　<div class="section"> 　　</div> 　</div> 　<div class="footer"> 　</div> </body> 　と書くことなど・・・実は、HTML4.01でも明記されていました。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 --7.5.4要素のグループ化: DIV要素とSPAN要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　このことに、言及している書籍なんて見たこと無い。 　一度、HTMLを手がけたことがあるなら、難しくは無いでしょう。初心に帰って、仕様書をまず通読すること。必要なときいつでも参照できるようにしておくこと。作成したら ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) 　などでチェックして，指摘されたところを直していく。 　文書構造だけをHTMLで書くことを覚えたら、とてつもなく簡単になりますよ。昨日回答した「離れた場所にマウスオーバーで画像を変えたい。 - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7364249.html )」で示したHTMLなんて簡単なものです。
＞■■■■■ ＞□□□■■ ＞■□□□□ 　この様になるのは、最初の３つのheightが、高いからですね。 　それぞれのblockの高さを指定しなおすと良いかと・・ .ngg-gallery-thumbnail-box { float: left; height:200px; overflow:hidden; } とか・・・
画像の文字が表示されるのは content:url(); と書かれているのに画像が実在しないからです。実際に画像を入れると表示されないです。 なお、 display:block;を追加したほうが良いでしょう。 div.section div.nav ul li a:hover:after{ content:url(); position:absolute; left:0px;top:-170px; width:160px;height:120px; background-color:red; } 一部間違いがありました。 [訂正前] div.section div.nav ul li a:link{background-color:rgb(120,120,120);url();} div.section div.nav ul li a:visited{background-color:rgb(40,40,40);url();} div.section div.nav ul li a:hover, div.section div.nav ul li a:focus{background-color:rgb(200,200,200);url();} div.section div.nav ul li a:active{background-color:rgb(255,255,0);url();} [訂正後] div.section div.nav ul li a:link{background:rgb(120,120,120) url();} div.section div.nav ul li a:visited{background:rgb(40,40,40) url();} div.section div.nav ul li a:hover, div.section div.nav ul li a:focus{background:rgb(200,200,200) url();} div.section div.nav ul li a:active{background:rgb(255,255,0) url();} 　
> どのようにしてCSSを表示させるのですか 上のサイトの場合 まずソースを表示する <link rel="stylesheet" href="/css/default.css"> って書いてあるわね ブラウザのアドレスバーに入力するだけよ IE8以上なら開発者ツール（F12で表示される）を使えば もっと簡単に見えるけど
IE7への対応と隠された文字表示のためスタイルシートを少し変更 div.NumberList ul,div.d310 ul li{ display:block;list-style:none; margin:0;padding:0; } ul.NumberList{ line-height:20px; font-size:13px; width:310px; padding:0px; margin:20px 0px 0px; background:#f1f1f1; border-top:solid 1px #a9a394; } ul.NumberList li{padding-left:12px;margin:0px 10px;overflow:hidden;height:20px;} ul.NumberList li strong{margin-left:19px;} ul.NumberList li strong:hover{position:absolute;width:auto;background:#f1f1f1;}
質問の意味がわかりかねますが？？ 　示されたリンクは、画像がぽつんとあるだけで「このようなテーマみたいに全体の背景を見えるように」はなっていません。 　ガジェットとは何でしょう。ヘッダとフッタと並んでいますから、本文部分と言うことですか? 　HTML5で記述すると <body> 　<header> 　</header> 　<section><!-- この背景が白 --> 　</section> 　<footer> 　</footer> </body> だとしたら、<section>の背景指定をしなければ良いです。background関連のプロパティは継承しません。
ローカルとリモートにあるときの<doctype>が異なっているため、一方は互換モードで、一方は標準モードで動作している可能性があります。 ★DOCTYPEスイッチ - W3G Web用語集 ( http://w3g.jp/others/data/doctype_switching ) など 　本来、body,htmlはブロックでありながら、インライン要素のごとく振舞うときがあります。ルート要素に指定すると枠もサイズに含まれます。 　「右下に配置」の意味が、ウィンドウの右下なのか、ページの右下なのかわかりませんが、bodyの高さがどこにも指定されていないときはブラウザとモードによって位置が様々です。fixedを指定すると、ディスプレイの位置を参照します。
＞なにか良い方法はありませんか？ 動画そのものを「自分のサーバ」に置くしかありません。 Ustreamのサーバ上にある動画を埋め込んだ場合、Ustreamのサーバは「帯域制限」を行います。 帯域制限とは「ある１人の閲覧者に対して、ある程度の決まった速度ででしかデータを送り出さない」と言う物で、この制限があるおかげで、同時に多くの人が動画を閲覧出来ます。 送り出す量は「動画１本を閲覧するのに充分な量」ですが、２本以上を同時に読み込める量ではありません。 なので、Ustreamのサーバ上にある動画を閲覧する限りは、読み込み速度に上限（限界）があります。 この上限を回避するには「帯域制限の無い、自分のサーバ」を用意するしかありません。 もちろん「自分のサーバ」を置いた通信回線は「上りの回線速度に帯域制限の無い、高速通信回線」である必要があります。サーバに帯域制限が無くても、回線に帯域制限があったら元の木阿弥ですから。
IE9にて同様の現象を確認できず。環境により異なるってことですかね。
　ブログはCMS（Content Management System)のひとつで、日記に特化したものです。CMS自体は、単にフォームから入力されたデータをHTMLに変換する機能と、それをスタイルシートでプレゼンテーションするシステムです。 　詳しくは ★（Content Management System ( http://ja.wikipedia.org/wiki/%E3%82%B3%E3%83%B3% … ) 　HTMLもスタイルシートも、HTMLやCSSの知識があれば自由にカスタマイズできます。逆に、HTMLとCSSの知識に加えて、プログラムやデータベースの知識があれば自分で作成することも出来ます。プログラムにはPerl、PHPなど何でも使えるでしょう。 　結論から言うと、HTML,CSS,プログラムの知識があればまったく自由に変更できますが、そうでなければお仕着せのシステム・デザインをそのまま使うことになる。知識技能に合わせて、どこまで改造できるかが決まりますね。自分の得意なプログラム言語を使っているものを選択することもあるでしょう。 　PHP・・拡張子は気にしないこと。Windowsでしたら拡張子が大きな意味を持ちますが、他のOSやウェブの世界では拡張子なんてほとんど意味を持ちません。 　
＞タグ、ID、クラスは・・ 　クラスは、属性セレクタの一種でHTMLにしか使えません。 DOMが body 　div　　　　class="section"------1 　　span　　 class="note"---------2　 　　div　　　class="section main"-3 　　　div　　class="aside"--------4 　　　　div　　　　　　　 --------5 　　　div　　lang="en-US" --------6 の場合、 div[class] 　　属性にclass名を持つdiv *[title] 　　属性にtitleを持つすべての要素 div[class=note] 　　class属性の値がnoteであるdiv要素 div[class~=section] 　　classの値が半角スペースで区切られたリストになっている場合、そのリストのひとつにsectionの値を持つ要素にマッチ div[class|=en] 　　class属性の値がハイフンで区切られた単語のリストになっており、そのリストの先頭単語がenと同じである要素にマッチする。マッチングは常に属性値の先頭に対して行われます。この指定方法は主に、[RFC1766]にある言語のサブコードに対するマッチングを意図している。 　HTMLで使われるclassセレクタは、div[class~=section]と、まったく同じです。すなわち属性セレクタの詳細度は[0,0,1,0]ということです。 　たとえば、table[summary="sample1"]{}と書けば、tableにclass名をつける必要はありませんね。(summaryはHTML4.01では必須なので必ず書かれているはずですからね。) ★CSS2.1でのセレクタは『Selectors ( http://www.w3.org/TR/CSS2/selector.html#pattern- … )』にあります。 このセレクタと ★6.4.3 Calculating a selector's specificity ( http://www.w3.org/TR/CSS2/cascade.html#specificity ) にある詳細度などの・・カスケーディングは重要です。
テーブルの構造は以下の通りです。 http://www.w3.org/TR/CSS2/tables.html#table-layout 透けていれば下まで見えますし、透けてなければ一番上の物だけが見えます。 （現実世界の物が、後ろの物が見えないのと同じです。）
明度が白と黒のど真ん中が両方見やすいと思います。お手持ちのカラーピッカーで明度50％、50％付近なら、何でもいいのでは？色相がどの位置かは見易さとは関係ないと思います。 一応、手持ちの明度（Bright）50％のものを貼り付けます。
枠の事なら？ .ui-corner-top { border-top-left-radius: 0; border-top-right-radius: 0; } もしくは、削除するとよいでしょう。 それともアイコンの○の事？ .ui-icon, .ui-icon-searchfield:after { border-bottom-left-radius: 0; border-bottom-right-radius: 0; border-top-left-radius: 0; border-top-right-radius: 0; } または削除 <span class="ui-icon ui-icon-shadow ui-icon-plus"></span> ui-iconの変更でお好きなように .ui-btn-icon-left .ui-icon { right: 10px; } に変更
>HTML要素の中に背景を設定すると適応されないのでしょうか？ 文章宣言がhtmlでは過去互換モードになりますので、適用されません。 htmlにも背景を入れたければ、標準モードに文書宣言を変えてください。 【例】 <html>を <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> に変更。 苦言ですが、どのような文章で書かれている文章かを宣言するのは基本中の基本です。それにあわせたcssを記述します。、「ホームページ作成講座」で先生になる前に、もう一度生徒になって、正しい知識を勉強してください。 講座のソースを拝見しましたが、ひどいとしか言いようがありません。文書構造がでたらめです。 ｈｔｍｌ+ｃｓｓでは、文章構造・論理構造と見た目のデザインに役割を分割します。htmlに<b>や<br><br>は書きません。見出しも<h2>の前には<h1>が必ず出ます。というようなことは真っ先に学ぶことですが、全く理解されてません。もう一度、「正しい」といわれているhtmlを学ばれることをお勧めします。
とりあえず、質問の意味が掴めないのは私だけなのでしょうか。 些細なアドバイスですが、「てにをは」をちゃんとした方がいいですよ。
HTMLの中身が無いので？？？なのですが、 ＞Topというdivの中に「logo」と「social」という２つのdivを入れ、 <div id="top"> 　　<div id="logo">ロゴ</div> 　　<div id="social"> 　　　<div class="fb">ソーシャルメディアの画像</div> 　　　<div class="twitter">ツイッターの画像</div> 　　</div> </div> うーん、これじゃ検索エンジンは無論、画像を読み込まないブラウザ、スタイルシートを読まないブラウザにはチンプンカンプン。 　この場合、背景にする必要はありません。きちんと文書構造にしたがってマークアップしましょう。 　タブは＿に置換してある。 <div class="header" id="Top"> ＿<h1><img src="images/logo.png" width="397" height="36" alt="タイトル(ページの見出し)"></h1> ＿<div class="nav"> ＿＿<ul> ＿＿＿<li><img src="images/fb.png" width="25" height="26" alt="FB"></li> ＿＿＿<li><img src="images/twitter.png" width="25" height="26" alt="Twitter"></li> ＿＿</ul> ＿</div> <div> 文字がちゃんとあり、その背景なら <div class="header" id="Top"> ＿<h1><span>タイトル(ページの見出し)</span></h1> ＿<div class="nav"> ＿＿<ul> ＿＿＿<li>FB</li> ＿＿＿<li>Twitter"</li> ＿＿</ul> ＿</div> <div> ですかね。HTML的には大差ない。 [CSS] div.header{ position:relative; /* absoluteの基準になる */ width:453px;margin:0 auto; } div.header h1{ margin:0 56px 0 0; background-image:url(images/logo.png); text-align:center; } div.header h1 span{visibility:hidden;} div.header div.nav{ width:56px; position:absolute; top:0;right:0; } div.header div.nav ul, div.header div.nav ul li{ display:block;list-style:none; margin:0;padding:0; } div.header div.nav ul{ width:100%;height:36px; } div.header div.nav ul li{ padding-right:3px; background:url(images/fb.png) no-repeat; width:25px;height:26px; float:left; } div.header div.nav ul li+li{ background-image:url(images/twitter.png); } デザインは一切考慮せず、HTMLをきちんと書くこと。そうすれば先でどのようにもデザインは変更できます。HTMLさえきちんとしていたら、違うHTMLでも同じになる。 ★headerをrelativeにしておいて、それを基準にabsoluteで配置すると、デザインに引っ張らずHTMLがかけます。そして、そのHTMLは、好きにデザインできます。
HTML/CSSの基本的なことはほぼWEB上で見つけることができます。 調べて分からないということは、検索の方法がよくないか、HTML/CSSを理解する知識がない(たとえばパソコンの基本操作)かのどちらかだと思います。どこまでは分かって、どこからがわからないということが分かれば、的確な回答が得られるかもしれませんね。
たぶんテスト用のURLだからでしょう。 アプリの登録URLと埋め込みページのURLが同一でないと、ちゃんと動かなかった気がします。 テスト用のアプリを作って、URLを同一にすると、うまくいくと思いますが。
ホームページビルダー付属のウェブアートデザイナーで作れるんじゃないでしょうか？ 恐らく解説したホームページはたくさんあると思うので、操作方法で困ることはないと思いますが、どうでしょう？ マニュアル的なものも付いていたと思います。
ソースはjqueryを使っているので、それを調べてください。 そのサイトは膨大な量のjavascriptを読み込んでいるので大変です。 　骨格は <a href="#"><img alt="サンプルへ" width="100" height="50" src="[画像URL]" onmouseover="this.src='[変更画像URL]';" onmouseout="this.src='[画像URL]'"> 　ですが、それを別途記述しても良いでしょう。 　ただ、スタイルシートで簡単にできるものをわざわざjavascripを使うのは、あまりお勧めできません。 <div class="nav"> 　<div> 　　<h2>サンプル</h2> 　　<p>説明</p> 　　<p class="link"><a href="./sample.html">サンプルへ</a></p> 　</div> 　<div> 　　<h2>説明</h2> 　　<p>説明</p> 　　<p class="link"><a href="./manual.html">説明</a></p> 　</div> </div> [CSS} div.nav p.link{text-align:center;} div.nav p.link img { display:block;width:100px;height:50px; line-height:50px; } div.nav p.link img a{ width:100%;height:100%; background:orenge url(); } div.nav p.link img a{ display:block;width:100px;height:50px; line-height:50px; background:orenge url(); } div.nav p.link img a:visited{ background:magenta url(); } div.nav p.link img a:hover, div.nav p.link img a:focus{ background:yellow url(); } div.nav p.link img a:active{ background:red url(); }
このサイトなんか、わかりやすくていいのではないでしょうか。 参考URL：http://www.kent-web.com/data/postmail.html
　単純にスタイルシートがアップロードされていない、もしくはローカルとは異なるパス上にある。 　スタイルシートも、本来の位置にアップロードしなくてはダメです。 ★1と2の間辺りからはじめるCSS講座 ( http://www6.plala.or.jp/go_west/beginner/css/ ) 　のどうやってHTMLにくっつけるの？ ★14.2 HTMLへのスタイル付加 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) <p class="text">だと、 スタイルシートに .text{font-familye:***などと、あるはずです。 あるいは、body{}で設定してあるかも 　まず、HTMLやCSSの基本を学んでください。そのほうが絶対早道です。いきなり、ソフトを与えられても無理です。 最低限 ★はじめてのWebドキュメントづくり ( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) ★1と2の間辺りからはじめるCSS講座 ( http://www6.plala.or.jp/go_west/beginner/css/ ) そして、 ★HTML 4.01 仕様書邦訳　( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ★CSS2 邦訳 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) には一通り目を通して、必要なとき参照できるようブックマークに入れておきましょう。
html,body{marign:0;padding:0;} を書いておく。 ★9. 視覚整形モデル ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) だけは目を通しておくこと。 ブラウザにより異なりますが、html,bodyのルート要素はマージン、パディングを持っています。 HTMLの基本の文書構造は [HTML4.01] <body> 　<div class="header"> 　</div> 　<div class="section"> 　</div> 　</div class="footer"> 　</div> </body> [HTM4.01 ※2] <body> 　<div class="article"> 　　<div class="header"> 　　</div> 　　<div class="section"> 　　</div> 　　</div class="footer"> 　　</div> 　</div> </body> あるいは、HTML5でしたら、 [HTML5] <body> 　<header> 　</header> 　<section> 　</section> 　</section> 　<footer> 　</footer> </body> {HTML5 ※2] <body> 　<article> 　　<header> 　　</header> 　　<section> 　　</section> 　　</section> 　　<footer> 　　</footer> 　</article> </body> のような構造をしているはずですから、 スタイルシートで html,body{margin:0;padding:0;} body{background-color:gray;} div.header,div.section,div.footer{width:100%;margin:0 auto;min-width:640px;max-width:1000px;background-color:white;} と書き始める 他の例なら [HTML4.01 ※2] html,body{margin:0;padding:0;} body{background-color:gray;} div.article{width:100%;margin:0 auto;min-width:640px;max-width:1000px;background-color:white;} [HTML5] html,body{margin:0;padding:0;} body{background-color:gray;} header,section,footer{width:100%;margin:0 auto;min-width:640px;max-width:1000px;background-color:white;} [HTML5 ※2] html,body{margin:0;padding:0;} body{background-color:gray;} article{width:100%;margin:0 auto;min-width:640px;max-width:1000px;background-color:white;} ちなみに、ここで使用したclass名、要素名は、 HTML4.01仕様書の 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 および、 『HTML5 における HTML4 からの変更点の新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )』 を根拠にしています。 ＞そこで実験的にですが、新規でファイルを作ってDivタグを挿入しCSSの設定で 　divは、HTMLに文書構造を示すために利用するもので、デザインのために入れるのではないことだけは、最初の最初に理解して置いてください。そしたら、将来HTML5に変わったときでも、とても楽です。その文書構造を元にデザインするのです。 div.header p{font-size:1.2em;font-weight:bold;text-indent:1em;line-height:1.4em;margin:0;} とすれば、「ああ、これはヘッダ内の段落についての指定だな」とすぐ理解できますよね。
wraperもclearfixも本来のHTMLからは変ですが・・・(本題と関係ないので後で) 　記事全体を<div class="article"></div>で囲んだ場合、その中身の<div class="section">などの要素をfloatさせると、 『【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 浮動体は通常フローに属していないので、その前後に生成される位置指定されていないブロックボックスは、【浮動体が存在しないかのように】流し込まれる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［視覚整形モデル( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )］より』 　言い換えると、本体である<div class="article">内に、floatされている要素だけしか存在しないと、その親コンテナブロックは内容が無いことになります。 解決策として、★を挙げておきます。 ★floatを使って配置しない・・これが本来の方法です。 　floatは仕様書を見られるとわかるように、本来は記事中の画像などを回り込ませるためのものでブロックどおしを流し込むものではありません。 　またfloatを使うために文書構造が制約を受けるという根本的な問題もあります。 　詳しくは 　※ローカルとWeb上で見え方が違うのですが…。 - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7320582.html ) 　※floatによる段組について - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7079628.html ) ★floatを使う場合は、それに続く要素でclearする。 　この要素は実在の要素でもよいし、擬似要素でも良い。 　もっともわかりやすい単純な方法です。 　<div class="article"> 　　<div class="header"></div> 　　<div class="section"></div> 　　<div class="footer"></div> 　　<hr> 　</div> 　　にて、 　div.article div{float:left:width30%;} 　div.article>hr{clear:left;visibility:hidden;margin:0;} 　/* div.articleの直接の子供であるhrでfloatをclearする。hr自体は見せない */ ★もっとも長い要素はfloatさせない!! 　<div class="article"> 　　<div class="header"></div> 　　<div class="footer"></div> 　　<div class="section"></div> 　</div> 　div.article div.header{float:left;} 　div.article div.footer{clear:right;} 　いずれにしても、(スタイルシートなしで考えると)デザインのために文書の並びが制約を受けーます。 (付録) ※文書構造を補完するために、divやspanにidやclassをつけてマークアップします。 　根拠→『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　wraperやclearfixは文書構造ではなく、デザインのためのものです。これは、<font color="red">がまずいから<span class="red">とするのと変わりませんね。そうではなく、<em>や<span class="important">としてスタイルシートでem{color:red;}、span.important{color:red;}とするべきと言うことです。先でcolor:greenとしてもよいでしょ。 　
補足です。 順番が問題になるのは、重要度・出所・詳細度が同じ指定が登場したときで、そのときにのみ、後で書かれたもので上書きされます。 　スタイルシートの最後なんて大変なので、最初に書いて置いたら良いです。 　そのとき、それぞれのプロパティには［初期値(Initial)］がありますから、その値を指定すると初期化されます。 'background-color' 　Value: <color> | transparent | inherit 　Initial: transparent ・・・・・・　transparentが初期値です。 ★'background-color' ( http://www.w3.org/TR/CSS2/colors.html#propdef-ba … ) 　他のプロパティについても、同様に、Full property table ( http://www.w3.org/TR/CSS2/propidx.html )からプロパティを選択すると良いでしょう。 (注意)継承されるプロパティについては、既存のCSSに指定がなくても描かなければならない場合があります。継承れるかされないかは、常識の範囲内ですが必要ならそれぞれのプロパティのInherited:項目をチェックしてください。 上書き用のスタイルシートを用意するときも、詳細度や重要度を上げれば、同様です。
ふたつのdivが並ぶ場合、中に何もないと密着します。 <body> <div class="header"> </div> <div class="cection"> </div> <div class="footer"> </div> にて、 html,body{margin:0;padding:0;} div.header,div.cection,div.footer{margin:0 auto;width:70%;} div.header,div.footer{height:100px;background-color:yellow;} div.cection{height:400px;background-color:silver} ここで、それぞれのdiv内に<h1>や<p>を入れると隙間が広がります。また、それぞれのdivにborderを div{border:solid red 1px;} 指定すると、面白いです。 　そこで、 div.header *:first-child,div.section *:first-child,div.footer *:first-child{margin-top:0;} と指定すると、・・・ 　div要素にある要素のマージンが突き抜けて、相手の要素内にある要素との間にmarginが働く。 　これは、floatさせたとき、その要素がもつmarginが、テキストやボックスを跳ね除けるのと同じです。
フッターの固定ですが、私はcatfish.jsを使用していますが、どうもそのサイトは現在閉鎖されているようです。 代わりに『footerFixed.js』が使用できると思います。 http://blog.webcreativepark.net/2007/11/16-01225 … どうしてもCSSでやりたい！という場合は無理ですが、javascriptでもいいよという場合は使用してみてください。 ちなみにこのサイトの中にはCSSで固定する方法も書き込まれています。 それと、フッターを固定した場合、YouTubeの動画を埋め込むと固定したフッターの上にかぶって表示されると言う現象がIEとGoogle Chromeのみで起こりました。 （catfish.jsを使用した場合ですが） もし、そのような現象が起きた場合、以下の処理を行ってみてください。 私は以下のサイトを参照して回避できました。 http://black-flag.net/html/20110711-3316.html 埋め込みタグの中に『&wmode=transparent』を追記します。 追記前：<iframe width="425" height="349" src="http://www.youtube.com/embed/5xLLvnAtBig?rel=0" frameborder="0" allowfullscreen></iframe> 追記後：<iframe width="425" height="349" src="http://www.youtube.com/embed/5xLLvnAtBig?rel=0&w … frameborder="0" allowfullscreen></iframe> これでたぶん解消できると思います。 試してみてください。
facebookは、SNSサービスで自分でそんなもの用意する必要ないはずですが？ Facebookの使い方→Facebook Page ( http://f-navigation.jp/manual/#step5 )
jQueryとslideToggleを使ってるんじゃないんでしょうか？ 大雑把に書きますが、 <script> function func(num){ 　$("menu"+num).slideToggle("slow"); } </script> <html> <ul> 　<li><a href="javascript:void(0);" onclick="func(1);">メニュー1</a></li> 　<li><a href="javascript:void(0);" onclick="func(2);">メニュー2</a></li> 　<li><a href="javascript:void(0);" onclick="func(3);">メニュー3</a></li> 　<li><a href="javascript:void(0);" onclick="func(4);">メニュー4</a></li> </ul> <div id="menu1">内容1</div> <div id="menu2">内容2</div> <div id="menu3">内容3</div> <div id="menu4">内容4</div> </html> 上記のようなものじゃないかと思います。推測ですが・・・ （上記は動作確認をしていません。） > sccとjavaをどうやって使っているのかがわかりません） CSSとJavascriptのことですね。 javaと書くとJAVAと勘違いされます。 JAVAとJavascriptは全くの別物なので。 スタイルシートは、どのようなデザインで使うのかによってかわるので、ここでは説明しづらいですね。 ルーブルとまったく同じメニュー、同じサブメニューでいいのなら、なんとか書きようもありますが、それでいいのでしょうか？
＞この状態でどこかを変えて入力すればいいとかではなく ＞メールフォーム、自体をニフティに変更すればよいということなのでしょうか？？ 　いいえ、まったく間違っています。 　サイト訪問者に問合せなどでメールを受け取るためには、まずメールデコードCGI(Common Gatway Inteface)というプログラムにデーターを渡して、それをメールで送信できる形に直して、メール配信プログラム(MTA--Mail Transfer Agent)に渡さなければなりません。 　一方、あなたが普段他人にメールを送信しているときは、パソコンにインストールされているメールを送信するプログラム(MUA--mail user agent)が、その処理をしてメールサーバー(MTA)に送信します。 　また、GMailは、送信に関しては、先のメールデコードと似たようなものです。(実際は違いますがね) 　まず、サーバーにメールデコードCGIを設置します。ニフティのマニュアルをお読みください。スタンダード以上はCGIが使えます。 　ついで、 CGI RESCUE - ネットサーフレスキューＷｅｂ裏技 ( http://www.rescue.ne.jp/ ) 　の「フォーム・アンケート・エディタ ほか」にある ・フォームtoメール (メール送信フォーム) ・Ｗｅｂメーラー 　などをサーバーに設置します。そのとき同じく「基本的なことなど」も学んでおくこと。 　それができたら、サンプルを元に送信フォームを作ってください。 <form action="[http://CGIへのパス]" method="post"> <input type="text" name="sub" value="" size=""> ・・・・ <input type="submit" value="送信"> </form> とかになります。 なお、ビルダーを使い始める前に、 ★はじめてのWebドキュメントづくり ( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) などで基本的なことをしっかり身につけておくほうが絶対に良いです。そうすべきです。 　お使いになってわかるように、何も知らなくても一見何でも作ってしまいますが、それはとんでもないものになってしまうことが、とても多いです。 　示されたHTMLには、HTMLを知っていればありえない極めて初歩的な間違いがありますが、そんな袋小路に迷い込むことはなくなります。 　ビルダーに限らず、オーサリングツールを使うときは、我々のようにテキストエディタで作成する人以上に、HTMLやCSSの知識が必要なのですよ。
他に1台あるパソコンのブラウザも最新版に近いので、試す環境がないのですが… こちらに対応ブラウザ・バージョンがずらっと並んでいるので、 list-style-image は、結構使えるように思います。 （参考URLとおなじものです） http://www.htmq.com/style/list-style-image.shtml 参考URL：http://www.htmq.com/style/list-style-image.shtml
.pic1 li { → .pic1 {
<a href="アドレス"><img src="gazou1.jpg" width=190 height=50></a><!-- --><a href="アドレス"><img src="gazou2.jpg" width=190 height=50></a> でソースコードの視認性のために改行しても、空白類は消えます。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから ここで、ソース文書中で語間に空白類が複数連なっている場合、PRE要素を除いて、レンダリング結果の語間スペース調整は全く異なるものになるという点に注意されたい。 特にユーザエージェントは、語間スペースの出力処理に際しては、連続する空白類の入力があった場合は1つにまとめてしまう必要がある。 これは、lang属性やHTTP "Content-Language"ヘッダフィールド([RFC2616]の14.12参照)、ユーザの設定、等による言語情報が存在しない場合であっても、可能かつ必要な動作である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Paragraphs, Lines, and Phrases (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　なお、<nobr>はHTML4.01以降は存在しない要素です。 ※Index of the HTML 4 Elements ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　align="center" は、divにはありません。 ※Index of the HTML 4 Attributes ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　また、vertical-align: text-bottom;は、tableのセルとか、行内の配置でこれも無効です。 <div class="gazou"> <ul> 　<li><a href="アドレス"><img src="gazou1.jpg" width=190 height=50></a></li><!-- 　<li><a href="アドレス"><img src="gazou2.jpg" width=190 height=50></a></li><!-- 以下、同様に続く・・・ </ul> </div> とただしくマークアップして、スタイルシートで配置します。 たとえば ie6　でリストが横に並ばず縦に並んでしまう - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7329788.html )
どこ（メニューなのか、サイドバーなのか、ヘッダなのか、、、）にあるかを、 CSSファイルを見ただけで判断できるようにするためです。
一定時間後に広告を消してコンテンツを表示させる。 <div id="flyer">広告 <a onclick="skip();">skip</a></div> <div id="contents" style="display:none;">コンテンツ</div> <script> function skip(){ document.getElementById('skip').style.display='none'; document.getElementById('contents').style.display='block'; } onload=function(){ setInterval( skip, 10000); }; </script> 未検証です。
質問は、 １、「全環境をサポートするべきでなのか？」 ２、「推薦環境ページを作るべきか？」 どちらでしょうか？ ある程度、環境に対応している場合は、不要ですが、 対応していなければ、推薦環境をかかなければ不親切です。 人により色んな意味に解釈されますが、 クレームを避けるための文言ではないでしょうか？ ＞どんな環境でも不便なく閲覧できるようにサイトを作るべきだと考えているので、推奨環境を提示すること自体が妙だと私は思うのですが。 Ａ、 同感です。そう思うなら、多くの環境に対応すれば、文言も不要です。 Flashだとどうするのかな？ 最新バージョンで作ったサイトはどうするのかな？ 例えば、CSS3の解説サイトとか・・・
後から言われたといっても、IE7対応はまだ一般的です。 何も知らない相手へは「IE6は未対応ですよ」と最初に言わなければ、あと数年間はこのような問題は無くなりません。 クライアントは当然の権利としてクレームしているでのしょう・・・ --------- IE6切り捨ての傾向にはなっていますが、 逆行してYahooでは推薦環境に戻りましたし、 企業のパソコンでは未だに利用しているユーザーが多いですから・・・ （個人的には、そろそろ消えて欲しいですが・・・ MSの功罪） --------- 旧ブラウザのサポートは、 気付かない部分で、後から出てくるでしょうから作り直した方が早いでしょう。 お金を頂いた以上は、貴方もプロのですから 対応すると決めたら全箇所対応しないといけないと言う事です。 IE7に関しては、見ただけではダメで、ズーム対応もしないといけません・・・ IE6は、DTDから変更して親要素から構造を変更した方が早い場合があります。 Ａ、 例えば、CSS3をIE6対応にするなら無理ですし、 位置がズレ程度ならハックや構造を変更すれば可能ですが、 IE6.7の癖を知らない人が、数時間で対応するのは厳しいのでは？ 地道に検証を繰り返すか、急ぎなら有識者に頼むしかないでしょう。
IE6は既にお亡くなりになっており、葬儀が行われました(>_<) http://www.itmedia.co.jp/news/articles/1003/08/n … > 今回のソリューションを提案頂きたく思います。 最善は、IE6を切り捨てる。Googleとか多くの所がそうしています。 どうしても何とかしたいなら、 IE6が標準モードで動く文書型にして 「IE6 CSS」の検索結果を片っ端から読んでください。 現状構成がかなり複雑なら、一から作り直すことも考慮に入れてください。 （その方が楽なことがあるから） けど時間がないというならこれは無理なはずです。 だから最善は切り捨て。
かなりストーレトですね。 楽天ページにリンク貼るとは…
こういうやり方もあります。 これが最もよく使われた方法、王道だと思います。 <div id="container"> <div id="container-top"> <div id="container-bottom"> <div id="container-left"> <div id="container-right"> <div id="box">ボックス</div> </div> </div> </div> </div> </div> #container-top { background-image: url(上端); } #container-bottom { bakcground-image: url(下段); 　　　　　　　　margin-top: ＊px; } #container-left { bakcground-image: url(左端); 　　　　　　　　margin-bottom: ＊px} #container-right { bakcground-image: url(右端);} これでたぶん行けると思います。 background-position、background-repeatを適宜付けてください。 idをつけずに#container div div div { background-image: ＊ }などとしてもいいと思います。
http://beauty.geocities.jp/nishihama985/js-cal/m … http://beauty.geocities.jp/nishihama985/js-cal/m … 簡単な例です　こういうものでしょうか メール送信はできません　計算のみです Javascriptで処理しています 内容は分かるでしょうか
初心者のためのスマートフォンサイトを作るときに見ておきたいサイト http://webdrawer.net/mobile/smartphonemake.html 携帯やスマートフォン用サイトのシュミレーターでPCで見え方を確認して見た！一押しのモバイルシュミレーターとは？ http://www.amamoba.com/pc/mobile-simulato.html
HTMLを作成すると ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★The W3C Markup Validation Service ( http://validator.w3.org/#validate_by_input ) で正統なHTMLか否かを調べる ついで、CSSを書いたら ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で調べる。 　どこが間違っているかは、すでに回答がありますがそこだけを修正してとりあえずまともになっても、また似たような失敗をしてしまいます。 　W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … )のメモに『CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。. 』ということです。 　ＩＥはバグが多く悩まされますが・・ 1) paddin辺の外周をサイズとする。paddingは0とする。 　このひとつを知っているだけで、随分と変わるでしょう。代わりに子供ブロックのmargin で指定します。 　なお、IEではなく、firefoxなどで確認しながら作成し、IEで表示させて修正するほうが効率的です。firefoxには、開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )のアドオンも豊富です。 Firebug ( https://addons.mozilla.jp/firefox/details/1843 ) Html Validator ( https://addons.mozilla.jp/firefox/details/249 ) JSView ( https://addons.mozilla.jp/firefox/details/2076 ) とか・・・
＞dl・dt・ddタグは、本来1行ほどずれて表示されるタグだと思うのですが、 いいえ、違います。 dl,dt,ddは「定義リスト」といって、デザインの為では無く、 用語を説明する為に、dl,dt,ddを利用します。 tableは、「表」なので、 エクセルで作ったようなデータなどを表示するためのHTMLです。 つまり、マークアップの違いなので、 そのコンテンツによって使い分けるのが正解です。 質問者さんが、HTMLの利用に関して間違った解釈をしています・・・ HTMLで文章構造をつくり、 CSSでデザインする。 CSSでどちらも同じデザインに出来ます。 ＞tableタグでやったほうが早いと思ってしまうのです。 それは個人の違いですが、 手書きで複雑なテーブルのセルを変更するのは面倒ですよ・・・ 文章構造やマークアップを無視するならば、お好きなようにとしか言えません・・・
＞ページによっては左側、または右側の高さが一番高くなることがあるのですが、その場合の解決方法をご教示願えないでしょうか？ 「高さを揃える　css」で検索してみてください。私が先に挙げたカラムレイアウトの手法つまり、 float position table-cell のすべてで左右のみならず、３コラムになってどのコラムが高くなっても高さを揃えたり、そろえているように見せることが出来ます。table-cellが一番簡単ですがね。
ソースです。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.nav ul,div.nav ul li,div.nav ul img,div.nav ul a{ display:block;margin:0;padding:0;} div.nav{width:100%;text-align:center;} div.nav ul li{display:inline-block;list-style:none;width:80px;position:relative;height:40px;} div.nav ul img,div.nav ul a{width:100%;height:100%;} div.nav ul li a:after{content:url("images/top.gif");position:absolute;left:0;top:0;} div.nav ul li a[href="./books/"]:after{content:url("images/book.gif");} div.nav ul li a[href="./profile"]:after{content:url("images/profile.gif");} div.nav ul+h2+p+ul li a:hover:after{content:url("images/topH.gif");} div.nav ul+h2+p+ul li a[href="./books/"]:hover:after{content:url("images/bookH.gif");} div.nav ul+h2+p+ul li a[href="./profile"]:hover:after{content:url("images/profileH.gif");} div.nav ul li a{color:transparent;background:url(images/top.gif);} div.nav ul li a[href="./books/"]{background:url(images/book.gif);} div.nav ul li+li+li a[href="./profile"]{background:url(images/profile.gif);} div.nav ul li a:hover{background:url(images/topH.gif);} div.nav ul li a[href="./books/"]:hover{background:url(images/bookH.gif);} div.nav ul li+li+li a[href="./profile"]:hover{background:url(images/profileH.gif);} --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<div class="nav"> ＿＿<h2>背景画像</h2> ＿＿<p>標準的なbackgroundの変更</p> ＿＿<ul> ＿＿＿<li><a href="./index.html"><span>トップ</span></a></li> ＿＿＿<li><a href="./books/"><span>書籍</span></a></li> ＿＿＿<li><a href="./profile"><span>自己紹介</span></a></li> ＿＿</ul> ＿＿<h2>画像の追加</h2> ＿＿<p>印刷時に画像が表示される</p> ＿＿<ul> ＿＿＿<li><a href="./index.html"><span>トップ</span></a></li> ＿＿＿<li><a href="./books/"><span>書籍</span></a></li> ＿＿＿<li><a href="./profile"><span>自己紹介</span></a></li> ＿＿</ul> ＿＿<h2>画像の変更</h2> ＿＿<p>印刷時にも画像が表示される。</p> ＿＿<ul> ＿＿＿<li><a href="./index.html"><img src="images/top.gif" width="80" height="40" alt="トップ"></a></li> ＿＿＿<li><a href="./books/"><img src="images/book.gif" width="80" height="40" alt="書籍"></a></li> ＿＿＿<li><a href="./profile"><img src="images/profile.gif" width="80" height="40" alt="自己紹介"></a></li> ＿＿</ul> ＿</div> </body> </html>
＞角度指定 え～っとChromeというかwebkitでは、CSSに直に任意の角度を記述する方式には対応してませんね…。 ただ絶対に無理って訳でも無く。グラデに角度を付けたい場合、その適用範囲を<div>とかのボックス指定出来るタグで囲って、そこに絶対値（px指定）で縦横サイズ指定します。で、開始点と終了点を対角線で結ぶ様にグラデを貼れば、斜めに角度の着いたグラデが可能になります。 実際の細かい角度指定は、その<div>タグの縦横比で行う事になります。なので直感的にデザインするのは少々難しいかと…。 ━ ココから ━━━━━━━━━━━━━━━━━━━━━━━━ <!DOCTYPE html> <html xmlns="http://www.w3.org/1999/xhtml" lang="ja" xml:lang="ja"> <head> <meta charset="UTF-8" /> <title>TEST</title> <style type="text/css" media="screen" id="my-style"> /*<![CDATA[*/ div.my_gradient { margin: 5px; padding: 3px; width: 300px; height: 300px; background-image: -webkit-gradient( linear, left top, right bottom, color-stop(0.20, rgb(0,40,20)), color-stop(0.60, rgb(180,255,80)) ); } div.my_gradient p { margin: 100px auto; width: 200px; height: 20px; color: #fff; text-shadow: 1px 2px 3px #000; } /*]]>*/ </style> </head> <body> <div class="my_gradient"> <p>OKWaveは素敵な質問箱！！</p> </div> </body> </html> ━ ココまで ━━━━━━━━━━━━━━━━━━━━━━━━ とりあえずこんな感じで45度のグラデです（縦横比:1対1の正方形）。 P.S. 下記サイトでなら、数値を弄りながらリアルタイムでグラデの変化を見ながら、CSSも自動的に書き出してくれます。参考にしてみて下さい。 ＞http://gradients.glrzad.com/
とりあえず、子供セレクタを理解しない古いブラウザ対応。 子供セレクタ対応のモダンブラウザなら、直接指定すると簡単です。 要は、詳細度をきちんと計算すること--常識的な結果ですが--- ★リキッドデザインでデザインしてあります。 ★タブは＿に置換してある。 <div class="nav"> ＿<ul> ＿＿<li><a href="./">トップ</a></li> ＿＿<li class="current"><a href="./product">製品</a> ＿＿＿<ul> ＿＿＿＿<li><a href="./product/a">A群</a></li> ＿＿＿＿<li><a href="./product/b">B群</a></li> ＿＿＿＿<li><a href="./product/c">C群</a></li> ＿＿＿</ul> ＿＿</li> ＿＿<li><a href="./service">サービス</a> ＿＿＿<ul> ＿＿＿＿<li class="current"><a href="./service/a">A群</a></li> ＿＿＿＿<li><a href="./service/b">B群</a></li> ＿＿＿＿<li><a href="./service/c">C群</a></li> ＿＿＿</ul> ＿＿</li> ＿＿<li><a href="./profile">会社</a></li> ＿＿<li><a href="./mail">メール</a></li> ＿</ul> </div> div.nav{width:80%;height:34px;margin:0 auto;text-align:center;line-height:30px;} div.nav ul,div.nav ul li{display:block;list-style:none;margin:0;padding:0;} div.nav ul li{float:left;width:19%;} div.nav ul li ul li{float:none;width:100%;} div.nav ul li a{ display:block;width:100%;height:100%; text-decoration:none; background-color:yellow; border:outset 2px silver;outline:none; } /* 詳細度 0014 */ div.nav ul li a:hover{background-color:rgb(255,255,200);}/* 詳細度 0024 */ div.nav ul li.current a{background-color:red;} /* 詳細度 0024 */ div.nav ul li.current a:hover{background-color:rgb(255,200,200);} /* 詳細度 0034 */ div.nav ul li.current ul li a{background-color:yellow;} /* 詳細度 0026 */ div.nav ul li.current ul li a:hover{background-color:rgb(255,255,200);}/* 詳細度 0036 */ div.nav ul li ul{display:none;} div.nav ul li a:active{border-style:inset;} div.nav ul li:hover ul{display:block;}
>due to access restrictions ファイルへのアクセス権があるか確認してみてください。
　印刷用スタイルシートは、すべての単位に絶対サイズ()を使いましょう。pxはディスプレイの解像度を参照する相対サイズです。(印刷の解像度は通常200～600dpiだと思います。) ★4.3.2 長さ（Lengths） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) in: インチ -- 1inは2.54cmに等しい cm: センチメートル mm: ミリメートル pt: ポイント -- 1ptは1/72inに等しい pc: パイカ -- 1pcは12ptに等しい 4.3.2 長さ（Lengths） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　display:table|table-cell,table-lineなどは、ブラウザによる差が大きく、できればabsoluteなどを使うほうが無難です。 　コマ割でfloatを使うのはたくさんの問題を含んでいますからも使うべきではないでしょう。必要な場合でも一方にはfloatをかけません。 　
まず、HTMLが次のようにマークアップされていたとします。 <body> 　<div class="header"> 　　<h1>見出し</h1> 　</div> 　<div class="section"> 　　<div class="section"> 　　　<h2>本文見出し</h2> 　　　<p>記事</p> 　　</div> 　　<div class="tableContent"> 　　　<h3>目次</h3> 　　</div> 　</div> 　<div class="footer"> 　　<h2>文書情報</h2> 　</div> </body> CSSにて、 html,body{margin:0;padding:0;}/* おまじない */ body{background-color:gray;}/* わかりやすくするため */ div{border:solid 1px gray;margin:0;}/* わかりやすくするため */ div.header{background-color:aqua;} div.section{background-color:silver;} div.section div.section{background-color:white;} div.section div.tableContent{background-color:green;} div.footer{background-color:lime;} /* ここまで、わかりやすくするため色・枠づけ */ body>div.section{position:relative;}/* 子孫要素の位置基準とするため */ div.section div.tableContent{position:absolute;top:0;left:0;width:20%;height:100%;} div.section div.section{margin-left:21%;min-height:400px;} 【説明】詳しくはそれぞれのリンク先を読むこと。 floatされると、それは他の要素から独立してブロックを形成します。それに続く要素は回り込みます。 →9.5 浮動体（Floats） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 文書の整形(コマ割)のために使うと文書構造を崩すため、使わないほうが良い。 →【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 例えば絶対配置による方法では、HTMLを記述する上で内容の配置順序が自由になることが回り込ませるボックスを先に記述する必要がある回り込みによる方法よりも優れている ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［段組 - Wikipedia( http://ja.wikipedia.org/wiki/%E6%AE%B5%E7%B5%84# … )］より 【補足】 divは、idやclass名と併用して文書(の意味的な)構造を示すもので、その文書構造を利用してプレゼンテーションをスタイルシートで指定しますが、プレゼンテーションのためにclass名やidをつけるのは誤り。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 　このHTML4.01の説明は理解し辛かったので、HTML5では要素として独立しました。HTML5の新しい要素とその意味は、HTML4.01で作成するときの良い参考になります。 →3.1. 新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　それぞれの意味もよく読む。 　contenerではなく、articleが良いでしょう。将来のHTMLの予行もかねて・・ [ＨＴＭＬ全体] ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み ※タブは＿に置換してあるので戻すこと <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;}/* おまじない */ body{background-color:gray;}/* わかりやすくするため */ div{border:solid 1px gray;margin:0;}/* わかりやすくするため */ div.header{background-color:aqua;} div.section{background-color:silver;} div.section div.section{background-color:white;} div.section div.tableContent{background-color:green;} div.footer{background-color:lime;} /* ここまで、わかりやすくするため色・枠づけ */ body>div.section{position:relative;} div.section div.tableContent{position:absolute;top:0;left:0;width:20%;height:100%;} div.section div.section{margin-left:21%;min-height:400px;} /* 常にdiv.section div.sectionのほうが長いと想定しています。 */ --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>見出し</h1> ＿</div> ＿<div class="section"> ＿＿<div class="section"> ＿＿＿<h2>本文見出し</h2> ＿＿＿<p>記事</p> ＿＿</div> ＿＿<div class="tableContent"> ＿＿＿<h3>目次</h3> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿</div> </body> </html>
わざわざめんどくさいtableを使わなくても。 定義リストを使うほうかシンプル・・ <dl class="mailForm"> ＿<dt class="required">お名前(漢字)</dt> ＿<dd><span><input type="text" size="20" name="name" value=""></span></dd> ＿<dt class="required">お名前(フリガナ)</dt> ＿<dd><span><input type="text" size="40" name="yomi" value=""></span></dd> ＿<dt>郵便番号</dt> ＿<dd><span>〒<input type="text" size="10" name="zip" value="">例 000-0000</span></dd> </dl> dl.mailForm{ ＿border:1px solid #999; ＿border-top-width:0; ＿background:silver; } dl.mailForm dt { ＿float:left; ＿width:10em; ＿border-top:1px solid #999; ＿padding:10px 0 0 1em; } ＿dl.mailForm dd span{display:inline-block;border-left:gray 2px solid;padding-left:1em;} dl.mailForm dd { ＿margin-left:10em; ＿padding:10px 0 10px 10px; ＿border-top:1px solid #999; }
こちらは、配布のHTMLをそのまま使う方法。もちろんお勧めじゃない。 原理を理解するために・・・ <div id="rakuten"> 　<table>・・・以下略 　</table> </div> にて、 #rakuten{ width:100%;: text-align:center;/* for IE6 */ } #rakuten table{ width:150px; margin: 0 auto; }
＞現状は色無しでも理解が可能です。 いえ、画像なしです。 ＞＞画像が読み込めない(画像の読み込みを停止している)状態だと文字が見えない可能性がある。 　検索エンジンのアルゴリズムは想像しかできませんが、 隠しテキストと隠しリンク - ウェブマスター ツール ヘルプ ( http://support.google.com/webmasters/bin/answer. … ) 　できれば、きちんと修正したほうが良いとおもいます。 .footer { background-color : black }/* 詳細度0010--継承するプロパティ */ 内に、 p.sample1/* 詳細度 0011 */, td/* 詳細度 0001 */{color:black} だと、明らかに隠し文字・・
iQuery単体でいけると思います。 $.ready(function(){ $("#album ul").animate({"left": "-=400px"}, "slow"); }); とか、 #album ul,#album ul li{display:block;list-style:none;margin:0;padding:0;} #album ul li{float:left;width:300px;margin:0 50px;} #album {width:400px;overflow:hidden;} #album ul{width:4000px;} <div id="album"> 　<ul> 　　<li><img src="" width="" height="" alt=""></li> 　　<li><img src="" width="" height="" alt=""></li> ・・・・ とか、未検証ですが、
htmlは基本的(パラレルダウンロードする部分もあるけど)に上から下に読み込まれます。 Chromeの検証を使えば、何に時間がかかっているのか分かると思うのですが、分かりにくいのであれば、アナログでheaderの要素をひとつづつ削ってテストしてみてはどうでしょうか。
そのまえに、IEが標準モードで動作するようにHTMLをきちんと書いて見ましょう。 DOCTYPE スイッチ - Google 検索 ( http://www.google.co.jp/#sclient=psy-ab&hl=ja&sa … ) 　これをきちんとすることで、IE7も含めて標準モードで動作します。そのうえで、IE7,8での表示を確認します。 　HTMLが、きちんとHTML4.01やXHTML1.0で書かれているかは、 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) 　で確認しておきます。 　これでほとんどの表示ずれは解決するはずです。その上で、 <!--[if lt IE 8]> としてIE8以前用のスタイルシートを記述します。 　詳細度が同じなら後で書かれたほうが優先される。 ★標準準拠・後方互換モード各々の CSS 解釈の違いをまとめたドキュメントを共有 ( http://2xup.org/log/2007/07/27-2111 ) 　 　
iframe{ width: 100%; height: 500px; } によって右側のスペースの高さが決められているためです。 height: 500px; を削除すると余白を決せます。
日本語で言えば、SHIFT-JISやEUC-JPなどが日本語エンコードになりますが、日本語含めたどんな言語でもUTF-8で書けば、多国語対応しますよ。
参照URLより文章を引用。--------------------------------------- プラグインを適用しただけだと、URLにアクセスすると、ログイン画面に飛ばされます。 一般公開用ページを作成し、トップページに設定 トップページにした公開用ページのIDを、 ﻿﻿﻿プラグインのオプション設定で　 Complete Lockdown＞Lockdown Settingsの【page ID】　に設定 公開用ページはいくつでも指定できます。 このプラグインは、専用の権限グループを持ちます。※ユーザ登録時の設定 この権限グループ　Unapproved User　を新規ユーザのデフォルト権限グループにしておくことで 登録があった時に、管理者が承認しない限り、ユーザが有効にならなくなります。 Unapproved User　の承認は、管理者にメールが送られるので、 ダッシュボードにログインし、ユーザ＞Moderate Users　で承認する Unapproved User　に見ることのできるページを指定できるのが Members Area　Settings　【page ID】 ページは・・・固定ページで、投稿は対象外 --------------- これでどうでしょうか？ 参考URL：http://wpbp.net/community/plugin/20110428637/
サイトの規模、必要なデザインの数などで決めています。 　たとえば、font-familyとか、本文(section)中の<p></p>についてのtext-indent,line-height,margin,backgroundとかは、default.cssやstandard.cssに書いてます。 　その上で、大きなサイトの場合は 骨格を示すもの shape.css 各コンテンツ用に (各ディレクトリのindex.html用のtop.css、(内容ページ用)main.css、(会社情報などの)note.css 色を示すもの　 color.css 　とか・・・・ 　色の配色は、color.cssですべて変更できるでしょう。 　これ以外に、(印刷用の)print.css、(携帯電話用の)handheld.css、(スマホ用の)mini.cssとか、いずれにも永続的スタイルシート(default.css)は適用される。 shape.css div.section{・・・・} div.section div.aside{font-size:0.9em;} div.section div.section {margin:0 2em;} color.css div.section{color:****} とか・・ 　要は、スタイルシートだけ見て編集できるようにしています。 　あまり長いと一度に読み取れないので、骨格と色を分けるとかもそのため 　いずれにしても、一番大事なのは、HTMLがきちんと書かれていることですが・・・ <div class="left">なんて書かれていたら、泣くことになる。(^^)
旧IEが borderの　radius:　をレンダリング出来ないからです。
もっとも大事なこと・・・デザイン目的にHTMLを書いたら絶対にダメです。!!HTML4.01が勧告された1999年以来・・。 divやidのclass名も文書構造を示すようなものを・・ 「id属性及び class属性と併用することで、文書に構造を付加するため ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 ・・・HTML5の「新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」とその説明が良いヒントになるでしょう。 ページの最下段ということは、ウィンドウの最下端と言う意味ではないですよね。なら <body> ＿<div class="header"> ＿＿<h1>サンプル</h1> ＿</div> ＿<div class="section"> ＿＿<h2>ページの下端に空白ができます。なぜかわかりません。 </h2> ＿＿<p>ページの最下端に接するように背景色を表示したいですが、画像のように、空白ができてしまいます。</p> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<address>・・・・</address> ＿＿<p>この・・・</p> ＿</div> </body> の場合、スタイルシートは body{background-color:white;} div.footer{background-color:red;} だけでよいはずです。 わかりやすいように、htmlに背景色を指定すると html{background-color:silver;} ※原因は <div><p>・・・・</p><div> と閉じられていないため、ブラウザが |-- div |　　|--p |-- div と判断するからです。
画像以外も入らなければ、 <p class="logo"><img></p> p.logo{ width:200px; /* 画像巾 */ height:150px; /* 画像高さ */ padding: 20px 30px 40px 30px;/* 上 右 下 左 */ background-color:green; } 単純に img[src="HTMLに書かれたもの"]{padding:40px;background-color:green;} もしくは、 img[src="HTMLに書かれたもの"]{border:green 40px;} でもよいし・・
ソースを載せてくれれば皆答えやすいと思いますが、 とりあえず思いつくのは 単純に<title>タグを<body>内にいれちゃってるだけなのではないかな？と。 <head> 　<title>ページタイトル</title> </head> <body>ページの中身</bpdy> titleタグが一番最初にくるheadタグ内にあるかどうかチェックしてみて下さい。
都市に比べれば、厳しいと思います。 やはり東京が一番、仕事が多いと、月刊誌「WebDesigning」に載っていました。
スクロールの処理はwindow.onscrollです。 jQueryを使う場合は$(window).scroll()というのがあります。 http://api.jquery.com/scroll/
＞<a>の要素の中に<div>を入れたらダメって事なんですよね。。。<span>も？ 　いえ、spanはＯＫです。 <!ELEMENT A - - (%inline;)* -(A) -- anchor --> 　は、 <!要素 A -- 　　　　　　　　開始タグ必須　終了タグ必須 (%inline;)*　　　 (インライン要素)ゼロ個以上 -(A)　　　　　　　Aは出現してはならない。 --意味はアンカー --> と読みます。 →3.3.3 要素宣言 ( http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … ) 　仕様書を読んで見ましょう。 ＞もうIEは無視したいのですが、そうは切り捨てられませんし。。。 ＞IE、特にIEの6。これは外せないです。 ★いえ、IEは無視してください。 ie6 腐った牛乳 - Google 検索 ( http://www.google.co.jp/#hl=ja&gs_is=1&cp=13&gs_ … ) 　IE6は、マイクロソフト自身も撲滅キャンペーンInternet Explorer 6 Countdown | Death to IE 6 | IE6 Countdown ( http://www.ie6countdown.com/ )を行ってますし、多くのWeb企業も同様( http://www.google.co.jp/#hl=ja&gs_is=1&cp=9&gs_i … )です。 　現在のIE6のシェアは、2.33%しかありません。 ★日本のバージョン別ブラウザシェアグラフ （StatCounter Global Statsより） ( http://lhsp.s206.xrea.com/misc/browser-share-ver … ) IE6のために費やす時間・労力は無駄です。 なお、もし、期待される動作を考えられるなら、すべて個別にリンクを付けてください。IE６対処ならなおさら・・ [例] <div class="nav"> 　<h2><a href="">なんたらかんたら</a></h2> 　<p><a href="">ほげほげほげ</a></p> 　<p><a href="">画像</a></p> </div> デザインはその後です。
opacity:.8; filter:alpha(opacity=90); -ms-filter:"alpha(opacity=90)"; -khtml-opacity:.8; -moz-opacity:.8;
サイドバーにログインフォームを設置する以外は、WPの機能だけでできますよ。プラグインいりません。また、サイドバーにログインページのリンクを置くことで、限りなくご要望に近いと思うのですが。難しく考えすぎです。
角丸であろうとなかろうと・・・ CSS2の border-top-color: border-left-color: border-right-color: border-bottom-color: の各プロパティで指定します。 ★8.5 ボーダーのプロパティ（Border properties） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) いろは途中で変化します。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　※オプションでCSS3を選択 でチェック済み ★タブは＿に置換してある。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.section{ ＿border:solid 10px blue; ＿border-top-color:red; ＿border-radius: 1em; ＿position:relative; ＿margin-top:65px; } div.section>h2{ ＿position:absolute; ＿top:-65px; ＿width:22em; ＿left: 5em;; ＿line-height:40px; ＿background-color:red; ＿border-radius: 1em 1em 0 0; ＿text-align:center; } --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<div class="section"> ＿＿<h2>CSS3で角丸の上部分を違う色にしたい</h2> ＿＿<p>CSS3で角丸の上部分を違う色にしたいのですが、どうすればいいでしょうか？</p> ＿＿<p>角丸でくくって、色を変えた角丸の上部分に、タイトルとか入れたい、です</p> ＿</div> </body> </html>
A要素中に「Sold Out」を入れておけば、たとえそれが最前面に表示されていても、clickや hoverに影響を与えません。 また Sold Outを SPAN要素として記述し、position:absoluteを適用すると、既存のテキストや画像に乗る形で表示されます。 位置付けは CSSをご覧ください。 (HTML)Sold Outを SPAN要素で追加 <li><div class='out'><a href='…'>hoge<br><img src='…'><br>… <span>Sold Out</span></a></div></li> (CSS) .box a { … position: relative; /* 追加（position:absolute用）*/ } /* 以下追加 */ .box a span { position: absolute;/* 位置付けと最前面表示 */ left: 0; top: 50%;/* 垂直位置調整 */ margin-top: -0.5em;/* 行の高さの半分上へ */ width: 100%;/* 水平位置調整 */ text-align: center;/* 水平位置調整 */ color: #f00; } ※ SPAN要素が複数行になる場合は、margin-topの変更が必要です。 ※ フォントにより垂直位置に若干の異動が生じる場合があります。
この掲示板のシステムで書き換えられている部分 <p> class名は文書構造を示すものを使う。具体的には「HTML5の<a href="http://standards.mitsue.co.jp/resources/w3c/TR/h … 新しい要素</a>」が参考になる。</p> は、 <p> class名は文書構造を示すものを使う。具体的には「HTML5の<a href="http：//standards.mitsue.co.jp/resources/w3c/TR/html5-diff/">3.1. 新しい要素</a>」が参考になる。</p> に <p>著者のimportant!は、一部だけ修正すなど特別なときに使う。詳しくは<a href="http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … 最重要規則（!important rules）</a></p> は、 <p>著者のimportant!は、一部だけ修正すなど特別なときに使う。詳しくは<a href="http：//www.swlab.it.okayama-u.ac.jp/man/rec-css2/cascade.html#important-rules">6.4.2最重要規則（!important rules）</a></p> と修正してください。なお：は:に直す・・・・
こんにちは。 >それと… >XHTML1.0 では XML宣言をすることが強く求められています。 >とか ><iframe> に不明な属性 `allowTransparency` が指定されています。 >とかは気にしなくてもいいんですかね？！ XML宣言はチェッカーの通りにしてみてください。 allowTransparencyについてはここを参考にしてみてください。 http://www.tagindex.com/html_tag/frame/iframe_al … >あと、大きな問題がもう一つ増えてしまったぁぁぁぁ。 私の端末も2.3なのでその現象はわかりませんでした。 いろいろ試せば直せるかもしれませんが、確認できる環境がないのでこれに関しては私も手助けが難しいです。
この掲示板は「webデザイン・CSS」なので、その範囲で説明します。 まず、「imageにはリンクをつけたい」「横並び」と言うことなので、この部分のHTMLは、 <div class="nav"> 　<ul> 　　<li><a href=""><img src="[画像]" width="[巾]" height="[]" alt="リンク先を示す具体的な言葉"></a></li> 　　<li><a href=""><img src="[画像]" width="[巾]" height="[]" alt="リンク先を示す具体的な言葉"></a></li> 　　<li><a href=""><img src="[画像]" width="[巾]" height="[]" alt="リンク先を示す具体的な言葉"></a></li> 　</ul> </div> と書かれているとします。これで、検索エンジンもナビゲーションリストだと判断してクロールしてくれるでしょう。また画像の読み込みを停止しているブラウザ、読み上げソフト、点字端末なども利用できます。 これを横に並べるのですから・・ div.nav ul,div.nav ul li{ list-style:none;/* マーカーを消す */ margin:0;/* マージンを消す */ padding:0;/* パディングを消す */ } div.nav ul{ display:block;/* リスト→ブロック */ width:100%;/* いっぱいまで広げる */ text-align:center;/* センター配置 */ } div.nav ul li{ display:inline-block;/* インラインブロックで横並び */ border:2px inset gray;/* 枠のデザイン(上下左右に色や形や幅を指定可能) */ } div.nav ul li a img{border:none;} が最低限かな・ 　マウスオーバーのとき、クリックしたときに枠の形や色を変えたり、画像を入れ替えたりするならそれらも設定してください。
<table summary="なんたらの表"> <caption>なんたらの表</caption> <tbody> <tr> <th>・・・</th> <th>・・・</th> </tr> <tr> <td>・・・・</td> <td>・・・・</td> </tr> </tbody> </table> <table summary="ほげほげの表"> <caption>ほげほげの表</cpation> <tbody> <tr> <th>・・・</th> <th>・・・</th> </tr> <tr> <td>・・・・</td> <td>・・・・</td> </tr> </tbody> </table> <table summary="むにゃむにゃの表"> <caption>むにゃむにゃ</cpation> <tbody> <tr> <th>・・・</th> <th>・・・</th> </tr> <tr> <td>・・・・</td> <td>・・・・</td> </tr> </tbody> </table> <table summary="へんてこな表"> <caption>へんてこ</cpation> <tbody> <tr> <th>・・・</th> <th>・・・</th> </tr> <tr> <td>・・・・</td> <td>・・・・</td> </tr> </tbody> </table> だとして、 table{ border-collapse:collapse; border:solid 1px gray; } td,th{border:dotted 1px gray;width:20em; } table[summary="なんたらの表"] td,table[summary="なんたらの表"] th{display:none;} table[summary="なんたらの表"] *+td,table[summary="なんたらの表"] *+th{display:table-cell;} table[summary="ほげほげの表"] td,table[summary="ほげほげの表"] th{visibility:hidden;} table[summary="ほげほげの表"] *+td,table[summary="ほげほげの表"] *+th{visibility:visible;} table[summary="むにゃむにゃの表"] td:first-child,table[summary="むにゃむにゃの表"] th:first-child{display:none;} table[summary="へんてこな"] td:first-child,table[summary="へんてこな表"] th:first-child{visibility:hidden;} 消滅させるならdisplay:none;→display:table-cell; 存在は残すけど表示させないならvisibility:hidden;→visibility:visibble; セレクタは適当に・・・ 隣接セレクタを使うなら + 第一列なら、擬似クラス:first
単なる偶然のような気がしないでもないです。 .maT10なんてクラス名は、どう見てもウエブ音痴のclass名ですしね。margin-top:0などに将来デザインを変えたくなったらclass名も変えるのでしょうかね。(^^) 　『id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』も読んでない連中・・。div.header,div.sectionとかつけるのが本来のclass名ですよね。 ＞以前ネット上のものを参考にしてはだめなのかと質問するとひどく叱られた事もあり 　参考にすべきは、仕様書ですよ。「ネット上のものを参考にしてはだめ」は、そのまんま書籍にも当てはまりますよ。 　スタイルシートの解説書でしたら、こんなデザインが出来る、あんなデザインが出来るというプロパティの説明が目的ですから、HTMLの文書構造には立ち入りません。 　私が作業者に言っているのは、デザインは盗め・・しかしHTMLは仕様書に従え!!・・ 　徹底的にデザインは一切無視してHTMLを作らせます。作ります。その後、スタイルシートでデザインに取り掛かりますが、HTMLさえきちんと出来ていれば、基本的にHTMLに手を加えることはありません。何種類かのスタイルシートを用意して、それを切り替えてどのデザインが良いかの評価に移ります。 ・スタイルシートを切り替えることでサイト全体のデザインを一新できる。 　と言うのが文書構造とプレゼンテーションの分離の一番の目的ですから。たとえば、 「1カラムのリキッドレイアウトについて。( http://oshiete.goo.ne.jp/qa/7292209.html#a3 )で示したHTML、あなたなら、どうデザインしますか？ ＞（別の本ではCSSを分けるのは非効率になるので分けないとか） 　複雑なデザインのサイトの場合は基本的に分けます。 ・永続的スタイルシート ・メディア別スタイルシート 　・media=screen 　　・外骨格のみ 　　・色の指定 　　　この二つは分けることが多いです。 　要は作業効率・メンテナンス効率・データ量で判断します。 　何種類かに分類できるサイト 　　・トップページ 　　・各分野のトップページ 　　・商品説明 　　・会社案内 　では、サイト全体に適用させる永続的スタイルシートでfont-familyとかsizeとかを、骨格は、４種類、色は２種類に分けておけば、スタイルシートは小さくて済みますね。 　HTMLのソース部分は、ユーザーさんの意向もありますが基本的に読み解ける範囲で文書構造をマークアップするので参考になるサイトは要らないでしょう。スタイルシートは、デザインのみネット上や、たまに書籍も見ますが、あくまで外見だけなのでソースを見ることはありません。 　他社は知りませんが、DreamWeberなどのテンプレートを使用しているところが多いかと思います。 Dreamweaver テンプレートとサンプル | Dreamweaverデベロッパーセンター ( http://www.adobe.com/jp/devnet/dreamweaver/sampl … ) dreamweaver テンプレート ダウンロード - Google 検索 ( http://www.google.co.jp/search?q=.maT10%7Bmargin … ) 　
＞背景に一枚の写真を表示し、ブラウザのサイズに合わせて可変させたい 下記は、完全なリキッドスタイルです。 ・背景画像/リンクボタンを含めて最小640pxまで伸縮します。 　i-phoneなどでは、そのサイズで一端描画し、それをディスプレイ巾に縮めます。 ・IEは、背景画像の伸縮(background-size:)に未対応なので、背景画像ではなく画像としてマークアップし、それを背景にしています。他のウェブ標準ブラウザFirefox,Opera,googleChromemsafariとも、その必要はありません。<h1>～</h1>を削除すると表示確認できます。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　(注) オプションでCSS3を選択 で検証済みのHTML4.01strictです。 　(注) タブは＿に置換してあるので戻すこと 　(注) HTMLはIE対策の部分を除き文書構造だけを記述してあるので、先でどのようにもデザインは変更可能です。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> html,body{ height:100%;margin:0;padding:0; width:100%;height:100%; /* 画面サイズを基準にするため */ } body{ /* ここから */ background-image:url(../images/1000.jpg); background-size:cover; /* ここまではなくても良い(IEを無視してよいならh1を消しここも消す) */ overflow:hidden; min-width:640px; } h1{width:100%;height:100%;position:absolute;top:0;left:0;padding:0;margin:0;} div.nav ul,div.nav ul li{display:block;list-style:none;margin:0;padding:0;} h1,h2,div.nav ul li{position:absolute;z-index:100;} /* 表示位置とサイズの指定 */ h2{top:5%;left:5%;width:36%;} div.nav ul li{width:20%;} div.nav ul li.travel{top:40%;left:40%;} div.nav ul li.member{top:66%;left:10%;} div.nav ul li.bbs{top:50%;left:70%;} /* 画像を枠いっぱいに表示する。 */ h1 img,h2 img,div.nav ul li img{display:block;width:100%;height:auto;} div.footer{position:absolute;bottom:0;text-align:right;z-index:1000;width:100%;} --> ＿</style> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1><img src="../images/1000.jpg" width="12" height="9" alt="タイトル"></h1><!-- IE対策 --> ＿＿<h2><img src="../images/logo.gif" width="360" height="120" alt="タイトル"></h2> ＿</div> ＿<div class="nav"> ＿＿<ul> ＿＿＿<li class="travel"><a href="travel.html"><img src="../images/travel.gif" width="200" height="80" alt="トラベル"></a></li> ＿＿＿<li class="member"><a href="members.html"><img src="../images/member.gif" width="200" height="75" alt="メンバー"></a></li> ＿＿＿<li class="bbs"><a href="bbs.html"><img src="../images/bbs.gif" width="200" height="80" alt="掲示板"></a></li> ＿＿</ul> ＿</div> ＿<div class="footer"> ＿＿<address>連絡先</address> ＿</div> </body> </html>
理屈はとても簡単です。 たとえば、HTML/CSSだけで画像を画面一杯に配置する技術はお持ちですか？ それができれば、javascriptでその要素を入れ替えるだけです。 「jQeruy=プラグインの利用」と考えるのは早計です。 自分のやりたいことに100%フィットしたプラグインを見つけるほうが大変だと思いますよ。 理屈はとても単純ですし、難易度としても高くないはずです。 HTML/CSS/JQueryの基本だけでできます。 基本をお持ちでないのであれば、カスタマイズを考えずに、どこかのプラグインの仕様に従うしかないと思います。
No.2です。 ちょっとJavascript入っちゃってますが、こんな感じでどうでしょう？ （ちなみに「*」はIEハック用です） <html> <head> <title>テスト</title> <script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7 … <script type='text/javascript'> $(document).ready(function(){ var max=$('#boxwrapper .boxes').size(); for(i=0;i<max;i++){ if(i%3!=0){ $('#boxwrapper .boxes:eq('+i+')').css('margin-left','12px'); } } }); </script> <style type="text/css"> #boxwrapper{ margin: 0; padding: 0; border: 1px solid #000000; width: 900px; *width: 902px; height: 60px; } .boxes{ margin: 0; padding: 0; border: 1px solid #000000; width: 290px; *width: 292px; height: 18px; float: left; } </style> </head> <body> <div id='boxwrapper'> <div class='boxes'>test</div> <div class='boxes'>test</div> <div class='boxes'>test</div> <div class='boxes'>test</div> <div class='boxes'>test</div> </div> </body> </html>
まずそのサイトのソースを確認するのが確実です。 firefoxをお使いなら、Firebugというアドオンを使うと、その部分がどのように指定しているか、たちどころにわかります。 　ちなみに <div id="fixed-right"> <a target="_top" href="/tpoint/index.aspx">Tポイントが貯まります</a> </div> にたいして #fixed-right { position: fixed; right: 0; top: 214px; z-index: 100; }　globalHeader.css 848行目 ですね。この様にみんなわかりますよ。 　スタイルシートのposition:fixed;が使われています。
<div id="footer"> なら、 #footer{}　(詳細度[0100])ないしdiv#footer{}　(詳細度[0101])ですね。 <p class="powered">も考慮して、ここだけなら #footer p.powered{}　(詳細度[0111])ないしdiv#footer p.powered{}　(詳細度[0121])です。 　あるいは #footer p:first-child{}とかでもよい。 同じ宣言ですから、 div.entry_body p a:link,#footer{} としてセレクタをグループ化したほうがわかりやすい。文字通り 「footerのリンク色だけを記事内のカラーと同じにしたい」と言う意味になりますね。 　一度、仕様書を通して読んでおくことを強く強く勧めます。 ★5. セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ★6. 値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　詳細度の計算は、現行のCSS2.1と少し変更されています。4桁になった
＞トップページindex.phpのようなかんじですが（index.htmlではないようです） 　拡張子は関係ないです。Windows使いですと理解できないかもしれませんが、HTTP応答ヘッダを見れば、content-type:text/html;のはずです。拡張子で動作を決めるのはWindowsだけです--それではまずいので、ブラウザは応答ヘッダを見て処理している。 　FirefoxにLive HTTP Headers( https://addons.mozilla.jp/firefox/details/3829 ) HTTP/1.1 200 OK Date: Mon, 05 Mar 2012 01:48:41 GMT Server: Apache/2.2.16 (Debian) X-Powered-By: PHP/5.3.3-7+squeeze7 Set-Cookie: PHPSESSID=tm6v60a0gurt5f83vnc462og14; path=/ Expires: Thu, 19 Nov 1981 08:52:00 GMT Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0 Pragma: no-cache Vary: Accept-Encoding Content-Encoding: gzip Content-Length: 5853 Keep-Alive: timeout=15, max=100 Connection: Keep-Alive Content-Type: text/html　<----★ ＞firefoxとFirebug 　で、そこいら当たりはわかるはずです。 <div class="pie"></div> ・・ style.css (1112 行目) #value-static .pie { 　-moz-transform: rotate(180deg); 　background-color: #FFFFFF; } firefoxには、たくさんの Firefox アドオン - 拡張機能 - 開発者向けツール | Mozilla Japan の公式アドオン紹介サイト ( https://addons.mozilla.jp/firefox/extensions/dev … ) があります。利用したらよいかと・・
カスケーディングの最も重要な部分に詳細度の計算があります。言葉は難しいですが、要はより詳細に指定してあると、優先される。詳しさは セレクタに登場する要素数　　　　d クラスと擬似のクラスの数　　　　c IDの数　　　　　　　　　　　　　b 要素自体に書かれているスタイル　a(CSS2.1から変更された) です。 たとえば a{}だと[0,0,0,1]・・1と考えてよい a:link{}だと、[0,0,1,1]・・・11 p a:link{}だと、[0,0,1,2]・・・12 div p:link{}だと、[0,0,1,3]・・13 div.body a{}だと、[0,0,0,3]・・3 div.body p a[href="./index.html"]{}だと、[0,0,2,3] この詳細度を集計した後で詳細度が低いものから順に並べてより高いものがあれば上書きします。同じ詳細度なら後から登場したものが優先されます。 　それに、重要宣言も加味します。 　ご利用のブログですが、便利が良いのはfirefox+DOM Insoector(通常は入っている)で、文書構造を確かめます。先祖のどのような要素がどのようなclass名やidをもつ要素があるかわかりますから、それを使って目的の要素にスタイルが適用されるようセレクタを書きます。もちろん、HTMLソースそのものを見ても良いでしょう。 　fireBugというアドオンを使えば、リアルタイムに変更を反映して確認も出来ます。 基本は、全体に適用すべきスタイルを必要最小限の詳細度で記述する。 a:link{} ついで、外側の親要素から色を指定する。 div.entry_body a:link{} さらに、段落中だけなら div.entry_body p a:link{} ・・いったんリンクの色の指定を見つけてすべて消してから、適当な場所に改めて上記のように書き連ねていくとわかりやすいでしょう。どこに書いてあっても関係ありません。 　FC2ブログ自身を教えていただいて、ここという教え方も可能でしょうが、それでは身につきません。そんなに難しいものじゃありません。理屈は単純です。
前回回答したときは画像が見えなかったのですが、そうしたいなら ★一行の高さを指定するだけで、当然テキストはその中心におかれる。背景画像の高さと同じline-heightを指定するだけです。 タブは＿に置換してあるので戻すこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.section{position:relative;font-size:14px;} div.section div.nav{ ＿position:absolute;top:0;left:-200px; ＿width:190px;height:100%; ＿line-height:20px;/* これで行の高さが決まる */ ＿margin-left:0; ＿border:solid 1px gray; } div.section div.nav ul,div.section div.nav ul{ ＿display:block;list-style:none;margin:0;padding:0; } div.section div.nav ul li{margin:5px 0;} div.section div.nav ul li a{ ＿display:block; ＿margin:5px;padding:5px; ＿color:white;background-color:rgb(200,160,0); ＿font-weight:bold;text-decoration:none;text-align:right; } div.section div.nav ul li a:hover{background-color:red;} div.section div.nav ul li a:active{background-color:lime;} /* サンプルのため */ html,body{margin:0;padding:0;} div.header,div.footer{min-height:100px;background-color:silver;border:1px solid silver;} div.section{min-height:300px;margin:0 5px 0 200px;width:auto;border:solid 1px gray;} p{text-indent:1em;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>サンプル</h1> ＿</div> ＿<div class="section"> ＿＿<h2>サイトの案内</h2> ＿＿<p>一行の高さを指定するだけで、当然テキストはその中心におかれる。背景画像の高さと同じline-heightを指定するだけです。</p> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li><a href="#concept">コンセプト</a></li> ＿＿＿＿<li><a href="#walls">業務案内</a></li> ＿＿＿＿<li><a href="#shisetsu">施設紹介</a></li> ＿＿＿＿<li><a href="#access">アクセス</a></li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿</div> </body> </html>
各要素の左側の＋をクリックして広げていくと、そのようぞがどの部分かわかります。 たぶん、全体の高さを100%にしているのに、中身が短い・・
単純にホームページ作成会社に入って営業をするならスクールAでしょう。 クライアントの興味がある情報を提供する立場でしたらAが間違いありません。 携帯ビジネスをお考えでしたらスクールBですかね HTML5+CSS3は俺も教わりたいですｗ 現在はXHTML+CSSがトレンドなんでHTML5は覚える暇ないです。 ただできればスマホアプリの構築まで習えると仕事にありつけそうなんですが、 ちょっと足りない感じがしますね。 将来的にPHPプログラマーになりたい希望があるならスクールCですかね ただ84時間のネットショップ構築でPHPをどこまで覚えられるかは疑問ですが・・・ すでに出来上がっているPHPをページに組み込むだけなら勉強しなくても誰でもできることですからね。 ゼロからPHPを書き上げる授業なことを期待します。 HTMLの世界は最近薄給な世の中なので、営業じゃなく制作になられたいなら PHPかイラレフォトショをしっかり勉強されるのがよろしいかと思います。 仕事をするには、デザインセンスかプログラムかSEOに詳しいことが必要です。
HTMLが下記のようにきちんと書かれていたら、 タブは＿に置換してあります。 <body> ＿<h1>サンプル</h1> ＿<div class="section"> ＿＿<h2>章見出し</h2><h2>もうひとつ</h2> ＿＿<p>段落</p> ＿＿<div> ＿＿＿<h2>見出し(直下でない)</h2> ＿＿＿<p>記事</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h3>項目見出し</h3> ＿＿＿<p>記事</p> ＿＿＿<div class="section"> ＿＿＿＿<h3>節見出し</h3> ＿＿＿＿<p>段落</p> ＿＿＿</div> ＿＿</div> ＿</p> </body> 見出しをそうしたいなら、スタイルシートで div.section>h1, div.section>h2, div.section>h3 /* 必要なだけ、section直下の見出しと言う意味 */ { display:inline-block; line-height:1.6em; padding:0.5ex 0.5em; background-color:blue; color:white; } で良いです。sectionの最初に登場する見出しだけでしたら div.section>h1:first-child, div.section>h2:first-child, div.section>h3:first-child{} とします。 それぞれのプロパティやセレクタの意味について、わからなければ聞いてください。
　原因は、それぞれのコンテナブロック内の要素のmarginです。どのように消せばよいかはサンプルを見てください。 　なお、作成するときに*{border:gray solid 1px;}を書いて始めると、どの要素が競り合っているかがわかりやすいです。 　なお、DOCTYPEは、DOCTYPEスイッチとして、きちんとIEを標準モードで動くよう指定しましょう。互換モードの場合は処理が変わることがあります。たとえば、width:800;とすると互換モードではpxと判断してしまいます。 ★DOCTYPEスイッチ - W3G Web用語集 ( http://w3g.jp/others/data/doctype_switching ) 特に、XML1.0strict/transitinalの場合、サーバーから送信されるMIME-TYPEと競合して期待通りにならないこともあります。 　HTML4.01strictで作成し、きちんとDOCTYPEを宣言すると確実に標準モードで表示されますから無難です。そもそもtransitionalは、12年も前から非推奨ですし、他の多くのブラウザはウェブ標準ですから。 　【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Conformance: requirements and recommendations (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　また、数年後に勧告される予定のHTML5では、strictなんてありませんし、4.01strictをキチンと身につけていれば、 ★HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) を読む程度で移行出来るでしょう。 下記サンプルは、HTML4.01strictで作成してあります。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★The W3C Markup Validation Service ( http://validator.w3.org/#validate_by_input ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済みです。タブは＿に置換してあります。 　また、class名は、文書構造を示すものに変えてあります。HTML5ではそのまま要素名になります。 <div class="header">→<header>、<div class="section">→<section>、<div class="footer">→<footer> 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　それぞれのclass名の意味は ★3.1. 新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　を参照すること。 　表示幅は、基本80%,にスマートホン用に最小で640px、最大で900pxになります。(画像も伸縮します。) <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} div.header,div.section{ ＿width:80%;max-width:900px;min-width:640px; ＿margin:0 auto; } h1 img{display:block;width:100%;height:auto;} h1,h2{margin:0;background-color:silver;} --> ＿</style> </head> <body> <div class="header"> ＿<h1><img src="images/hikaku.jpg" alt="具体的見出し" width="950" height="300"></h1> </div> <div class="section"> ＿<h2>本文見出し</h2> </div> </body> </html>
私も数年前までは、これからはXHTMLだと信じてXHTML1.1に移行し始めていました。HTML4.01はHTMLの最後の仕様で、今後はXHTMLに移行すると・・ 　(XHTML1.0は、HTML4.01を、まったくそのままXMLに直したものでHTML4.01と本質的に同じものです。) 　★ただし、transitionalは、1999年の勧告当時から「非推奨」でした。!!! 　　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　当時はまだIEがブラウザの大半を占めていて、ウェブ標準でない互換モードに対応せざるを得ませんでした。その後、IE以外のブラウザがウェブ標準に対応していくに従い、IEもウェブ標準に舵を切りました。 　一方、見捨てられたはずのHTMLですが、そのよさが見直されて、W3CもXHTML2の策定を中止して、HTML5に集中することになりました。 ★HTMLに再び風は吹くか、そして「HTML 5.0」は － ＠IT ( http://www.atmarkit.co.jp/news/200703/13/eweek.h … ) ★HTML5が持つ本当の意味 － ＠IT ( http://www.atmarkit.co.jp/news/200801/25/html.html ) 　HTML5では、たとえばあなたの書かれたHTMLについて言うと 　table要素の、border、cellpadding、cellspacing、frame、rules、widthの属性がすべて破棄され、必須だったsummaryがoptionとして残るだけです。 　このように、HTML4.01Transitionalで残されていたすべてのプレゼンテーションに関わる要素・属性が【予告どおり】なくなります。残されるものも、プレゼンテーション的な意味は定義からなくなります。 　方向性は、XHTML1.1も同じでした。 　 ・・・・・・・・・・・・・・ IE８で見ているのですが崩れます。標準モードではないのでしょうか？ 　これはわかりません。前の回答のDOCTYPEスイッチを確認してください。他のブラウザで確認するのも良いでしょう。 ＞標準モードとはふつうにIEを起動させることですよね。 　違います。 ＞またHTML4が良いと拝見したのですが、XHTML1.0ではだめでしょうか？ 　まったく同じものです。XMLであるかないかが違う。そうでしなくてHTML4.01strictないし、XHTML1.0strictと言う意味です。 ＞リファレンスは初心者の私にはなかなか難しいのですが、XHTMLのリファレンスを少しづつ見ていきたいと思います。 　HTML4.01strictのほうが資料は多い。 　私は６・７年前からHTML4.01strictです。一時期XHTMLに移行しましたが、現在はまたHTML5を見据えたHTML4.01strictに戻しています。 ＞XHTMLでなくHTM4.01strict+CSS2.1で作成するとブラウザによる違いはなくなるのでしょうか？ 　誤解されないように、XHTMLかHTMLかの差ではなく、strictかそうでないかの差です。!!!XHTML1.0strictでも構いません。
センタリングしたいとのことですが、とりあえず、HTML5とかCSS3とか横並びにしてるとか、一切何も関係ないですよ。単純にセンタリングしたい要素(ul)の幅が100%なのでセンタリングしようがないというだけです。 ulに幅とmargin:0 auto;を設定するだけの話です。 ie6対応したいなら、ul自体にtext-align:centerですね。
カテ違いの様ですが、 そのファイルの問題では？ メモ帳や他のエディタでどうなりますか？ （読み取り専用ファイルになっているとか・・・　プロパティで確認） そのエディタだけの動作で上書きできないなら、 悩むより、 アンインストール → 再インストールしてみては？
・表示されている要素のtitleの表示を隠すことは出来ない。 　[対策] 　　詳細な説明を[:active,:focus時に]表示される要素でなければならない。 「<br />を使用せずに現在のような表示を実現できないだろうか」 　は、出来ません。!! 　期待される動作をさせるためには、 ・HTML自体を文書構造に従った正しいものに直すこと。 　結果的にtichboxは除外されます。(javascriptを改造しない限り) 　その上で、きちんとHTMLを作成します。それでよければHTMLは <div class="album"> 　<ol> 　　<ul> 　　　　<li><img サムネイル> 　　　　　　<ul> 　　　　　　　　<li><img></li> 　　　　　　　　<li>説明文</li> 　　　　　　</ul> 　　　　</li> 　　　　<li><img サムネイル> 　　　　　　<ul> 　　　　　　　　<li><img></li> 　　　　　　　　<li>説明文</li> 　　　　　　</ul> 　　　　</li> 　　　　<li><img サムネイル> 　　　　　　<ul> 　　　　　　　　<li><img></li> 　　　　　　　　<li>説明文</li> 　　　　　　</ul> 　　　　</li> 　　</ul> </div> あるいは、 <div class="album2"> 　　<div class="index"> 　　　　<ol> 　　　　　　<li><a href="#a1"><img サムネイル></a></li> 　　　　　　<li><a href="#a2"><img サムネイル></a></li> 　　　　　　<li><a href="#a3"><img サムネイル></a></li> 　　　　</ol> 　　</div> 　　<div class="data"> 　　　　<dl> 　　　　　　<dt id="a1"><img>画像の</dt> 　　　　　　<dd>説明</dd> 　　　　　　<dt id="d2"><img>画像の</dt> 　　　　　　<dd>説明</dd> 　　　　　　<dt id="d3"><img>画像の</dt> 　　　　　　<dd>説明</dd> 　　　　</dl> 　　</div> </div> のようなHTMLになるでしょう。いずれの場合もスタイルシートを使わない検索エンジンなどが文書の内容・構造をきちんと理解できますね。その上で、(背景を黒っぽくして画像と説明を表示するなど)期待される表示をスタイルシートでデザインするのが本来の方法です。そうしておけば、先で他のデザインにすることも、スマートホン用に別のスタイルを書くことも自由自在です。 　ただ、いずれにしても自身の知識や能力と見合ったものでないと、JQueryを使おうが、CSSで行おうが難しく使いこなせないでしょう。
iframeで表示させるHTMLは、それ自身単独で表示されるものと同価ですから、そのファイルからスタイルシートを指定しなければなりません。 HTMLから呼び出されるファイルはcharsetを明示的に指定しない限り同じ文字コードと判断します。しかし、iframeにはcharset属性はありませんから、相手のHTMLで指定されます。 　スタイルシートの場合は、charsetがありますから、 <link rel="stylesheet" type="text/css" media="screen" href="./styleSheet/standard.css" charset="utf-8"> のように指定します。
＞しかし、教えていただいたステータス応答一覧を読んでも、まるで外国語で意味がわかりません。 　確かに・・私も学生時代英語には泣かされましたからよくわかります。・・でも、出てくる単語はそんなに種類ないですし、今はオンライン翻訳もたくさんあるので、それで調べたらすぐ覚えられるでしょう。 　304 Not Modifiedは、「更新なし」ですから、それでちゃんとOKでしたら、ブラウザの描画が追いついていないか？キャッシュの異常・・ 　いずれにしろ、読み込まれていない画像があれば、その画像を右クリックして画像の情報を確認して、HTTP Headerのなかから該当するファイルの要求・応答を確認する地道な作業になります。 　想像するに、サーバーへ次々に要求を続けるため、ネットかサーバーの不調、過負荷、あるいは、ブラウザの処理が追いつかない。。などの原因がつかめるでしょう。 　調べるにはこの方法しかないのです。
SeaMonkey - Wikipedia ( http://ja.wikipedia.org/wiki/SeaMonkey ) 　すなわちMozilla Composer - Wikipedia ( http://ja.wikipedia.org/wiki/Mozilla_Composer ) 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 2011年11月22日 - SeaMonkey 2.5リリース。アドオン管理機能を改良、HTML5やWebSocketへの対応を強化した。 2011年12月20日 - SeaMonkey 2.6リリース。HTML5のコンテキストメニューに対応、Composerに印刷プレビュー機能を追加、型推論導入によるJavaScriptの高速化。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［SeaMonkey - Wikipedia( http://ja.wikipedia.org/wiki/SeaMonkey )］より 本家のfirefoxと平行に開発が進んでいますから、対応が謝意こと。 Webオーサリングツールの中では、もっともWeb標準に準拠していること firefoxと同様に、Web 開発者向けツール ( https://addons.mozilla.org/ja/seamonkey/extensio … )を含めて豊富なアドオン ( https://addons.mozilla.org/ja/seamonkey/extensio … )があること
デザインとPHPは無関係です。 つまり、 PHPに触る事なくCSSだけで設定しますので、 PHPを理解する必要は無いでしょう。 （構造を変更したい場合は、HTMLも変更する必要がありますが・・・）
No.5なんですけど，一部日本語がおかしいですね…… なんとなく理解していただけたら幸いです。 これだけでは寂しいので，情報を追加しておきます。 ボーダーで装飾～CSSテクニック～ http://www.stylish-style.com/csstec/basic/m-bord … こういったものもあります↓ CSSで見出しとかに使う「装飾のための記号」を表示させる方法 http://www.uka-blog.com/web/html_css/entry_00138 … 検索する文字に ・装飾 ・エフェクト ・デコレーション も加えてください。
わかりやすく表現するために、ものすごく語弊のあることを言いますね。 慣れている人は、フレームやtableで構成(レイアウト)しません。 素人は、tableやフレームを使いたがります。 それぞれに理由がありますが、簡単に言うと、tableやフレームは、理解がしやすく扱いやすいということだと思います。 対して、慣れている人がフレームやtableを使わない理由は、制作以外のところでいろんな不利があるからです。 難しいことはすべて割愛します。
「固定 可変 メリット デメリット」あたりで検索してみてください。足して2で割ったような手法も出てきます。 現在どちらの考えがいいというより、ターゲット層により使い分けたり、制作者の判断・このみで決定します。1ｐｘのずれも許されない場合は固定が多いですが、読者に柔軟に対応したければ、合わせ技や可変（リキッド）となります。 長短をしり、ご自分にできる範囲でご自分で決めてください。 ＞全体サイズの何%といった指定が出来るのでしょうか？ できます。可変・リキッドレイアウトなどと呼ばれています。 メニュー30％本文70％などと指定できます。
著者が制約するつもりでも利用者は自由に訪問してきます。近年は携帯電話、i-phone,i-padのような狭いウィンドウから、とても幅広のディスプレイのパソコンやインターネット対応テレビ・・。この傾向は、今後ますます進行するでしょう。 　そのため、最小640px～(ウィンドウの90%)～最大900pxあたりが良いでしょう。 width:90%; min-width:640px; max-width:950px; とかね。このままでもi-phoneに対応しますが、特別考慮するときは、別のスタイルシートを適用させます。 　なお、container(wrap)というclass名(id名)は、あまり望ましくありません。オーサリングツール由来のものですが、class/id名は、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［7.5.4要素のグループ化: DIV要素とSPAN要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　あまりにこの説明が漠然としていたため、へんなclass/id名が使われてきましたが、それではということで、HTML5では、それまで「文書に構造を付加するため」のclass名を要素にすることになりました。 ・HTML5 における HTML4 からの変更点/新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) <div class="article"> 　<div class="header"> 　</div> 　<div class="section"> 　</div> 　<div class="footer"> 　</div> </div> とかですね。そしたら、そのまま少し書き直せばHTML5になりますし、なによりも検索エンジンはこれらの文書構造を示すclass名を理解してくれますからね。
どういうレベルでホームページを作られているのかわかりませんが、ホームページビルダーなどのオーサリングツールだけで作られているのでしたら、無理にフォルダ分けする必要はないですよ。 パッと思いつくところで、フォルダ分けにする利点は、 ・管理がしやすい。 簡単にいうと、ファイルを発見しやすいということです。 しかし、ツールに任せているのであれば、これはあまり問題ないですね。 ・SEO施策となる。人目にわかりやすい。 たとえばURLが、/works/2012.htmlだと、2012年の実績だなと、管理する人も閲覧する人も検索ロボットも分かりやすいということです。 といっても、小規模サイトであれば、フォルダ分けしていないことによって何か都合が悪くなることはないと思いますよ。 また、リンク先の変更ですが、地道にやるしか方法はないと思いますよ。一貫性のある変更ならエディタの置き替え機能くらいでしょうかね。
常に仕様書を確認する癖をつけましょう。 REC-CSS2 邦訳 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　→9.3 配置体系（Positioning schemes） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから relative 　ボックスの位置はまず通常フローにて計算され（この計算で得られた位置を通常位置と呼ぼう）、その通常位置から相対的に配置される。 なお、あるボックスBが相対配置される場合、それに後行するボックスの位置は、Bが相対配置されていないかのように計算される。 absolute 　ボックスの位置（と場合によっては大きさ）は'left'、'right'、'top'、'bottom'という4つのプロパティで指定される。 これらのプロパティは、ボックスの位置を包含ブロックからの距離として示すものである。 絶対配置のボックスは通常フローには従わないので、兄弟要素のレイアウトに影響を与えない。 また、絶対配置のボックスにはマージンがあるが、これは他のどのマージンとも相殺しない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［視覚整形モデル/9.3 配置体系（Positioning schemes）( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )］より 　relativeで自身を移動させることは少ないと思いますが、次のabsoluteが位置判断するとき、その親のコンテナブロックがstaic以外のときは、その親コンテナブロックの左上が基準点になります。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 'position'が'static'以外の値を取る時、その要素は位置指定されている（positioned）と言う。 位置指定された要素は、位置指定されたボックスを生成する。 位置指定されたボックスは以下の4つのプロパティに従ってレイアウトされる: ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［視覚整形モデル/9.3.2 ボックスの位置を指定する（Box offsets: 'top', 'right', 'bottom', 'left'）( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )］より ＞(absoluteでは)画面の上から３０ピクセル、左から４０ピクセルの位置ですよね？ 　違います。その祖先にstatic以外のコンテナがあれば、そこが基準になります。 ＞これを　position:relative;にすると、 　本来(static)のときに置かれるはずだった場所が基準になります。だから相対です。 　いずれにしても、それらの値の意味や関連する他のプロパティとの関係を含めて、9.3 配置体系（Positioning schemes） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )全体を読まないと理解できないと思います。 　★一部の情報だけでは完璧に説明するのは無理です。とにかく仕様書に目を通してください。
＞やはり６個目以降は右に表示されないようなのです…orz 　それは無理です。javaScript自体を改造しないとなりません。スクロールバーどまりで妥協してください。
ホームページビルダーをプロが使わない一番の理由は・・ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから しかし、動作モードや設定などの指定によっては、出力されるHTMLなどに問題が発生することがある（タグが自動的に修正されてしまうなど）ため、利用には注意が必要である。それらの問題が理由で、プロのウェブデザイナー（ウェブページ制作者）の場合、ホームページ・ビルダーを使用することはまずない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［ホームページ・ビルダー - Wikipedia/作成モードごとの特徴( http://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC% … )］より 　テキストエディタで修正したら、ビルダーで開いたらダメです。そのままアップロードしてください。
ぜんぜん違う方向で書きます。 何から学習すればいいか、絞れなくて困ってるように読めます。 今雇い入れれてもらった企業に徹底的にあわせた働きをする方向で考えてはどうでしょう。 仕事の上のデザインするときの流れをざっくり３段階想定 ０配色とレイアウトの元ネタを脳内在庫として沢山もつ。 １仕事の依頼がきたら、クライアントのニーズの捉える。 ２ニーズにあわせた配色とレイアウトを最短で提供。 だとすると、 御社の営業さんが得意とするクライアントさんに必要とされやすい範囲の０を収集。 １はデザインだけでなく仕事をする上でお客様の言うことをきく力を養ったり得意な人と一緒に方向性を決めたりする。 ２は０と１にあわせて発生する作業で、何度も発生する操作をなるべく短くする方法を調べて身につける。 これが魔法のようなクオリティ＆スピードでアウトプットできてる人は「センスいいねー。また頼みたい。」ってなるのかなあと。
メニューの項目の枠でしたら、画像ですが？？？ スタイルシートにて、:hoverで背景画像をずらす、もしくは入れ替えている。 そのサイトの仕組みは、ソースを見たらわかるので省きます。 　firefox+firebugで、詳しくわかります。 　一般的には、HTMLが <div class="nav"> 　　<ul> 　　　<li><a href=""></a></li> の場合 div.nav ul li a:visited{background-image:(url);;background-position:0 50px;} div.nav ul li a:link{background-position:0 0;} div.nav ul li a:hover,div.nav ul li a:focus{background-position:0 100px;} div.nav ul li a:active{background-position:0 150px;} などとするでしょう。 詳しくは、 ロールオーバー :hover 背景画像 - Google 検索 ( http://www.google.co.jp/#sclient=psy-ab&hl=ja&sa … )
＞i-padではflashをサポートしていない i-phoneもユーザーエージェント候補に挙げるなら、きちんと代替手段を用意しましょう。 詳しくは ★13.3 一般的包含: OBJECT要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) media別に、スタイルシートで振り分けるのも良いでしょう。 　flashはあくまでPC用だけと割り切るか、<video>など他の手法を使いましょう。 ＞タブレットではmouseoverが機能しない :hoverだけでなく、:focus も指定しましょう。 また、端末によってスタイルシートを振り分けるのも良いでしょう。
＞ソースとしては間違っておりますし、 　いいえ、あなたの書かれたソースで、 ・インライン要素であるIMG(画像)要素が、ブロック要素内にないこと ・タグ内に<br>を書いてはならない ことを除けばあってます。その部分は修正しました。Validatorでチェックするとあっているはずです。 　title属性の内容を表示するのは　E:after{content:attr(attribute-name);}または、E:before{content:attr(attribute-name);}です。(Eはタイプセレクタ、attribute-nameは属性の名称です。 :hoverという動的な擬似クラスでマウスオンです。 :activeでクリックです。それと:focusを組み合わせると期待の動作になるでしょう。 　生成された内容のdisplay,position,size,z-indexなどは、普通に指定してください。 ★生成内容、自動番号振り、リスト ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) (注)現行のCSS2.1で変更がいくつかあります。CSS2.1の邦訳は知りませんので、原文を確認してください。関連するプロパティは 　→12 Generated content, automatic numbering, and lists ( http://www.w3.org/TR/CSS2/generate.html ) 　→'white-space' ( http://www.w3.org/TR/CSS2/text.html#propdef-whit … ) です。 　なお、改行コードは<br>ではなく、そのまま、または\Aで記述し、white-spaceで指定すること。改行と空白文字の扱いはCSS2.1では、ことなります。上記(white-space)を参照してください。 　normal,pre,nowrap,pre-wrap,pre-lineの５種類になります。 　javascriptで動作させる場合も、これらのスタイルシートを書き換えないと出来ません。いっそのこと、すべてCSSで行うほうが簡単な気がします。 　
基本的には、データベースとそれから必要なデーターを拾い出してソート(並べ替え)です。 様々な方法が考えられますが、簡単なものなら ★CGI RESCUE - ネットサーフレスキューＷｅｂ裏技 ( http://www.rescue.ne.jp/ )の下ほどにある「簡易データベース」のようなものもあります。 ＞avaスクリプト、ajax、phpなど使われている技術が知りたいです。 　それらは、どちらかと言うとユーザー側、もしくはユーザーとサーバー間の問題で、この場合は、サーバーサイドのみ考えて良いでしょう。(PHPを使うことも出来ます) 　CGIなどWebプログラミング - Wikipedia ( http://ja.wikipedia.org/wiki/Web%E3%83%97%E3%83% … )のサーバーサイドプログラミングの知識が必要になるでしょう。 　
ブラウザキャッシュが残っているため、本来は表示されないはずのページが表示されたり、過去のページが表示されたりするので混乱しているのだと思います。 　サーバーの動作は極めて単純です。例を挙げて説明すると、リンクなり、ブラウザのURL蘭にURLを記入して、HTTP要求ヘッダをつけてサーバーにファイルを要求します。 [例] get /abc/efg/hij と要求します。そのときに使用しているブラウザや使用言語、、扱えるファイル、リンク元のページなどなどの様々な情報も合わせて送信されます。 サーバーの処理 1) /abc/efg/hij のファイルを探します。 　1-1)あればそれを提供します。提供の方法はファイルごとに決められます。 　　単にファイルを提供するか、処理して提供するかなど 　　.htmlの拡張子ならtext/html という種類とあわせて 　　.jpgなら、image/jpeg とか 　1-2)なければ、 　　それがディレクトリだとみなして/hijというディレクトリの存在を確認します。 　　1-2-1)ディレクトリが存在すると、そのディレクトリの設定を確認します。 　　　★ディレクトリの一覧を表示する。(現在はあまり行われていない) 　　　★INDEXファイルを探してそれを提供します。 　　　　どのファイルをINDEXに指定するかは設定できます。たとえば 　　　　　index.html>index.htm>INDEX.HTML>index.cgi 　　　それが実行形式のプログラムなら、実行します。 　　　それもなければ、/hijをもサーバーの環境変数PATH_INFOに格納して 　2) /abc/efgについて同様の検索を行います。 　　　★もし、そこにINDEXで指定してある実行ファイルがあれば、実行します。 　　　　(このとき、PATH_INFOを使うかもしれません。) 　　なければ、最後に 　3) /abcについて同様に・・ 　4) それもなければ、 　　INDEXで指定してあるファイル(index.htmlなど)を表示しますし、それが実行ファイルなら実行しますし、それすらなければ、/abc/efg/hijがないとして、指定されたエラーを返します。単に404のこともあれば、403のこともあります。 　→HTTP入門 ( http://www.tohoho-web.com/ex/http.htm#status ) 　複雑怪奇ですが、よく読めば極めて単純な作業を繰り返しているだけです。(お馬鹿な機械なので(^^) 　/defというファイルやディレクトリが、存在しなくてもページが表示されることはあります。 　まあ、当面は必要ない知識ですので読み飛ばしてください。 　一般的には、トップディレクトリ--HTTPサーバーでのルート(根っこ)には、無難な、サブディレクトリへのリンクでも書いたHTMLをおいておくほうが良いです。画像ファイルを置いても良いですが ・INDEX--DIRECTORY_INDEXを設定しなければなりません・ ・リンクの何もないのでユーザーが混乱します。 　また、メインになるサイトのトップページを置いても良いでしょう。 　　
CSSの一番の利点は何ですか？ 「スタイルシートを変えることでプレゼンテーションを一挙に変更できる」 「プレゼンテーションをHTMLと切り離すことで、HTMLも（CSSも）簡略になり、ネットワークの付加が低減できる」 　などですね。 　答えは、出たと思います。 　画像などと同じく、そのディレクトリ以下のすべてに利用されるものは、そのディレクトリに置くということです。 / ルート |-- index.html |-- contactus.html |-- CSS/　　サイトすべてで利用されるCSS |-- images/ サイトすべてで使用される画像 |-- dir1/ 　サブディレクトリ |　　|-- index.html |　　|-- CSS/　　サブディレクトリ以下でのみ使用される画像 |　　|-- images/ サブディレクトリ以下でのみ使用されるスタイルシート |-- dir2 |　　|-- index.html |　　|-- CSS/ |　　|-- images/ |　　|-- dir2-2/ |　　　　　　|-- index.html |　　　　　　|-- CSS/ |　　　　　　|-- images/ |-- dir3/ などですかね。 　唯スタイルシートは、ユーザビリティの関係でサイト全体で統一されることが多いのでサブディレクトリにあるものは極めて少ないです。 CSS/ の中身は general.css　　　サイト全体で共通に使用される永続的スタイルシート standardSape.css 配置やデザインを指定するスタイルシート standardColor.css色のスタイルシート top.css　　　　　各ディレクトリのトップページindex.htmlで使用するスタイルシート content.css　　　一般的記事のスタイルシート smartPhone.css　 メディア別　スマホ用スタイルシート ttyhandheld.css　メディア別　携帯電話用、モバイル端末スタイルシート print.css　　　　メディア別 印刷用 ・・・必要な場合aural(読み上げソフト用)やbraille(点字端末)用がある場合もあるでしょう。 そして、代替スタイルシート revers.css　　反転表示用 small.css　　狭いディスプレイ用 などを用意していることもあります。プレゼンテーション用のものがあったり ユーザーの選択、または端末の種類によってスタイルシートは選択され、それぞれのスタイルシートが適用された状態で利用できるようにしてあります。したがって、一箇所で管理するほうが楽です。スタイルシートの編集時にHTMLを開く必要はないので、HTMLの近くにおかれる必要もありませんし・・ 例えばトップページがある階層に『CSSフォルダ』を作って、全てのhtmlファイルはその中に作るCSSファイルを参照した方が良いのでは？」 　基本--第一原則--はそうです。そうすることで、スタイルシートを変えるだけですべてのページのデザインを一挙に変えられますし、おなじ設定を何度も読み込ませる必要もなくなります。
＞(h1,h2,h3,h4,h5,h6,p,table,th,td,div,ul,ol,li)にhtmlとbodyを加えれば、全称セレクターと同じ設定になるのでしょうか？ 　いいえ。HTMLのタイプとブラウザによって差があります。それぞれのHTMLで使われている要素(タグ)の一覧はこちらにあります。 Another HTML-lint : Tags List ( http://openlab.ring.gr.jp/k16/htmllint/tagslist. … ) 　ま、当面思いつくものだと dl,dt,dd,blockquote・・・
＞最初はclear:bothを指定していたのですが、ネットで「clearfix」の方が良いとのことで 　ネット上の情報の大半は間違いが多いですね。玉石混淆、藁の山から針を探すようなものです。一度仕様書の全体に目を通されることをお勧めします。 　デザインのためにHTMLを書くのは、「構造とプレゼンテーションの分離 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」からして疑問です。 ★clear:fixなんて、まったく要りません!!!、デザインのために無用なタグや属性を書くのは、HTMLの趣旨から外れています。 <body> <div class="header"><!-- 文書のヘッダ --> <h1>ページのタイトル</h1> <div class="nav"><!-- ナビゲーション --> <ul> <li><a href="" title="お品書き" class="current">お品書き</a></li><!-- カレント(現在地) --> <li><a href="" title="ドリンク">ドリンク</a></li> </ul> </div> </div> <div class="section"> <p id="kodawari"> <img src="image/top_bar_coment.jpg" alt="###" width="635" height="40"> </p> </div> </body> </html> ・・・・デザインは考慮せず、基本どおりHTMLを書けばこんなに簡単・・・ ・・・・そのためスタイルシートも簡単でわかりやすくなる・・・ 肝心な部分は、 div.header{position:relative;}/* 子孫の要素の基準にするためrelativeにしておく */ div.header div.nav{/* header内のnavについて */ position:absolute;left:0;bottom:-30px;/* 絶対配置でheaderの下 */ width:100%; line-height:30px;height:30px; } div.header div.nav ul,div.header div.nav ul li{ display:block;list-style:none; margin:0;padding:0; height:26px;/* 20px - 2*(2px) */ text-align:center; } div.header div.nav ul li{ float:left;width:20%; } これだけです。 ★ウェブ標準のHTML4.01strictです。 ★ウィンドウ巾はリキッドにしてあります。i-phoneにも対応 ★メニュー項目は増減できます。巾を調整する ★calss名は、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML4.01仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　に従っています。HTML4.01ではここが混乱の元になったので、HTML5では<header><section><nav><footer>のように明確になります。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み 全体は、 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> <meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> <title>サンプル</title> <meta name="author" content="ORUKA1951"> <meta http-equiv="Content-Style-Type" content="text/css"> <link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > <link rel="START" href="../index.html"> <style type="text/css"> <!-- html,body{margin:0;paddng:0;} div.header,div.section{/* セレクタはグループ化して同じプロパティを重複させない */ width: 90%;margin:0 auto;padding:0;/* padding:0でサイズが変化しないよう */ min-width:640px;/* i-phone */ } div.header{position:relative;}/* 子孫の要素の基準にするためrelativeにしておく */ div.header h1{margin-top:0;} div.header div.nav{ position:absolute;left:0;bottom:-30px;/* 絶対配置でheaderの下 */ width:100%; line-height:30px; height:30px; } div.header div.nav ul,div.header div.nav ul li{ display:block;list-style:none; margin:0;padding:0; height:26px;/* 20px - 2*(2px) */ text-align:center; } div.header div.nav ul li{ float:left; width:20%; } div.header div.nav ul li+li{ margin-left:5px; } div.header div.nav ul li a{ display:block; height:100%; width:100%; text-decoration:none; background-color:yellow; border:outset 2px gray; } div.section{ margin-top:30px; } /* リンクの動的な擬似クラス */ div.header div.nav ul li a:visited{backgrond-color:rgb(160,160,0)} div.header div.nav ul li a:hover{background-color:pink;} div.header div.nav ul li a:active{background-color:red;border-style:inset;} /* 位置関係をわかりやすくするため色づけ */ div.header{background-color:aqua;height:100px;} div.section{background-color:lime;height:400px;} --> </style> </head>
float:leftにしているからです。もちろんlist-style:imageでもダメです。list-styleとdisplayは競合します。--というか、list-styleを指定する場合はdisplay:list-itemです。 　floatを止めて、list-item/list-styleを指定します。 ★9.7 'display'、'position'、'float'の関係（Relationships between 'display', 'position', and 'float'） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ★9.2.5 'display'プロパティ（The 'display' property） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ★12.6.2 リスト（Lists: the 'list-style-type', 'list-style-image', 'list-style-position', and 'list-style' properties） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )
absoluteは、ご存知のように絶対配置ですから、それに内包されない他の要素に影響を与えることはありません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから absolute 　ボックスの位置（と場合によっては大きさ）は'left'、'right'、'top'、'bottom'という4つのプロパティで指定される。 これらのプロパティは、ボックスの位置を包含ブロックからの距離として示すものである。 絶対配置のボックスは通常フローには従わないので、兄弟要素のレイアウトに影響を与えない。 また、絶対配置のボックスにはマージンがあるが、これは他のどのマージンとも相殺しない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［視覚整形モデル( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )］より 　よって以下のブロックに影響を与えるためには、positionの値をstaticないしrelativeにする必要があります。header内にabsoluteするものがあれば、relativeにする。 　ヘッダーの高さを固定するの方法だと、次に続くブロックの位置をずらすしかないです(relativeならmargin)で、ただし、headerなどはabsoluteを使わないほうが無難です。ユーザーが目が悪くてフォントを拡大したり、あるいはウィドウが狭いと表示されないものが出来たりします。 　基本的にルートにあるコンテナブロックは、ナビゲーションなど一部を除いてabsoluteやfixedさせないほうが無難ですね。
＞あるtableのCSSが他のtableに影響を与えないような方法がないかということです。 ＞classでグループ名を決めてもすべてのtableに影響が及んでしまします。 　ひょっとして 　HTMLでは、<table class="abc">としてあって、スタイルシートでは、table{border:・・}の指定をしているとか。 　この場合、すべてのtableに適用されますね。table.abc{border:none;}とすれば、より高い詳細度ですから優先され、解決します。 　また、スタイルシートの場合、table自体のborderとセルのボーダーは区別されますから、tableのborderを消しても、セルのボーダーは残ります。(HTMLとは違う) 　その場合、table.abc th,tabe.abc td{border:none;}などとセルについても設定の必要があります。現在のborderがtable由来か、セル由来かはborder-collapse:separate;border-spacing:5px;とかを指定すると確認できます。
どこ？
　【カスケーディング】スタイルシート・・CSSを身に付けようとされているのでしょうね。そのとき、最初に覚えなければならないのは、カスケーディングです。 　カスケーディングとは、「あることが次々に影響を及ぼしていく」と言うような意味で、CSSのもっとも便利な機能です。そのために、現在ではWeb標準となっています。(HTML5では宣言しなくてもCSSだと判断される。) 　ところが、多くのCSS説明サイトではこの仕組みについての言及が、ほとんどされていません。 　各ブラウザで表示が異なるのは、スタイルが適用される--カスケーディング--の仕組みが ユーザーの最重要宣言 ↓ 著者の最重要宣言 ↓ 著者の宣言 ↓ ユーザーの宣言 ↓ デフォルトの宣言(ブラウザの持っているスタイルシート) となっているからです。 ★tableに関するプロパティを指定漏れがあると表示を同一には出来ません ★逆にtableに設定可能なすべてのプロパティについて、きちんと指定しておくと表示をそろえることが出来ます。 *{ margin:0; padding:0; font:normal normal normal 100%/1.3 "ＭＳ Ｐゴシック","Osaka",sans-serif; border:none;} の意味は、*(全称セレクタ=詳細度[0])で、margin,padding,font(簡略化プロパティ),borderについて指定しています。 　しかし、それ以外のtableに関連するたくさんのプロパティや一般的なプロパティについては指定がありませんからカスケーディングのルールに従ってデフォルトのスタイルシートが適用されるからです。 　本来は全称セレクタ(*)で、これらの指定を抹消するのは避けるべきです。これもデフォルトのこれらの設定を消してしまうため、すべての要素について適当な値を設定しなければならなくなるからです。 　たとえば、箇条書きに関する(ul,ol,dl,dt,dd,li)などの要素について、すべて設定しなおさなければならなくなります。 　カスケーディングを本気で身に付けようとされるなら、まずカスケーディングの仕組みについて学んでください。そうすると、無駄なHTMLを書く必要もなくなりますし、CSSも随分と簡単になります。 　たとえば、現行のHTML(がきちんと書かれていたら)に一切class名やidを付け加えなくても、HTMLに手を加えずデザインを変えることが出来ます。 5. セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 6. 値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) (注)カスケーディングのうち詳細度などは、CSS2.1(現在ウェブ標準)では多少変更されています。ただ、CSS2.1の仕様書の邦訳は知りません。 　→Cascading Style Sheets Level 2 Revision 1 (CSS 2.1) Specification ( http://www.w3.org/TR/CSS2/ ) 　→変更点 ( http://www.d-toybox.com/spec/CSS2.1/appendixC/ )はあります。
rowspan="2"では？
＞buttonが直接marginを持っていた方が都合がよいのでそういった方法があるか、という質問です。 　あくまで、form要素内のbuttinですが、本来インライン要素なのでdisplay:blockに指定した時点でblockとしてのサイズになりますから、その親のコンテナブロックとの関係でサイズが決定されますからむりでしょう。 ＞さまざまな理解度の人間が編集に関わりますので、このような前提条件がありません。 　これは、さすがに想定外です。私も担当部署で編集を許可していることがありますが、その場合は、「サイト全体のデザインを統一しないと利用者が混乱する」という名目で、詳細なテンプレートやマニュアルを渡し、かつ講習を受けてもらいます。それが出来ない場合は、SSPで処理するデータ形式や、XMLにしてもらっています。 [XML] <文書> 　<title></title> 　<著者> 　　<部署> 　　　<部></部> 　　　<課></課> 　　　<係></係> 　　</部署> 　　<名前> 　　　<氏></氏><名></名> 　　</名前> 　</著者> 　<記事> ・・・とか。 ＞複数人で制作するので共通のデザインとして 　^^^^^^^^^^^^^^^　　　^^^^^^^^^^^^ 　の場合は、最低限、共通の文書構造に従ったHTMLを作成してもらうと言うことが絶対に必要になります。それをなくして、共通のデザインというのは無理です。それについては、クライアントに理解してもらうしかありません。もちろん、こちから一方的に決めるものではなく、あくまで要望と限界の相談になります。 　そうしておくと、将来、担当者や業者が変わっても継続的にメンテナンス可能になります。
簡単なソースですが、 ・最初の方法は、はるかに簡単ですし、画像を読み込まない場合も適切に表示されます。 ・二番目の方法は画像を読み込ませない場合読めません。 　いずれの方法を使っても、:hoverや:active、:visitedで画像を変化させるロールオーバーが可能。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　オプションでCSS3を選択する <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> <meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> <title>サンプル</title> <meta name="author" content="ORUKA1951"> <meta http-equiv="Content-Style-Type" content="text/css"> <link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > <link rel="START" href="../index.html"> <style type="text/css"> <!-- div{clear:left;} div.nav{ width:950px;margin:0 auto; height:48px; line-height:48px; text-align:center; } div.nav ul,div.nav ul li{ display:block;padding:0;list-style:none; margin:0;padding:0; } div.nav ul li{float:left;} div.nav ul li+li{margin-left:3px;} #home{width:148px;background-image:url(images/home.gif);} #price{width:135px;background-image:url(images/price.gif);} #catalog{width:154px;background-image:url(images/catalog.gif);} #access{width:135px;background-image:url(images/access.gif);} #reserve{width:155px;background-image:url(images/reserve.gif);} div.nav ul li a{display:block;text-decoration:none;} div.nav ul li a:link{color:transparent;}/* CSS3 */ div.nav ul li a span{display:none;}/* CSS2.1にするときはa内のテキストを<span></span>で囲み上の行を消す */ --> </style> </head> <body> <h1>サンプル</h1> <div class="nav"> <ul> <li><a href="#"><img src="images/home.gif" width="148" height="48" alt="Home"></a></li> <li><a href="#"><img src="images/price.gif" width="135" height="48" alt="Price"></a></li> <li><a href="#"><img src="images/catalog.gif" width="154" height="48" alt="Catalog"></a></li> <li><a href="#"><img src="images/access.gif" width="135" height="48" alt="Access"></a></li> <li><a href="#"><img src="images/reserve.gif" width="155" height="48" alt="Reserve"></a></li> </ul> </div> <div class="nav"> <ul> <li><a href="#" id="home">Home</a></li> <li><a href="#" id="price">Price</a></li> <li><a href="#" id="catalog">Catalog</a></li> <li><a href="#" id="access">Access</a></li> <li><a href="#" id="reserve">Reserve</a></li> </ul> </div> </body> </html>
WordpressからWordpressの引っ越しならNo.1のようにデータベースのエクスポート、引っ越し先でインポートで良いのですが、 質問者さんのパターンは、手書きサイトからWordpressへの引っ越しですから新規作成と同じです。 引っ越し先でWordpressを設定し、 既存サイトの内容を、Wordpressの投稿画面から１つずつ投稿（登録）する必要があります。 そういう作業を自動化するようなツールがあればそれを使えば良いですけど、私はそういうツールは知りませんので、悪しからず。
こちらをご覧ください。 Androidスマホで表示されるサイトをPCで表示 - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7235706.html )
ブログで作って新着情報をトップページに持たせてやればいいでしょう。 ○○を更新しました、ではなくて、What'sNewのような感じで記事タイトルがそのまま『○月○日 ライブ情報決定!!』のような感じにで作る事がおおいですね。 Wordpress等のブログシステムを自サイトにインストールして運用した場合、一般的な無料レンタルブログとは違ってカスタマイズが柔軟にできます。
＞結局、どこをどうしたらいいのか分かりません。 　回り道のようですが、原因が理解できないと同じような期待と異なる表示に悩まされ続けることになります。 　原因は、 a:hover{border-bottom:soli red 2px;} 　などの設定があると、どこで div table ・・・・ a img{border:none;} 　としても利かないのです。 a:hoverの詳細度は a=0,b=0,c=1,d=1 と計算され、[0,0,1,1]になります。 一方 div table ・・・・ a imgの詳細度は、div table ・・・・ a img{border:none;} ・・nは要素の数 　それぞれの桁は繰り上がりません。 　それを解決する方法は、いくつもあります。 div table ・・・・ a:hover img{border:none;}とする。詳細度は[div table ・・・・ a img{border:none;[0,0,1,n] p a:hover{border-bottom:soli red 2px;}詳細度は[0,0,1,2]と高くなりますが、この指定はpの子孫要素にしか利きません。 このように常に詳細度を念頭において・・
＞調べているうちに気が付いたのですが、sectionプロパティもnavプロパティも ＞HTML5のみの対応で、 　きちんと正確に!!。 「sectionプロパティもnavプロパティ」じゃありません。 ・section要素、nav要素はHTML5から採用される要素です。 　文書は色々な要素で組み立てていて、それをタグを用いてどの要素かを示します。 　p要素は、それでマークされていれば、囲まれた部分がp要素であることを示します。 ・HTML4では、文書構造を示す要素が不足していたため、class名やIDをつけていました。 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 ・・・top_img_a,img_top,flameというclass名じゃ、おかしいでしょ。そもそも、まったく必要ないのですよ。 　私は原則として、class名にHTML5で登場する要素名を使用しています。それは先でHTML5でページを作成するときに、スムーズに移項できるからですし、本来、HTML4でも望まれる名前だからです。 　ですから、別にHTML4.01だろうが、XHTML1.0だろうが、class名として使うなら問題ありません。 　ただし、HTML4.01であってもXHTML1.0であっても、必ずstrictで作らなきゃダメです。 　もしくはXHTML1.1。なぜなら、HTML4.01の勧告(1999/12)以来、 『著者 ・・・【中略】・・・ 　HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 となっていたはずです。予告どおり、XHTML1.1HTML5では、transotinalな要素、属性は削除されています。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 最後に、検証済みのソースを示しておきます。スタイルシートなしで表示してもよい。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- html,body{margin:0;} div.header,div.section,div.footer,div.footer div.nav{ ＿width:720px;margin:0 auto; ＿border:solid 1px silver; } div.header{ ＿height:200px; ＿margin-bottom:40px; ＿background-color:silver; ＿border-color:silver; } div.section{ ＿background-color:fuchsia; ＿border-color:fuchsia; } div.footer div.nav{ ＿position:absolute;top:200px;height:40px; ＿font-family:"ＭＳ Ｐゴシック", "ヒラギノ角ゴ Pro W3", sans-serif; ＿line-height:40px; ＿text-align:center; ＿background-color:black; } div.footer ul,div.footer ul li{ ＿display:block;list-style:none; ＿margin:0;padding:0; } div.footer ul li{ ＿width:118px;float:left; ＿position:relative; } div.footer ul li a{ ＿display:block; ＿width:100%;height:100%; ＿text-decoration:none; ＿color:#FFF; } div.footer ul li ul{ ＿font-size:75%; ＿position:absolute;top:40px;left:0; ＿display:none; } div.footer ul li ul li{ ＿height:60px;width:140px; ＿background-image:url(../images/dawnmenu_button.gif); } div.footer ul li:hover{ ＿background-color:rgb(255,160,0); } div.footer ul li ul li:hover{ ＿background-color:transparent; } div.footer ul li ul li a{ ＿padding-top:20px; } div.footer ul li:hover ul{ ＿display:block; } div.footer{ ＿background-color:yellow; ＿border-color:yellow; } div.section p,div.section h2,div.section dl{ ＿width:680px;margin:0 auto; } div.section p.sample img{ ＿display:block; ＿margin:0 auto;padding:5px; ＿background-image:url(images/new_entries_img_flame.gif) } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>サンプル</h1> ＿</div> ＿<div class="section"> ＿＿<h1>サンプル2</h1> ＿＿<div class="section"> ＿＿＿<p class="sample"><img src="images/dammy_img02.jpg" width="480" height="360" alt="サンプル画像"></p> ＿＿＿<h2>用意する画像</h2> ＿＿＿<dl> ＿＿＿＿<dt>images/dammy_img02.jpg</dt> ＿＿＿＿<dd>480px巾、360px高さの画像を用意する。</dd> ＿＿＿＿<dt>images/new_entries_img_flame.gif</dt> ＿＿＿＿<dd>内寸480×360pxが透明な枠用画像</dd> ＿＿＿＿<dt>../images/dawnmenu_button.gif</dt> ＿＿＿＿<dd>巾140,高60pxの吹き出し画像</dd> ＿＿＿</dl> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li><a href="/">TOP</a></li> ＿＿＿＿<li><a href="./profile">会社情報</a> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li><a href="./profile/index.html">会社概要</a></li> ＿＿＿＿＿＿<li><a href="./profile/office.html">営業所</a></li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li><a href="./B">Bボタン</a></li> ＿＿＿＿<li><a href="./C">Cボタン</a></li> ＿＿＿＿<li><a href="./D">Dボタン</a></li> ＿＿＿＿<li><a href="./E">Eボタン</a></li> ＿＿＿</ul> ＿＿</div> ＿</div> </body> </html>
横長の画像を、 「divの（左右の）中心と、画像の（左右の）中心を合わせるように、 divの上端と画像の上端を合わせるようにして配置」 です。 background-position: 50% 0; 中心を基準にしていますので、 ウインドウ幅を狭めたり広げたりしても、センタリングされた状態になります。 未指定の場合はbackground-position: 0 0;と同じで、左端、上端をあわせます。 http://www.htmq.com/style/background-position.sh … これを応用した物がCSSスプライトです。
巾をひろげりゃよい。 ★HTML4.01strict　＋ CSS2.1 　Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) 　W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　で検証済み。 　＿はタブに戻すこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- body,html{margin:0;padding:0;background-color:gray;} div.article{width:90%;background-color:silver;margin:0 auto;} div.header,div.footer{height:100px;background-color:yellow;} div.section{height:300px;background-color:aquq;position:relative;} div.section div.aside{width:110%;margin-top:100px;height:100px;background-color:lime;position:absolute;left:-5%;bottom:0;} --> ＿</style> </head> <body> ＿<div class="article"> ＿＿<div class="header"> ＿＿＿<h1>サンプル</h1> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h2>本文</h2> ＿＿＿<div class="aside"> ＿＿＿＿<h3>ここを広げる</h3> ＿＿＿</div> ＿＿</div> ＿＿<div class="footer"> ＿＿＿<h2>フッタ</h2> ＿＿</div> ＿</div> </body> </html>
　メニュー項目が増減するたびにHTMLはともかく、CSSを書き直す以外無理です。その場合でもHTMLに文書構造に関係のない属性を忘れずに書き換えなければなりません。 　なぜそうなのかは、とても深くて説明するのが長くなります。 　ざっと思いつく方法は、各項目の文字数が10文字以下、3階層目の文字数は8文字以下、4項目以下に制限した上で、スタイルシートでデザインする。それならごく簡単に下記で良いと思う。 　table的に、2項目目を真横に持ってくるのは無理だと思います。 ★HTMLの制約、ウィンドウサイズなど制約が多くユーザビリティ上、よいデザインとは思えません。いっそのこと、単純なリストのままのほうが、はるかにわかりやすくデザインしやすいのではないかと思います。・・スタイルを指定しないほうが優れていると言うことです。ブラウザの表示メニューから「スタイルなし」を選択すると、そのほうがはるかにわかりやすい。それじゃデザインする意味がないですよ。 [HTML] ＿<div id="info_sitemap"> ＿＿<!-- 各項目の文字数が10文字以下、3階層目の文字数は8文字以下 --> ＿＿<ul> ＿＿＿<li>TOPページ</li> ＿＿＿<li>店舗案内 ＿＿＿＿<ul> ＿＿＿＿＿<li class="01">情報ページその１ ＿＿＿＿＿＿<ul> ＿＿＿＿＿＿＿<li class="03">コンテンツ1-1</li> ＿＿＿＿＿＿＿<li class="03">コンテンツ1-2</li> ＿＿＿＿＿＿＿<li class="03">コンテンツ1-3</li> ＿＿＿＿＿＿＿<li class="03">コンテンツ1-4</li> ＿＿＿＿＿＿</ul> ＿＿＿＿＿</li> ＿＿＿＿＿<li class="01">情報ページその2</li> ＿＿＿＿＿<li class="01">情報ページその3</li> ＿＿＿＿</ul> ＿＿＿</li> ＿＿＿<li>ご利用方法 ＿＿＿＿<ul> ＿＿＿＿＿<li class="02">情報01</li> ＿＿＿＿＿<li class="02">情報02</li> ＿＿＿＿＿<li class="02">情報03</li> ＿＿＿＿＿＿＿＿<li class="02">情報04</li> ＿＿＿＿</ul> ＿＿＿</li> ＿＿＿<li>業務案内 ＿＿＿＿<ul> ＿＿＿＿＿ <li class="02">情報01</li> ＿＿＿＿＿<li class="02">情報02</li> ＿＿＿＿＿ <li class="02">情報03</li> ＿＿＿＿＿＿＿＿<li class="02">情報04</li> ＿＿＿＿</ul> ＿＿＿</li> ＿＿＿<li>ブログ</li> ＿＿＿<li>お問い合わせ</li> ＿＿</ul> ＿</div> [CSS] #info_sitemap {line-height:30px;width:900px;} #info_sitemap ul,#info_sitemap ul li{display:block;list-style:none;margin:0;padding:0;} #info_sitemap ul ul{margin-left:10em;} #info_sitemap ul ul ul{position:relative;top:-30px;} #info_sitemap ul li ul li ul li{display:inline;} #info_sitemap ul li ul li{height:30px;} #info_sitemap ul li{border-bottom:dotted red 2px;padding:0.5ex 0.5em;} #info_sitemap ul li ul li{border-bottom:none;} #info_sitemap ul li{background-color:rgb(255,200,200);} #info_sitemap ul li ul li{background-color:rgb(200,255,200);} #info_sitemap ul li ul li ul li{background-color:rgb(200,200,255);}
現在適用しているcss .hoge {margin:15px 0 0 0;} より後ろに #help_meを普通のセレクタに変えるだけ :root *> .hoge {margin:20px 0 0 0;}/*IE6～IE8以外用*/ #help_meを普通のセレクタに変え、いつものプロパティ:値の後ろに「\9」をいれ、;を続ける。 \9がハックです。 .hoge {margin:20px 0 0 0\9; }/*IE8以下用*/ ハックは通常表記より詳細度を上げるため、後ろに書くことが必要です。
というか・・。そもそもHTMLは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから ブラウザやプラットフォームの違いを超えてうまく働くべきである・・・【中略】・・・ただ1種類の文書しか作る必要がなくなるからだ。・・・【中略】・・・ 　どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML4.01仕様書/2.2.1 HTMLの略歴(ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　なので、i-phone,i-pad,携帯電話で見たらどのように表示されるか？、様々なウィンドウの大きさやブラウザでみたらどうなるかという一般論としてお答えします。 　私は、Firefox( http://mozilla.jp/firefox/ )と次のアドオンを使っています。 ・FireMobileSimulator ( https://addons.mozilla.jp/firefox/details/8519 ) 　日本国内の携帯電話 3 キャリアに対応し、モバイルサイトの開発を容易にする携帯シミュレーターです。携帯端末の HTTP リクエスト、絵文字表示、位置情報送信機能など、携帯ブラウザの動作をシミュレートします。 ・Mobilify ( https://addons.mozilla.jp/firefox/details/285551 ) 　ページコンテンツをスマートフォンサイズの枠内に表示して、Firefox Mobile などモバイルブラウザ向けサイトの開発を支援します。アドオンバーに追加されるアイコンをクリックすることで、幅 320px のモバイルサイトモードを切り換えることができます。 ・User Agent Switcher ( https://addons.mozilla.org/ja/firefox/addon/user … ) 　他のユーザーエージェントであることを偽装して、それぞれのユーザーエージェントが要求したときのデータを送信させる。 　など、拡張機能 » 開発者向けツール ( https://addons.mozilla.jp/firefox/extensions/dev … )を使っています。 　特に、(1)と(3)は、様々なユーザーエージェントでのアクセスを想定する開発には必須でしょう。 　それ以外にも、 Firebug ( https://addons.mozilla.jp/firefox/details/1843 )とか、 Html Validator ( https://addons.mozilla.jp/firefox/details/249 )とか、 ★HTMLユーザエージェント ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )
ｉＰｈｏｎｅ等はHTML規格としてバージョン5を使用していて『FLASH』は使用出来ません。そしてIEは厳密にはバージョン8以上でなければHTML5には対応していません。 出来ればHTML5の機能を使用して作成する事をお勧めします。 Adobe Dreamweaverの場合は作業画面でボタン画像を作成すれば数値はプロパティに表示されているので、 数値をしこしこ入力するのはここ数年していませんね。
●{font-family :"ヒラギノ明朝 Pro W3","ＭＳ 明朝";}よっぽどこの2つがあれば大丈夫でしょうか？ マックとウィンドウズだけなら大丈夫でしょう。Unixとかどうするんでしょうね？ ●むしろ日本語指定をはずしたほうがいいのかな？{font-family :sans-serif;}のように。 そのコンピュータの持っているゴシック系の書体を表示します。最初っから希望がない場合には、sans-selifやselifだけでもいいと思いますが「文字の書体を和風」とのことなので、希望が無いわけじゃないですよね？希望の書体の優先順位を書いておいて、さらにそれらがない場合、明朝かゴシックかだけでも指定し最後の保険とするのが定石です。 ●おまけ 書体にこだわるなら、タイトル等だけ画像にしたり、fontをアップロードして、webフォントを使う手もあります。 自らがアップするのですから、個人のシステムにそのフォントが入っているかどうかは問題にならなくなります。
参考URL のサイトを拝見させていただきましたが、具体的にどの部分のフォントでしょうか？　というのも、このサイトにはいろいろな種類のフォントが使われており、どの書体が「とても美しい好み」なのかが分からないのです。 なお、OSX 以降の Mac でしたら、文章の部分は基本的にヒラギノ角ゴシック体で表示されるかと思います。ただし、Flash や画像にはヒラギノ以外の書体が使われていますので、こちらの書体名を知りたい場合は、お礼欄などでお知らせください。
ドロップダウンメニューを作るこのCSSどこが変？ - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7229595.html ) を参照すること。 　:hoverでdisplay:blockされた要素に含まれているので、ルールオーバーさせてもそのままされるはずです。javascrptはいらない!!
10進数での数値文字参照は、実体に置き換わるようなので <h2>等幅フォント</h2> <ul style="font-family:monospace;"> <li>Word Joiner　　　　　　　(&#x2060;■&#8288;■---) <li>Ideographic space　　　　(&#x3000;■&#12288;■---) <li>Zero width no-break space(&#xfeff;■&#65279;■---) <li>en space　　　　　　　　 (&#x2002;■&#8194;■&ensp;) <li>em space　　　　　　　　 (&#x2003;■&#8195;■&emsp;) <li>thin space　　　　　　　 (&#x2009;■&#8201;■&thinsp;) <li>zero width non-joiner　　(&#x200c;■&#8204;■&zwnj;) <li>zero width joiner　　　　(&#x200d;■&#8205;■&zwj;) <li>left-to-right mark　　　 (&#x200e;■&#8206;■&lrm;) <li>right-to-left mark　　　 (&#x200f;■&#8207;■&rlm;) </ul> <h2>プロポーショナルフォント</h2> <ul style="font-family:sans-serif"> <li>Word Joiner　　　　　　　　　(&#x2060;■&#8288;■---) <li>Ideographic space　　　　　 (&#x3000;■&#12288;■---) <li>Zero width no-break space(&#xfeff;■&#65279;■---) <li>en space　　　　　　　　　　　(&#x2002;■&#8194;■&ensp;) <li>em space　　　　　　　　　　 (&#x2003;■&#8195;■&emsp;) <li>thin space　　　　　　　　　　(&#x2009;■&#8201;■&thinsp;) <li>zero width non-joiner　　　(&#x200c;■&#8204;■&zwnj;) <li>zero width joiner　　　　　　(&#x200d;■&#8205;■&zwj;) <li>left-to-right mark　　　　　 (&#x200e;■&#8206;■&lrm;) <li>right-to-left mark　　　　　 (&#x200f;■&#8207;■&rlm;) </ul> 　これでおかしいなら、&を&に変換する。
基本的には無理です。プラットフォームは、IE(5.5,6,7,8,9)、firefox,opera,safari,Chromeというブラウザだけじゃない、OSだってWindowsだけじゃなく、Mac,Linuxもある。ユーザーによったらフォントを拡大して見てるかも知れない。デザイン優先なら【そのための仕様である】PDFで作成すれば良いです。HTMLは、あくまで 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTMLの略歴( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　という基本を忘れちゃダメです。 　そのうえで、とりあえずご自身とクライアントの一部の環境のみ有効な方法としては、 ・サイズを絶対サイズで指定すること。すなわちin,cm,pc,mm,ptを使う。(em,ex,pxを使わない) ・font-familyを指定する。--ただしそのフォントを持っていないユーザーエージェントには無効-- ・letter-spacing,word-spacing(英文),layout-grid-char(IE独自,CSS3にもない)を指定する。 ・または、text-align:justifyで両端ぞろえ(他のプロパティと競合する) 　ただし、いずれの対策をとっても、プラットフォームの差は完全に吸収することは出来ません。あくまで自己満足です。また、特に視覚障害者がフォントを拡大したり読みやすいフォントに変えて見たい時には崩れるなど、『どんな環境からもWebの情報を利用できるようにすべきだ』というウェブの理念からは外れることも理解したうえで試してください。
＞ドロップダウンボタン領域時には親ボタンはロールオーバー表示されませんでした。 　:hoverしているのは、どの要素でしょう。そしてプルダウンメニュー上に:hoverしているときは、その要素の上にありますか？ ＞これはclearする必要はないのでしょうか？ 　なんのために？ここで、次に続く要素(回り込む要素)はどこにあるでしょう。 　HTMLの構造を簡単に頭に入れて、CSSだけを上から順番に何を選択しているか、セレクタの書き方を読み取ってください。大事なことは理解することです。特に詳細度の計算だけは身につけること。先の回答で示した参照先はよく読んでください。回り道のようですが、実際はもっとも早い方法です。(急がば回れ)
＞XAMPP 　私は、XAMPPを使ったことないです。そんな便利なものが登場する以前からですので。ですので、直接の回答にはなりませんが、私のテスト環境は下記のように作成しています。大変複雑な作業で一つ一つについては調べてください。(一部でも参考にはなるかと) 1) テスト用にパーテーションを用意する。 　たとえば、E:ドライブとします。 2) E:ドライブのルートにCigwinを入れます。 　最低限のシェル程度で良いでしょう。shなどは後からでも 3) win版のapacheを入れます。 　E:/usr/local/apache 　httpd.confを編集して、 　　<VIRTUALHOST 127.0.0.1> 　　DocumentRoot "/user/yuu19860625/home/" 　　ServerName localhost 　　ServerAdmin webmaster@hoge.com 　　AddHandler server-parsed .shtml 　　Options All +Includes +ExecCGI 　　ErrorLog logs/webtest_error_log 　　CustomLog logs/webtest_access_log common 　　</VIRTUALHOST> 　など必要な数だけ・・ひとつだけならデフォルトの 　　DocumentRoot "E:/user/yuu19860625/home" 　だけでも良いでしょう。 4) win版のactivePerlを入れます。 　E:/usr/local/bin 　その他、PHP,AWK,MySQLなど必要に応じて ★私は可能な限り、リモートのUNIXサーバー(FreeBSD)に合わせて構築していますが、一般的なテストでしたらそこまでの必要はありませんから、XAMPPを使ったので良いとおもいます。 　ただ、HTML関係のファイルは他のものとはきちんと分けたほうが良いです。
　firefox+FireMobileSimulator | Firefox アドオン | Mozilla Japan の公式アドオン紹介サイト ( https://addons.mozilla.jp/firefox/details/8519 )で、ihopeをコピーしてもうひとつ作成し、横幅を960px、たてを640pxに指定すると良いかと・・ 　たとえばあなたが質問された掲示板が、おしえてgooだとして・・
スパマーのような人やAmazonのシステムをダウンさせようとする人がいるかと思いますが、そういう人達が悪さをできないように実在する人物かどうかクレカで本人確認をとっているのが普通ではないでしょうか？
他人のブログなどで紹介してもらえるのがベストです。 また、googleのような検索エンジンの場合は、巡回を申請するのが良いでしょう。ただし、それで順位が上がるわけではありません。順位・評価はそのサイトが価値があるものと客観的に認識されないと上がりません。 　相互リンクは基本的には逆効果です。 ★Google ウェブマスター セントラル - クロール、インデックス登録、検索アクセス数のデータを見る。サイトへのアクセスを増やす。 ( http://www.google.co.jp/webmasters/ ) 　→ウェブマスター向けガイドライン - ウェブマスター ツール ヘルプ ( http://support.google.com/webmasters/bin/answer. … ) 　　→サイトの順位や PageRank を上げることを目的としたリンク プログラムに参加しない。 ( http://support.google.com/webmasters/bin/answer. … ) ＞相互リンクのサイトがたくさんあるのですが、こういう所に登録する？？ 　登録先違うでしょ！！！ 　「ウェブマスター向けガイドライン ( http://support.google.com/webmasters/bin/answer. … )」はきちんと目を通すこと 　Yahoo!japanもgoogleのエンジンを使ってます・ 　サイトを作ってgoogleで検索・・・する前に、なぜそのページにあるマニュアル{ｇｏｏｇｌｅについて}を読まれないのかな？？大事なことたくさん書いてあります。 　
position:relative 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから ボックスの位置はまず通常フローにて計算され（この計算で得られた位置を通常位置と呼ぼう）、その通常位置から相対的に配置される。 なお、あるボックスBが相対配置される場合、それに後行するボックスの位置は、Bが相対配置されていないかのように計算される。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［視覚整形モデル( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )］より 　前後のHTMLや文書構造、およびどのように表現したいかがわかりませんが、通常はposition:absoluteを使います。下記見本では、続く<address>の上に隙間は開いていませんね。 [例]HTML4 いずれもタブは＿に置換してあるので戻すこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- body,html{margin:0;padding:0;} div.header,div.section,div.footer{width:70%;margin:0 auto;} div.header{background-color:aqua;height:100px;} div.section{background-color:yellow;min-height:300px;} div.footer{background-color:silver;} h1,h2,h3,p{margin:0;line-height:1.6em;} div.section div.section{width:90%;background-color:lime;min-height:0;} #AuthorProfile,div.footer div.nav{position:absolute;top:100px;width:13%;background-color:fuchsia;min-height:0;} #AuthorProfile{left:5px;} div.footer div.nav{right:5px;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>サンプル</h1> ＿</div> ＿<div class="section"> ＿＿<h2>本文見出し</h2> ＿＿<p>記事</p> ＿＿<div class="section"> ＿＿＿<h3>項目見出し</h3> ＿＿＿<p>記事</p> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿＿<div class="section" id="AuthorProfile"> ＿＿＿<h3>自己紹介</h3> ＿＿＿<h3>自己紹介</h2> ＿＿＿<p>私は・・・</p> ＿＿</div> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li><a href="./">トップ</a></li> ＿＿＿＿<li><a href="./books">著書</a></li> ＿＿＿＿<li><a href="./Blog">ブログ</a></li> ＿＿＿</ul> ＿＿</div> ＿＿<address>連絡先</address> ＿</div> </body> </html> [例}HTML5 <!doctype html> <head> ＿<meta charset="utf-8"> ＿<title>サンプル</title> ＿<meta name="description" content=""> ＿<meta name="author" content="IRUKA"> ＿<link rel="stylesheet" href="css/style.css"> <style media="screen"> <!-- body,html{margin:0;padding:0;} header,section,footer{width:70%;margin:0 auto;} header{background-color:aqua;height:100px;} section{background-color:yellow;min-height:300px;} footer{background-color:silver;} h1,h2,h3,p{margin:0;line-height:1.6em;} section section{width:90%;background-color:lime;min-height:0;} #AuthorProfile,footer div.nav{position:absolute;top:100px;width:13%;background-color:fuchsia;min-height:0;} #AuthorProfile{left:5px;} div.footer div.nav{right:5px;} --> </style> </head> <body> ＿<header> ＿＿<h1>サンプル</h1> ＿</header> ＿<section> ＿＿<h2>本文見出し</h2> ＿＿<p>記事</p> ＿＿<section> ＿＿＿<h3>項目見出し</h3> ＿＿＿<p>記事</p> ＿＿</section> ＿</section> ＿<footer> ＿＿<h2>文書情報</h2> ＿＿<section id="AuthorProfile"> ＿＿＿<h3>自己紹介</h3> ＿＿＿<h3>自己紹介</h2> ＿＿＿<p>私は・・・</p> ＿＿</section> ＿＿<nav> ＿＿＿<ul> ＿＿＿＿<li><a href="./">トップ</a></li> ＿＿＿＿<li><a href="./books">著書</a></li> ＿＿＿＿<li><a href="./Blog">ブログ</a></li> ＿＿＿</ul> ＿＿</nav> ＿＿<address>連絡先</address> ＿</footer> </body> </html>
尻切れトンボでした。 ＞本質的にtableデザインと変わりません。tableをつか 　tableを使わなきゃ良いだろうということで、divを多用しても意味がありません。HTML5の制定作業をウォッチしていると、しばしば「tableやdivを使った失敗をしないよう」という文言がでてきます。そのためにHTML5では<header><section><footer><article><aside><nav><figure>など新しい要素がたくさん追加されます。それによってdivを使う機会はゼロにはならないにしても、ほとんど姿を消すでしょう。
ご自由にお使いなさい。 そもそもウェブは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Webは技術的な創造物というよりは社会的な創造物である。私はWebを技術的な おもちゃではなく、人々の共同作業の手助けとなるような社会的効果を生むものとして 設計した。Webの最終目標は、世界中に散らばっている私たちが織りなしている 網の目のような存在を支援し、改善することである。(p.156) ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［リンクについて「リンクは自由!」( http://www.sal.tohoku.ac.jp/~gothit/webpolicy.html )］より 　私たちが利用しているHTMLにしても、誰もが自由に使えます。綿時指針もそのその恩恵を受けているから、私の創造物であっても｛それに明確に条件が与えられていない限り｝自由にお使いなさい。・・ということです。 　逆に言うと、HTMLやCSSを隠そうとする人の存在自体が不思議です。 　願わくば、もし、あなたがそのサイトで示している方法を改善できたなら、それもまた公開してください。もちろん有料でも構いません(^^) 　私もここで、随分とアドバイスしていますが、それを自由に利用していただくことは条件です。まあ、基本的にGPL( http://ja.wikipedia.org/wiki/GNU_General_Public_ … )的に考えてよろしいかと。 ・コピーも改造も自由 ・価格をつけて販売するのも無料で配布するのも自由 GPLだと、さらに厳しいですが・・ ★いまさら人に聞けないGPLの基礎 (1/2) - ITmedia エンタープライズ ( http://www.itmedia.co.jp/enterprise/articles/050 … ) ★licenses/GNU_General_Public_License_version_3.0 - Open Source Group Japan Wiki - SourceForge.JP ( http://sourceforge.jp/projects/opensource/wiki/l … ) 　世の中、プロプライエタリ ( http://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD% … )なものばかりではないということです。あなたが、すばらしいと思ったアイデアを誰かにコピーして渡すことも、あなたが改変することも、販売することも自由な世界があるということです。 　
　他の方法 ・CSS2.1で、:before,:afterの擬似要素で、画像を追加して、その画像をblockにして、親コンテナブロックのサイズを参照して伸縮させる。 ・画像と文字を<a></a>で囲み、aに対してrelativeを指定して、imgをabsoluteで置く 　他にも色々方法はあるでしょうが・・ 　実際の画像、使用場所その他で選択しましょう。
No1での補足 自分も見落としていましたが 階層を整理してみて root/gazou/background/bg005.gif・・(1) root/test/gazou/background/bg006.gif・・(2) root/basecss.css basecss.cssから見て指定で(2)は見れて(1)は見えない。 (1)と(2)は何が違いますか？ 指定するのはCSSから見たところになります。
<body>以下です。シンプルでわかりやすいと思います。スタイルシートも書きやすい。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) で検証済み なお、タブは＿に置換してありますから戻すこと。 <body> ＿<div class="article"> ＿＿<div class="header"> ＿＿＿<h1>タイトル</h1> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h2 id="introduction"><img src="images/introduction.png" alt="introduction" width="230" height="30"></h2> ＿＿＿<div class="section"> ＿＿＿＿<h2>h2タイトル(1)</h2><!-- sectionごとに見出しが一つだけ入る --> ＿＿＿＿<dl class="info"> ＿＿＿＿＿<dt>1月1日</dt> ＿＿＿＿＿<dd>あああ</dd> ＿＿＿＿＿<dt>1月2日</dt> ＿＿＿＿＿<dd>いいい(以下省略)</dd> ＿＿＿＿</dl> ＿＿＿</div> ＿＿＿<div class="section"> ＿＿＿＿<h2>h2タイトル(2)</h2> ＿＿＿＿<dl class="info"> ＿＿＿＿＿<dt>1月1日</dt> ＿＿＿＿＿<dd> ううう</dd> ＿＿＿＿＿<dt>1月2日</dt> ＿＿＿＿＿<dd>えええ(以下省略)</dd> ＿＿＿＿</dl> ＿＿＿</div> ＿＿</div> ＿＿<div class="footer"> ＿＿＿<div id="topmenu" class="nav"> ＿＿＿＿<ul> ＿＿＿＿＿<li class="contuctUs"><a href="./">お問い合わせ</a></li> ＿＿＿＿＿<li class="siteMap"><a href="./">サイトマップ</a></li> ＿＿＿＿</ul> ＿＿＿</div> ＿＿＿<div class="nav" id="siteMap"> ＿＿＿＿<ul> ＿＿＿＿＿<li><a href="./"><img src="images/button/top.jpg" alt="トップページ" width="254" height="71" id="Image1" onmouseover="MM_swapImage('Image1','','images/button/sw-top.jpg',1)" onmouseout="MM_swapImgRestore()"></a></li> ＿＿＿＿＿<li><a href="./"><img src="images/button/eve.jpg" alt="トップページ" width="254" height="71" id="Image2" onmouseover="MM_swapImage('Image2','','images/button/sw-eve.jpg',1)" onmouseout="MM_swapImgRestore()"></a></li> ＿＿＿＿＿<li>※以下省略</li> ＿＿＿＿</ul> ＿＿＿</div> ＿＿＿<div class="nav" id="lastmenu"> ＿＿＿＿<ul> ＿＿＿＿＿<li class="FAQ"><a href="./">よくある質問</a></li> ＿＿＿＿＿<li class="privacyPolicy"><a href="./">プライバシー&amp;ポリシー</a></li> ＿＿＿＿</ul> ＿＿＿</div> ＿＿＿<p>Copyright BBB. All right reseved.</p> ＿＿</div> ＿</div> </body> </html>
>HTML5はできるとか、 強引ですが、作ってみました。 昔からは無理な、CSS3グラデーション使用。 http://home.wi-wi.jp/lab/00n/ 角度指定ですので、ブラウザ設定で文字サイズを変えれば、斜線の端と枠線の左上や左下が一致するとは限りません。 サーバーのCGI関連がよく落ちる、、、サーバー乗り換えかなぁ、、、
CSSの書き方だけです。どうもセレクや継承--カスケーディング--の勉強がまだまだのような。 　いちいち適用する対象にclass名をつけていたら、メンテナンスも出来ない酷いHTMLになってしまいますし、先でデザインを変えるとき、HTMLまで書き直す羽目になり「スタイルシートを変えるだけでデザインを一気に変更できる」というCSSの最大の長所を捨てることになります。 　たとえば、header(ヘッダ)内にある、サイトイメージの画像でしたら <div class="header"> 　<h1>見出し</h1> 　<p class="siteImage" style="background-image:url(/images/abc.jpg)"> 　　<img src="./images/thumbnail/abc.jpg" width="40" height="30" alt=""> 　</p> ・・・・ div.header p.siteIamg{position:relative;width:40px;height:30px;} div.header p.siteImage img{display:none;}/* 詳細度 0,0,2,3 */ div.header p.siteImage:hover img{ /* 擬似クラス:hoverを追加。詳細度 0,0,3,3 なので上の指定は上書きされる　*/ display:block;width:400px;height:300px; position:absoute;top:300px;left:0px; } とか・・・javascriptで書き直すのは、 <div class="header"> 　<h1>見出し</h1> 　<p class="siteImage" style="background-image:url(/images/abc.jpg)"> 　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　^^^^^^^^^^^^ 　　<img src="./images/thumbnail/abc.jpg" width="40" height="30" alt=""> 　　　　　　　　^^^^^^^^^^^^^^^^^^^^^^^^^ 　</p> ・・・・ だけですね。
＞そのような問題は起こりませでした。 　それ以上は、HTML,CSSの詳細を見ないと判断できません。firefox+Firebug ( https://addons.mozilla.jp/firefox/details/1843 )+FireMobileSimulator ( https://addons.mozilla.jp/firefox/details/8519 )でもつかって解析してください。 　原因は、そのテキストの入っているブロックの巾の設定だと思います。先に示したソースでは起こらないのではないかと思います。 　あわせてHTML自体の構造もチェックすること。HTMLが正しく解析できないとCSSが期待通り適用されません。またCSSの文法チェックも必要 <div style="clear: left;"></div>のようなデザインのための空の要素は使うべきではありませんし・・ ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　「CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。 ( http://jigsaw.w3.org/css-validator/#validate_by_ … )」
少し気になったのですが、このテーマはどこかで配布されていたものなんでしょうか？ もしご自身で作られたのであればおしゃれなデザインですね！
常識的にはありえないのですが・・ ＞右ブロックの日記文章の１文章が、横に長いとブロックの幅が指定した幅を越えてしまい、左ブロックのメニューが下に移動してしまいます。 　これは、そのブロックがfloat処理されていることを示していて、かつ巾がauto(初期値)のままであることを示しています。 ＞各ブロックにwidthで幅を指定しています。 　親のコンテナブロックに巾を指定していても、widthプロパティは継承しませんから、float指定された時点で親ブロックのwidthは消えてしまいます。このブロックにwidth:100%などを指定してください。 　本来は、コマ割(枠組み)にはfloatを使わないほうが良いのですが・・
No.2です。 　これは質問への直接の回答ではありませんが、『Webクリエイター上級試験の勉強を独学でしております。』と言うことなのでアドバイスです。 　ネットや掲示板で情報を得られたとしても、それが正しいか、そうでないかはわかりません。どんなときでも必ず仕様書を確認することが基本です。 white-spaceのみならず、空白類などは重要な基礎知識で、必ず仕様書に記載されています。勧告の準備が進んでいるHTML5も、HTML4.01を知っていれば、 ★HTML5 における HTML4 からの変更点 　http://standards.mitsue.co.jp/resources/w3c/TR/h … 　http://www.w3.org/TR/2011/WD-html5-diff-20110525/ で済みます。 　少なくとも HTML 4.01 仕様書邦訳 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　位は隅々まで目を通しておきましょう。CSS2.1の邦訳は知りませんが、現行ではHTML4.01strict(transitinalじゃない)とCSS2.1がウェブ標準とみなされています。
一般的には、<li>にfloat:leftを設定。 しかしこうすると、floatの副作用で</ul>から下のレイアウトが変化するので、<ul></ul>の次の要素にclear:bothを指定。bothはleftでも当然いいのですが、念のためboth(左右両方)を指定する場合が多い。 ちなみに、「<ul></ul>の次の要素」にわざわざfloat解除用の指定をするのが美しくないという考え方もあり(ちなみに私もです)、「clearfix」という手法がとられることもよくあります。 https://www.google.com/search?q=css+clearfix ただし、これは疑似要素を使うため初心者には若干ハードルが高い。CSSに慣れるまではおとなしく「次の要素にclear:both」をしておくのがいいでしょう。
そもそも、<br>は内に入れることは出来ません。 <!ELEMENT UL - - (LI)+　　　　　　-- unordered list --> は、「要素であるULには、開始タグ終了タグとも省略できない(- -)、liのみがひとつ以上入る」と言う意味です。 10.2 順不同リスト (UL)、序列リスト (OL)、及びリスト項目(LI) ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) <ol> 　　<li><span>2011</span></li> 　　<li><a href="#">2010</a></li> 　　<li><a href="#">2009</a></li> </ol> <ol> 　　<li><span><a href="#">2001</a></span></li> 　　<li><a href="#">2000</a></li> 　　<li><a href="#">1999</a></li> </ol> ol+ol{margin-top:1em;}
なんでCSSの中にHTMLのコメントが入ってるの？
？？ 当方のWindows 7＋Google Chrome、Internet Explorer 8で問題なく動作しますよ。 スクリプトも特に間違ってないし、ヤバい属性値を弄っているようにも見えない。 z-index切換えながらのエンドレス。スライドショーの見本的な内容ですね。 焦って何か間違えてるん違いますか？
　画像などを、それが含まれる当該親ブロック内でfloatさせ、かつ右下におきたいのでしょうが、それは不可能です。 　floatプロパティでは、最上位に位置することが定められています。 「A floating box must be placed as high as possible. ( http://www.w3.org/TR/CSS2/visuren.html#float-pos … )」 　通常文中の挿絵に関しては、次のようにマークアップされていると思います。 [HTML5] <section> 　<hn>見出し</hn><!-- nは1～6 sectionには見出しがあるべき --> 　<p>段落</p> 　<p>段落</p> 　<figure><img></figure> 　<p>段落</p> 　<p>段落</p> </section> <section> 　<hn>見出し</hn><!-- nは1～6 --> 　<p>段落</p> 　<p>段落</p> ・・・以下省略 [HTML4]だと <div class="section"> 　<hn>見出し</hn><!-- nは1～6 --> 　<p>段落</p> 　<p>段落</p> 　<div class="figure"><img></div> 　<p>段落</p> 　<p>段落</p> </div> <div class="section"> 　<hn>見出し</hn><!-- nは1～6 --> 　<p>段落</p> 　<p>段落</p> ・・・以下省略 この場合、 figure{float:right;width*300px;} section{clear:right;} もしくは div.figure{float:right;width*300px;} div.section{clear:right;} とします。 　これは、文書構造上、回り込みされる挿絵は、常にその対象となる記事の直前にあるはずだからです。 　次のsectionでは、その挿絵は関係ないのですから、sectionが変わる時点でfloatを解除します。 　そうすることで、ウィンドウ巾やフォントサイズが変わっても常に該当する記事の側で、記事を回りこませることが出来ます。
＞それとも単に記述ミスですかね。。。 の可能性が高いですね
最近だとCMSを使う方がベターだと思いますよ。 日本で一番人気なのはWordPressです。 これは使い方も簡単でおすすめです。 http://ja.wordpress.org/ 学習コストはやや掛かりますが、 規模が大きくなったり、パスの問題が出るようなケースでは、 CMSを使うとシステムが自動で調整してくれるので、だいぶ楽です。
いったん画面表示を行ってから、ロールオーバー用画像読込みを行えばいいんではない？ 以下のJavaScriptを、htmlの末尾とか、jQueryの$(function(){})に実行文として書いておけば、画面表示を先に行い、遅延して先読を行う、と思う。表示も速いし、先読みもしっかり行われる。 var imgArray = [ "img1.jpg", "img2.jpg", "img3.jpg" ] for (var i= 0 ; i < imgArray.length;i++){ var image1 = new Image(); image1.src = imgArray[i]; // srcプロパティ設定->読込実行 } いきなりマウスオーバされれば、先読みが完了していないのでアレですが、最初の閲覧でそんなことは稀だし、２回目からはキャッシュが効くので読み込みは瞬時に終了する、と。 こんなんじゃ駄目ですか？
URLは、 http:// HTTPプロトコル 　　　www.abc.com 　　　ドメイン・サーバー 　　　　　　　　　/abc/efg 　　　　　　　　　パスとファイル名 　　　　　　　　　　　　　?・・ 　　　　　　　　　　　　　QUERY_STRINGS 　　　　　　　　　　　　　　　　　　　　#アンカー となっています。 ?以降は、サーバーに対してデータを渡す方法です。たとえば、 http://www.google.co.jp/#hl=ja&gs_is=1&cp=7&gs_i … 　の?以降がそれに当たります。 問題は、/abc/efg/screen.css?1252422308 です。実は、screen.cssがファイル名でない可能性もあります。Windowsしか使っていないと理解しにくいでしょうが、 1) ?以降は、サーバーに環境変数QUERY_STRINGに格納されます。CGIなどで使われます。 2) screen.cssというファイルを探します。あればそれを提供します。 　　それがディレクトリでしたら、それを開きます。★.以降が拡張子とは限りません。 　　3) ディレクトリの中にINDEXとして使われるファイルが設定してあれば、 　　　それを表示します。たとえばindex.html 　　　　または、ディレクトリの一覧を表示する。 　　　　あるいは、アクセスを拒否します。 3) screen.cssがファイルでもディレクトリでもない場合はPATH_INFOという環境変数に格納して、そのディレクトリのINDEXファイルを探します。 　　それがあれば、実行します。なければ 　efgについて、同様に 　1) それがファイルなら開きます。 　2) ディレクトリなら、それを開いてINDEXファイルなり、一覧なり、拒否なりを行います。 　これを繰り返します。 　実に複雑なように見えますが、極めて単純なことを繰り返しているダメです。 　スタイルシートを動的に作成するために使用します。 　実際にどの部分が、実行ファイルか実行ファイルが存在するディレクトリかわかりませんが、?以降の値で、プログラムの挙動を変えているのでしょう。 例] http://hpcgi1.nifty.com/Iruka/ENV_FORM.cgi/test. … nickname_1973と言う値を渡しています。test.cssというファイルがあるわけではないこともわかりますよね。もちろんこの方法でスタイルシートを出力することも出来ます。 　　　　　　　　　　　　　　
＞本来、スパンタグはそれ自身は意味を持たず、文章の一部を修飾するタグですよね？ 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 各々、内容が行内であるか(SPAN)ブロックレベルであるか(DIV)は定めるが、他のプレゼンテーション的語彙を示すことはない。 従って著者は、この両要素をスタイルシートやlang属性等と併用することで、HTMLを自身の必要や好みに応じられるようにできる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［7.5.4要素のグループ化: DIV要素とSPAN要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　修飾するというより、特定の意味を持たせるためです。他のフレーズ要素(EM、STRONG、DFN、CODE、 SAMP、KBD、VAR、 CITE、ABBR、及びACRONY)では足りない場合に使います。 　具体的には<span class="mark">別の場所からも参照される語句</span>と言う風に使うことが多いでしょう。(markはHTMLから導入されるこの意味を持つ要素です。「3.1. 新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )」) 　ここでは、単純にスタイルシートの(タイプセレクタ)ためだけに使ってます。 div.nav ol li a span{/* ナビゲーションブロック内の ol内のli内のa内のspan */ 　visibility:hidden;/* 表示はしないけど存在する */ } ★このclass名のnavもHTML5で導入されるナビゲーションを示す要素を参考につけています。HTML5では、下記のように、そのまま要素として記述できます。そのためにIDではなくclass名としてあります。 <nav id="menue"> 　<ul> 　　<li><a href="./"><span>トップへ</span></a></li> 　　<li><a href="./"><span>トップへ</span></a></li> 　　<li><a href="./"><span>トップへ</span></a></li> 　　<li><a href="./"><span>トップへ</span></a></li> 　</ul> </nav> スペースがあるので詳しく説明しておきます。 div.nav ol,div.nav ol li{ 　display:block;list-style:none;margin:0;padding:0; } /* 同じプロパティを複数回書くのは無駄なのでセレクタは,で区切ってグループ化してあります。 　リストを単なるブロック要素に置換しておきます。 　リストに対してブラウザごとにmarginやpaddingの設定が異なりますから、marginとpaddingもブラウザのデフォルトの設定を消しておきます。ここのプロパティ記述は定番として覚えておくと便利です */ div.nav ol{/* ナビゲーションセクションのolについての記述 */ 　height:59px;/* 高さを確保しておきます */ 　width:auto;margin:0 45px;/* 左右を45px開けて中央配置 */ } div.nav ol li{/* 子孫セレクタ詳細度は[0,0,1,3] */ 　float:left;/* floatさせます */ 　width:20%;/* リキッドスタイルの場合は親のolの巾によります */ 　background-image:url() /* 注 */ } div.nav ol li+li{/* 兄弟セレクタでliの兄弟のliのみ適用されます */ 　margin-left:10px; } div.nav ol li a{ display:block;/* 行内要素であるaをブロックにします */ width:100%;/* そのうえで、li要素いっぱいまで広げます */ height:100%; 　background-image:url() /* 注 */ } 固定サイズで行う場合は、%の部分をpxにしてください。その場合はウィンドウ巾が異なるユーザーには不便かもしれません。特にi-padやi-phoneの場合・・
意味がわからないのですが、 『二枚の絵で動いて見えるようなもの』『6枚ほどの連続（コマ送り画）の静止画』では矛盾しますけど・・ 　紹介されたサイトではそうのような絵の作り方が説明されているので自分で作ればよいのではないかと・・ 　いずれにしても自分で作るわけには行かないのですか？ペイントと、Giamなどのツールがあれば出来るのではないですか？
センタリングできていないってこと？ 背景の考え方と言う前に、ひとまずCSSのbackgroundの記述が間違ってますね。 たぶんこういうことじゃないかな。 書き方は色々あるけど、参考までに。 background:transparent url(path) center top no-repeat ; ちなみにこれを質問者さんのようにばらばらで書くなら baackground-image:url(path); background-position:center top; background-repeat:no-repeat;
IE6では未確認です。 　他にも色々書き方があると思います。空の　spanをつかったり、IE6用も書けるかも。 　古いIEは、Element:hoverはダメでa:hoverのみ有効だったりするので、あえてa内に<img>いれてます。 　<div class="nav"> 　　<ul> 　　　<li class="a"> 　　　　<ol> 　　　　　<li class="pre"><a href=""><img src="image/a-1.gif" width="60" height="50" alt="">リンクA-1</a></li> 　　　　　<li><a href=""><img src="image/a-2.gif" width="60" height="50" alt="">リンクA-2</a></li> 　　　　</ol> 　　　</li> 　　　<li class="b"> 　　　　<ol> 　　　　　<li class="pre"><a href=""><img src="image/b-1.gif" width="60" height="50" alt="">リンクB-1</a></li> 　　　　　<li><a href=""><img src="image/b-2.gif" width="60" height="50" alt="">リンクB-2</a></li> 　　　　　<li><a href=""><img src="image/b-3.gif" width="60" height="50" alt="">リンクB-3</a></li> 　　　　</ol> 　　　</li> 　　　<li class="c"> 　　　　<ol> 　　　　　<li class="pre"><a href=""><img src="image/c-1.gif" width="60" height="50" alt="">リンクC-1</a></li> 　　　　　<li><a href=""><img src="image/c-2.gif" width="60" height="50" alt="">リンクC-2</a></li> 　　　　　<li><a href=""><img src="image/c-3.gif" width="60" height="50" alt="">リンクC-3</a></li> 　　　　　<li><a href=""><img src="image/c-4.gif" width="60" height="50" alt="">リンクC-4</a></li> 　　　　</ol> 　　　</li> 　　</ul> 　</div> [CSS] div.nav ul li{clear:left;position:relative;height:54px;list-style:none;padding-left:65px;line-height:50px;} div.nav ul li ol li{list-style:none;display:block;float:left;clear:none;position:static;padding-left:0;margin-right:10px;} div.nav ul li ol li a img{position:absolute;left:0;top:0;border:none;display:none;/* またはvisibility:hidden;*/} div.nav ul li ol li.pre a img{position:absolute;left:0;top:0;display:block;/* またはvisibility:visible;*/} div.nav ul li ol li a:hover img{display:block;/* またはvisibility:visible;*/}
わあ、申し訳ない HTML5では、input type=""search"があるのですね。 <input type="search" />ということは、XHTML5だと思いますが・・
私の場合 WinTreeによりファイルの一覧を作成して　ホームページ：http://www.hs-jp.com/aska/ 矩形選択出来るテキストエディタです上記ファイル一覧の画像パスをコピーする　私が使用しているテキストエディタのホームページ： http://www5f.biglobe.ne.jp/~t-susumu/ <div class="mid2"><a src=""><img src="" class="yok"></div>　を必要以上作成して必要の項目に貼り付ける。 <style type="text/css"><!-- .mid2 {position:static;width:195px;float:left;height:190px;vertical-align:top;padding:3px;} .yok {border-style:none;width:190px;margin-bottom:2px;} --></style> 添付画像のようになります
>Rと書いてある画像が入っているボックスです ボックスで作成の必要せい有りますか 私もボックスで作成内容に背景色指定でボックスがずれてしまいます。 <div id="header>の検討が必要と思います IE7までとIE8以降では、上記問題は私の場合発生しています。 対策としてIE7までとIE8以降でスタイルシートを変更していますが 参照URL内容も詳細に見ればずれてしまいます。 参考URL：http://ryuso.info/me/se1/tp_p1.htm#t_tb
ページ・スクレイピングといって、Webアプリケーションではよく使う手法です。 RSSやAPIなど、データ取得する正規のサービスが用意されていないサイトと連携する場合、あるいは他サイトから情報を流用する場合に使います。 流用アクセスの場合は、短時間集中アクセスで身元がバレますので、PROXYサーバなどを経由させます。 掲示板などはすべてプログラム制御のため、表示される内容に規則性があり、スクレイピングは容易かと思います。 あとは、スクレイピングするタイミング、つまり ・アクセスごとにスクレイピングする（少量データの場合） ・定期的にスクレイピングしてデータを保存し、アクセス時は保存データを表示する を決めることです。 スクレイピングはプログラム（phpなど）で行いますので、WPのテンプレート内にプログラムを組めれば問題ありません。 簡単な構造のサイトならこいつで http://simplehtmldom.sourceforge.net/
(行番号は質問文中のURLのソースのものです。) まず、title属性を持っている要素を書き換える関数について。 72行目から123行目までの無名関数全体が、 $( ) で囲われています。 この様子を3行に圧縮するとこんな感じです。 <script type="text/javascript"> $(　function(){ <ここに約50行分の本体> }　); </script> これを、$() でくくるのをやめて、名前を付けます。 _71:　<script type="text/javascript"> _72:　　function addTitleProp() {　　　　　// 頭の "$(" を削って適当な名前を付ける 　　　　　　　(....関数の中身はそのまま) 123:　　}　　　　　　　　　　　 　　　　　　// 末尾の ");" を削る 124:　</script> 問題文をテーブルで表示させる部分(tbodyに突っ込んでいる部分)が25行目にあるので _25:　　$('tbody').html(tag); _26:　　addTitleProp();　　　　　　// ←この行を追加して関数を呼ぶ 変更点は以上です。 ※ただし、もしかすると jQuery の流儀に則るには $( ); で囲ったまま 　なんとかするように書くべきなのかもしれません。
body { background:url(../images/background_line_wall.gif) 50% 200px no-repeat; margin:0; padding:0; } 最近のブラウザは問題無い（昔は問題あった・・・） 上200px、height:800px;の条件で下ゼロってのは矛盾です。
文字化けの様子から、UTF-8で保存しているものをS-Jisで開いているように見えるのですが、下記の方法（ブラウザで文字コード・dreamweaverからも）ダメとなると、0からやったほうが早い気がします。 文字コードの説明がない解説書なんか売るなよ～って思っちゃいますね。 とりあえず、<head>直下に <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"> を追加してみてください。そして保存。もう一度開いてみる。これで治るなら、上記の方法でも反応があった筈なのでだめもとですが。 また、macとのことですが、safari?でチェックしておられますか？Safariは新しい目のバージョンを使っておられますでしょうか？古いsafariは文字化けがよく起こった、charsetも効かなかったように記憶しています。
ますますわからなくなりました。 示されたHTMLソースは <h2><span class="aaaa">ああああ</span></h2> <p>いいいい</p> となっています。そして、「あるいはブロック要素にした方が対策できたりするのかもしれませんが．」・・って、<h2>も<p>もすでにブロックです。ソースでは<h2><span>内容</span></h2>ですから、<span>以外の要素は含まれていませんし、その内容は非置換インライン要素であるテキストのみですので、<h2>と<p>についてのみ設定すればよいことになります。 　line-height,padding,margin,font-sizeおよび非置換要素、インライン要素、およびマージンの相殺とかを理解されていないように思われます。 8.1 ボックスの寸法（Box dimensions） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 10. 視覚整形モデル詳細 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 10.8 行の高さを計算する ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　などを読まれて、わからないところを改めて質問してください。 　それと、もっと具体的なHTMLサンプルと、どの部分(文字列なのか画像なのか)を、どのように表現したいかを、わかるように示してください。
随分と凝ったデザインにされているので手こずりましたが・・ ・HTMLが文書構造を示すものでしたら、スタイルシートで自由にデザインできます。ナビゲーションリンクを上に置こうが左右に置こうが、途中に置こうが、fixedで固定しようがHTMLをいじる必要はありません。 ・また、アンカーの標的として機能するIDと、デザインのためのclass名を分けることで、一つのスタイルシートをすべてのページで共有できます。containerとかcontetとか、酷いのになるとwrapperとかのclass名は文書構造上意味がありません。HTML5になったときどうするのでしょう。 →3.1. 新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) ★あまり細かい部分はいじってません。後は適当に修正してください。わかりやすいと思います。 /* タイプセレクタ・グローバル */ a{color: #017acd} p{text-indent:1em;} /* 表示区画 */ div.header,div.section,div.footer{ ＿width:760px;margin:0 auto;padding:0; } /* ヘッダ */ div.header{ ＿margin-top:2em; ＿background: #017acd url(sky.jpg);height:100px; } div.header h1,div.header p{ ＿margin:0 20px; } div.header h1{margin:0;} div.header p{color:white;font-size:0.75em;} /* 本文 */ div.section{color:black;} div.section h2,div.section p,div.section div.section{ ＿width: 564px;margin:0 auto; } div.section div.section p{margin:0;} div.section h2{ ＿background: #014471 url(bar-darkblue.png) no-repeat; ＿font-size: 1em; ＿color: #ffffff; ＿line-height: 45px; ＿padding-left: 12px; } div.section div.section h3{ ＿background: #ffffff url(maru-skyblue.png) no-repeat 0px 2px; ＿font-size: 0.875em; ＿line-height: 22px; ＿padding-left: 26px; ＿margin: 30px 12px 0 12px; } div.section div.section p{ ＿font-size: 0.75em; ＿line-height: 2em;/* 単位必要 */ ＿margin: 0 12px; } /* フッタ */ div.footer{ ＿background: url(line-blue.png) repeat-x; ＿margin-top: 25px; ＿padding-top: 8px } address{ ＿font-size: 0.75em; ＿font-style: normal; ＿text-align: center } /* ナビゲーション */ div.footer div.nav{ ＿position:absolute; ＿top:0;left:0; ＿width:100%; ＿line-height:2em; } div.footer div.nav ul,div.footer div.nav ul li{ ＿display:block;list-style:none;margin:0;padding:0;height:2em; } div.footer div.nav ul{ ＿width:760px;margin:0 auto;font-size: 0.75em;border-left:solid 1px #005087 ; } div.footer div.nav ul li{ ＿width:10em;float:left;text-align:center;padding: 0 10px;border-right:solid 1px #005087; } div.footer div.nav ul li a{ ＿display:block;text-decoration:none;width:100%;height:100%; }
h2 h5 {　ではなく　h2 , h5 {　としてみてください。
HTML5 に限らず iframe 要素の中のことは iframe 要素の中の文書で！ html/* IE */, body { overflow:hidden; }
GoLiveデータをDreamweaverで利用できるようにする機能は、最終バージョンのGoLive9　またはCS3に付属されたはずです。 ですので、あなたのデータは変換できません。 ＣＳＳの設定等もあると思いますので、テキスト部分をコピーして貼り付け、タイトル、見出し、内容分の設定など、順番に行えば良いと思います。
まず、仕様書を読破すること・・始めは難しいけど、少なくとも必要な情報がどこにあるかぐらいはつかんでおきましょう。 HTML 4.01 Specification (ja) ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLにおいて、id属性は、次の各々の役割を果たす。 　・スタイルシートの選択子。 　・ハイパーテキストリンクの目標アンカー。 　・スクリプトから特定要素を参照するための手段。 　・宣言されたOBJECT要素の名称。 　・ユーザエージェントによる処理一般に用いる。 　　(例えば、HTMLページからデータベースへデータを移植する際にフィールド名を識別するとか、HTML文書を他のフォーマットに変換するなど。) 　一方のclass属性は、ある要素について1つ以上のクラス名を割り当て、この要素が当該クラス/クラス群に属することが示され得る。 1つのクラス名は、複数の要素インスタンスの間で共有され得る。 HTMLにおいて、class属性は、次の各々の役割を果たす。 　・著者が要素集合にたいしてスタイル情報を割り当てたいと考えた際の、スタイルシート選択子。 　・ユーザエージェントによる処理一般。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　HTMLは、その文書を、それを構成する要素(element)に分解して、それぞれの要素をタグを使ってマークアップするものです。言い換えれば文書構造を示す道具です。--メタ言語-- 　たとえば、<h1>ここは見出し</h1><p>ここは段落</p>というふうに、その中で、その文書内の特定の要素に印を付けたいときは、idを使いますし、一個以上の要素に目印を付けたいときはclassをつけます。 　私の友達は、<span class="male yamada" id="YAMADTARO">山田太郎</span>、<span class="female yamada" id="YAMADAHANAKO">山田花子、<span class="male tanaka" ID="TANAJIRO">田中次郎</span> 　とか・・ 　もちろん目的がなければ使いませんが・・ スタイルシートでは、そのスタイルをどの要素に適用させるか指定しなければなりませんが、それにはセレクタ(識別子)を使いますが、ほとんどはタイプセレクタ(要素のこと)で済みますが、それだけでは指定しにくいときにclass(クラスセレクタ)名やid(一意セレクタ)を併用します。 　クラスセレクタは詳細度がc=1,一意セレクタは詳細度がb=1なので、それをうまく使ってしていします。 #YAMADATARO{font-weight:bold;}/* 詳細度[0100] */ div.section span.male{color:green;}/* 詳細度[0022] */ div.section span.female{color:red;}/* 詳細度[0022] */ 　私は、IDでは詳細度が高くなりすぎるので、スタイルのターゲットとしてはまず使いませんし、スタイルシートのためだけにIDをふることはありません。 　なお、HTML,CSSは、頭文字なので大文字で書くべきです。--英文では結構厳しい--
SEOと集客はつながらないから別にどうでもいい。 4．店舗についてよく分かり、かつアクセシビリティ的に優良なサイト を作ればいい。あとは宣伝の仕方。 #1が言っている通りSEOによって現れる結果というのは「検索ワードに対し適切なランクでヒットする」というものであって、たとえばある検索語であなたの店のサイトがトップに表示されようが、そのワードで検索する人が居なければ意味がない。 SEOという言葉の上っ面に騙されないように。
＞一般論ではなく、私の質問の内容からどこがマズイのかを＜具体的に＞指摘してもらえると助かります。 　ずばり書いてあるはずです。その前提として、説明が必要でした。 　inline-blockは、画像と同じinline要素ですから、行のベースラインに合わせられます。サンプルで示したように、きちんとabsoluteやfloatで並べればよいのです。 　もう一度、回答をお読みなさい。
価格表なら、tableを使えば済むことです。 ★デザインのために意味のない、preやを入れるのは間違いです。 <table class="priceList" border="1" summary="価格表"> ＿<tbody> ＿＿<tr> ＿＿＿<td>りんご</td><td>&yen;30</td> ＿＿</tr> ＿＿<tr> ＿＿＿<td>メロン</td><td>&yen;10</td> ＿＿</tr> ＿＿<tr> ＿＿＿<td>ぶどう</td><td>&yen;3000</td> ＿＿</tr> ＿＿<tr> ＿＿＿<td>みかん</td><td>&yen;10000</td> ＿＿</tr> ＿</tbody> </table> [CSS] table.priceList{border-collapse:collapse} table.priceList td{width:5em;} table.priceList td+td{ ＿text-align:right; } 古いブラウザ対応なら二番目の<td>を<td class="price">にして td.price{ ＿text-align:right; } 　これが表ではなく、リストでのマークアップの方が適しているなら、 <ul class="priceList"> ＿<li>りんご<span>&yen30</span></li> ＿<li>メロン<span>&yen;10</span></li> ＿<li>ぶどう<span>&yen;3000</span></li> ＿<li>みかん<span>&yen;10000</span></li> </ul> [CSS] ul.priceList,ul.priceList li{list-style:none;display:block;margin:0;padding:0} ul.priceList{width:10em;border:solid black;border-width:1px 1px 0 1px;} ul.priceList li{width:100%;position:relative;border-bottom:solid 1px black;} ul.priceList li span{display:block;width:5em;position:absolute;right:0;top:0;border-left:solid 1px black;text-align:right;}
CSSをリセットしましたか？
「javascript click スタイル」で検索したら、とりあえず出てきたようです。 基礎知識としてCSSの仕組みなどが必要なので、 http://okwave.jp/qa/q7187090.html こういう質問をしているレベルでは、ちょっと無理ではないかと思いますが、、、 参考サイトの方法は何か特別なことをやっているわけではなく、 「ページ（URL）が違うんだから違う表示になっているだけ」です。 たぶん、:visitedのことをオンクリックが云々と勘違いされているんだと思いますが、 それならスタイルシートの基本事項を勉強していれば、参考サイトのような作り方がでてきます。
＞どことどこの間 別にどこでもいい。もちろんほかのプロパティ設定の{}の中とかはダメだけど。 CSSをいじりたいならそうやって丸暗記的場当たり的にやってちゃダメ。ちゃんと覚えましょう。
no-repeatやrepeat-x、repeat-yと併用して、画像の一部分だけを表示する方法です。 画像の表示場所をマイナスで指定すると、表示エリアの左端よりも左、上端よりも上にある部分が見えなくなります。 （-480pxですから、画像の480px目から右側の部分だけが見えるようになります。） 「CSSスプライト」で検索すると、それを応用した、詳しくややこしい方法が見つかると思います。 widthと背景画像のサイズは特に関係ないと思います。 たまたま、480pxの２倍になっただけでしょう。
基本的なことは、必ず仕様書に書かれています。 　この様な掲示板で聞くより、正確で正しい情報が手に入ります。その上でわからないときに掲示板を利用すると良いでしょう。 11 表 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) <!ELEMENT TABLE - - (CAPTION?, (COL*|COLGROUP*), THEAD?, TFOOT?, TBODY+)> ?は「ゼロ」か「一個」 *はゼロ個以上 |または +は一個以上 <!ELEMENT CAPTION - - (%inline;)* -- table caption --> <!ATTLIST CAPTION %attrs; -- %coreattrs、%i18n、%events -- > 開始タグ: 必須、終了タグ: 必須 <!ELEMENT TBODY O O (TR)+ -- table body --> 　開始タグ: 省略可能、終了タグ: 省略可能 と書かれています。詳しくはそれぞれの項目を 　私は、将来のデザインのため、summaryもしくはcaptionは必ず書きますし、<tbody>も書きます。理由は記事を参照 　内容が異なる場合は<tbody>を複数書くこともあります。 　たとえば長大な表では<thead><tfoot>も書きます。「テーブルをスクロールさせるときのスクロールの位置 - HTML - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7105490.html#a5 )」でも書きましたが、印刷したときに各ページに、<thead><tfoot>が印刷されます。 　現在は、シンプルな表でも先でスタイルシートで必要になる場合もあります。 　たいした手間ではありませんので原則記述します。 <table summary="2011/12/10"> <caption>何たらの表</caption> <tbody> <tr> <th>あ行</th><th>か行</th><th>さ行</th><th>た行</th> </tr> <tr> <td>あ</td><td>か</td><td>さ</td><td>た</td> </tr> <tr> <td>い</td><td>き</td><td>し</td><td>ち</td> </tr> <tr> <td>う</td><td>く</td><td>す</td><td>つ</td> </tr> <tr> <td>え</td><td>け</td><td>せ</td><td>て</td> </tr> <tr> <td>お</td><td>こ</td><td>そ</td><td>と</td> </tr> <tbody> <tbody> <tr> <th>な行</th><th>は行</th><th>ま行</th><th>や行</th> </tr> <tr> <td>な</td><td>は</td><td>ま</td><td>や</td> </tr> <tr> <td>に</td><td>ひ</td><td>み</td><td>　</td> </tr> <tr> <td>ぬ</td><td>ふ</td><td>む</td><td>ゆ</td> </tr> <tr> <td>ね</td><td>へ</td><td>め</td><td>　</td> </tr> <tr> <td>の</td><td>ほ</td><td>も</td><td>よ</td> </tr> <tbody> </table> [CSS] table[summary] caption{caption-side:left;} table[summary]:after{content:open-quote attr(summary) close-quote;} table tbody+tbody{color:blue;} cellpaddin等は cellspacing = length [CN] ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　できるだけ書いておいて、後はスタイルシートでどのようにも設定できますけど・・・
比較的まじめに回答します。 仮に、コンテンツの魅力(記事の面白さ)の値が100だとします。 デザインやSEOや機能によってその値を100以下にすることはあるかもしれませんが、100以上にすることは出来ません。 質問者さんを含めて非常に多くの人が勘違いしていることがあります。それは、SEOやらデザインやらサイトの機能でアクセスを得ようとしていることです。確かにそれらの一部はアクセスに影響を与えますが、根本的にそれらは飾りでありメインではありません。全てのサイトに例外なく「アクセスが少ないい理由」は「サイトのコンテンツに魅力がないから」の一言に尽きます。 WEBサイトには「デザインを改善した部分がよい箇所」が必ず存在します。デザインを学ばれたいならいくつか気付く箇所を回答できますが、「アクセスを増やしたい」のであれば、読者が興味を持つ、面白いと思う記事を書いてください。としかお答えしようがありません。
左側もスクロールさせるのなら、ずっと簡単に <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{background-color:gray; ＿margin:0;padding:0; } div.article{background-color:green; ＿height:400px;margin:0;paddig:0; ＿position:relative; ＿padding-left:178px; } div.main{background-color:yellow; ＿height:100%;margin:0; ＿position:relative; } div.contentTable,div.section,div.aside{overflow:auto;} div.contentTable,div.aside{ ＿position:absolute;top:0; ＿height:100%;margin:0; } div.contentTable{background-color:white; ＿width:178px; ＿left:0; } div.aside{background-color:fuchsia; ＿width:50%;right:0;} div.section{background-color:lime; ＿width:50%;height:100%; } div.section div.section{width:100%;height:auto;} --> ＿</style> </head> <body> ＿<div class="header" id="Top"> ＿＿<h1>タイトル</h1> ＿</div> ＿<div class="article"> ＿＿<div class="contentTable"> ＿＿＿<ol> ＿＿＿＿<li><a href="#Top">トップ</a></li> ＿＿＿＿<li><a href="#section1">一章</a></li> ＿＿＿＿<li><a href="#section2">ニ章</a></li> ＿＿＿＿<li><a href="#section3">三章</a></li> ＿＿＿＿<li><a href="#section4">四章</a></li> ＿＿＿＿<li><a href="#aside1">補足</a></li> ・・・【中略】・・・ ＿＿＿</ol> ＿＿</div> ＿＿<div class="main"> ＿＿＿<div class="section"> ＿＿＿＿<div class="section" id="section1"> ＿＿＿＿＿<h2>記事(1)</h2> ＿＿＿＿＿<p>ここに本文が入る</p> ＿＿＿＿＿<p>ここに本文が入る</p> ＿＿＿＿＿<p>ここに本文が入る</p> ＿＿＿＿</div> ＿＿＿＿<div class="section" id="section2"> ＿＿＿＿＿<h2>記事(2)</h2> ＿＿＿＿＿<p>ここに本文が入る</p> ＿＿＿＿＿<p>ここに本文が入る</p> ＿＿＿＿＿<p>ここに本文が入る</p> ＿＿＿＿</div> ＿＿＿＿<div class="section" id="section3"> ＿＿＿＿＿<h2>記事(3)</h2> ＿＿＿＿＿<p>ここに本文が入る</p> ＿＿＿＿＿<p>ここに本文が入る</p> ＿＿＿＿＿<p>ここに本文が入る</p> ＿＿＿＿</div> ＿＿＿＿<div class="section" id="section4"> ＿＿＿＿＿<h2>記事(4)</h2> ＿＿＿＿＿<p>ここに本文が入る</p> ＿＿＿＿＿<p>ここに本文が入る</p> ＿＿＿＿＿<p>ここに本文が入る</p> ＿＿＿＿＿<p>ここに本文が入る</p> ＿＿＿＿＿<p>ここに本文が入る</p> ＿＿＿＿＿<p>ここに本文が入る</p> ＿＿＿＿＿<p>ここに本文が入る</p> ＿＿＿＿＿<p>ここに本文が入る</p> ＿＿＿＿＿<p>ここに本文が入る</p> ＿＿＿＿</div> ＿＿＿</div> ＿＿＿<div class="aside" id="aside1"> ＿＿＿＿<h2>補足記事</h2> ＿＿＿＿<p>記事</p> ＿＿＿＿<p>記事</p> ＿＿＿＿<p>記事</p> ＿＿＿＿<p>記事</p> ＿＿＿＿<p>記事</p> ＿＿＿＿<p>記事</p> ＿＿＿＿<p>記事</p> ＿＿＿＿<p>記事</p> ＿＿＿＿<p>記事</p> ＿＿＿＿<p>記事</p> ＿＿＿＿<p>記事</p> ＿＿＿＿<p>記事</p> ＿＿＿</div> ＿＿</div> ＿</div> ＿<div class="footer" id="documentInfo"> ＿＿<h2>文書情報</h2> ＿</div> </body> </html>
blk_04.jpgに熊の絵、blk_09.jpgに歯（？）の絵を合成してはダメなのでしょうか？ top、leftを指定してください。 z-indexはあまり関係ないと思います。
モダンブラウザのみの対応ならCSS3だけでできます。 レガシーブラウザ含めるならJavaScriptを使うことになりますね。 ただフェードイン・フェードアウトするだけの仕組みなら、JavaScriptが書ける方なら5分位で組めてしまうものですが、書けないとなるとあらかじめ組まれたライブラリを探すことになりますね。といっても今は探せばいくらでも出てきますよ。 「jquery スライドショー」あたりで探してみてはどうでしょうか。
　本文横幅が、1134pxと言うのはあまりにも広大で多くのユーザーにとって横スクロールを強制されるためお勧めはしません。本来なら、スマートフォンの存在も考慮すれば、最小で600pxの巾でも横スクロールなしで閲覧できることが望ましいですし、たとえスマートフォンを考えなくても1028px(または800px)を標準として設計するのが通常です。 　それはさておき、HTMLは文書構造を示すもの、スタイルシートはプレゼンテーションを指定するものと言う明確な住み分けはしておかないと、HTMLやCSSを読んでも何をどう書いたのかがわからなくなりますし、先でデザインを変更するときにHTMLまで書き直すことになり、「スタイルシートを書き換えればデザインを一新できる」というスタイルシートの長所も失うことになります。 【例】下記サンプル参照 ・HTMLにデザインのためのclass名ではなく文書構造を示すclass名が書かれているので内容が推測できる。 ・CSSを見ただけでHTMLを見なくてもどこをどのようにデザインしたかわかる ・CSSだけを開いて、デザインをまったく異なるものに変えることが出来る。 【サンプル】 ★記事(article-水色の部分)の背景はrepeatさせると簡単です。そのとき、背景画像のサイズを整数分の1のサイズにしておけば良いです。「背景画像(42px---右の12pxは画面には表示されない)-記事(1134px)と組み合わせる」「記事を30pxの整数倍にする(サンプルのもの)」 　サンプルは、記事巾810px(30px×27)にしてあります。30の整数倍にすればよいです。 ★リキッドデザインにするともっと簡単になるでしょう。 ★CSS3だと枠線に画像を使えるのでもっと簡単 ★IE6などに対応させるためには画像をHTML内に書くほうが良いでしょう。 ・Another HTML-lint gateway( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ・The W3C Markup Validation Service( http://validator.w3.org/#validate_by_input ) で検証済み ・タブは＿に置換してあります。タブに戻すこと <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;} div.header,div.article,div.footer{ ＿width:810px; ＿margin:0 auto; } div.header{ ＿background-color:yellow;border:solid 1px yellow;/* サンプルのため */ ＿height:160px;/* サンプルのため */ } div.article{/* 節(1階層目) */ ＿padding:0 30px; ＿margin:0 auto; ＿background:aqua url(images/background/sky2.jpg);/* 背景画像 */ ＿border:solid 1px aqua; ＿position:relative; ＿height:300px; } div.article div.section{/* 章(2階層目h2) */ ＿margin:0; ＿top:-1px; ＿width:100%; ＿background:lime; ＿padding:0; ＿height:100%; } div.article div.section h2{margin:0;} div.article div.section div.section{/* 項(3階層目h3) */ ＿background-color:rgb(200,80,255);/* サンプルのため */ ＿width:auto; ＿margin:5px; ＿height:auto; } div.footer{background-color:blue;border:blue 1px solid;} --> ＿</style> </head> <body> ＿<div class="header" id="Top"> ＿＿<h1>タイトル</h1> ＿</div> ＿<div class="article"> ＿＿<div class="section"> ＿＿＿<h2>見出し</h2> ＿＿＿<div class="section" id="section1"> ＿＿＿＿<h3>本文記事</h3> ＿＿＿</div> ＿＿＿<div class="section" id="section2"> ＿＿＿＿<h3>本文記事</h3> ＿＿＿</div> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>フッタ</h2> ＿</div> </body> </html>
＞・下記の方法でやった所リンクの色は変わり繋がったように見えて実際は貼れていなかったのでリンクをつなぎたい。 ＞・そもそもスタイルシートを違う階層にも適応するにはどのようにすればいいのか教えて欲しい。(そうでなければいちいちスタイルシートをコピーしなければならなくて乱雑になってしまうので) 質問はふたつですが答えは一つです。 https://www.google.com/search?q=%E3%83%AA%E3%83% … https://www.google.com/search?q=%E7%B5%B6%E5%AF% … HTMLファイルの中で<img>タグを使用して画像を表示させたり、自分で書いたHTMLファイルにCSSを適用させたりはできているのでしょう？ならそれと同じようにすればいいんです。パスについての知識さえつければ解決する問題です。 ちなみに。 念のため確認しますが、main.htmlはフレームですよね…？？ ＞<a href="illust/a.html" target="FRAME_MAIN" title="注意書き">作品a</a> これはどう見てもフレーム分割されたページの記述ですが。
画像を読み込まない、あるいはスタイルシートを解除しても利用できるように、普通に<form>を書き、formないしコンテナブロックに背景を置いてrelativeとして、absoluteで各<input><select>などを配置する。 　簡単なので、それを説明しているサイトはないかも。 form{dispaly:block;width:400px;height:300px;position:relative;url()} input,select,textarea{position:relative;border:none;} input[name="name"],input[name="sex"]{top:10px;} input[name="name"]{left:10px;} input[name="sex"]{left:100px;} とか・・
@importは古いIEが対応していないので使いません。 サイト全体の統一感を保つため ・永続的スタイルシートで、font-family、text-indent など ・標準スタイルシートは 　　配置などだけを指定したもの(Top用、一般記事、マニュアルなどと長文用)(*1) 　　色や背景の設定をしたもの(カテゴリーごと) 　　代替スタイルシート 　　印刷用スタイルシート (*1) <body class="Toppage"> <body class="longText"> とか・・で分けて、一枚のスタイルシートで行うこともある。
親子ボックス間のマージン相殺が原因です。 相殺の結果、P要素の margin-topが DIV要素を突き抜け、さらに BODY要素を 突き抜けています。真っ白な余白は HTML要素の背景色です。 （BODY要素と HTML要素に異なる背景色を付ければ一目瞭然です。） この現象は隣り合うマージンの間に何かがあれば発生しませんので、 DIVに上ボーダー、上マージン、before疑似要素などを付けるとよいでしょう。 IE6,7ではご質問にあるような現象が起きませんが、上記の対策を施しても 悪影響はありません。
まず正しいHTMLを学んだほうが良いです。 「メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。. ( http://jigsaw.w3.org/css-validator/#validate_by_ … )」 <!ELEMENT (%heading;) - - (%inline;)* -- heading --> ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　とは、inline要素しか見出し(<H1>～<h6>)内には持てないということです。いちいち仕様書を見るのはなんなので・・ 　HTMLを書いたら Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) 　でチェックしてみるのが良いです。一番早道 　本題ですが、質問の文意から、この場合HTMLは <body> 　<div class="header"> 　　<h1>日記の書き方</h1> 　　<p>まずは思いついたことを箇条書きにする。</p> 　　<p>いきなり、結論から書き始めずにきちんと起承転結を考えて書くと良い。たとえば次のような箇条書きできたとしてます。</p> 　　<div class="sample"> 　　　<ol> 　　　　<li>朝起きたとき、寒く感じた</li> 　　　　<li>・・・</li> 　　　</ol> 　　</div> 　</div> などとなるはずです。 　 　また、transitinalは将来廃止される要素・属性を含んでいますので、srictで作成することをお勧めします。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML文書を作る場合には、この仕様における、他のDTDセットではなく strict DTD に適合する文書を作るよう推奨する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［4 適合条件: 必須事項と推奨事項/4.1定義( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　近々、HTML5が登場しますが、これはHTML4.01strictの改訂版です。XHTMLは、XHTML2(HTML1.1は勧告ですがstrictしかない)以降、開発中止になりHTML5と統合されます。 　スタイルシートですが、この場合見出しの色を変えたいのですから div.header h1{color:blue;font-size:1.1em;} /* 詳細度は[0,0,1,2]--12--になりますから、たとえそれより後で h1{color:red}/* 詳細度 [0,0,0,1] --1-- */ と指定しても、上書きはされません。 　CSSとはカスケーディングスタイルシートの略で、カスケーディングが最大の特徴です。それぞれのプロパティより先に、カスケーディングの仕組みについてしっかり身につけてください。変なclass名やidをつける必要はなくなります。 　目立たせたいのが段落の一行目でしたら div.header p{color:blue;font-size:1.1em;} div.header p+p{color:black;font-size:1em;} ★"カスケード"について - CSS Dencitie ( http://www6.plala.or.jp/go_west/nextcss/ref/basi … ) [サンプル]HTML4.01strict、タブは＿に置換してあるので戻すこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- p{text-indent:1em;margin:0;line-height:1.6em;}/* 日本語向け */ div.header h1{color:green;font-size:1.1em;} div.header p{color:blue;font-size:1.1em;} div.header p+p{color:black;font-size:1em;} --> ＿</style> </head> <body> <body> ＿<div class="header"> ＿＿<h1>日記の書き方</h1> ＿＿<p>まずは思いついたことを箇条書きにする。</p> ＿＿<p>いきなり、結論から書き始めずにきちんと起承転結を考えて書くと良い。たとえば次のような箇条書きができたとしてます。</p> ＿＿<div class="sample"> ＿＿＿<ol> ＿＿＿＿<li>朝起きたとき、寒く感じた</li> ＿＿＿＿<li>・・・</li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h1>見出し<h1> ＿</div> </body> </html>
じゃあ逆に質問ですが、大企業のサイトに「リンク集ページ」があったとして、そこにはどんなサイトが並ぶと思いますか？ #1が言うように、無いものは「必要ない」から作らないだけです。
No.2です。 　一度仕様書(CSS2でもよい)を読み通しておくことをお勧めします。 視覚整形モデル ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 視覚整形モデル詳細 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) その他の視覚効果 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) ページ媒体 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 音声スタイルシート ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) は異なります。 float:プロパティは、視覚メディア(visual)です。 　たとえば、visualとprintedは随分と異なります。特にfixedは各ページに印刷されます。 　プロパティ索引 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )のfloat:の項目の右端に、visualと書いてあります。 　あくまで、テキスト中の挿絵など本来の使い方なら大丈夫ですが、blockの配置には使うべきではありません。 　たとえば、 ペットボトル握力計 ( http://iruka.la.coocan.jp/craft/HandDynamometer/ … ) 　な使い方をします。
そこまでくるとぶっちゃけ ・フレームにしてJavascriptでメニューの開閉 ・PHPでやれ ということになってしまいますね… ＞希望の動作をcssやjsなどで制御し、リスト自体は一括管理し、1ファイル修正すれば全てに適用されるような方法はないでしょうか？ という点も踏まえると他に選択肢は皆無といってもいいでしょう。 発想を切り替えてですね、その「置換」を少しでも楽にする方法を考えてみてはいかがでしょうか。 こんなツールがあります。 https://www.google.com/search?q=devas 正規表現も使えるので、慣れれば今回のようなファイルについては非常に楽になります。置換前のバックアップも取ってくれるので安心です。
・項目数が変動する。 ・縦サイズが異なる。 　以上から、tableではなくリストで並べるほうが良いでしょう。要は何を優先するかです。特に後日の項目の削除、追加が行われるのであればtableや一つ一つにclass名をつけるのは避けたほうが無難でしょう。tableは、行および列にグループが並ぶという意味からも違うと思います。【参照】→「ページレイアウトの目的で表を用いる。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」 　それなら、何を見直すかというと、「レイアウトの都合上、外枠に余裕を持たせておくことが不可能です。」だと思います。--必要なら、ややこしいコマのマージン以外でこれを調整する簡単な方法がありますけど-- 　そもそも、私が提示したサンプルは商品のナビゲーションリストを携帯端末から幅広のウィンドウに対応させるリキッドデザイン用のものです。そのため、（ひとつのコマサイズ×横幅）と親コンテナブロックのサイズによると右端の隙間が変化します。 　HTMLの本来の目的「HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」を考えると、ガチガチに固めてしまうことを目的にするのは誤りではないかと思っています。もし、デザインを優先するのなら、PDFというそのための仕様があります。 　今日は忙しいので、暇を作ってサンプル作ってみます。
個人的な意見ですが、そこまで、文書構造を無視して見栄えにこだわるならPDFをお勧めします。 　ただ、tableであっても、表の方向は指定できます。 　縦書き表記(writing-mode:tb-rl;)は、どうもCSS3でも導入されない可能性があります。IE依存 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- table.kenti{ ＿font-family:'ＭＳ 明朝',serif; ＿font-size:16px; ＿border-collapse: collapse; ＿border:none; ＿padding:2px; } table.kenti td{ ＿width:1em; ＿vertical-align:top; } table.kenti caption{caption-side:right;font-weight:bold;} table.kenti td{padding:0.5ex 0.1em;border:none;} table.kenti td[colspan="2"]{padding:0.5ex 1em;} table.kenti td.ta small{font-size:12px;font-weight:bold;} --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<table summary="データ" border="1" class="kenti column6" dir="RTL"> ＿＿<caption>九月十八日</caption> ＿＿<tbody> ＿＿＿<tr> ＿＿＿＿<td class="ta" width="1" valign="top"><small>北の番</small></td> ＿＿＿＿<td>上田三反三畝二十七歩</td> ＿＿＿＿<td class="ta" width="1"><small>関所</small></td> ＿＿＿＿<td>上田一畝八歩</td> ＿＿＿＿<td class="ta" width="1"><small>関所</small></td> ＿＿＿＿<td>上田一畝八歩</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td width="1">五拾六間</td> ＿＿＿＿<td width="1">十八間壱尺</td> ＿＿＿＿<td width="1">弐拾六間</td> ＿＿＿＿<td width="1">十三間</td> ＿＿＿＿<td width="1">弐拾六間</td> ＿＿＿＿<td width="1">>十三間</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td colspan="2" width="2">六郎左衛門</td> ＿＿＿＿<td colspan="2" width="2">同人</td> ＿＿＿＿<td colspan="2" width="2">同人</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td colspan="2" width="2">下畑壱歩</td> ＿＿＿＿<td colspan="2" width="2">下畑壱歩</td> ＿＿＿＿<td colspan="2" width="2">下畑壱歩</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td width="1">弐間</td> ＿＿＿＿<td width="1">三尺</td> ＿＿＿＿<td width="1">三間</td> ＿＿＿＿<td width="1">三尺</td> ＿＿＿＿<td width="1">三間</td> ＿＿＿＿<td width="1">三尺</td> ＿＿＿</tr> ＿＿＿<tr> ＿＿＿＿<td colspan="2" width="2">小左衛門</td> ＿＿＿＿<td colspan="2" width="2">仁左衛門</td> ＿＿＿＿<td colspan="2" width="2">仁左衛門</td> ＿＿＿</tr> ＿＿</tbody> ＿</table> </body> </html>
div.nav2 dl dt img{margin-left:10px;} とかを追加してください。 なお、画像サイズはご自身のものに・・ 　細かい位置調整もnav1,nav2とも可能です。 div.nav1 dl dt{position:relative;} div.nav1 dl dt:after{position:absolute;top:5px;left;10px;} とか・・ 　HTMLは文書構造をもっとも表している要素でマークアップすること。それに基づいてスタイルシートを書く(デザインのためにHTMLに手出しをしない)ことを念頭において作成されると、良いでしょう。
サイト自体を980pxでもきちんと表示されるよう(リキッドスタイル)に作成してあると、正しく縮小されるはずですが？？？ header,section,footer{ width:80%; margin:0 auto; min-width:640px; max-width:900px; } とかにしてませんか？(HTML5です) HTML4.01でしたら div.header,div.section,divfooter{ width:80%; margin:0 auto; min-width:640px; max-width:900px; } でPC、スマートフォンに対応するはずです。スマートフォン用に別のスタイルを適用したいなら、 iPhone Android など、スマートフォン向けhtmlコーディング/CSS (H.I. Art Works [ Web Technology ] - ウェブ制作技術情報 -) ( http://tech.hi-works.com/webcreative/markup/389 ) とか・・ 　スマートフォン用に別のHTMLを書くことは、HTMLの基本から外れています。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より
フリー素材では無い様ですが…？ ＞http://dex.ne.jp/mantan/illust_mantan/psearch/Im …
ノウハウとおぼしき箇所をつぶすようにレイヤーを結合して 最低限のレイヤー状態にして提出すればよいのでは？ ＞この場合、PSDデータ料金として、別途いただくべきでしょうか？ 常識的にこれはないでしょう
＞left:-1px 　問題はありませんが、他の標準ブラウザでずれてしまったら、ダメです。すくなくとも現状もっともウェブ標準に近いfirefoxなどで表示確認はしてください。 　最初に html,body{ margin:0; padding:0; } を書いておいたら？ 　原因のひとつに、<div id=footer>が他の親コンテナブロックに含まれているということはありませんか？ 　IE6は、標準と異なり自身のサイズや位置を算出するとき、本来はpadding辺の内側を参照すべきところを間違えています。 　1px程度のずれと言うことは、それが原因ではないかと・・
　変則的なマークアップをすれば出来なくはないですが、HTMLの目的に反するので、ないと思われたほうがよいでしょう。 　まあ、すればfont-family:monospace;にでもして、で調整するくらいかな・それでもしないほうが良いです。
HTML,BODY要素にはデフォルトでマージンがありますから html,body{ margin:0; } を最初に入れておくとよいです。 (最初でなくても良いですが、すべての要素に適用させる設定は最初にまとめておくほうが、わかりやすい。p{margin:0;text-indent:1em;line-height:2ex;}とか・・)
URIにせよなんにせよプログラムのなかで使う文字列がローカルとサーバーで異なる場合、異なるものは全て１つのファイルに寄せてしまいup前後でいじるのはそのファイルだけということにしてしまえばある程度楽かと思います。
ということは、スライドショーは別の動画として存在していて、スライドショー自体にリンクを埋め込むのではなく、その上に独立したリンクを重ねると言うことでしょうか？ 　それとも、リンクにポインターを合わせることで、スライドショーの画像を入れ替えると言うことでしょうか？ 　それが、どのようなもの(画像の上にリンクを置く、プルダウンメニュー、その他)であれ、HTML自体は、デザインとは独立してきちんと書かなければなりません。 <div class="section"> 　<p><object></p><!--動画なり画像--> 　<div class="nav"> 　　<ol> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　</ol> 　</div> </div> 　想像するに、スライドショーのほうが後に書かれているとか・・・ 　いずれにしろ、もうすこし具体的な内容が必要です。デザインのためにHTMLを書くとdivスープと呼ばれるdivだらけのものになりますし、検索エンジンを含む他のユーザーエージェントに理解できなくなりますし、そもそもスタイルシートが専用のものになり複雑怪奇になります。きっと誰にも手が付けられない状態に・・
ユーザビリティの関係で、あまりフォームのデザインにこだわることはないのですが、時々参考にさせていただいているのは ★フォームをデザインしよう | DesignWalker ( http://www.designwalker.com/2009/03/form-design- … ) とかですかね。
ググればいいものを… https://www.google.com/search?hl=ja&lr=lang_ja&i … http://www.nwun.com/katsunakatamisa/webwork/telh …
一時的にという事であれば、グループ化[Ctrl+G]ですかね？ グループ化解除は[Ctrl+Shift+G]です。 統合…が何を言っているのかは判りませんが、パスの結合の事でしょうか？ それなら、解除はパスの分離ですよね。 統合=グループ化の事を言っているなら、それ以上の一時的にまとめるという機能はありません。
次のように書きます。 ポイント (1)置換インライン要素は、置換される内容(画像)自身のサイズを参照しますが、ブロック要素はそれを内包する親ブロックのサイズを参照します。 (2)テキストを上に乗せるのでしたら、背景ですから本来は背景とするべきです。ただ、その場合CSS2.1には画像サイズを指定するプロパティがありませんからCSS3のbackground-sizeを使用します。 補足) ★画像のようなインライン要素は必ずブロック要素の内部にしか書けません。 ★下記サンプルは、HTML4.01strictです。transitionalは非推奨なので・・ ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス[オプションCSS3] ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) にて検証済み ☆＿はタブに戻すこと <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.section p{ ＿font-size: 24pt; color:red; ＿width: 400px;margin:20px auto; ＿position:relative; ＿z-index:100; ＿background-size: 100% 100%; /* CSS3 background-size:cover|contain|auto */ ＿background-repeat: no-repeat; } div.section p img{ ＿display:block; ＿position: absolute; top: 0;left: 0; ＿width:100%; ＿height:100%; ＿z-index:-10; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>サンプル</h1> ＿</div> ＿<div class="section"> ＿＿<h2>画像の伸縮</h2> ＿＿<p>CSS2.1</p> ＿＿<p> ＿＿＿<img src="images/sample01.jpg" width="480" height="360" alt=""> ＿＿＿あいうえお、かきくけこ、さしすせそ、たちつてと、なにぬねの、はひふへほ、まみむめも、やいゆえよ、らりるれろ、わゐうゑを ＿＿</p> ＿＿<p> ＿＿＿<img src="images/sample02.jpg" width="480" height="360" alt=""> ＿＿＿あいうえお、かきくけこ、さしすせそ、たちつてと、 ＿＿</p> ＿＿<p> ＿＿＿<img src="images/sample03.jpg" width="480" height="360" alt=""> ＿＿＿あいうえお、かきくけこ、さしすせそ、たちつてと、なにぬねの、はひふへほ、 ＿＿</p> ＿</div> ＿<div class="section"> ＿＿<h2>CSS3のbackground-sizeプロパティを使用する</h2> ＿＿<p style="background-image:url(images/sample01.jpg)"> ＿＿＿あいうえお、かきくけこ、さしすせそ、たちつてと、なにぬねの、はひふへほ、まみむめも、やいゆえよ、らりるれろ、わゐうゑを ＿＿</p> ＿＿<p style="background-image:url(images/sample01.jpg)">2 ＿＿＿あいうえお、かきくけこ、さしすせそ、たちつてと、 ＿＿</p> ＿＿<p style="background-image:url(images/sample03.jpg)"> ＿＿＿あいうえお、かきくけこ、さしすせそ、たちつてと、なにぬねの、はひふへほ、 ＿＿</p> ＿</div> </body> </html>
透明と画像処理を勘違いしていませんか？透明に見えるが透明でない素材を作って、画像を配置されています。 http://www.nasusafari.com/img/logo.jpg が画像です。透明にはなっていないようですが。 このサイトのｈ1はおっしゃっている場所ではありません。ロゴとして扱われているようです。ソースを覗いてみると <DIV id=h1> <H1>ホワイトライオン・トラ・キリン・カバ・サイ・ゾウなど約70種700頭羽の動物をすぐ間近で見られるサファリパークです</H1></DIV><!-- #BeginLibraryItem "/Library/上メニュー.lbi" --> <DIV id=logo><IMG border=0 alt=那須サファリパーク src="img/logo.jpg" width=515 height=99></DIV> Dwはおろか、メモ帳でも画像があればできます。Dwはソースコードを効率よく書くには有効ですが、理解していないことは出来ないと思います。初心者を自認しておられるなら、Dwなどのツールに頼る前に基本的なことは押さえられることをお勧めします。 気になるサイトのソースくらい見ましょう。そのものずばりの答えがあります。
無駄な書き方をするからです。 　それぞれのプロパティには、値によって他の性質を持つものがたくさんあります。有名なところではfloat:です。それが指定されると無条件で新たなブロックを作ります。a要素のwidth:、height:を指定すると、それ自体が大きさを持ちます。 　スタイルシートを簡潔に書きましょう。 ところで、気になったのですが、id="scope1"って何でしょう。スタイルシートで、さすがにそれに他のセレクタをつける意味と合わせて??でした。 　ナビゲーションリストだと思いますが、他のaにもそれぞれidがつくのですか? 　その場合は、スタイルシートではなく個別の要素で背景画像のみ追設定したほうがよいのではないかと・・
＞ IE6はまだ無視できませんので、対応方法をお教えお願い致します。 無視しても良いと思いますけど・・ 日本のバージョン別ブラウザシェアグラフ （StatCounter Global Statsより） ( http://lhsp.s206.xrea.com/misc/browser-share-ver … ) 　HTMLのソース上で後のほうに登場させれば良いです。 <div class="header"> 　<div class="nav"><!-- ここではなく --> 　</div> </div> <div class="sectin"> 　コンテンツ </div> <div class="footer"><!-- static --> 　<div class="nav"><!-- ここに移動 --> 　</div> </div> もしくは、 <div class="header"> 　<div class="nav"><!-- ここではなく --> 　</div> </div> <div class="sectin"> 　コンテンツ </div> <div class="nav"><!-- ここに移動 --> </div> <div class="footer"><!-- static --> </div>
参考になるページは、まさにそのサイトです。 スタイルシートを学ぶには、まずHTMLをしっかり作ることが肝要です。fixedは、「絶対位置への配置となるのはabsoluteと同じですが、スクロールしても位置が固定されたままとなります。」とありますが、付け加えるならfixedで指定される位置は、ウィンドウ自体が基準になります。 positionのような配置体系についての詳しい情報は 9.3 配置体系（Positioning schemes） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) にあります。fixed自体の説明は、ここにすべてあります。 　しかし、仕様書のこの項目を読むだけで、position:fixedを使う場合、それに関連したプロパティ(top,bottom.left,right)や閲覧領域、ブロックなどの用語も知っておく必要があることがわかると思います。 　何を学ぶときもそうですが、いきなり結果だけを手に入れようとしても無理です。きちんと手順を追って学んでください。 そのサイトのトップである HTMLクイックリファレンス ( http://www.htmq.com/index.htm ) とか、 1と2の間辺りからはじめるホームページ講座 ( http://www6.plala.or.jp/go_west/beginner/ ) とか。 　著者の立場になると、HPじゃ意味が通じない場面がしばしば出てきます。きちんとウェブページとしましょう。HPは世界的にヒューレッドパッカード社のことですし、ホームページはブラウザを起動したとき最初に表示されるページのことです。せいぜい、自分のウェブサイトのトップページと言う意味ぐらいまでは混乱はしないですが・・・。「ホームページに戻るリンクはどう書けばよいのか???」と聞かれても???になると思いますよ。
display: table-cell; は IE8 から実装されたプロパティです。 http://msdn.microsoft.com/ja-jp/library/cc351024 … IE7 以下では display: table-cell; に依存しない書き方をする必要があります。 http://jsfiddle.net/EaCg3/1/
コードビューにして、範囲を選択　CTRL+Fで置き換えを選択して<span>と</SPAN> を空白に置き換えればOKです、
　ホームページ上でチャット画面を常時出すには？ - ホームページ作成ソフト - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7139716.html#a )でもお答えしましたが、作者の立場になったら、ホームページと言う言葉を使わないほうが良いでしょう。 　この場合、ホームページとは「あなたのウエブサイトのトップページ」と言う意味だとして、質問はトップページをサイトのトップページとしたいということです。・・・どのページをトップページ(サイトのホームページ)にしようと、まったく自由なのです。 　ということはもあなたが私のサイトのトップページはここですと、掲示板のページを提示すれば事は足ります。その掲示板のデザインは使われている掲示板のソースを変更すれば良いです。掲示板自体は、サーバーに持っているデータをHTMLに変換して表示したいるに過ぎません。 　訪問者から送信されたデータがあれば、それを整理してデータに付け加えて、再びHTMLを出力する。その繰り返しです。 　現在使われているCGIのソースを見れば、必ず ・HTTP応答ヘッダを出力している部分に続いて、HTMLを出力している部分があります。 　その部分に、あなたのウェブページのものを追加すれば良いです。
再掲です。 表にして並べるのはIEの存在を無視できないので、サイズを指定したblockにしてfloatさせましょう。 HTML的にも無理がなく正しいマークアップになります。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- /* display:block */ div.album2 ol,div.album2 ol li{ ＿display:block;list-style:none; ＿margin:0;padding:0; ＿border-spacing:10px; } div.album2 ol li{ ＿width:100px;height:100px; ＿border:solid 1px blue; ＿text-align:center; ＿float:left; ＿background-position:50% 50%; ＿background-repeat:no-repeat; ＿margin:5px; } div.album2 ol li span{ ＿display:none; } --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<div class="album2"> ＿＿<ol> ＿＿＿<li style="background-image:url(./images/thumbnail/RIMG0002.jpg)"><span>フセ</span></li> ＿＿＿<li style="background-image:url(./images/thumbnail/RIMG0016.jpg)"><span>タテ</span></li> ＿＿＿<li style="background-image:url(./images/thumbnail/RIMG0021.jpg)"><span>コイ</span></li> ＿＿＿<li style="background-image:url(./images/thumbnail/RIMG0024.jpg)"><span>ツケ</span></li> ＿＿</ol> ＿</div> </body> </html>
＞つまりこれはidを使ってしまうと、idが違うだけで同じスタイル複数書いてしまう 事になるよってことですよね。確かにそうですね。 　たくさん作成していると、こういう細かいところも随分と賢くなりましてね。 　IDは、<a href="WHAT_IS_HTML">とかに残しておいて、classをうまく使って、適用させたい要素を指定するほうが便利なのです。<div class="header" id="WHAT_IS_HTML">あるいは、<div class="header" id="TOP"> 　classの値は、「半角スペースで区切っていくつでも書ける」という特性がありますし、詳細度が高くすればいくらでも上書きさせられる。 　私は、HTML内のあるブロックのスタイルがスクロールなしですべて理解できるように短くまとめるようにしています。でないと、CSSがどんどん肥大化して後で修正するときに地獄になります。そのためには、idよりclassのほうが本当に楽です。 　いずれにしても、大事なことはスタイルシートではなくHTMLのマークアップです。それさえきちんと出来ていれば、 div.header div.abstract{margin:0 1em;border:solid 1px solid;} div.section div.tableContent{position:absolute;left:0;top:0;width20%} とCSSを書くことが出来ます。これだと誰(数年後の自分)が見ても何をしようとしてるかわかるでしょう。 #left{position:absolute;left:0;top:0;width20%} じゃ、HTMLを開かなくちゃならない。・・・すこし本題と外れますが・・・ 　<div id="header">じゃなく<div class="header">をつかうもうひとつの理由は、将来HTML5に変更するとき、<div class="header">→<header>、<div class="section">→<section>とするほうが、楽だからです。 div.header{}と書かれているスタイルシートを div.header,header{}と変更すれば、スタイルシートが流用できますからね。実を言うとすでに、そう書いている。(HTML5のページはないですが)
あなたのウェブサイトで表示させるページを動的なものに変えます。 たとえばCGIを使って、作成して表示させるものに変えます。 その上で、訪問者にcookieを発行し、それを使ってページを作る。 #!/usr/local/bin/perl ・・ if($ENV{'HTTP_COOKIE'}){ ・・・ } ・・ while($line){ 　s/__USERNAME__/●●●/; 　print; } とか・・ 詳しくは、 CGI - 教えて！goo ( http://oshiete.goo.ne.jp/category/251/ ) とか・・
私の場合スタイルシートの掃除でなくhtmファイルの掃除で使用しましたが。 Win Tree Version 1.8(使用してファイル一覧).KeywordInspector Version 1.16a(文字検索)・エクセル・テキストエデダーを使用して作成しました。 検索文字ですが外部スタイルシートが「<link rel="stylesheet" href="../g_f/n_s1.css"> 」の場合で統一されていますので「stylesheet」で統一されていますので外部スタイルシートは判りますが。 ファイル一覧は、テキストファイルで保存できますのでエクセルで使用可能のCSVファイルに変換後不要内容をエクセルで削除ししています。セルの追加して全て１を追加します。 文字検索では不要な内容をテキストエデダーで削除しています。セルの追加して全て２を追加します。 両ファイル追加してチェックします。 削除の場合対象ファイルの場合「文字検索」ご削除しています。 スタイルシートの掃除もhtmファイルの掃除も同じだと思います。 linkもれも見つかりましたが。
No1さんの回答であっていますが <div style="text-align:right;float:right;width:50%;">右パーツ</div> <div style="text-align:left;float:left;width:50%;">左パーツ</div> <div style="text-align:center;clear:both;">本文</div> width:は、お好み大きさを指定して下さい。 本文にclear:both;(テキストの回り込みを 両側の回りこみを解除) 指定した方が良いと思います。 IEでは、問題なくてもSsfari等MACプラウザでは、問題が発生する可能あります。 IEでは、問題なくてもSsfari問題が発生した写真を添付します。
HTMLとスタイルシートの関係を考えるのには良い見本でしょう。 　間違いはたくさんありますから、全体的にはバツですが・・ 　★Another HTML-lint gateway( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) HTMLの書き方ですが、きちんとナビゲーションリストとしてマークアップされています。 すなわち、 <ul>順不同リスト 　<li><a href=""></a></li> 　<li><a href=""></a></li> 　<li><a href=""></a></li> 　<li><a href=""></a></li> </ul> とされています。 それを、class名はもっと適切なものがあると思いますが、divを使って括ってあります。 『DIV要素・・・は、・・・class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』 CSSについては、 　単純に小さなブロックにして、floatで並べ替えてあります。 ★全体的には、いわゆるdivスープになっていて、そのid名やclass名には不適切なものもたくさんありますが、このナビゲーションリストをブロックにして並び替えている部分については、特に問題はなく、まあ参考にはなるでしょう。 　ソースやスタイルシートは、ご自身で確認してください。ここで書ききれる量ではありません。 本来のマークアップは <div class="nav"> 　　<h2>初心者アフィリエイターが稼ぐ為にやる事</h2> 　　<ul> 　　　　<li>アフィリエイトの始め方 　　　　　　<ul> 　　　　　　　　<li>メールアドレスの取得</li> 　　　　　　　　<li>無料ブログの開設</li> 　　　　　　　　　・・・【中略】・・・ 　　　　　　</ul> 　　　　</li> 　　　　<li>ASPの登録方法と使い方 　　　　　・・・【中略】・・・ 　　　　</li> 　　　　・・・【中略】・・・ 　　</ul> </div>　 とするべきでしょう。これ以外、HTMLに書くことありません。 ★肝心なことは、HTMLは文書構造にしたがってマークアップすること。この時点ではデザインは基本的に考えないことです。 2.4 HTML 4による文書の著述 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　それさえ出来れば、スタイルシートで、どのようにもデザインできます。３×３だろうが、２×４だろうが、プルダウンだろうが・・自由自在です。
page-scrollerというjavascriptでしょう。JQueryの 詳しくは、このページで使用されているjavascriptをご覧ください。 firefoxだと、JSviewというアドオンで、表示メニューからそのjavascriptを選択する良いでしょう。 その他情報は、 page-scroller.js - Google 検索 ( http://www.google.co.jp/#sclient=psy-ab&hl=ja&so … ) から・・
目的は違うのですが、 コンテンツ ( http://hpcgi1.nifty.com/Iruka/contents.html ) のようなものかな？ 　このページは、CGIを使っています。 　スタイルシート自体を、CGIを使って書き直しています。 「スマートフォンでサイトを観覧した場合、Media Queriesによって強制的に読み込まれたスタイルシートをPC版のスタイルシートに切り替える良い方法はないでしょうか？」 　なぜ、そのようなことが必要なのですか？基本的に必要がないはずです。
質問への回答は、この前の質問「入力フォーム画面がたくさんある場合 - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7128807.html )」とまったく同じになると思います。フォームに限った問題ではありません。 　HTMLのformは、そのままで様々にデザインを変えたいと言うことは、必ず文書自体の目的や構造が異なるわけですから、それに合わせてデザインが変わるようにCSSを書けばよいだけです。もちろん、同じサイトの基本的な部分を変更してしまうとユーザーを混乱させますから共通な部分もあるでしょうし、同じ系列のフォームはテーマが同じになるでしょうし、特定のページについては他と変わるでしょう。 　それを何を基準に変えるかは、あなた自身であって私を含めて誰にもわからないでしょう。 　私がその必要があって行うとしたら、どうするかの例を挙げましょう。formに限りません。 1)サイト全体のデザインの基本は、固定(Preferred)スタイルシートで指定しておきます。 　font-family、font-size、color、background、line-heightなど 2)優先(preferred)スタイルシートで指定します。(代替スタイルシートがあるとき) 　枠線や全体の配置 3)各HTMLで、そのformないし、それの親要素によって判別するセレクタ(選択手段)を書く 　bodyにclass名をつけておくとか 4)各HTMLのヘッダで適用させるスタイルシートを指定する。 　詳細度が同じなら出所と出現順位、詳細度が高ければ優先される 5)各HTMLのヘッダで適用させるスタイルを指定する。 　<link>で指定した後で、記述すると詳細度が同じなら優先される。 6)最終的にはstyle属性で指定する。(詳細度が最大なので) 　これらを、臨機応変にうまく使い分けてください。 詳しくは 6. 値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 14.2 HTMLへのスタイル付加 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　
フォームのみならず、CSS全般で言えることですが、サイトを通して共通するスタイルはタグに直接指定する。いくつかパターンに分けられそうな場合は、classに指定する。その要素固有のスタイルの場合は、idで指定する。JavaScriptが絡んでくると、必ずしもそれが理想ではない場合もありますが、基本はそんなところだと思いますよ。 CSSの設計に慣れないと難しいのは、現状のスタイルではなく、今後どのように変化するかも予測して、あるいは、どのように変化しても対応できるカスケードをプランニングする必要があるところだと思います。
No.1です。解決したのかな？？ 下記の簡単な(ウェブ標準)HTMLで、Firefox+firebugで、どの要素が画面上でどこになるかをチェックしてみると良いです。赤はその要素、黄色はマージンです。 　formはマージンかありません、form内のpにはマージンがあり、前後のマージンと相殺されていることがわかります。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<p>前の行</p> ＿<form action="./"> ＿＿<p> ＿＿＿名前(I)<input type="text" name="name" size="20" value="" tabindex="1" accesskey="I"><input type="submit" value="送信(S)" tabindex="2" accesskey="S"> ＿＿</p> ＿</form> ＿<p>後ろの行</p> </body> </html>
忘れてた。添付画像はLynxで確認したもの なお、質問で「親ボックスの中で子ボックスを真ん中に。 」と書かれていますが、imag要素はブロックではありません。行内要素です。 　display:block; と指定しなおしても、中央配置はややこしくなるので、親要素をtableに、子要素をtable-cellにするか、背景で指定するのが良いでしょう。 　いずれがよいかは、HTMLの文書構造で決めてください。
p{ position:relative; }
＞ええっとそういうものなのでしょうか。ちょっと変に感じてますが。 何のoverflowがhiddenなのかを考えれば明白です。 #header, #main, #footerに指定したoverflow:hiddenは、それらの要素内のはみ出しを無視する指定になります。 （ここでいう「はみ出し」はwidth, heightで指定した範囲外の部分です。） ということは、#header, #main, #footerが（ブラウザのリサイズなどで）bodyからはみ出した場合、bodyでoverflow:hiddenしていなければbodyのスクロールバーが表示されることになります。
名前は別にないと思いますが？？？
例のサイトは、 <div id="container"> 内にスライドショーが配置されているので、 *{margin:0;padding:0;} を div#container *{margin:0;padding:0;} とすれば良いでしょう。 （本来は、アスタリスクの全称指定でリセットせずに個別指定した方が良い） そうすれば、元のデザインには影響する事がなく、 スライドショーだけに適応されます。 但し、質問者さんの構造が スライドショーの外枠が<div id="container">だとは限らないし 別のセレクタが関係している場合や優先度の問題もありますので・・・
本を読むのであれば、デザインの本質を知ることも重要です。 初心者はテクニカルな方向へ行くことが多いんですが、事前に地味ですが大事なものも知っておきましょう。 誰のためのデザイン?―認知科学者のデザイン原論 http://www.amazon.co.jp/dp/478850362X/ また、Webデザインならではのノウハウや、組織としての案件フローをイメージするのもポイントですね。 Webデザイン受発注のセオリー　デザインコントロールが身につく本 http://www.amazon.co.jp/gp/product/486267111X 上記はすごく役に立ちました。 地味ですが、けっこう深くて実践的です。 と、下記はデザインの感覚やアイディアを貯めたり練ったりするのに使うサイトです。 http://www.ikesai.com/ http://www.designlinkdatabase.net/ http://www.web-mihon.com/ 定期的にみると、けっこう楽しくて自分に合ったデザインも見つかります。 ポイントなのは「デザイン」の本質・意味を自分で持つこと、その実現のための手段と引き出しをおおく持っておくことです(技術的にも人間的にも)。 どちらが欠けても質は上がらないですね。
body{text-align:center;} #outline{text-align:left;} .content{float:left;} は、CSS2.1(ベンダーが標準とみなしている仕様)だと body{text-align:center;}/* text-align:継承される 詳細度は0001 */ *#outline{text-align:left;}/* text-align:継承される 詳細度は0100 */ *.content{float:left;}/* float:継承されない 詳細度は0010 */ といういみですね。*は全称セレクタで詳細度0 このCSSにて、H1が左寄せ、H2が右寄せになるということは、H1は*#outlineにあることですね。ということは、 #outlineの内部にH1があるということです。 <body> 　<div class="article"> 　　<div class="header" id="outline"> 　　　<h1>見出し</h1> 　　</div> 　　<div class="section" id="content"> 　　　本文 　　　<div id="tableConten"> 　　　　目次 　　　</div> 　　</div> 　　<div class="footer2> 　　　文書情報 　　</div> 　</div> </body> なら、 　div.article{ 　　width:80%; 　　max-width:1200px; 　　margin:0 auto; 　} だけでよい。 ★CSSの最も根幹を成すのは、プロパティではなくカスケーディングです。カスケーディングスタイルシートと言われている。カスケーディングとは、スタイルの出自、詳細度、継承、優先順位で定まります。それをきちんと理解しなければ、#outline,.contentのようなIDやclass名のみならず、要素すべてにidやclass名をつけたり、不要なdivを撒き散らすことになります。そのうえ期待したようにならない。 　bodyという、もっとも上位のブロックで、継承されるプロパティをbodyというタイプセレクタで指定してますから、その子孫すべてに、原則は適用される。ついで、<div class="content">を*.content{}という、全称セレクタ(* -詳細度0000)＋クラスセレクタ(. 詳細度0010)で指定している(詳細度0010)が、その中ではtext-alignを指定していれば、それが詳細度が高いので優先されるが、指定していないので継承値が使われていると言うことです。 　bodyのtext-alignを外すか、より詳細度が高いセレクタで改めてtext-align:leftを指定すればよいだけです。 　bodyにtext-alignを指定するのは好ましくありません。CSSが煩雑になります。IE5用の対応だと思いますが、止めても良い。 　デザインのためにclass名をつけるのは止めましょう。class名やidは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素・・・【中略】・・・は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［仕様書( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　であって、それを使ってデザインはするけど、デザインのためにつけるものではない。 ★スタイルシートを学ぶなら、プロパティは後回しにして、何よりも先にカスケーディングを先に確実に学びましょう。 6. 値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )
　なお、内容の追加は、CSS2.1のプロパティです。2.0より多少変更もありますので注意してください。(ブラウザベンダーはCSS2.1のほうを採用しています) C.4.21 12.1 The :before and :after pseudo-elements ( http://www.d-toybox.com/spec/CSS2.1/appendixC/#q83 ) 以降。 ★CSS3の魅力はわかりますが、その前にCSS2.1をしっかり身につけておいたほうが良いです。 　ウェブなんて、しょせん「内容あって幾ら」の世界で、プレゼンテーションなんて二の次三の次・・です。自己満足の部分が多々あります。 　きちんと、文書構造にしたがってマークアップするようにしましょう。デザインは後からついて来るモノです。
回答しても、その結果も言われない方なので無駄かもしれませんが、一応・・ 一生懸命読んでみたのですが、いまひとつわかりません。 どうも用語が正確でないことに起因するようです。 ボックスではなく，セル（コマ）ですね。表の整形については、 Tables in HTML documents (ja) ( http://www.asahi-net.or.jp/~sd5a-ucd/rec-html401 … ) 　の「視覚系ユーザエージェントによる表の整形」をよく読んでください。基本的に表の整形は逐次表示はデフォルトではありません。 　全部のデータを読んで整形に取り掛かります。そのとき、colspanで列グループが指定してあると、その内容は均等割するブラウザが多いです。特にデータ量が多くなると、それが優先されます。 　先の、INPUTのボタン周囲のスペース - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7116960.html )の結果も聞いていないので、対処の方法はわかりません。 ・なぜスタイルシートで、きちんと整形しないのですか？ ・書かれた内容から、tableを使うべきではないような気もします。 　いったいどのような、フォームなのでしょう。
上位セレクタや詳細度の問題です。 どう変更してるのかわかりませんので、 貴方の参考URLやソース提示が無ければ誰も何も出来ませんよ・・・ <div id="comments"> ですか？それなら #comments cite.fn{ font-style:normal !important; text-decoration:none !important; } リンクアンカーなら #comments cite.fn a{ font-style:normal !important; text-decoration:none !important; } です。 !importantは、元指定や詳細度が不明な為の優先処置なので、 削除しても問題なければ削除。 <div id="comments">でなければ、 #commentsを削除しなければいけませんが、その他の部分も適応されます・・・
inputは、インライン要素なので、一定の間隔はあきます。 スタイルシートで、ブロックにしてからmarginを0にして、floatで並べ替えるとか。表中のセルに置くなら、border:none;にすればよいのでは？
　２０万なら、スクールとしては安いと思います。 　ソフトを使うのに、ある程度のベースは必要だと思いますので、そういう意味では価値があると思いますよ。 　お金を払ったという事がモチベーションになるので、スクールに行った方がヤル気になります。 　わからない所は、先生に聞けるというのもメリットかと。 　専門卒が使えないのは、お金を親に出してもらってる生徒が多く「高校の延長」でしか考えてない人が多いので。 　社会人向けのスクールは、自分でお金を払って、本当に勉強するために来てる人が多いので、やる気のある人は多いですよ。 　-------------- 　ただ、授業では理解できるのですが、結局の所、使わないと忘れてしまうんです。 　授業でやった事を、会社でＷＥＢページなどですぐに反映させていかないと、「こんな事やった気がするなぁ…」という感じで忘却のかなたです。
「CSS　段組」で検索してみてください。 たぶん、ここでできる話はそれからです。
全部のメニューを閉めてから、必要な部分だけを開けるようにしてみてください。
おそらくご自身でJavaScriptを書かれてませんよね？ JavaScriptの文法をご存じないと、アドバイスができません。 アドバイスではなく、答えそのものをくれる人を待つほかありません。
＞例） ＞「ななめに並べて」も、その希望をされる内容見えてこない。 ＞隣接セレクタでの対応は示しました。 ＞という2行の普通の文章を ＞（りんごのイラスト）「ななめに並べて」も、その希望をされる内容見えてこない。 ＞　　（みかんのイラスト）隣接セレクタでの対応は示しました。 ＞と並べてほしいというのです。 ＞お客様が自分でワードで作ったときにそれがかっこよかったからと。。。 　あくまでこの例で答えると、たとえばこの場合、明らかに一行目は、要望と解決策になります。このような場合に、わかりやすくして欲しいというのは、それをどのように表現するかのプレゼンテーションとは切り離して、「区別して欲しい」と考えればよいです。 <dl class="QA"> 　<dt>「ななめに並べて」も、その希望をされる内容見えてこない。</dt> 　<dd>要望と対策を字下げして示す 　　<ul> 　　　<li>CSS2.1で登場した隣接・兄弟セレクタを使う</li> 　　　<li>dl(定義リスト)で対応する<em>HTML5では、dlで会話のようなものをマークアップするのは好ましくないとされている</em></li> 　　</ul> 　</dd> </dl> <div class="QA"> 　<li>「ななめに並べて」も、その希望をされる内容見えてこない。 　　<ol> 　　　<li>要望と対策を字下げして示す 　　　　<ul> 　　　　　<li>CSS2.1で登場した隣接・兄弟セレクタを使う</li> 　　　　　<li>dl(定義リスト)で対応する<em>HTML5では、dlで会話のようなものをマークアップするのは好ましくないとされている</em></li> 　　　　</ul> 　　　</li> 　　</ol> 　</li> </div> 　とマークアップするとかでしょう。 　客先の要望は、多くの場合、理不尽なものではなく、そのふたつの文は意味が違うから、それを区別できるようにして欲しいと言う場合が多いです。そのために最適なマークアップは何かないかと、自分の知識をフル動員して探します。どうしてもなければ <p class="Question">「ななめに並べて」も、その希望をされる内容見えてこない。</p> <div class="Answer"> 　<p>要望と対策を字下げして示す</p> 　<ul> 　　<li>CSS2.1で登場した隣接・兄弟セレクタを使う</li> 　　<li> 　　　dl(定義リスト)で対応する<em>HTML5では、dlで会話のようなものをマークアップするのは好ましくないとされている</em> 　　</li> 　</ul> </div> とするかもしれません。 　ここは臨機応変に対応していきます。 あるいは、 <div class="QA"> 　<p class="demand">「ななめに並べて」も、その希望をされる内容見えてこない。</p> 　<p>要望と対策を字下げして示すことにしました。「CSS2.1で登場した隣接・兄弟セレクタを使う」か「dl(定義リスト)で対応する<small>HTML5では、dlで会話のようなものをマークアップするのは好ましくないとされている</small>を検討してみました。</p> </div> としておいて、スタイルシートで div.DA p.demand:first-letter{ 　　font-size: 200%; 　　float: left; } div.DA p:first-letter{font-size:100%;float:none;} なんて、提案をすることもあるでしょう。 　もし、その要望が本当に理不尽なものであるなら、それが間違いである事を説明するのは容易ですし、それを説明するのはデザイナーの義務でもあるでしょう。 　なぜ、その要望をされるのかも話を聞き、対応すべきです。class名や、idは、そのためにあるのですから・・ 『DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )』
頂いたCodeで試しましたが、こちらでは再現しませんでした。 ただ、ちょっとおや？と思ったのですが・・・ ＞a:hover{backgorund-color:#FF0000;} これ、このまま使われていますか？ 「background-color」になっていないので、このままだとしたらこれが原因でしょうか。 ここだけの記述ミスでしたら、他に考えられるのは、NaviLを括っている他の要素がちゃんと括られていないか、要素のサイズを指定しておらず、意図せず部分的オーバーレイ状態になっているとかではないでしょうか。 一度このNaviLの部分だけを切り出してテストしてみて、再現テストしてみてください。
基本的な言語の解説、言語のバージョン別に利用出来るタグ、ブラウザ別のタグの利用可否 と基本的な事を学ぶにはわかりやすくて良いサイトだと思います。 ある程度習得したら他にもちょっとしたテクニックもあるので、それらは以下を参考にしたり自分で見つけてください。 HTMLクイックリファレンス：http://www.htmq.com/ その他：http://onlinepckan.web.fc2.com/tool/web/web.html
スマートフォンは、CSS2.1対応ですから、CSS2.1の書き方で統一したほうが良いでしょう。 .text8{}ではなく *.text8{} 　font-sizeは継承されるプロパティですから、その下位にあるすべての要素に継承されますが、注意点はfont-sizeを、数値で指定すると、継承されるのはその数値であって、算出値ではないことです。 <dl class="news"> <dt>2011. 11. 01</dt> <dd>ホームページを開設しました</dd> </dl> 　余計なspanやdiv、さらには<br>なんて入れないように・・特にbrは一つの段落内での強制改行で通常のHTMLでは登場する機会はありません。段落を開けたい場合はスタイルシートで指定しましょう。 div.news dt{font-weight:bold;} div.news{padding-bottom:1ex;} 「ホームページを開設しました」部分が大きくなってしまいます。」 どこかで、div要素かdd要素に対してfont-sizeを指定していませんか？ 　firefox+firebugで、該当する要素にどのスタイルが継承されているかチェックしてください。示された情報では一般的な回答しか出来ません。 　
http://www.moj.go.jp/term.html リンクについては↑のページにも書いてありますが。 そちらはご覧になられていますでしょうか。
divやspanについては仕様書に記述があります。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素・【中略】・は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［7.5.4要素のグループ化: DIV要素とSPAN要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　本来は文書の構造を示すためのものです。残念ながらHTML4.01strictでは、それ以上の具体的な指定や例がなく、様々なclass名が使われてきました。(仕様書をろくに読んでないことが原因でしょうが) 　HTML5ではその反省から、多く使われてきた(日本で普及していたものとは違う)、文書構造を示すclass名が、文書構造を示し、かつセマンティックな(意味を持つ)要素として独立します。すなわち、従来も【まともな】HTMLなら <body> 　<div class="header"><!-- header"> 　　<h1>見出し</h1> 　　<div class="nav"> 　　　<ol> 　　　　<li><a href=""></a></ol> 　　　　<li><a href=""></a></ol> 　　　</ol> 　　</div> 　</div> 　<div class="section"><!-- 本文(章) --> 　　<div class="section"><!-- 本文(項) --> 　　　<h2>見出し</h2> 　　　<p>記事</p> 　　　<div class="figure"><!-- 挿絵・補足記事 --> 　　　</div> 　　</div> 　　<div class="section"><!-- 本文(項) --> 　　　<h2>見出し</h2> 　　　<p>記事</p> 　　　<div class="figure"><!-- 挿絵・補足記事 --> 　　　</div> 　　　<div class="aside"><!-- 余談(本文と直接関係ない記事) --> 　　　</div> 　　</div> 　</div> 　<div class="footer"><!-- フッター --> 　</div> </body> と、文書構造を示すためにclass名に書かざるを得なかったものが・・ <body> 　<header><!-- header"> 　　<h1>見出し</h1> 　　<nav> 　　　<ol> 　　　　<li><a href=""></a></ol> 　　　　<li><a href=""></a></ol> 　　　</ol> 　　</nav> 　</header> 　<section><!-- 本文(章) --> 　　<section><!-- 本文(項) --> 　　　<h2>見出し</h2> 　　　<p>記事</p> 　　　<figure><!-- 挿絵・補足記事 --> 　　　</figure> 　　</section> 　　<section><!-- 本文(項) --> 　　　<h2>見出し</h2> 　　　<p>記事</p> 　　　<figure><!-- 挿絵・補足記事 --> 　　　</figure> 　　　<aside><!-- 余談(本文と直接関係ない記事) --> 　　　</aside> 　　</section> 　</section> 　<footer><!-- フッター --> 　</footer> <body> と要素として書けるようになります。 ★HTML4.01でも、私が使うclass名はこのくらいのもので、あとは <div class="memo"><div class="section summary">くらいのもので、相当大きなサイズのHTMLでも、class名は10個行かない。 containerとかcontaints、wrapperとかは、文書構造上の意味が少ないため、まず使いません。 「この他にdivタグをつけたい文章のかたまりや画像などが10個以上(フロートをかけたいので)あります。」 それはいくつあっても関係ありません。floatスタイルを適用させたい要素は、ある集団ですから、上の例で行くと div.section div.figure{float:left;} で済みますし、アルバムのようにたくさんのブロックをfloatさせたければ、 <div class="album"> 　<ol> 　　<li><img> 　　　<ul> 　　　　<li>10月30日/li> 　　　　<l>どこそこで</li> 　　　</ol> 　　</li> 　　<li><img> 　　　<ul> 　　　　<li>10月30日/li> 　　　　<l>どこそこで</li> 　　　</ol> 　　</li> 　</ol> div.album ol,div.album ol li{display:block;list-style:none;margin:0;padding:0;} div.album ol li{float:left;width:20%;} div.album ol li ol li{float:none;width:100%;} ですむ。class名を一つ一つつける必要はありません。極端な話 <body> 　<div><!-- header"> 　　<h1>見出し</h1> 　　<div class="nav"> 　　　<ol> 　　　　<li><a href=""></a></ol> 　　　　<li><a href=""></a></ol> 　　　</ol> 　　</div> 　</div> 　<div><!-- 本文(章) --> 　　<div><!-- 本文(項) --> 　　　<h2>見出し</h2> 　　　<p>記事</p> 　　　<div class="figure"><!-- 挿絵・補足記事 --> 　　　</div> 　　</div> 　　<div><!-- 本文(項) --> 　　　<h2>見出し</h2> 　　　<p>記事</p> 　　　<div class="figure"><!-- 挿絵・補足記事 --> 　　　</div> 　　　<div class="aside"><!-- 余談(本文と直接関係ない記事) --> 　　　</div> 　　</div> 　</div> 　<div><!-- フッター --> 　</div> </body> であっても、 body div{color:red;} body div+div{color:green;} body div+div+div{color:blue;} body div div div{color:black;} body div div div+div{color:magenta;} でも色を変えられる。しないけど・・(^^) ☆　divを付けすぎていないか？ ☆　divのclass名は、文書構造を示す適切なものか ☆　子孫セレクタや隣接セレクタ、子供セレクタなど、セレクタで区別できないか？ 例) <div> 　<div class="section"> 　　<div class="section"> 　　　<div class="section"> 　　　　<div class="section"> 　　　　</div> 　　　</div> 　　</div> 　　<div class="section"> 　　　<div class="section"> 　　　　<div class="section"> 　　　　</div> 　　　</div> 　　</div> 　</div> </div> 　は、一つ一つ異なるclass名をつけなくても、みな区別できるのですよ。 どのようなクラス名がよいかは、 ★3.1. 新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) が参考になるでしょう。 先ほど他の質問に回答した( テーブルをスクロールさせるときのスクロールの位置( http://oshiete.goo.ne.jp/qa/7105490.html#a4 )で示したHTMLソースもclass名はふたつしか(本当はなくても良い)使ってません。
以下を表示したら理解出来るかも <table border="1"> <tr><td style="width:200px;"> デフォルト あああああああああああああ </td></tr> <tr><td> <p style="width:100px; margin:0; padding:0;"> ああああああああああああああああ </p> </td></tr> <tr><td style="padding-left:.5em;"> ああああああああああああああああ </td></tr> <tr><td style="padding:0 40px;"> ああああああああああああああああ </td></tr> </table> これは、表では無いのでtableで書くべきでは無いんですけどね・・・ つまり、レイアウトをtableで作らないって事です。 style属性は、外部CSSファイルに書くと一括で統一されます。
いえ、・・・スマートフォンのブラウザは、ウインドウ巾に合わせて縮小されるので、サイズを決め打ちすると、伸縮するはずです。 <!DOCTYPE html> <html lang="ja"> <head> ＿<meta charset="UTF-8"> ＿<title>Untitled</title> ＿<meta name="author" content="IRUKA"> ＿<meta http-equiv="Content-Script-Type" content="text/javascript"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;background-color:black;} article{ ＿width:640px;height:480px; ＿margin:0 auto; ＿background: black url(./images/sample03.jpg) no-repeat 50% 50%; ＿background-size:cover; ＿color:white; ＿position:relative; } article div{ ＿width:50%;height:50%; ＿position:absolute;top:30%;left:20%; ＿text-align:center;font-size:200%; } --> ＿</style> </head> <body> ＿<article> ＿＿<div> ＿＿＿<h1>サンプル</h1> ＿＿＿<p>ここ短い文章</p> ＿＿</div> ＿</article> </body> </html>
fireBugは特殊な場所で一時ファイルとして扱うため、直接は？？ 　エディタとブラウザは、ショートカットキーが用意されていると思いますので、調べてください。私は、Windows使いなので・・・ 　私は、Windowsで、EmEdirtorというテキストエディタで、それにはテキストエディタから直接ブラウザの画面に移るアドオンや、画面下にプレビューを表示する機能が用意されているのですが・・・
width:400px など、巾を変えるとfloatは解除されませんよね。 floatは、回り込みですから、隣に並ばなければ解除されます。というか解除されるように指定するプロパティです。(狭いウィンドウでは下側に回りこませて表示する必要があって使うものです。) <p><img src="" width height="" alt="富士山">なんたらかんたら・・・。なんたらかんたら</p> p img{float:left;} とか・・ ★p#abに何も書かないのが本来はベストです。
CSSの文法上は可能です。 ※HTMLにて、IDを使っては行けない、または使わない方が良いという場合があります。
一応、補足的に。 英語のバナーという言葉は、日本語では旗という意味と、垂れ幕という意味があります。 このうち垂れ幕という言葉として使用する場合は、広告を意味しますので、 これは「商品名や広告文（キャッチコピー）を画像または動画にしたもの」ですから、テキストで代替できます。 ですが、旗をバナーと呼ぶ場合、これはリンクバナーの事ですが、アイコン、象徴、または旗、ですので、テキストにはできません。 >No.2補足 ><center><table><tr><td> ><img src="1.gif"><img src="1.gif"><img src="1.gif"><br> ><img src="2.gif"><img src="bunner.gif（無加工）"><img src="2.gif"><br> ><img src="1.gif"><img src="1.gif"><img src="1.gif"> ></td></tr></table></center> > >と張ることはできても、逆に、ブラウザー側で無駄なリソースを使用してしまうことで この書き方は画像を並べる事ですから、画像を加工した事にはなりません。 >この程度の大きさであれば、１ファイルにしたほうが良いような感じもしました。 これは画像を加工（合成）する事になります。 スタイルシートでマージンなどを取っても、画像を加工する事にはなりません。 （絵を額に入れるような物です。） テキストリンクは画像を使用していませんから、画像の加工もしない事になります。 （画像を加工しても、公開しなければ「個人使用を目的とした著作物の使用」ということになるため、法的にも問題ありません。） 以下余談。 広告バナーのサイズは、アメリカの広告業界を中心に国際的な広告関連の機構によって、標準サイズが定められています。 IAB http://www.iab.net/ 日本でも、広告バナー（主にアフィリエイトバナー）をそのサイズに従ったサイズで作る所は多いですが、 これはアフィリエイトプログラムのシステムがそのサイズに合うように作られているから、それに合わせて画像サイズを作った方が使いやすくなるからです。 あくまで広告用のバナー（垂れ幕）のことであって、リンクバナー（旗）のことではありません。 広告でもリンクは必須ですから、「リンクがついたバナー」という意味では同じですけどね。 余談２ インターネット関連の規格を制定などをしているIETFの関連グループにもIABというところがありますが、 広告のIABは、IETFと全く関係ありません。 http://www.nic.ad.jp/ja/tech/ietf/section3.html （構成を参照）
No.1です。確認ですが、リンク先は他のページですか？それともページ内ですか？ リンクの擬似クラスと、動的な擬似クラスを使う方法 a:link{background-image:url([画像1];) a:visited{background-image:url([画像2]);} a:hover,a:focus{background-image:url([画像3];) a:active{background-image:url([画像4]);} の順番で記述する。 他のページの場合は、簡単でナビゲーションリンクをブロックにしてfloatで並べる。その際、class名などでカレントなリンクの背景を変えればよい。 <div class="nav"> 　<ol> 　　<li><a href=""></a></li> 　　<li><a href="" class="current"></a></li> 　　<li><a href=""></a></li> 　　<li><a href=""></a></li> 　</ol> </div> よく使われる定番CSS div.nav ol,div.nav ol li{display:block;list-style:none;margin:0;padding:0;} div.nav ol li{width:20%;float:left;margin-right:10px;line-height:20px;} div.nav ol li a:link{ display:block;width:100%;height:100%; border:solid 1px black;border-bottom-width:0;text-decoration:none; background-image:url(); } div.nav ol li a:visited{} div.nav a:hover,a:focus{background-image:url([画像3];) div.nav a:active{background-image:url([画像4]);} 同一ページ内へのリンクの場合は、 それより前のブロックをfixedなどで上にかぶせて、しまえばよいでしょう。
＞自然科学、政治、経済でそれぞれ違う分野だと思ったんですが、 ＞それでも、この部分もリストにした方がいいんでしょうか？ 　あくまでインデックス・・ナビゲーションのためのリストですから、リストでマークアップしたほうが良いでしょう。 ＞私としてはリンクの見出しは重要と思っているのですが、 ＞その場合、下記の用法は認められるんでしょうか？ ＞<li><strong>自然科学</strong> 　いいえ、リストで重要なのは、階層が上位のものです。strongは、段落中の特別な文字列(インライン要素)を他と区別する=HTMではフレーズ要素のうち、<strong>強調</strong>されるものです。<strong>HTML5では、「文章を強調するもの」に変わります。</strong> 　［リストで重要なのは、階層が上位のもの］具体的には、下記のようにマークアップされていれば、二階層目より一階層目が重要だとわかります。 <div class="nav"> ＿<ol> ＿＿<li>自然科学 ＿＿＿<ul> ＿＿＿＿<li><a href="">物理</a></li> ＿＿＿＿<li><a href="">化学</a></li> ＿＿＿＿<li><a href="">生物</a></li> ＿＿＿</ul> ＿＿</li> ＿＿<li>政治 ＿＿＿<ul> ＿＿＿＿<li><a href="">政治史</a></li> ＿＿＿＿<li><a href="">行政</a></li> ＿＿＿＿<li><a href="">自治</a></li> ＿＿＿</ul> ＿＿</li> ＿＿<li>経済 ＿＿＿<ul> ＿＿＿＿<li><a href="">国際経済学</a></li> ＿＿＿＿<li><a href="">数理経済学</a></li> ＿＿＿＿<li><a href="">環境経済学</a></li> ＿＿＿＿<li><a href="">経済史</a></li> ＿＿＿</ul> ＿＿</li> ＿</ol> </ol> だとすると、スタイルシートは div.nav{width:70%;margin:0 auto;} div.nav ol,div.nav ul,div.nav ol li{display:block;list-style:none;margin:0;padding:0;} div.nav ol li{width:33%;float:left;font-weight:bold;font-size:1.2em;} div.nav ol li li{float:none; width:100%;font-weight:normal;font-size:0.8em;padding-left:2em;} だけの簡単なものでよい。 　検索エンジンや、スタイルシートを読まないユーザーエージェント・・であっても、階層のあるインデックス(索引)だと理解できる。 　大事なことは、どう見せるかはスタイルシート、文書の構造はHTMLだと完全に分けること。そうすれば先で、このリストを縦に並べたくなったら、 div.nav{width:30%;position:fixed;top:100px;left:0;} div.nav ol,div.nav ul,div.nav ol li{display:block;list-style:none;margin:0;padding:0;} div.nav ol li{font-weight:bold;font-size:1.2em;} div.nav ol li li{width:100%;font-weight:normal;font-size:0.8em;padding-left:2em;} すりゃいいし、プルダウンしたけりゃ div.nav{width:70%;margin:0 auto;} div.nav ol,div.nav ul,div.nav ol li{display:block;list-style:none;margin:0;padding:0;} div.nav ol li ul{display:none;} div.nav ol li:hover ul{display:block;} div.nav ol li{width:33%;float:left;} div.nav ol li li{float:none; width:100%;font-weight:normal;font-size:0.9em;padding-left:2em;} すればよい。 　HTMLさえ、きちんと文書構造にしたがってマークアップされていれば、いかようにもデザインできる。
DOCTYPEはframesetではなく、transitinal(Loose DTD)です。 　iframeを使うので、frameと思われたのでしょうが、仕様書の要素索引を見ればわかるはずです。 　ただ、XHTML1.0の仕様書には要素索引が無いのでHTML4.01のものを見るほうが早いです。(XHTML1.0はHTML4.01と基本的に同じものですから) 要素索引 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　のiframeの右の欄に[L}と書かれているのは、DTDはtransitinalであるということです。 さて、HTMLやCSSはvalidatorを使えば、たちどころにエラーがわかるので詳細は書きません。 ★The W3C Markup Validation Service ( http://validator.w3.org/#validate_by_input ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) など。 　たくさんエラーが見つかると思いますので、詳細は割愛します。 　【こんな複雑なCSSやHTMLの前にHTML,CSSの基本を、しっかりと押さえることが肝要かと思います。そのほうが早い!!】 　私は、現在HTML4.01strictがメインで、XHTMLからは手を引いています。(XHTMLの将来に暗雲が立ち込めている・・・)。ウェブ標準は、HTML5(およびサブセットのXHTML5)に移行しそうですから。そしてHTML5はHTML4.01strictの改良型ですから。 　さて、この問題はインラインフレームの問題ではなく、単に３カラムの設定によるものです。 　一言で言うと、floatを使ってレイアウトをするために、必然的に起こり得る問題です。すなわち、「はみ出せば回り込みが解除される。」という点です。 　floatを使う限り、『文書の順番が本来の姿(順番)から逸脱してしまう。レイアウトに文書構造が引っ張られる』『様々な解像度、ウィンドウサイズに対応しきれない』『障害者のためのアクセスビリティが失われる』という問題は必ず発生します。それを承知の上で利用してください。 　floatを使う場合は、必ずサイズの合計がコンテナブロックの内寸より小さくなるようにしなければなりません。 [参考] floatによる段組について - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/7079628.html )
自分で作る人、素材を使う人、素材を加工する人いろいろです。 ソーシャルメディアアイコン（Social Media icon）で検索すると、沢山見つかります。
お仕事で作られているなら、もうちょっと頑張ったほうがいいですよ。 質問の内容も、質問の方法も、あまりにもお粗末です。 一般の方が趣味で作られているとしたら、失礼しました。
HTMLを書いたら、 ★The W3C Markup Validation Service ( http://validator.w3.org/#validate_by_input ) や ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) でチェックする癖をつけましょう。 　HTMLが出来上がったら、スタイルシートを書いて希望するプレゼンテーションになるようにデザインしていきます。 　HTMLは、文書構造にしたがってマークアップしていくのが基本です。デザインではありません。 　たとえば <p>1. ～本文～<br> 2. ～本文～<br> 3. ～本文～<br> </p> 　のような書き方はしません。<p></p>は一つの段落を示します。<br>は一つの段落内での強制改行で、通常のHTMLドキュメント内にはまず登場することはありません。 <div class="section"> 　<h2>見出し</h2> 　<p>段落</p> 　<p>段落</p> </div> <div class="section"> 　<h2>見出し</h2> 　<p>段落</p> 　<p>段落</p> </div> のようにマークアップされるはずです。 　HTMLは、何であるかの基本中の基本、そして最も重要な部分が学べていないようです。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 文書構造とプレゼンテーションとのより明解な区別。従って、プレゼンテーション目的の場合HTMLの要素や属性ではなくスタイルシートの使用を奨励する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［2.3.2 アクセス性( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　そのうえで、「閲覧者がボタンをクリックすることで本文領域を表示させられる」ように、スタイルシートなりjavascriptを書けばよい。スタイルシート--それも簡単な---だけで十分な気がします。
<div class="icon"> <a href="リンク先"><img src="パス名"></a> </div> まず、リンクのある画像にのみ枠線を消したいわけですから、 a:link img{border:none;} で良いです。通常はユーザービリティのため、他の画像のボーダーは消さないほうがよければ、div.icon a:link img{border:none;}となります。 　このセレクタは、次のような意味です。 1) classの(空白で仕切られた)値のリストのひとつにiconという文字列を含む汎用ブロックの子孫にある、 2) リンクの始点であるａ要素の子孫の 3) img要素 には、枠線をつけない 　ページ内のすべてのリンクのある画像に枠をつけないなら、a:link img{border:none;}でよいです。a img{border:none;}でもよい。 　なぜ、HTMLの要素<img src="" border="1">と書かれていても、それで枠がつかないかも知っておきましょう。 ★ブラウザ(ユーザーエージェント)がもっているスタイルシートをしらべる ★HTMLの要素に【属性として】書かれた枠線指定border=1などは、詳細度(selector's specificity)をゼロとし、すべての宣言の前に書かれているとみなす。 ★外部スタイルシート→ヘッダ内のスタイルシートと並べ替える。 ★重要度important!をしらべる ★詳細度が同じなら後から出たものを優先する。 a img{border:none;}の詳細度は[0,0,0,2] a:link img{border:none;}の詳細度は[0,0,1,2]:linkはリンクに関する擬似クラス div.icon a:link img{border:none;}の詳細度は[0,0,1,3] <img style="border:none;">なら詳細度は[1,0,0,0] ★このカスケーディング処理はCSS(カスケーディングスタイルシート)の最も重要な仕組みですから、CSSを使うなら最初に覚えておくべきです。そうすると無駄なidやclass名を使わず、しかも意図した要素にスタイルが適用できます。 →6.4 カスケード処理 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )CSS2 の邦訳 →6.4 The cascade ( http://www.w3.org/TR/CSS2/cascade.html#cascade ) CSS2.1 　注意)詳細度の計算はCSS2.1で変更されています。CSS2.1がウェブ標準 [参考] これが、HTMLのheader部分にあるならHTMLが <div class="header"> 　<h1>見出し</h2> 　<p><a href="[URL]"><img></p> だけでよい。無駄なものを書かない div.header p a:link img{}でよい。
ディスプレイでの表示と印刷は分けて考えること。 地図など淡色ないし色数が少ないものは、そのままの色数で保存すること。 ディスプレイでは、Windowなら96dpiで計算してそれを表示します。(Macは72dpi) 印刷を想定されるなら、通常は200dpiから300dpiを想定すれば良いでしょう。(写真並みに高解像度なら600dpiとか)そのため、ディスプレイで表示されるサイズの２,３倍、もしくは６倍程度で作成して、HTML上でサイズを指定します。<img src="[URL]" width="300" height="200">なら、900×600ピクセルあたりで作成する。 　ただし、ブラウザが破壊的に縮小するため、ぼやけます。それを防ぐためには画像を背景にし、スタイルシートで変更すると良いですが、印刷時に背景を伊刷する設定をしなければならない。スタイルシートで画像を置き換える方法もありまずが、古いブラウザは対応していない。
「プロもアマと同様の素材集を使うのか」という問いに端的に応えるなら、その答えは「同様に使います」です。ただ、その素材の使い方には差があると思います。一般の方は、おそらく、アイディアや答えそのものを得るために素材集を手にすると思いますが、デザイナーは「素材集をそのまま使う」ということはあまりしないと思います。 難しい言い方になりますが、デザインには必ず目的があって、その目的を達成するためのデザインを考えるのがデザイナーなのですから、素材集をポンと使うだけで、目的が達成されるケースはあまりないと思います。それが通じるのであれば、デザイナーなんて必要ありません。逆に言うと、特に目的なく、なんとなくかっこ良くなればいいと思って素材集を手にするのが一般の方なのかもしれませんね。
意外と厄介な方法で、文書構造を無視してHTMLをマークアップすれば出来なくはないですが、邪道ですので、極力そのリストであるマークアップを変更しない方法です。 ただし、古いブラウザには利きません。 <div class="book_slide"> ＿<ul> ＿＿<li><img src="images/book1.jpg" width="30" height="50" alt="*" /></li> ＿＿<li><img src="images/book2.jpg" width="54" height="32" alt="*" /></li> ＿＿<li><img src="images/book3.jpg" width="60" height="48" alt="*" /></li> ＿＿<li><img src="images/book4.jpg" width="48" height="33" alt="*" /></li> ＿</ul> <div> の場合CSSは div.book_slide{display:table;} div.book_slide ul{display:table-row;} div.book_slide ul li{display:table-cell;height:360px;width:500px;border:1px solid #000;text-align:center;vertical-align:middle;list-style:none;} display:tableがなくてもOKなので <ul class="book_slide"> ＿＿<li><img src="images/book1.jpg" width="30" height="50" alt="*" /></li> ＿＿<li><img src="images/book2.jpg" width="54" height="32" alt="*" /></li> ＿＿<li><img src="images/book3.jpg" width="60" height="48" alt="*" /></li> ＿＿<li><img src="images/book4.jpg" width="48" height="33" alt="*" /></li> </ul> と、 ul.book_slide{display:table-row;} ul.book_slide li{display:table-cell;height:360px;width:500px;border:1px solid #000;text-align:center;vertical-align:middle;} でもＯＫです。 ウェブ標準な方法なら、上のいずれかかで、画像でないテキストの場合も中央に配置されます。 一方、画像を背景で指定する方法もあります。こちらだと古いブラウザやテキストブラウザなどを考えると良いかもしれません。 <ul class="book_slide"> ＿＿<li><span>書名</span></li> ＿＿<li style="background-image:url(images/book2.jpg);"><span>書名</span></li> ＿＿<li style="backfround-image:url(images/book3.jpg);"><span>書名</span></li> ＿＿<li style="background-image:url(images/book4.jpg);"><span>書名</span></li> </ul> に対して ul.book_slide,ul,book_slide li{display:block;list-style:none;} ul.book_slide li{ ＿float:left;height:114px;width:80px;border:1px solid #000; ＿background:url(images/book1.jpg) 50% 50% no-repeat; } ul.book_slide li span{visibility:hidden;}
サンプルです。 absolueについては、Wikiの記事をよく読んでください。absoluteは記事自体の順番に手を加えることなく位置を指定できます。また本文中でのfloatが自由に使えるという利点があります。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み。ウィンドウ巾に影響されないのは、min-width:600px;を除けばよくわかるかと・・ ※タブは＿に置換してあるので戻すこと。 添付画像はLynxで表示したところ・・googleもこの様に読んでいる <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{margin:0;padding:0;background-color:gray;} div.section p{ ＿text-indent:1em; ＿margin:0 1em; ＿line-height:1.6em; } div.header,div.section,div.footer{ ＿width:80%;margin:0 auto;/* センター配置IE5,非対応 */ /*＿min-width:600px; */ /*あまり小さくならないようにしたいときは */ ＿border:solid 1px rgb(255,200,200);background-color:rgb(255,200,200); } div.section{ /* 本文 */ ＿position:relative; ＿background-color:teal;border-color:teal; } div.section div.section img{ ＿float:left; ＿margin: 5px; ＿border:1px solid gray; ＿background-color:white; } div.section div.section{ /* 子供セレクタを使えば簡略化できる */ ＿width:68%; ＿margin:0px; ＿min-width:0px; ＿border:none; ＿position:static; ＿border:none; ＿margin-left:31%; ＿clear:left;/* clearがこのブロック内で使える */ } div.section div.contentTable{ ＿position:absolute; /* 絶対配置 */ ＿top:0;left:0;width:30%;height:100%; ＿background-color:aqua;border-color:aqua; } div.footer{background-color:yellow;border-color:yellow;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>サンプル</h1> ＿＿<div class="abstract"> ＿＿＿<h2>要約</h2> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<div class="section"> ＿＿＿<h2><a name="QUESTION">質問</a></h2> ＿＿＿<p> ＿＿＿＿divをfloatで並べることを段組というみたいですね。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿下でclearを入れてます。これが定番らしいので。#contentの中にdivAとdivBがあります。その下にクリア用のdivCを置いてます。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿#contentをwidth:100%で指定するとカラム落ちします。なのでwidth:800pxとかで指定しています。そしてdivAとdivBのwidthも固定で指定しています。こうするとカラム落ちが防げます。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿width:100%が流動的で自然なのは分かります。こちらでカラム落ちしない方法があればベストです。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿上記のように固定で考えるのは仕方ないのでしょうか。 ＿＿＿</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h2><a name="ANSWER">回答</a></h2> ＿＿＿<p> ＿＿＿＿<img src="./images/sample.gif" width="120" height="180" alt="挿絵など"> ＿＿＿</p> ＿＿＿<p> ＿＿＿＿floatさえ使わなければ、実に簡単に実装できます。floatをブロックの配置に使いませんから、このように本文中でfloatを使ったり、それを解除したりが自由に出来ます。floatはそのためにとっておきましょう。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿<img src="./images/sample.gif" width="120" height="80" alt="挿絵など"> ＿＿＿</p> ＿＿＿<p> ＿＿＿＿このように、本来はabsoluteを使うべきです。特にリキッドスタイルの場合は、floatではなくabsoluteのほうがスムーズです。 ＿＿＿</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h2><a name="SAMPLE">方法</a></h2> ＿＿＿<p> ＿＿＿＿IE6以前の古いブラウザに対応させるなら、必ず長くなるほう(多くは本文section)を基準にして、短いほうをabsoluteさせる。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿IE7以降の新しいブラウザは、min-widthやmax-widthプロパティが使えるのでそれを活用して、ある程度より小さなウィンドウには横幅を固定してしまうとよいかもしれません。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿なお、IE5ではmargin:autoに対応していないため中心に配置されません。またIE6以前は、親コンテナブロックの高さを参照できないため目次部分が実サイズになります。 ＿＿＿</p> ＿＿</div> ＿＿<div class="contentTable"> ＿＿＿<ol> ＿＿＿＿<li><a href="#QUESTION">質問</a></li> ＿＿＿＿<li><a href="#ANSWER">回答</a></li> ＿＿＿＿<li><a href="#SAMPLE">見本</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿</div> </body> </html>
・記事をメールから投稿できるようにする。(メールサーバーとの連携も可) wordpress本体の機能で実装されています。 ・記事が投稿されたら自動で記事タイトルをTwitterでつぶやく あります。検索したら大量に出てくるので、ここでは敢えて書きません。 質問の前に最低限を調べるべきです。
ああそういう意味だったんだ。 レンタルサーバで、ドメインの登録と、それで自動生成されるディレクトリの紐付けに関する制約がある上での、サブドメインとホストに関する質問ですね。 ふつうお客さんは、URLの先頭にwwwをつけたがるので、おっしゃることはよくわかります。 通常、ドメイン・サブドメイン・ホストは、すべてDNSサーバで管理しています。 また、Webサーバは、ApacheやIISなど、独立したサーバで運用しています。 そのうえで、 DNSサーバでは、ドメイン名をzoneで、サブドメイン名をaliasで、ホスト名をcnameで記入し、後ろにIPアドレス名をつけて記入します。ホスト名はaliasでいくつでもつけることができ、また「全称」を表す*レコードをつけると、どんなホスト名でも同じIPを参照させることができます。 サブドメインは、ふつう、その先にサブドメイン専用のDNSサーバがあり、そこに親DNSと全く同様の記入がされています。 また、単に外向きの名前付けだけの用途でサブドメインを定義するときは、ホスト名とサブドメイン名を同時にaliasとして書いてもかまいません。 （なのでホストとサブドメインは同じ、という誤解も生まれますが、本来は明らかに別物） webサーバ側は、ふつう、好きなだけサイト（同じコンピュータ内だから「仮想サイト」といいます）を作り、一つ一つに対応するホスト/ドメイン名を定義することができます。 なので、たとえば、www.sales.tokyo.company.jpや、mail.tachikawa.tokyo.jaoan.company.comなど、何を作っても全然問題ありません。 また、仮想サイトは、どんなディレクトリにもアサインできるので、サーバ上では物理的に一つのディレクトリが、Web上では100個のサイトに見えることもアリです。 共用レンタルサーバは、このDNS/Web定義が（超）簡略化されており、サブドメイン（ホスト）の階層は必ずディレクトリ階層に連動するようになっていて、その定義を変えることはできません。 したがって、ご指摘のように、サイトやホスト間で相対パスを維持したい場合や、複数サイトで同一の内容を表示したい場合、好き勝手なサブドメイン・ホスト名を自由につけたい場合には、共有サーバでなく、VPSのような仮想専用環境サーバを使用し、自由に運用できるWebサーバがないといけません。 DNSサーバは、自分で運用しなくても外部のサービスを利用できますが、問題はWebサーバです。 参考URL：http://www.atmarkit.co.jp/flinux/rensai/bind906/ …
こんばんは#1です。 帰宅したので検証しました。 使用ブラウザはIE8、FF3.6、Opera11.51、Chreome14、Safari5.1です。 ＜結論＞ marginしっかり取れています。 なのでですね、質問文と#1の補足以外の部分に原因があると考えられます。それがどこかまでは私からではさすがにわかりませんが。
　実は、私はclearfixなる技法(このクラス名には、まったく意味が無い)を使いませんし、使ったこともありません。邪道だと認識しています。 　そもそも、HTMLは文書構造にしたがってマークアップするもので、class名についてHTML4.01(199年)の当時から、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。・・・【中略】・・・他のプレゼンテーション的語彙を示すことはない。 　従って著者は、この両要素をスタイルシートやlang属性等と併用することで、HTMLを自身の必要や好みに応じられるようにできる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より と明記されていて、clearfixなんて文書構造に無関係な名称をつけること自体に批判的です。 　どうしても必要なら、 <div class="section"> 　<h2>見出し</h2> 　<p>段落</p> 　<p>段落</p> 　<div class="figure"></div> 　<p>段落</p> 　<p>段落</p> <div> 　<hr> <div class="section"> 　<h2>見出し</h2> 　<p>段落</p> 　<p>段落</p> 　<div class="figure"></div> 　<p>段落</p> 　<p>段落</p> <div> としておけばよい。スタイルシートでhr{visibility:hidden;clear:both;/* さらに高さなどを小さくする */} そのほうが、よっぽど良い。 　たぶん、問題になるのはブロックをfloatを使って配置しようとしたときで、その場合もブラウザによる差は気にしないというか、気になら無いデザインにしています。そもそもHTMLは、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より であって、誰にも同じデザインを求めるならPDFなどはるかに優れた仕様がある。 　HTMLの本来の目的や理念を考えるなら、余計な構造に関係しない要素を追加すべきではない。 　HTML5は、HTML4.01のときから、div+構造を示すclass名やidをつけるとされていたのに、まったく守られていないから、具体的に構造を示す要素にしてしまったのでしょう。 　clearfixなる技法が必要だとしたら、その前に見直すべきは、HTMLの構造であり、HTMLそのものへの理解ではないかと。
ツールメニュー -> アドオンの管理 から、該当する物（しそうな物）を無効にしてみてください。 アンインストールの方法はわかりませんが、 コントロールパネルの「アプリケーションの追加と削除」から削除できるかもしれません。
簡単なサンプルを ★HTML4.01strict ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) ※タブは＿に置換してある。 ※"△","×","▼"は、url(画像パス)に変更。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.header div.nav{position:absolute;top:0;left:0;text-align:center;} div.header div.nav{width:100%;background-color:yellow;} div.header div.nav ul,#header div.nav ul li{display:block;list-style:none;margin:0;padding:0;line-height:30px;} div.header div.nav ul li{width:22%;float:left;margin-left:10px;border:solid black 1px;} div.header div.nav ul li a{display:block;width:100%;height:100%;padding-left:0;background-color:gray;text-decoration:none;} div.header div.nav ul li a:before{content:"△";} div.header div.nav ul li a:visited:before,div.header div.nav ul li a:focus:before{content:"×";} div.header div.nav ul li a:hover:before,div.header div.nav ul li a:active:before{content:"▼";} div.header h1{margin-top:40px;} --> ＿</style> </head> <body> ＿<div class="header" id="Top"> ＿＿<h1>サンプル</h1> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li><a href="./index.html">Top</a></li> ＿＿＿＿<li><a href="./product">Product</a></li> ＿＿＿＿<li><a href="./news.html./">News</a></li> ＿＿＿＿<li><a href="./profile">profile</a></li> ＿＿＿</ul> ＿＿</div> ＿</div> </body> </html>
その最新版 FlashPlayer　32bit？　64bitだと多分動かないよ。 もしどっちを入れても動かないなら　11じゃなく10を入れてみて。
No.6お礼 >自分の考えでは大きな枠を左端なんかに合わせて、 >その内部の要素を必要があればleftやtopで >表示していけばいいという考えです。 No.6に書いているように、 HTMLが以下のようになっているとして <div id="header"> <h1 id="the_title">あいうえお</h1> <p id="catchcopy">かきくけこ</p> </div> #header, #header *{ position: relative; } または #header{position:relative;} #header *{position:absolute;} と、あらかじめ書いておけば、 必要に応じて #the_title{top:50px;left:50px;} #catchcopy{top:100px;left:50px;} とだけ指定すれば、中身だけを移動できます。 >positionが継承されないから、内側をrelativeにしたければposition:relativeを指定すれば良い。 やってることはこれだけです。 再掲 >ルールとなっている以上、そのルールを変える事ができなければそれに従うしかありません。 ----------- なぜか、という質問から、○○するにはどうすれば良いか、という質問にシフトしそうな感じですが、 もし違う質問にするなら、すみませんが、改めて新規質問として投稿をお願いします。 最初から なぜか、というのが理由を求めるものではなく「○○する方法は何か」という質問だったのであれば、 KYで申し訳ありません。 私の意見はすべて無視してください。 ○○する方法はありますか？ -> Yes/Noを求める物ではなく、「○○する方法を『もしあれば』教えてくれ」という意図ということはわかりますが、、、
Firefoxのキャッシュを削除してみたらどうですか？
慣習として/へのディレクトリ(フォルダ)直アクセスは、そのディレクトリのindex.htmlを表示するように設定されているケースがほとんどですが、これはあくまでサーバーの設定なので、index.htmlを表示しない設定も存在します。 facebookの表示云々の前に、まずはhttp://www.○○.co.jp/でアクセスしたときに、index.htmlと同じ内容が表示されているかどうかを確認してみてください。 もしhttp://www.○○.co.jp/で、何も表示されない、もしくはindex.htmlと表示内容が異なる場合は、単にサーバーの設定の問題です。レンタルサーバーなり、サーバーの管理者に問い合せてみてください。 逆に、http://www.○○.co.jp/へのアクセスで意図通りの表示だった場合は、htmlのソースの問題か、facebook自体の問題かと思います。 ちなみに、DW上の確認は、あくまでローカル(ご自身のパソコン)での確認になり実際の挙動とは異なるので、アップロードした後の実際のURLで確認してみてください。
http://www.google.co.jp/search?q=%E3%82%B7%E3%83 …
困っているわいには、回答に対して問い合わせないですね。 No3さんの回答であっていると思いますが。 私なら以下のようにしますが <body> <div style="position:absolute;top:0;left:0;width:100%;"> <img src="r014p.jpg" style="width:100%;" alt=""></div> <div style="position:absolute;top:0em;left:0;width:100%;"><div style="padding-left:2em;padding-right:1em;"> 以下通常の記述内容。 </div></div> padding-left:2em;padding-right:1emは、bodyで空白を指定しても反映しないための対策。 参考URL：http://ryuso.info/r/r001.htm
「ユーザビリティ」という用語が既出ですが、ここでは「利用者がタスクを簡単に達成できるかの指標」と定義します。 最近はスマートフォンでのアクセスも増えていますが、スマートフォンの画面幅はせいぜい 600px です。もし段組サイトが、それ以上の大きさで固定幅にしているなら、利用者は目的の情報を探すために上下左右を探し回らねばなりません。 ここで「カラム落ち」させれば、利用者は上下を探すだけで済みます。ゆえにタスクの達成度が上がると予想できます（実際のサイトで観察してみるまでは、予想にすぎませんが）。 逆に。比較的十分なウィンドウ幅があるにもかかわらず、わずかに 2 カラム分の幅には足りないというだけで「カラム落ち」させたとします。すると不自然な空白が目立ち、利用者は困惑するでしょう。予測できる場所に、あるはずのものがないというのは、利用者のタスク達成を妨げます（これも、実際に観察してみないと確実には言えません）。 「カラム落ち」自体の是非ではなく、それによるタスク達成度への影響という点で考えてみてはいかがでしょうか。これは実際のデザインが大きく関与しますので、一般論として「べき・べからず集」にはしづらい話だと思います。 --- ひとつ指摘しておきたいのは、「カラム落ち」というのは過渡期の現象にすぎない、ということです。 CSS1 の範囲内で段組を行うには float を使わざるをえず、それゆえ予想外の場所に段が飛ぶ「カラム落ち」が問題になりました。 しかし、CSS2/2.1 の display: inline-block を使えば、「カラム落ち」しても比較的予測しやすい場所に行きます。あるいは display: table を使えば表組ができます。「カラム落ち」が問題なら、「カラム落ち」しない方法・しても問題ない方法を選べば良い。問題を抱えた古い方法なんて使わなければ良いのです。 さらに、CSS3 にはマルチカラム・モジュールがあります。これを使えば、ウィンドウ幅に応じて、ページの見開きのごとく二段、三段、四段、……と増えていきます。もう「二段組みの方法」「三段組みの方法」なんてケチ臭い話をする必要もありません、 このように、ページのデザインを動的に変更できる時代になりつつあります。ならば、静的なデザインしかできないゆえに、限られたスペースに多くの情報を配置する必要から生まれた「段組」のテクニックこそ、もはや不要なのではないでしょうか。
ブラウザ・・ではなくブラウザのウィンドウに合わせてですよね。 javascriptで別ウィンドウを開く以外に無いです。 紹介されたサイトの方法は、スタイルシートを使うと、はるかに簡単に実装できますが、あくまでそのページのどこかに基準位置を設けなければなりません。その基準位置からの位置になりますから、スクロールやウィンドウ巾によっては、ずれます。
「h1 をページ内で一回しか使わない」ことはないですよ（そういうポリシーを持ってるなら、まあ、止めはしませんが）。 ひとつ変わった例として、次のようなものを考えてみます。 <h1>...</h1> <h2 id="ima-miteru">...</h2> <h2>...</h2> h2#ima-miteru { color: red } とすると、その h2 が赤くなります。さて、スクリプトを使って、id="ima-miteru" を次の h2 に移動させます。 <h1>...</h1> <h2>...</h2> <h2 id="ima-miteru">...</h2> するともちろん、次の h2 が赤くなります。さて、全部見終わったので id="ima-miteru" を最初の h1 に戻しましょう。 <h1 id="ima-miteru">...</h1> <h2>...</h2> <h2>...</h2> すると、h1 は h2#ima-miteru にマッチしませんので、赤くなるものがありません。これで「見終わったので、最初から」を表せます。 こんな風に id を移動させることで、いろいろ楽しいことができるわけです。まあ、スクリプトが必要なのがアレですけどね。 ※WAI ARIA の @aria-activedescendant など。 --- CSS を書くときに守った方が良いことは、詳細度の低いものから高いものの順に書くことです。詳細度の計算についてはご自分で調べて頂くとして、 /* 詳細度は (1, 0, 0) で、どんな要素でも id="HOGE" を持つものなら適用 */ #HOGE { ... } /* 詳細度は (1, 0, 1) で、id="HOGE" を持つ h1 だけに適用 */ h1#HOGE { ... } 要するに、割と広く適用されるものは先に書き、用途が限定的なものは後に書く、ということです。そうすれば CSS が比較的すっきりしますし、メンテナンスもしやすくなります（CSS 規則の優先順位と上書きルール）。 ※ごく個人的な懸念を申し上げれば、#wrapper とか #header とかの ID を振っているソースは、最初のうちはあまり真似しない方が良いような気がしなくもないです。 ※ちなみに「ブラウザがきちんと解釈できる」ものを具体的にまとめたものが HTML(5) 規定です。あれはブラウザの振る舞いの規定です。
＞traditional自体がなくなるって事は当然これも消滅ですね。 ＞後、framesetがあるようですが、これも時代の流れで消滅でしょうか。 　既存のページは、そのままで良いです。HTML4.01だけでなく、HTML3.2もHTML2.0も今でも有効です。 　しかし、将来的な保障はありませんが、ブラウザは古い仕様にも対応することが求められていますから、ブラウザで見る限りにおいては、問題ないでしょう。 一方で、ユーザーエージェントは古い要素や属性をサポートし続けなければなりません。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 一方で、ユーザーエージェントは古い要素や属性をサポートし続けなければなりません。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML5 における HTML4 からの変更点( http://standards.mitsue.co.jp/resources/w3c/TR/h … )］より 　HTML5では、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTML5 では、製作者のためオーサリング言語をシンプルにした結果、表象的な要素をはじめとするいくつかの要素や属性が含まれていません。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML5 における HTML4 からの変更点( http://standards.mitsue.co.jp/resources/w3c/TR/h … )］より 3.3. 変更された要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 3.4. 変更された属性 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 3.5. 不在の要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 3.6. 不在の属性 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) を読めば一目瞭然です。frameもなくなります。 ＞traditional自体がなくなるって事は当然これも消滅ですね。 　はい。 　実は、HTML4.01(1999年12月24日付W3C勧告--12年も前!!!)でも 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから しかしながら、より強力なプレゼンテーション機構をスタイルシートが提供するため、World Wide Web Consortium は、HTMLのプレゼンテーション関連要素・属性を、段階的に縮小させていくこととする。 本仕様において、【将来削除される】危険のある要素及び属性については、 「推奨しない」と記してある。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より と、随所で「(将来廃止される予定なので)推奨しない」と書かれていたのに、いまさら言われても・・・(^^) ★HTML5では、明確に「著者が使えるもの」「ユーザーエージェントがサポートしなければならないもの」と、より厳しい言い回しになりました。単に厳しくなっただけで、大きな変更は無いです。よって、今後書くなら、HTML5が正式勧告となり、多くのユーザーエージェントが対応を完了するまでは、HTML4.01strict,XHTML1.0strict,XHTML1.1が無難かと・・
参考サイト拝見し、そちらにもhead要素内に記述と書いてありましたので head要素内がどの個所を指しているのかがわからないのかと思えたのですが、、どうでしょうか。 htmlソースは、下記の様な記述から始まるかと思いますが <!DOCTYPE html ・・・・ <html　 ・・・・ <head>←ここからhead要素始まり <meta ・・・・ <title> ・・・・</title> ■■■←例えばこの辺に記述 </head>←ここまでhead要素終わり 「ここからhead要素始まり」から「ここまでhead要素終わり」の間をhead要素内といいます。 この間に記述で問題ないかと思います。 「■■■←例えばこの辺に記述」の箇所に記述すると下記の様な感じです。 ～～～～～～～～～～～～～～～～～～～～～～～ <title>・・・・</title> <style type="text/css"> <!-- a.menu { text-decoration: none; border: 1px solid #8080ff; background-color: #ccccff; padding: 1px; } --> </style> <script type="text/javascript"><!-- function sublist( target ) { var TargetList = target.parentNode.getElementsByTagName('ul'); if ( TargetList[0].style.display == 'none' ) { TargetList[0].style.display = 'block'; } else { TargetList[0].style.display = 'none'; } } // --></script> </head> ～～～～～～～～～～～～～～～～～～～～～～～ けんとうちがいなら、ごめんなさい。 あと、サンプルのhtmlソースそのままではリストの開閉はしないと思いますが、 その辺は理解されているのでしょうか。
残念ながら横書きですよ。規格外の仕様です・・・ IEは、60%程度のシェアですが、 IEの標準モードや過去モードに拘る前に、 他の40％程度のブラウザで意図通りに表示できるようにする事が先決では？ IEブラウザに特化したサイトは、 そのユーザーに嫌われる傾向ですので・・・ ついでに書きますが、段落のマークアップは、 <p>～～</p>です。
「 multibox 」で検索すると、 同じタイプで、設置方法が詳しく書いたサイトがみつかるでしょう。 NO.1さんにも書いてますが、 lightboxとか色々なタイプがあるようで、 ソースで書くと言うより設定するという方が正しいでしょう。
＞私が参考にしたこちらのページはシンプルで良いと思のですが、 　ご自身で判断できると思います。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　に、書かれているようなidやclass名になっていますか? class名は、 HTML5の[3.1. 新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … )]の名称だとどうでしょう。 <body> 　<div class="header"> 　　<h1>タイトル</h1> 　</div> 　<div class="aricle"> 　　<div class="section" id="section1"> 　　　<h2>見出し</h2> 　　　<p>記事</p> 　　</div> 　　<div class="section" id="section2"> 　　　<h2>見出し</h2> 　　　<p>記事</p> 　　</div> 　　<div class="contentTable"> 　　　<h2>目次</h2> 　　　<ol> 　　　　<li><a href="#section1">section1</a></li> 　　　　<li><a href="#section2">section2</a></li> 　　　</ol> 　　</div> 　</div> 　<div class="footer"> 　　<div class="nav"> 　　　<li><a href="./index.html">Top</a></li> 　　</div> 　</div> </body> と書かれているHTMLだと、機械(検索エンジン)にどちらがよく理解できるでしょう。数年後にあなたが見直したとき、どちらがよくわかりますか？。Lynx( http://lynx-win32-pata.sourceforge.jp/index-ja.h … )で見たらどう見えるでしょう。 div.header,div.article,div.footer{ 　width:80%;margin:0 auto; } div.article{ 　position:relative; } div.article div.section{ 　margin:left:200px; } div.article div.contentTable{ 　position:absolute;top:0;left:0; 　height:100%; } と書かれたCSSは、数年後にあなたが見たときに、HTMLを開かなくても、どこをどう指定してあるかわかりますよね。表示画面とスタイルシートだけ見ても、どこをどう変更すればよいかわかるはずです。(それこそ文書構造に従ったマークアップではないかと。) [サンプル]HTML4.01strict タブは＿に置換してあります。戻すこと。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html,body{background-color:gray;margin:0;padding:0;} div.header,div.article,div.footer{ ＿width:80%;margin:0 auto; ＿background-color:white; ＿border:white 1px solid; } div.header{height:100px;} div.article{ ＿position:relative; ＿padding-top:30px; ＿min-height:400px; } div.article div.section{ ＿margin-left:200px; ＿padding:1ex 1em; ＿border:solid 1px red; } div.article div.contentTable{ ＿position:absolute;top:0;left:0;padding-top:40px; ＿height:90%;width:200px; } div.footer div.nav{ ＿position:absolute; ＿top:100px;height:30px; ＿width:80%;margin:0 auto; } div.footer div.nav ul,div.footer div.nav ul li{ ＿display:block;list-style:none;margin:0;padding:0; ＿background-color:yellow; } div.footer div.nav ul li{ ＿float:left; ＿width:30%;height:30px;margin-left:2%; ＿text-align:center;line-height:30px; } div.footer div.nav ul li a{ ＿display:block; ＿text-decoration:none; } --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>タイトル</h1> ＿</div> ＿<div class="article"> ＿＿<div class="section" id="SECTION1"> ＿＿＿<h2>見出し</h2> ＿＿＿<p>記事</p> ＿＿</div> ＿＿<div class="section" id="SECTION2"> ＿＿＿<h2>見出し</h2> ＿＿＿<p>記事</p> ＿＿</div> ＿＿<div class="contentTable"> ＿＿＿<h2>目次</h2> ＿＿＿<ol> ＿＿＿＿<li><a href="#SECTION1">section1</a></li> ＿＿＿＿<li><a href="#SECTION2">section2</a></li> ＿＿＿</ol> ＿＿</div> ＿</div> ＿<div class="footer"> ＿＿<h3>文書情報</h3> ＿＿<p>文書情報</p> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li><a href="./index.html">Top</a></li> ＿＿＿＿<li><a href="./product">製品</a></li> ＿＿＿＿<li><a href="./books">著書</a></li> ＿＿＿</ul> ＿＿</div> ＿</div> </body> </html>
>cssで指定した画像に使う方法はないのでしょうか。 ありません。 考え方が逆です。 背景画像にリンクを付けるのではなく、<a>を使ってリンクを作成し、そこに背景画像をつけてください。
すみません。サンプルを書いておこうと思ったのですが、出かけてしまいまして・・ IE7以降対応です。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) でチェック済み。 　添付画像は、Googleお勧め( http://www.google.com/support/webmasters/bin/ans … )のLynx( http://lynx-win32-pata.sourceforge.jp/index-ja.h … )です。 　IE7以降、Firefox,googleChrome,Opera,Safari等は同じ。IE6以前はマウスオーバー時の画像こそ表示されませんが、リンクは有効です。 ★タブは＿に置換してあるので戻すこと。 ★画像は指定サイズのものを用意してください。(thumbNaolは60×45,背景画像は480×360) 　HTMLは、スタイルシートを用いるため極めて簡潔です。 　スタイルシートもHTMLさえきちんと出来ていればわかりやすいはずです。 　そのため、検索エンジンは無論、読み上げソフト、点字出力端末などスタイルシートやjavascriptが無効なユーザーエージェントも理解できます。そして何と言っても自分自身でのメンテナンスが楽です。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.nav ul,div.nav ul li{display:block;list-style:none;margin:0;padding:0;} div.nav a span{color:yellow;} div.nav{ ＿width:486px;height:413px;margin:0 auto; ＿position:relative; ＿border:ridge gray 3px;background-color:black; } div.nav ul{ ＿height:48px;width:100%;bottom:0; ＿position:absolute; ＿background-color:black; } div.nav ul li{width:60px;margin:1px;float:left;} div.nav ul li span{display:none;} div.nav ul li a:hover span{ ＿display:block;width:480px;height:360px; ＿position:absolute;top:-360px;left:3px; ＿background-image:url(photo/01.jpg); } div.nav ul li a[href="./product1"]:hover span{background-image:url(photo/02.jpg);} div.nav ul li a[href="./product2"]:hover span{background-image:url(photo/03.jpg);} div.nav ul li a[href="./product3"]:hover span{background-image:url(photo/04.jpg);} div.nav ul li a[href="./contactUs"]:hover span{background-image:url(photo/05.jpg);} --> ＿</style> </head> <body> ＿<div class="nav"> ＿＿<ul> ＿＿＿<li><a href="./books"><img src="photo/thumbnail/01.jpg" width="60" height="45" alt="書籍紹介"><span>説明文1</span></a></li> ＿＿＿<li><a href="./product1"><img src="photo/thumbnail/02.jpg" width="60" height="45" alt="製品紹介1"><span>説明文2</span></a></li> ＿＿＿<li><a href="./product2"><img src="photo/thumbnail/03.jpg" width="60" height="45" alt="製品紹介2"><span>説明文3</span></a></li> ＿＿＿<li><a href="./product3"><img src="photo/thumbnail/04.jpg" width="60" height="45" alt="製品紹介3"><span>説明文4</span></a></li> ＿＿＿<li><a href="./contactUs"><img src="photo/thumbnail/05.jpg" width="60" height="45" alt="コンタクト"><span>説明文5</span></a></li> ＿＿</ul> ＿</div> </body> </html>
適切な回答になっていないかもしれませんが ページは同じ階層ですか？ 同階層でソースも同じであればスライドショーが悪さしているかもしれませんが。。 何が悪いのかわからない時は1つずつつぶしていくしかないかと思います。 1）それぞれ画像のパスを絶対パスにしてみる 2）メインページのスライドショーを外してみる 3）それぞれのページをロゴの箇所のみ残して不要な場所を削除し確認してみる 4)商品紹介ページをコピーしてメインページの内容（ロゴ以外の部分）に差し替える 1つづつ試して、どこが問題なのかを見つける事が先決ではないかと思いました。 ロゴということなので、該当箇所はHeader部分なのでしょうか？ そうであれば共通にしてみるというのも手かなと・・
input[type="text"], input[type="password"], textarea, select { outline: none; } 上のようなCSSで消せますよ。
デフォルトでは、ウェブ標準のCSS2.1で検証されます。 下のオプションで、そとと3を選択することも出来ますが、overflow-x,overflow-yは対応ブラウザが比較的多いので、使っても良いでしょう。
実際に検証してみました。ただし、全角スペースは半角スペースに戻してテストしました。 エラー: 以下のエラーが見つかりました。 (3) URI : TextArea 6 　#navi 　次のプロパティが正しくありません : left 値が多すぎるか、もしくは値が解析できません : 50 px 50 px 6 　#navi 　次のプロパティが正しくありません : top Lexical error at line 6, column 54. Encountered: "%" (37), after : "" % ; 7 　　次のプロパティが正しくありません : top 文法解析エラーが発生しました [: 88% ; overflow-x : hidden ; overflow-y : auto ; z-index : 1 ; }] ★基点となるセレクタとそれに繫がるセレクタの間には半角スペースは入れられません。 　[例]　div .class　は、div *.class と解釈されます。半角スペースは{子孫セレクタ}です。CSS2では、*(全称セレクタ(詳細度0)が導入され、すべて[基点となるセレクタ][接続詞][繫がるセレクタ]という形式になります。) 　このミスはありませんが、添付画像のように全角スペース、半角スペース、タブが認識できるテキストブラウザで、文字は等幅フォンを使うようにすると、全角半角の誤りはなくなります。EmEditor( http://jp.emeditor.com/ )での画面です。 ★値の間にはスペースは入れることが出来ません。 　[例]　　left : 50 px ;と書くと、二つの値がある　left : [値] [値];と解釈されます。そのときに適合しない値の場合デフォルトの50%と判断されますから、left:50% 50% と判断されてしまいます。leftは、値をひとつしかとりえません。同様に 　top : 10 % ;もエラーとなります。 [CSS3]として、W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … )でチェック ★タブは＿に置換してあります。 div { ＿position : relative ; ＿color : white ; } #header { ＿position : fixed ; ＿top : 0px ; ＿left : 0px ; ＿overflow : auto ; ＿width : 100% ; ＿height : 8% ; ＿z-index : 2 ; ＿border-bottom : 1px red solid; } #navi{ position : absolute ; ＿left : 50px ; ＿top : 10% ; ＿height : 88% ; ＿overflow-x : hidden ; ＿overflow-y : auto ; ＿z-index : 1 ; }
フロートは全く関係ないと思うのですが。。 親要素とfloatする要素にwidthの設定などしていますか？ とくに、floatさせる要素にはwidthの設定は必須です。 cssて凡ミスが多いと思います。
フォトショップとファイヤーワークスの色味を揃えたいなら http://oshiete.goo.ne.jp/qa/5007819.html CSSでの色指定と画像ファイルの色を揃えたいなら CSSで指定せず画像ファイルにする （webセーフカラーでなければ色味がズレるのは避けられないので）
色が背景色の場合。もっと簡単かな <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.section{position:relative;width:80%;min-width:600px;max-width:900px;margin:0 auto;} div div{width:26%;} div div div{width:100%;} div.column{position:absolute;left:0;top:0} div.column div{padding:0.5em 1em;} div.n2{left:33%;} div.n3{left:66%;} div.column div p{padding:0 1em;} div.column div.product p{background-image:url(./images/blue.gif);} div.column div.books p{background-image:url(./images/green.gif);} div.column div.note p{background-image:url(./images/orenge.gif);} div div div p{width:100%;line-height:30px;margin:0;text-indent:1em;} --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<div class="section"> ＿＿<form action="./"> ＿＿<div class="column n1"> ＿＿＿<div class="product"> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、 ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、なんたらかんたら、なんたらかんたら ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、 ＿＿＿＿</p> ＿＿＿＿<select name="m1" tabindex="1"><option selected>選択してください。<option>テスト</select> ＿＿＿</div> ＿＿＿<div class="product"> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、なんたらかんたら、なんたらかんたら ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、 ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、 ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、なんたらかんたら、なんたらかんたら ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、 ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、 ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、 ＿＿＿＿</p> ＿＿＿＿<select name="m2" tabindex="2"><option selected>選択してください。<option>テスト</select> ＿＿＿</div> ＿＿</div> ＿＿<div class="column n2"> ＿＿＿<div class="books"> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、 ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、なんたらかんたら、なんたらかんたら ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、なんたらかんたら、なんたらかんたら ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら ＿＿＿＿</p> ＿＿＿＿<select name="m3" tabindex="3"><option selected>選択してください。<option>テスト</select> ＿＿＿</div> ＿＿＿<div class="product"> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、なんたらかんたら、なんたらかんたら ＿＿＿＿</p> ＿＿＿＿<select name="m4" tabindex="4"><option selected>選択してください。<option>テスト</select> ＿＿＿</div> ＿＿</div> ＿＿<div class="column n3"> ＿＿＿<div class="note"> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、なんたらかんたら、なんたらかんたら ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、 ＿＿＿＿</p> ＿＿＿＿<select name="m5" tabindex="5"><option selected>選択してください。<option>テスト</select> ＿＿＿</div> ＿＿＿<div class="product"> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、なんたらかんたら、なんたらかんたら ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、なんたらかんたら、なんたらかんたら ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、 ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、 ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら、 ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら ＿＿＿＿</p> ＿＿＿＿<p> ＿＿＿＿＿なんたらかんたら ＿＿＿＿</p> ＿＿＿＿<select name="m6" tabindex="6"><option selected>選択してください。<option>テスト</select> ＿＿＿</div> ＿＿</div> ＿＿</form> ＿</div> </body> </html>
h1 #hoge { margin-top: -10px; margin-top: -50px/9;/*Ie8以下？*/ *margin-top: -50px;/*Ie7以下？*/ _margin-top: -50px;/*Ie6以下？*/ } h1 #hoge:not(:target) {/*Ie9用*/ margin-top: -50px/9; } 「ターゲットブラウザやバージョン　ハック」で検索すると幸せになれますよ。正しくはないのですが、エラーを以ってエラーを制する感じです。正しくはないのでどうしてもの場合に悪いことを知りながらしかたなく使ってください。 Ieのバグの解決策も「IE バグ　解決」などで検索すると出てきますので、そちらを試して、ダメだった場合などできるだけハックは使わない方向で制作してみてください。
HTMLに文字コードが指定してありますが、それと実際の文字コードが異なる可能性大です。 ブラウザの表示→エンコードで強制的にShift_JISなどに変更し見てください。 ★Shift_JIS　です。アンダースコアです。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　なお、著者の立場になったらHPでは話が通じないことが多くなりますので、ウェブサイトとか、ウェブページと言うほうが良いです。 　「ホームページに戻る」というと、サイトのトップページもしくは、ブラウザを開いたときに表示されるページ(これが本来のホームページ)を意味しますが、ウェブページやウェブサイトをホームページと言うと意味が通じません。<a href="./index.html">ホームへ</a>が何のことかわからなくなる。ましてや、ＨＰとなると、ヒューレッドパッカードの略称と世界的に認められてます。 　また、今から学ばれるなら、transitinal(移行型)ではなく、strict(厳密型)に絞ったほうが良いです。transitionalには将来的に廃止される予定の要素(タグ)や属性を多く含んでいますが、XHTML1.1や、そろそろ勧告になるHTML5では、strict以外ありません。なんといってもシンプルで圧倒的に書きやすいです。
古いIEは、位置を参照するときに基準点が異なるものがあるので、画像自体を置き換えるほうが無難です。 　その場合、単純な背景画像の場合は、多少ずれても構わないようにひとつの背景を表示サイズよりも大きくして、ずらす値も大きめにとればひとつの画像でも良いです。 　一方、枠や文字が入る場合は一つ一つの画像にしています。 　私は、クロスブラウザのこともあり、基本的に文字や枠を背景には極力入れないようにしています(文字を画像に置き換えることは避けている)から、単純な画像しか使いませんからひとつの画像でずらすことが多いです。 　そうすると、スタイルシートも継承を使えるので簡潔になり、メンテナンスもずっと容易ですからね。 　
上述のプログラムとデータベースを勉強コースだと思います。 がんばってください。
No.3です。 ＞詳細度とか見たことすらないですけど、階層構造の深さだなとは何となく分かります。 　CSS(カスケーディングスタイルシート)を使うときは、プロパティより先に、カスケーディングの仕組みを学んでおかないとなりません。そうしないと、要素(タグ)にいちいちIDやclass名を振ってしまい、とんでもない文字数のHTMLが出来上がるし、後から「わけわかめ」になります。 　HTMLは文書構造を示し、スタイルシートでプレゼンテーションを指定することでHTMLは極めて簡略化できる・・はずなのに・・divやclassやidてんこ盛りの巨大なHTMLを書いてしまう。 　決して難しいものじゃなくて、ごくごく一般的に理解できる常識的な内容です。 a:link{color:magenta;} /* 詳細度[0,0,0,1] (colorは継承するプロパティ) */ リンクのa要素の色はマゼンタにしましょう。 div.header a:link{color:red;} /* (1)詳細度[0,0,2,2] */ 　headerクラスのdiv(汎用ブロック)の子孫( 半角スペース)のリンクaは赤ですよ。 div.header div.nav a:link{color:green;} /* (2)詳細度[0,0,3,3] */ 　しかし、その中のナビゲーションブロック内のリンクaは、緑 div.header div.nav a+a+a:link{color:aqua;}/* (4)詳細度[0,0,3,5] */ 　そのうちで、兄にふたつのaをもつa:linkは水色 div.header div.nav a+a:link{color:yellow;}/* (3)詳細度[0,0,3,4] */ 　兄がふたつのaは水色 div.section p a:link{color:blue;}/* (5)詳細度[0,0,2,2] */ 　一方本文(section)内の段落中のa:linkは青 (6)は詳細度が[1,0,0,0]として計算される。 　詳細度は *(全称セレクタ)、タグの属性(<body link="blue">)はゼロ 要素(タグのこと)、擬似要素(:first-leterとか)は、d=1 属性a[href]、クラス(a.class)、擬似クラス(:linkとか)は c=1 一意セレクタ(ID)は、b=1 HTMLの属性中のstyleでの指定は、a=1 [a,b,c,d]という数として数えます。 　そのプロパティが継承されるか否かは常識的なものです。たとえばcolorプロパティは、親の段階で決めれば子々孫々まで有効ですが、borderプロパティは継承されません。 　値の割り当て、カスケード処理、継承 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　カスケーディングスタイルシートの本当に大事な根幹部分です。もし理解していれば、HTMLをどう書けばよいかもわかるはずです。idはリンクの終端、class名は文書(の意味的)構造を示すものをつける。と言う意味は、CSSのCを知ると理解できるかと。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より
英語ですが、以下の画像でPhotoshopでの似たようなボタンの作り方を解説しています。 http://www.psfreak.com/vista-styled-button 参考URLに色々な立体デザインの効果のチュートリアルがあるので、参考にしてみてください。 ご参考まで。 参考URL：http://naldzgraphics.net/tutorials/40-best-photo …
http://www.adobe.com/jp/products/activation/ 2台まではインストールが可能なようです。 マニュアルにかかれてませんか?
まず、HTMLはその文書を構成する要素をマークアップするメタ言語と呼ばれるものです。 すなわち、ここが見出し、ここが段落と言う風に、タグ(荷札)で囲んで印をつけ(マークアップ)ます。 　ところが、限られたタグしかありませんから、文書を構成する要素といっても限界があります。そこで、要素にclass名やid属性(attribute)をつけて区別できるようにします。 ★7.5.2 要素識別子: id属性とclass属性 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　(注)解らないときは、仕様書を確認する癖をつけましょう。伝聞よりは正確で確実な情報を得られます。それを調べて解らないときに聞くとよいです。 ＿＿＿＿＿＿＿＿＿＿＿＿＿＿ここから id = name [CS] 　この属性は、要素に名前を割り当てる。この名前は文書中で一意でなければならない。 class = cdata-list [CS] 　この属性は、ある要素に1つのクラス名を割り当てるか、または複数のクラス名を設定する。 幾つの要素に対してでも、同じクラス名あるいはクラス名群が割り当てできる。複数のクラス名については、空白文字によって区切らねばならない。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで 　また、用意された要素(タグ)が無い場合、DIV,SPANを使ってマークアップしますが、そのDIV,SPANの項目には 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 各々、内容が行内であるか(SPAN)ブロックレベルであるか(DIV)は定めるが、他のプレゼンテーション的語彙を示すことはない。 従って著者は、この両要素をスタイルシートやlang属性等と併用することで、HTMLを自身の必要や好みに応じられるようにできる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［7.5.4要素のグループ化: DIV要素とSPAN要素( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　と書かれています。 　具体的に説明すると次のようなHTMLにおいて、 <body> <!-- ここからヘッダ要素 --> 　見出しやナビゲーション <!-- ヘッダこまで --> <!-- ここから本文の章(section) --> 　章見出し <!-- 本文終わり --> <!-- ここから本文の章(section) --> 　章見出し <!-- 本文終わり --> <!-- ここからフッタ --> 　フッター記事 <!-- フッタ終わり --> 　で構成されている場合、 {HTML5]では、 <body> 　<header> 　　<h1>見出し</h1> 　</header> 　<section> 　　<h2>章見出し</h2> 　　<p>記事</p> 　</section> 　<section> 　　<h2>章見出し</h2> 　　<p>記事</p> 　</section> 　<footer> 　　<h2>フッタ見出し</h2> 　</footer> </body> 　となります。HTML4.01には、この様な(文書)構造を示す要素(タグ)がありませんでしたから、 「DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する」ために <body> 　<div class="header"> 　　<h1>見出し</h1> 　</div> 　<div class="section"> 　　<h2>章見出し</h2> 　　<p>記事</p> 　</div> 　<div class="section"> 　　<h2>章見出し</h2> 　　<p>記事</p> 　</div> 　<div class="footer"> 　　<h2>フッタ見出し</h2> 　</div> </body> 　というマークアップが推奨されていました。検索エンジンはこのようなclass名やidは理解しています。また、著者自身も後でHTMLやCSSを見直すときに理解しやすいです。 【現実には】、この様なマークアップをするためには著者自身が内容を理解して適切なclass名をつけなけれはなりませんが、オーサリングツールに読解力はありませんから、class名にwrapper,container,left,rightなど、検索エンジンにも意味不明なものが付けられ続けていました。その反省からHTMLでは、文書の構造を示す要素(タグ)がいくつか決められました。 　ここから解るように、IDやclassは本来は「文書に構造を付加するため」のものなのですが、スタイルシートのためと誤解されている向きも多々あります。 {あの具体的な使い分けってあるんですか。} 　IDは単純に「その文書にひとつしかない」要素を示すものがIDです。主にリンクの終端に使われます。class名は、文字通りグループ(クラス)を示すものです。特にclass名はスタイルシートにとって便利が良い機能です。 {時々、IDとclassが一緒になっていることがありますよね？} 　もちろん一緒だろうと別だろうと構いません。 <div class="header"> 　<div class="nav" id="nav"> 　　　<ol> 　　　　<li><a href=""></a></li> 　リンク先<a href="nav">として、スタイルシートで、div.navあるいはdiv#navでも可能です。スタイルシートで、一意属セレクタ(IDのこと)はb=1,クラスセレクタはC=1ですから、詳細度が異なります。 　いずれにしても、スタイルシートのためにIDやclass名を乱雑につけるべきではありません。詳細度などカスケーディング機能で要素を特定できないときにのみつける意識が必要です。 【例】 <div class="header"> 　<div class="nav" id="nav"> 　　　<ol> 　　　　<li><a href=""></a></li> に対して、div.nav ol li a{color:red;}[詳細度 0 0 1 4]で済むものを <div id="header"> 　<div class="nav"> 　　　<ol> 　　　　<li><a href="" id="red"></a></li> に対して、#red{color:red;}詳細度[0 1 0 0]なんてしないことです。
恐らくカテゴリが違うと思いますが……。 DirectXの機能でフルスクリーンモード（排他モード）にしているゲームの場合は実現不可能です。 解像度が変わった後に強制的に最前面に表示したとしても、排他モードのゲームは画面に対して直接描画処理を行っているので、他のフォーム等は関係なしに上書き描画されてしまいます（恐らくは、ゲームの描画＞フォームの再描画＞ゲームの描画……というように点滅表示されてしまうと思います）。 排他モードではないゲーム（解像度だけを変えて、タイトルバー無しのフォームを全画面にしているもの）ならば、ゲームがアクティブになった後に最前面処理を行えば表示できますが、ゲーム内で定期的に自分自身を最前面にするようにしている場合はやはり隠されてしまいます。 どうしてもゲーム上に何かを描画したいのならば、初期化処理をフックして排他モード以外で起動させ、自作のツールの方で解像度を変更してゲーム自体はウィンドウモードで起動させたり、描画処理自体に割り込んで直接描画するというような荒技もあるにはありますが、いずれにしてもオンラインゲームということなのでやらない方が良いと思います（ゲーム側で検知されてアカウント剥奪等の罰則を受けることが殆どです）。
最近は様々な端末、特にi-phoneのような小さな端末も無視できないので、様々なウィンドウ幅に対応させるため div.header,div.section,div.footer{ 　width:80%; 　min-width:450px; 　max-wide:800px; } あるいは、 <link href="pc.css" rel="stylesheet" type="text/css" media="screen and (min-device-width: 481px)"> <link href="iphone.css" rel="stylesheet" type= "text/css" media="only screen and (max-device-width: 480px)"> <!--[if IE]> <link href="pc.css" rel="stylesheet" type="text/css" /> <![endif]--> とか ＞なんか、どういう基準でつくって良いかよく分からないです。 　HTML自体には、基準はありません。そもそも 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より ですから、 　スタイルシートは、想定される利用者に合わせて必要なだけ作成します。すなわち ・幅広のscreen端末 ・携帯電話 ・印刷 media="print"　印刷が想定されるページ とか・・・
NO.1のお礼欄も拝見しましたが、 chromeがあるなら chromeでそのページを表示して　F12キー　で解決。
CSSを使うためには、HTMLがきちんと出来ていないと難しい部分があります。 　CSSと併用するためには、「HTMLは、レイアウトやデザインのためではなくもっぱら文書の構造をマークアップするもの」「CSSはその見栄え--プレゼンテーション--を指定するもの」という［すみわけ］を理解しておかなければなりません。 　現在ウェブ標準とされている仕様は、HTML4.01とCSS2.1ですが、将来的にはHTML5とCSS3になるでしょうが、そうなると、HTML4.01で認められていたプレゼンテーションに関する要素(タグ)や属性は完全に排除されます。すなわち、HTML4.01strictと似たものになると言うことです。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから しかしながら、より強力なプレゼンテーション機構をスタイルシートが提供するため、World Wide Web Consortium は、HTMLのプレゼンテーション関連要素・属性を、段階的に縮小させていくこととする。 本仕様において、【将来削除される】危険のある要素及び属性については、 「推奨しない」と記してある。 推奨しない要素や属性の記述には、他の要素やスタイルシートで同じ効果をあげる方法を、併せて例示してある。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML4.01仕様書　2.3.5 スタイルシート( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　★ここでいう「推奨しない要素および属性」を排除したものがHTML4.01stricrtです。 　その意味で「CSSに挑戦してみたいなと思います。」は、とても良い考えだと思います。しかし、それは同時に 「HTMLは、レイアウトやデザインのためではなくもっぱら文書の構造をマークアップするもの」 「CSSはその見栄え--プレゼンテーション--を指定するもの」 　への転換を意味するのです。 　また、次期HTMLであるHTML5においては、それ以上に「セマンティックなマークアップ」が求められることになります。 ★HTML5 における HTML4 からの変更点-3.1. 新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　あたりをよく読んでください。 　まったくスタイルシートを適用せず、画像も読み込ませない状態で、そこに書かれている文書とマークアップから、どこがヘッダに当たるか、どの文字列が見出しで、どこがひとつのセクションで、どこがフッターで、どこが補足記事で、どこがナビゲーションなのかがわかるHTMLを作成することを意味しています。 　そうなると、今までHTMLを書いてきた手法とまったく異なる方法になるかもしれません。なぜなら、あなたが書きたい文書の中で、 「どこからどこまでが、どういう構成要素であるか」を理解して、適切な要素(タグ)でマークアップすることになります。 　その上で、CSSでは、文書を構成するどの要素のどの部分をどのように表示するかを指定していかなければなりません。 　文章では解りにくいので実例で説明すると。HTML4.01だと <body> 　<div class="header"><!-- ヘッダ --> 　　<h1>見出し</h1> 　　<div class="nav"> 　　　<ol> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　　<li><a href=""></a></li> 　　　</ol> 　　</div> 　</div> 　<div class="section"><!-- 本文 --> 　　<h2>章見出し</h2> 　　<p>段落</p> 　　<div class="section"><!-- 項 --> 　　　<h2>項見出し</h2> 　　　<p>段落</p> 　　</div> 　　<div class="section"> 　　　<h2>項見出し</h2> 　　　<p>段落</p> 　　　<div class="aside"> 　　　　補足記事 　　　</div> 　　</div> 　</div> 　<div class="footer"><!-- フッタ --> 　　フッタ 　</div> </div> とマークアップしたとして、スタイルシートを書くときは div.section div.section div.aside{ 　font-size:0.9em; 　background-color:aqua; 　border: solid 1px blue; } 意味は、「本文中の項目中の補足記事は文字サイズを小さくして背景を水色、枠線を青の線に表示」となります。 　この一連の作業を想像されるとわかると思いますが、CSSは無論、HTMLでさえ、ツールに頼ることは出来ないことが理解できると思います。 　慣れてしまえば、とっても楽です。これを外部スタイルシート(FC2HPでも可能)としておけば、ちょっとデザインを変えたいときもHTMLも見なくても、CSSだけ開いて必要な箇所を書き換えればよい。たとえば div.section div.section div.aside{ 　font-size:0.9em; 　background-color:white; 　border: solid 1px green; 　width:20%; 　float:right; } 「文字サイズは小さく、背景は白で枠線は緑で、幅を本文の20%にして右に置き本文を周囲に割り込ませる。」 　しかし、CSSをこの様に解りやすく書こうとすると、全体としてHTMLにより厳格さを求められると言うことです。 すなわち 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … )］より ★現在、そして将来のウェブの動向を考えると、いつかは身に着けなければならないことです。 　私の経験(もうHTML書き始めて15年になります)から言うと、とても楽になったと思います。 ・どのタグを使うか悩まなくてよくなった ・たった一つの文書を用意することでブラウザは無論、携帯端末、プリンター、携帯電話などに対応できる。 ・たった一箇所を直すだけでサイト全体のデザインを一新できる。 ・とにかく一枚あたりのHTMLのサイズが劇的に小さくなる。 ・後日のメンテナンスや変更が驚くほど簡単になった ・検索エンジンに確実に情報を伝えられる ・・いいことずくめですね。 　最後になりますが 「エディターにFC2HP付属エディターのような物はありますか？HTMLではよく似たエディターを見つけましたが、CSS版はありますか？」 はありません。というか、HTML自体もテキストエディタで作成することにならざるを得ないでしょう。なぜかは、先のHTMLやCSSを書いていくことを想像するとわかると思います。 　ただ、テキストエディタはメモ帳ではなく高機能なものが必要になります。添付画像にスタイルシートやHTMLを編集しているテキストエディタの画像をあげて置きます。使用しているものはEmEditor Pro( http://jp.emeditor.com/ )です。
まず、HTMLから直さないと・・ 　HTML4.01transitinalは、廃止になる要素やタグを多く含んでいます。XHTML1.1やHTML5では基本的にstrict以外はありませんから、今から勉強されるならHTML4.01strictに絞ったほうが良いでしょう。 　そのとき、HTMLの基本、すなわち文書を、それを構成する要素に分解してマークアップすることも合わせて身に着けましょう。 ★HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　の「新しい要素」「変更された要素」がとても参考になるでしょう。 最後に、サンプルを上げておきますが、 いくつかCSSの書き方について。 * { margin: 0; padding: 0; font-size: 15px; } 　全称セレクタですべてクリアされていますが、これはオーサリングツールがよく使う方法ですが、利用できるデフォルトの設定がすべて消えてしまいます。必要なもの以外に適用されないようにするため、書かないほうが良いです。また、font-sizeは継承されるプロパティですからbodyに書くと良いです。 body { background-image:url(../img/washi.png);/* 継承されない */ background-repeat: repeat;/* デフォルトでrepeatされるので指定しなくて良い */ } 14.2.1 背景のプロパティ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) #header { width: 750px; height: 50px; /* margin-right: auto; margin-left: auto; margin-top: 10px;*/ margin:10px auto; /* } 1.3.3 簡略化プロパティ（Shorthand properties） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )を使いましょう。 他たくさんありますが、サンプルを見たください。 HTMLについて、 　<div class="local-menu">はメニューではなく、通常の文章のように見受けられます。もし文章ならきちんと <div class="section"> 　<h2>見出し</h2> 　<p>段落</p> </div> とマークアップすべきです。 <div id="logo"> <img src="img/logo.gif" /> </div> 　単なるロゴで内容とは関係ないので、見出しとしてマークアップして画像は背景にするべきです。 <h1><span>見出し</span></h1> もしくは、 <h1><img src="img/logo" width="300" height="50" alt="タイトル"></h1> ★画像のスタイルシートも読まない状態で内容が伝わるかを常に考えること!! [サンプル]HTML4.01strict 必要ならXHTMLに ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み ※タブは＿に置換してあります。元に戻すこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- body{background:url(../img/washi.png) gray;} p{margin:0 1em;text-indent:1em;line-height:1.6em;} div.header,div.article,div.footer{ ＿width:75%;min-width:450px;max-width:800px; ＿background:url(../img/white.gif) white;; ＿margin:0 auto;padding:1ex 1em; ＿border:solid 1px gray; } div.header h1{width:300px;height:50px;float:left;} div.header div.nav ul,div.header div.nav ul li{ ＿display:block;list-style:none; ＿margin:5px 10px; ＿border:solid blue 1px; ＿padding:2px 5px; } div.article div.section{ ＿width: 180px; ＿height:300px; ＿margin: 0px 25px; ＿float: left; ＿border:gray solid 1px; ＿overflow:auto; ＿font-size:0.9em; } div.article div.section h3{ ＿margin:0 1em; } div.article hr{visibility:hidden;clear:left;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1><img src="img/logo.gif" width="300" height="50" alt="何たらのページ"></h1> ＿＿<div class="nav"> ＿＿＿<ul> ＿＿＿＿<li><a href="../">あいう</a></li> ＿＿＿＿<li><a href="./abc">えおか</a></li> ＿＿＿＿<li><a href="./efg">きくけこ</a></li> ＿＿＿</ul> ＿＿</div> ＿</div> ＿<div class="article"> ＿＿<h2><img src="img/img_main.jpg" alt="タイトル" width="700" height="200"></h2> ＿＿<div class="section"> ＿＿＿<h3>【初心者】cssの背景画像について</h3> ＿＿＿<p> ＿＿＿＿bodyの背景に画像を指定、メインコンテンツの背景として白の画像をrepeatで指定というようにしているのですが、containerの背景画像が表示されません。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿初歩的な質問ですみませが、「ここがおかしい」という点と、もし可能であれば「ふつうはこうする」というのがあれば教えてください。 ＿＿＿</p> ＿＿＿<p> ＿＿＿＿以下作りかけですがcssとhtmlです。 ＿＿＿</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h3>主な修正</h3> ＿＿＿<ul> ＿＿＿＿<li>HTMLは文書構造に従ってマークアップしましょう。</li> ＿＿＿＿<li>class名も後で中身を読まなくてもその間に何が書かれているか解るような名称をつけましょう。すなわちcontainerじゃなくて、article(記事)とか、section(章)とか。詳しくは「HTML4からの変更点」の新しい要素とか</li> ＿＿＿</ul> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h3>見出し</h3> ＿＿＿<p>●</p> ＿＿＿<p>●</p> ＿＿＿<p>●</p> ＿＿＿<p>●</p> ＿＿</div> ＿＿<div class="section"> ＿＿＿<h3>見出し</h3> ＿＿＿<p>●</p> ＿＿＿<p>●</p> ＿＿＿<p>●</p> ＿＿＿<p>●</p> ＿＿＿<p>●</p> ＿＿</div> ＿＿<hr> ＿</div> ＿<div class="footer"> ＿＿<h3>文書情報</h3> ＿</div> </body> </html>
文面から、あなたは発注される立場だとしてお答えします。 　まず「WEB画面」という考えは捨ててください。これはも私たちが請合う場合、最初にクライアントに理解していただくことでもあるのです。 　もちろん、カタログやチラシを外注に出すときはそれで良いですし、そうであるべきなのですが、ことウェブについては、まったく事情が異なります。 　ウェブ上の各ページは、ウェブと言う巨大なデータベースを構成するひとつのデータであることです。「文書のプレゼンテーションよりも中身にこそ関心が持たれる。 」( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )」ことを忘れてはなりません。 　言い換えると、「いかに価値のある情報を提供するか」こそ、もっと重要な伝えなければならないイメージであることです。「ロングテール( http://www.google.co.jp/search?q=%E3%83%AD%E3%83 … )」であってよいのです。 　一方プレゼンテーションは、イラストレーターなりで作成するか、気に入ったサイトの印刷イメージで良いです。その際、優れたクリエーターなら、上記を含めて適切なアドバイスをされるでしょう。ただ、これに凝り過ぎると「角をためて牛を殺す」サイトになりかねません。 　通常は、大まかなデザイン--ラフな手書でも良い--と、企業カラー、そして雰囲気(格式や歴史を表現したい、モダンで明るい、シックで重厚感・・・)を示していただくと良いです。その上で、いくつか提案を上げますので、それで検討していただく形になります。 　後は、シンプルなテキストデータと画像や写真をデジタルデーターでいただければよいかと思います。 　まあ、作成してもらったページを実際に、様々な端末やブラウザで表示させて、(ナビゲーションなどの)使用感=欲しい情報がすぐ得られるかとかをチェックすればよいかと思います。この世界、ものすごく腕の差がる世界です。一社ではなく数社に検討させて、しっかりしたプレゼンテーションを受けることが肝要かと思います。 　 　 　
<titile> → <title>
</a>
clipプロパティの値の指定方法が間違っています。 また、必ずposition:absolute;と併用しなければなりません。 現在ウェブ標準は、CSS2.1です。この部分は、CSS2からまったく変更されています。 Visual effects ( http://www.w3.org/TR/1998/REC-CSS2-19980512/visu … ) ↓変更 Visual effects ( http://www.w3.org/TR/CSS2/visufx.html#clipping ) ★clipの指定や、詳細度の設定は変更されていますから注意!! 　さて、本題ですが、リンクに対してユーザーの動作によって画像を変更する場合は、clipではなくbackground-positionを使うほうが一般的で、HTMLの意味的にも良いでしょう。 　すなわち、この場合はナビゲーションですからHTMLは、 <div class="nav"> 　<ul> 　　<li><a href="../"><span style="background-image:url(./image/btn001.png);">トップ</span></a></li> 　　<li><a href="./profile"><span style="background-image:url(./image/btn002.png);">自己紹介</span></a></li> 　</ul> </div> とかになるはずです。そしてスタイルシートは div.nav ul,div.nav ul li{display:block;list-style:none;margin:0;padding:0;} div.nav ul li{width:50px;height:25px;} div.nav ul li a{display:block;width:100%;width:100%;background-position:0 0;} div.nav ul li a:visited{background-position:0 -25px;} div.nav ul li a:hover,div.nav ul li a:focus{background-position:0 -50px;} div.nav ul li a:active{background-position:0 -75px;} div.nav ul li a span{visibility:hidden;} 具体的な例は,下記になります。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み なお、画像は添付ファイルのものを使用しました。 注)タブは、＿に置換してあります。元に戻すこと。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- div.nav ul,div.nav ul li{display:block;list-style:none;margin:0;padding:0;} div.nav ul li{width:100px;height:25px;border:solid 1px black;line-height:25px;margin:10px 0;} div.nav ul li a{display:block;width:100%;height:100%;text-decoration:none;text-align:center;} div.nav ul li a:visited{background:0 -25px no-repeat;} div.nav ul li a:hover,div.nav ul li a:focus{background-position:0 -50px;} div.nav ul li a:active{background-position:0 -75px;} div.nav ul li a span{visibility:hidden;}/* screenでは隠す */ --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<div class="nav"> ＿＿<ul> ＿＿＿<li><a href="../" style="background-image:url(./image/btn001.png);"><span>トップ</span></a></li> ＿＿＿<li><a href="./profile" style="background-image:url(./image/btn002.png);"><span>自己紹介</span></a></li> ＿＿</ul> ＿</div> </body> </html>
枠の間隔をあけるの忘れてました。 とりあえず、さまざまなウィンドウ幅に対応するようにも、しておきました。 その他、示された画像が小さくと解りにくかったのですが、出来るだけ近くしてみました。 ■は画像の場合、content:url([画像へのパス]);としてください。 　複雑なテクニックは一切ないので、検討して適当にアレンジしてみてください。 　 div.header div.nav ol,div.header div.nav ol li, div.header div.nav ul,div.header div.nav ul li{ ＿display:block;list-style:none; ＿margin:0;padding:0;line-height:30px; } div.header div.nav ol{ ＿width:95%;min-width:450px;max-width:900px; } div.header div.nav ol li{ ＿width:43%; ＿margin:10px 2% 0 2%; ＿float:left;border:solid 3px gray; } div.header div.nav ol li{margin-left:1em;} div.header div.nav ol li a{color:black;} div.header div.nav ol li:before{ ＿content:"　■";＿color:blue; } div.header div.nav ol li ul li{ ＿width:40%;height:30px;margin-top:0; ＿float:left;clear:none; ＿border:none;background-color:white; } div.header div.nav ol li ul{ ＿height:60px; ＿background-color:white;border-top:solid 1px; } div.header div.nav ol li ul li:before{ ＿content:"　・";color:red; }
そもそも、marginで何故Operaハックを使うのか疑問だけど、 ただでさえ１％程度のOperaユーザーしかいないのに、 旧Operaユーザーは切捨御免の時代（意味が違うが）・・・ 理由が明確なら、せめて最新版だけの対応は"あり"かな @media not screen and (1) { ul.piyo li { margin-bottom:10px; }}
おはようございます。 #logoに left: 0; の指定を入れてみてください。 ０の数字はもちろんお好きな数字で調整してくださいませ～ あと、要らないお世話だけど・・・ margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; これは margin:0 auto; と書くとすっきりしていいかもしれませんね！！
後半の可変とかの意味が良く分からないけど、 コンテンツの上部の両脇に画像を配置したいって事ですね？ body,h1,h2,p,ul,li{ margin:0; padding:0;} body,#header,#contens{ background-color: white;} #AA { width:900px; /* ←BBの絵の画像の幅と同じに */ margin:0 auto; padding-bottom:1em; background: url(黄色画像.gif) repeat-y; } #BB { background: url(絵の画像.gif) no-repeat; /* ↓↓ BBの画像に合わせheader,contensの位置調整 */ padding: 40px 0 20px 150px; } つまり、 <body> <div id="AA"> <div id="BB"> <div id="header">　～　～ bodyに上げても良いが、狭くすると黄色画像がズレるから その対策をすれば、bodyに配置する方法でも良い。 画像は、両方とも透過gifを利用し、 AAの黄色画像とBBの絵の画像の黄色い部分の左からの座標と、 黄色い部分の幅は同じにする事。 -------------------- ＞このIMGのheightを2500pxほどの大きな画像にして配置していました。 そんなアホな事をしてはいけませんｗ
＞div の中に div で出来ると思ったんですが違いますか？ 　いえ、レイアウトのためにHTMLを書こうとすると失敗します。HTMLはあくまで、文書の(意味的)な構造をマークアップするためのものです、divも、 「DIV要素・略・は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 画像とその説明がいくつか並んでいるようですから、マークアップは <ol class="process"> 　<li><img src="[URL]" width="[サイズ]" heught="[サイズ]" alt="画像の言葉での説明"> 　　　<ul> 　　　　<li>説明文</li> 　　　</ul> 　</li> 　<li><img src="[URL]" width="[サイズ]" heught="[サイズ]" alt="画像の言葉での説明"> 　　　<ul> 　　　　<li>説明文</li> 　　　</ul> 　</li> </ol> 　とか、 <dl class="process"> 　<dt><img src="[URL]" width="[サイズ]" heught="[サイズ]" alt="画像の言葉での説明"</dt> 　<dd>説明文</dd> 　<dt><img src="[URL]" width="[サイズ]" heught="[サイズ]" alt="画像の言葉での説明"</dt> 　<dd>説明文</dd> </dl> 　あるいは <div class="section"> 　<h3><img src="[URL]" width="[サイズ]" heught="[サイズ]" alt="画像の言葉での説明"></h3> 　<p>説明文</p> 　<h3><img src="[URL]" width="[サイズ]" heught="[サイズ]" alt="画像の言葉での説明"></h3> 　<p>説明文</p> </div> でもよいです。 　文章の意味的構造にしたがってマークアップします。それをスタイルシートを使ってレイアウトを指定していきます。 　以下のサンプルは簡単なHTMLとCSSです(３種類のマークアップとそれに対応するために複雑になっています)が、どれも見栄えは同じです。(HTMLさえ正しければ、どのようにもレイアウトできます。) ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) ★googleお勧めのLynx( http://www.google.com/support/webmasters/bin/ans … )【添付図】 でもチェックしてあります。 ※なお、タブは＿に置換してありますから、元に戻してください。 ※画像のURLやサイズや説明は適当なものに変更してください。 ※あえて詳細は説明しません。自分で調べてください。そのほうが身につくでしょう。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- *.process,div.section{ ＿width:80%;min-width:800px;margin:0 auto;display:block; } *.process li,*.process ul,*.process dt,*.process dd{ ＿list-style:none; ＿padding:0;margin:0; ＿margin-left:0; } div.section p,*.process li ul li,*.process dd{ ＿margin:0 0 0 420px; ＿line-height:1.6em; ＿text-indent:1em; } h2, *.process li, *.process dt, div.section h3{ ＿clear:left; } *.process ul li{ ＿clear:none; } *.process li img,*.process dt img,div.section img{ ＿width:410px; ＿float:left; } --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<h2>順リストでマークアップする。</h2> ＿<ol class="process"> ＿＿<li><img src="./images/RemovedKeyBoard.png" width="400" height="300" alt="まず、キーボードを外す"> ＿＿＿＿<ul> ＿＿＿＿＿<li>キーボードの上にあるカバーの左にあるキャップをめくってビスを外し、カバーを持ち上げるようにして右にずらすとカバーが外れます。</li> ＿＿＿＿＿<li>キーボードを固定しているビスが頭を出すので。そのビスを緩めてキーボードを持ち上げるとキーボードが外れます。</li> ＿＿＿＿</ul> ＿＿</li> ＿＿<li><img src="./images/RemoveKeyBoard.png" width="400" height="300" alt="キーボードを外したら"> ＿＿＿＿<ul> ＿＿＿＿＿<li>キーボードを外すとメモリーが見えます。</li> ＿＿＿＿＿<li>そのメモリーの両サイドのレバーを広げるとメモリーが起き上がりますから、そのまま引き抜きます。</li> ＿＿＿＿</ul> ＿＿</li> ＿</ol> ＿<h2>定義リストでマークアップする</h2> ＿<dl class="process"> ＿＿<dt><img src="./images/RemovedKeyBoard.png" width="400" height="300" alt="まず、キーボードを外す"></dt> ＿＿<dd>キーボードの上にあるカバーの左にあるキャップをめくってビスを外し、カバーを持ち上げるようにして右にずらすとカバーが外れます。</dd> ＿＿<dd>キーボードを固定しているビスが頭を出すので。そのビスを緩めてキーボードを持ち上げるとキーボードが外れます。</dd> ＿＿<dt><img src="./images/RemoveKeyBoard.png" width="400" height="300" alt="キーボードを外したら"></dt> ＿＿<dd>キーボードを外すとメモリーが見えます。</dd> ＿＿<dd>そのメモリーの両サイドのレバーを広げるとメモリーが起き上がりますから、そのまま引き抜きます。</dd> ＿</dl> ＿<h2>セクションでマークアップ</h2> ＿<div class="section"> ＿＿<h3><img src="./images/RemovedKeyBoard.png" width="400" height="300" alt="まず、キーボードを外す"></h3> ＿＿<p>キーボードの上にあるカバーの左にあるキャップをめくってビスを外し、カバーを持ち上げるようにして右にずらすとカバーが外れます。</p> ＿＿<p>キーボードを固定しているビスが頭を出すので。そのビスを緩めてキーボードを持ち上げるとキーボードが外れます。</p> ＿＿<h3><img src="./images/RemoveKeyBoard.png" width="400" height="300" alt="キーボードを外したら"></h3> ＿＿<p>キーボードを外すとメモリーが見えます。</p> ＿＿<p>そのメモリーの両サイドのレバーを広げるとメモリーが起き上がりますから、そのまま引き抜きます。</p> ＿</div> </body> </html>
とても簡単に出来ます。 　そのためには、前提としてHTMLが正統なものである必要があります。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/ )］より 　すなわち、HTMLはあくまで文書構造をマークアップするためのメタ言語で、どのように表示するか--プレゼンテーション---はスタイルシートに任せることが基本です。 14.1 スタイルシートの概説 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 基本的には、background-positionなどの背景指定、左右マージンはautoを使います。 ★下記で検証済みです。 Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) [下記は利用環境に合わせて調整すること] 　あとは、自身の目でよく調べて理解してください。(勉強ですから) ★背景画像が繰り返しがない一枚なのか、左右に敷き詰めてよいかで指定が変わります。 ★利用者のウィンドウ幅の80%が表示区域ですが、ウィンドウ幅に追随して最小450px,最大900pxで伸縮します。 ★ブロック要素には解りやすくするためボーダーがつけてあります。 ※タブは＿に、<pre></pre>中の半角スペースは・に置換してあります。必ず戻してください。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- html{margin:0;padding:0;background-color:black;} body{ ＿border:aqua 1px solid; ＿width:80%;min-width:450px;max-width:900px;margin:0 auto; ＿background:aqua url(./images/background/sky.jpg) 50% 0 repeat-y; } div.header,div.section,div.footer{ ＿margin:0 auto 10px auto; ＿width:80%; ＿border:solid 1px green; } p{text-indent:1em;margin:0 1em;line-height:1.6em;} div.answer{ ＿width:70%; ＿border:solid red 1px; } div.answer pre{background-color:white;padding:1em;margin:0.5em 1em;} --> ＿</style> </head> <body> ＿<div class="header"> ＿＿<h1>サンプル</h1> ＿＿<div id="abstruct"> ＿＿＿<p> ＿＿＿＿ウィンドウ中心に背景や画像を配置する。 ＿＿＿</p> ＿＿</div> ＿</div> ＿<div class="section"> ＿＿<h2>背景とブロック要素をブラウザの中央に配置するには？</h2> ＿＿<p> ＿＿＿ウインドウサイズを変更させても、背景画像とブロック要素の中心を基点として合わせておくことは、CSSだけで可能でしょうか？（添付画像参照） ＿＿</p> ＿＿<p> ＿＿＿あるいは2つのブロック要素を、中央でなく中心を基点として揃えることはできるでしょうか？ ＿＿</p> ＿</div> ＿<div class="section answer"> ＿＿<h2>背景の指定はbackground-position、ブロックの配置には、CSS2のサイズプロパティのautoを使います。</h2> ＿＿<pre>html{margin:0;padding:0;background-color:black;} body{ ・・border:aqua 1px solid; ・・width:80%;min-width:450px;max-width:900px; ・・margin:0 auto; ・・background:aqua url(./images/background/sky.jpg) ・・ 50% 0 repeat-y; } div.header,div.section,div.footer{ ・・margin:0 auto 10px auto; ・・width:80%; ・・border:solid 1px green; } p{text-indent:1em;margin:0 1em;line-height:1.6em;} div.answer{ ・・width:70%; ・・border:solid red 1px; } div.answer pre{ ・・background-color:white;padding:1em; ・・margin:0.5em 1em; }</pre> ＿</div> ＿<div class="footer"> ＿＿<h2>文書情報</h2> ＿</div> </body> </html>
SEO的に考えれば、Frame / iFrameは全滅です。 外部サイトを読み込むような目的ではアリでしょうが、インターネットサイトで検索エンジンを無視するようなそのような実装は、10年前から行われていません。 （SEOを一切考えない、イントラネット的なサイトならFrameを使用しても構いません） 共通ヘッダ/フッタなどの実現は、 ■サーバサイドを使う場合 ・CGIやphpなどの「インクルード」や「レイアウト」機能で、サイト全体ごと構造化します。 ・Frameをサーバサイドで実行するような感じです。 ■クライアント側だけで行う場合 ・手っ取り早いのは、DreamweaverやExpressionのようなWebデザイン・サイト構築ツールを使い、「ダイナミックWebテンプレート」とか「ライブラリ」などの機能で自動構築する方法です。 後々共通部分を変更しても、自動で全ページ反映されますし、デザイン中も正確にプレビューできるので、こちらのほうが一般的でしょう。 （てかそのためにWebデザイン・サイト構築ツールを使っている？）
W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … )でチェックする。 　その前に、上記サイトにも書かれていますが 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから メモ: CSSスタイルシートを意図した通りに機能させるには、正しい文書解析木が必要です。つまり、正当なHTMLを用いるべきです。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［W3C CSS 検証サービス( http://jigsaw.w3.org/css-validator/#validate_by_ … )］より HTML自体をチェックすることも必要です。 ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★The W3C Markup Validation Service ( http://validator.w3.org/#validate_by_input ) 　HTMLが正しくない場合、ブラウザは何とか表示しようと拡大解釈をします。その処理はブラウザによって異なります。HTML5ではエラー処理の方法も定められているのでいすが・・（その拡大解釈の差が、異なったDOMを形成するため、スタイルが適用されない。) 　
回答がないみたいなので… ＞自動でフェードインアウトしながら画像が切り替わる ＞スライドを作る方法を教えて下さい 原理的にはパラパラアニメみたいにして、少しずつ違う画像を表示してゆくことで実現可能です。 大抵はjavascriptなどを利用しています。（フラッシュでも可能） ご提示のソースでもスクリプトを利用している様なので、javascriptでよいものと仮定して… フェードイン/アウトの場合は、画像はそのままで透明度を少しずつ操作してあげればよろしいかと。 基本的な考え方はこんな感じでしょうか。 http://javascript.eweb-design.com/0814_fio.html 上記はIE専用なので、クロスブラウザにするとこんな感じ。 http://oshiete.goo.ne.jp/qa/5632833.html 便利なライブラリがいろいろ出来ていますので、そのようなものを利用すればもっと簡単になります。 （jQuery利用の例） http://oshiete.goo.ne.jp/qa/6003230.html 「フェードイン　javascript」などをキーに検索すればたくさんのライブラリやサンプルが見つかるはずですので参考になるかと思います。
ご説明ありがとうございました。 ＞ソースはどこのページのを表示すれば良いでしょうか？ ＞一つの画面が３個にわかれているので、３個全部必要でしょうか？ そうですね、3つ全部見てみたい気はするのですが。 おそらく根本的に直さなければいけないと思います。 ちなみに、わたしはフレームでも問題ないと思います。 (すごく個人的な意見ですが＞＜) いろいろ問題が指摘されていますが(未対応ブラウザとか) 大体シェアの高いブラウザでは大丈夫ですし 難しいことしてるわけではなさそうですし(お話を聞いてる限りイラストサイトですよね？) フレームでも問題ないんじゃないかなあと。 ただ、3分割より2分割の方が良い気はするんですけど。。 ちなみにわたしもイラストサイトをやっていますが、がっつりフレームです！ フレームの問題点は知っていますが、 ああいうサイトはフレームだと見やすいし楽なんですよね。笑 (各ブラウザでの動作確認はしてます) わたしはHTMLとか全く分からなかったんですが 自分で勉強して、今では自分の好きな様にサイトが作れるようになりました。 ORUKA1951さんが仰っている様に、他の人が書いたソースを直すのは大変です。 まずは簡単にHTMLの概要とか調べて、 あとはHTMLを説明してるサイトとかたくさんありますので そこを参考に自分でなおすか、もう1から新しく作り直した方が 良いんじゃないかと思いました。
>テキストを中央にして、 >abcdeと図の間を１文字分くらい { vertical-align: middle; list-style-position: outside; padding-left: 1em; } 未検証です。
ol li { list-style-type: decimal; } これを追加でどうでしょうか。
こんにちは。 同じような動作を行わせるのは、Flashを使わずとも、jQueryにて実現可能ですが、 自分の希望の動きをさせるには、少なからずJavaScriptをいじる必要があるので、多少知識は必要になります。 それでも、Flashで作るよりは、楽だとは思いますよ。 参考URL：http://black-flag.net/jquery/20110907-3446.html
<div id="navi"> <ul> <li><a href="toiawase.html">問い合わせ</a></li> <li><a href="accsess.html">アクセス</a></li> <li><a href="top.html">TOP</a></li> </ul> </div> 上の構造を日本語でいうと、 naviっていう名前の塊の中に、箇条書きリストが3行あります。 ということです。 で、上手くいかなかった ul#navi li ｛は nabiっていう名前のulの中の、liに対する指定です。 cssでスペースがなくクラスやアイディを指定すると、「～という名のdiv（この場合）」 半角スペースを空けてclassやidを指定すると「divの中の～という名前の」という指定になります。 #navi ul li{ 意味：naviと名前のついた要素の中にあるのulの中にあるｌi で指定すると今、見せていただいているhtmlに作用します。 ul#navi li { 意味：naviと名前のついたulの中にあるli を固持したければ、 <ul id="navi"> <li><a href="toiawase.html">問い合わせ</a></li> <li><a href="accsess.html">アクセス</a></li> <li><a href="top.html">TOP</a></li> </ul> のようにhtmlを変えます。（本質的にはhtmlが主でｃｓｓが従ですので、htmlはデザインの都合で変えるべきではありません。が説明の便宜上です。） 頭のulを取ったら出来ました。 #navi li naviという名前のついた要素の中にあるli への指定となりますので、当てはまったのです。さっきはnaviという名前のついたulと指定していたのにnaviと名前をつけたのはdivだったのではまらなかったというわけです。 また、ulを入れずに進めても問題ないでしょうか？ 本来「id」はたった1つのものです。idが1つあることでその場所は特定できるはずです。今現在、思い通りの作用が出来ているなら、問題ありません。 おまけ 将来は問題が出てくるかもしれません。まずは、上述のことを抑えられてからでないと、次には進めないと思いますが一応。 例 <div id="navi"> <ul id="mainnavi"> <li><a href="toiawase.html">問い合わせ</a></li> <li><a href="accsess.html">アクセス</a></li> <li><a href="top.html">TOP</a></li> </ul> </div> #mainnavi li{color:blue;} #navi li{color:red;} 実際に表示されるのはredです。 ul#mainnavi li{color:blue;} #navi li{color:red;} 実際に表示されるのはblueです。 このあたりは詳細度、とかかわってきます。
td * {vertical-align:middle;}で P要素と A要素に vertical-align:middleが適用されますが、 td * {vertical-align:middle;} td a {vertical-align:baseline;}/* 追加 */ とし、A要素の指定のみを baselineに変えたところ、IE6でのガタつきがなくなり、表示位置も変わりませんでした。（IETester） 実際の環境でお試しください。
すみません、いい忘れてました。 簡単なやり方では、 段組みをする部分の外側に<div style="width: 1100px">などと付け加えるか、 IE6を考慮しなくていいなら、<body style="width:1100px">としてください。 <div style="width:1100px"> <div style="float:left;width:800px;">カレンダー</div> <div style="width:300px;">「ガクスケ」が云々</div> </div> marginやpaddingがあれば（無指定の場合はブラウザごとのデフォルトマージンがつく事もあります） それもwidthに加えてみてください。 position:absolute | relative の方法もありますが、これは定型的（典型的）なやり方がないと思いますので割愛。 （私的にはpositionの方法を推奨しますが。。。）
普通の画像アップロード型の掲示板のCGIを利用するのが簡単です。 本来の投稿フォームを、変更も可能にすれば良いでしょう。 一アーティクルのみ表示かな・・ 高度になるかもしれませんが、ファイル名は拡張子なしのものにしておいて、サーバーの設定(.htaccess)で、そのファイルをCGIとして動作させると良いでしょう。DIRECTRY INDEXでそのファイル名を指定しておくと、あたかも別のHTMLが存在するように見せられる。 例] 　/service がCGI 　要求が、/service/menue/wine.html なら、データファイルmenue.csvなどから、該当する行wine:の行のデータを整形して出力する。 　いくつかCGIを作成したあとなら比較的簡単に作れるでしょう。 ※ウェブサイトを製作運営するようになるとHPは意味が通じなくて混乱します。 　たぶん、HOME PAGEの略だと思いますが、HPは世界的にはヒューレッドパッカードの略称です。home のホームは、中学校の英語ですが、元もとの意味は故郷・出発点と言う意味で、ハウス(家)と言う意味は少ないです。野球のホームベース、キーボードのホームポジション、ゴー!ホーム(田舎へ引っ込んでろ)、ホムースイートホーム(懐かしい故郷)・・・ 　ブラウザを起動したときに最初に表示されるページがホームページです。それから派出して、あるウェブサイトのトップページをホームページと言いますが、そこまでで・・・ 　サイト全体をホームページといったら意味が通じませんし、「ホームページを作成」というと、トップページのことなのかと思う。悪名高き某オーサリングツールの名称に由来しているのかとも思いますが・・(日本だけの名称でアメリカでは違う名前で販売されていた) 　サイト運営の立場になると、 「ウェブサイトのトップページを作る」「ウェブサイトを作る」と、他人も自分にも意味が通じるようにしないと混乱してきます。 　今回の質問は、 「ウェブサイトにHTMLを知らない人もブログや掲示板のように簡単に写真や記事を投稿するだけで、ページを作成・管理する方法はありませんか?」 　と言う意味だと想像してお答えしました。
その質問は、カテ違いですね・・・ -------------------- ご存知の通り、サイト力をアップして下さい。 最近は、 小規模サイトでも１位になれば表示される事があります。 http:からはじまるURLで検索すると自社サイトが表示されるかもしれませんよ。 正しいグローバルメニュー構造で制作し、内外部から被リンクを頂き、 Googleで上位検索されクリックされるような内容のサイトや各ページを作る事です。 サイトリンクが今現在表示されないのは、 トップにするには値しないという事・・・　評価は厳しいって事です。 Googleは、 ウェブマスターの為にサイトリンクを設置してくれているのではなく、 あくまで、ユーザーの為に便利な案内をしてくれてるのですから、恩恵を頂きましょう。 Yahoo!Japan ＝ Google検索です。
やりたいことはこういうことでしょうか？ ul{ list-style-type:none; } li{padding-top:1px;} a{ text-decoration:none; } li a{ display:block;/*（1）ブロック要素のように表示させます。*/ border:1px solid green;/*（2）ショートハンドにしました。*/ border-top:1px solid red;/*（3）トップだけ色を変えました。*/ margin-top:4px; width:8em; } li a:hover{/*（4）変えたいことだけ書く*/ margin-top:0; border-top-width:5px; } (1) お見せいただいたｃｓｓはa要素がインライン要素となっています（初期値）。インライン要素ではおっしゃっているようには表示されませんのでブロックにしました。初心者は把握していないことが多いのですが、インラインとブロックでは表示に大きな違いが出ます。インラインは行中に入る要素で、高さや幅が持てません。ブロックは改行を前後に含む箱で指定しなければ、横幅を100％で取ります。cssを学ぶなら、最初に抑えておくべき項目です。 また、ご質問の罫線の上や下やコンテンツとの空きも、ブロック言い換えればボックスモデルを理解する必要があります。こちらは図で見たほうがわかりやすいので「ボックスモデル」で画像検索！また、ボックスモデルは「文書宣言」によって解釈を変えます。今回は標準モードでの解釈で記述しています。互換（過去互換）モードの場合は崩れますので、ご注意ください。 （2） 同じプロパティの指定は1つずつ書かなくても、一括で指定することができます。罫線のほか、marginやpaddingにもよく使われます。「ショートハンド」で検索！ （3）ｃｓｓは同じ条件で記述する場合、後述したもので上書きされます。この場合、上の行で全体を緑と指定していますが、ここでは、上だけを赤に指定しなおしています。 (4) 親要素の指定が子要素に「継承」されます。同じことを何度も書く必要はありません。この「継承」もｃｓｓを学ぶ上では大切です。親子関係を把握して、変更したいプロパティだけ記述します。
ここでは、ソースを提示して質問した方が正しく解決できるでしょう。 #1さんの詳細度（CSS）が分からなければ、 アンカーに直接classを付与してimportant指定するしかないです。 a.trans:hover{background-color:Transparent !important;} <a href="#" class="trans"><img /></a>
<img> <form>～</form> <img> 　これは、そもそもHTML的におかしいのでは？？？ <img>はインライン要素ですから、<from>というより、なにか間にブロック要素があれば、この<img>は、仮想ブロック要素に入っているとみなします。 　このあたりは、HTML5で、ブラウザがDOMをどのように解釈するかも定められたために、そのようなことが起きるのではないでしょうか？。今回のウェブ標準HTML5には、HTMLだけでなくCSS,DOMなども含まれます。 　HTML5とHTML4.01strictに大きな差があるわけではありません。圧倒的に資料が豊富なHTML4.01で作成して、Anothe HTML lintやHTML Validator、CSS Validatorを使ったほうが効率的です。 <body> 　<div class="header"> 　　<h1>見出し</h1> 　　<div class="section abstract"> 　　　<h2>要約</h3> 　　</div> 　</div> 　<div class="article"> 　　<div class="section"> 　　　<h2>見出し</h2> 　　　<div class="section"> 　　　　<h3>見出し</h3> 　　　　<p></p> 　　　　<div class="aside"> とか・・・。そのままHTML5だと <body> 　<header> 　　<h1>見出し</h1> 　　<section class="abstract"> 　　　<h2>要約</h3> 　　</section> 　</div> 　<article> 　　<section> 　　　<h2>見出し</h2> 　　　<section> 　　　　<h3>見出し</h3> 　　　　<p></p> 　　　　<aside> と変更すればよい。 <img>に隙間があいて・・・ということは、ひょっとして文字を画像に置き換えて（文字の代わりに画像で）表示しているとかで「ウェブ標準」とは異なるのではないかと・・ 　たとえばナビゲーションでしたらHTML5だと <nav> 　<ol> 　　<li><a href=""></a></li> 　　<li><a href=""></a></li> としておく。HTML4だと <div class="nav"> 　<ol> 　　<li><a href=""></a></li> 　　<li><a href=""></a></li> 　これをスタイルシートで、 nav ol,nav ol li{display:block;list-style:none;margin:0;padding:0;} nav ol{width:400px;height:100px;position:relative;} nav ol li{float:left;width:100px;line-height:100px;} nav ol li a{display:block;width:100%;height:100%;} div.nav ol,div.nav ol li{display:block;list-style:none;margin:0;padding:0;} div.nav ol{width:400px;height:100px;position:relative;} div.nav ol li{float:left;width:100px;line-height:100px;} div.nav ol li a{display:block;width:100%;height:100%;} で、隙間無く並べられるはず・・。 HTML5で目指しているのは、上っ面だけじゃない。このようなHTMLとCSSのすみわけも大事なのです。HTML4.01も実はそうだったけど、守られなかった。DIVのIDやclass名も 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから DIV要素とSPAN要素は、id属性及び class属性と併用することで、文書に構造を付加するための一般機構を提供する。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［The global structure of an HTML document (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　と書かれているのに、構造を示す(header,section,footer,asideなどの)名称をつける人は少なかった!!!! ＞地道に隙間の巾を計ってスタイルシートで調整するしかなさそうですね。 　こんなことしなくてもよいはずです。根本的な部分を誤解されているから、大変な作業になってしまう。 　HTMLでは文書構造をマークアップすることに専念し、配置は考えない。HTMLが文書構造にしたがってきちんとマークアップされていれば、小細工しなくても期待通りにレイアウトできるはずです。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから スタイルシートはこれらの問題を解決すると同時に、HTMLにおける制限されたプレゼンテーション機構に取ってかわる。スタイルシートでは、行間の設定やインデントの設定、テキスト色や背景色、フォントのサイズとスタイル、その他様々なプロパティの設定が簡単にできる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Style Sheets in HTML documents (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　 　
いやいや。Unixのファイルシステムでも、別に空白だの日本語だの含んだディレクトリもファイルも昔っから作れましたよ。 ただ、日本語一文字を「一文字」として解釈してくれなくて、いわゆる「ダメ文字」問題が発生したりしましたが。 最近ではUnicodeを使ったりして問題無いものもあります。 ただ、 ・常にどこでも使えるか、はわからない。サーバーマシンに依存する ・URLに日本語を入れても、それをhttpサーバーがファイル名やディレクトリ名として正常に判断できるかわからない。・文字コードをちゃんと判定して正しく変換してくれるかわからない。多分、サーバーの作りに依存する ということから、使わないのが無難だと思います。
<small>要素は、非置換インライン要素に分類されます。smallのサイズは文字数のままですので、文字幅いっぱいの幅の中では「どうあがいても、右にも左にも寄れません。 　smallで囲んだ部分を、デザイン上別の場所に表示したい場合・・・たとえば、header内のh1要素におけるsmallを下に表示したいとかの場合・・ <body> 　<div class="header"> 　　<h1><small>私の</small>著書紹介</h1> 　　・・・・ というHTMLに対して、 div.header h1{margin-top:30px;position:relative;} div.header h1 small{ display:block;width:10em;position:absolute;top:-25px;left:10px;background-color:yellow;text-align:right;} 詳しくは、 テキスト ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) でも、通常はこんな無理はしません。そもそも、HTMLが文書構造にしたがって正しくマークアップされているとは思えません。 　smallは、「小さいフォントで表示する(HTML4.01)」要素でしたが、 15.2.1 フォントスタイル要素: TT、I、B、 BIG、 SMALL、 STRIKE、S、及びU要素 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) この様なプレゼンテーションのためだけの要素は、HTMLの趣旨に反するため、HTML5では、 「small 要素は、補足事項などの細字部分を表すようになりました。」 3.3. 変更された要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　HTML自体をまず見直してください。
#colum3 { display:none; }的な処理では？
　まあ、必要も無いのに複雑にする必要もありませんし・・・。 HTML5の設計において、指針が公表されています。 HTML Design Principles ( http://www.w3.org/TR/html-design-principles/#avo … ) 　HTML5の設計指針です。 まあ、 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 4.2. Avoid Needless Complexity Simple solutions are preferred to complex ones, when possible. Simpler features are easier for user agents to implement, more likely to be interoperable, and easier for authors to understand. But this should not be used as an excuse to avoid satisfying the other principles. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［HTML Design Principles( http://www.w3.org/TR/html-design-principles/#avo … )］より [訳すと] 4.2. 不必要な複雑さを避ける。 　出来るだけ簡潔なほうが、複雑なものより好まれます。単純な仕組みは、相互運用性も高く、制作者も理解しやすくなるでしょうし、ユーザエージェントの動作も軽快になるでしょう。ただし、これは他の原則を逃れるための言い訳として使われてはならない。 　HTMLをつかってウェブサイトを作成するときも、同様の考え方で良いと思います。オーサリングツールを使わず、テキストエディタで作成すればこそのことですね。ツールを使えば、どうしても煩雑で解りづらいソースになる。 　このHTML Design Principles ( http://www.w3.org/TR/html-design-principles/#avo … )のHTMLなんてシンプルですよ。
swfの最後のフレームで（アニメーションが終了したときに）、以下のスクリプトを実行してください。 ・AS3 var url:URLRequest = new URLRequest( "http://exaple.com/" ); navigateToURL( url , "_self" ); ・AS2 getURL( "http://example.com/" , "_self" ); _selfの制限について。 http://livedocs.adobe.com/flash/9.0_jp/main/wwhe … http://mtw.cocotte.jp/blog/diary/html/2009/10/29 … ImageReadyでActionScriptが使えなければ、Flashを購入するか、ASが使える互換ソフトを購入してください。 でなければ、No.1に書かれているような方法か、 JavaScriptでアニメーションが終わりそうなタイミングを見計らってlocationを変更するしかないと思います。 swfの読み込みやアニメーション開始、終了のタイミングはブラウザやJavaScriptで調べる事はできないと思います。 （window.onloadは、プラグインの読み込みとは基本的に無関係ですから。） アニメーションGIFにしてJavaScriptでプリロード、onload後に表示、アニメーション開始にすれば、終了時間も正確にできるかもです。。。
background-repeat:no-repeat; リピートするのが正しい表示？　削除するとどう？ background-position: 50% 100%; って事なんだけど。 CSSに重複した同じ指定があるかも？ 同じCSSファイル内や別のCSSファイル、またはbodyに直接書いてあるとか。 Float関係でclearになっていないとか。 （画像を無しにした場合、背景色は全面表示される？）
いわゆる「webフォント」と呼ばれる技術です。この回答欄で詳細を解説するには文字数が足りないので… ＞http://blog.petitboys.com/archives/webfonts-over … 上記webサイトの解説などを参考にしてみて下さい。 ただし結局は各個人個人の使っているブラウザが対応していないと、何の変化も起きませんので。その点は注意してページを作る必要があります。自分のPC上では良く見えていても、大多数の人から見た場合には段組など表示が崩れて目茶目茶になっていた…！～と言う話は良くある事ですので。 現在はまだまだ発展途上中のweb技術だという認識を持って置いて下さい。 ◆WOFF (Web Open Font Farmat):: ＞https://developer.mozilla.org/ja/CSS/@font-face その他にも、自前サーバにフォント置かなくても、Googleの公開サーバからフォントを借りてこれるサービスもあります。 ◆Google Web Fonts:: ＞http://www.google.com/webfonts#ChoosePlace:select P.S. 検索する時のキーワードは、「web フォント サーバサイド」で行うと良いでしょう（Google検索の場合）。
とても簡単な見本です。下記のようなイメージで作成してあります。 ・表示サイズは、ウィンドウの80%、 　(IE6以降) 　　ただしi-pad用に450pxより小さくはならない 　　最大でも900px以上広がらない ・ウィンドウの中心に配置(IE6以降) ・画像サイズはウィンドウ幅に合わせて可変とする。 ★常に画像縦サイズより説明文の高さが短いことを想定する。 ・screen以外の端末に対してはスタイルシートを適用しない。 ★＿はタブに戻すこと。 ★HTML5の場合、DOCTYPE、および<div class="article"></div>を<article></article>のように変える。 [検証]※No.2のHTMLから少し変更しています。 　Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) 　W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) [ブラウザ] 　Lynx 　IE5～10--IEtesterによる。 　Opera,firefox,safari <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css" media="screen"> <!-- html,body{margin:0;padding:0;background-color:gray;} div{background-color:white;border:solid 1px white;} div.header h1{text-align:center;} div.header div.abstract{ ＿width:80%;margin:1em auto; ＿border:dotted gray 1px; ＿padding:1ex 1em; } div.article{ ＿width:80%;min-width:450px;max-width:900px;margin:0 auto; } div.section ol.processChart, div.section ol.processChart ul, div.section ol.processChart li{ ＿display:block;list-style:none;margin:0;padding:0; } div.section ol.processChart li{ ＿position:relative; } div.section ol.processChart li ul{ ＿position:absolute; ＿width:50%;margin:10px; ＿top:0;right:0; } div.section ol.processChart li ul li{ ＿text-indent:1em; ＿line-height:1.6em; } div.section ol.processChart li img{ ＿display:block; ＿width:45%; ＿height:auto; ＿min-width:100px; ＿margin: 5px; } --> ＿</style> </head> <body> ＿<div class="article"> ＿＿<div class="header"> ＿＿＿<h1>パソコン(BIBLO NE12A)の分解</h1><!-- タイトル --> ＿＿＿<div class="abstract" id="abstract"> ＿＿＿＿<h2>愛用のパソコンを分解したみた。</h2> ＿＿＿＿<p> ＿＿＿＿＿私の愛用のノートパソコンの中古機をインターネットオークションで手に入れたので、部品取りと修理のために分解してみました。その経過を記録したものです。 ＿＿＿＿</p> ＿＿＿</div> ＿＿</div> ＿＿<div class="section"> ＿＿＿<ol id="step" class="processChart"> ＿＿＿＿<li id="KeyBord"><img src="./images/topBis.png" width="400" height="310" alt="スイッチパネル固定ビスを外す。"> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>ゴムキャップをめくってビスを緩める。</li> ＿＿＿＿＿＿<li>スイッチパネルの左にあるゴムのキャップをめくるとビスがありますので、２番のプラスドライバーで緩めます。</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li><img src="./images/SwCover.png" width="400" height="310" alt="スイッチパネルを左にずらして外す"> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li>スイッチパネルを左方向へスライドさせるとカバーが外れます。</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿＿<li><img src="./images/RemoveKeyBoard.png" width="400" height="299" alt="ゆっくり持ち上げて粘着テープをはがす。"> ＿＿＿＿＿<ul> ＿＿＿＿＿＿<li> ＿＿＿＿＿＿＿めくったゴムキャップと、スイッチパネルの右端を持って左にずらすとスイッチパネルが外れます。図の下の赤丸で示したビスはキーボードとヒンジカバーを固定するビスです。 ＿＿＿＿＿＿</li> ＿＿＿＿＿</ul> ＿＿＿＿</li> ＿＿＿</ol> ＿＿</div> ＿</div> </body> </html>
十年前は本当によく見かけたバナーですが、最近はめっきり見なくなりましたね。 「文字を画像に置き換えて表示する」ことが否定されて久しく、やっとその考え方が普及してきたからでしょう。　 　14.1 スタイルシートの概説 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )より 　基本的にバナーの一般的サイズは、W88×H31が一般的でしょう。W3Cもこのサイズをよく使っています。 　それ以外は、背景画像として都度製作しています。
　初心者でしたら、ルートからの絶対パスは忘れてください。確かに便利なのですが、ローカルにHTTPサーバーが無い限り機能しません。 [便利な面]UNIXでは、ドライブと言うものはなくて、すべて/(ルート(根っこ))からのディレクトリやファイルになります。(プリンターだってファイルとして扱われる) 　その際に、どの位置に実際にファイルやディレクトリ(Windowsのフォルダー)があるかと、それへのパスは必ずしも一致していない。これはWindowsでも同じで、マイドキュメントフォルダーは\マイドキュメントにあるように見えますが、実際にはどこにあってもよいでしょ。たとえばC:\Document and settings\user名\My Documentとか、D:\Documentとか。 　エイリアス(別名)、ショーツカット(近道)、マウント(割り当て)などの仕組みがある。 　すみません。頭が痛くなる話で・・ 　ローカルにサーバーと同じようなHTTPサーバーがインストールされていれば、http://locla.host/ というものをルートとして、具体的にはその位置はD:\Web1\に設定したりします。そうすると、パスを /css　としただけで、実際には　D:\Web1\css内を探してくれますが、サーバーが無い場合は、file:///D:\css を探してしまいます。 　この様な理由で、現在HTTPサーバーをインストールされていない限りは、相対パスで指定するしか方法はありません。 　ちなみに私は、G:\usr\locla\apache　にHTTPサーバーをインストールして、 http://local.nifty/ で、G:\user\web\nifty http://local.hoge/ ゛て、G:\user\web\hoge がそれぞれルートになるように設定していたりします。すべてのテストがローカルで出来るようにね。 　でも、これは趣味でサイトを作っている間は不要です。
＞HTML５に切り替えるべきとの事でしょうか？ 　いいえ、その必要はありません。HTML2.0もHTML3.2もHTML4.01もなくなりません。HTML4.01が勧告(1999年12月24日になって、やっと今頃(10年以上)になって、完全にHTML4.01strictが使われるようになった。 ★実はHTML4.01でも、非推奨と推奨の区別があって、著者は推奨(strict)をブラウザは非推奨(Transitional)をサポートしなければならないという意味があったのですが、現実にはTransitionalばかりでした。XHTML1.0にも残っていましたが、XHTML1.1はstrictのみでした。(XHTML1.0はHTML4.01と同じもの) 　まあ、仕様書の書き方も遠慮がちだったため、無理もないのですが・・ 　HTML5は、明確に「著者が使えるもの」「ブラウザが対応しなければならないもの」と区別されていますから、新しい要素や意味の変わった要素を除けば、HTML4.01とほとんど変わっていません。 　その意味では、資料の豊富なHTML4.01strictがお勧めかもしれません。XHTML--XML--仕様のXHTML5もあります。他のプログラムでXMLとして利用したい場合は、XHTML5のほうがよいかもしれません。 　HTML4.01strictで作成する場合も、先に示したように <body> 　<div class="article"> 　　<div class="header"> 　　</div> 　　<div class="section"> 　　　<h1></h1> 　　　<p></p> 　　　<div class="section"> 　　　</div> 　　　<div class="aside"> 　　　</div> 　　</div> 　　<div class="footer"> 　　</div> 　</div> </body> 　に書くようにすれば良いです。HTML4.01strictをマスターしていれば、 HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) 　だけ補習すれば事は足ります。(^^) 　私は、最近のサイトは、このようにきちんと意味のある(セマンティック)class名をつけてマークアップしています。これって、あとからHTMLはもとよりCSSを修正するときも、とっても楽です。・・・ということは検索エンジンも楽してるということ・・・ 　どのように表示するかは、「一切考えない」で、ひたすら文書構造をマークアップするようにしています。「一切考えない」でと言うと、そんなこと無理だと言われますが、この意味は、もし「この様なデザインしたい」というアイデアがあるということは、その部分が文書構造上も必ず意味のあるひとつの要素であるはずですから、文書構造にしたがってマークアップすることに繫がるのです。 　たとえば、ある一塊の文章を、そのセクションの右脇に小さく表示したいという希望があるのでしたら、それはその文書中でfigure(挿絵のような要素をあらわすHTML5のタグ)なものですから <div class="section"> 　・・・文章・・・ 　<div class="figure"> 　　脚注 　</div> </div> 　とマークアップされているはずです。もしそのようにマークアップされていれば、将来左に表示したくなったって、CSSだけ見て書き直せます。 　<strong>オーサリングツールの一番の弱点は、その文書の内容を読み取って、それが文書の中でどのような構成要素であるかを判断できないことなのです。</strong>ここは大事なところだから・・なんて機械には無理です。結局、著者なり読解力のあるウェブデザイナーがマークアップするしかない。機械に任せておけば、id="container1"とかになってしまう。 　それが、プロがテキストエディタに回帰している一番の理由かと・・・ 　 　
これは、その会社によります。 私は前職フォトグラファーでしたが、その時のグラフィック関係の仕事もWindowsがメインでした。また、WEB制作会社にいた時も、大半の人はWindowsで、Macは動作確認用に一部あるのみでした。グラフィックならMacというのは紙媒体の仕事に限られると思います。MACのほうが殆どの印刷会社の設備と親和性が高かったからで、WEB制作ではそういうメリットはありません。 WEBやグラフィックの作業で必要になるアドビ系のソフトはWindowsだろうとMacだろうと操作方法は殆ど同じです。使いこなせればどちらでもできることはほぼ同じなので、その人がどっちの扱いに慣れているかが重要だと思います。 Webデザインを専門にやるからと言ってそれ以外の作業が無いわけではありません。作業をしながらWebで調べものもすると思いますし、エディタも使うでしょう。自分に合った細かなフリーウェアを探したり、インストール・アンインストールすることになると思います。調子が悪くなったときに原因特定したり、トラブルに対処することもあると思います。 そういう時に効率的に使えるのは単純に長く使って親しんでいるほう。または職場や先輩など、自分の周りで使っている人が多くてアドバイスを求めやすいほうだと思います。Macで作業をする人は、Macのほうが便利だからというよりMacの操作に長けているからだし、Windowsも然りです。 質問者さんが慣れてるほうをオススメします。 ただ、どのPCやブラウザでも破綻なく表示できるように動作確認するために、どっちも必要です。シェアからすれば、閲覧する一般消費者はWindowsユーザーが9割なのでWindowsが無難です。特にシェアの高いブラウザはWindowsのInternet Explorerで、シェアが高いクセに動作にクセがあり、しっかりチェックしながら制作しないとIEでマトモに見れるページは作れません。その点だけでも、Windowsは必要ですよ。
これ普通にjavascriptを利用したLightboxだよね。
新しい空っぽのデータベースでやり直すという事ですかね。 接続先のデータベースの名前を変えるのであれば、 wp-config.php で定義している定数 DB_NAME の値を 変更してみてください。 // ** MySQL 設定 - こちらの情報はホスティング先から入手してください。 ** // /** WordPress のためのデータベース名 */ define('DB_NAME', 'ここを新しいデータベース名に');
　携帯電話のブラウザは種類が多く無理ですから、普通にウェブ標準で製作してページ内リンクで移動するほうが確実です。
CSSで *{ margin:0; padding:0; } としてみては・・・？ 直るかわかりませんが・・・＾＾；
常にValidatorでチェックしていればよい。 Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) だと、エラーの詳細、対処方法なども表示されます。 　「大変よく出来ました」でなくとも「よく出来ました」くらいにすれば、身につく ＞エラーがあるとどんな支障があるのでしょうか？ 　ブラウザは、たとえHTMLにエラーがあっても可能な限りエラーや不足を伴って表示しようと異なりますが、エラーの程度や内容によって表示できなかったり、ハングアップしたり、利用できなかったり様々です。 　標準でない特定のブラウザ向けの書き方の場合、他のブラウザでは期待と異なる表示になります。 　そのエラーの深刻度によって様々ですから、エラーはなくせばよいだけです。
＞考え方の問題といえば、そうかもしれませんが奥が深いです。 　そうなったら宗教になってしまう。「信じなさい」になってしまう。 　そのために仕様書があるのです。 「何が何でも、tableを使っちゃダメ」それは「こんな問題があるから」ではなくて、 『もっぱらレイアウトの目的でtableでマークアップしてはならない』 です。意味が随分と違います。 　それだけです。一言一句正確に 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから Tables should not be used purely as a means to layout document content as this may present problems when rendering to non-visual media. Additionally, when used with graphics, these tables may force users to scroll horizontally to view a table designed on a system with a larger display. To minimize these problems, authors should use style sheets to control layout rather than tables. ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［11.1 Introduction to tables( http://www.w3.org/TR/html401/struct/tables.html# … )］より 下手な翻訳ですが・・ ＿＿＿＿＿＿＿＿＿＿＿＿＿＿ここから 　非視覚的メディアがレンダリングするときに問題を起こす可能性があるため、文書をレイアウトするの目的のためだけテーブルを使わないでください。さらに、画像とともに使用すると、大きなディスプレイを搭載したシステムで設計されたテーブルをユーザーが表示するには、常に水平方向へのスクロールを強制される。これらの問題を最小限に抑えるために、著者らは、レイアウトをコントロールするため、テーブルではなくスタイルシートを使用するべきです。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで 　これはたとえ表であっても画像を含むときは、表ではなく（他のマークアップをして）スタイルシートでレイアウトを調整すべきとも読み取れますね。
>そうですね、www.のところはサブドメインのところですからね。 >「DNSの設定に問題がなければ」 >というのは何でしょうか。DNSの設定でwww.が何か関係あるのですか？ >細かいレコードの設定ができるのは知っていますが、それとこれに何の関係があるのかわかりませんでした。 >www.有りとwww.無しをリダイレクトさせてどちらかに統一させるには、htaccessでおこなってきたのでDNSの設定は何もしたことありませんでしたが www.goo.ne.jpやgoo.ne.jpがどのホストに繋がるかはDNSサーバーの設定によるものです。(DNSサーバーは主にBINDとよばれるソフトが使われます) レンタルサーバー等を使われているのだとすると意識しないかもしれません。 goo.ne.jpにリダイレクトできるのであれば、goo.ne.jpが既にDNSで設定されているということです。 逆にDNSで設定されていないドメインwww100.goo.ne.jpにはリダイレクトしても接続できないと思います。 http://www.atmarkit.co.jp/fnetwork/dnstips/034.h …
デザインを考えてHTMLを作成したらダメ。HTMLは文書構造をマークアップするものですから、それさえきちんと出来ていたら、サンプル画像の赤地部分を右上にfix、緑部分は中央とか、気が向いたとき自由に変更できるし、検索エンジンにも効果的。 <body> 　<div class="header"> 　　<h1>見出し</h1> 　　<h2><span>見出し2</span></h2> 　　<div class="abstract">要約の記事</div> 　</div> 　<div class="section"> 　　<h2>本文見出し</h2> 　</div> 　<div class="footer"> 　</div> </body> 位でよいですね。 CSSはたとえば div{margin:0;} div.header *{margin:0;background-color:blue;} div.header h2{height:100px;background-color:red;} div.header div.abstruct{padding:1ex 1em;background-color:olive;} div.section{min-height:400px;background-color:green;} div.footer{background-color:magenta;} 程度でよい、absoluteもfixedもいらないはず。 ポイント1:HTMLを作成するときデザインは考えない。HTMLは文書構造をマークアップするメタ言語 ポイント2:CSSは、それを自由にプレゼンテーションするもの、配置しようとしてもうまく出来ないときはマークアップがきちんと出来ていない。 ★横幅いっぱいのものをfixedしてしまうと、ページ内アンカーにリンクしたとき隠れてしまう。fixedすべきじゃないものをfixedしている。fixedは文章内の画像周辺に文字を回りこませるためのプロパティで、配置には特殊なとき以外使わない。 ★デザインのためにマークアップ(たとえば、無駄なidをつける)すると、継承や詳細度がうまく使えなくなる。
＞PC用のサイトから重い画像バナーを外してテキスト中心の物を転用しようかと思います。 　その必要はないのですよ。バナーをscreenにとって背景にすれば済むことです。携帯でも伝えたい画像(店内の一こま)とかは、ちゃんと画像にするが、バナーやアクセサリは背景にまわすか、スタイルシートで追加する。 　PC用のページは今以上にけばけばしく(失礼)に見せても構いませんよ。要はそれぞれの端末に適したように・・とは言っても点字用や読み上げソフト用はわざわざ書かなくてもHTMLさえしっかりしていれば、それぞれのブラウザがきちんと処理してくれる。 　必要ならi-phoneやi-pad用のスタイルシートでそれなりに、携帯電話はそれなりに見えるようにすればよいのです。 　
CSS2.1では、セレクタは単純セレクタを結合子(#, (半角スペース),>,+など)でつなぎます。 　したがって、 #boxは、*#boxとみなして処理します。この場合詳細度は[0,1,0,0]になりますね。 5.3 Universal selector ( http://www.w3.org/TR/CSS2/selector.html#universa … ) 全称セレクタはc=0なので。 　全称セレクタは詳細度がc=0なので、省略できますが、本来は書くべきです。一意セレクタ(結合子は#)は、その文書中に一箇所しか存在しませんし、詳細度がb=1なので多くの場合支障はありませんが、 p#important{color:red;} /* 詳細度[0,1,0,1] */ と #important{color:green;} /* 詳細度[0,1,0,0] と並列して書くと、順番に関係なく上記が有効となります。 　意味的に#boxは*#boxのこと[詳細度0100]であり、p#boxは要素セレクタに?がったもので詳細度は[0101]になりますね。 ★現在、標準として使用されているCSS2では、#boxは、全称セレクタ(universal selector)を省略した表し方と言う意味です。 ★逆に言うと、*#boxの*は省略できる。 ★div#boxとは意味が違う。 　本来一意セレクタなので、*をつける(あるいは省略)した場合は、同じ要素を指定しますが、タイプセレクタ(要素名のこと)をつければ詳細度を上げることができる。 　詳細度と結合子の関係はとても重要--CSSの最も根幹部分--です。プロパティより重要です。 ここからは直接関係ないですが 注) id=boxなんて通常は書かない。 　idは本来はアンカーの終点であって、スタイルシートで特定の要素を対して、特異的にスタイルを定義したいときに使いますが、詳細度が高すぎて、詳細度で上書きしにくい。 　アンカー終端ですから、id="siteMenue"のように、あとから読み直して解るものをつける。スタイルシートのためだけにIDをつけるのは初心者以外余りありませんが、それでもあとで文書のどこを示しているかわかるように命名する。 たとえばHTMLが <div class="article"> 　<div class="header"> 　　<h1>見出し</h1> 　　<div class="abstract"> 　　　<p>このページの要約でここは<strong>重要</strong></p> 　　</div> 　<div class="nav" id="pageIndwx"> 　　<ol> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　</ol> </div> <div class="section" id="section1"> 　<h2>本文見出し</h2> 　<p>ここから本文、この部分は、<strong>重要</strong>です。 </div> のように、class名を文意上意味があるものにしていたら。 strong{color:red;}/* 詳細度[0001]*/ div.header p{font-size:0.9em;}/* 詳細度[0012] */ div.section p strong{color:green;font-weight:normal;}/* 詳細度[0013] */ と、わざわざIDを振る必要はありませんし、後でメンテナンスも strong要素は{color:red;}赤字で・・・ div.headerの子孫のp段落は{font-size:0.9em;}一回り小さな文字で div.section本文の p段落内の strong{color:green;}は赤字で普通の太さで・・ 　とHTMLを見なくても指定できますし、スタイルシートのために煩雑で解りにくいHTMLを書く必要もない。HTMLもCSSもとても簡単でメンテナンスも容易になりますね。 　まあ、アンカー終点でもないのにIDをつけるのはおかしいとでも覚えて置きゃよいです。CSSカスケーディングスタイルシートですから、カスケーディングを使えば無駄なIDやclass名はいらない。そのためのCSSですからね。
テキストボックスと言うことは、<input type="text" name="namae" size="20">とかでしたら 簡単に input:focus,input:hover{bacground-color:aqua;} /* 詳細度[0,0,1,1] */ input[name="namae"]:focus, input[name="namae"]:hover{background-color:yellow;} とか、属性セレクタ、擬似クラスセレクタ使います。(詳細度は[0,0,2,1]ですから上書きされます。 　inputでも、テキストボックスだけ変更するなら input[type="text"]とか、属性セレクタ。 input + input{}(隣接セレクタ)だと、最初のもの以外(二番目以降)とか・・ Selectors ( http://www.w3.org/TR/CSS2/selector.html )
質問にbitmapとありましたが、ウェブでjpegやgif,pngが使われるのは、「画像処理が出来る端末が基本的にサポートしている」からです。bitmap(正確にはWindows Bitmap)はＯＳやソフトによって仕組みが異なるため、汎用性がないのです。 　質問に「ホームページ作成ソフトだと」とありましたが、ウェブの目的やHTML/CSSの理念を知らないと、ワードやDTPのような間隔でHTMLを作成して、ウェブ標準と程遠いものを作成してしまいます。（HTMLを知らなくてもホームページがつくれる）というのは大嘘です。(^^) 　オーサリングツールを使うためには、テキストエディタで作成する人以上に、HTMLのことを理解していないとなりません。 　HTMLエディタ ( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … )以降を参考に!!
floatは、ブロック内のデータを回り込ませますが、コンテナブロックが小さいとはみ出ます。 　この場合、floatを使わないほうがよい。これなら、absoluteのほうが確実です。 　そもそもHTMLが無茶苦茶です。ul内にa要素は入りません。HTML5ではなく、「HTML4.01の困った見本」になっています。 <body> 　<section> 　　<header> 　　　<h1>見出し</h1><!-- ロゴは背景画像で --> 　　　<p>こんな会社</p><!-- バナーも背景に --> 　　　<nav id="menu"> 　　　　<ul> 　　　　　<li><a href="index.html"><span>ホーム</span></a></li> 　　　　　<li><a href="news.html"><span>ニュース</span></a></li> 　　　　　<li><a href="access.html"><span>アクセス</span></a></li> 　　　　　<li><a href="contact.html"><span>お問い合わせ</span></a></li> 　　　　</ul> 　　　</nav> 　　</header> 　　<section> 　　　<h2>インフォメーション</h2> とかになるはずです。HTML5なら 　まず、Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … )のような資料の豊富なHTML4.01strictでみっちり勉強しましょう。 　上記HTML5ではなく 　<div class="section"> 　　<div class="header"> 　　　<h1>見出し</h1><!-- ロゴは背景画像で --> 　　　<p>こんな会社</p><!-- バナーも背景に --> 　　　<div class="nav" id="menu"> 　　　　<ul> 　　　　　<li><a href="index.html"><span>ホーム</span></a></li> 　　　　　<li><a href="news.html"><span>ニュース</span></a></li> 　　　　　<li><a href="access.html"><span>アクセス</span></a></li> 　　　　　<li><a href="contact.html"><span>お問い合わせ</span></a></li> 　　　　</ul> 　　　</div> 　　</div> 　　<div class="section"> 　　　<h2>インフォメーション</h2> とすればよい。文書構造を示そうにもHTML4.01には要素が不足していた。ちゃんと<div class="section">とかマークアップしている人が少なかった 　また、リンクターゲットでもないIDとか、DIVの多用とか、HTML5がどこを問題視して修正されたかが理解できていない。 　HTML5では、DIVの代わりに使うべき要素が用意されています。 【参照】4.4 Sections — HTML5 ( http://www.w3.org/TR/html5/sections.html )
TeraPadでの文字コードの変更方法 保存の文字コード形式を変えるということです。 http://i-njoy.net/blognplus/index.php?e=115 またHTML内に文字コードを指定するタグが入っていないのであれば、Metaタグを入れた方がよいです。 モバイルキャリアの場合、ブラウザ機能が貧弱なので、文字化けするおそれがあります ↓入力するメタタグ <meta http-equiv="Content-Type" content="text/html; charset=Shift-JIS"> 入力する場所は <head> </head> の間。<tltle>タイトル名</title>の上あたりがよいです
No.2です。No.2の回答は、ちょっと難解だったかも。挙げられたパターンで考えると2-2が一番効率的です。ただし、IDは決して使いません。classさえ使わない。これらをすると効率が下がる。 　1を使わない理由は、CSSが長大になりメンテナンスのとき作業が大変になる。 　2-1を使わない理由も同じです。 　　スタイルシートはひとつにしなければならない理由はありません。というか分けるべきです。 　非常に量の多い内容のサイトを作る場合、記事を書いていくと前後に移動して細かい修正がありますから、ひとつの巨大なHTMLを作成して、あとで分割する作業を行います。 <html> 　<head> 　</head> 　<body> 　　<div class="section"><!-- 全体 --> 　　　<h1>見出し</h1> 　　　<div class="section"><!-- 第１章 --> 　　　　<h2>見出し</h2> 　　　　<div class="section"> 　　　　</div> 　　　　<div class="nav"><!-- 1章目次 --> 　　　　</div> 　　　</div> 　　　<div class="section"><!-- 第２章 --> 　　　　<h2>見出し</h2> 　　　　<div class="section"> 　　　　</div> 　　　　<div class="nav"><!-- 2章目次 --> 　　　　</div> 　　　</div> 　　　<div class="section"><!-- 第３章 --> 　　　　<h2>見出し</h2> 　　　　<div class="section"> 　　　　</div> 　　　　<div class="nav"><!-- 3章目次 --> 　　　　</div> 　　　</div> 　　</div> 　　<div class="footer"> 　　</div> 　</div> </body> ↓分割 <html> 　<head> 　</head> 　<body> 　　<div class="section"><!-- 全体 --> 　　　<h1>見出し</h1> 　　　<div class="section"><!-- 第１章 --> 　　　　<h2>見出し</h2> 　　　　<div class="section"> 　　　　</div> 　　　　<div class="nav"><!-- 1章目次 --> 　　　　</div> 　　<div class="footer"> 　　</div> 　</div> </body> <html> 　<head> 　</head> 　<body> 　　<div class="section"><!-- 全体 --> 　　　<h1>見出し</h1> 　　　<div class="section"><!-- 第２章 --> 　　　　<h2>見出し</h2> 　　　　<div class="section"> 　　　　</div> 　　　　<div class="nav"><!-- 2章目次 --> 　　　　</div> 　　<div class="footer"> 　　</div> 　</div> </body> ・・・もし、div.nav ul li#abc とかだったら、大変な作業になるのは目に見えている。 div.section div.nav ul li{}だと、ひとつ書けばよい。 <div class="footer">内にある<div class="nav">なら、div.footer div.navで区別できる。場合によったらclass名すらいらない。 [具体例] div{font-size:1em;} div div{font-size:0.9em;} とかね。 デザインのためのIDもclass名も使わないHTMLが書ければ、HTMLもスタイルシートも随分と簡潔になり、自身も解りやすくなります。 class名は、それがどのような構成要素であるかを記述します。(デザインのためじゃない) <div class="header"> <div class="section"> <p class="figure"><!-- 挿絵など --> <strong class="mark"> と言う風に。HTML５の時代になれば、 <header> <section> <figure> <mark> に直せる。
全称セレクタ（Universal selector）での指定は止めたほうが良いです。どこかのオーサリングツール由来ですが、ウェブの基本はユーザー優先です。*を使うと、すべてのセレクタについていちいち設定しなければならない。可能な限りユーザー側に任せること。 せいぜい body{color: #333333;font-size: 12px;font-family:・・・} でやめておく。これらは基本継承される。 　特にmarginは*で指定しないほうがよい。dl,block,p,・・などすべて設定しなおさなきゃならない。オーサリングの手抜き・・たまったもんじゃない。 それでもユーザーはデフォルトのフォントサイズを決めていることもあるので期待しないこと。 追記するfont-sizeは、%のほうが良いでしょう。pxだと解像度によって変化する。私はemやexが多いですが・・ h1{font-size:150%;} h2{font-size:130%;} h3{font-size:120%;} h1,h2,h3,h4{margin:11px 0 8px 0;line-height:2ex;} とか・・ 　
ウィンドウを開くためだけにformは使わない。 単純に <div class="menue"> 　<ul> 　　<li><a href="" onClick="window.open('地図.html','_blank','scrollbars=no,width=550,height=500'); return false;"></a></li> 　　<li><a href=""></a></li><!-- 以下省略 --> 　　<li><a href=""></a></li> 　</ul> </div> だけでよい。びっくりするほど簡単なHTMLでしょ。 そして、なによりもjavascriptやスタイルシートを読まないユーザーエージェント(携帯電話・読み上げソフト・検索エンジンなど）にも情報が伝えられる。HTMLは文書構造にしたがって正しくマークアップすること。 　その上でスタイルシートで好きなようにデザインすれば良いです。スタイルシートも簡単になります。 div.menue{position:relative;} div.menue ul,div.menue ul li{display:block;list-style:none;margin:0;padding:0;} div.menue ul li a{ display:block;width:100%;height:100%; text-align: center;text-decoration:none; border:outset 6px #55bcb8; } div.menue ul li{position:absolute;width:200px;height:80px;line-height:80px;top:5px;left:10px;} div.menue ul li+li{top:5px;left:240px;} div.menue ul li+li+li{top:5px;left:460px;} div.menue ul li a:hover{background-color:yellow;} div.menue ul li a:active{border-style:inset;background-color:red;} とかでよいです。後方互換を考慮するならliにclass名をつけるとかしてください。 補足) borderは色を指定するとoutset,insetは周囲すべて適当に配色してくれます。 補足) 同じプロパティは重複して書かない。書くのもメンテナンスも大変。必要なものだけ上書き 　　　詳細度や登場する順番、継承の有無など、カスケーディングの仕組みを理解しましょう。 　　　　そのためのカスケーディングスタイルシートですからね。【一番重要な仕組み】 補足) スタイルシートやjavascriptを外しても動作できること ★下記ソース中、タブは＿に置換してあるので、タブに戻すこと。 ☆HTML4.01strictで書かれています。 　Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) 　でチェック済み ☆CSSは2.1です。 　W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) 　でチェック済み <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.menue{position:relative;} div.menue ul,div.menue ul li{display:block;list-style:none;margin:0;padding:0;} div.menue ul li a{ display:block;width:100%;height:100%; text-align: center;text-decoration:none; border:outset 6px #55bcb8; } div.menue ul li{position:absolute;width:100px;height:40px;line-height:40px;top:5px;left:10px;} div.menue ul li+li{top:5px;left:240px;} div.menue ul li+li+li{top:5px;left:460px;} div.menue ul li a:hover{background-color:yellow;} div.menue ul li a:active{border-style:inset;background-color:red;} --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<div class="menue"> ＿＿<ul> ＿＿＿<li><a href="" onClick="window.open('地図.html','_blank','scrollbars=no,width=550,height=500'); return false;">地図１</a></li> ＿＿＿<li><a href="">地図２</a></li><!-- 以下省略 --> ＿＿＿<li><a href="">地図３</a></li> ＿＿</ul> </div> </body> </html>
＞まるまるコピペではダメでしたか？ ★下記ソース中、タブは＿に置換してあるので、タブに戻すこと。 ★同様にシステムの都合で、http://は、http：//に書き換えてあるので戻すこと(全角： を半角:に戻す) 　添付図のようになるはず、スタイルシートは有効になってますか？
擬似クラスを使って textarea:focus{background-color:yellow;border-color:red;} とかですね。
ざっとしか見てませんが・・firefox+firebugで簡単に調べられる。 普通に、ナビゲーションリンクですね。 <ul class="nav"> 　<li><a href=""></a> 　　<ul> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　</ul> 　</li> 　<li><a href=""></a> 　　<ul> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　　<li><a href=""></a></li> 　　</ul> 　</li> </ul> HTMLが、文書構造にしたがってきちんとマークアップされているので、あとはスタイルシートで、プルダウンメニューを横だろうが縦だろうがご自由にと言うところ。 [表示]→[スタイルシート]→[なし]でスタイルシートなしで見てもちゃんと伝わる。 HTMLソースは、ソース表示で見ても良い。(firebugを使うと、どの部分のソースかがよくわかります。) CSSは、とてもよく使われる方法で簡単、どのように配置するかというあなた次第なので省きます。 　簡単に言うとdisplay:noneでいったん消して、li:hover(擬似クラス)で詳細度を上げてdisplay:block;で上書きしてます。 div.nav li li{display:none;}/* 詳細度[0,0,1,3] */ div.nav li:hover li{display:block;}/* 詳細度[0,0,2,3]*/
示されたページが表示されないのでわかりませんが、Perlを使うとすれば、 単純にHTMLを出力するコードを書き、要求にしたがって、その一部の目印を付けた行を置換すればよいです。 　要求方法は、QUERY_STRINGSなり、標準入力なり、PATH_INFOでお好きなものを使ってください。 （　開始　） 　　｜ [ 入力処理 ］ 　　｜ [ 出力 ］　while(DATA){ ＜ 判断　＞　if($ENV{'PATH_INFO'} eq '/more'){ s/<!-- LIST -->/$newLine/;}とか 　　 　・・・きちんとフローチャート書いて・・・ 　PHPのほうが簡単かも。
まあ、JavaScriptに関する警告表示はIEの仕様なので、無くす事は不可能かと…。 警告が出るって事は、何か別窓を開かせようとしてるのか。或いは別ドメイン（外部サイト）等に設定ファイルなどを読み込みに行っているのか…。いずれにしても通常の範囲内であれば、IEと言えどもJavaScriptを走らせただけでは警告は出ないので…。同様の機能を、何か別の実装で代替する方法（コード）を考えてみるべきかもしれません。 リンク先の回答者が言ってるように、基本はIE回避の方向性が良いと思います。が…非GEEK系の人達に新しいブラウザ布教するのは大変に骨が折れるので、これはなかなか一筋縄では行かないです(笑)。 ＞IE以外のブラウザ はい、そうです(笑)。まあ普通、提携先との関連以外で個人的にIEを使う要素は全く無いですね(笑)。好みにもよりますが、自分はここ1～2年はChromeのみです。Chromeに慣れたら、他のブラウザはストレスが溜まるだけですね。 ＞ローカルのJavaScript依存度 意識して多くすると言う事ではありませんが、コレを使ったら警告出るかな？～とか、そう言う事を一切気にしないで作れるって意味です。最近はクライアント側からの変な要求も多いので、逆に仕事で作る時の方がJavaScript（jQuery）依存度は高いかもしれません…？
例えば、 「１日に小説を何ページ書けるでしょうか？」と同じ。 １枚も書けない人も居れば、100枚書く人もいるでしょう。 構想さえ決まれば、すらすら書けるかもしれない。 ウェブページの場合、トップページが出来上がれば、 同じ仕様でサブページを作れるので、量産し易い。 但し、最初の構造（設計図）が重要なので、最初の時間が掛かります。 ------------------------ 例のページは、HTMLが簡単で、CSSが多い。 あのページに対してのCSSは少ないが、他のページ用のCSSが多いのでしょう。 だから、あのサイトを作るのは面倒だが、あのページだけを作るのは簡単。 見た物をまんま作るのと、創造するのは、掛かる時間が全く違う。 ちなみに、 １ページ作れば、量産出来るのは知っていますか？ つまり、 テンプレートを作って、各ページ別の文章さえあれば、 手作業の場合は、5分とか10分程度毎に１ページずつ量産出来る。 ------------------- 質問に対しての回答は出来ないが、 例えば、サイトをリニューアルする場合、 （内容/文章は全て同じだとして） 数日でテンプレートを作ってから、１日でかなり複製出来る。 CMSの場合は、テンプレート作ったら ＝ 終了。 1000ページあろうが自動で全ページが完成している。
HTML5 <body> 　<header></header> 　<section> 　　<div id="index"></div> 　</section> 　<nav></nav> 　<footer></footer> </body> HTML4.01,XHTML <body> 　<div class="header"></div> 　<div class="section"> 　　<div id="index"></div> 　</div> 　<div clas="nav"></div> 　<div class="footer"></div> </body> CSS(HTML5用) section{position:relative;} section div.index{ 　margin-top:180px;position:absolute;top:0;left:0; 　height:100%;width:20%; } section>*{margin-left:20%;} nav{position:absolute;top:80px;height:100px;} CSS(HTML4用) div.section{position:relative;} div.section div.index{ 　margin-top:180px;position:absolute;top:0;left:0; 　height:100%;width:20%; } div.section>*{margin-left:20%;} div.nav{position:absolute;top:80px;height:100px;} かな・・
自分で作るなら、 　レイアウトの枠組みをCSSで作る→細かい部分を作っていく という感じで進めるのが良いですが、SEO対策を気にしないならテーブルでレイアウトを作ってしまうのが一番早いかもですね。 費用を掛けてもよいということであれば、プロにこんな感じでテンプレートを作って欲しいと依頼して、それを元に自分でカスタマイズしていくのが最も手軽な気がします
A.No2の回答の通り、拡張子には(人間にとって分かりやすいという以上の)本質的な意味は無いので .cssや.jsでもサーバー側で何らかのプログラムが走っている可能性はあります。 それとは別の可能性として、ブラウザ側のキャッシュで古いファイルが参照されないように 適当なクエリ(?以降の文字列)をつけているだけかもしれません。 毎回xxxx.cssにアクセスしていたのでは、 xxxx.cssを更新してもブラウザはキャッシュに残った古いxxxx.cssを使うことがあります。 これを避ける為に、xxxx.cssを参照するHTMLの側で xxxx.css?v=yyyyyy のyyyyyyの所をファイルを更新したときに変更するという手段があります。 yyyyyyのところが変わるとブラウザは別のファイルだと判断しますから 古いキャッシュは参照されません。 （この目的の場合、サーバー側では?v=yyyyyyは無視することになります。）
デザインやWeb制作等を生業にしています。 さて、制作に関してですが、あくまで趣味の段階ですか？　お仕事として受けたのですか？ 趣味の段階で受けたのなら　正直やめましょう。　私ならここまでしなければいけないなら もちろんサーバー維持費、販売に関するシステムに関する制作費や運営費 これが支払われなければ入れられません。　とはっきり言います。 チケット販売に関するWebのみの認証なんて、仕事として受けなきゃ責任問題の保証とか どうなさるおつもりですか？　カートシステム作って終いでも、当然それお金かかりますよ それを自腹で払うのでしょうか？　仕事でなければ受けてはいけません。 はっきり言えば、会員コンテンツ及び販売に関わることになるものは タダではないのです。　本屋やWebみてホイホイできるようなことではありません 契約・運営管理・金銭授受の取次・何かあった場合どこに責任が行くのか 金もらったってこんな重くのしかかること　仕事で解約結ばなきゃ青天井で全部あなたの責任に ふっかけられますよ？ 単純にページ作るだけなら、イラストレータやフォトショップで、紙ベースで、デザインロゴ打ち込み を作り、それをクライアントに確認刺せ、OKが出た時点でコーディング それを１ページづつやっていけばいいわけです。　Webと言っても途中までは何らパンフレットを 請け負う仕事と一緒です。 Webベースになったときに、FLASH入れるのであればその動き、ロールオーバー等の効果をつけて 公開していない仮ページ　またはデータでクライアントとやり取りして ダブルチェック体制にします。　あなただけの間違いで責任問題になるのを防ぐため お互いOKを出して承諾して作って行きます。 ですので １＞会員ページを作るだけなら、無償ページで構いません ２＞金銭の授受・個人情報の入力があるようなカートシステムなら、支払い方法・チケットの発送方法を 決めてからやる必要がありますし、サーバーにその機能を持ったものを使うのが無難です 月ベースで10,000円程度は費用として見ましょう。　サーバーのレンタル代　カートシステム 当然セキュリティが強固なサーバーを借りるのですから　そこそこ契約時に金額がかかります ３＞だれが更新するかによります。そのクライアント自体が更新をするのであれば ブログ形式の更新部分があるページを外部リンクでも、内部仕様でブログページを組み込んでもらえば簡単ですがあなたが全面的にやるなら、あなたのやりやすいようにすればいいだけです。 （当然こんな手間かけるなら　毎月更新料もらわなくちゃやってられません） ４＞何ページ作るか知りませんし、そのクライアントに原稿確認してもらい、それの往復の時間もあるでしょうから、少なければ認証のないページデザインで２ヶ月くらい　コーディングで２週間くらい　FLASHなんかの効果を入れるのならあなたの技量次第で　N日　サーバーの取次　ブログパーツやカートシステムの組み込み をあなたが理解するのに　X日　組み込み・テスト運営に１週間くらい ３ヶ月+Nにち+Zにち　早くて５ヶ月遅いと８ヶ月くらいでしょうか 仕事としてきっちり受けるのであれば、構いません。 金銭関連が発生するなら　タダで受けるほど愚かなことはありません
＞背景をグラデーション風にする方法 ではなくて、背景画像そのものを変更しています。 javascriptを使って、スタイルシートを切り替えているだけです。 カスケーディングスタイルシートのカスケーディングの仕組みを利用して、適用されるプロパティを変えることができます。この場合は、「同じ詳細度の場合、あとから登場する設定で上書きされる」部分を使えば容易でしょう。
ｃｓｓだけではできないです。 やはり javascript　を使うか、 cssを動的サーバ側のプログラム言語で 出力させるか しかないです。(classでは 難しいかも。)
IE6は別途措置が必要ですが、概ねのブラウザでは、レイアウトに関してはHTML/CSSだけで実装できますよ。 ・グレーアウトは、単に#000にopacityを割り当てるだけ。 ・メインコンテンツの前面に新しい要素(確認ダイアログ)を表示するには、positonとz-indexで操作。 表示・非表示を指示する動作は、JavaScriptでの実装になると思います。 といっても、JavaScriptからCSSのdisplayの値を操作するくらいのものです。
他のWEBサイトで希望する表示をご覧になったことはありますか？ 一言で申し上げますと、簡単に実装できるなら、他のWEBサイトでも多用されているはずです。 既に回答が出ているように、解決策はないことはないのですが、まだ現実的とはいえないのが現状です。 ほとんどのWEBサイトがそうするように、XP以前なら「MSゴシック(明朝)」、Vista以降なら「メイリオ」、Macなら「ヒラギノゴシック(明朝)」で表示させ、タイトル見出しなど飾りたい箇所のみを画像化する方法がもっとも現実的かと思います。 次の段階で、おそらくのWEB制作初心者の方で思いがちなのが、「フォントを指定できないなら、全部画像にしちゃえばいんじゃね？」という発想です。多くは言及しませんが、これはやめたほうがいいです。やめるべきです。
＃１です。 ついに「jCarouselLite」を導入して直に確かめてみました。（いままでは推測だけで回答していたので・・・）。 やってみると、本当に（失礼！）問題のような現象が出ます。つまり「「可視《VIS()》/不可視《display:none》」を切り替えるjavascriptがうまく動作していない。」ことを確認しました。 これまた推測ですが、問題のスライドショーの「div」のスタイルを関与している「jquery.js」または「jcarousellite_1.0.1.pack.js」の中に「display＝inline（またはblock）」と競合するスクリプトがあり、これを無効化しているのではないでしょうか。 両スクリプトとも一読するには膨大な量があり、中身にどのようなスクリプトが書き込まれているのかまでは追跡しきれませんでしたが。 そこで、他の命令ではどうかと「visibility：visible/hidden」を試しましたが、これもダメ。しかし「透明度」を設定する「alpha」というスタイルはうまくいくようでした。 これが使えれば、ほぼ「display」と同じような動作が可能かと思います。ぜひお試し下さい。 ＜HTML一例＞ <head> <script type="text/javascript" src="js/jquery.js"></script> <script type="text/javascript" src="js/jcarousellite_1.0.1.js"></script> <script type="text/javascript"> $(function() { $(".anyClass").jCarouselLite({ btnNext: ".next", btnPrev: ".prev", visible:1}); }); </script> <script type="text/javascript"> function VIS(){ document.all('AAA').style.filter="alpha(opacity=100)"; } </script> </head> <body> 【メニュー】 <br> <a href="javascript:void(0);" onClick="VIS()"> <img src="img/1.jpg" /></a> <br> <br> <br> 【コンテンツ】 <div id="AAA" class="anyClass" style="filter:progid:DXImageTransform.Microsoft.alpha(opacity=0)"> <ul> <li><img src="img/001.jpg"></li> <li><img src="img/002.jpg"></li> <li><img src="img/003.jpg"></li> </ul> </div> </body>
１枚の背景画像で簡単なんだけど、 それだと超特大の画像で重くなるから、（NO.1さんご指摘通り） ３枚のGIF画像で軽量化してリピート。 ----------------------- 大きさが不明なので・・・　薄紅の枠が800pxだとして、 １枚目は、線画　1000×20とか程度 ２枚目は、星円　1000程度×高さ（背景透過・リピートするorしない） ３枚目は、１ドットのチェック画　程度に小さく（背景透過） ※ PNG24は綺麗に抜けるけど重い・・・、 　　小さな画像をリペートするなら問題無いがIE6は不可 ２枚目の画像は、各バラバラでも可能だが面倒。 ３枚目の画像は、実例だとレースのカーテンと同じ原理で半透明状態になる。 この３枚の画像を重ねるのが最小容量になる。 <!-- HTML --> <body> <div id="wrap"> <div id="main"> <h1>見出し</h1><p>文章</p> </div> </div> </body> /* CSS */ body{background:url(●●.gif) 50% 0;}/* 縦模様 */ #wrap{background:url(○○.gif) 50% 0;}/* 星や◎ */ #main{background:url(××.gif);} /* 薄紅透過背景 */ 出来ないのなら、１枚の画像を背景で使うしかない。
ちょっと厳しい言い方かもしれませんが、font-familyの指定はCSSの記述でも複雑な部類に入るため、まずは、HTML/CSSの基本を学ばれることをおすすめします。印象としては、足し算を覚える前に、掛け算や割り算をやってるようなものです。 およばずながら、基本的なことを箇条書きしてみます。 1. @charsetに指定する内容で結果が変わることはないと思います。 @charset "shift_jis";の指定で文字色が変更されたのは、HTMLとCSSのテキストエンコーディングが統一されていなかったり、あるいは、単純なスペルミス、行末のセミコロンがないなどの理由だと思います。 2. 現在は「MSゴシック」が適切でない環境がたくさんあります。 MSゴシックがデフォルトなのは、Windows XP以前です。Vista以降ではメイリオがデフォルトフォントであり、アンチエイリアスフォントによりMSゴシックよりも可読性が高いです。(もちろんこれは好みですが。)　また、MS製品でないOS(MacやiPhoneや携帯端末)は、MSゴシック自体がありません。MSゴシックのある環境とない環境をわけられる指定が望ましいかもしれません。 3. CSSは様々な箇所で指定することができます。また、ブラウザごとにデフォルトのスタイルが指定されています。 どこかでfont-familyを指定したとしても、別の場所でそれよりも優先順位の高い記述をされていたら、変更が適用されません。また、これはブラウザによっても、CSS優先順位のあり方が異なるため、やはり基本的なCSSの記述をマスターされることが先決です。 4. font-familyの指定は少し複雑です。 たとえば、 font-family:Verdana; font-family:"Verdana"; font-family:'Verdana'; 同じフォントを指定していますが、少しの違いでブラウザによって認識されたり、されなかったりします。 おそらく、ここでの質問よりも、「font-family　指定方法」での検索の方が、質の高い情報が得られます。
ご質問にそえないかもしれませんが、おそらく「シンプル　ミニマル　WEBデザイン」などで検索するだけで沢山でてくると思いますよ。 ただ、質問内で少し疑問があるのが、単純に「余白の多いサイト」を探されているのか、参考サイトのイメージに近いものを探されているのか、分かりませんでした。 そもそもホワイトスペースのないWEBサイトは存在せず、「ホワイトスペースの扱いが上手なサイト」という意味ならすんなり理解できるのですが。
ちょっと全体の構成がよく理解できていませんが、CSSの読み込み前に既に端末の特定ができていて、端末毎のCSSを読み込めるのであれば、以下のようにすればCSSだけで端末ごとの画像を表示することはできると思います。 ---------HTML-------------- <img id="mobile" class="logo" src="mobile.jpg" alt="モバイル用画像" /> <img id="pc" class="logo" src="mobile.jpg" alt="PC用画像" /> ---------CSS-------------- #共通CSS img.logo{ 　display:none; } #モバイル用CSS img#mobile{ 　display:inline; } #PC用CSS img#pc{ 　display:inline; }
参考に。 http://www.fontfontfont.com/scninki.html
そんなHTMLは書きません。 FOOTERrightなんて、後日メンテナンスするとき、そこに何が書かれているか解らなくなります。もちろん検索エンジンもわからない。ちゃんと文書構造上意味のあるものにしましょう。 [class名の例] 　header,footer,section(本文),article(完結した記事),aside(直接関係しない記事),nav(ナビゲーション)など、HTML5で採用されるDIVの代わりの要素名をつけるのがよい。これらは検索エンジンは無論、自分でも後で何が書かれているか解る。たとえば右に配置していたものを左にしても不都合はない。 　HTMLはデザインを考えたらダメです。あくまで文書構造を記述するためのものです。 　^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 　初心者が作成したマニュアルには、この手の不都合が多々あるので注意すること。 また、IDは一意に文書内の要素を決めるもので通常はリンクの終点です。CSSのためにIDを付けると、一意であるがために何度も記述することになり煩雑になります。逆にリンクの終点であるときは、それをCSSで利用できますが、決して逆(CSSのためにIDを書く)ではない。 [例] <p class="memo important">補足であり、かつ重要なメモ書き</p> <p class="memo">たとえば<span class="important">ここは大事</span>です。</p> これだと p.important{color:red;} p.memo{border:solid blue 1px;} と同じクラスでまとめて書けるしメンテナンスも楽でしょ。もしこれをIDで指定すると大変になる。 ★絶対配置するためには、基準が必要です。この場合footer内のものを配置するので、footerはstatic以外にしておく必要がある。ここではrelativeにしておく。 　また本体にはabsoluteを指定しない!!! 以下は、サンプルです。タブは＿に変換してあるのでタブに戻すこと。 Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- div.footer{ ＿width:100%; ＿border-width: 1px 0px 4px 0px; ＿border-style: solid; ＿border-color: #204460; ＿background: #507EA1; ＿position:relative; /* この子孫要素を絶対配置するときの基準にする */ } div.footer div.DocumentType, div.footer div.nav{ ＿position:absolute; ＿width:33%; ＿top:0; ＿height:100%; /* 同じプロパティは一度で済ます */ } div.footer div.nav h2{display:none;} div.footer div.DocumentType{ ＿right:0; ＿background-color: rgb(200,200,255); } div.footer div.nav{ ＿left:0; ＿background-color: rgb(200,255,255); } div.footer div.document-version{ ＿margin:0 34%; } div.footer div.DocumentType p{ ＿margin:5px; ＿text-align:center; } img{ ＿border:none; } --> ＿</style> </head> <body> ＿<div class="header" id="PAGETOP"> ＿＿<h1>サンプル</h1> ＿</div> ＿<div class="section" id="MAIN"> ＿＿<h2>本文</h2> ＿</div> ＿<div class="footer" id="INFO"><!-- リンク先でもないのにidは使わない --> ＿＿<div class="nav"> ＿＿＿<h2>このページの目次</h2> ＿＿＿<ul> ＿＿＿＿<li><a href="#PAGETOP">TOP</a></li> ＿＿＿＿<li><a href="#MAIN">本文</a></li> ＿＿＿＿<li><a href="#INFO">文書情報</a></li> ＿＿＿</ul> ＿＿</div> ＿＿<div class="document-version"> ＿＿＿<dl> ＿＿＿＿<dt>First Published</dt> ＿＿＿＿<dd>2005-06-10</dd> ＿＿＿＿<dt>Last Modified</dt> ＿＿＿＿<dd>2005-06-10 12:00:00 (JST)</dd> ＿＿＿</dl> ＿＿</div> ＿＿<div class="DocumentType"> ＿＿＿<p> ＿＿＿＿<a href="http://validator.w3.org/check?uri=referer"> ＿＿＿＿＿<img src="http://www.w3.org/Icons/valid-html401" alt="Valid HTML 4.01!" height="31" width="88"> ＿＿＿＿</a> ＿＿＿</p> ＿＿＿<p> ＿＿＿＿<a href="http://jigsaw.w3.org/css-validator/check/referer"> ＿＿＿＿＿<img src="http://jigsaw.w3.org/css-validator/images/vcss" alt="Valid CSS!" height="31" width="88"> ＿＿＿＿</a> ＿＿＿</p> ＿＿</div> ＿</div> </body> </html>
CS4では、 挿入メニュー -> HTML -> テキストオブジェクト -> フォント から<font>を挿入できます。 再編集するとCSSの設定になりますので、ステータスバーからクイックタグ編集を使うか、コードビューで編集する必要があります。 >fontタグが推奨されてないという事は他の質問等で見たのですが、例えばdivや、spanを使うとかでも構いません。 fontタグ以外のタグに、<font>のような機能はありません。 fontタグ以外のタグを使うときは、必ずスタイルシートを使う必要があります。
ものすごく単純にやるとしたら・・・ a:hover { color:#215dc6; background-color:#CCDDEE; text-decoration:underline; } あたりでできると思います。 ＃色、デザインは全く異なります。 その他、CSS hover で検索すると色々なものが 検索できると思います。 googleのHTMLソースコードを見ても、 「hover」で検索すると、いくつかひっかかるみたいですね。 ＃ただ、CSSやJavaScriptが圧縮されていて、非常にみにくいですが・・・
body{text-align:center;}は後方互換のために使われますが、その場合この属性は継承されます(Inherited:yes)から、その次のブロックレベルで戻しておかなければなりません。 'text-align' 　Value:　　　 left | right | center | justify | <string> | inherit 　Initial:　　 depends on user agent and writing direction★ブラウザ&言語に従う 　Applies to:　block-level elements　★対象はブロックレベル 　Inherited:　 yes　★継承する 　Percentages: N/A 　Media:　　　 visual このプロパティは、ブロックの中でインライン要素の内容をどのように揃えるかを指定する。 　　　　　　　　　^^^^^^^^^^^^^^^^ 16.2 文字を整列させる（Alignment: the 'text-align' property） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )より ＞（2）また、「p」などのインライン要素は、{text-align: center;}を使い、「id」などのブロック要素は{margin: 0 auto;text-align: left;}を使いますすが、 　pはブロック要素です。idは文書の中でリンクの終点を示す一意な要素を指定する属性です。CSSから見るときは「一意セレクタ」と考えます。 　ブロック要素とインライン要素をきちんと理解しておきましょう。 　<div id="wrapper">などは、あるオーサリングツールがつけてしまう意味のないidです。とても多く見受けますが、ウェブ標準的に正しいとは言いかねます。 　可能な限り意味のある名称にしましょう。この場合リンクの終点でなければつけないほうが良い。HTML5だと <body> 　<section> 　　<header> 　　　<h1>見出し</h1> 　　　<article> 　　　　<p></p> 　　　　<p></p> 　　　</aricle> 　　</header> 　　<section> 　　　<h2>見出し</h2> 　　　<p></p> 　　</section> 　　<footer> 　　</footer> 　</section> </body> section{margin:0 auto;width:80%;} section section{width:100%;} とかになるはずですから、HTML4だと <body> 　<div class="section"> 　　<div class="header"> 　　　<h1>見出し</h1> 　　　<div class="article"> 　　　　<p></p> 　　　　<p></p> 　　　</div> 　　</div> 　　<div class="section"> 　　　<h2>見出し</h2> 　　　<p></p> 　　</div> 　　<div class="footer"> 　　</div> 　</div> </body> div.section{margin:0 auto;width:80%;} div.section div.section{width:100%;} と、なるはずです。きちんとセマンティック(意味のある)クラス名やidをつけること。アンカー終点でもないのにidは使わない。idを使うと詳細度がb=1になるため、継承や詳細度が使えなくなり、CSSが複雑になり記述が増えます。 ＞参考書などを見ても解りづらかったので 　なぜ仕様書を見ないのですか？ REC-CSS2 邦訳 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　現在、多くのブラウザがウェブ標準としているものはCSS2.1( http://www.w3.org/TR/CSS2/ )ですがこれの邦訳はないようですが、詳細度の計算以外は大きな変更はないかと・・
CSSはご自身で書かれているのですよね？ 結果も質問も理解できるのですが、その過程がないことには回答はつかないのでは。 何を用意したらいいのかがわかりません。
> ツールバーをクリックで出したり引っ込めたりする部分 このカテゴリがデザイン・CSSなので、そこに注視してお答えしますと、CSS3のtransitionsを使用すれば要素をアニメーションさせることは可能です。ただし、主要ブラウザであるIEの8以下ではこの機能を使えないので、一般的な手法としては、CSSではなく、javascriptを用いて実装されると思います。 CSS3で実装する場合は、「Transitions css3」で検索すれば、情報は大量に出てきます。 JavaScriptで実装する場合は、カテゴリを変えて質問されてみてはどうでしょうか。
１つのタグにlang属性は１つしか書けませんし、lang属性で指定できる言語も1つです。 主となる言語を<html lang="ja">や、XHTMLなら<html xml:lang="ja">などと指定します。 部分的に英語などの他の言語になる部分で、<div lang="en">、<p lang="en">などと指定していきます。 lang指定は同じ言語を入れ子にする必要はありません。 <title>などに複数の言語を羅列するとタイトルが長くなりすぎることがあるので、どちらか１つにしておいた方がいいと思います。 それでも両方の言語を書きたいのであれば、最初に主となる言語、あとに続くのを補助的な言語にして、<html>のlang属性と統一すればいいと思います。
ErrorDocument 404 は、要求されたファイルが存在しないときに表示させるエラーページを指定するものでから、へんです。 　もし、ルートにfavicon.icoが存在すると、ブラウザのURL欄に直接、http://[yourDomein]/favicon.ico を記述して呼び出すことで表示されるはずです。(キャッシュやブラウザの設定が正しければ) 　また、icoファイルが壊れていないかも確認すること。本来は複数サイズの画像をもつWindowsのアイコン形式ですが、ブラウザによると他のGIF形式でも読めるものもあります。 　ブラウザの記述に <link rel="SHORTCUT ICON" href="/favicon.ico"> <link rel="ICON" href="/favicon.ico"> を追加する。または <link rel="SHORTCUT ICON" href="/test/favicon.ico"> <link rel="ICON" href="/test/favicon.ico"> とデフォルト以外の場所を指定して、そこにiconを置く 　いずれにしても原因は ・.htaccess に無用な記述がある ・ファイルが壊れている ・ブラウザのキャッシュ ・ブラウザの設定 　のいずれかでしょう。
テーマの方でいいんじゃないですか、私はそうしてますけど。 基本的に、WordPress 本体は触らないようにします。
ID属性は、 【HTML】 ・HTMLでは英字から始まり、英数字と"-" と "." ・HTML4.01以降では、"_"と":"が追加 【XHTML】 ・XHTMLでは、英字からまたは"_"から始まり、英数字と"-"".""_"などで":"は使えません。 ・XHTMLでは、xmlからはじめることは出来ません。 　XHTMLは未来は不明なので、私は、XMLとして使うときMathMLやSVGを使うとき以外はHTML4.01に戻しましたが・・。作成が楽なので 　これはルールではありませんが、そもそもIDはリンクの終点として使うもので、スタイルシートのためにIDをつけることは基本的にありません。 　class名は、セマンティック(意味のある)なものをつけています。HTML4.01では、セマンティックな要素が絶対的に不足していたので、その反省からHTML5では、文書構造を示すセマンティックな要素が追加されます。その要素名をclass名に使うようにしています。将来、HTML5に変更するときも楽ですし、なによりも文書構造に従ったマークアップの練習になりますから。 　たとえば、 　　　HTML4.01　　　　　　　HTML5　　　用途 <div class="header">　　　<header>　　いわゆるヘッダ <div class="section">　　 <section>　 本文 <div class="footer">　　　<footer>　　フッター <div class="article">　　 <article>　 記事(独立しうる記事) <div class="aside">　　　 <aside>　　 本文と関係しない記事 <div class="nav">　　　　 <nav>　　　 ナビゲーション <span class="m">　　　　　<m>　　　　 マーク(他から参照される用語) と言う感じで設定しています。wrapとか、contenerとか、rightとかleftとか意味のない物は使いません。 3.1. 新しい要素 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) ・・・検索エンジンが、そこに何が書かれているか理解できるように書くように心がけています。これらのclass名は検索エンジンは理解できるようになっています。 　CSSのためにIDを書くことはまったくありませんが、class名はセマンティクなものをつける様にしています。たとえば上記以外ですとappendix(付録),siteMap(サイトマップ),note(ノート),column(コラム),newsなど・・ 　そうしておくと、CSSを書くときにいちいちHTMLを開く必要もありませんし、CSSは無論、HTMLもその部分に何が書いてあるかわかります。
推測ですが、 1)「font-family」との関係でサイズ指定が無効になっている？。 「font-family」はこのように指定しなければいけないのですか。さほど重要でなければ指定しない状態でお試し下さい。 2)サイズ指定の直前。文字色に指定部分「color:#444;」が不完全なのでここでひっかかる？。 文字色を正しく６桁で指定し直すとか、指定順序をサイズを先にしてみるとかを試す。 3)そもそもbodyタグにフォントサイズを％で指定する意味とは？。何をもって「100％」なのか。普通body内部の一部箇所で全体の文字サイズに対して大きくまたは小さく指定するものです。 ひょっとするとbodyには％指定できないのかも。
確かな回答ではないかもしれませんが、上部メニューで、「サイト管理」にてそのサイトを新規作成（登録）してないんではないでしょうか。 サイト管理上に、作成中のサイトがないと、その状況になるような気がします。
http://neo.s21.xrea.com/web/006.html http://kumacrow.blog111.fc2.com/blog-entry-490.h … マージンをとって、常にスクロールバーを出すという方法があるようです。 CSS3に対応しているブラウザのみで考えるならめんどくさいことは要りません。 もしくは、そのCSSすら面倒となると、根本的に、1ページの情報量を減らすとか。
おそらく、やりたいことはフレームを使わずにフレームページっぽいＨＰを作りたいんだと思いますが… ここがサンプル付きで参考になると思います http://www.otchy.net/sample/ie6fixed.html 基本的にはメニューを囲うDIV要素をスタイルシートの positionを使って固定します 上記サイト以外で参考ページが必要であれば「CSS 擬似フレーム」と検索するとかなり多くの解説サイトを見つけることができるので、参考にしてみると良いと思います。
忘れてた、中央寄せなら div>div{width:80%;min-width:450px;max-width:1000px;margin:0 auto;} 　　　　　　　　　　　　　　　　　　　　　　　　　　　　^^^^^^^^^^^^^^^^^^^ だけでよい。(CSS2.1の書き方、古いIEなどに対応させ場合は、違う書き方になる。
HTMLが、 HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば・・・【中略】・・・帯域が広いコンピュータや狭いコンピュータ、等の環境である。「2.2.1 HTMLの略歴 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )より」 　なら、ファイルサイズの小さな画像をおいておく、しかも画像を読み込めない(読まない設定にしている)ユーザーエージェントために、画像に変わる情報を伝えられる適切な代替テキストを置くことが推奨されています。 　13.8 代替テキストの指定方法 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) ＞リンクすると、ポップアップみたいに開いてほしいのに、 　これは一般的にはjavascript、もしくはtarget指定で行いますが、最近のブラウザはそれでは「ウザイ」ので、デフォルト、または設定してタグで開くようにすることも多いです。 　ユーザーが、リンクを右クリックしてコンテキストメニューで「新しいウィンドで」「新しいタブで」「このタブで」などを指定することが多いので、作者がきにすることはないと思います。 ゜
PHP とかはどうですか？
ちゃんと見てませんけど… item.titleが対象とするタイトルであるなら、空白だったらNo Titleに置き換えるだけでよいのでは？ item.titleの代わりに 　(item.title?item.title:"No Title") としてあげるとか。
スタイルシートの書き換えしかできないのであれば、 その元になっているデータに割り当てられたタグ名が必要です。 おそらくタイトル画像とコンテンツ部分に分かれているのだと思いますが、 コンテンツ部分のタグ名がわかれば、例えば #contents{ text-align:center; } とかでいけるんじゃないかと思います。
＞インラインブロック要素を持ち出したのか？ 　当初の質問が、漠然とした％の算出方法でしたから、％は何を100%とみなすかで答えが変わるという意味で回答しました。配置するブロック内に画像のような置換インライン要素があると、その幅は内容の大きさになるということです。 ＞仕様書に明るいORUKA1951さんからみて、問題ありますでしょうか？ 　イヤミ？？？気にしませんが・・ 　HTMLをdivだらけにしないように・・・。HTML4.01では構造化要素があまりに不足しているがために、divだらけになる必然があったので無理もない部分もありますが。 　この答えは、No.7で良いと思います。 　標準モード、互換モードの切り分けも必要ですが、あくまでscreen端末(ブラウザ)だけの狭い世界の話で、HTMLはそれだけが対象ではない。膨大なインターネットというデータベースの中のひとつのデータと考えると・・・ 　最後のサンプルで、width:,mi-width,max-width:を調整すれば、何列だろうが、ほぼ希望通りになるでしょう。ウィンドウ幅(解像度)を変えるとどうなるでしょう。 ＞実際は、2ブロックばかりとか3ブロックばかりを高さ固定の成り行きで並べる予定です。30-50個に1つづつ数値指定は無理ですし、増えたり減ったりしますので、 　後だしじゃんけんは「なし」です。
tdの背景が透過されて、trの色が見えている という状態では？ たぶん、望まれてるのはこうではないかと。 （!important不要だと思います） tr:nth-child(odd) td { background:#aaFFFF} tr:nth-child(even) td { background:#ddffFF} td:nth-child(3) { background:transparent}
>class指定をしない状態ですと普通に表示されるのですが、 このスタイルシートの書き方はどうなってますか？ >div#side ul#sidenav li.a { このセレクタの、background-positionを消してみるとどうなりますか？
＞これをブラウザサイズ変更で、それぞれのエントリが再配置されるサイトは作れないものかと考えたのですが・・・ 　それはわかるのですが、肝心なのはHTMLです。ちゃんとしたHTMLなら、デザインは自由に出来ます。No.2であげた例のほかに 「ホームページ製作中ですが3カラムの体裁崩れに付いて( http://oshiete.goo.ne.jp/qa/6891690.html )」 　のNo.6とNo.7の回答であげているHTMLとCSSをコピーして、HTMLに書かれているサイズの適当な画像を用意して、スタイルシートの切り替え、および印刷プレビューでテストしてみてください。４種類のCSSがあるはずです。--「印刷および、一覧用」スタイルシートがウィンドウ幅に合わせて再配置されるタイプですね-- ★必要なことはきちんとしたHTMLです。ボタンクリックでボタン画像を変えて、更に横に画像を - Webデザイン・CSS - 教えて！goo ( http://oshiete.goo.ne.jp/qa/6913162.html )への回答(No.2)でも書きましたが、ある３種類、それ以外のもっと適切にあなたのページに適したマークアップであっても、【そのいずれであってもHTMLさえきちんと出来ていれば】「これをブラウザサイズ変更で、それぞれのエントリが再配置されるサイトは作れ」ますよ。 　メニューを右側に置くためには工夫が必要ですが、一般的な左に置くタイプでしたら簡単でしょう。 　方法自体は、「ホームページ製作中ですが3カラムの体裁崩れに付いて( http://oshiete.goo.ne.jp/qa/6891690.html )」の３番目のスタイルシートが参考になるでしょう。 　
>No.3 なるほど。。。 読み返してみると、質問の主旨は２つあるというようにも読めますね。 >私が作りたいのはボタン画像を縦にいくつか並べて、 縦に並べるのはどうすればいいか？ >クリックするとその横に画像が表示され、ボタンも押した状態（画像が変わっている）になっているというものです。 クリックすると画像をかえるにはどうすればいいか？ 私は後者が主旨だと思って答えました。 「クリックしたらほかの場所にある画像も変わる」＝ページをかえれば良いという考え方は、 縦に並べるとか横に並べるとかのレイアウト（デザイン）だけでなく、 サイドバーのボタンを押すと、本文中やヘッダにある画像が変わるというようなデザインにも応用は利きます。 前者の質問であるなら、 表（ひょう）と思われたのなら<table>を使えばいいと思いますし、段落（一般文章の中の画像）なら<p>と<br>、箇条書きなら<ul>を使えばいいと思います。 私なら<table>を使います。ご参考まで。
IE6は、透過pngが効かない・・・ unitpngfix.jsは知らないけど、 二重・三重の重複策で、透過しても意味ないでしょう・・・ 例： FAXしてからメールして電話するような物・・・ 透過pngを利用せずに、CSSだけで透過になるはず。（画像も軽くなるし） 透過しない画像で、 数値を0.7→0.4、70→40とかに下げれば良い。
wordpressをCMSとして利用する場合は ブログページのデザインを調整して通常ページっぽくする という流れになります。 ですので、カテゴリー別に通常ページっぽいテンプレートを作って、 そこに記事としてエントリーすればOKです
ブラウザによりますが、素早く表示させる為に、 一時ファイルを表示するので、 タイミングにより、古い情報が表示されます。 ブラウザの親切心か大きなお世話って事でしょう・・・ この古いキャッシュを新しくしたい場合、 一時ファイルを削除したり、 ブラウザの更新ボタンやキーボードの「F5」キー、「Ctrl + F5」キー　とか。 Chromeの場合も同じで、「このページを再読み込みします」ボタンか、 キーボードの「F5」キー、「Ctrl + F5」キー　とか。
隣接セレクタとは、 セレクタ ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) です。兄弟関係から探します。 ElementAを兄に持つElementBを兄に持つ・・・と CSS3だと、 :nth-child(n)　n番目の要素 :last-child　　最後の要素 が使えるけど・・
色々方法はあるけど、画像置換えや背景を使わないという事かな？ ----------------------- td.type1 a:hover img{ width:320px; height:320px;} ↑こうするとか、↓こうするとか、 <a href="#" id="hover"><img src="画像" width="160" height="160" alt=""></a> a#hover img{border:none;} a#hover{ display:block; padding:5px; width:160px; height:160px; border: 1px solid #CCC;} a#hover:hover{ width:320px; height:320px;} a#hover:hover img{ width:100%; height:100%;}
＞項目４や項目５の<li style="line-height:60px">の箇所を動的に変化させないといけないのですが、それをどうすれば実現できるか分からない事もあり、tableで組んでおりました。 　「」といわれると、古いIEにも対応させるとなるとtableしかないのですが、ユーザーエージェントはブラウザだけじゃない・・検索エンジン(クローラー)もれっきとしたＵＡだと考えると、やはりtableではまずいでしょう。 　とすると「項目４や項目５の<li style="line-height:60px">の箇所を動的に変化させないといけない」に無理があると考えるのが本来でしょう。 　それよりは、以下のサンプルのように最大の高さですべてのdiv.nav>ol liの高さを固定するのが、横の項目の高さが一定になるので、利用者からするとわかりやすいと思います。 　HTML(ウェブページ)の最大の目的--どのようなＵＡでも利用できる--を考えると、犠牲にするものは、些細な問題のような気がします。 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿<title>サンプル</title> ＿<meta name="author" content="ORUKA1951"> ＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿<link rel="START" href="../index.html"> ＿<style type="text/css"> <!-- body { margin: 0; padding: 0; } div.nav{} div.nav ol,div.nav ol li{display:block;liststyle:none;padding:0;margin:0;} div.nav ol{width:310px;line-height:20px;border-top:blue solid 1px; } div.nav ol li ol{display:none;border:none;line-height:20px;} div.nav ol li{width:100px;float:left;border-bottom:solid blue 1px;position:relative;height:120px;} div.nav ol li ol li{border:none;height:20px;} div.nav ol li:hover{background-color: #c2f4a3;} div.nav ol li:hover ol{display:block;position:absolute;left:100px;top:0;width:100px;background-color:white;z-index:10;} div.nav ol li:hover ol li{background-color:#66FFFF;} li.noText span{visibility:hidden;} div.nav hr{clear:left;visibility:hidden;margin:0;height:0;} --> ＿</style> </head> <body> ＿<h1>サンプル</h1> ＿<div class="nav"> ＿＿<ol> ＿＿＿<li>項目１</li> ＿＿＿<li>項目２ ＿＿＿＿<ol> ＿＿＿＿＿<li>項目２-１</li> ＿＿＿＿＿<li>項目２-２</li> ＿＿＿＿＿<li>項目２-３</li> ＿＿＿＿</ol> ＿＿＿</li> ＿＿＿<li>項目３</li> ＿＿＿<li>項目４ ＿＿＿＿<ol> ＿＿＿＿＿<li>項目４-１</li> ＿＿＿＿＿<li>項目４-２</li> ＿＿＿＿＿<li>項目４-３</li> ＿＿＿＿</ol> ＿＿＿</li> ＿＿＿<li>項目５</li> ＿＿＿<li>項目６項目６項目６項目６項目６項目６項目６項目６項目６項目６ ＿＿＿＿<ol> ＿＿＿＿＿<li>項目６-１</li> ＿＿＿＿＿<li>項目６-２</li> ＿＿＿＿</ol> ＿＿＿</li> ＿＿＿<li>項目７ ＿＿＿＿<ol> ＿＿＿＿＿<li>項目７-１</li> ＿＿＿＿＿<li>項目７-２</li> ＿＿＿＿</ol> ＿＿＿</li> ＿＿＿<li>項目８ ＿＿＿＿<ol> ＿＿＿＿＿<li>項目８-１</li> ＿＿＿＿＿<li>項目８-２</li> ＿＿＿＿＿<li>項目８-３</li> ＿＿＿＿</ol> ＿＿＿</li> ＿＿＿<li class="noText"><span>項目なし</span></li> ＿＿</ol> ＿＿<hr> ＿</div> </body> </html>
#mainlinkbox li.link { position:relative; の後に次の2行を挿入してください。 zoom:1; vertical-align:bottom; zoomについては、haslayoutで検索してください。 vertical-alignは原因不明の対症療法です。baseline以外の値なら何でもかまいません。
#1回答者です。やはり指摘するべきか。　 font-family云々以前に、 <head> <body> <p>テスト</p> </body> </head> これは可笑しいでしょう・・・ <html> <head> <meta /> <link /> </head> <body> <div> <p>テスト</p> </div> </body> </html>
私も＃2さんと同じ意見です。質問分にあるままで、background-color:をとり、白がいいなら、htmlに移してはいかがでしょうか。ついでに、bodyのmarginを0にされることをお勧めします。 もう1つ、文書宣言が書かれていないのですが、過去互換では、htmlには背景を指定できません。宣言が、 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> や <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"> など、標準に準拠したモードになっているか、ご確認ください。 過去互換で、2つの背景にしたいなら、今現在上部か下部にあるボックスを上手く利用し横幅を100％とした、背景をつけられることをお勧めします。横幅100％とは、margin:0;border:0の状態で、html直下にあるものです。それもなく、わざわざつけなくてはならないなら、#1さんのような、box(divなど)をつけることになると思います。divもbody直下におけば、画面いっぱいの表現が可能です。
実際に、デザイナーとして働いています。 チラシなどを作成できるようになりたいのなら、ソフトを使えるようになるだけではなく、デザインも学べるような所がいいと思います。 ですので、「ヒューマン」か「デジハリ」、「バンタン」がオススメです。 どれも社会人向けのコースがあります。 グラフィックデザイン講座がいいと思います。 あと、イラレ、フォトショはびっくりするくらい高いので、講座にソフト代も含まれているものや、上記にあげた学校であれば学生料金で半額以下で購入できると思います。 参考になれば嬉しいです。
最新の Mozilla Firefox なら [Web コンソール] という標準の機能を使うと、そのページでどんなファイルが読み込まれたか簡単に確認できるよ。 https://developer.mozilla.org/Ja/Using_the_Web_C … JavaScript だから .js でフィルタをかけた画像を添付しておくね。 ちなみに、Ajax の意味は、ウィキペディアに書いてあるから、一度呼んでおいてもいいかも？ http://ja.wikipedia.org/wiki/Ajax 『Ajax ライブラリ』っていう言い方するときあるけど、それは、Ajax を使う人プログラマの人が、Ajax の機能を含む JavaScript ライブラリを指して使う言葉だよ。つまり、使い方と使う人がかなり限定されるということかな？
　いやはや・・・IE8のシェアはじわじわ減少して４０数パーセント--日本のバージョン別ブラウザシェアグラフ ( http://lhsp.s206.xrea.com/misc/browser-share-ver … )--、Web標準にほぼ準拠したとはいえ完全ではありませんが、IE9以降は、順次Web標準に近づいていくでしょう。 　Web標準ではtableのセルは、固定レイアウト ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )の場合、一行目で指定された幅で描画が開始され、あふれたデータは、overflow ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )に従います。初期値は[Initial:visible]ですから、「内容を切り抜かない。 すなわちブロックボックスの外側にもレンダリングされる。」のが本来の動作です。 　よって、そのセルにoverflow:hiddenを指定すればよいです。 ★ただ、他にもとてもおかしなところが・・ 　XHTML1.0strictはもとより、XHTML1.0Transitinal,HTML4.01Transitionalにも<nobr>は存在しません。 ★必ずAnother HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … )でチェックする癖をつけましょう。 　XHTML1.0strictでしたら <?xml version="1.0" encoding="utf-8"?> <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dt … <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ja" lang="ja"><!-- ※2 --> <head><title>オーバーラップされる</title></head> <body> <table border="1" style="table-layout:fixed;border-collapse:collapse;border:solid 1px black;" width="100px"> <tr> <td width="50px" style="overflow:hidden;border:solid 1px black;">テストデータ</td><!-- ※4 --> <td width="50px" style="border:solid 1px black;">入力</td> </tr> </table> </body></html> ※1)　XML宣言が必要です。 ※2) <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"> 　　　日本語の文書ですから 　　　 xml:lang="ja" lang="ja">です。 ※3)border="1" cellspacing="0" cellpadding="0" は書きません。スタイルシートで ※4)nobrはHTMLにはありません!! Web標準に直すことで、ほとんどすべてのブラウザできちんと、ほぼ同等に見えるはずです。なお、tdのstyle="border:solid 1px black;"はHEAD内に書いたほうが良い--一度ですむ。 ★1 著者はstrictで作成すべき ★2 その場合、非推奨要素や非推奨属性は使えない ★3 ブラウザは、そのような古い要素や属性もサポートしなければならない 　きちんと仕様書に書いてある。--ブラウザの★3の機能に頼って作成していると、IE9,IE10も含めて、また直さなきゃならない。 　HTMLは、どんな環境からもWebの情報を利用できるようにすべきだという方針の下に開発されている。例えば、様々な解像度や色深度のグラフィックディスプレイを持つPCや、携帯電話、モバイル機器、音声入出力機器、帯域が広いコンピュータや狭いコンピュータ、等の環境である。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 　HTMLでページを作らずにプログラムに頼る。 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )と、このように対応に苦慮します。 　Visual Studioに含まれる[Visual Web Developer]は、あくまでおまけですが、たとえそうでないにしてもHTMLやCSSの知識がないと、オーサリングツールはHTMLエディタ( http://ja.wikipedia.org/wiki/Web%E3%82%AA%E3%83% … )で作成する以上にとんでもないページが出来てしまいます。
＞やっとSCCとHTMLをコピーすれば良い事が分かり、無事作動を確認しました。 　了解です。ただHTMLの <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dt … 　はシステムの都合で、書き換わっていますから <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "httｐ://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"> 　　　★httｐ:はhttp:と直すこと・・↑↑↑ 　　　　　^^^^^^^^^^^^^ ですね。 　No.6のソースを、CSSなしでよく読んでみてください。難しいところや無駄なものはありません。class名のheader,footer,section,navは、HTMLで良く使われるclass名です。(box_a)なんてのは使わないものです。--オーサリングツールのせいでしょうが-- 　HTML4(XHTML1.0,XTHML1.1も)では文書構造を示す要素(を示すタグ)が、決定的に不足していたため、文書構造に従ったマークアップが普及しなかった反省から、次期バージョンのHTML5(勧告予定は2022年)で導入される要素名でもあります。 　annotation[=注釈,脚注]は、私が良く使うもの。 　そのうえで、HTMLだけをしっかり読み解いてください。文書構造に従ったマークアップの意味をしっかり理解してください。HTML4.01の仕様書を合わせて読んでおくとよいです。 　そのうえで、CSSを読んでください。今回の質問はfloatの制御方法ですが、floatの本来の使い方も理解できると思います。古いIEのためにfloatを使うブロック配置もありますが、将来は無用になる方法です。 　あなたが、最短ルートで頂上にたどり着けるよう、私の思いつく限りのHTMLでありCSSです。もっぱら文書構造に従ったHTMLと、そのプレゼンテーション(表現)を指示するCSSのすみわけをしっかり理解してください。 　私も、長い道のりを脇道にそれながら十数年歩んできました。
これを試してうまくいけばANo2さんのものを試したらいいとおもう あと質問者の技術レベルがわからないのですが <>とか"とか抜けてないですよね？ <html> <head> <style> img,p{float:left;} </style> </head> <body> <div id="b"> <img src="画像１"> <p>テキスト</p> <img src="画像２"> <p>テキスト</p> </div> </body> </html>
出来ません。 あくまで、ユーザー側の選択になります。 作者にそこまで制約されたくないし、・・著者が制約してはならない。 他のブラウザでも同様で、ユーザー側の設定でヘッダーやフッターに何を印刷するかも細かく決められます。 　印刷が想定されるページなら、印刷用スタイルシートを用意されていると思いますが、印刷用のスタイルシートで、HTML内のheaderやfooterを印刷しないとか、navを最初のページだけ印刷するとか、section毎に改ページをするか、トンボを印刷するとかは指定できます。 [HTML4] <body> 　<div class="header"> 　</div> 　<div class="section"> 　</div> 　<div class="section"> 　</div> 　<div class="footer"> 　　<div class="nav"> 　　</div> 　</div> </body> [HTML5] <body> 　<header> 　</header> 　<section> 　</section> 　<section> 　</section> 　<footer> 　　<nav> 　　</nav> 　</footer> </body>
Rewrite を使えばいけると思います。 httpd.conf を変更できない、分からない場合は、サーバ管理者に mod_rewrite、rewrite_module が使用可能か問い合わせてみてください。 ■設定例 httpd.conf # モジュールをロードする LoadModule rewrite_module modules/mod_rewrite.so # 対象ディレクトリの設定 <Directory ?> Options FollowSymLinks AllowOverride FileInfo Allow from all </Directory> .htacess RewriteEngine On # IP 220.10.10.1 RewriteCond %{REMOTE_ADDR} 220\.10\.10\.1 RewriteRule ^index\.html$ /remote220.10.10.1.index.html [L] # IP 220.10.10.2 RewriteCond %{REMOTE_ADDR} 220\.10\.10\.2 RewriteRule ^index\.html$ /remote220.10.10.2.index.html [L] ■解説 RewriteCond では、最初にテスト対象値（文字列）と正規表現のパターンを指定します。 RewriteCond テスト対象値 パターン RewriteCond %{REMOTE_ADDR} 220\.10\.10\.1　では、リモート（ブラウザ、プロキシ、ロボット）のアドレスをパターンと比較し一致した場合に、次の RewriteRule が適用されます。 RewriteRule では対象とするパスのパターン（.htaccess の置かれたディレクトリからのパス）と、書き替え後のパス（ドキュメントルートからのパス）と[L]を指定します。 RewriteRule アクセス時のパス 書き換え後のパス [L] [L] の意味はパターンに一致し書き換えを実行した場合、後続の処理を行わないオプション指定です。 RewriteRule ^index\.html$ /remote220.10.10.1.index.html [L] では、.htaccess のあるディレクトリの index.html ファイルに対するアクセスを、 (ドキュメントルート)/remote220.10.10.1.index.html に書き替えるようにしています。 書き換えが行われた場合、変更後のパスのファイルが返され、書き換えが行われない場合、元のパスのファイルが返されます。なお、この処理はサーバ側で完結するため、クライアントに表示される URL はどちらも同じです。 詳細については下記リファレンスを参照してください http://httpd.apache.org/docs/current/mod/mod_rew … http://httpd.apache.org/docs/2.0/misc/rewritegui …
＞、『プログラムから開く』からホームページビルダーを選択してしまったのですが、それから 　なら、その逆をすればよいかと 　Zipファイルを右クリックして、、『プログラムから開く』から、「Compresse・・・」を選択する。 　でも、お勧めは解凍圧縮ソフトをひとつ入れておく。 Lhaplusの詳細情報 : Vector ソフトを探す！ ( http://www.vector.co.jp/soft/win95/util/se169348 … ) 　とか、
＞ソースは同じで外部ファイルだけパソコン用と携帯用、それぞれ読み込む形にしたいのですが、 　それはすでに何度も・・ /* 固定(永続的)スタイルシート すべてのUA,代替スタイルシートに適用 */ <link rel="styleSheet" type="text/css" href="./styleSheet/default.css"> /* screenUA(いわゆるPC用やi-phone,i-padのブラウザ) */ <link rel="styleSheet" type="text/css" media="screen" href="./styleSheet/screen.css"> /* 携帯電話など固定フォント,PDA用スタイルシート */ <link rel="styleSheet" type="text/css" media="tty,handheld" href="./styleSheet/tty.css"> <HEAD>内に書くときも <style type="text/css" media="screen"> <!-- screen用をここに書く --> </style> <style type="text/css" media="tty"> <!-- 携帯用をここに書く --> </style> 外部スタイルシートに @media{}を使って書く方法もありますが、対応機種が少ないかも --> 14.2.4 出力メディア型 ( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … ) 7.2 媒体依存型のスタイルシートを指定する ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )
<IMG SRC~~>の部分を、Javascriptのdocument.write('<IMG SRC~~>');などで書き出してはいかがでしょうか。 検索エンジンの類は、通常Javascriptは実行しませんので。 （もちろんブラウザによっては画像を表示出来なくなりますが……）
単純に background:url() 50% 50% no-repeatでよいのでは? 色と背景 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )
スタイルシートで、:afterとattr(alt)がスマートかも、スタイルシートで行うなら、せっかくなのでtableを使った配置も見直したほうがよいかも
[ANo.5] 補足 > 個人的なサイトというより個人企業です。ショッピングサイトも含めて作りたいのです。 個人企業なら、ウェブを自前で用意するより、 売る商品に時間と労力を注いだほうがいいとおもうよ？ Google でキーワード「出店費用」「Amazon」「楽天」で、 http://www.google.co.jp/search?q=%8Fo%93X%94%EF% … 検索トップのページ。 出店料（出品料）におけるAmazonと楽天の比較｜ネットショッピングのあれこれ http://ameblo.jp/netconsulting/entry-10319733360 …
ちゃんと、前の質問で回答が付いてますよ。「プレイヤーの場所は」って。 このサイトについては ・Javascriptの引数として指定 ・noscriptでobjectタグの属性として指定 の2通りが使われています。スタイルシートは関係ありません。 作者の自由にできるjavascriptはともかく(ここのについては容易に予想が付くものですが) objectタグのものは、規則通りのものです。 これについても、前の質問で「外部埋め込みコンテンツの扱い方ついてもう少し学ばれたほうがいいでしょうね」と回答がついている通りだと思います。
>includeって外部のURLを取得して表示できないと思いますが？ わからなかったら公式リファレンスを読もう。 http://www.php.net/manual/ja/function.include.php includeでのリモートアクセスについて書かれている。 でfopenでリモートファイルに対して読めるようになっているなら(URL fopenラッパーが有効)な状態だと 同時にincludeでも利用できる様に思えるけどね。 なんで公式リファレンスすら読まずにオウム返しのようにこんな返答するのだろうか? >SSIでも無理ですよね。 あっこれは俺の完全なミスだ。すみませんね。
単純に、プレイヤーにパラメータを使って素材を読み込んでいるだけです。 プレイヤーの場所は http://www.sekisuihouse.com/sumaijyuku/trial/pla … 外部埋め込みコンテンツの扱い方についてもう少し学ばれたほうがいいでしょうね。 普通なら Object Embed で済むことをわざわざ面倒なパラメータ形式にしているんですから、映像素材のダウンロードを禁止しているということになります。 なので直接ここで本体（素材）の場所は教えられません。 参考URL：http://www.adobe.com/jp/devnet/activecontent/art …
それだけではわかりません。 ブロック要素なのか、インライン要素なのか、置換要素なのか、非置換要素なのか? 標準モードだと、インライン要素は内容「置換要素を含む表示済み内容」を参照します。それを囲むブロックではありません。 詳しくは、 8.1 ボックスの寸法（Box dimensions） ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 10. 視覚整形モデル詳細 ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … ) 　および、それぞれの用語のリンク先を参照してください。 　正確に書かれています。
＞<a href="#"> ＞<input type="submit" id="aboutbutton" value="ボタンの名前"> ＞</a> 　それはないでしょう。(^^) <form action="./cgi-bin/***"> 　<input type="submit" value=""> </form> 　もしくは <a href="./**?name=test">送信</a> 　とかでしょう。 　その前後のソースも必要ですが、たとえば <p class="submit"> 　<a href="./**?name=test">送信</a> </p> 　だとすれば、 p.submit{ 　margin-left:2em; 　line-height:30px; } p.submit a{ 　display:block; 　width:6em; 　height:20px; 　position:relative; } p.submit a:before{ 　content:url(画像のURL); } とか、古いブラウザにも対応するなら p{ 　background:url(画像URL) no-repeat 0 0; 　padding-left:40px; } とか・・・ 画像を含めてリンクさせたければ p.submit{ 　width:100px; 　height:40px; } p.submit a{ 　display:block; 　width:100%; 　height:100%; 　margin-left:40px; } とか・・・・。 p.submit:before{}で画像を追加しても良いでしょう。 様々な方法がありますが、これはサイト全体や目的、想定するユーザーエージェントなど様々な条件を勘案して総合的に判断するしかないでしょう。
いわゆる外部スタイルシートを使います。 そこで、 body{background-color:#eee8aa;} でよいです。ただし標準では隙間が開くことがあるので html,body{padding:0;margin:0;background-color:#eee8aa;} としておきます。 　通常は背景画像や、font-family,line-height,colorなど、継承されるプロパティも一緒に固定スタイルシート(永続スタイルシート)書いておきます。 ★HTMLはきちんと文書構造にしたがってマークアップして、デザインのためにclass名をつけたりIDをつけることは間違いです。 　タグスープになっちゃいます。典型的な悪い例が<div class=wrap">のように意味のない(非セマンティックな)マークアップです。(これは某オーサリングツール由来のものです。)HTML4.01が登場して10数年になろうというのにいまだに・・改善されていない。 [HTML] <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> <meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> <title>Untitled</title> <meta name="author" content="IRUKA"> <meta http-equiv="Content-Style-Type" content="text/css"> <link rev="made" href="mailto:ORUKA1951@ichiya.com" title="send a mail" > <link rel="stylesheet" type="text/css" href="./styleSheet/standard.css"> <link rel="stylesheet" type="text/css" media="screen" href="./styleSheet/screen.css"> <link rel="START" href="../index.html"> <link rel="NEXT" href="./page1.html"> <link rel="SHORTCUT ICON" href="/favicon.ico"> <link rel="ICON" href="/favicon.ico"> </head> <body> <div class="header"> <p class="nav"><a href="./index.html">トップへ</a></p> <div class="hgroup"> <h1>title</h1> <h2>subTitle</h2> </div> </div> <div class="section"> <h2>section Title</h2> <p> </p> </div> <div class="footer" id="DOCUMENT_INFORMATION"> <dl class="document-version"> <dt id="FIRST-PUBLISHED">First Published</dt> <dd>2005-06-10</dd> <dt id="LAST-MODIFIED">Last Modified</dt> <dd>2005-06-10 12:00:00 (JST)</dd> </dl> </div> </body> </html> [CSS]standard.css html,body{margin:0;padding:0;} body{ font-family:"ＭＳ Ｐ明朝","平成明朝",serif; line-height:1.4em; } p{text-indent:1em;} [CSS]screen.css body{ background-color: #eee8aa; } div.header, div.section, div.footer{ width:80%; margin:0 auto; background-color:white; }
ウェブ標準--文書構造に従ったHTMLとCSS、WAI---だと、後で好きなようにデザインを変更できます。i-padでのアクセスが多ければ、i-pad用のものを作ればよい。だからといってi-pad用にHTML用に書き直す必要もない。携帯電話用のスタイルシート(media="tty")も追加できる。 このHTMLは、点字端末、読み上げブラウザ(スクリーンリーダー)、テレビ・・いずれもOK そしてなによりもCSSも簡潔。 [CSS] 2column_navTop.css @charset "Shift_JIS"; div.header, div.section, div.footer{ ＿min-height:100px; ＿max-width:1020px; ＿margin-top:20px; } div.header{ ＿text-align:center;background-color:yellow; } div.section{ ＿padding-right:210px; } div.section div.annotation div.article{ ＿width:200px; ＿position:absolute; ＿top:140px; ＿right:0; ＿height:300px; } div.section div.annotation div.nav ol, div.section div.annotation div.nav ol li{ ＿display:block; ＿list-style:none; ＿line-height:20px; ＿height:20px; ＿margin:0;padding:0; } div.section div.annotation div.nav ol{ ＿position:absolute; ＿top:0;left:0; ＿width:100%; } div.section div.annotation div.nav ol li{ ＿width:18%; ＿float:left; ＿text-align:center; ＿margin-right:2px; } div.section div.annotation div.nav ol li a{ ＿display:block; ＿width:100%;height:100%; ＿text-decoration:none; ＿background-color:green; } div.section div.annotation div.nav ol li a:hover{ ＿background-color:yellow; }
あるキーワードでPCからとAndridのスマートフォンから検索してみたけど検索結果(順番も)は一致していますね。
画像の解像度が異なるためだと思います 私の場合、画像の解像度により一部スタイルシートを変更していますが。 簡単の対処は、ＨＰをセンタリングでは ブロックレベル要素をセンタリングする方法 http://www.mozilla.gr.jp/standards/webtips0004.h … 参考URL：http://www.mozilla.gr.jp/standards/webtips0004.h …
<div style="background:url( );">テキスト</div> 通常はこういう場合の事？ それなら方法は色々あるけど、良く使われるのが、 <div style="background:url( ); text-indent:-9999;">テキスト</div> visibility:hidden; でも display:none;でも良いですし、positionとかその他・・・
相対パスだろうが絶対パスだろうがまったく関係ありません。ユーザーエージェントは、HTMLの内容から、リンク先のサーバーまで含んだ絶対パスを算出して次の要求をします。 そのファイルが 　http://hoge.com/abc/efg.html だとして、その中のリンクが ./hij.html だったら、HTTPサーバーであるhttp://hoge.comに対して /abc/hij.htmlを要求 　すなわち、http://hoge.com/abc/hij.html と同等 ../hij.html だったら、http://hoge.comに対して /abc/hij.htmlを要求 　すなわち、http://hoge.com/hij.html と同等 /klm/hij.html だったら、http://hoge.comに対して /klm/hij.htmlを要求 　すなわち、http://hoge.com/klm/hij.html と同等 　私は、ローカルサーバーですから、絶対に絶対パスで記述しています。絶対パス(/)からだと、製作中のファイルをどこに移動しても中身をいじらなくてすみます。特にCGIをローカルでテストするときには必須です。 　具体的に言うと <a href="/index.html">トップページへ</a> <img src="/images/photo.jpg"> <link rel="stylesheet" type="text/css" href="/styleSheet/standard.css"> と書いたテンプレートをどこで作成しても、完成してテストが済んだら本来の場所に移動できます。 ★逆に、ローカルサーバーを使わないときは、 <a href="/index.html">トップページへ</a> <img src="/images/photo.jpg"> <link rel="stylesheet" type="text/css" href="/styleSheet/standard.css"> では、リンクしませんね。
ヘッダー、文字コードともに問題なさそうです。 以下のようなソースではどうなりますか。 <html lang="ja"> <head> <meta http-equiv="content-type" content="text/html; charset=UTF-8"> <meta http-equiv="content-style-type" content="text/css"> <link rel="stylesheet" type="text/css" href="css/style.css"> </head> <body> <p>テストです。</p> </body> </html> ・ドキュメントタイプを取ってみた。 ・余計な文字コードが入らないようにbody内を簡素にしてみた。 もしかするとbody内にHTMLとして認識できない文字コードなどが含まれているのかもしれない、と思った。あるいはドキュメント宣言がうまく合っていないかどうか。 すべて憶測です。 最初は改行コードも疑いました。文字化けの原因としては文字コードの次に疑うべきところです。 でもメモ帳だっていうので特に改行コードは変化しないだろうから、そうではないのだと思う。 もし上のソースでも「ソースが表示」されてしまったり「文字化け」をするならば、ローカルの設定が問題になると思う。 今度は ・IEのバージョン ・WindowsOSのバージョン ・セキュリティソフトの有無、その種類、そして設定 ・レジストリや設定をいじっているかどうか、いじった場合それはどこか ・インターネットオプションのセキュリティをいじっているかどうか ・サーバーにそのファイルをアップすると表示できるかどうか（出来る場合はローカルの問題と限定できる） ・拡張子がhtmlならばIEのアイコンになっているかどうか。（症状がtxtをIEで表示したときに似ているのでファイルの状態を知りたい） ・拡張子をhtmlではなくhtmにしてみる（これで表示されれば拡張子htmlに何かしらの制限がローカルでかかっている） ・他のパソコンだとどうなるか（もしこれで差異が出ればローカルの問題で、差異がなければファイルの問題で、ソースの問題ではない） ・もしローカルの問題ならば、デザインを表示できなくなった前後に何かが絶対に変わっているはず。アップデートか、アプリケーションのインストールか、あるいはシステムエラーか。問題がありそうならば「システムの復元」で問題がなかったころまで戻ってみる。システムに関わるので自己責任で。 ・自己責任でIEtesterを入れてブラウズしてみる。 http://www.my-debugbar.com/wiki/IETester/HomePage などを試した情報が欲しいです。
スマートフォンではなくて、他のブラウザは大丈夫ですか？ 　firefoxｓとかOpera、GoogleChrome,safari,IEの標準モードは？？ 　通常は、スマートフォンのブラウザ(にもよりますが)はscreen用のスタイルシートでよいはずです。(ただしリキッドデザインにしておく) 　いくつか擬似クラスを認識しないなどブラウザによって差がありますからあまり凝ったCSSは書けませんか、position:absoluteは有効です。 　もし別のスタイルシートを用意するなら、i-phone用のスタイルシートを用意する。 iphoneやiPadに対応したWEBサイトを作るスニペット11選 | KRUZ-GRAPHIX ( http://kruz-graphix.com/2010/05/code-snippets-to … ) 　7.iPhoneだけのCSSを指定する
アンケートフォーム自体をCGIから作成して、エラーがあれば再びエラー箇所を指摘するよう書き換えてフォームを作成。すべてＯＫなら、「この内容で送信します」と確認画面を出せば良いです。 [起動] 　｜ ＜入力有無判断＞ 　｜no　　　　｜yes 　｜　　　＜データ確認＞メールアドレス整合性/必須入力欄 　｜　　　error｜　　　　｜ok 　↓　　　　　 ↓　　　　｜ 　［フォーム出力]　　［確認画面］ 　　　　　　　　　　　　 ↓ 　　　　　　　　　　　　送信 フォームのHTMLは、__END__の後に書いておけば良い。入力によって変わる部分は適当な目印をつけておく。
リンクがきちんと読み込まれていないようですね。 5 作成したウェブサイトの影響 ( http://ja.wikipedia.org/wiki/%E3%83%9B%E3%83%BC% … ) ならよいかな？ 　私の周囲のプロでホームページビルダーを使ってウェブページを桜精している人はいません。持っていたとしても、ビルダーで作成したページを裸にしてしまうためか、画像などを作るためです。専用ソフトのほうがよいですが、コスト的に安いので。 　大事なことは、HTMLを正しく作成することです。これはオーサリングツールすべてにいえることですが、文章を読み解き、内容を理解して、最適な要素名(タグ)を選択してマークアップすること・・・これだけは何を使おうと著者か、読解力のある人でないとできません。 　それさえしっかりできていれば、スタイルシートでどのようにもデザインできます。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから HTMLは、常に構造的マーク付けを規定するところのSGMLをルーツに持っている。HTMLの性質上、プレゼンテーションに関する要素や属性は、次々と他の機構、とりわけスタイルシートに置換えられていく。 また、文書の構造をプレゼンテーションと切り離すことで広汎なプラットフォームや多様なメディアでの文書提供コストを低下でき、文書の改訂も容易になるということが、経験的に知られている。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［Introduction to HTML 4 (ja)( http://www.asahi-net.or.jp/%7Esd5a-ucd/rec-html4 … )］より 　は、「文書の構造さえきちんとマークアップされていれば、様々にデザインできる」という意味です。 　残念ながら、将来にわたってスタイルシートに対応できるツールはできないでしょう。原理的に無理な話です。 　私は、スタイルシートを書くときには ・Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ・The W3C Markup Validation Service ( http://validator.w3.org/#validate_by_input ) も通過して、HTMLは完成していますから、HTMLを見なくてスタイルシートが書けます。 　たとえば div.section div.article{font-size:0.9em;border:solid gray 1px;} div.section div.article.note strong{color:red;} 　は 「本文中の関連記事は灰色線で囲み、文字サイズを0.9で」 「本文中の関連記事(article)、かつnote(注意書き)内の強調文字列は赤くしよう」 　とか・・、こんな単純なことすら、ツールではできるはずもないですね。 ましてや、HTMLに手をくわえないで(加えてはならないし) ・3カラムでデザインしていたものを2カラムにしよう ・i-phone用に狭い画面でも表示できるスタイルを作ろう ・印刷用に章番号をつけよう 　などは不可能です。 　だからプロは決して使わない・・ 　今までのものはそのまま、今後もフルCSSにしても、あまり手を加えずにそのままテンプレートに流し込むほうがよいでしょう。下手に手を加えると悲劇的になります。
(1)について VMWareがあるのであればあとはWindowsのOSを用意すれば可能です。ただしもうXPは売られていませんし、Vistaも入手できるかわかりません。費用がかかってもよいのならMSDNを購読して各OSをダウンロードしてVMWareに仮想マシンを作ればよいと思います。 http://msdn.microsoft.com/ja-jp/subscriptions/dd … OSだけであれば「MSDN Operating Systems (99540円)」でいいと思います(英語版も日本語版もダウンロード可能)。 Macについては、(Mac OSX 10.6の)現時点では仮想化は認められていないのでMacを購入するしかありません。 ※MacでWindowsを仮想化して使用することはできますが、Windows上でMacを動かすことはできません(ライセンス違反となるため)。
HPではなくて、ウェブページだとして。 　HPはヒューレッドパッカードの略号です、ホームページはブラウザを起動したときに表示されるHOME(出発点・故郷)ページです。派出してサイトのトップページをホームページと言うこともあります。読者のうちは、他の意味としても問題ないですが作者の立場となると、混乱して通じなくなります。ホームページへ戻る??ってどのページからどのページへ?? 　HTMLで書かれたウェブページの背景ですが、まずデザインする前に文書構造に従っっ正しく書かれたHTMLがあったとして、スタイルシートでデザインを決めます。HTMLでかかれたウェブ標準のくかもりがあるとして、 　スタイルシートは body{ background:rgb(255,255,0) url([画像へのパス] center top no-repeat;} } と書くと簡単です。分けて書くと body{ background-color:rgb(255,255,0); background-repeat:no-repeat; background-position:center top; } となります。 HTMLの<head></head>内に書くときは、 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> 　<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> 　<title>サンプル</title> 　<meta name="author" content="ORUKA1951"> 　<meta http-equiv="Content-Style-Type" content="text/css"><!-- スタイル言語の宣言は必須 --> 　<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > 　<link rel="START" href="../index.html"> 　<style type="text/css" media="screen"><!-- typeの記述は必須 --> <!-- /* 古いブラウザから隠すため */ body{ 　background:rgb(255,255,0) url([画像へのパス] center top no-repeat;} } --> 　</style> </head> となります。 　外部に置く場合は、 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> 　<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> 　<title>Untitled</title> 　<meta name="author" content="IRUKA"> 　<meta http-equiv="Content-Style-Type" content="text/css"><!-- 必須 --> 　<link rev="made" href="mailto:shizuka@ichiya.com" title="send a mail" > 　<link rel="stylesheet" type="text/css" media="screen" href="./styleSheet/standard.css"> 　<link rel="NEXT" href="./page1.html"> </head> と言う風に書きます。 media記述は、screen端末(パソコン用のブラウザ)に限って適用させるという意味です。あまり凝ったことしないときはなくても良い。これを書いておくと携帯電話でアクセスしたときには素のHTMLとして表示される。 なお、<center>タグは、非推奨です。また、内容的に意味のない画像を<img>で指定するのは誤りです。また、内容に直接関係しない背景の場合はHTML内に記述するのではなく、スタイルシートで指定します。 いずれにしても、いきなりその質問をする前に はじめてのWebドキュメントづくり ( http://www.asahi-net.or.jp/%7Esd5a-ucd/www/ ) などで、正しいHTMLを身に着けないと、結局スタート地点に戻って全部直さなきゃならなくなります。
.sogo a:hover { background-image: url("../images/sogo_on.jpg"); } .sogo a:active { background-image: url("../images/sogo_on.jpg"); } と同じもの指定してるから変わらない・・・・
こういうイメージですか？ http://www.yensdesign.com/tutorials/anchornaviga … 以下のサイトに記載されていますが、JavaScriptでAjax通信の知識が必要になります。 http://blog.creamu.com/mt/2009/12/ajax_1.html
リンク先のHTMLもCSSもあまりに酷いので・・ javascriptで、カレントディレクトリ、カレントファイルを取得してHTMLを書き直します。 カレントディレクトリにはclass名をcurentDir,ファイルにはcurentFileを追加します。 ウェブ標準でのHTMLとCSS・・どちらもとってもシンプルです。--ウェブ標準ですから当然ですが・・ ★Another HTML-lint gateway ( http://openlab.ring.gr.jp/k16/htmllint/htmllint. … ) ★The W3C Markup Validation Service ( http://validator.w3.org/#validate_by_input ) ★W3C CSS 検証サービス ( http://jigsaw.w3.org/css-validator/#validate_by_ … ) で検証済み。 下記ソースは、タブインデントを＿＿に置換してアルルので戻して。 CSSは、下記を参考に「ウェブ標準なのでCSSもわかりやすいはず」 カスケーディングスタイルシートですから、カスケーディング機能を使うべきです。 一切無駄なclass名やidは使われていませんからHTMLもCSSも簡単でメンテナンスも容易 <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html lang="ja"> <head> ＿＿<meta http-equiv="content-type" content="text/html; charset=Shift_JIS"> ＿＿<title>サンプル</title> ＿＿<meta name="author" content="ORUKA1951"> ＿＿<meta http-equiv="Content-Style-Type" content="text/css"> ＿＿<link rev="made" href="mailto:oruka1951@hoge.com" title="send a mail" > ＿＿<link rel="START" href="../index.html"> ＿＿<style type="text/css"> <!-- /* div.header内のdiv.nav内のol,liについて */ div.header div.nav ol, div.header div.nav li{ ＿＿display:block;list-style:none; ＿＿padding:0;margin:0; ＿＿line-height:30px; } /* 枠線をつける */ div.header div.nav li{ ＿＿border:solid 1px blue; } div.header div.nav ol{ ＿＿width:200px; } /* 下位のliは枠線を消す */ div.header div.nav ol li ol li{ ＿＿border:none; } div.header div.nav li a{ ＿＿display:block;margin:0; ＿＿background-color:white; ＿＿padding-left:0.5em; ＿＿text-decoration:none; /* 子孫セレクタで下位のliを消す */ /* 詳細度[25] div.header div.nav ol li ol{ ＿＿width:178px; ＿＿display:none; ＿＿margin-left:20px; } /* liにhoverするとdisplayを変える */ /* 詳細度[35]が高いので優先 */ div.header div.nav ol li:hover ol, div.header div.nav ol li.curentDir ol{ ＿＿display:block; } }/* おまけ */ div.header div.nav li.curentFile a{color:red;} div.header div.nav li.curentFile a:after{content:" (現在地)";} div.header div.nav li a:visited{background-color:gray;} div.header div.nav li a:hover, div.header div.nav li a:focus{background-color:green;} div.header div.nav li a:active{background-color:lime;} div.header div.nav li a:visited:after{content:" (済み)";} --> ＿＿</style> </head> <body> ＿＿<div class="header"> ＿＿＿＿<h1>サンプル</h1> ＿＿＿＿<div class="nav"> ＿＿＿＿＿＿<ol> ＿＿＿＿＿＿＿＿<li><a href="./abc/index.html">あいうえお</a> ＿＿＿＿＿＿＿＿＿＿<ol> ＿＿＿＿＿＿＿＿＿＿＿＿<li><a href="./abc/efg.html">かきくけこ</a></li> ＿＿＿＿＿＿＿＿＿＿＿＿<li><a href="./abc/hij_2.html">さしすせそ</a></li> ＿＿＿＿＿＿＿＿＿＿＿＿<li><a href="./abc/klmn.html">たちつてと</a></li> ＿＿＿＿＿＿＿＿＿＿</ol> ＿＿＿＿＿＿＿＿</li> ＿＿＿＿＿＿＿＿<li class="curentDir"><a href="./efg/index.html">なにぬねの</a> ＿＿＿＿＿＿＿＿＿＿<ol> ＿＿＿＿＿＿＿＿＿＿＿＿<li><a href="./efg/abc.html">はひふへほ</a></li> ＿＿＿＿＿＿＿＿＿＿＿＿<li class="curentFile"><a href="./efg/efg.html">まみむめも</a></li> ＿＿＿＿＿＿＿＿＿＿</ol> ＿＿＿＿＿＿＿＿</li> ＿＿＿＿＿＿＿＿<li><a href="./hij/index.html">やゆよ</a> ＿＿＿＿＿＿＿＿＿＿<ol> ＿＿＿＿＿＿＿＿＿＿＿＿<li><a href="./hij/abc.html">らりるれろ</a></li> ＿＿＿＿＿＿＿＿＿＿＿＿<li><a href="./hij/efg.html">わゐうゑを</a></li> ＿＿＿＿＿＿＿＿＿＿</ol> ＿＿＿＿＿＿＿＿</li> ＿＿＿＿＿＿</ol> ＿＿＿＿</div> ＿＿</div> </body> </html>
LANで接続しているなら、単純に共有ホルダーに移動したらよいのでは？ 　本来は、いずれかまたは別途パソコン(スペックは低くてよい)を用意して、ローカルサーバーを作るべきです。いずれCGIや.htaccessなどもテストしなくてはならなくなる。 　私は、サイト管理用に一台のパソコンの専用のパーテーションを用意して、CYGWIN,perl,apache,shやbashのシェルなどを作っていて、作業用のパソコンから作業しています。firefoxのアドオンにServer Switcher( https://addons.mozilla.jp/firefox/details/2409 )など、開発者向けツール( https://addons.mozilla.jp/firefox/extensions/dev … )がたくさんありますし。 　 　
googleアナライズのルールはあまりよく知りませんが、 bodyの末尾に追加したいのであれば、 /wp-content/themes/xxxxx/footer.php ※xxxxxは使用しているテンプレートの名前 （wordpressフォルダ内をfooter.phpで検索すればいくつか出てくるはずです） の</body>タグの手前あたりに入れれば、 全ページに表示されるようになると思います。
別にすべて自分でする必要はないでしょう。 外注のSE使えばいいですからね。 今からプログラムの勉強するなら、頼んだ方が効率的ですよ。 そりゃ、何か１つ実装するために何万、何十万とかかりますから出来るにこしたことはないですが そんな勉強してるまに、あなたの考えていることは誰かに先にされるでしょう。 まあ、だいたい、普通の人が思いつくようなことはどこかの誰かがやってますよ。 ブレイクするかしないかだけの事でしょうね。 Twitterのようなサービスも昔Googleがやってましたが、ブレイクしませんでしたし。 ただ、ホームページを簡単に作るツールや自動で無料ブログを作るようなツールなんかでも数百万かかりますから、金策も必要ですけどね。 簡単なSNSならワードプレスにプラグイン入れるだけで作れますよ。
質問の意味が理解できないので、コメントがつかないのでしょう。 ものすごく想像を働かせてMovable Typeのperlmoduleの編集の話だとして・・違っていても仕方ない。 　loclatimeあるいはgtimeの配列から、値を取得して、コンピューター日時を西暦や月になおして挿入すればよい。
もう一点 ＞SSL対応ページについて質問です。SSLに対応させるページはリンクや画像などすべてフルパスにするということで、 　の意味が不明です。 　ＳＳＬは単に信号のやり取りを暗号化するだけですから、その必要はありません。 　それより問題になるのは、SSLで提供されているページで追加して読み込まなければならないファイルが、SSL以外だと「ブラウザのセキュリティチェックにかかっていちいち許可を与えないと読み込まれない」場合があるのです。 　もちろんすべての関連ファイルを同じSSLで提供するのなら、フルパスの必要はありません。(ファイルへのパスはブラウザが自分で判断してくれます) 　別にSSLだからと言うわけではなく、異なるホストへのリンク（参照ＳＲＣではない）、異なるホストを経由して提供するファイルは、当然のことながらフルパスでなければなりません。 　要は、質問の意味がよくわからないということです。
＞IEではうまくいかないことが多いですが、そこら辺は柔軟に対応してゆきたいと思います。 　いまやIE6は、3.64% 日本のバージョン別ブラウザシェアグラフ （StatCounter Global Statsより） ( http://lhsp.s206.xrea.com/misc/browser-share-ver … ) 無視せざるを得ないシェアまで落ち込んでいるとよいかと 「IE６以前のブラウザは表示が崩れるばかりかセキュリティ上も問題があるので、他の新しいブラウザをご利用ください」とメッセージを入れている。 　IE7以降なら、DOCTYPE スイッチで標準モードで動作するようにしています。 　先のサンプルもIE7以降では問題ないはずです。IE6も考慮すれば内容的に(強制的に)div.section div.sectionを大きくしておけばよいでしょう。 　floatを使う方法もありますが、floatは本文中で使うために使いたくないですね。
No.2です。 style.css以外にスタイルシートを使っていませんか？ 使っていたら <link type="text/css" rel="stylesheet" href="base.css" /> みたいに追加をしたらいいのですか・・・。 背景が表示されないのは画像までのパスが通っていない、または画像自体がない。 でしょうか・・・。
fon-sizeの指定方法はあってますから、その前(font-familyなど)の記述にエラーがあるとか、文字コードがあってないとかだと思います。プロパティの宣言の順番を変えて確認してみる。 HTML5だと <section> 　<nav> 　　<p><a href="#">＜戻る</a></p> 　</nav> 　<section> 　　<h1></h1> 　</section> </section> 　でなきゃ変ですね。<div class="main"><div class="clear">なんて、TABLEを使うのと同じ穴の狢(ムジナ)のマークアップへの反省から改定されるのがHTML5ですから。<div class="clear">なんてHTML5を否定している。ましてやclass="right"なんて酷すぎます。 　基本的にdivは使わないと考えたらよいです。 　.rightなんて書き方は、CSS1への後方互換で、本来は単純セレクタ(全称セレクタとタイプセレクタ)につなげて書く。 【引用】＿＿＿＿＿＿＿＿＿＿＿＿ここから 全称セレクタが単純セレクタの唯一の構成条件ではない時、アスタリスクを省略することができる。 ￣￣￣￣￣￣￣￣￣￣￣￣￣ここまで［セレクタ( http://www.swlab.it.okayama-u.ac.jp/man/rec-css2 … )］より 　↑CSS1との後方互換のために設けられたルール 　当然、 .right {float:right;} .r20 {margin-right:20px;} .t30 {margin-top:30px;} .b30 {margin-bottom:30px;} な書き方はしない 　このマークアップのままだと div.mainContens a span.right.r20.30.b30 {float:right;margin:30px 20px 30px 0;} でよい。　 <section> 　<nav> 　　<p><a href="#">＜戻る</a></p> 　</nav> 　<section> 　　<h1></h1> 　</section> </section> と、文書構造を!!明確!!に書くのが【ＨＴＭＬ５】の基本中の基本、そのために多くの構造化要素やセマンティク要素が追加された!!! よってスタイルシートはCSS2で書けば section nav {width:100px;float:right;margin:20px 30px 30px 0;clear:right;} section section{width:100%;} body section{font-family:・・・・;font-size:12px;width:320px;} /* 下のように書くと section section{width:100%;}は要らない */ body>section{font-family:・・・・;font-size:12px;width:320px;} ★HTML5は、まだドラフトの段階です。HTML4と違い、ブラウザの対応が完了してから勧告となるのでまだしばらくは使えない。まだまだ頻繁に変更されている。 　その前に、資料の豊富なHTML4.01strictとCSS2を徹底的に身に着けること。そのときに注意するのは、 1) divのclass名はHTML5で採用される構造化要素名やセマンティック要素名(header,footer,section,article,hgroup,nav,figure,aside)を使うこと 　例) 　　<body> 　　　<div class="header" id="TOP"> 　　　　<h1></h1> 　　　　<div class="nav"> 　　　　　<p><a href=""></a></p> 　　　　<div class="article summary"> 　　　　</div> 　　　</div> 　　　　<div class="section"> ・・・・・・・・・ 　class名にrightとかleft、あるいはr20なんて意味のないものは使わない。セマンティック(意味のある一般的なもの)を使うこと。「<FONT COLOR="red">がだめなら<span style="color:red">を使う」はだめ・・というのと同じです。 　すくなくとも上記calss名は検索エンジンは理解している。 2) HTML4.01【strict】を身に着けておくと(HTML5は4.01strictの改訂版) HTML5 differences from HTML4 ( http://www.w3.org/TR/2011/WD-html5-diff-20110525/ ) (邦訳)HTML5 における HTML4 からの変更点 ( http://standards.mitsue.co.jp/resources/w3c/TR/h … ) だけ読めばＯＫ 3) 4.01strictの「非推奨」はブラウザが対応すべき要素や属性を含む。著者はstrict以外使えないと読み替える。 4) これはHTML4.01でも書かれているがHTMLは文書構造だけを記述するものを徹底すること 　　clas="right red "などは書かないと言うこと 　HTMLやCSSだけ読んでもなにをしたいか、してるかわかるでしょ!!それがHTML5の本当の意味です。 　
http://new.myfonts.com/WhatTheFont/ ここによると。 monotype corsiva http://www.fonts.com/findfonts/detail.htm?produc … あくまで"似たような物"です。
具体的に困っているソースを貰えないと、そのものずばりの回答はできません。回答者はエスパーではないのですから。あえて質問文を深読みすると、表のような表現で縦方向のマージンが上手く取れないという質問かな？と思います。 初心者にありがちなことなら、 floatしており、高さが持てない要素にしているのに、clearしていない マージンの相殺を知らない が、2大原因かな？と思います。何のこと？と思われる場合は、一度「float 高さ」や「マージンの相殺」で検索してみてください。回り込む画像の縦サイズとありますが、floatすれば縦サイズはなくなります。フロートは回り込みさせるプロパティと解釈していれば、はまる罠です。フロートは浮動化させるもので、本来の流れから切り離し浮かせて寄せるので、高さをもてなくなります（cssの仕様）。そこに、見た目高さがあると思い込んでマージンの指定をしても、思うようにならないとなります。そして、ブラウザの一部にfloatに高さを持たせるものもあるので、一層ややこしくしています。 詳しくは、検索されると、図で説明したページがいっぱい出てきます。原因は古い情報でも構いませんが、解決法は新しい情報で、解釈に問題がないかを精査した上でご使用ください。 外れていたらごめんなさい。エスパーになりそこなったということで、具体的に困っているソースを見せてもらえると、アドバイスできるかもしれません。そのときは、モードも必要になるので、文書宣言も一緒に見せてください。
動的にHTMLを作成しているなら、画像の有無を調べて作ればよい・・たとえばperlならstat関数でも使えばよいだけだと思うのですが・ 　そもそものマークアップがわからないのでアドバイスのしようがないのですが。たとえば画像リストなら、単純に画像をその項目の背景にしてしまえばよい。 　もしくは、attributeでサイズを小さくしておいて代替文字を必ず書き、スタイルシートで画像のサイズをautoにすればよい(attributeの詳細度は０なのでスタイルシートで上書きされる。
個人レベルのホームページならiframeの方が分かりやすいかもしれませんね。 ただ、文字情報だけの更新であれば、ＰＨＰなどのサーバーサイドの方法が明らかに効率的です。 今回のケースでいえば、 1.トップページの拡張子を.phpにする。 2.更新したい箇所に<?php　include（'読み込むファイルパス'）?>を記述 3.2で指定したパスにトップページと同じ文字エンコードで読み込み先更新テキストファイルを作成 4.3のファイルを更新者に都度アップロードしてもらう 専門的な知識なんて何もいりませんし、更新ファイルはHTMLではなく、メモ帳などでつくったプレーンなテキストファイルで十分です。 余談ですが、iframeの使用は制作者の単なる「逃げ」に他なりません。代替方法はいくらでもあるはずですし、もしくはiframeが必要な状況をつくらないこともできるかと思います。趣味ならば、一番やりやすい方法でやればいいんじゃないかと思うものの、iframeを多用するweb制作業者にはお金を払うべきではないとすら思います。WEB制作業者に対しては「iframeの使用」＝「能力不足」と判断して問題ないはずです。それぐらいiframe使用によるデメリットは大きいものです。
なるほど・・皆さんの回答を見て .test div・・・子孫セレクタの意味ですね。 セレクタの基本は、単純セレクタを接続子でつなげて適用対象を特定する 　単純セレクタ 　　　タイプセレクタと全称セレクタのこと(タイプセレクタとはHTMLの要素名) 　　　例) body　　p 　　　単純セレクタに擬似要素や擬似クラスをつけて使うこともある 　　　タイプセレクタは詳細度1、全称セレクタは0 　それにつながるセレクタ 　　子孫セレクタ　半角スペースです。 　　　　body div.section p{}と言うふうに使う 　　　　div.section div{}でその子孫末代までdivに適用される。 　　子セレクタ　　>です。 　　　　body>divの場合、body div divには適用されない。直接の子孫一代のみ 　　隣接セレクタ　+です。 　　　　兄に+がいるpだけに適用 　　属性セレクタ 単純セレクタ[attr~=value][attr][attr=value][attr|=value]など 　　　　詳細度は10あります。 　　　　例) a[name]{} 属性にnameをもつa要素に適用 　　　　例) div[class~=test]　class属性の値が半角スペースで区切られているとき 　　　　　　そのうちのひとつが一致するとき　class属性については 　　　　　　div.testとまったく同じ意味を持つ 　　クラスセレクタ 　　　 [class~=value]の意味 　　　　詳細度は10 　　一意セレクタ　[id=value]と同じ、#valueとかく 　　　　例) p#test 　　　　詳細度は100になる。ひとつの文書に一度しか現れないので単純セレクタを 　　　　省略して#testでもよいが、複数の文書に共通のスタイルシートを適用する 　　　　ことも考えれば、div.section h2#testとしておくほうが無難かも 　　擬似クラス:first-child,:hoverなど 　　　　詳細度10 　　擬似要素:first-letter :first-lineなど 　　　　詳細度1 たとえば、次のようなウェブ標準マークアップされたHTMLにおいて <body> 　<div class="header"> 　　<h1>見出し</h1> 　</div> 　<div class="section"> 　　<h2>見出し</h2> 　　<div class="section"> 　　　<h3>見出し</h3> 　　　<p>文章でここは<em>重要A</em></p> 　　</div> 　</div> 　<div class="footer"> 　　<p>ここは<em>重要B</em></p> 　　<p>ここは<em>重要C</em></p> 　</div> </body> で、em{text-decoration:under-line;}ですべてのemに下線が引かれます。(詳細度は1ですね) 　div.footer em{color:red}でfooter内のemがすべて赤くなります。詳細度は12ですね。 　div.footer p+p em{font-weight:bold;}でCのみ太字になります。詳細度は14ですね。 　div em{color:green}だと、詳細度が2ですから、Aは緑になりますが、BとCは、詳細度12で赤に指定されているので上書きされませんね。 　このようにセレクタをつなげて、不必要なidやclass名をつけなくても、特定の場所を特定できるのです。 　この仕組みがカスケーディングの要のひとつです。従来のようにHTML作者がデザインを考えなくて、文書構造だけに専念してマークアップできるようにするためです。★HTMLにデザインのためにclass名やid名をつけなくてすむのです。それを覚えればね。だから便利なのです。 　
